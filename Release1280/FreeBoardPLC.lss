
FreeBoardPLC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000352  00800200  00008810  000088a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008810  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b69  00800552  00800552  00008bf6  2**0
                  ALLOC
  3 .stab         00015168  00000000  00000000  00008bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0002369b  00000000  00000000  0001dd60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000413fb  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__dtors_end>
       4:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__vector_1>
       8:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__vector_2>
       c:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <__vector_3>
      10:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__vector_4>
      14:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__vector_5>
      18:	0c 94 08 0b 	jmp	0x1610	; 0x1610 <__vector_6>
      1c:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__vector_7>
      20:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__vector_8>
      24:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      28:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      2c:	0c 94 37 18 	jmp	0x306e	; 0x306e <__vector_11>
      30:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      34:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      38:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      3c:	0c 94 77 21 	jmp	0x42ee	; 0x42ee <__vector_15>
      40:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      44:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      48:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      4c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      50:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      54:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      58:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      5c:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <__vector_23>
      60:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      64:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__vector_25>
      68:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__vector_26>
      6c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      70:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      74:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      78:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      7c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      80:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      84:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      88:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      8c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      90:	0c 94 9c 02 	jmp	0x538	; 0x538 <__vector_36>
      94:	0c 94 9b 03 	jmp	0x736	; 0x736 <__vector_37>
      98:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      9c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      a0:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      a4:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      a8:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      ac:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      b0:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      b4:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      b8:	0c 94 27 23 	jmp	0x464e	; 0x464e <__vector_46>
      bc:	0c 94 92 22 	jmp	0x4524	; 0x4524 <__vector_47>
      c0:	0c 94 8a 23 	jmp	0x4714	; 0x4714 <__vector_48>
      c4:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      c8:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      cc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_51>
      d0:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__vector_52>
      d4:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      d8:	0c 94 06 03 	jmp	0x60c	; 0x60c <__vector_54>
      dc:	0c 94 1b 04 	jmp	0x836	; 0x836 <__vector_55>
      e0:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

0000012f <digital_pin_to_timer_PGM>:
     12f:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     15b:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000175 <digital_pin_to_bit_mask_PGM>:
     175:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     185:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     195:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1a5:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1b5:	04 08 10 20 40 80                                   ... @.

000001bb <digital_pin_to_port_PGM>:
     1bb:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1cb:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1db:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1eb:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1fb:	0b 0b 0b 0b 0b 0b                                   ......

00000201 <port_to_input_PGM>:
     201:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     211:	00 01 00 00 03 01 06 01 09 01                       ..........

0000021b <port_to_output_PGM>:
     21b:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     22b:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000235 <port_to_mode_PGM>:
     235:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     245:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000024f <pstr_inf>:
     24f:	49 4e 46                                            INF

00000252 <pstr_inity>:
     252:	49 4e 49 54 59                                      INITY

00000257 <pstr_nan>:
     257:	4e 41 4e                                            NAN

0000025a <pwr_p10>:
     25a:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     26a:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000272 <pwr_m10>:
     272:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     282:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000028a <__ctors_start>:
     28a:	60 18       	sub	r6, r0
     28c:	bf 21       	and	r27, r15
     28e:	c0 32       	cpi	r28, 0x20	; 32
     290:	1a 36       	cpi	r17, 0x6A	; 106
     292:	fd 3a       	cpi	r31, 0xAD	; 173
     294:	30 3b       	cpi	r19, 0xB0	; 176

00000296 <__ctors_end>:
     296:	64 18       	sub	r6, r4
     298:	26 33       	cpi	r18, 0x36	; 54

0000029a <__dtors_end>:
     29a:	11 24       	eor	r1, r1
     29c:	1f be       	out	0x3f, r1	; 63
     29e:	cf ef       	ldi	r28, 0xFF	; 255
     2a0:	d1 e2       	ldi	r29, 0x21	; 33
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	cd bf       	out	0x3d, r28	; 61

000002a6 <__do_copy_data>:
     2a6:	15 e0       	ldi	r17, 0x05	; 5
     2a8:	a0 e0       	ldi	r26, 0x00	; 0
     2aa:	b2 e0       	ldi	r27, 0x02	; 2
     2ac:	e0 e1       	ldi	r30, 0x10	; 16
     2ae:	f8 e8       	ldi	r31, 0x88	; 136
     2b0:	00 e0       	ldi	r16, 0x00	; 0
     2b2:	0b bf       	out	0x3b, r16	; 59
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <__do_copy_data+0x14>
     2b6:	07 90       	elpm	r0, Z+
     2b8:	0d 92       	st	X+, r0
     2ba:	a2 35       	cpi	r26, 0x52	; 82
     2bc:	b1 07       	cpc	r27, r17
     2be:	d9 f7       	brne	.-10     	; 0x2b6 <__do_copy_data+0x10>

000002c0 <__do_clear_bss>:
     2c0:	10 e1       	ldi	r17, 0x10	; 16
     2c2:	a2 e5       	ldi	r26, 0x52	; 82
     2c4:	b5 e0       	ldi	r27, 0x05	; 5
     2c6:	01 c0       	rjmp	.+2      	; 0x2ca <.do_clear_bss_start>

000002c8 <.do_clear_bss_loop>:
     2c8:	1d 92       	st	X+, r1

000002ca <.do_clear_bss_start>:
     2ca:	ab 3b       	cpi	r26, 0xBB	; 187
     2cc:	b1 07       	cpc	r27, r17
     2ce:	e1 f7       	brne	.-8      	; 0x2c8 <.do_clear_bss_loop>

000002d0 <__do_global_ctors>:
     2d0:	12 e0       	ldi	r17, 0x02	; 2
     2d2:	c6 e9       	ldi	r28, 0x96	; 150
     2d4:	d2 e0       	ldi	r29, 0x02	; 2
     2d6:	00 e0       	ldi	r16, 0x00	; 0
     2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <__do_global_ctors+0x16>
     2da:	22 97       	sbiw	r28, 0x02	; 2
     2dc:	01 09       	sbc	r16, r1
     2de:	fe 01       	movw	r30, r28
     2e0:	0b bf       	out	0x3b, r16	; 59
     2e2:	0e 94 b1 40 	call	0x8162	; 0x8162 <__tablejump_elpm__>
     2e6:	ca 38       	cpi	r28, 0x8A	; 138
     2e8:	d1 07       	cpc	r29, r17
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	08 07       	cpc	r16, r24
     2ee:	a9 f7       	brne	.-22     	; 0x2da <__do_global_ctors+0xa>
     2f0:	0e 94 7c 3c 	call	0x78f8	; 0x78f8 <main>
     2f4:	0c 94 f6 43 	jmp	0x87ec	; 0x87ec <__do_global_dtors>

000002f8 <__bad_interrupt>:
     2f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002fc <_ZN14HardwareSerial9availableEv>:
     2fc:	fc 01       	movw	r30, r24
     2fe:	84 85       	ldd	r24, Z+12	; 0x0c
     300:	95 85       	ldd	r25, Z+13	; 0x0d
     302:	fc 01       	movw	r30, r24
     304:	e0 5c       	subi	r30, 0xC0	; 192
     306:	ff 4f       	sbci	r31, 0xFF	; 255
     308:	20 81       	ld	r18, Z
     30a:	31 81       	ldd	r19, Z+1	; 0x01
     30c:	fc 01       	movw	r30, r24
     30e:	ee 5b       	subi	r30, 0xBE	; 190
     310:	ff 4f       	sbci	r31, 0xFF	; 255
     312:	80 81       	ld	r24, Z
     314:	91 81       	ldd	r25, Z+1	; 0x01
     316:	28 1b       	sub	r18, r24
     318:	39 0b       	sbc	r19, r25
     31a:	2f 73       	andi	r18, 0x3F	; 63
     31c:	33 27       	eor	r19, r19
     31e:	c9 01       	movw	r24, r18
     320:	08 95       	ret

00000322 <_ZN14HardwareSerial4peekEv>:
     322:	fc 01       	movw	r30, r24
     324:	84 85       	ldd	r24, Z+12	; 0x0c
     326:	95 85       	ldd	r25, Z+13	; 0x0d
     328:	fc 01       	movw	r30, r24
     32a:	e0 5c       	subi	r30, 0xC0	; 192
     32c:	ff 4f       	sbci	r31, 0xFF	; 255
     32e:	40 81       	ld	r20, Z
     330:	51 81       	ldd	r21, Z+1	; 0x01
     332:	fc 01       	movw	r30, r24
     334:	ee 5b       	subi	r30, 0xBE	; 190
     336:	ff 4f       	sbci	r31, 0xFF	; 255
     338:	20 81       	ld	r18, Z
     33a:	31 81       	ldd	r19, Z+1	; 0x01
     33c:	42 17       	cp	r20, r18
     33e:	53 07       	cpc	r21, r19
     340:	41 f0       	breq	.+16     	; 0x352 <_ZN14HardwareSerial4peekEv+0x30>
     342:	01 90       	ld	r0, Z+
     344:	f0 81       	ld	r31, Z
     346:	e0 2d       	mov	r30, r0
     348:	e8 0f       	add	r30, r24
     34a:	f9 1f       	adc	r31, r25
     34c:	20 81       	ld	r18, Z
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	02 c0       	rjmp	.+4      	; 0x356 <_ZN14HardwareSerial4peekEv+0x34>
     352:	2f ef       	ldi	r18, 0xFF	; 255
     354:	3f ef       	ldi	r19, 0xFF	; 255
     356:	c9 01       	movw	r24, r18
     358:	08 95       	ret

0000035a <_ZN14HardwareSerial4readEv>:
     35a:	fc 01       	movw	r30, r24
     35c:	84 85       	ldd	r24, Z+12	; 0x0c
     35e:	95 85       	ldd	r25, Z+13	; 0x0d
     360:	fc 01       	movw	r30, r24
     362:	e0 5c       	subi	r30, 0xC0	; 192
     364:	ff 4f       	sbci	r31, 0xFF	; 255
     366:	40 81       	ld	r20, Z
     368:	51 81       	ldd	r21, Z+1	; 0x01
     36a:	fc 01       	movw	r30, r24
     36c:	ee 5b       	subi	r30, 0xBE	; 190
     36e:	ff 4f       	sbci	r31, 0xFF	; 255
     370:	20 81       	ld	r18, Z
     372:	31 81       	ldd	r19, Z+1	; 0x01
     374:	42 17       	cp	r20, r18
     376:	53 07       	cpc	r21, r19
     378:	71 f0       	breq	.+28     	; 0x396 <_ZN14HardwareSerial4readEv+0x3c>
     37a:	a0 81       	ld	r26, Z
     37c:	b1 81       	ldd	r27, Z+1	; 0x01
     37e:	a8 0f       	add	r26, r24
     380:	b9 1f       	adc	r27, r25
     382:	2c 91       	ld	r18, X
     384:	80 81       	ld	r24, Z
     386:	91 81       	ldd	r25, Z+1	; 0x01
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	8f 73       	andi	r24, 0x3F	; 63
     38c:	99 27       	eor	r25, r25
     38e:	91 83       	std	Z+1, r25	; 0x01
     390:	80 83       	st	Z, r24
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	02 c0       	rjmp	.+4      	; 0x39a <_ZN14HardwareSerial4readEv+0x40>
     396:	2f ef       	ldi	r18, 0xFF	; 255
     398:	3f ef       	ldi	r19, 0xFF	; 255
     39a:	c9 01       	movw	r24, r18
     39c:	08 95       	ret

0000039e <_ZN14HardwareSerial5flushEv>:
     39e:	fc 01       	movw	r30, r24
     3a0:	81 a1       	ldd	r24, Z+33	; 0x21
     3a2:	88 23       	and	r24, r24
     3a4:	29 f0       	breq	.+10     	; 0x3b0 <_ZN14HardwareSerial5flushEv+0x12>
     3a6:	a4 89       	ldd	r26, Z+20	; 0x14
     3a8:	b5 89       	ldd	r27, Z+21	; 0x15
     3aa:	8c 91       	ld	r24, X
     3ac:	86 ff       	sbrs	r24, 6
     3ae:	fb cf       	rjmp	.-10     	; 0x3a6 <_ZN14HardwareSerial5flushEv+0x8>
     3b0:	11 a2       	std	Z+33, r1	; 0x21
     3b2:	08 95       	ret

000003b4 <_ZN14HardwareSerial5writeEh>:
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	fc 01       	movw	r30, r24
     3ba:	26 85       	ldd	r18, Z+14	; 0x0e
     3bc:	37 85       	ldd	r19, Z+15	; 0x0f
     3be:	d9 01       	movw	r26, r18
     3c0:	a0 5c       	subi	r26, 0xC0	; 192
     3c2:	bf 4f       	sbci	r27, 0xFF	; 255
     3c4:	8d 91       	ld	r24, X+
     3c6:	9c 91       	ld	r25, X
     3c8:	11 97       	sbiw	r26, 0x01	; 1
     3ca:	01 96       	adiw	r24, 0x01	; 1
     3cc:	8f 73       	andi	r24, 0x3F	; 63
     3ce:	99 27       	eor	r25, r25
     3d0:	e9 01       	movw	r28, r18
     3d2:	ce 5b       	subi	r28, 0xBE	; 190
     3d4:	df 4f       	sbci	r29, 0xFF	; 255
     3d6:	48 81       	ld	r20, Y
     3d8:	59 81       	ldd	r21, Y+1	; 0x01
     3da:	84 17       	cp	r24, r20
     3dc:	95 07       	cpc	r25, r21
     3de:	d9 f3       	breq	.-10     	; 0x3d6 <_ZN14HardwareSerial5writeEh+0x22>
     3e0:	0d 90       	ld	r0, X+
     3e2:	bc 91       	ld	r27, X
     3e4:	a0 2d       	mov	r26, r0
     3e6:	a2 0f       	add	r26, r18
     3e8:	b3 1f       	adc	r27, r19
     3ea:	6c 93       	st	X, r22
     3ec:	a6 85       	ldd	r26, Z+14	; 0x0e
     3ee:	b7 85       	ldd	r27, Z+15	; 0x0f
     3f0:	a0 5c       	subi	r26, 0xC0	; 192
     3f2:	bf 4f       	sbci	r27, 0xFF	; 255
     3f4:	11 96       	adiw	r26, 0x01	; 1
     3f6:	9c 93       	st	X, r25
     3f8:	8e 93       	st	-X, r24
     3fa:	a6 89       	ldd	r26, Z+22	; 0x16
     3fc:	b7 89       	ldd	r27, Z+23	; 0x17
     3fe:	2c 91       	ld	r18, X
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	07 8c       	ldd	r0, Z+31	; 0x1f
     406:	02 c0       	rjmp	.+4      	; 0x40c <_ZN14HardwareSerial5writeEh+0x58>
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	0a 94       	dec	r0
     40e:	e2 f7       	brpl	.-8      	; 0x408 <_ZN14HardwareSerial5writeEh+0x54>
     410:	28 2b       	or	r18, r24
     412:	2c 93       	st	X, r18
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	81 a3       	std	Z+33, r24	; 0x21
     418:	04 88       	ldd	r0, Z+20	; 0x14
     41a:	f5 89       	ldd	r31, Z+21	; 0x15
     41c:	e0 2d       	mov	r30, r0
     41e:	80 81       	ld	r24, Z
     420:	80 64       	ori	r24, 0x40	; 64
     422:	80 83       	st	Z, r24
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <_ZN14HardwareSerial6write9Ehb>:
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	0f 93       	push	r16
     434:	1f 93       	push	r17
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	fc 01       	movw	r30, r24
     43c:	26 85       	ldd	r18, Z+14	; 0x0e
     43e:	37 85       	ldd	r19, Z+15	; 0x0f
     440:	d9 01       	movw	r26, r18
     442:	a0 5c       	subi	r26, 0xC0	; 192
     444:	bf 4f       	sbci	r27, 0xFF	; 255
     446:	8d 91       	ld	r24, X+
     448:	9c 91       	ld	r25, X
     44a:	11 97       	sbiw	r26, 0x01	; 1
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	8f 73       	andi	r24, 0x3F	; 63
     450:	99 27       	eor	r25, r25
     452:	89 01       	movw	r16, r18
     454:	0e 5b       	subi	r16, 0xBE	; 190
     456:	1f 4f       	sbci	r17, 0xFF	; 255
     458:	e8 01       	movw	r28, r16
     45a:	e8 80       	ld	r14, Y
     45c:	f9 80       	ldd	r15, Y+1	; 0x01
     45e:	8e 15       	cp	r24, r14
     460:	9f 05       	cpc	r25, r15
     462:	d1 f3       	breq	.-12     	; 0x458 <_ZN14HardwareSerial6write9Ehb+0x2a>
     464:	0d 90       	ld	r0, X+
     466:	bc 91       	ld	r27, X
     468:	a0 2d       	mov	r26, r0
     46a:	a2 0f       	add	r26, r18
     46c:	b3 1f       	adc	r27, r19
     46e:	6c 93       	st	X, r22
     470:	a6 85       	ldd	r26, Z+14	; 0x0e
     472:	b7 85       	ldd	r27, Z+15	; 0x0f
     474:	a0 5c       	subi	r26, 0xC0	; 192
     476:	bf 4f       	sbci	r27, 0xFF	; 255
     478:	11 96       	adiw	r26, 0x01	; 1
     47a:	9c 93       	st	X, r25
     47c:	8e 93       	st	-X, r24
     47e:	a6 89       	ldd	r26, Z+22	; 0x16
     480:	b7 89       	ldd	r27, Z+23	; 0x17
     482:	8c 91       	ld	r24, X
     484:	44 23       	and	r20, r20
     486:	11 f0       	breq	.+4      	; 0x48c <_ZN14HardwareSerial6write9Ehb+0x5e>
     488:	81 60       	ori	r24, 0x01	; 1
     48a:	01 c0       	rjmp	.+2      	; 0x48e <_ZN14HardwareSerial6write9Ehb+0x60>
     48c:	8e 7f       	andi	r24, 0xFE	; 254
     48e:	8c 93       	st	X, r24
     490:	a6 89       	ldd	r26, Z+22	; 0x16
     492:	b7 89       	ldd	r27, Z+23	; 0x17
     494:	2c 91       	ld	r18, X
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	07 8c       	ldd	r0, Z+31	; 0x1f
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <_ZN14HardwareSerial6write9Ehb+0x74>
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	0a 94       	dec	r0
     4a4:	e2 f7       	brpl	.-8      	; 0x49e <_ZN14HardwareSerial6write9Ehb+0x70>
     4a6:	28 2b       	or	r18, r24
     4a8:	2c 93       	st	X, r18
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	81 a3       	std	Z+33, r24	; 0x21
     4ae:	04 88       	ldd	r0, Z+20	; 0x14
     4b0:	f5 89       	ldd	r31, Z+21	; 0x15
     4b2:	e0 2d       	mov	r30, r0
     4b4:	80 81       	ld	r24, Z
     4b6:	80 64       	ori	r24, 0x40	; 64
     4b8:	80 83       	st	Z, r24
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	ff 90       	pop	r15
     4c8:	ef 90       	pop	r14
     4ca:	08 95       	ret
     4cc:	08 95       	ret

000004ce <__vector_25>:
     4ce:	1f 92       	push	r1
     4d0:	0f 92       	push	r0
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	0f 92       	push	r0
     4d6:	11 24       	eor	r1, r1
     4d8:	0b b6       	in	r0, 0x3b	; 59
     4da:	0f 92       	push	r0
     4dc:	1b be       	out	0x3b, r1	; 59
     4de:	2f 93       	push	r18
     4e0:	3f 93       	push	r19
     4e2:	4f 93       	push	r20
     4e4:	5f 93       	push	r21
     4e6:	6f 93       	push	r22
     4e8:	7f 93       	push	r23
     4ea:	8f 93       	push	r24
     4ec:	9f 93       	push	r25
     4ee:	af 93       	push	r26
     4f0:	bf 93       	push	r27
     4f2:	ef 93       	push	r30
     4f4:	ff 93       	push	r31
     4f6:	80 91 c0 00 	lds	r24, 0x00C0
     4fa:	82 fd       	sbrc	r24, 2
     4fc:	07 c0       	rjmp	.+14     	; 0x50c <__vector_25+0x3e>
     4fe:	80 91 c6 00 	lds	r24, 0x00C6
     502:	66 eb       	ldi	r22, 0xB6	; 182
     504:	77 e0       	ldi	r23, 0x07	; 7
     506:	0e 94 17 3b 	call	0x762e	; 0x762e <_Z10store_charhP11ring_buffer>
     50a:	02 c0       	rjmp	.+4      	; 0x510 <__vector_25+0x42>
     50c:	80 91 c6 00 	lds	r24, 0x00C6
     510:	ff 91       	pop	r31
     512:	ef 91       	pop	r30
     514:	bf 91       	pop	r27
     516:	af 91       	pop	r26
     518:	9f 91       	pop	r25
     51a:	8f 91       	pop	r24
     51c:	7f 91       	pop	r23
     51e:	6f 91       	pop	r22
     520:	5f 91       	pop	r21
     522:	4f 91       	pop	r20
     524:	3f 91       	pop	r19
     526:	2f 91       	pop	r18
     528:	0f 90       	pop	r0
     52a:	0b be       	out	0x3b, r0	; 59
     52c:	0f 90       	pop	r0
     52e:	0f be       	out	0x3f, r0	; 63
     530:	0f 90       	pop	r0
     532:	1f 90       	pop	r1
     534:	18 95       	reti
     536:	08 95       	ret

00000538 <__vector_36>:
     538:	1f 92       	push	r1
     53a:	0f 92       	push	r0
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	0f 92       	push	r0
     540:	11 24       	eor	r1, r1
     542:	0b b6       	in	r0, 0x3b	; 59
     544:	0f 92       	push	r0
     546:	1b be       	out	0x3b, r1	; 59
     548:	2f 93       	push	r18
     54a:	3f 93       	push	r19
     54c:	4f 93       	push	r20
     54e:	5f 93       	push	r21
     550:	6f 93       	push	r22
     552:	7f 93       	push	r23
     554:	8f 93       	push	r24
     556:	9f 93       	push	r25
     558:	af 93       	push	r26
     55a:	bf 93       	push	r27
     55c:	ef 93       	push	r30
     55e:	ff 93       	push	r31
     560:	80 91 c8 00 	lds	r24, 0x00C8
     564:	82 fd       	sbrc	r24, 2
     566:	07 c0       	rjmp	.+14     	; 0x576 <__vector_36+0x3e>
     568:	80 91 ce 00 	lds	r24, 0x00CE
     56c:	6e e2       	ldi	r22, 0x2E	; 46
     56e:	77 e0       	ldi	r23, 0x07	; 7
     570:	0e 94 17 3b 	call	0x762e	; 0x762e <_Z10store_charhP11ring_buffer>
     574:	02 c0       	rjmp	.+4      	; 0x57a <__vector_36+0x42>
     576:	80 91 ce 00 	lds	r24, 0x00CE
     57a:	ff 91       	pop	r31
     57c:	ef 91       	pop	r30
     57e:	bf 91       	pop	r27
     580:	af 91       	pop	r26
     582:	9f 91       	pop	r25
     584:	8f 91       	pop	r24
     586:	7f 91       	pop	r23
     588:	6f 91       	pop	r22
     58a:	5f 91       	pop	r21
     58c:	4f 91       	pop	r20
     58e:	3f 91       	pop	r19
     590:	2f 91       	pop	r18
     592:	0f 90       	pop	r0
     594:	0b be       	out	0x3b, r0	; 59
     596:	0f 90       	pop	r0
     598:	0f be       	out	0x3f, r0	; 63
     59a:	0f 90       	pop	r0
     59c:	1f 90       	pop	r1
     59e:	18 95       	reti
     5a0:	08 95       	ret

000005a2 <__vector_51>:
     5a2:	1f 92       	push	r1
     5a4:	0f 92       	push	r0
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	0f 92       	push	r0
     5aa:	11 24       	eor	r1, r1
     5ac:	0b b6       	in	r0, 0x3b	; 59
     5ae:	0f 92       	push	r0
     5b0:	1b be       	out	0x3b, r1	; 59
     5b2:	2f 93       	push	r18
     5b4:	3f 93       	push	r19
     5b6:	4f 93       	push	r20
     5b8:	5f 93       	push	r21
     5ba:	6f 93       	push	r22
     5bc:	7f 93       	push	r23
     5be:	8f 93       	push	r24
     5c0:	9f 93       	push	r25
     5c2:	af 93       	push	r26
     5c4:	bf 93       	push	r27
     5c6:	ef 93       	push	r30
     5c8:	ff 93       	push	r31
     5ca:	80 91 d0 00 	lds	r24, 0x00D0
     5ce:	82 fd       	sbrc	r24, 2
     5d0:	07 c0       	rjmp	.+14     	; 0x5e0 <__vector_51+0x3e>
     5d2:	80 91 d6 00 	lds	r24, 0x00D6
     5d6:	66 ea       	ldi	r22, 0xA6	; 166
     5d8:	76 e0       	ldi	r23, 0x06	; 6
     5da:	0e 94 17 3b 	call	0x762e	; 0x762e <_Z10store_charhP11ring_buffer>
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <__vector_51+0x42>
     5e0:	80 91 d6 00 	lds	r24, 0x00D6
     5e4:	ff 91       	pop	r31
     5e6:	ef 91       	pop	r30
     5e8:	bf 91       	pop	r27
     5ea:	af 91       	pop	r26
     5ec:	9f 91       	pop	r25
     5ee:	8f 91       	pop	r24
     5f0:	7f 91       	pop	r23
     5f2:	6f 91       	pop	r22
     5f4:	5f 91       	pop	r21
     5f6:	4f 91       	pop	r20
     5f8:	3f 91       	pop	r19
     5fa:	2f 91       	pop	r18
     5fc:	0f 90       	pop	r0
     5fe:	0b be       	out	0x3b, r0	; 59
     600:	0f 90       	pop	r0
     602:	0f be       	out	0x3f, r0	; 63
     604:	0f 90       	pop	r0
     606:	1f 90       	pop	r1
     608:	18 95       	reti
     60a:	08 95       	ret

0000060c <__vector_54>:
     60c:	1f 92       	push	r1
     60e:	0f 92       	push	r0
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	0f 92       	push	r0
     614:	11 24       	eor	r1, r1
     616:	0b b6       	in	r0, 0x3b	; 59
     618:	0f 92       	push	r0
     61a:	1b be       	out	0x3b, r1	; 59
     61c:	2f 93       	push	r18
     61e:	3f 93       	push	r19
     620:	4f 93       	push	r20
     622:	5f 93       	push	r21
     624:	6f 93       	push	r22
     626:	7f 93       	push	r23
     628:	8f 93       	push	r24
     62a:	9f 93       	push	r25
     62c:	af 93       	push	r26
     62e:	bf 93       	push	r27
     630:	ef 93       	push	r30
     632:	ff 93       	push	r31
     634:	80 91 30 01 	lds	r24, 0x0130
     638:	82 fd       	sbrc	r24, 2
     63a:	07 c0       	rjmp	.+14     	; 0x64a <__vector_54+0x3e>
     63c:	80 91 36 01 	lds	r24, 0x0136
     640:	6e e1       	ldi	r22, 0x1E	; 30
     642:	76 e0       	ldi	r23, 0x06	; 6
     644:	0e 94 17 3b 	call	0x762e	; 0x762e <_Z10store_charhP11ring_buffer>
     648:	02 c0       	rjmp	.+4      	; 0x64e <__vector_54+0x42>
     64a:	80 91 36 01 	lds	r24, 0x0136
     64e:	ff 91       	pop	r31
     650:	ef 91       	pop	r30
     652:	bf 91       	pop	r27
     654:	af 91       	pop	r26
     656:	9f 91       	pop	r25
     658:	8f 91       	pop	r24
     65a:	7f 91       	pop	r23
     65c:	6f 91       	pop	r22
     65e:	5f 91       	pop	r21
     660:	4f 91       	pop	r20
     662:	3f 91       	pop	r19
     664:	2f 91       	pop	r18
     666:	0f 90       	pop	r0
     668:	0b be       	out	0x3b, r0	; 59
     66a:	0f 90       	pop	r0
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	0f 90       	pop	r0
     670:	1f 90       	pop	r1
     672:	18 95       	reti

00000674 <_Z14serialEventRunv>:
     674:	88 eb       	ldi	r24, 0xB8	; 184
     676:	95 e0       	ldi	r25, 0x05	; 5
     678:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN14HardwareSerial9availableEv>
     67c:	89 2b       	or	r24, r25
     67e:	11 f0       	breq	.+4      	; 0x684 <_Z14serialEventRunv+0x10>
     680:	0e 94 66 32 	call	0x64cc	; 0x64cc <_Z11serialEventv>
     684:	86 e9       	ldi	r24, 0x96	; 150
     686:	95 e0       	ldi	r25, 0x05	; 5
     688:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN14HardwareSerial9availableEv>
     68c:	89 2b       	or	r24, r25
     68e:	11 f0       	breq	.+4      	; 0x694 <_Z14serialEventRunv+0x20>
     690:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <_Z12serialEvent1v>
     694:	84 e7       	ldi	r24, 0x74	; 116
     696:	95 e0       	ldi	r25, 0x05	; 5
     698:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN14HardwareSerial9availableEv>
     69c:	89 2b       	or	r24, r25
     69e:	11 f0       	breq	.+4      	; 0x6a4 <_Z14serialEventRunv+0x30>
     6a0:	0e 94 21 30 	call	0x6042	; 0x6042 <_Z12serialEvent2v>
     6a4:	82 e5       	ldi	r24, 0x52	; 82
     6a6:	95 e0       	ldi	r25, 0x05	; 5
     6a8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN14HardwareSerial9availableEv>
     6ac:	89 2b       	or	r24, r25
     6ae:	11 f0       	breq	.+4      	; 0x6b4 <_Z14serialEventRunv+0x40>
     6b0:	0c 94 32 30 	jmp	0x6064	; 0x6064 <_Z12serialEvent3v>
     6b4:	08 95       	ret

000006b6 <__vector_26>:
     6b6:	1f 92       	push	r1
     6b8:	0f 92       	push	r0
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	0f 92       	push	r0
     6be:	11 24       	eor	r1, r1
     6c0:	0b b6       	in	r0, 0x3b	; 59
     6c2:	0f 92       	push	r0
     6c4:	1b be       	out	0x3b, r1	; 59
     6c6:	2f 93       	push	r18
     6c8:	3f 93       	push	r19
     6ca:	8f 93       	push	r24
     6cc:	9f 93       	push	r25
     6ce:	ef 93       	push	r30
     6d0:	ff 93       	push	r31
     6d2:	20 91 b2 07 	lds	r18, 0x07B2
     6d6:	30 91 b3 07 	lds	r19, 0x07B3
     6da:	80 91 b4 07 	lds	r24, 0x07B4
     6de:	90 91 b5 07 	lds	r25, 0x07B5
     6e2:	28 17       	cp	r18, r24
     6e4:	39 07       	cpc	r19, r25
     6e6:	31 f4       	brne	.+12     	; 0x6f4 <__vector_26+0x3e>
     6e8:	80 91 c1 00 	lds	r24, 0x00C1
     6ec:	8f 7d       	andi	r24, 0xDF	; 223
     6ee:	80 93 c1 00 	sts	0x00C1, r24
     6f2:	14 c0       	rjmp	.+40     	; 0x71c <__vector_26+0x66>
     6f4:	e0 91 b4 07 	lds	r30, 0x07B4
     6f8:	f0 91 b5 07 	lds	r31, 0x07B5
     6fc:	ee 58       	subi	r30, 0x8E	; 142
     6fe:	f8 4f       	sbci	r31, 0xF8	; 248
     700:	20 81       	ld	r18, Z
     702:	80 91 b4 07 	lds	r24, 0x07B4
     706:	90 91 b5 07 	lds	r25, 0x07B5
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	8f 73       	andi	r24, 0x3F	; 63
     70e:	99 27       	eor	r25, r25
     710:	90 93 b5 07 	sts	0x07B5, r25
     714:	80 93 b4 07 	sts	0x07B4, r24
     718:	20 93 c6 00 	sts	0x00C6, r18
     71c:	ff 91       	pop	r31
     71e:	ef 91       	pop	r30
     720:	9f 91       	pop	r25
     722:	8f 91       	pop	r24
     724:	3f 91       	pop	r19
     726:	2f 91       	pop	r18
     728:	0f 90       	pop	r0
     72a:	0b be       	out	0x3b, r0	; 59
     72c:	0f 90       	pop	r0
     72e:	0f be       	out	0x3f, r0	; 63
     730:	0f 90       	pop	r0
     732:	1f 90       	pop	r1
     734:	18 95       	reti

00000736 <__vector_37>:
     736:	1f 92       	push	r1
     738:	0f 92       	push	r0
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	0f 92       	push	r0
     73e:	11 24       	eor	r1, r1
     740:	0b b6       	in	r0, 0x3b	; 59
     742:	0f 92       	push	r0
     744:	1b be       	out	0x3b, r1	; 59
     746:	2f 93       	push	r18
     748:	3f 93       	push	r19
     74a:	8f 93       	push	r24
     74c:	9f 93       	push	r25
     74e:	ef 93       	push	r30
     750:	ff 93       	push	r31
     752:	20 91 2a 07 	lds	r18, 0x072A
     756:	30 91 2b 07 	lds	r19, 0x072B
     75a:	80 91 2c 07 	lds	r24, 0x072C
     75e:	90 91 2d 07 	lds	r25, 0x072D
     762:	28 17       	cp	r18, r24
     764:	39 07       	cpc	r19, r25
     766:	31 f4       	brne	.+12     	; 0x774 <__vector_37+0x3e>
     768:	80 91 c9 00 	lds	r24, 0x00C9
     76c:	8f 7d       	andi	r24, 0xDF	; 223
     76e:	80 93 c9 00 	sts	0x00C9, r24
     772:	14 c0       	rjmp	.+40     	; 0x79c <__vector_37+0x66>
     774:	e0 91 2c 07 	lds	r30, 0x072C
     778:	f0 91 2d 07 	lds	r31, 0x072D
     77c:	e6 51       	subi	r30, 0x16	; 22
     77e:	f9 4f       	sbci	r31, 0xF9	; 249
     780:	20 81       	ld	r18, Z
     782:	80 91 2c 07 	lds	r24, 0x072C
     786:	90 91 2d 07 	lds	r25, 0x072D
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	8f 73       	andi	r24, 0x3F	; 63
     78e:	99 27       	eor	r25, r25
     790:	90 93 2d 07 	sts	0x072D, r25
     794:	80 93 2c 07 	sts	0x072C, r24
     798:	20 93 ce 00 	sts	0x00CE, r18
     79c:	ff 91       	pop	r31
     79e:	ef 91       	pop	r30
     7a0:	9f 91       	pop	r25
     7a2:	8f 91       	pop	r24
     7a4:	3f 91       	pop	r19
     7a6:	2f 91       	pop	r18
     7a8:	0f 90       	pop	r0
     7aa:	0b be       	out	0x3b, r0	; 59
     7ac:	0f 90       	pop	r0
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	0f 90       	pop	r0
     7b2:	1f 90       	pop	r1
     7b4:	18 95       	reti

000007b6 <__vector_52>:
     7b6:	1f 92       	push	r1
     7b8:	0f 92       	push	r0
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	0f 92       	push	r0
     7be:	11 24       	eor	r1, r1
     7c0:	0b b6       	in	r0, 0x3b	; 59
     7c2:	0f 92       	push	r0
     7c4:	1b be       	out	0x3b, r1	; 59
     7c6:	2f 93       	push	r18
     7c8:	3f 93       	push	r19
     7ca:	8f 93       	push	r24
     7cc:	9f 93       	push	r25
     7ce:	ef 93       	push	r30
     7d0:	ff 93       	push	r31
     7d2:	20 91 a2 06 	lds	r18, 0x06A2
     7d6:	30 91 a3 06 	lds	r19, 0x06A3
     7da:	80 91 a4 06 	lds	r24, 0x06A4
     7de:	90 91 a5 06 	lds	r25, 0x06A5
     7e2:	28 17       	cp	r18, r24
     7e4:	39 07       	cpc	r19, r25
     7e6:	31 f4       	brne	.+12     	; 0x7f4 <__vector_52+0x3e>
     7e8:	80 91 d1 00 	lds	r24, 0x00D1
     7ec:	8f 7d       	andi	r24, 0xDF	; 223
     7ee:	80 93 d1 00 	sts	0x00D1, r24
     7f2:	14 c0       	rjmp	.+40     	; 0x81c <__vector_52+0x66>
     7f4:	e0 91 a4 06 	lds	r30, 0x06A4
     7f8:	f0 91 a5 06 	lds	r31, 0x06A5
     7fc:	ee 59       	subi	r30, 0x9E	; 158
     7fe:	f9 4f       	sbci	r31, 0xF9	; 249
     800:	20 81       	ld	r18, Z
     802:	80 91 a4 06 	lds	r24, 0x06A4
     806:	90 91 a5 06 	lds	r25, 0x06A5
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	8f 73       	andi	r24, 0x3F	; 63
     80e:	99 27       	eor	r25, r25
     810:	90 93 a5 06 	sts	0x06A5, r25
     814:	80 93 a4 06 	sts	0x06A4, r24
     818:	20 93 d6 00 	sts	0x00D6, r18
     81c:	ff 91       	pop	r31
     81e:	ef 91       	pop	r30
     820:	9f 91       	pop	r25
     822:	8f 91       	pop	r24
     824:	3f 91       	pop	r19
     826:	2f 91       	pop	r18
     828:	0f 90       	pop	r0
     82a:	0b be       	out	0x3b, r0	; 59
     82c:	0f 90       	pop	r0
     82e:	0f be       	out	0x3f, r0	; 63
     830:	0f 90       	pop	r0
     832:	1f 90       	pop	r1
     834:	18 95       	reti

00000836 <__vector_55>:
     836:	1f 92       	push	r1
     838:	0f 92       	push	r0
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	0f 92       	push	r0
     83e:	11 24       	eor	r1, r1
     840:	0b b6       	in	r0, 0x3b	; 59
     842:	0f 92       	push	r0
     844:	1b be       	out	0x3b, r1	; 59
     846:	2f 93       	push	r18
     848:	3f 93       	push	r19
     84a:	8f 93       	push	r24
     84c:	9f 93       	push	r25
     84e:	ef 93       	push	r30
     850:	ff 93       	push	r31
     852:	20 91 1a 06 	lds	r18, 0x061A
     856:	30 91 1b 06 	lds	r19, 0x061B
     85a:	80 91 1c 06 	lds	r24, 0x061C
     85e:	90 91 1d 06 	lds	r25, 0x061D
     862:	28 17       	cp	r18, r24
     864:	39 07       	cpc	r19, r25
     866:	31 f4       	brne	.+12     	; 0x874 <__vector_55+0x3e>
     868:	80 91 31 01 	lds	r24, 0x0131
     86c:	8f 7d       	andi	r24, 0xDF	; 223
     86e:	80 93 31 01 	sts	0x0131, r24
     872:	14 c0       	rjmp	.+40     	; 0x89c <__vector_55+0x66>
     874:	e0 91 1c 06 	lds	r30, 0x061C
     878:	f0 91 1d 06 	lds	r31, 0x061D
     87c:	e6 52       	subi	r30, 0x26	; 38
     87e:	fa 4f       	sbci	r31, 0xFA	; 250
     880:	20 81       	ld	r18, Z
     882:	80 91 1c 06 	lds	r24, 0x061C
     886:	90 91 1d 06 	lds	r25, 0x061D
     88a:	01 96       	adiw	r24, 0x01	; 1
     88c:	8f 73       	andi	r24, 0x3F	; 63
     88e:	99 27       	eor	r25, r25
     890:	90 93 1d 06 	sts	0x061D, r25
     894:	80 93 1c 06 	sts	0x061C, r24
     898:	20 93 36 01 	sts	0x0136, r18
     89c:	ff 91       	pop	r31
     89e:	ef 91       	pop	r30
     8a0:	9f 91       	pop	r25
     8a2:	8f 91       	pop	r24
     8a4:	3f 91       	pop	r19
     8a6:	2f 91       	pop	r18
     8a8:	0f 90       	pop	r0
     8aa:	0b be       	out	0x3b, r0	; 59
     8ac:	0f 90       	pop	r0
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	0f 90       	pop	r0
     8b2:	1f 90       	pop	r1
     8b4:	18 95       	reti

000008b6 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
     8b6:	4f 92       	push	r4
     8b8:	5f 92       	push	r5
     8ba:	6f 92       	push	r6
     8bc:	7f 92       	push	r7
     8be:	8f 92       	push	r8
     8c0:	9f 92       	push	r9
     8c2:	af 92       	push	r10
     8c4:	bf 92       	push	r11
     8c6:	cf 92       	push	r12
     8c8:	df 92       	push	r13
     8ca:	ef 92       	push	r14
     8cc:	ff 92       	push	r15
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	fc 01       	movw	r30, r24
     8dc:	13 82       	std	Z+3, r1	; 0x03
     8de:	12 82       	std	Z+2, r1	; 0x02
     8e0:	88 ee       	ldi	r24, 0xE8	; 232
     8e2:	48 2e       	mov	r4, r24
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	58 2e       	mov	r5, r24
     8e8:	61 2c       	mov	r6, r1
     8ea:	71 2c       	mov	r7, r1
     8ec:	44 82       	std	Z+4, r4	; 0x04
     8ee:	55 82       	std	Z+5, r5	; 0x05
     8f0:	66 82       	std	Z+6, r6	; 0x06
     8f2:	77 82       	std	Z+7, r7	; 0x07
     8f4:	88 e3       	ldi	r24, 0x38	; 56
     8f6:	95 e0       	ldi	r25, 0x05	; 5
     8f8:	91 83       	std	Z+1, r25	; 0x01
     8fa:	80 83       	st	Z, r24
     8fc:	75 87       	std	Z+13, r23	; 0x0d
     8fe:	64 87       	std	Z+12, r22	; 0x0c
     900:	57 87       	std	Z+15, r21	; 0x0f
     902:	46 87       	std	Z+14, r20	; 0x0e
     904:	31 8b       	std	Z+17, r19	; 0x11
     906:	20 8b       	std	Z+16, r18	; 0x10
     908:	13 8b       	std	Z+19, r17	; 0x13
     90a:	02 8b       	std	Z+18, r16	; 0x12
     90c:	f5 8a       	std	Z+21, r15	; 0x15
     90e:	e4 8a       	std	Z+20, r14	; 0x14
     910:	d7 8a       	std	Z+23, r13	; 0x17
     912:	c6 8a       	std	Z+22, r12	; 0x16
     914:	b1 8e       	std	Z+25, r11	; 0x19
     916:	a0 8e       	std	Z+24, r10	; 0x18
     918:	93 8e       	std	Z+27, r9	; 0x1b
     91a:	82 8e       	std	Z+26, r8	; 0x1a
     91c:	8b 89       	ldd	r24, Y+19	; 0x13
     91e:	84 8f       	std	Z+28, r24	; 0x1c
     920:	8c 89       	ldd	r24, Y+20	; 0x14
     922:	85 8f       	std	Z+29, r24	; 0x1d
     924:	8d 89       	ldd	r24, Y+21	; 0x15
     926:	86 8f       	std	Z+30, r24	; 0x1e
     928:	8e 89       	ldd	r24, Y+22	; 0x16
     92a:	87 8f       	std	Z+31, r24	; 0x1f
     92c:	8f 89       	ldd	r24, Y+23	; 0x17
     92e:	80 a3       	std	Z+32, r24	; 0x20
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	df 90       	pop	r13
     93e:	cf 90       	pop	r12
     940:	bf 90       	pop	r11
     942:	af 90       	pop	r10
     944:	9f 90       	pop	r9
     946:	8f 90       	pop	r8
     948:	7f 90       	pop	r7
     94a:	6f 90       	pop	r6
     94c:	5f 90       	pop	r5
     94e:	4f 90       	pop	r4
     950:	08 95       	ret

00000952 <_ZN14HardwareSerial5beginEm>:
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ec 01       	movw	r28, r24
     960:	6a 01       	movw	r12, r20
     962:	7b 01       	movw	r14, r22
     964:	41 15       	cp	r20, r1
     966:	81 ee       	ldi	r24, 0xE1	; 225
     968:	58 07       	cpc	r21, r24
     96a:	61 05       	cpc	r22, r1
     96c:	71 05       	cpc	r23, r1
     96e:	f9 f0       	breq	.+62     	; 0x9ae <_ZN14HardwareSerial5beginEm+0x5c>
     970:	ec 89       	ldd	r30, Y+20	; 0x14
     972:	fd 89       	ldd	r31, Y+21	; 0x15
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	08 a0       	ldd	r0, Y+32	; 0x20
     97a:	02 c0       	rjmp	.+4      	; 0x980 <_ZN14HardwareSerial5beginEm+0x2e>
     97c:	88 0f       	add	r24, r24
     97e:	99 1f       	adc	r25, r25
     980:	0a 94       	dec	r0
     982:	e2 f7       	brpl	.-8      	; 0x97c <_ZN14HardwareSerial5beginEm+0x2a>
     984:	80 83       	st	Z, r24
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	79 e0       	ldi	r23, 0x09	; 9
     98a:	8d e3       	ldi	r24, 0x3D	; 61
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	a7 01       	movw	r20, r14
     990:	96 01       	movw	r18, r12
     992:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__udivmodsi4>
     996:	21 50       	subi	r18, 0x01	; 1
     998:	31 09       	sbc	r19, r1
     99a:	41 09       	sbc	r20, r1
     99c:	51 09       	sbc	r21, r1
     99e:	56 95       	lsr	r21
     9a0:	47 95       	ror	r20
     9a2:	37 95       	ror	r19
     9a4:	27 95       	ror	r18
     9a6:	21 15       	cp	r18, r1
     9a8:	80 e1       	ldi	r24, 0x10	; 16
     9aa:	38 07       	cpc	r19, r24
     9ac:	98 f0       	brcs	.+38     	; 0x9d4 <_ZN14HardwareSerial5beginEm+0x82>
     9ae:	ec 89       	ldd	r30, Y+20	; 0x14
     9b0:	fd 89       	ldd	r31, Y+21	; 0x15
     9b2:	10 82       	st	Z, r1
     9b4:	60 e8       	ldi	r22, 0x80	; 128
     9b6:	74 e8       	ldi	r23, 0x84	; 132
     9b8:	8e e1       	ldi	r24, 0x1E	; 30
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	a7 01       	movw	r20, r14
     9be:	96 01       	movw	r18, r12
     9c0:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__udivmodsi4>
     9c4:	21 50       	subi	r18, 0x01	; 1
     9c6:	31 09       	sbc	r19, r1
     9c8:	41 09       	sbc	r20, r1
     9ca:	51 09       	sbc	r21, r1
     9cc:	56 95       	lsr	r21
     9ce:	47 95       	ror	r20
     9d0:	37 95       	ror	r19
     9d2:	27 95       	ror	r18
     9d4:	e8 89       	ldd	r30, Y+16	; 0x10
     9d6:	f9 89       	ldd	r31, Y+17	; 0x11
     9d8:	30 83       	st	Z, r19
     9da:	ea 89       	ldd	r30, Y+18	; 0x12
     9dc:	fb 89       	ldd	r31, Y+19	; 0x13
     9de:	20 83       	st	Z, r18
     9e0:	19 a2       	std	Y+33, r1	; 0x21
     9e2:	ee 89       	ldd	r30, Y+22	; 0x16
     9e4:	ff 89       	ldd	r31, Y+23	; 0x17
     9e6:	40 81       	ld	r20, Z
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	9c 01       	movw	r18, r24
     9ee:	0c 8c       	ldd	r0, Y+28	; 0x1c
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <_ZN14HardwareSerial5beginEm+0xa4>
     9f2:	22 0f       	add	r18, r18
     9f4:	33 1f       	adc	r19, r19
     9f6:	0a 94       	dec	r0
     9f8:	e2 f7       	brpl	.-8      	; 0x9f2 <_ZN14HardwareSerial5beginEm+0xa0>
     9fa:	42 2b       	or	r20, r18
     9fc:	40 83       	st	Z, r20
     9fe:	ee 89       	ldd	r30, Y+22	; 0x16
     a00:	ff 89       	ldd	r31, Y+23	; 0x17
     a02:	40 81       	ld	r20, Z
     a04:	9c 01       	movw	r18, r24
     a06:	0d 8c       	ldd	r0, Y+29	; 0x1d
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <_ZN14HardwareSerial5beginEm+0xbc>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	0a 94       	dec	r0
     a10:	e2 f7       	brpl	.-8      	; 0xa0a <_ZN14HardwareSerial5beginEm+0xb8>
     a12:	42 2b       	or	r20, r18
     a14:	40 83       	st	Z, r20
     a16:	ee 89       	ldd	r30, Y+22	; 0x16
     a18:	ff 89       	ldd	r31, Y+23	; 0x17
     a1a:	40 81       	ld	r20, Z
     a1c:	9c 01       	movw	r18, r24
     a1e:	0e 8c       	ldd	r0, Y+30	; 0x1e
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <_ZN14HardwareSerial5beginEm+0xd4>
     a22:	22 0f       	add	r18, r18
     a24:	33 1f       	adc	r19, r19
     a26:	0a 94       	dec	r0
     a28:	e2 f7       	brpl	.-8      	; 0xa22 <_ZN14HardwareSerial5beginEm+0xd0>
     a2a:	42 2b       	or	r20, r18
     a2c:	40 83       	st	Z, r20
     a2e:	ee 89       	ldd	r30, Y+22	; 0x16
     a30:	ff 89       	ldd	r31, Y+23	; 0x17
     a32:	20 81       	ld	r18, Z
     a34:	0f 8c       	ldd	r0, Y+31	; 0x1f
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <_ZN14HardwareSerial5beginEm+0xea>
     a38:	88 0f       	add	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	0a 94       	dec	r0
     a3e:	e2 f7       	brpl	.-8      	; 0xa38 <_ZN14HardwareSerial5beginEm+0xe6>
     a40:	80 95       	com	r24
     a42:	82 23       	and	r24, r18
     a44:	80 83       	st	Z, r24
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	08 95       	ret

00000a54 <_ZN14HardwareSerial5beginEmh>:
     a54:	bf 92       	push	r11
     a56:	cf 92       	push	r12
     a58:	df 92       	push	r13
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	ec 01       	movw	r28, r24
     a64:	6a 01       	movw	r12, r20
     a66:	7b 01       	movw	r14, r22
     a68:	b2 2e       	mov	r11, r18
     a6a:	41 15       	cp	r20, r1
     a6c:	81 ee       	ldi	r24, 0xE1	; 225
     a6e:	58 07       	cpc	r21, r24
     a70:	61 05       	cpc	r22, r1
     a72:	71 05       	cpc	r23, r1
     a74:	f9 f0       	breq	.+62     	; 0xab4 <_ZN14HardwareSerial5beginEmh+0x60>
     a76:	ec 89       	ldd	r30, Y+20	; 0x14
     a78:	fd 89       	ldd	r31, Y+21	; 0x15
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	08 a0       	ldd	r0, Y+32	; 0x20
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <_ZN14HardwareSerial5beginEmh+0x32>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	0a 94       	dec	r0
     a88:	e2 f7       	brpl	.-8      	; 0xa82 <_ZN14HardwareSerial5beginEmh+0x2e>
     a8a:	80 83       	st	Z, r24
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	79 e0       	ldi	r23, 0x09	; 9
     a90:	8d e3       	ldi	r24, 0x3D	; 61
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a7 01       	movw	r20, r14
     a96:	96 01       	movw	r18, r12
     a98:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__udivmodsi4>
     a9c:	21 50       	subi	r18, 0x01	; 1
     a9e:	31 09       	sbc	r19, r1
     aa0:	41 09       	sbc	r20, r1
     aa2:	51 09       	sbc	r21, r1
     aa4:	56 95       	lsr	r21
     aa6:	47 95       	ror	r20
     aa8:	37 95       	ror	r19
     aaa:	27 95       	ror	r18
     aac:	21 15       	cp	r18, r1
     aae:	80 e1       	ldi	r24, 0x10	; 16
     ab0:	38 07       	cpc	r19, r24
     ab2:	98 f0       	brcs	.+38     	; 0xada <_ZN14HardwareSerial5beginEmh+0x86>
     ab4:	ec 89       	ldd	r30, Y+20	; 0x14
     ab6:	fd 89       	ldd	r31, Y+21	; 0x15
     ab8:	10 82       	st	Z, r1
     aba:	60 e8       	ldi	r22, 0x80	; 128
     abc:	74 e8       	ldi	r23, 0x84	; 132
     abe:	8e e1       	ldi	r24, 0x1E	; 30
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a7 01       	movw	r20, r14
     ac4:	96 01       	movw	r18, r12
     ac6:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__udivmodsi4>
     aca:	21 50       	subi	r18, 0x01	; 1
     acc:	31 09       	sbc	r19, r1
     ace:	41 09       	sbc	r20, r1
     ad0:	51 09       	sbc	r21, r1
     ad2:	56 95       	lsr	r21
     ad4:	47 95       	ror	r20
     ad6:	37 95       	ror	r19
     ad8:	27 95       	ror	r18
     ada:	e8 89       	ldd	r30, Y+16	; 0x10
     adc:	f9 89       	ldd	r31, Y+17	; 0x11
     ade:	30 83       	st	Z, r19
     ae0:	ea 89       	ldd	r30, Y+18	; 0x12
     ae2:	fb 89       	ldd	r31, Y+19	; 0x13
     ae4:	20 83       	st	Z, r18
     ae6:	87 e0       	ldi	r24, 0x07	; 7
     ae8:	b8 12       	cpse	r11, r24
     aea:	0a c0       	rjmp	.+20     	; 0xb00 <_ZN14HardwareSerial5beginEmh+0xac>
     aec:	e8 8d       	ldd	r30, Y+24	; 0x18
     aee:	f9 8d       	ldd	r31, Y+25	; 0x19
     af0:	86 e0       	ldi	r24, 0x06	; 6
     af2:	80 83       	st	Z, r24
     af4:	ee 89       	ldd	r30, Y+22	; 0x16
     af6:	ff 89       	ldd	r31, Y+23	; 0x17
     af8:	80 81       	ld	r24, Z
     afa:	84 60       	ori	r24, 0x04	; 4
     afc:	80 83       	st	Z, r24
     afe:	08 c0       	rjmp	.+16     	; 0xb10 <_ZN14HardwareSerial5beginEmh+0xbc>
     b00:	ee 89       	ldd	r30, Y+22	; 0x16
     b02:	ff 89       	ldd	r31, Y+23	; 0x17
     b04:	80 81       	ld	r24, Z
     b06:	84 70       	andi	r24, 0x04	; 4
     b08:	80 83       	st	Z, r24
     b0a:	e8 8d       	ldd	r30, Y+24	; 0x18
     b0c:	f9 8d       	ldd	r31, Y+25	; 0x19
     b0e:	b0 82       	st	Z, r11
     b10:	ee 89       	ldd	r30, Y+22	; 0x16
     b12:	ff 89       	ldd	r31, Y+23	; 0x17
     b14:	40 81       	ld	r20, Z
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	9c 01       	movw	r18, r24
     b1c:	0c 8c       	ldd	r0, Y+28	; 0x1c
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <_ZN14HardwareSerial5beginEmh+0xd0>
     b20:	22 0f       	add	r18, r18
     b22:	33 1f       	adc	r19, r19
     b24:	0a 94       	dec	r0
     b26:	e2 f7       	brpl	.-8      	; 0xb20 <_ZN14HardwareSerial5beginEmh+0xcc>
     b28:	42 2b       	or	r20, r18
     b2a:	40 83       	st	Z, r20
     b2c:	ee 89       	ldd	r30, Y+22	; 0x16
     b2e:	ff 89       	ldd	r31, Y+23	; 0x17
     b30:	40 81       	ld	r20, Z
     b32:	9c 01       	movw	r18, r24
     b34:	0d 8c       	ldd	r0, Y+29	; 0x1d
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <_ZN14HardwareSerial5beginEmh+0xe8>
     b38:	22 0f       	add	r18, r18
     b3a:	33 1f       	adc	r19, r19
     b3c:	0a 94       	dec	r0
     b3e:	e2 f7       	brpl	.-8      	; 0xb38 <_ZN14HardwareSerial5beginEmh+0xe4>
     b40:	42 2b       	or	r20, r18
     b42:	40 83       	st	Z, r20
     b44:	ee 89       	ldd	r30, Y+22	; 0x16
     b46:	ff 89       	ldd	r31, Y+23	; 0x17
     b48:	40 81       	ld	r20, Z
     b4a:	9c 01       	movw	r18, r24
     b4c:	0e 8c       	ldd	r0, Y+30	; 0x1e
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <_ZN14HardwareSerial5beginEmh+0x100>
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	0a 94       	dec	r0
     b56:	e2 f7       	brpl	.-8      	; 0xb50 <_ZN14HardwareSerial5beginEmh+0xfc>
     b58:	42 2b       	or	r20, r18
     b5a:	40 83       	st	Z, r20
     b5c:	ee 89       	ldd	r30, Y+22	; 0x16
     b5e:	ff 89       	ldd	r31, Y+23	; 0x17
     b60:	20 81       	ld	r18, Z
     b62:	0f 8c       	ldd	r0, Y+31	; 0x1f
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <_ZN14HardwareSerial5beginEmh+0x116>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	0a 94       	dec	r0
     b6c:	e2 f7       	brpl	.-8      	; 0xb66 <_ZN14HardwareSerial5beginEmh+0x112>
     b6e:	80 95       	com	r24
     b70:	82 23       	and	r24, r18
     b72:	80 83       	st	Z, r24
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	df 90       	pop	r13
     b7e:	cf 90       	pop	r12
     b80:	bf 90       	pop	r11
     b82:	08 95       	ret

00000b84 <_ZN14HardwareSerial3endEv>:
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	fc 01       	movw	r30, r24
     b8a:	86 85       	ldd	r24, Z+14	; 0x0e
     b8c:	97 85       	ldd	r25, Z+15	; 0x0f
     b8e:	dc 01       	movw	r26, r24
     b90:	a0 5c       	subi	r26, 0xC0	; 192
     b92:	bf 4f       	sbci	r27, 0xFF	; 255
     b94:	ec 01       	movw	r28, r24
     b96:	ce 5b       	subi	r28, 0xBE	; 190
     b98:	df 4f       	sbci	r29, 0xFF	; 255
     b9a:	4d 91       	ld	r20, X+
     b9c:	5c 91       	ld	r21, X
     b9e:	11 97       	sbiw	r26, 0x01	; 1
     ba0:	28 81       	ld	r18, Y
     ba2:	39 81       	ldd	r19, Y+1	; 0x01
     ba4:	42 17       	cp	r20, r18
     ba6:	53 07       	cpc	r21, r19
     ba8:	c1 f7       	brne	.-16     	; 0xb9a <_ZN14HardwareSerial3endEv+0x16>
     baa:	a6 89       	ldd	r26, Z+22	; 0x16
     bac:	b7 89       	ldd	r27, Z+23	; 0x17
     bae:	4c 91       	ld	r20, X
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	9c 01       	movw	r18, r24
     bb6:	04 8c       	ldd	r0, Z+28	; 0x1c
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <_ZN14HardwareSerial3endEv+0x3a>
     bba:	22 0f       	add	r18, r18
     bbc:	33 1f       	adc	r19, r19
     bbe:	0a 94       	dec	r0
     bc0:	e2 f7       	brpl	.-8      	; 0xbba <_ZN14HardwareSerial3endEv+0x36>
     bc2:	20 95       	com	r18
     bc4:	24 23       	and	r18, r20
     bc6:	2c 93       	st	X, r18
     bc8:	a6 89       	ldd	r26, Z+22	; 0x16
     bca:	b7 89       	ldd	r27, Z+23	; 0x17
     bcc:	4c 91       	ld	r20, X
     bce:	9c 01       	movw	r18, r24
     bd0:	05 8c       	ldd	r0, Z+29	; 0x1d
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <_ZN14HardwareSerial3endEv+0x54>
     bd4:	22 0f       	add	r18, r18
     bd6:	33 1f       	adc	r19, r19
     bd8:	0a 94       	dec	r0
     bda:	e2 f7       	brpl	.-8      	; 0xbd4 <_ZN14HardwareSerial3endEv+0x50>
     bdc:	20 95       	com	r18
     bde:	24 23       	and	r18, r20
     be0:	2c 93       	st	X, r18
     be2:	a6 89       	ldd	r26, Z+22	; 0x16
     be4:	b7 89       	ldd	r27, Z+23	; 0x17
     be6:	4c 91       	ld	r20, X
     be8:	9c 01       	movw	r18, r24
     bea:	06 8c       	ldd	r0, Z+30	; 0x1e
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <_ZN14HardwareSerial3endEv+0x6e>
     bee:	22 0f       	add	r18, r18
     bf0:	33 1f       	adc	r19, r19
     bf2:	0a 94       	dec	r0
     bf4:	e2 f7       	brpl	.-8      	; 0xbee <_ZN14HardwareSerial3endEv+0x6a>
     bf6:	20 95       	com	r18
     bf8:	24 23       	and	r18, r20
     bfa:	2c 93       	st	X, r18
     bfc:	a6 89       	ldd	r26, Z+22	; 0x16
     bfe:	b7 89       	ldd	r27, Z+23	; 0x17
     c00:	2c 91       	ld	r18, X
     c02:	07 8c       	ldd	r0, Z+31	; 0x1f
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <_ZN14HardwareSerial3endEv+0x86>
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	0a 94       	dec	r0
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <_ZN14HardwareSerial3endEv+0x82>
     c0e:	80 95       	com	r24
     c10:	82 23       	and	r24, r18
     c12:	8c 93       	st	X, r24
     c14:	84 85       	ldd	r24, Z+12	; 0x0c
     c16:	95 85       	ldd	r25, Z+13	; 0x0d
     c18:	fc 01       	movw	r30, r24
     c1a:	ee 5b       	subi	r30, 0xBE	; 190
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	20 81       	ld	r18, Z
     c20:	31 81       	ldd	r19, Z+1	; 0x01
     c22:	fc 01       	movw	r30, r24
     c24:	e0 5c       	subi	r30, 0xC0	; 192
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	31 83       	std	Z+1, r19	; 0x01
     c2a:	20 83       	st	Z, r18
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	08 95       	ret

00000c32 <_ZN14HardwareSerialcvbEv>:
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	08 95       	ret

00000c36 <_ZN5Print5writeEPKhj>:
     c36:	cf 92       	push	r12
     c38:	df 92       	push	r13
     c3a:	ef 92       	push	r14
     c3c:	ff 92       	push	r15
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	6c 01       	movw	r12, r24
     c48:	eb 01       	movw	r28, r22
     c4a:	7a 01       	movw	r14, r20
     c4c:	e6 0e       	add	r14, r22
     c4e:	f7 1e       	adc	r15, r23
     c50:	00 e0       	ldi	r16, 0x00	; 0
     c52:	10 e0       	ldi	r17, 0x00	; 0
     c54:	0b c0       	rjmp	.+22     	; 0xc6c <_ZN5Print5writeEPKhj+0x36>
     c56:	69 91       	ld	r22, Y+
     c58:	d6 01       	movw	r26, r12
     c5a:	ed 91       	ld	r30, X+
     c5c:	fc 91       	ld	r31, X
     c5e:	01 90       	ld	r0, Z+
     c60:	f0 81       	ld	r31, Z
     c62:	e0 2d       	mov	r30, r0
     c64:	c6 01       	movw	r24, r12
     c66:	09 95       	icall
     c68:	08 0f       	add	r16, r24
     c6a:	19 1f       	adc	r17, r25
     c6c:	ce 15       	cp	r28, r14
     c6e:	df 05       	cpc	r29, r15
     c70:	91 f7       	brne	.-28     	; 0xc56 <_ZN5Print5writeEPKhj+0x20>
     c72:	c8 01       	movw	r24, r16
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	08 95       	ret

00000c86 <_ZN5Print5printEPK19__FlashStringHelper>:
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	7c 01       	movw	r14, r24
     c94:	eb 01       	movw	r28, r22
     c96:	00 e0       	ldi	r16, 0x00	; 0
     c98:	10 e0       	ldi	r17, 0x00	; 0
     c9a:	fe 01       	movw	r30, r28
     c9c:	21 96       	adiw	r28, 0x01	; 1
     c9e:	64 91       	lpm	r22, Z+
     ca0:	66 23       	and	r22, r22
     ca2:	51 f0       	breq	.+20     	; 0xcb8 <_ZN5Print5printEPK19__FlashStringHelper+0x32>
     ca4:	f7 01       	movw	r30, r14
     ca6:	a0 81       	ld	r26, Z
     ca8:	b1 81       	ldd	r27, Z+1	; 0x01
     caa:	ed 91       	ld	r30, X+
     cac:	fc 91       	ld	r31, X
     cae:	c7 01       	movw	r24, r14
     cb0:	09 95       	icall
     cb2:	08 0f       	add	r16, r24
     cb4:	19 1f       	adc	r17, r25
     cb6:	f1 cf       	rjmp	.-30     	; 0xc9a <_ZN5Print5printEPK19__FlashStringHelper+0x14>
     cb8:	c8 01       	movw	r24, r16
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ff 90       	pop	r15
     cc4:	ef 90       	pop	r14
     cc6:	08 95       	ret

00000cc8 <_ZN5Print5printERK6String>:
     cc8:	af 92       	push	r10
     cca:	bf 92       	push	r11
     ccc:	cf 92       	push	r12
     cce:	df 92       	push	r13
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	7c 01       	movw	r14, r24
     cde:	6b 01       	movw	r12, r22
     ce0:	00 e0       	ldi	r16, 0x00	; 0
     ce2:	10 e0       	ldi	r17, 0x00	; 0
     ce4:	c0 e0       	ldi	r28, 0x00	; 0
     ce6:	d0 e0       	ldi	r29, 0x00	; 0
     ce8:	11 c0       	rjmp	.+34     	; 0xd0c <_ZN5Print5printERK6String+0x44>
     cea:	d7 01       	movw	r26, r14
     cec:	ed 91       	ld	r30, X+
     cee:	fc 91       	ld	r31, X
     cf0:	a0 80       	ld	r10, Z
     cf2:	b1 80       	ldd	r11, Z+1	; 0x01
     cf4:	b8 01       	movw	r22, r16
     cf6:	c6 01       	movw	r24, r12
     cf8:	0e 94 75 10 	call	0x20ea	; 0x20ea <_ZNK6StringixEj>
     cfc:	68 2f       	mov	r22, r24
     cfe:	c7 01       	movw	r24, r14
     d00:	f5 01       	movw	r30, r10
     d02:	09 95       	icall
     d04:	c8 0f       	add	r28, r24
     d06:	d9 1f       	adc	r29, r25
     d08:	0f 5f       	subi	r16, 0xFF	; 255
     d0a:	1f 4f       	sbci	r17, 0xFF	; 255
     d0c:	d6 01       	movw	r26, r12
     d0e:	14 96       	adiw	r26, 0x04	; 4
     d10:	8d 91       	ld	r24, X+
     d12:	9c 91       	ld	r25, X
     d14:	15 97       	sbiw	r26, 0x05	; 5
     d16:	08 17       	cp	r16, r24
     d18:	19 07       	cpc	r17, r25
     d1a:	38 f3       	brcs	.-50     	; 0xcea <_ZN5Print5printERK6String+0x22>
     d1c:	ce 01       	movw	r24, r28
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	df 90       	pop	r13
     d2c:	cf 90       	pop	r12
     d2e:	bf 90       	pop	r11
     d30:	af 90       	pop	r10
     d32:	08 95       	ret

00000d34 <_ZN5Print5printEPKc>:
     d34:	0c 94 66 3c 	jmp	0x78cc	; 0x78cc <_ZN5Print5writeEPKc>

00000d38 <_ZN5Print5printEc>:
     d38:	dc 01       	movw	r26, r24
     d3a:	ed 91       	ld	r30, X+
     d3c:	fc 91       	ld	r31, X
     d3e:	01 90       	ld	r0, Z+
     d40:	f0 81       	ld	r31, Z
     d42:	e0 2d       	mov	r30, r0
     d44:	09 94       	ijmp

00000d46 <_ZN5Print5printERK9Printable>:
     d46:	db 01       	movw	r26, r22
     d48:	ed 91       	ld	r30, X+
     d4a:	fc 91       	ld	r31, X
     d4c:	11 97       	sbiw	r26, 0x01	; 1
     d4e:	01 90       	ld	r0, Z+
     d50:	f0 81       	ld	r31, Z
     d52:	e0 2d       	mov	r30, r0
     d54:	bc 01       	movw	r22, r24
     d56:	cd 01       	movw	r24, r26
     d58:	09 94       	ijmp

00000d5a <_ZN5Print7printlnEv>:
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	ec 01       	movw	r28, r24
     d64:	6d e0       	ldi	r22, 0x0D	; 13
     d66:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEc>
     d6a:	8c 01       	movw	r16, r24
     d6c:	6a e0       	ldi	r22, 0x0A	; 10
     d6e:	ce 01       	movw	r24, r28
     d70:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEc>
     d74:	9c 01       	movw	r18, r24
     d76:	20 0f       	add	r18, r16
     d78:	31 1f       	adc	r19, r17
     d7a:	c9 01       	movw	r24, r18
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	08 95       	ret

00000d86 <_ZN5Print7printlnEPK19__FlashStringHelper>:
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	ec 01       	movw	r28, r24
     d90:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN5Print5printEPK19__FlashStringHelper>
     d94:	8c 01       	movw	r16, r24
     d96:	ce 01       	movw	r24, r28
     d98:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN5Print7printlnEv>
     d9c:	9c 01       	movw	r18, r24
     d9e:	20 0f       	add	r18, r16
     da0:	31 1f       	adc	r19, r17
     da2:	c9 01       	movw	r24, r18
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	08 95       	ret

00000dae <_ZN5Print7printlnERK6String>:
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	ec 01       	movw	r28, r24
     db8:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN5Print5printERK6String>
     dbc:	8c 01       	movw	r16, r24
     dbe:	ce 01       	movw	r24, r28
     dc0:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN5Print7printlnEv>
     dc4:	9c 01       	movw	r18, r24
     dc6:	20 0f       	add	r18, r16
     dc8:	31 1f       	adc	r19, r17
     dca:	c9 01       	movw	r24, r18
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	08 95       	ret

00000dd6 <_ZN5Print7printlnEPKc>:
     dd6:	0f 93       	push	r16
     dd8:	1f 93       	push	r17
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	ec 01       	movw	r28, r24
     de0:	0e 94 66 3c 	call	0x78cc	; 0x78cc <_ZN5Print5writeEPKc>
     de4:	8c 01       	movw	r16, r24
     de6:	ce 01       	movw	r24, r28
     de8:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN5Print7printlnEv>
     dec:	98 01       	movw	r18, r16
     dee:	28 0f       	add	r18, r24
     df0:	39 1f       	adc	r19, r25
     df2:	c9 01       	movw	r24, r18
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	08 95       	ret

00000dfe <_ZN5Print7printlnEc>:
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	ec 01       	movw	r28, r24
     e08:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEc>
     e0c:	8c 01       	movw	r16, r24
     e0e:	ce 01       	movw	r24, r28
     e10:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN5Print7printlnEv>
     e14:	9c 01       	movw	r18, r24
     e16:	20 0f       	add	r18, r16
     e18:	31 1f       	adc	r19, r17
     e1a:	c9 01       	movw	r24, r18
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	08 95       	ret

00000e26 <_ZN5Print7printlnERK9Printable>:
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	ec 01       	movw	r28, r24
     e30:	0e 94 a3 06 	call	0xd46	; 0xd46 <_ZN5Print5printERK9Printable>
     e34:	8c 01       	movw	r16, r24
     e36:	ce 01       	movw	r24, r28
     e38:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN5Print7printlnEv>
     e3c:	9c 01       	movw	r18, r24
     e3e:	20 0f       	add	r18, r16
     e40:	31 1f       	adc	r19, r17
     e42:	c9 01       	movw	r24, r18
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	08 95       	ret

00000e4e <_ZN5Print11printNumberEmh>:
     e4e:	5f 92       	push	r5
     e50:	6f 92       	push	r6
     e52:	7f 92       	push	r7
     e54:	8f 92       	push	r8
     e56:	9f 92       	push	r9
     e58:	af 92       	push	r10
     e5a:	bf 92       	push	r11
     e5c:	cf 92       	push	r12
     e5e:	df 92       	push	r13
     e60:	ef 92       	push	r14
     e62:	ff 92       	push	r15
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	a1 97       	sbiw	r28, 0x21	; 33
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	3c 01       	movw	r6, r24
     e7e:	6a 01       	movw	r12, r20
     e80:	7b 01       	movw	r14, r22
     e82:	52 2e       	mov	r5, r18
     e84:	19 a2       	std	Y+33, r1	; 0x21
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	82 17       	cp	r24, r18
     e8a:	10 f0       	brcs	.+4      	; 0xe90 <_ZN5Print11printNumberEmh+0x42>
     e8c:	8a e0       	ldi	r24, 0x0A	; 10
     e8e:	58 2e       	mov	r5, r24
     e90:	8e 01       	movw	r16, r28
     e92:	0f 5d       	subi	r16, 0xDF	; 223
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
     e96:	85 2c       	mov	r8, r5
     e98:	91 2c       	mov	r9, r1
     e9a:	a1 2c       	mov	r10, r1
     e9c:	b1 2c       	mov	r11, r1
     e9e:	c7 01       	movw	r24, r14
     ea0:	b6 01       	movw	r22, r12
     ea2:	a5 01       	movw	r20, r10
     ea4:	94 01       	movw	r18, r8
     ea6:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__udivmodsi4>
     eaa:	8c 2d       	mov	r24, r12
     eac:	52 9e       	mul	r5, r18
     eae:	80 19       	sub	r24, r0
     eb0:	11 24       	eor	r1, r1
     eb2:	01 50       	subi	r16, 0x01	; 1
     eb4:	11 09       	sbc	r17, r1
     eb6:	8a 30       	cpi	r24, 0x0A	; 10
     eb8:	10 f4       	brcc	.+4      	; 0xebe <_ZN5Print11printNumberEmh+0x70>
     eba:	80 5d       	subi	r24, 0xD0	; 208
     ebc:	01 c0       	rjmp	.+2      	; 0xec0 <_ZN5Print11printNumberEmh+0x72>
     ebe:	89 5c       	subi	r24, 0xC9	; 201
     ec0:	f8 01       	movw	r30, r16
     ec2:	80 83       	st	Z, r24
     ec4:	69 01       	movw	r12, r18
     ec6:	7a 01       	movw	r14, r20
     ec8:	c1 14       	cp	r12, r1
     eca:	d1 04       	cpc	r13, r1
     ecc:	e1 04       	cpc	r14, r1
     ece:	f1 04       	cpc	r15, r1
     ed0:	31 f7       	brne	.-52     	; 0xe9e <_ZN5Print11printNumberEmh+0x50>
     ed2:	b8 01       	movw	r22, r16
     ed4:	c3 01       	movw	r24, r6
     ed6:	0e 94 66 3c 	call	0x78cc	; 0x78cc <_ZN5Print5writeEPKc>
     eda:	a1 96       	adiw	r28, 0x21	; 33
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	ff 90       	pop	r15
     ef0:	ef 90       	pop	r14
     ef2:	df 90       	pop	r13
     ef4:	cf 90       	pop	r12
     ef6:	bf 90       	pop	r11
     ef8:	af 90       	pop	r10
     efa:	9f 90       	pop	r9
     efc:	8f 90       	pop	r8
     efe:	7f 90       	pop	r7
     f00:	6f 90       	pop	r6
     f02:	5f 90       	pop	r5
     f04:	08 95       	ret

00000f06 <_ZN5Print5printEmi>:
     f06:	21 15       	cp	r18, r1
     f08:	31 05       	cpc	r19, r1
     f0a:	41 f4       	brne	.+16     	; 0xf1c <_ZN5Print5printEmi+0x16>
     f0c:	dc 01       	movw	r26, r24
     f0e:	ed 91       	ld	r30, X+
     f10:	fc 91       	ld	r31, X
     f12:	01 90       	ld	r0, Z+
     f14:	f0 81       	ld	r31, Z
     f16:	e0 2d       	mov	r30, r0
     f18:	64 2f       	mov	r22, r20
     f1a:	09 94       	ijmp
     f1c:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <_ZN5Print11printNumberEmh>

00000f20 <_ZN5Print7printlnEmi>:
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	ec 01       	movw	r28, r24
     f2a:	0e 94 83 07 	call	0xf06	; 0xf06 <_ZN5Print5printEmi>
     f2e:	8c 01       	movw	r16, r24
     f30:	ce 01       	movw	r24, r28
     f32:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN5Print7printlnEv>
     f36:	9c 01       	movw	r18, r24
     f38:	20 0f       	add	r18, r16
     f3a:	31 1f       	adc	r19, r17
     f3c:	c9 01       	movw	r24, r18
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	08 95       	ret

00000f48 <_ZN5Print5printEji>:
     f48:	9a 01       	movw	r18, r20
     f4a:	ab 01       	movw	r20, r22
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	0c 94 83 07 	jmp	0xf06	; 0xf06 <_ZN5Print5printEmi>

00000f54 <_ZN5Print7printlnEji>:
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	ec 01       	movw	r28, r24
     f5e:	9a 01       	movw	r18, r20
     f60:	ab 01       	movw	r20, r22
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	0e 94 83 07 	call	0xf06	; 0xf06 <_ZN5Print5printEmi>
     f6a:	8c 01       	movw	r16, r24
     f6c:	ce 01       	movw	r24, r28
     f6e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN5Print7printlnEv>
     f72:	98 01       	movw	r18, r16
     f74:	28 0f       	add	r18, r24
     f76:	39 1f       	adc	r19, r25
     f78:	c9 01       	movw	r24, r18
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	08 95       	ret

00000f84 <_ZN5Print5printEhi>:
     f84:	9a 01       	movw	r18, r20
     f86:	46 2f       	mov	r20, r22
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	0c 94 83 07 	jmp	0xf06	; 0xf06 <_ZN5Print5printEmi>

00000f92 <_ZN5Print7printlnEhi>:
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	ec 01       	movw	r28, r24
     f9c:	9a 01       	movw	r18, r20
     f9e:	46 2f       	mov	r20, r22
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	0e 94 83 07 	call	0xf06	; 0xf06 <_ZN5Print5printEmi>
     faa:	8c 01       	movw	r16, r24
     fac:	ce 01       	movw	r24, r28
     fae:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN5Print7printlnEv>
     fb2:	98 01       	movw	r18, r16
     fb4:	28 0f       	add	r18, r24
     fb6:	39 1f       	adc	r19, r25
     fb8:	c9 01       	movw	r24, r18
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	08 95       	ret

00000fc4 <_ZN5Print5printEli>:
     fc4:	cf 92       	push	r12
     fc6:	df 92       	push	r13
     fc8:	ef 92       	push	r14
     fca:	ff 92       	push	r15
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	ec 01       	movw	r28, r24
     fd6:	6a 01       	movw	r12, r20
     fd8:	7b 01       	movw	r14, r22
     fda:	21 15       	cp	r18, r1
     fdc:	31 05       	cpc	r19, r1
     fde:	79 f4       	brne	.+30     	; 0xffe <_ZN5Print5printEli+0x3a>
     fe0:	e8 81       	ld	r30, Y
     fe2:	f9 81       	ldd	r31, Y+1	; 0x01
     fe4:	01 90       	ld	r0, Z+
     fe6:	f0 81       	ld	r31, Z
     fe8:	e0 2d       	mov	r30, r0
     fea:	64 2f       	mov	r22, r20
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	ff 90       	pop	r15
     ff6:	ef 90       	pop	r14
     ff8:	df 90       	pop	r13
     ffa:	cf 90       	pop	r12
     ffc:	09 94       	ijmp
     ffe:	2a 30       	cpi	r18, 0x0A	; 10
    1000:	31 05       	cpc	r19, r1
    1002:	19 f4       	brne	.+6      	; 0x100a <_ZN5Print5printEli+0x46>
    1004:	77 fd       	sbrc	r23, 7
    1006:	0e c0       	rjmp	.+28     	; 0x1024 <_ZN5Print5printEli+0x60>
    1008:	2a e0       	ldi	r18, 0x0A	; 10
    100a:	b7 01       	movw	r22, r14
    100c:	a6 01       	movw	r20, r12
    100e:	ce 01       	movw	r24, r28
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	df 90       	pop	r13
    101e:	cf 90       	pop	r12
    1020:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <_ZN5Print11printNumberEmh>
    1024:	6d e2       	ldi	r22, 0x2D	; 45
    1026:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEc>
    102a:	8c 01       	movw	r16, r24
    102c:	44 27       	eor	r20, r20
    102e:	55 27       	eor	r21, r21
    1030:	ba 01       	movw	r22, r20
    1032:	4c 19       	sub	r20, r12
    1034:	5d 09       	sbc	r21, r13
    1036:	6e 09       	sbc	r22, r14
    1038:	7f 09       	sbc	r23, r15
    103a:	2a e0       	ldi	r18, 0x0A	; 10
    103c:	ce 01       	movw	r24, r28
    103e:	0e 94 27 07 	call	0xe4e	; 0xe4e <_ZN5Print11printNumberEmh>
    1042:	9c 01       	movw	r18, r24
    1044:	20 0f       	add	r18, r16
    1046:	31 1f       	adc	r19, r17
    1048:	c9 01       	movw	r24, r18
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	ff 90       	pop	r15
    1054:	ef 90       	pop	r14
    1056:	df 90       	pop	r13
    1058:	cf 90       	pop	r12
    105a:	08 95       	ret

0000105c <_ZN5Print7printlnEli>:
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	ec 01       	movw	r28, r24
    1066:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <_ZN5Print5printEli>
    106a:	8c 01       	movw	r16, r24
    106c:	ce 01       	movw	r24, r28
    106e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN5Print7printlnEv>
    1072:	9c 01       	movw	r18, r24
    1074:	20 0f       	add	r18, r16
    1076:	31 1f       	adc	r19, r17
    1078:	c9 01       	movw	r24, r18
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	1f 91       	pop	r17
    1080:	0f 91       	pop	r16
    1082:	08 95       	ret

00001084 <_ZN5Print5printEii>:
    1084:	9a 01       	movw	r18, r20
    1086:	ab 01       	movw	r20, r22
    1088:	66 27       	eor	r22, r22
    108a:	57 fd       	sbrc	r21, 7
    108c:	60 95       	com	r22
    108e:	76 2f       	mov	r23, r22
    1090:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <_ZN5Print5printEli>

00001094 <_ZN5Print7printlnEii>:
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
    109e:	9a 01       	movw	r18, r20
    10a0:	ab 01       	movw	r20, r22
    10a2:	66 27       	eor	r22, r22
    10a4:	57 fd       	sbrc	r21, 7
    10a6:	60 95       	com	r22
    10a8:	76 2f       	mov	r23, r22
    10aa:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <_ZN5Print5printEli>
    10ae:	8c 01       	movw	r16, r24
    10b0:	ce 01       	movw	r24, r28
    10b2:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN5Print7printlnEv>
    10b6:	98 01       	movw	r18, r16
    10b8:	28 0f       	add	r18, r24
    10ba:	39 1f       	adc	r19, r25
    10bc:	c9 01       	movw	r24, r18
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	08 95       	ret

000010c8 <_ZN5Print10printFloatEdh>:
    10c8:	6f 92       	push	r6
    10ca:	7f 92       	push	r7
    10cc:	8f 92       	push	r8
    10ce:	9f 92       	push	r9
    10d0:	af 92       	push	r10
    10d2:	bf 92       	push	r11
    10d4:	cf 92       	push	r12
    10d6:	df 92       	push	r13
    10d8:	ef 92       	push	r14
    10da:	ff 92       	push	r15
    10dc:	0f 93       	push	r16
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	8c 01       	movw	r16, r24
    10e4:	6a 01       	movw	r12, r20
    10e6:	7b 01       	movw	r14, r22
    10e8:	c2 2f       	mov	r28, r18
    10ea:	9a 01       	movw	r18, r20
    10ec:	ab 01       	movw	r20, r22
    10ee:	c7 01       	movw	r24, r14
    10f0:	b6 01       	movw	r22, r12
    10f2:	0e 94 0c 40 	call	0x8018	; 0x8018 <__unordsf2>
    10f6:	88 23       	and	r24, r24
    10f8:	19 f0       	breq	.+6      	; 0x1100 <_ZN5Print10printFloatEdh+0x38>
    10fa:	66 e4       	ldi	r22, 0x46	; 70
    10fc:	75 e0       	ldi	r23, 0x05	; 5
    10fe:	32 c0       	rjmp	.+100    	; 0x1164 <_ZN5Print10printFloatEdh+0x9c>
    1100:	46 01       	movw	r8, r12
    1102:	57 01       	movw	r10, r14
    1104:	e8 94       	clt
    1106:	b7 f8       	bld	r11, 7
    1108:	2f ef       	ldi	r18, 0xFF	; 255
    110a:	3f ef       	ldi	r19, 0xFF	; 255
    110c:	4f e7       	ldi	r20, 0x7F	; 127
    110e:	5f e7       	ldi	r21, 0x7F	; 127
    1110:	c5 01       	movw	r24, r10
    1112:	b4 01       	movw	r22, r8
    1114:	0e 94 0c 40 	call	0x8018	; 0x8018 <__unordsf2>
    1118:	81 11       	cpse	r24, r1
    111a:	0d c0       	rjmp	.+26     	; 0x1136 <_ZN5Print10printFloatEdh+0x6e>
    111c:	2f ef       	ldi	r18, 0xFF	; 255
    111e:	3f ef       	ldi	r19, 0xFF	; 255
    1120:	4f e7       	ldi	r20, 0x7F	; 127
    1122:	5f e7       	ldi	r21, 0x7F	; 127
    1124:	c5 01       	movw	r24, r10
    1126:	b4 01       	movw	r22, r8
    1128:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    112c:	18 16       	cp	r1, r24
    112e:	1c f4       	brge	.+6      	; 0x1136 <_ZN5Print10printFloatEdh+0x6e>
    1130:	6a e4       	ldi	r22, 0x4A	; 74
    1132:	75 e0       	ldi	r23, 0x05	; 5
    1134:	17 c0       	rjmp	.+46     	; 0x1164 <_ZN5Print10printFloatEdh+0x9c>
    1136:	2f ef       	ldi	r18, 0xFF	; 255
    1138:	3f ef       	ldi	r19, 0xFF	; 255
    113a:	4f e7       	ldi	r20, 0x7F	; 127
    113c:	5f e4       	ldi	r21, 0x4F	; 79
    113e:	c7 01       	movw	r24, r14
    1140:	b6 01       	movw	r22, r12
    1142:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    1146:	18 16       	cp	r1, r24
    1148:	0c f4       	brge	.+2      	; 0x114c <_ZN5Print10printFloatEdh+0x84>
    114a:	0a c0       	rjmp	.+20     	; 0x1160 <_ZN5Print10printFloatEdh+0x98>
    114c:	2f ef       	ldi	r18, 0xFF	; 255
    114e:	3f ef       	ldi	r19, 0xFF	; 255
    1150:	4f e7       	ldi	r20, 0x7F	; 127
    1152:	5f ec       	ldi	r21, 0xCF	; 207
    1154:	c7 01       	movw	r24, r14
    1156:	b6 01       	movw	r22, r12
    1158:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    115c:	87 ff       	sbrs	r24, 7
    115e:	12 c0       	rjmp	.+36     	; 0x1184 <_ZN5Print10printFloatEdh+0xbc>
    1160:	6e e4       	ldi	r22, 0x4E	; 78
    1162:	75 e0       	ldi	r23, 0x05	; 5
    1164:	c8 01       	movw	r24, r16
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	df 90       	pop	r13
    1172:	cf 90       	pop	r12
    1174:	bf 90       	pop	r11
    1176:	af 90       	pop	r10
    1178:	9f 90       	pop	r9
    117a:	8f 90       	pop	r8
    117c:	7f 90       	pop	r7
    117e:	6f 90       	pop	r6
    1180:	0c 94 66 3c 	jmp	0x78cc	; 0x78cc <_ZN5Print5writeEPKc>
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	a9 01       	movw	r20, r18
    118a:	c7 01       	movw	r24, r14
    118c:	b6 01       	movw	r22, r12
    118e:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    1192:	87 ff       	sbrs	r24, 7
    1194:	0a c0       	rjmp	.+20     	; 0x11aa <_ZN5Print10printFloatEdh+0xe2>
    1196:	6d e2       	ldi	r22, 0x2D	; 45
    1198:	c8 01       	movw	r24, r16
    119a:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEc>
    119e:	3c 01       	movw	r6, r24
    11a0:	f7 fa       	bst	r15, 7
    11a2:	f0 94       	com	r15
    11a4:	f7 f8       	bld	r15, 7
    11a6:	f0 94       	com	r15
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <_ZN5Print10printFloatEdh+0xe6>
    11aa:	61 2c       	mov	r6, r1
    11ac:	71 2c       	mov	r7, r1
    11ae:	b1 2c       	mov	r11, r1
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	9f e3       	ldi	r25, 0x3F	; 63
    11b8:	07 c0       	rjmp	.+14     	; 0x11c8 <_ZN5Print10printFloatEdh+0x100>
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e2       	ldi	r20, 0x20	; 32
    11c0:	51 e4       	ldi	r21, 0x41	; 65
    11c2:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__divsf3>
    11c6:	b3 94       	inc	r11
    11c8:	bc 12       	cpse	r11, r28
    11ca:	f7 cf       	rjmp	.-18     	; 0x11ba <_ZN5Print10printFloatEdh+0xf2>
    11cc:	26 2f       	mov	r18, r22
    11ce:	37 2f       	mov	r19, r23
    11d0:	48 2f       	mov	r20, r24
    11d2:	59 2f       	mov	r21, r25
    11d4:	c7 01       	movw	r24, r14
    11d6:	b6 01       	movw	r22, r12
    11d8:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    11dc:	4b 01       	movw	r8, r22
    11de:	5c 01       	movw	r10, r24
    11e0:	79 2d       	mov	r23, r9
    11e2:	9b 2d       	mov	r25, r11
    11e4:	0e 94 c4 3d 	call	0x7b88	; 0x7b88 <__fixunssfsi>
    11e8:	6b 01       	movw	r12, r22
    11ea:	7c 01       	movw	r14, r24
    11ec:	0e 94 f0 3d 	call	0x7be0	; 0x7be0 <__floatunsisf>
    11f0:	9b 01       	movw	r18, r22
    11f2:	ac 01       	movw	r20, r24
    11f4:	68 2d       	mov	r22, r8
    11f6:	79 2d       	mov	r23, r9
    11f8:	8a 2d       	mov	r24, r10
    11fa:	9b 2d       	mov	r25, r11
    11fc:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    1200:	b6 2e       	mov	r11, r22
    1202:	a7 2e       	mov	r10, r23
    1204:	98 2e       	mov	r9, r24
    1206:	89 2e       	mov	r8, r25
    1208:	2a e0       	ldi	r18, 0x0A	; 10
    120a:	a6 01       	movw	r20, r12
    120c:	b7 01       	movw	r22, r14
    120e:	c8 01       	movw	r24, r16
    1210:	0e 94 27 07 	call	0xe4e	; 0xe4e <_ZN5Print11printNumberEmh>
    1214:	68 0e       	add	r6, r24
    1216:	79 1e       	adc	r7, r25
    1218:	cc 23       	and	r28, r28
    121a:	c9 f1       	breq	.+114    	; 0x128e <_ZN5Print10printFloatEdh+0x1c6>
    121c:	65 ec       	ldi	r22, 0xC5	; 197
    121e:	73 e0       	ldi	r23, 0x03	; 3
    1220:	c8 01       	movw	r24, r16
    1222:	0e 94 66 3c 	call	0x78cc	; 0x78cc <_ZN5Print5writeEPKc>
    1226:	68 0e       	add	r6, r24
    1228:	79 1e       	adc	r7, r25
    122a:	31 c0       	rjmp	.+98     	; 0x128e <_ZN5Print10printFloatEdh+0x1c6>
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e2       	ldi	r20, 0x20	; 32
    1232:	51 e4       	ldi	r21, 0x41	; 65
    1234:	d5 01       	movw	r26, r10
    1236:	f4 01       	movw	r30, r8
    1238:	6b 2f       	mov	r22, r27
    123a:	7a 2d       	mov	r23, r10
    123c:	8f 2f       	mov	r24, r31
    123e:	98 2d       	mov	r25, r8
    1240:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    1244:	4b 01       	movw	r8, r22
    1246:	5c 01       	movw	r10, r24
    1248:	79 2d       	mov	r23, r9
    124a:	9b 2d       	mov	r25, r11
    124c:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <__fixsfsi>
    1250:	6b 01       	movw	r12, r22
    1252:	ee 24       	eor	r14, r14
    1254:	d7 fc       	sbrc	r13, 7
    1256:	e0 94       	com	r14
    1258:	fe 2c       	mov	r15, r14
    125a:	2a e0       	ldi	r18, 0x0A	; 10
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	b7 01       	movw	r22, r14
    1260:	a6 01       	movw	r20, r12
    1262:	c8 01       	movw	r24, r16
    1264:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <_ZN5Print5printEli>
    1268:	68 0e       	add	r6, r24
    126a:	79 1e       	adc	r7, r25
    126c:	c7 01       	movw	r24, r14
    126e:	b6 01       	movw	r22, r12
    1270:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__floatsisf>
    1274:	9b 01       	movw	r18, r22
    1276:	ac 01       	movw	r20, r24
    1278:	68 2d       	mov	r22, r8
    127a:	79 2d       	mov	r23, r9
    127c:	8a 2d       	mov	r24, r10
    127e:	9b 2d       	mov	r25, r11
    1280:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    1284:	b6 2e       	mov	r11, r22
    1286:	a7 2e       	mov	r10, r23
    1288:	98 2e       	mov	r9, r24
    128a:	89 2e       	mov	r8, r25
    128c:	c1 50       	subi	r28, 0x01	; 1
    128e:	c1 11       	cpse	r28, r1
    1290:	cd cf       	rjmp	.-102    	; 0x122c <_ZN5Print10printFloatEdh+0x164>
    1292:	c3 01       	movw	r24, r6
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
    129e:	df 90       	pop	r13
    12a0:	cf 90       	pop	r12
    12a2:	bf 90       	pop	r11
    12a4:	af 90       	pop	r10
    12a6:	9f 90       	pop	r9
    12a8:	8f 90       	pop	r8
    12aa:	7f 90       	pop	r7
    12ac:	6f 90       	pop	r6
    12ae:	08 95       	ret

000012b0 <_ZN5Print5printEdi>:
    12b0:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <_ZN5Print10printFloatEdh>

000012b4 <_ZN5Print7printlnEdi>:
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	ec 01       	movw	r28, r24
    12be:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN5Print10printFloatEdh>
    12c2:	8c 01       	movw	r16, r24
    12c4:	ce 01       	movw	r24, r28
    12c6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN5Print7printlnEv>
    12ca:	98 01       	movw	r18, r16
    12cc:	28 0f       	add	r18, r24
    12ce:	39 1f       	adc	r19, r25
    12d0:	c9 01       	movw	r24, r18
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	08 95       	ret

000012dc <attachInterrupt>:
    12dc:	88 30       	cpi	r24, 0x08	; 8
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <attachInterrupt+0x6>
    12e0:	73 c0       	rjmp	.+230    	; 0x13c8 <attachInterrupt+0xec>
    12e2:	e8 2f       	mov	r30, r24
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	ee 0f       	add	r30, r30
    12e8:	ff 1f       	adc	r31, r31
    12ea:	e6 50       	subi	r30, 0x06	; 6
    12ec:	f8 4f       	sbci	r31, 0xF8	; 248
    12ee:	71 83       	std	Z+1, r23	; 0x01
    12f0:	60 83       	st	Z, r22
    12f2:	84 30       	cpi	r24, 0x04	; 4
    12f4:	11 f1       	breq	.+68     	; 0x133a <attachInterrupt+0x5e>
    12f6:	30 f4       	brcc	.+12     	; 0x1304 <attachInterrupt+0x28>
    12f8:	82 30       	cpi	r24, 0x02	; 2
    12fa:	59 f0       	breq	.+22     	; 0x1312 <attachInterrupt+0x36>
    12fc:	90 f4       	brcc	.+36     	; 0x1322 <attachInterrupt+0x46>
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	b1 f5       	brne	.+108    	; 0x136e <attachInterrupt+0x92>
    1302:	3d c0       	rjmp	.+122    	; 0x137e <attachInterrupt+0xa2>
    1304:	86 30       	cpi	r24, 0x06	; 6
    1306:	09 f4       	brne	.+2      	; 0x130a <attachInterrupt+0x2e>
    1308:	46 c0       	rjmp	.+140    	; 0x1396 <attachInterrupt+0xba>
    130a:	20 f1       	brcs	.+72     	; 0x1354 <attachInterrupt+0x78>
    130c:	87 30       	cpi	r24, 0x07	; 7
    130e:	79 f5       	brne	.+94     	; 0x136e <attachInterrupt+0x92>
    1310:	4f c0       	rjmp	.+158    	; 0x13b0 <attachInterrupt+0xd4>
    1312:	80 91 69 00 	lds	r24, 0x0069
    1316:	8c 7f       	andi	r24, 0xFC	; 252
    1318:	84 2b       	or	r24, r20
    131a:	80 93 69 00 	sts	0x0069, r24
    131e:	e8 9a       	sbi	0x1d, 0	; 29
    1320:	08 95       	ret
    1322:	80 91 69 00 	lds	r24, 0x0069
    1326:	44 0f       	add	r20, r20
    1328:	55 1f       	adc	r21, r21
    132a:	44 0f       	add	r20, r20
    132c:	55 1f       	adc	r21, r21
    132e:	83 7f       	andi	r24, 0xF3	; 243
    1330:	84 2b       	or	r24, r20
    1332:	80 93 69 00 	sts	0x0069, r24
    1336:	e9 9a       	sbi	0x1d, 1	; 29
    1338:	08 95       	ret
    133a:	80 91 69 00 	lds	r24, 0x0069
    133e:	74 e0       	ldi	r23, 0x04	; 4
    1340:	44 0f       	add	r20, r20
    1342:	55 1f       	adc	r21, r21
    1344:	7a 95       	dec	r23
    1346:	e1 f7       	brne	.-8      	; 0x1340 <attachInterrupt+0x64>
    1348:	8f 7c       	andi	r24, 0xCF	; 207
    134a:	84 2b       	or	r24, r20
    134c:	80 93 69 00 	sts	0x0069, r24
    1350:	ea 9a       	sbi	0x1d, 2	; 29
    1352:	08 95       	ret
    1354:	80 91 69 00 	lds	r24, 0x0069
    1358:	66 e0       	ldi	r22, 0x06	; 6
    135a:	44 0f       	add	r20, r20
    135c:	55 1f       	adc	r21, r21
    135e:	6a 95       	dec	r22
    1360:	e1 f7       	brne	.-8      	; 0x135a <attachInterrupt+0x7e>
    1362:	8f 73       	andi	r24, 0x3F	; 63
    1364:	84 2b       	or	r24, r20
    1366:	80 93 69 00 	sts	0x0069, r24
    136a:	eb 9a       	sbi	0x1d, 3	; 29
    136c:	08 95       	ret
    136e:	80 91 6a 00 	lds	r24, 0x006A
    1372:	8c 7f       	andi	r24, 0xFC	; 252
    1374:	84 2b       	or	r24, r20
    1376:	80 93 6a 00 	sts	0x006A, r24
    137a:	ec 9a       	sbi	0x1d, 4	; 29
    137c:	08 95       	ret
    137e:	80 91 6a 00 	lds	r24, 0x006A
    1382:	44 0f       	add	r20, r20
    1384:	55 1f       	adc	r21, r21
    1386:	44 0f       	add	r20, r20
    1388:	55 1f       	adc	r21, r21
    138a:	83 7f       	andi	r24, 0xF3	; 243
    138c:	84 2b       	or	r24, r20
    138e:	80 93 6a 00 	sts	0x006A, r24
    1392:	ed 9a       	sbi	0x1d, 5	; 29
    1394:	08 95       	ret
    1396:	80 91 6a 00 	lds	r24, 0x006A
    139a:	24 e0       	ldi	r18, 0x04	; 4
    139c:	44 0f       	add	r20, r20
    139e:	55 1f       	adc	r21, r21
    13a0:	2a 95       	dec	r18
    13a2:	e1 f7       	brne	.-8      	; 0x139c <attachInterrupt+0xc0>
    13a4:	8f 7c       	andi	r24, 0xCF	; 207
    13a6:	84 2b       	or	r24, r20
    13a8:	80 93 6a 00 	sts	0x006A, r24
    13ac:	ee 9a       	sbi	0x1d, 6	; 29
    13ae:	08 95       	ret
    13b0:	80 91 6a 00 	lds	r24, 0x006A
    13b4:	96 e0       	ldi	r25, 0x06	; 6
    13b6:	44 0f       	add	r20, r20
    13b8:	55 1f       	adc	r21, r21
    13ba:	9a 95       	dec	r25
    13bc:	e1 f7       	brne	.-8      	; 0x13b6 <attachInterrupt+0xda>
    13be:	8f 73       	andi	r24, 0x3F	; 63
    13c0:	84 2b       	or	r24, r20
    13c2:	80 93 6a 00 	sts	0x006A, r24
    13c6:	ef 9a       	sbi	0x1d, 7	; 29
    13c8:	08 95       	ret

000013ca <detachInterrupt>:
    13ca:	88 30       	cpi	r24, 0x08	; 8
    13cc:	30 f5       	brcc	.+76     	; 0x141a <detachInterrupt+0x50>
    13ce:	84 30       	cpi	r24, 0x04	; 4
    13d0:	89 f0       	breq	.+34     	; 0x13f4 <detachInterrupt+0x2a>
    13d2:	30 f4       	brcc	.+12     	; 0x13e0 <detachInterrupt+0x16>
    13d4:	82 30       	cpi	r24, 0x02	; 2
    13d6:	51 f0       	breq	.+20     	; 0x13ec <detachInterrupt+0x22>
    13d8:	58 f4       	brcc	.+22     	; 0x13f0 <detachInterrupt+0x26>
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	79 f4       	brne	.+30     	; 0x13fc <detachInterrupt+0x32>
    13de:	10 c0       	rjmp	.+32     	; 0x1400 <detachInterrupt+0x36>
    13e0:	86 30       	cpi	r24, 0x06	; 6
    13e2:	81 f0       	breq	.+32     	; 0x1404 <detachInterrupt+0x3a>
    13e4:	48 f0       	brcs	.+18     	; 0x13f8 <detachInterrupt+0x2e>
    13e6:	87 30       	cpi	r24, 0x07	; 7
    13e8:	49 f4       	brne	.+18     	; 0x13fc <detachInterrupt+0x32>
    13ea:	0e c0       	rjmp	.+28     	; 0x1408 <detachInterrupt+0x3e>
    13ec:	e8 98       	cbi	0x1d, 0	; 29
    13ee:	0d c0       	rjmp	.+26     	; 0x140a <detachInterrupt+0x40>
    13f0:	e9 98       	cbi	0x1d, 1	; 29
    13f2:	0b c0       	rjmp	.+22     	; 0x140a <detachInterrupt+0x40>
    13f4:	ea 98       	cbi	0x1d, 2	; 29
    13f6:	09 c0       	rjmp	.+18     	; 0x140a <detachInterrupt+0x40>
    13f8:	eb 98       	cbi	0x1d, 3	; 29
    13fa:	07 c0       	rjmp	.+14     	; 0x140a <detachInterrupt+0x40>
    13fc:	ec 98       	cbi	0x1d, 4	; 29
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <detachInterrupt+0x40>
    1400:	ed 98       	cbi	0x1d, 5	; 29
    1402:	03 c0       	rjmp	.+6      	; 0x140a <detachInterrupt+0x40>
    1404:	ee 98       	cbi	0x1d, 6	; 29
    1406:	01 c0       	rjmp	.+2      	; 0x140a <detachInterrupt+0x40>
    1408:	ef 98       	cbi	0x1d, 7	; 29
    140a:	e8 2f       	mov	r30, r24
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	e6 50       	subi	r30, 0x06	; 6
    1414:	f8 4f       	sbci	r31, 0xF8	; 248
    1416:	11 82       	std	Z+1, r1	; 0x01
    1418:	10 82       	st	Z, r1
    141a:	08 95       	ret

0000141c <__vector_1>:
    141c:	1f 92       	push	r1
    141e:	0f 92       	push	r0
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	0f 92       	push	r0
    1424:	11 24       	eor	r1, r1
    1426:	0b b6       	in	r0, 0x3b	; 59
    1428:	0f 92       	push	r0
    142a:	1b be       	out	0x3b, r1	; 59
    142c:	2f 93       	push	r18
    142e:	3f 93       	push	r19
    1430:	4f 93       	push	r20
    1432:	5f 93       	push	r21
    1434:	6f 93       	push	r22
    1436:	7f 93       	push	r23
    1438:	8f 93       	push	r24
    143a:	9f 93       	push	r25
    143c:	af 93       	push	r26
    143e:	bf 93       	push	r27
    1440:	ef 93       	push	r30
    1442:	ff 93       	push	r31
    1444:	80 91 fe 07 	lds	r24, 0x07FE
    1448:	90 91 ff 07 	lds	r25, 0x07FF
    144c:	89 2b       	or	r24, r25
    144e:	29 f0       	breq	.+10     	; 0x145a <__vector_1+0x3e>
    1450:	e0 91 fe 07 	lds	r30, 0x07FE
    1454:	f0 91 ff 07 	lds	r31, 0x07FF
    1458:	09 95       	icall
    145a:	ff 91       	pop	r31
    145c:	ef 91       	pop	r30
    145e:	bf 91       	pop	r27
    1460:	af 91       	pop	r26
    1462:	9f 91       	pop	r25
    1464:	8f 91       	pop	r24
    1466:	7f 91       	pop	r23
    1468:	6f 91       	pop	r22
    146a:	5f 91       	pop	r21
    146c:	4f 91       	pop	r20
    146e:	3f 91       	pop	r19
    1470:	2f 91       	pop	r18
    1472:	0f 90       	pop	r0
    1474:	0b be       	out	0x3b, r0	; 59
    1476:	0f 90       	pop	r0
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	0f 90       	pop	r0
    147c:	1f 90       	pop	r1
    147e:	18 95       	reti

00001480 <__vector_2>:
    1480:	1f 92       	push	r1
    1482:	0f 92       	push	r0
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	0f 92       	push	r0
    1488:	11 24       	eor	r1, r1
    148a:	0b b6       	in	r0, 0x3b	; 59
    148c:	0f 92       	push	r0
    148e:	1b be       	out	0x3b, r1	; 59
    1490:	2f 93       	push	r18
    1492:	3f 93       	push	r19
    1494:	4f 93       	push	r20
    1496:	5f 93       	push	r21
    1498:	6f 93       	push	r22
    149a:	7f 93       	push	r23
    149c:	8f 93       	push	r24
    149e:	9f 93       	push	r25
    14a0:	af 93       	push	r26
    14a2:	bf 93       	push	r27
    14a4:	ef 93       	push	r30
    14a6:	ff 93       	push	r31
    14a8:	80 91 00 08 	lds	r24, 0x0800
    14ac:	90 91 01 08 	lds	r25, 0x0801
    14b0:	89 2b       	or	r24, r25
    14b2:	29 f0       	breq	.+10     	; 0x14be <__vector_2+0x3e>
    14b4:	e0 91 00 08 	lds	r30, 0x0800
    14b8:	f0 91 01 08 	lds	r31, 0x0801
    14bc:	09 95       	icall
    14be:	ff 91       	pop	r31
    14c0:	ef 91       	pop	r30
    14c2:	bf 91       	pop	r27
    14c4:	af 91       	pop	r26
    14c6:	9f 91       	pop	r25
    14c8:	8f 91       	pop	r24
    14ca:	7f 91       	pop	r23
    14cc:	6f 91       	pop	r22
    14ce:	5f 91       	pop	r21
    14d0:	4f 91       	pop	r20
    14d2:	3f 91       	pop	r19
    14d4:	2f 91       	pop	r18
    14d6:	0f 90       	pop	r0
    14d8:	0b be       	out	0x3b, r0	; 59
    14da:	0f 90       	pop	r0
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	0f 90       	pop	r0
    14e0:	1f 90       	pop	r1
    14e2:	18 95       	reti

000014e4 <__vector_3>:
    14e4:	1f 92       	push	r1
    14e6:	0f 92       	push	r0
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	0f 92       	push	r0
    14ec:	11 24       	eor	r1, r1
    14ee:	0b b6       	in	r0, 0x3b	; 59
    14f0:	0f 92       	push	r0
    14f2:	1b be       	out	0x3b, r1	; 59
    14f4:	2f 93       	push	r18
    14f6:	3f 93       	push	r19
    14f8:	4f 93       	push	r20
    14fa:	5f 93       	push	r21
    14fc:	6f 93       	push	r22
    14fe:	7f 93       	push	r23
    1500:	8f 93       	push	r24
    1502:	9f 93       	push	r25
    1504:	af 93       	push	r26
    1506:	bf 93       	push	r27
    1508:	ef 93       	push	r30
    150a:	ff 93       	push	r31
    150c:	80 91 02 08 	lds	r24, 0x0802
    1510:	90 91 03 08 	lds	r25, 0x0803
    1514:	89 2b       	or	r24, r25
    1516:	29 f0       	breq	.+10     	; 0x1522 <__vector_3+0x3e>
    1518:	e0 91 02 08 	lds	r30, 0x0802
    151c:	f0 91 03 08 	lds	r31, 0x0803
    1520:	09 95       	icall
    1522:	ff 91       	pop	r31
    1524:	ef 91       	pop	r30
    1526:	bf 91       	pop	r27
    1528:	af 91       	pop	r26
    152a:	9f 91       	pop	r25
    152c:	8f 91       	pop	r24
    152e:	7f 91       	pop	r23
    1530:	6f 91       	pop	r22
    1532:	5f 91       	pop	r21
    1534:	4f 91       	pop	r20
    1536:	3f 91       	pop	r19
    1538:	2f 91       	pop	r18
    153a:	0f 90       	pop	r0
    153c:	0b be       	out	0x3b, r0	; 59
    153e:	0f 90       	pop	r0
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	0f 90       	pop	r0
    1544:	1f 90       	pop	r1
    1546:	18 95       	reti

00001548 <__vector_4>:
    1548:	1f 92       	push	r1
    154a:	0f 92       	push	r0
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	0f 92       	push	r0
    1550:	11 24       	eor	r1, r1
    1552:	0b b6       	in	r0, 0x3b	; 59
    1554:	0f 92       	push	r0
    1556:	1b be       	out	0x3b, r1	; 59
    1558:	2f 93       	push	r18
    155a:	3f 93       	push	r19
    155c:	4f 93       	push	r20
    155e:	5f 93       	push	r21
    1560:	6f 93       	push	r22
    1562:	7f 93       	push	r23
    1564:	8f 93       	push	r24
    1566:	9f 93       	push	r25
    1568:	af 93       	push	r26
    156a:	bf 93       	push	r27
    156c:	ef 93       	push	r30
    156e:	ff 93       	push	r31
    1570:	80 91 04 08 	lds	r24, 0x0804
    1574:	90 91 05 08 	lds	r25, 0x0805
    1578:	89 2b       	or	r24, r25
    157a:	29 f0       	breq	.+10     	; 0x1586 <__vector_4+0x3e>
    157c:	e0 91 04 08 	lds	r30, 0x0804
    1580:	f0 91 05 08 	lds	r31, 0x0805
    1584:	09 95       	icall
    1586:	ff 91       	pop	r31
    1588:	ef 91       	pop	r30
    158a:	bf 91       	pop	r27
    158c:	af 91       	pop	r26
    158e:	9f 91       	pop	r25
    1590:	8f 91       	pop	r24
    1592:	7f 91       	pop	r23
    1594:	6f 91       	pop	r22
    1596:	5f 91       	pop	r21
    1598:	4f 91       	pop	r20
    159a:	3f 91       	pop	r19
    159c:	2f 91       	pop	r18
    159e:	0f 90       	pop	r0
    15a0:	0b be       	out	0x3b, r0	; 59
    15a2:	0f 90       	pop	r0
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	0f 90       	pop	r0
    15a8:	1f 90       	pop	r1
    15aa:	18 95       	reti

000015ac <__vector_5>:
    15ac:	1f 92       	push	r1
    15ae:	0f 92       	push	r0
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	0f 92       	push	r0
    15b4:	11 24       	eor	r1, r1
    15b6:	0b b6       	in	r0, 0x3b	; 59
    15b8:	0f 92       	push	r0
    15ba:	1b be       	out	0x3b, r1	; 59
    15bc:	2f 93       	push	r18
    15be:	3f 93       	push	r19
    15c0:	4f 93       	push	r20
    15c2:	5f 93       	push	r21
    15c4:	6f 93       	push	r22
    15c6:	7f 93       	push	r23
    15c8:	8f 93       	push	r24
    15ca:	9f 93       	push	r25
    15cc:	af 93       	push	r26
    15ce:	bf 93       	push	r27
    15d0:	ef 93       	push	r30
    15d2:	ff 93       	push	r31
    15d4:	80 91 fa 07 	lds	r24, 0x07FA
    15d8:	90 91 fb 07 	lds	r25, 0x07FB
    15dc:	89 2b       	or	r24, r25
    15de:	29 f0       	breq	.+10     	; 0x15ea <__vector_5+0x3e>
    15e0:	e0 91 fa 07 	lds	r30, 0x07FA
    15e4:	f0 91 fb 07 	lds	r31, 0x07FB
    15e8:	09 95       	icall
    15ea:	ff 91       	pop	r31
    15ec:	ef 91       	pop	r30
    15ee:	bf 91       	pop	r27
    15f0:	af 91       	pop	r26
    15f2:	9f 91       	pop	r25
    15f4:	8f 91       	pop	r24
    15f6:	7f 91       	pop	r23
    15f8:	6f 91       	pop	r22
    15fa:	5f 91       	pop	r21
    15fc:	4f 91       	pop	r20
    15fe:	3f 91       	pop	r19
    1600:	2f 91       	pop	r18
    1602:	0f 90       	pop	r0
    1604:	0b be       	out	0x3b, r0	; 59
    1606:	0f 90       	pop	r0
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	0f 90       	pop	r0
    160c:	1f 90       	pop	r1
    160e:	18 95       	reti

00001610 <__vector_6>:
    1610:	1f 92       	push	r1
    1612:	0f 92       	push	r0
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	0f 92       	push	r0
    1618:	11 24       	eor	r1, r1
    161a:	0b b6       	in	r0, 0x3b	; 59
    161c:	0f 92       	push	r0
    161e:	1b be       	out	0x3b, r1	; 59
    1620:	2f 93       	push	r18
    1622:	3f 93       	push	r19
    1624:	4f 93       	push	r20
    1626:	5f 93       	push	r21
    1628:	6f 93       	push	r22
    162a:	7f 93       	push	r23
    162c:	8f 93       	push	r24
    162e:	9f 93       	push	r25
    1630:	af 93       	push	r26
    1632:	bf 93       	push	r27
    1634:	ef 93       	push	r30
    1636:	ff 93       	push	r31
    1638:	80 91 fc 07 	lds	r24, 0x07FC
    163c:	90 91 fd 07 	lds	r25, 0x07FD
    1640:	89 2b       	or	r24, r25
    1642:	29 f0       	breq	.+10     	; 0x164e <__vector_6+0x3e>
    1644:	e0 91 fc 07 	lds	r30, 0x07FC
    1648:	f0 91 fd 07 	lds	r31, 0x07FD
    164c:	09 95       	icall
    164e:	ff 91       	pop	r31
    1650:	ef 91       	pop	r30
    1652:	bf 91       	pop	r27
    1654:	af 91       	pop	r26
    1656:	9f 91       	pop	r25
    1658:	8f 91       	pop	r24
    165a:	7f 91       	pop	r23
    165c:	6f 91       	pop	r22
    165e:	5f 91       	pop	r21
    1660:	4f 91       	pop	r20
    1662:	3f 91       	pop	r19
    1664:	2f 91       	pop	r18
    1666:	0f 90       	pop	r0
    1668:	0b be       	out	0x3b, r0	; 59
    166a:	0f 90       	pop	r0
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	0f 90       	pop	r0
    1670:	1f 90       	pop	r1
    1672:	18 95       	reti

00001674 <__vector_7>:
    1674:	1f 92       	push	r1
    1676:	0f 92       	push	r0
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	0f 92       	push	r0
    167c:	11 24       	eor	r1, r1
    167e:	0b b6       	in	r0, 0x3b	; 59
    1680:	0f 92       	push	r0
    1682:	1b be       	out	0x3b, r1	; 59
    1684:	2f 93       	push	r18
    1686:	3f 93       	push	r19
    1688:	4f 93       	push	r20
    168a:	5f 93       	push	r21
    168c:	6f 93       	push	r22
    168e:	7f 93       	push	r23
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	af 93       	push	r26
    1696:	bf 93       	push	r27
    1698:	ef 93       	push	r30
    169a:	ff 93       	push	r31
    169c:	80 91 06 08 	lds	r24, 0x0806
    16a0:	90 91 07 08 	lds	r25, 0x0807
    16a4:	89 2b       	or	r24, r25
    16a6:	29 f0       	breq	.+10     	; 0x16b2 <__vector_7+0x3e>
    16a8:	e0 91 06 08 	lds	r30, 0x0806
    16ac:	f0 91 07 08 	lds	r31, 0x0807
    16b0:	09 95       	icall
    16b2:	ff 91       	pop	r31
    16b4:	ef 91       	pop	r30
    16b6:	bf 91       	pop	r27
    16b8:	af 91       	pop	r26
    16ba:	9f 91       	pop	r25
    16bc:	8f 91       	pop	r24
    16be:	7f 91       	pop	r23
    16c0:	6f 91       	pop	r22
    16c2:	5f 91       	pop	r21
    16c4:	4f 91       	pop	r20
    16c6:	3f 91       	pop	r19
    16c8:	2f 91       	pop	r18
    16ca:	0f 90       	pop	r0
    16cc:	0b be       	out	0x3b, r0	; 59
    16ce:	0f 90       	pop	r0
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	0f 90       	pop	r0
    16d4:	1f 90       	pop	r1
    16d6:	18 95       	reti

000016d8 <__vector_8>:
    16d8:	1f 92       	push	r1
    16da:	0f 92       	push	r0
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	0f 92       	push	r0
    16e0:	11 24       	eor	r1, r1
    16e2:	0b b6       	in	r0, 0x3b	; 59
    16e4:	0f 92       	push	r0
    16e6:	1b be       	out	0x3b, r1	; 59
    16e8:	2f 93       	push	r18
    16ea:	3f 93       	push	r19
    16ec:	4f 93       	push	r20
    16ee:	5f 93       	push	r21
    16f0:	6f 93       	push	r22
    16f2:	7f 93       	push	r23
    16f4:	8f 93       	push	r24
    16f6:	9f 93       	push	r25
    16f8:	af 93       	push	r26
    16fa:	bf 93       	push	r27
    16fc:	ef 93       	push	r30
    16fe:	ff 93       	push	r31
    1700:	80 91 08 08 	lds	r24, 0x0808
    1704:	90 91 09 08 	lds	r25, 0x0809
    1708:	89 2b       	or	r24, r25
    170a:	29 f0       	breq	.+10     	; 0x1716 <__vector_8+0x3e>
    170c:	e0 91 08 08 	lds	r30, 0x0808
    1710:	f0 91 09 08 	lds	r31, 0x0809
    1714:	09 95       	icall
    1716:	ff 91       	pop	r31
    1718:	ef 91       	pop	r30
    171a:	bf 91       	pop	r27
    171c:	af 91       	pop	r26
    171e:	9f 91       	pop	r25
    1720:	8f 91       	pop	r24
    1722:	7f 91       	pop	r23
    1724:	6f 91       	pop	r22
    1726:	5f 91       	pop	r21
    1728:	4f 91       	pop	r20
    172a:	3f 91       	pop	r19
    172c:	2f 91       	pop	r18
    172e:	0f 90       	pop	r0
    1730:	0b be       	out	0x3b, r0	; 59
    1732:	0f 90       	pop	r0
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	0f 90       	pop	r0
    1738:	1f 90       	pop	r1
    173a:	18 95       	reti

0000173c <_ZN6StringD1Ev>:
    173c:	fc 01       	movw	r30, r24
    173e:	80 81       	ld	r24, Z
    1740:	91 81       	ldd	r25, Z+1	; 0x01
    1742:	0c 94 0d 14 	jmp	0x281a	; 0x281a <free>

00001746 <_ZN6String10invalidateEv>:
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	ec 01       	movw	r28, r24
    174c:	88 81       	ld	r24, Y
    174e:	99 81       	ldd	r25, Y+1	; 0x01
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	11 f0       	breq	.+4      	; 0x1758 <_ZN6String10invalidateEv+0x12>
    1754:	0e 94 0d 14 	call	0x281a	; 0x281a <free>
    1758:	19 82       	std	Y+1, r1	; 0x01
    175a:	18 82       	st	Y, r1
    175c:	1d 82       	std	Y+5, r1	; 0x05
    175e:	1c 82       	std	Y+4, r1	; 0x04
    1760:	1b 82       	std	Y+3, r1	; 0x03
    1762:	1a 82       	std	Y+2, r1	; 0x02
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	08 95       	ret

0000176a <_ZN6String12changeBufferEj>:
    176a:	0f 93       	push	r16
    176c:	1f 93       	push	r17
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	ec 01       	movw	r28, r24
    1774:	8b 01       	movw	r16, r22
    1776:	6f 5f       	subi	r22, 0xFF	; 255
    1778:	7f 4f       	sbci	r23, 0xFF	; 255
    177a:	88 81       	ld	r24, Y
    177c:	99 81       	ldd	r25, Y+1	; 0x01
    177e:	0e 94 ab 14 	call	0x2956	; 0x2956 <realloc>
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	31 f0       	breq	.+12     	; 0x1792 <_ZN6String12changeBufferEj+0x28>
    1786:	99 83       	std	Y+1, r25	; 0x01
    1788:	88 83       	st	Y, r24
    178a:	1b 83       	std	Y+3, r17	; 0x03
    178c:	0a 83       	std	Y+2, r16	; 0x02
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <_ZN6String12changeBufferEj+0x2a>
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	1f 91       	pop	r17
    179a:	0f 91       	pop	r16
    179c:	08 95       	ret

0000179e <_ZN6String7reserveEj>:
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	ec 01       	movw	r28, r24
    17a4:	88 81       	ld	r24, Y
    17a6:	99 81       	ldd	r25, Y+1	; 0x01
    17a8:	89 2b       	or	r24, r25
    17aa:	31 f0       	breq	.+12     	; 0x17b8 <_ZN6String7reserveEj+0x1a>
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	9b 81       	ldd	r25, Y+3	; 0x03
    17b0:	86 17       	cp	r24, r22
    17b2:	97 07       	cpc	r25, r23
    17b4:	08 f0       	brcs	.+2      	; 0x17b8 <_ZN6String7reserveEj+0x1a>
    17b6:	0c c0       	rjmp	.+24     	; 0x17d0 <_ZN6String7reserveEj+0x32>
    17b8:	ce 01       	movw	r24, r28
    17ba:	0e 94 b5 0b 	call	0x176a	; 0x176a <_ZN6String12changeBufferEj>
    17be:	88 23       	and	r24, r24
    17c0:	49 f0       	breq	.+18     	; 0x17d4 <_ZN6String7reserveEj+0x36>
    17c2:	8c 81       	ldd	r24, Y+4	; 0x04
    17c4:	9d 81       	ldd	r25, Y+5	; 0x05
    17c6:	89 2b       	or	r24, r25
    17c8:	19 f4       	brne	.+6      	; 0x17d0 <_ZN6String7reserveEj+0x32>
    17ca:	e8 81       	ld	r30, Y
    17cc:	f9 81       	ldd	r31, Y+1	; 0x01
    17ce:	10 82       	st	Z, r1
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <_ZN6String7reserveEj+0x38>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	08 95       	ret

000017dc <_ZN6String4copyEPKcj>:
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	ec 01       	movw	r28, r24
    17ea:	7b 01       	movw	r14, r22
    17ec:	8a 01       	movw	r16, r20
    17ee:	ba 01       	movw	r22, r20
    17f0:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN6String7reserveEj>
    17f4:	81 11       	cpse	r24, r1
    17f6:	04 c0       	rjmp	.+8      	; 0x1800 <_ZN6String4copyEPKcj+0x24>
    17f8:	ce 01       	movw	r24, r28
    17fa:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN6String10invalidateEv>
    17fe:	07 c0       	rjmp	.+14     	; 0x180e <_ZN6String4copyEPKcj+0x32>
    1800:	1d 83       	std	Y+5, r17	; 0x05
    1802:	0c 83       	std	Y+4, r16	; 0x04
    1804:	b7 01       	movw	r22, r14
    1806:	88 81       	ld	r24, Y
    1808:	99 81       	ldd	r25, Y+1	; 0x01
    180a:	0e 94 49 41 	call	0x8292	; 0x8292 <strcpy>
    180e:	ce 01       	movw	r24, r28
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	ff 90       	pop	r15
    181a:	ef 90       	pop	r14
    181c:	08 95       	ret

0000181e <_ZN6StringC1EPKc>:
    181e:	dc 01       	movw	r26, r24
    1820:	11 96       	adiw	r26, 0x01	; 1
    1822:	1c 92       	st	X, r1
    1824:	1e 92       	st	-X, r1
    1826:	13 96       	adiw	r26, 0x03	; 3
    1828:	1c 92       	st	X, r1
    182a:	1e 92       	st	-X, r1
    182c:	12 97       	sbiw	r26, 0x02	; 2
    182e:	15 96       	adiw	r26, 0x05	; 5
    1830:	1c 92       	st	X, r1
    1832:	1e 92       	st	-X, r1
    1834:	14 97       	sbiw	r26, 0x04	; 4
    1836:	16 96       	adiw	r26, 0x06	; 6
    1838:	1c 92       	st	X, r1
    183a:	61 15       	cp	r22, r1
    183c:	71 05       	cpc	r23, r1
    183e:	59 f0       	breq	.+22     	; 0x1856 <_ZN6StringC1EPKc+0x38>
    1840:	db 01       	movw	r26, r22
    1842:	0d 90       	ld	r0, X+
    1844:	00 20       	and	r0, r0
    1846:	e9 f7       	brne	.-6      	; 0x1842 <_ZN6StringC1EPKc+0x24>
    1848:	ad 01       	movw	r20, r26
    184a:	41 50       	subi	r20, 0x01	; 1
    184c:	51 09       	sbc	r21, r1
    184e:	46 1b       	sub	r20, r22
    1850:	57 0b       	sbc	r21, r23
    1852:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <_ZN6String4copyEPKcj>
    1856:	08 95       	ret

00001858 <_ZN6StringaSERKS_>:
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	ec 01       	movw	r28, r24
    185e:	fb 01       	movw	r30, r22
    1860:	86 17       	cp	r24, r22
    1862:	97 07       	cpc	r25, r23
    1864:	61 f0       	breq	.+24     	; 0x187e <_ZN6StringaSERKS_+0x26>
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	61 15       	cp	r22, r1
    186c:	71 05       	cpc	r23, r1
    186e:	29 f0       	breq	.+10     	; 0x187a <_ZN6StringaSERKS_+0x22>
    1870:	44 81       	ldd	r20, Z+4	; 0x04
    1872:	55 81       	ldd	r21, Z+5	; 0x05
    1874:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_ZN6String4copyEPKcj>
    1878:	02 c0       	rjmp	.+4      	; 0x187e <_ZN6StringaSERKS_+0x26>
    187a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN6String10invalidateEv>
    187e:	ce 01       	movw	r24, r28
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	08 95       	ret

00001886 <_ZN6StringC1ERKS_>:
    1886:	fc 01       	movw	r30, r24
    1888:	11 82       	std	Z+1, r1	; 0x01
    188a:	10 82       	st	Z, r1
    188c:	13 82       	std	Z+3, r1	; 0x03
    188e:	12 82       	std	Z+2, r1	; 0x02
    1890:	15 82       	std	Z+5, r1	; 0x05
    1892:	14 82       	std	Z+4, r1	; 0x04
    1894:	16 82       	std	Z+6, r1	; 0x06
    1896:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <_ZN6StringaSERKS_>

0000189a <_ZN6StringaSEPKc>:
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	d8 2f       	mov	r29, r24
    18a0:	c9 2f       	mov	r28, r25
    18a2:	61 15       	cp	r22, r1
    18a4:	71 05       	cpc	r23, r1
    18a6:	61 f0       	breq	.+24     	; 0x18c0 <_ZN6StringaSEPKc+0x26>
    18a8:	db 01       	movw	r26, r22
    18aa:	0d 90       	ld	r0, X+
    18ac:	00 20       	and	r0, r0
    18ae:	e9 f7       	brne	.-6      	; 0x18aa <_ZN6StringaSEPKc+0x10>
    18b0:	ad 01       	movw	r20, r26
    18b2:	41 50       	subi	r20, 0x01	; 1
    18b4:	51 09       	sbc	r21, r1
    18b6:	46 1b       	sub	r20, r22
    18b8:	57 0b       	sbc	r21, r23
    18ba:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_ZN6String4copyEPKcj>
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <_ZN6StringaSEPKc+0x2a>
    18c0:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN6String10invalidateEv>
    18c4:	8d 2f       	mov	r24, r29
    18c6:	9c 2f       	mov	r25, r28
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	08 95       	ret

000018ce <_ZN6StringC1Emh>:
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	a1 97       	sbiw	r28, 0x21	; 33
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	8c 01       	movw	r16, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	ba 01       	movw	r22, r20
    18ec:	f8 01       	movw	r30, r16
    18ee:	11 82       	std	Z+1, r1	; 0x01
    18f0:	10 82       	st	Z, r1
    18f2:	13 82       	std	Z+3, r1	; 0x03
    18f4:	12 82       	std	Z+2, r1	; 0x02
    18f6:	15 82       	std	Z+5, r1	; 0x05
    18f8:	14 82       	std	Z+4, r1	; 0x04
    18fa:	16 82       	std	Z+6, r1	; 0x06
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	ae 01       	movw	r20, r28
    1900:	4f 5f       	subi	r20, 0xFF	; 255
    1902:	5f 4f       	sbci	r21, 0xFF	; 255
    1904:	0e 94 2b 42 	call	0x8456	; 0x8456 <ultoa>
    1908:	be 01       	movw	r22, r28
    190a:	6f 5f       	subi	r22, 0xFF	; 255
    190c:	7f 4f       	sbci	r23, 0xFF	; 255
    190e:	c8 01       	movw	r24, r16
    1910:	0e 94 4d 0c 	call	0x189a	; 0x189a <_ZN6StringaSEPKc>
    1914:	a1 96       	adiw	r28, 0x21	; 33
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	08 95       	ret

0000192a <_ZN6StringC1Elh>:
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	a2 97       	sbiw	r28, 0x22	; 34
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	8c 01       	movw	r16, r24
    1944:	cb 01       	movw	r24, r22
    1946:	ba 01       	movw	r22, r20
    1948:	f8 01       	movw	r30, r16
    194a:	11 82       	std	Z+1, r1	; 0x01
    194c:	10 82       	st	Z, r1
    194e:	13 82       	std	Z+3, r1	; 0x03
    1950:	12 82       	std	Z+2, r1	; 0x02
    1952:	15 82       	std	Z+5, r1	; 0x05
    1954:	14 82       	std	Z+4, r1	; 0x04
    1956:	16 82       	std	Z+6, r1	; 0x06
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	ae 01       	movw	r20, r28
    195c:	4f 5f       	subi	r20, 0xFF	; 255
    195e:	5f 4f       	sbci	r21, 0xFF	; 255
    1960:	0e 94 da 41 	call	0x83b4	; 0x83b4 <ltoa>
    1964:	be 01       	movw	r22, r28
    1966:	6f 5f       	subi	r22, 0xFF	; 255
    1968:	7f 4f       	sbci	r23, 0xFF	; 255
    196a:	c8 01       	movw	r24, r16
    196c:	0e 94 4d 0c 	call	0x189a	; 0x189a <_ZN6StringaSEPKc>
    1970:	a2 96       	adiw	r28, 0x22	; 34
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	08 95       	ret

00001986 <_ZN6StringC1Ejh>:
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	61 97       	sbiw	r28, 0x11	; 17
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	8c 01       	movw	r16, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	f8 01       	movw	r30, r16
    19a4:	11 82       	std	Z+1, r1	; 0x01
    19a6:	10 82       	st	Z, r1
    19a8:	13 82       	std	Z+3, r1	; 0x03
    19aa:	12 82       	std	Z+2, r1	; 0x02
    19ac:	15 82       	std	Z+5, r1	; 0x05
    19ae:	14 82       	std	Z+4, r1	; 0x04
    19b0:	16 82       	std	Z+6, r1	; 0x06
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	be 01       	movw	r22, r28
    19b6:	6f 5f       	subi	r22, 0xFF	; 255
    19b8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ba:	0e 94 50 42 	call	0x84a0	; 0x84a0 <utoa>
    19be:	be 01       	movw	r22, r28
    19c0:	6f 5f       	subi	r22, 0xFF	; 255
    19c2:	7f 4f       	sbci	r23, 0xFF	; 255
    19c4:	c8 01       	movw	r24, r16
    19c6:	0e 94 4d 0c 	call	0x189a	; 0x189a <_ZN6StringaSEPKc>
    19ca:	61 96       	adiw	r28, 0x11	; 17
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	08 95       	ret

000019e0 <_ZN6StringC1Eih>:
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	62 97       	sbiw	r28, 0x12	; 18
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	8c 01       	movw	r16, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	f8 01       	movw	r30, r16
    19fe:	11 82       	std	Z+1, r1	; 0x01
    1a00:	10 82       	st	Z, r1
    1a02:	13 82       	std	Z+3, r1	; 0x03
    1a04:	12 82       	std	Z+2, r1	; 0x02
    1a06:	15 82       	std	Z+5, r1	; 0x05
    1a08:	14 82       	std	Z+4, r1	; 0x04
    1a0a:	16 82       	std	Z+6, r1	; 0x06
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	be 01       	movw	r22, r28
    1a10:	6f 5f       	subi	r22, 0xFF	; 255
    1a12:	7f 4f       	sbci	r23, 0xFF	; 255
    1a14:	0e 94 b9 41 	call	0x8372	; 0x8372 <itoa>
    1a18:	be 01       	movw	r22, r28
    1a1a:	6f 5f       	subi	r22, 0xFF	; 255
    1a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1e:	c8 01       	movw	r24, r16
    1a20:	0e 94 4d 0c 	call	0x189a	; 0x189a <_ZN6StringaSEPKc>
    1a24:	62 96       	adiw	r28, 0x12	; 18
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	08 95       	ret

00001a3a <_ZN6StringC1Ehh>:
    1a3a:	0f 93       	push	r16
    1a3c:	1f 93       	push	r17
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	29 97       	sbiw	r28, 0x09	; 9
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	8c 01       	movw	r16, r24
    1a54:	86 2f       	mov	r24, r22
    1a56:	f8 01       	movw	r30, r16
    1a58:	11 82       	std	Z+1, r1	; 0x01
    1a5a:	10 82       	st	Z, r1
    1a5c:	13 82       	std	Z+3, r1	; 0x03
    1a5e:	12 82       	std	Z+2, r1	; 0x02
    1a60:	15 82       	std	Z+5, r1	; 0x05
    1a62:	14 82       	std	Z+4, r1	; 0x04
    1a64:	16 82       	std	Z+6, r1	; 0x06
    1a66:	50 e0       	ldi	r21, 0x00	; 0
    1a68:	be 01       	movw	r22, r28
    1a6a:	6f 5f       	subi	r22, 0xFF	; 255
    1a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 50 42 	call	0x84a0	; 0x84a0 <utoa>
    1a74:	be 01       	movw	r22, r28
    1a76:	6f 5f       	subi	r22, 0xFF	; 255
    1a78:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7a:	c8 01       	movw	r24, r16
    1a7c:	0e 94 4d 0c 	call	0x189a	; 0x189a <_ZN6StringaSEPKc>
    1a80:	29 96       	adiw	r28, 0x09	; 9
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	08 95       	ret

00001a96 <_ZN6StringC1Ec>:
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <_ZN6StringC1Ec+0x6>
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	11 82       	std	Z+1, r1	; 0x01
    1aa4:	10 82       	st	Z, r1
    1aa6:	13 82       	std	Z+3, r1	; 0x03
    1aa8:	12 82       	std	Z+2, r1	; 0x02
    1aaa:	15 82       	std	Z+5, r1	; 0x05
    1aac:	14 82       	std	Z+4, r1	; 0x04
    1aae:	16 82       	std	Z+6, r1	; 0x06
    1ab0:	69 83       	std	Y+1, r22	; 0x01
    1ab2:	1a 82       	std	Y+2, r1	; 0x02
    1ab4:	be 01       	movw	r22, r28
    1ab6:	6f 5f       	subi	r22, 0xFF	; 255
    1ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aba:	0e 94 4d 0c 	call	0x189a	; 0x189a <_ZN6StringaSEPKc>
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	08 95       	ret

00001ac8 <_ZN6String6concatEPKcj>:
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	ec 01       	movw	r28, r24
    1ad6:	7b 01       	movw	r14, r22
    1ad8:	0c 81       	ldd	r16, Y+4	; 0x04
    1ada:	1d 81       	ldd	r17, Y+5	; 0x05
    1adc:	61 15       	cp	r22, r1
    1ade:	71 05       	cpc	r23, r1
    1ae0:	11 f4       	brne	.+4      	; 0x1ae6 <_ZN6String6concatEPKcj+0x1e>
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	16 c0       	rjmp	.+44     	; 0x1b12 <_ZN6String6concatEPKcj+0x4a>
    1ae6:	41 15       	cp	r20, r1
    1ae8:	51 05       	cpc	r21, r1
    1aea:	91 f0       	breq	.+36     	; 0x1b10 <_ZN6String6concatEPKcj+0x48>
    1aec:	04 0f       	add	r16, r20
    1aee:	15 1f       	adc	r17, r21
    1af0:	b8 01       	movw	r22, r16
    1af2:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN6String7reserveEj>
    1af6:	88 23       	and	r24, r24
    1af8:	a1 f3       	breq	.-24     	; 0x1ae2 <_ZN6String6concatEPKcj+0x1a>
    1afa:	28 81       	ld	r18, Y
    1afc:	39 81       	ldd	r19, Y+1	; 0x01
    1afe:	8c 81       	ldd	r24, Y+4	; 0x04
    1b00:	9d 81       	ldd	r25, Y+5	; 0x05
    1b02:	b7 01       	movw	r22, r14
    1b04:	82 0f       	add	r24, r18
    1b06:	93 1f       	adc	r25, r19
    1b08:	0e 94 49 41 	call	0x8292	; 0x8292 <strcpy>
    1b0c:	1d 83       	std	Y+5, r17	; 0x05
    1b0e:	0c 83       	std	Y+4, r16	; 0x04
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	0f 91       	pop	r16
    1b1a:	ff 90       	pop	r15
    1b1c:	ef 90       	pop	r14
    1b1e:	08 95       	ret

00001b20 <_ZN6String6concatERKS_>:
    1b20:	fb 01       	movw	r30, r22
    1b22:	44 81       	ldd	r20, Z+4	; 0x04
    1b24:	55 81       	ldd	r21, Z+5	; 0x05
    1b26:	60 81       	ld	r22, Z
    1b28:	71 81       	ldd	r23, Z+1	; 0x01
    1b2a:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>

00001b2e <_ZN6String6concatEPKc>:
    1b2e:	61 15       	cp	r22, r1
    1b30:	71 05       	cpc	r23, r1
    1b32:	59 f0       	breq	.+22     	; 0x1b4a <_ZN6String6concatEPKc+0x1c>
    1b34:	db 01       	movw	r26, r22
    1b36:	0d 90       	ld	r0, X+
    1b38:	00 20       	and	r0, r0
    1b3a:	e9 f7       	brne	.-6      	; 0x1b36 <_ZN6String6concatEPKc+0x8>
    1b3c:	ad 01       	movw	r20, r26
    1b3e:	41 50       	subi	r20, 0x01	; 1
    1b40:	51 09       	sbc	r21, r1
    1b42:	46 1b       	sub	r20, r22
    1b44:	57 0b       	sbc	r21, r23
    1b46:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	08 95       	ret

00001b4e <_ZN6String6concatEc>:
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <_ZN6String6concatEc+0x6>
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	69 83       	std	Y+1, r22	; 0x01
    1b5a:	1a 82       	std	Y+2, r1	; 0x02
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	be 01       	movw	r22, r28
    1b62:	6f 5f       	subi	r22, 0xFF	; 255
    1b64:	7f 4f       	sbci	r23, 0xFF	; 255
    1b66:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	08 95       	ret

00001b74 <_ZN6String6concatEh>:
    1b74:	ef 92       	push	r14
    1b76:	ff 92       	push	r15
    1b78:	0f 93       	push	r16
    1b7a:	1f 93       	push	r17
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <_ZN6String6concatEh+0xe>
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <_ZN6String6concatEh+0x10>
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	7c 01       	movw	r14, r24
    1b8a:	86 2f       	mov	r24, r22
    1b8c:	4a e0       	ldi	r20, 0x0A	; 10
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	8e 01       	movw	r16, r28
    1b92:	0f 5f       	subi	r16, 0xFF	; 255
    1b94:	1f 4f       	sbci	r17, 0xFF	; 255
    1b96:	b8 01       	movw	r22, r16
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	0e 94 b9 41 	call	0x8372	; 0x8372 <itoa>
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	01 90       	ld	r0, Z+
    1ba2:	00 20       	and	r0, r0
    1ba4:	e9 f7       	brne	.-6      	; 0x1ba0 <_ZN6String6concatEh+0x2c>
    1ba6:	af 01       	movw	r20, r30
    1ba8:	41 50       	subi	r20, 0x01	; 1
    1baa:	51 09       	sbc	r21, r1
    1bac:	40 1b       	sub	r20, r16
    1bae:	51 0b       	sbc	r21, r17
    1bb0:	b8 01       	movw	r22, r16
    1bb2:	c7 01       	movw	r24, r14
    1bb4:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	ff 90       	pop	r15
    1bca:	ef 90       	pop	r14
    1bcc:	08 95       	ret

00001bce <_ZN6String6concatEi>:
    1bce:	ef 92       	push	r14
    1bd0:	ff 92       	push	r15
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	27 97       	sbiw	r28, 0x07	; 7
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	7c 01       	movw	r14, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	4a e0       	ldi	r20, 0x0A	; 10
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	8e 01       	movw	r16, r28
    1bf4:	0f 5f       	subi	r16, 0xFF	; 255
    1bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf8:	b8 01       	movw	r22, r16
    1bfa:	0e 94 b9 41 	call	0x8372	; 0x8372 <itoa>
    1bfe:	f8 01       	movw	r30, r16
    1c00:	01 90       	ld	r0, Z+
    1c02:	00 20       	and	r0, r0
    1c04:	e9 f7       	brne	.-6      	; 0x1c00 <_ZN6String6concatEi+0x32>
    1c06:	af 01       	movw	r20, r30
    1c08:	41 50       	subi	r20, 0x01	; 1
    1c0a:	51 09       	sbc	r21, r1
    1c0c:	40 1b       	sub	r20, r16
    1c0e:	51 0b       	sbc	r21, r17
    1c10:	b8 01       	movw	r22, r16
    1c12:	c7 01       	movw	r24, r14
    1c14:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1c18:	27 96       	adiw	r28, 0x07	; 7
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	1f 91       	pop	r17
    1c2a:	0f 91       	pop	r16
    1c2c:	ff 90       	pop	r15
    1c2e:	ef 90       	pop	r14
    1c30:	08 95       	ret

00001c32 <_ZN6String6concatEj>:
    1c32:	ef 92       	push	r14
    1c34:	ff 92       	push	r15
    1c36:	0f 93       	push	r16
    1c38:	1f 93       	push	r17
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <_ZN6String6concatEj+0xe>
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <_ZN6String6concatEj+0x10>
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <_ZN6String6concatEj+0x12>
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	7c 01       	movw	r14, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	4a e0       	ldi	r20, 0x0A	; 10
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	8e 01       	movw	r16, r28
    1c52:	0f 5f       	subi	r16, 0xFF	; 255
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
    1c56:	b8 01       	movw	r22, r16
    1c58:	0e 94 50 42 	call	0x84a0	; 0x84a0 <utoa>
    1c5c:	f8 01       	movw	r30, r16
    1c5e:	01 90       	ld	r0, Z+
    1c60:	00 20       	and	r0, r0
    1c62:	e9 f7       	brne	.-6      	; 0x1c5e <_ZN6String6concatEj+0x2c>
    1c64:	af 01       	movw	r20, r30
    1c66:	41 50       	subi	r20, 0x01	; 1
    1c68:	51 09       	sbc	r21, r1
    1c6a:	40 1b       	sub	r20, r16
    1c6c:	51 0b       	sbc	r21, r17
    1c6e:	b8 01       	movw	r22, r16
    1c70:	c7 01       	movw	r24, r14
    1c72:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1c76:	26 96       	adiw	r28, 0x06	; 6
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	ff 90       	pop	r15
    1c8c:	ef 90       	pop	r14
    1c8e:	08 95       	ret

00001c90 <_ZN6String6concatEl>:
    1c90:	ef 92       	push	r14
    1c92:	ff 92       	push	r15
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	2c 97       	sbiw	r28, 0x0c	; 12
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	7c 01       	movw	r14, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	ba 01       	movw	r22, r20
    1cb2:	2a e0       	ldi	r18, 0x0A	; 10
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	8e 01       	movw	r16, r28
    1cb8:	0f 5f       	subi	r16, 0xFF	; 255
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbc:	a8 01       	movw	r20, r16
    1cbe:	0e 94 da 41 	call	0x83b4	; 0x83b4 <ltoa>
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	01 90       	ld	r0, Z+
    1cc6:	00 20       	and	r0, r0
    1cc8:	e9 f7       	brne	.-6      	; 0x1cc4 <_ZN6String6concatEl+0x34>
    1cca:	af 01       	movw	r20, r30
    1ccc:	41 50       	subi	r20, 0x01	; 1
    1cce:	51 09       	sbc	r21, r1
    1cd0:	40 1b       	sub	r20, r16
    1cd2:	51 0b       	sbc	r21, r17
    1cd4:	b8 01       	movw	r22, r16
    1cd6:	c7 01       	movw	r24, r14
    1cd8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1cdc:	2c 96       	adiw	r28, 0x0c	; 12
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	1f 91       	pop	r17
    1cee:	0f 91       	pop	r16
    1cf0:	ff 90       	pop	r15
    1cf2:	ef 90       	pop	r14
    1cf4:	08 95       	ret

00001cf6 <_ZN6String6concatEm>:
    1cf6:	ef 92       	push	r14
    1cf8:	ff 92       	push	r15
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	2b 97       	sbiw	r28, 0x0b	; 11
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	7c 01       	movw	r14, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	ba 01       	movw	r22, r20
    1d18:	2a e0       	ldi	r18, 0x0A	; 10
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	8e 01       	movw	r16, r28
    1d1e:	0f 5f       	subi	r16, 0xFF	; 255
    1d20:	1f 4f       	sbci	r17, 0xFF	; 255
    1d22:	a8 01       	movw	r20, r16
    1d24:	0e 94 2b 42 	call	0x8456	; 0x8456 <ultoa>
    1d28:	f8 01       	movw	r30, r16
    1d2a:	01 90       	ld	r0, Z+
    1d2c:	00 20       	and	r0, r0
    1d2e:	e9 f7       	brne	.-6      	; 0x1d2a <_ZN6String6concatEm+0x34>
    1d30:	af 01       	movw	r20, r30
    1d32:	41 50       	subi	r20, 0x01	; 1
    1d34:	51 09       	sbc	r21, r1
    1d36:	40 1b       	sub	r20, r16
    1d38:	51 0b       	sbc	r21, r17
    1d3a:	b8 01       	movw	r22, r16
    1d3c:	c7 01       	movw	r24, r14
    1d3e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1d42:	2b 96       	adiw	r28, 0x0b	; 11
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	1f 91       	pop	r17
    1d54:	0f 91       	pop	r16
    1d56:	ff 90       	pop	r15
    1d58:	ef 90       	pop	r14
    1d5a:	08 95       	ret

00001d5c <_ZplRK15StringSumHelperRK6String>:
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	d8 2f       	mov	r29, r24
    1d62:	c9 2f       	mov	r28, r25
    1d64:	fb 01       	movw	r30, r22
    1d66:	44 81       	ldd	r20, Z+4	; 0x04
    1d68:	55 81       	ldd	r21, Z+5	; 0x05
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1d72:	81 11       	cpse	r24, r1
    1d74:	04 c0       	rjmp	.+8      	; 0x1d7e <_ZplRK15StringSumHelperRK6String+0x22>
    1d76:	8d 2f       	mov	r24, r29
    1d78:	9c 2f       	mov	r25, r28
    1d7a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN6String10invalidateEv>
    1d7e:	8d 2f       	mov	r24, r29
    1d80:	9c 2f       	mov	r25, r28
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	08 95       	ret

00001d88 <_ZplRK15StringSumHelperPKc>:
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	d8 2f       	mov	r29, r24
    1d8e:	c9 2f       	mov	r28, r25
    1d90:	61 15       	cp	r22, r1
    1d92:	71 05       	cpc	r23, r1
    1d94:	69 f0       	breq	.+26     	; 0x1db0 <_ZplRK15StringSumHelperPKc+0x28>
    1d96:	db 01       	movw	r26, r22
    1d98:	0d 90       	ld	r0, X+
    1d9a:	00 20       	and	r0, r0
    1d9c:	e9 f7       	brne	.-6      	; 0x1d98 <_ZplRK15StringSumHelperPKc+0x10>
    1d9e:	ad 01       	movw	r20, r26
    1da0:	41 50       	subi	r20, 0x01	; 1
    1da2:	51 09       	sbc	r21, r1
    1da4:	46 1b       	sub	r20, r22
    1da6:	57 0b       	sbc	r21, r23
    1da8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1dac:	81 11       	cpse	r24, r1
    1dae:	04 c0       	rjmp	.+8      	; 0x1db8 <_ZplRK15StringSumHelperPKc+0x30>
    1db0:	8d 2f       	mov	r24, r29
    1db2:	9c 2f       	mov	r25, r28
    1db4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN6String10invalidateEv>
    1db8:	8d 2f       	mov	r24, r29
    1dba:	9c 2f       	mov	r25, r28
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	08 95       	ret

00001dc2 <_ZplRK15StringSumHelperc>:
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	d8 2f       	mov	r29, r24
    1dc8:	c9 2f       	mov	r28, r25
    1dca:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZN6String6concatEc>
    1dce:	81 11       	cpse	r24, r1
    1dd0:	04 c0       	rjmp	.+8      	; 0x1dda <_ZplRK15StringSumHelperc+0x18>
    1dd2:	8d 2f       	mov	r24, r29
    1dd4:	9c 2f       	mov	r25, r28
    1dd6:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN6String10invalidateEv>
    1dda:	8d 2f       	mov	r24, r29
    1ddc:	9c 2f       	mov	r25, r28
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	08 95       	ret

00001de4 <_ZplRK15StringSumHelperh>:
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	d8 2f       	mov	r29, r24
    1dea:	c9 2f       	mov	r28, r25
    1dec:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN6String6concatEh>
    1df0:	81 11       	cpse	r24, r1
    1df2:	04 c0       	rjmp	.+8      	; 0x1dfc <_ZplRK15StringSumHelperh+0x18>
    1df4:	8d 2f       	mov	r24, r29
    1df6:	9c 2f       	mov	r25, r28
    1df8:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN6String10invalidateEv>
    1dfc:	8d 2f       	mov	r24, r29
    1dfe:	9c 2f       	mov	r25, r28
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	08 95       	ret

00001e06 <_ZplRK15StringSumHelperi>:
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	d8 2f       	mov	r29, r24
    1e0c:	c9 2f       	mov	r28, r25
    1e0e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_ZN6String6concatEi>
    1e12:	81 11       	cpse	r24, r1
    1e14:	04 c0       	rjmp	.+8      	; 0x1e1e <_ZplRK15StringSumHelperi+0x18>
    1e16:	8d 2f       	mov	r24, r29
    1e18:	9c 2f       	mov	r25, r28
    1e1a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN6String10invalidateEv>
    1e1e:	8d 2f       	mov	r24, r29
    1e20:	9c 2f       	mov	r25, r28
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	08 95       	ret

00001e28 <_ZplRK15StringSumHelperj>:
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	d8 2f       	mov	r29, r24
    1e2e:	c9 2f       	mov	r28, r25
    1e30:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <_ZN6String6concatEj>
    1e34:	81 11       	cpse	r24, r1
    1e36:	04 c0       	rjmp	.+8      	; 0x1e40 <_ZplRK15StringSumHelperj+0x18>
    1e38:	8d 2f       	mov	r24, r29
    1e3a:	9c 2f       	mov	r25, r28
    1e3c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN6String10invalidateEv>
    1e40:	8d 2f       	mov	r24, r29
    1e42:	9c 2f       	mov	r25, r28
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	08 95       	ret

00001e4a <_ZplRK15StringSumHelperl>:
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	d8 2f       	mov	r29, r24
    1e50:	c9 2f       	mov	r28, r25
    1e52:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <_ZN6String6concatEl>
    1e56:	81 11       	cpse	r24, r1
    1e58:	04 c0       	rjmp	.+8      	; 0x1e62 <_ZplRK15StringSumHelperl+0x18>
    1e5a:	8d 2f       	mov	r24, r29
    1e5c:	9c 2f       	mov	r25, r28
    1e5e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN6String10invalidateEv>
    1e62:	8d 2f       	mov	r24, r29
    1e64:	9c 2f       	mov	r25, r28
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	08 95       	ret

00001e6c <_ZplRK15StringSumHelperm>:
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	d8 2f       	mov	r29, r24
    1e72:	c9 2f       	mov	r28, r25
    1e74:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN6String6concatEm>
    1e78:	81 11       	cpse	r24, r1
    1e7a:	04 c0       	rjmp	.+8      	; 0x1e84 <_ZplRK15StringSumHelperm+0x18>
    1e7c:	8d 2f       	mov	r24, r29
    1e7e:	9c 2f       	mov	r25, r28
    1e80:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_ZN6String10invalidateEv>
    1e84:	8d 2f       	mov	r24, r29
    1e86:	9c 2f       	mov	r25, r28
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	08 95       	ret

00001e8e <_ZNK6String9compareToERKS_>:
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	dc 01       	movw	r26, r24
    1e94:	ed 91       	ld	r30, X+
    1e96:	fc 91       	ld	r31, X
    1e98:	eb 01       	movw	r28, r22
    1e9a:	a8 81       	ld	r26, Y
    1e9c:	b9 81       	ldd	r27, Y+1	; 0x01
    1e9e:	30 97       	sbiw	r30, 0x00	; 0
    1ea0:	11 f0       	breq	.+4      	; 0x1ea6 <_ZNK6String9compareToERKS_+0x18>
    1ea2:	10 97       	sbiw	r26, 0x00	; 0
    1ea4:	c9 f4       	brne	.+50     	; 0x1ed8 <_ZNK6String9compareToERKS_+0x4a>
    1ea6:	10 97       	sbiw	r26, 0x00	; 0
    1ea8:	59 f0       	breq	.+22     	; 0x1ec0 <_ZNK6String9compareToERKS_+0x32>
    1eaa:	eb 01       	movw	r28, r22
    1eac:	2c 81       	ldd	r18, Y+4	; 0x04
    1eae:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb0:	23 2b       	or	r18, r19
    1eb2:	31 f0       	breq	.+12     	; 0x1ec0 <_ZNK6String9compareToERKS_+0x32>
    1eb4:	2c 91       	ld	r18, X
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	31 95       	neg	r19
    1eba:	21 95       	neg	r18
    1ebc:	31 09       	sbc	r19, r1
    1ebe:	14 c0       	rjmp	.+40     	; 0x1ee8 <_ZNK6String9compareToERKS_+0x5a>
    1ec0:	30 97       	sbiw	r30, 0x00	; 0
    1ec2:	81 f0       	breq	.+32     	; 0x1ee4 <_ZNK6String9compareToERKS_+0x56>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	14 96       	adiw	r26, 0x04	; 4
    1ec8:	8d 91       	ld	r24, X+
    1eca:	9c 91       	ld	r25, X
    1ecc:	15 97       	sbiw	r26, 0x05	; 5
    1ece:	89 2b       	or	r24, r25
    1ed0:	49 f0       	breq	.+18     	; 0x1ee4 <_ZNK6String9compareToERKS_+0x56>
    1ed2:	20 81       	ld	r18, Z
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	08 c0       	rjmp	.+16     	; 0x1ee8 <_ZNK6String9compareToERKS_+0x5a>
    1ed8:	bd 01       	movw	r22, r26
    1eda:	cf 01       	movw	r24, r30
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	0c 94 40 41 	jmp	0x8280	; 0x8280 <strcmp>
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	c9 01       	movw	r24, r18
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	08 95       	ret

00001ef0 <_ZNK6String6equalsERKS_>:
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	44 81       	ldd	r20, Z+4	; 0x04
    1ef4:	55 81       	ldd	r21, Z+5	; 0x05
    1ef6:	fb 01       	movw	r30, r22
    1ef8:	24 81       	ldd	r18, Z+4	; 0x04
    1efa:	35 81       	ldd	r19, Z+5	; 0x05
    1efc:	42 17       	cp	r20, r18
    1efe:	53 07       	cpc	r21, r19
    1f00:	29 f4       	brne	.+10     	; 0x1f0c <_ZNK6String6equalsERKS_+0x1c>
    1f02:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZNK6String9compareToERKS_>
    1f06:	21 e0       	ldi	r18, 0x01	; 1
    1f08:	89 2b       	or	r24, r25
    1f0a:	09 f0       	breq	.+2      	; 0x1f0e <_ZNK6String6equalsERKS_+0x1e>
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	82 2f       	mov	r24, r18
    1f10:	08 95       	ret

00001f12 <_ZNK6String6equalsEPKc>:
    1f12:	dc 01       	movw	r26, r24
    1f14:	14 96       	adiw	r26, 0x04	; 4
    1f16:	2d 91       	ld	r18, X+
    1f18:	3c 91       	ld	r19, X
    1f1a:	15 97       	sbiw	r26, 0x05	; 5
    1f1c:	23 2b       	or	r18, r19
    1f1e:	39 f4       	brne	.+14     	; 0x1f2e <_ZNK6String6equalsEPKc+0x1c>
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	61 15       	cp	r22, r1
    1f24:	71 05       	cpc	r23, r1
    1f26:	11 f0       	breq	.+4      	; 0x1f2c <_ZNK6String6equalsEPKc+0x1a>
    1f28:	fb 01       	movw	r30, r22
    1f2a:	08 c0       	rjmp	.+16     	; 0x1f3c <_ZNK6String6equalsEPKc+0x2a>
    1f2c:	08 95       	ret
    1f2e:	dc 01       	movw	r26, r24
    1f30:	ed 91       	ld	r30, X+
    1f32:	fc 91       	ld	r31, X
    1f34:	61 15       	cp	r22, r1
    1f36:	71 05       	cpc	r23, r1
    1f38:	29 f4       	brne	.+10     	; 0x1f44 <_ZNK6String6equalsEPKc+0x32>
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 81       	ld	r25, Z
    1f3e:	99 23       	and	r25, r25
    1f40:	49 f0       	breq	.+18     	; 0x1f54 <_ZNK6String6equalsEPKc+0x42>
    1f42:	07 c0       	rjmp	.+14     	; 0x1f52 <_ZNK6String6equalsEPKc+0x40>
    1f44:	cf 01       	movw	r24, r30
    1f46:	0e 94 40 41 	call	0x8280	; 0x8280 <strcmp>
    1f4a:	9c 01       	movw	r18, r24
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	23 2b       	or	r18, r19
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <_ZNK6String6equalsEPKc+0x42>
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	08 95       	ret

00001f56 <_ZNK6StringltERKS_>:
    1f56:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZNK6String9compareToERKS_>
    1f5a:	89 2f       	mov	r24, r25
    1f5c:	88 1f       	adc	r24, r24
    1f5e:	88 27       	eor	r24, r24
    1f60:	88 1f       	adc	r24, r24
    1f62:	08 95       	ret

00001f64 <_ZNK6StringgtERKS_>:
    1f64:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZNK6String9compareToERKS_>
    1f68:	21 e0       	ldi	r18, 0x01	; 1
    1f6a:	18 16       	cp	r1, r24
    1f6c:	19 06       	cpc	r1, r25
    1f6e:	0c f0       	brlt	.+2      	; 0x1f72 <_ZNK6StringgtERKS_+0xe>
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	82 2f       	mov	r24, r18
    1f74:	08 95       	ret

00001f76 <_ZNK6StringleERKS_>:
    1f76:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZNK6String9compareToERKS_>
    1f7a:	21 e0       	ldi	r18, 0x01	; 1
    1f7c:	18 16       	cp	r1, r24
    1f7e:	19 06       	cpc	r1, r25
    1f80:	0c f4       	brge	.+2      	; 0x1f84 <_ZNK6StringleERKS_+0xe>
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	82 2f       	mov	r24, r18
    1f86:	08 95       	ret

00001f88 <_ZNK6StringgeERKS_>:
    1f88:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZNK6String9compareToERKS_>
    1f8c:	89 2f       	mov	r24, r25
    1f8e:	80 95       	com	r24
    1f90:	88 1f       	adc	r24, r24
    1f92:	88 27       	eor	r24, r24
    1f94:	88 1f       	adc	r24, r24
    1f96:	08 95       	ret

00001f98 <_ZNK6String16equalsIgnoreCaseERKS_>:
    1f98:	ef 92       	push	r14
    1f9a:	ff 92       	push	r15
    1f9c:	0f 93       	push	r16
    1f9e:	1f 93       	push	r17
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	86 17       	cp	r24, r22
    1fa6:	97 07       	cpc	r25, r23
    1fa8:	09 f1       	breq	.+66     	; 0x1fec <_ZNK6String16equalsIgnoreCaseERKS_+0x54>
    1faa:	fc 01       	movw	r30, r24
    1fac:	24 81       	ldd	r18, Z+4	; 0x04
    1fae:	35 81       	ldd	r19, Z+5	; 0x05
    1fb0:	fb 01       	movw	r30, r22
    1fb2:	44 81       	ldd	r20, Z+4	; 0x04
    1fb4:	55 81       	ldd	r21, Z+5	; 0x05
    1fb6:	24 17       	cp	r18, r20
    1fb8:	35 07       	cpc	r19, r21
    1fba:	d1 f4       	brne	.+52     	; 0x1ff0 <_ZNK6String16equalsIgnoreCaseERKS_+0x58>
    1fbc:	23 2b       	or	r18, r19
    1fbe:	b1 f0       	breq	.+44     	; 0x1fec <_ZNK6String16equalsIgnoreCaseERKS_+0x54>
    1fc0:	c0 81       	ld	r28, Z
    1fc2:	d1 81       	ldd	r29, Z+1	; 0x01
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	00 81       	ld	r16, Z
    1fc8:	11 81       	ldd	r17, Z+1	; 0x01
    1fca:	0b c0       	rjmp	.+22     	; 0x1fe2 <_ZNK6String16equalsIgnoreCaseERKS_+0x4a>
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 06 41 	call	0x820c	; 0x820c <tolower>
    1fd2:	7c 01       	movw	r14, r24
    1fd4:	89 91       	ld	r24, Y+
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	0e 94 06 41 	call	0x820c	; 0x820c <tolower>
    1fdc:	e8 16       	cp	r14, r24
    1fde:	f9 06       	cpc	r15, r25
    1fe0:	39 f4       	brne	.+14     	; 0x1ff0 <_ZNK6String16equalsIgnoreCaseERKS_+0x58>
    1fe2:	f8 01       	movw	r30, r16
    1fe4:	81 91       	ld	r24, Z+
    1fe6:	8f 01       	movw	r16, r30
    1fe8:	81 11       	cpse	r24, r1
    1fea:	f0 cf       	rjmp	.-32     	; 0x1fcc <_ZNK6String16equalsIgnoreCaseERKS_+0x34>
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	01 c0       	rjmp	.+2      	; 0x1ff2 <_ZNK6String16equalsIgnoreCaseERKS_+0x5a>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	1f 91       	pop	r17
    1ff8:	0f 91       	pop	r16
    1ffa:	ff 90       	pop	r15
    1ffc:	ef 90       	pop	r14
    1ffe:	08 95       	ret

00002000 <_ZNK6String10startsWithERKS_j>:
    2000:	fa 01       	movw	r30, r20
    2002:	db 01       	movw	r26, r22
    2004:	14 96       	adiw	r26, 0x04	; 4
    2006:	4d 91       	ld	r20, X+
    2008:	5c 91       	ld	r21, X
    200a:	15 97       	sbiw	r26, 0x05	; 5
    200c:	dc 01       	movw	r26, r24
    200e:	14 96       	adiw	r26, 0x04	; 4
    2010:	2d 91       	ld	r18, X+
    2012:	3c 91       	ld	r19, X
    2014:	15 97       	sbiw	r26, 0x05	; 5
    2016:	24 1b       	sub	r18, r20
    2018:	35 0b       	sbc	r19, r21
    201a:	2e 17       	cp	r18, r30
    201c:	3f 07       	cpc	r19, r31
    201e:	90 f0       	brcs	.+36     	; 0x2044 <_ZNK6String10startsWithERKS_j+0x44>
    2020:	8d 91       	ld	r24, X+
    2022:	9c 91       	ld	r25, X
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	71 f0       	breq	.+28     	; 0x2044 <_ZNK6String10startsWithERKS_j+0x44>
    2028:	db 01       	movw	r26, r22
    202a:	6d 91       	ld	r22, X+
    202c:	7c 91       	ld	r23, X
    202e:	61 15       	cp	r22, r1
    2030:	71 05       	cpc	r23, r1
    2032:	41 f0       	breq	.+16     	; 0x2044 <_ZNK6String10startsWithERKS_j+0x44>
    2034:	8e 0f       	add	r24, r30
    2036:	9f 1f       	adc	r25, r31
    2038:	0e 94 50 41 	call	0x82a0	; 0x82a0 <strncmp>
    203c:	9c 01       	movw	r18, r24
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	23 2b       	or	r18, r19
    2042:	09 f0       	breq	.+2      	; 0x2046 <_ZNK6String10startsWithERKS_j+0x46>
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	08 95       	ret

00002048 <_ZNK6String10startsWithERKS_>:
    2048:	fc 01       	movw	r30, r24
    204a:	44 81       	ldd	r20, Z+4	; 0x04
    204c:	55 81       	ldd	r21, Z+5	; 0x05
    204e:	fb 01       	movw	r30, r22
    2050:	24 81       	ldd	r18, Z+4	; 0x04
    2052:	35 81       	ldd	r19, Z+5	; 0x05
    2054:	42 17       	cp	r20, r18
    2056:	53 07       	cpc	r21, r19
    2058:	20 f0       	brcs	.+8      	; 0x2062 <_ZNK6String10startsWithERKS_+0x1a>
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	50 e0       	ldi	r21, 0x00	; 0
    205e:	0c 94 00 10 	jmp	0x2000	; 0x2000 <_ZNK6String10startsWithERKS_j>
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	08 95       	ret

00002066 <_ZNK6String8endsWithERKS_>:
    2066:	fc 01       	movw	r30, r24
    2068:	84 81       	ldd	r24, Z+4	; 0x04
    206a:	95 81       	ldd	r25, Z+5	; 0x05
    206c:	db 01       	movw	r26, r22
    206e:	14 96       	adiw	r26, 0x04	; 4
    2070:	4d 91       	ld	r20, X+
    2072:	5c 91       	ld	r21, X
    2074:	15 97       	sbiw	r26, 0x05	; 5
    2076:	84 17       	cp	r24, r20
    2078:	95 07       	cpc	r25, r21
    207a:	a0 f0       	brcs	.+40     	; 0x20a4 <_ZNK6String8endsWithERKS_+0x3e>
    207c:	20 81       	ld	r18, Z
    207e:	31 81       	ldd	r19, Z+1	; 0x01
    2080:	21 15       	cp	r18, r1
    2082:	31 05       	cpc	r19, r1
    2084:	79 f0       	breq	.+30     	; 0x20a4 <_ZNK6String8endsWithERKS_+0x3e>
    2086:	6d 91       	ld	r22, X+
    2088:	7c 91       	ld	r23, X
    208a:	61 15       	cp	r22, r1
    208c:	71 05       	cpc	r23, r1
    208e:	51 f0       	breq	.+20     	; 0x20a4 <_ZNK6String8endsWithERKS_+0x3e>
    2090:	84 1b       	sub	r24, r20
    2092:	95 0b       	sbc	r25, r21
    2094:	82 0f       	add	r24, r18
    2096:	93 1f       	adc	r25, r19
    2098:	0e 94 40 41 	call	0x8280	; 0x8280 <strcmp>
    209c:	9c 01       	movw	r18, r24
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	23 2b       	or	r18, r19
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <_ZNK6String8endsWithERKS_+0x40>
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	08 95       	ret

000020a8 <_ZN6String9setCharAtEjc>:
    20a8:	dc 01       	movw	r26, r24
    20aa:	14 96       	adiw	r26, 0x04	; 4
    20ac:	2d 91       	ld	r18, X+
    20ae:	3c 91       	ld	r19, X
    20b0:	15 97       	sbiw	r26, 0x05	; 5
    20b2:	62 17       	cp	r22, r18
    20b4:	73 07       	cpc	r23, r19
    20b6:	28 f4       	brcc	.+10     	; 0x20c2 <_ZN6String9setCharAtEjc+0x1a>
    20b8:	ed 91       	ld	r30, X+
    20ba:	fc 91       	ld	r31, X
    20bc:	e6 0f       	add	r30, r22
    20be:	f7 1f       	adc	r31, r23
    20c0:	40 83       	st	Z, r20
    20c2:	08 95       	ret

000020c4 <_ZN6StringixEj>:
    20c4:	fc 01       	movw	r30, r24
    20c6:	24 81       	ldd	r18, Z+4	; 0x04
    20c8:	35 81       	ldd	r19, Z+5	; 0x05
    20ca:	62 17       	cp	r22, r18
    20cc:	73 07       	cpc	r23, r19
    20ce:	20 f4       	brcc	.+8      	; 0x20d8 <_ZN6StringixEj+0x14>
    20d0:	80 81       	ld	r24, Z
    20d2:	91 81       	ldd	r25, Z+1	; 0x01
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	29 f4       	brne	.+10     	; 0x20e2 <_ZN6StringixEj+0x1e>
    20d8:	10 92 0a 08 	sts	0x080A, r1
    20dc:	6a e0       	ldi	r22, 0x0A	; 10
    20de:	78 e0       	ldi	r23, 0x08	; 8
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <_ZN6StringixEj+0x22>
    20e2:	68 0f       	add	r22, r24
    20e4:	79 1f       	adc	r23, r25
    20e6:	cb 01       	movw	r24, r22
    20e8:	08 95       	ret

000020ea <_ZNK6StringixEj>:
    20ea:	fc 01       	movw	r30, r24
    20ec:	24 81       	ldd	r18, Z+4	; 0x04
    20ee:	35 81       	ldd	r19, Z+5	; 0x05
    20f0:	62 17       	cp	r22, r18
    20f2:	73 07       	cpc	r23, r19
    20f4:	48 f4       	brcc	.+18     	; 0x2108 <_ZNK6StringixEj+0x1e>
    20f6:	80 81       	ld	r24, Z
    20f8:	91 81       	ldd	r25, Z+1	; 0x01
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	29 f0       	breq	.+10     	; 0x2108 <_ZNK6StringixEj+0x1e>
    20fe:	fc 01       	movw	r30, r24
    2100:	e6 0f       	add	r30, r22
    2102:	f7 1f       	adc	r31, r23
    2104:	80 81       	ld	r24, Z
    2106:	08 95       	ret
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	08 95       	ret

0000210c <_ZNK6String6charAtEj>:
    210c:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <_ZNK6StringixEj>

00002110 <_ZNK6String8getBytesEPhjj>:
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	cf 93       	push	r28
    2116:	df 93       	push	r29
    2118:	eb 01       	movw	r28, r22
    211a:	41 15       	cp	r20, r1
    211c:	51 05       	cpc	r21, r1
    211e:	e9 f0       	breq	.+58     	; 0x215a <_ZNK6String8getBytesEPhjj+0x4a>
    2120:	20 97       	sbiw	r28, 0x00	; 0
    2122:	d9 f0       	breq	.+54     	; 0x215a <_ZNK6String8getBytesEPhjj+0x4a>
    2124:	fc 01       	movw	r30, r24
    2126:	04 81       	ldd	r16, Z+4	; 0x04
    2128:	15 81       	ldd	r17, Z+5	; 0x05
    212a:	20 17       	cp	r18, r16
    212c:	31 07       	cpc	r19, r17
    212e:	08 f0       	brcs	.+2      	; 0x2132 <_ZNK6String8getBytesEPhjj+0x22>
    2130:	13 c0       	rjmp	.+38     	; 0x2158 <_ZNK6String8getBytesEPhjj+0x48>
    2132:	41 50       	subi	r20, 0x01	; 1
    2134:	51 09       	sbc	r21, r1
    2136:	02 1b       	sub	r16, r18
    2138:	13 0b       	sbc	r17, r19
    213a:	40 17       	cp	r20, r16
    213c:	51 07       	cpc	r21, r17
    213e:	08 f4       	brcc	.+2      	; 0x2142 <_ZNK6String8getBytesEPhjj+0x32>
    2140:	8a 01       	movw	r16, r20
    2142:	fc 01       	movw	r30, r24
    2144:	60 81       	ld	r22, Z
    2146:	71 81       	ldd	r23, Z+1	; 0x01
    2148:	62 0f       	add	r22, r18
    214a:	73 1f       	adc	r23, r19
    214c:	a8 01       	movw	r20, r16
    214e:	ce 01       	movw	r24, r28
    2150:	0e 94 5e 41 	call	0x82bc	; 0x82bc <strncpy>
    2154:	c0 0f       	add	r28, r16
    2156:	d1 1f       	adc	r29, r17
    2158:	18 82       	st	Y, r1
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	1f 91       	pop	r17
    2160:	0f 91       	pop	r16
    2162:	08 95       	ret

00002164 <_ZNK6String7indexOfEcj>:
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	fc 01       	movw	r30, r24
    216a:	84 81       	ldd	r24, Z+4	; 0x04
    216c:	95 81       	ldd	r25, Z+5	; 0x05
    216e:	48 17       	cp	r20, r24
    2170:	59 07       	cpc	r21, r25
    2172:	70 f4       	brcc	.+28     	; 0x2190 <_ZNK6String7indexOfEcj+0x2c>
    2174:	c0 81       	ld	r28, Z
    2176:	d1 81       	ldd	r29, Z+1	; 0x01
    2178:	70 e0       	ldi	r23, 0x00	; 0
    217a:	ce 01       	movw	r24, r28
    217c:	84 0f       	add	r24, r20
    217e:	95 1f       	adc	r25, r21
    2180:	0e 94 35 41 	call	0x826a	; 0x826a <strchr>
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	21 f0       	breq	.+8      	; 0x2190 <_ZNK6String7indexOfEcj+0x2c>
    2188:	9c 01       	movw	r18, r24
    218a:	2c 1b       	sub	r18, r28
    218c:	3d 0b       	sbc	r19, r29
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <_ZNK6String7indexOfEcj+0x30>
    2190:	2f ef       	ldi	r18, 0xFF	; 255
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	c9 01       	movw	r24, r18
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	08 95       	ret

0000219c <_ZNK6String7indexOfEc>:
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	50 e0       	ldi	r21, 0x00	; 0
    21a0:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <_ZNK6String7indexOfEcj>

000021a4 <_ZNK6String7indexOfERKS_j>:
    21a4:	cf 93       	push	r28
    21a6:	df 93       	push	r29
    21a8:	fc 01       	movw	r30, r24
    21aa:	84 81       	ldd	r24, Z+4	; 0x04
    21ac:	95 81       	ldd	r25, Z+5	; 0x05
    21ae:	48 17       	cp	r20, r24
    21b0:	59 07       	cpc	r21, r25
    21b2:	80 f4       	brcc	.+32     	; 0x21d4 <_ZNK6String7indexOfERKS_j+0x30>
    21b4:	c0 81       	ld	r28, Z
    21b6:	d1 81       	ldd	r29, Z+1	; 0x01
    21b8:	fb 01       	movw	r30, r22
    21ba:	60 81       	ld	r22, Z
    21bc:	71 81       	ldd	r23, Z+1	; 0x01
    21be:	ce 01       	movw	r24, r28
    21c0:	84 0f       	add	r24, r20
    21c2:	95 1f       	adc	r25, r21
    21c4:	0e 94 78 41 	call	0x82f0	; 0x82f0 <strstr>
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	21 f0       	breq	.+8      	; 0x21d4 <_ZNK6String7indexOfERKS_j+0x30>
    21cc:	9c 01       	movw	r18, r24
    21ce:	2c 1b       	sub	r18, r28
    21d0:	3d 0b       	sbc	r19, r29
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <_ZNK6String7indexOfERKS_j+0x34>
    21d4:	2f ef       	ldi	r18, 0xFF	; 255
    21d6:	3f ef       	ldi	r19, 0xFF	; 255
    21d8:	c9 01       	movw	r24, r18
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	08 95       	ret

000021e0 <_ZNK6String7indexOfERKS_>:
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	50 e0       	ldi	r21, 0x00	; 0
    21e4:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <_ZNK6String7indexOfERKS_j>

000021e8 <_ZNK6String11lastIndexOfEcj>:
    21e8:	df 92       	push	r13
    21ea:	ef 92       	push	r14
    21ec:	ff 92       	push	r15
    21ee:	0f 93       	push	r16
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	ec 01       	movw	r28, r24
    21f8:	8c 81       	ldd	r24, Y+4	; 0x04
    21fa:	9d 81       	ldd	r25, Y+5	; 0x05
    21fc:	48 17       	cp	r20, r24
    21fe:	59 07       	cpc	r21, r25
    2200:	18 f0       	brcs	.+6      	; 0x2208 <__stack+0x9>
    2202:	2f ef       	ldi	r18, 0xFF	; 255
    2204:	3f ef       	ldi	r19, 0xFF	; 255
    2206:	1b c0       	rjmp	.+54     	; 0x223e <__stack+0x3f>
    2208:	8a 01       	movw	r16, r20
    220a:	0f 5f       	subi	r16, 0xFF	; 255
    220c:	1f 4f       	sbci	r17, 0xFF	; 255
    220e:	e8 81       	ld	r30, Y
    2210:	f9 81       	ldd	r31, Y+1	; 0x01
    2212:	e0 0f       	add	r30, r16
    2214:	f1 1f       	adc	r31, r17
    2216:	d0 80       	ld	r13, Z
    2218:	10 82       	st	Z, r1
    221a:	e8 80       	ld	r14, Y
    221c:	f9 80       	ldd	r15, Y+1	; 0x01
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	c7 01       	movw	r24, r14
    2222:	0e 94 6d 41 	call	0x82da	; 0x82da <strrchr>
    2226:	f7 01       	movw	r30, r14
    2228:	e0 0f       	add	r30, r16
    222a:	f1 1f       	adc	r31, r17
    222c:	d0 82       	st	Z, r13
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	41 f3       	breq	.-48     	; 0x2202 <__stack+0x3>
    2232:	28 81       	ld	r18, Y
    2234:	39 81       	ldd	r19, Y+1	; 0x01
    2236:	ac 01       	movw	r20, r24
    2238:	42 1b       	sub	r20, r18
    223a:	53 0b       	sbc	r21, r19
    223c:	9a 01       	movw	r18, r20
    223e:	c9 01       	movw	r24, r18
    2240:	df 91       	pop	r29
    2242:	cf 91       	pop	r28
    2244:	1f 91       	pop	r17
    2246:	0f 91       	pop	r16
    2248:	ff 90       	pop	r15
    224a:	ef 90       	pop	r14
    224c:	df 90       	pop	r13
    224e:	08 95       	ret

00002250 <_ZNK6String11lastIndexOfEc>:
    2250:	fc 01       	movw	r30, r24
    2252:	44 81       	ldd	r20, Z+4	; 0x04
    2254:	55 81       	ldd	r21, Z+5	; 0x05
    2256:	41 50       	subi	r20, 0x01	; 1
    2258:	51 09       	sbc	r21, r1
    225a:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <_ZNK6String11lastIndexOfEcj>

0000225e <_ZNK6String11lastIndexOfERKS_j>:
    225e:	af 92       	push	r10
    2260:	bf 92       	push	r11
    2262:	cf 92       	push	r12
    2264:	df 92       	push	r13
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	6b 01       	movw	r12, r22
    2274:	8a 01       	movw	r16, r20
    2276:	fb 01       	movw	r30, r22
    2278:	44 81       	ldd	r20, Z+4	; 0x04
    227a:	55 81       	ldd	r21, Z+5	; 0x05
    227c:	41 15       	cp	r20, r1
    227e:	51 05       	cpc	r21, r1
    2280:	69 f1       	breq	.+90     	; 0x22dc <_ZNK6String11lastIndexOfERKS_j+0x7e>
    2282:	fc 01       	movw	r30, r24
    2284:	24 81       	ldd	r18, Z+4	; 0x04
    2286:	35 81       	ldd	r19, Z+5	; 0x05
    2288:	21 15       	cp	r18, r1
    228a:	31 05       	cpc	r19, r1
    228c:	39 f1       	breq	.+78     	; 0x22dc <_ZNK6String11lastIndexOfERKS_j+0x7e>
    228e:	24 17       	cp	r18, r20
    2290:	35 07       	cpc	r19, r21
    2292:	20 f1       	brcs	.+72     	; 0x22dc <_ZNK6String11lastIndexOfERKS_j+0x7e>
    2294:	02 17       	cp	r16, r18
    2296:	13 07       	cpc	r17, r19
    2298:	18 f0       	brcs	.+6      	; 0x22a0 <_ZNK6String11lastIndexOfERKS_j+0x42>
    229a:	89 01       	movw	r16, r18
    229c:	01 50       	subi	r16, 0x01	; 1
    229e:	11 09       	sbc	r17, r1
    22a0:	fc 01       	movw	r30, r24
    22a2:	e0 80       	ld	r14, Z
    22a4:	f1 80       	ldd	r15, Z+1	; 0x01
    22a6:	c7 01       	movw	r24, r14
    22a8:	cf ef       	ldi	r28, 0xFF	; 255
    22aa:	df ef       	ldi	r29, 0xFF	; 255
    22ac:	57 01       	movw	r10, r14
    22ae:	a0 0e       	add	r10, r16
    22b0:	b1 1e       	adc	r11, r17
    22b2:	10 c0       	rjmp	.+32     	; 0x22d4 <_ZNK6String11lastIndexOfERKS_j+0x76>
    22b4:	f6 01       	movw	r30, r12
    22b6:	60 81       	ld	r22, Z
    22b8:	71 81       	ldd	r23, Z+1	; 0x01
    22ba:	0e 94 78 41 	call	0x82f0	; 0x82f0 <strstr>
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	79 f0       	breq	.+30     	; 0x22e0 <_ZNK6String11lastIndexOfERKS_j+0x82>
    22c2:	9c 01       	movw	r18, r24
    22c4:	2e 19       	sub	r18, r14
    22c6:	3f 09       	sbc	r19, r15
    22c8:	02 17       	cp	r16, r18
    22ca:	13 07       	cpc	r17, r19
    22cc:	08 f4       	brcc	.+2      	; 0x22d0 <_ZNK6String11lastIndexOfERKS_j+0x72>
    22ce:	9e 01       	movw	r18, r28
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	e9 01       	movw	r28, r18
    22d4:	a8 16       	cp	r10, r24
    22d6:	b9 06       	cpc	r11, r25
    22d8:	68 f7       	brcc	.-38     	; 0x22b4 <_ZNK6String11lastIndexOfERKS_j+0x56>
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <_ZNK6String11lastIndexOfERKS_j+0x82>
    22dc:	cf ef       	ldi	r28, 0xFF	; 255
    22de:	df ef       	ldi	r29, 0xFF	; 255
    22e0:	ce 01       	movw	r24, r28
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	1f 91       	pop	r17
    22e8:	0f 91       	pop	r16
    22ea:	ff 90       	pop	r15
    22ec:	ef 90       	pop	r14
    22ee:	df 90       	pop	r13
    22f0:	cf 90       	pop	r12
    22f2:	bf 90       	pop	r11
    22f4:	af 90       	pop	r10
    22f6:	08 95       	ret

000022f8 <_ZNK6String11lastIndexOfERKS_>:
    22f8:	fc 01       	movw	r30, r24
    22fa:	44 81       	ldd	r20, Z+4	; 0x04
    22fc:	55 81       	ldd	r21, Z+5	; 0x05
    22fe:	fb 01       	movw	r30, r22
    2300:	24 81       	ldd	r18, Z+4	; 0x04
    2302:	35 81       	ldd	r19, Z+5	; 0x05
    2304:	42 1b       	sub	r20, r18
    2306:	53 0b       	sbc	r21, r19
    2308:	0c 94 2f 11 	jmp	0x225e	; 0x225e <_ZNK6String11lastIndexOfERKS_j>

0000230c <_ZNK6String9substringEjj>:
    230c:	bf 92       	push	r11
    230e:	cf 92       	push	r12
    2310:	df 92       	push	r13
    2312:	ef 92       	push	r14
    2314:	ff 92       	push	r15
    2316:	0f 93       	push	r16
    2318:	1f 93       	push	r17
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	6c 01       	movw	r12, r24
    2320:	7b 01       	movw	r14, r22
    2322:	ea 01       	movw	r28, r20
    2324:	89 01       	movw	r16, r18
    2326:	24 17       	cp	r18, r20
    2328:	35 07       	cpc	r19, r21
    232a:	20 f4       	brcc	.+8      	; 0x2334 <_ZNK6String9substringEjj+0x28>
    232c:	8d 2f       	mov	r24, r29
    232e:	e9 01       	movw	r28, r18
    2330:	04 2f       	mov	r16, r20
    2332:	18 2f       	mov	r17, r24
    2334:	67 ef       	ldi	r22, 0xF7	; 247
    2336:	74 e0       	ldi	r23, 0x04	; 4
    2338:	c6 01       	movw	r24, r12
    233a:	0e 94 0f 0c 	call	0x181e	; 0x181e <_ZN6StringC1EPKc>
    233e:	d7 01       	movw	r26, r14
    2340:	14 96       	adiw	r26, 0x04	; 4
    2342:	8d 91       	ld	r24, X+
    2344:	9c 91       	ld	r25, X
    2346:	15 97       	sbiw	r26, 0x05	; 5
    2348:	8c 17       	cp	r24, r28
    234a:	9d 07       	cpc	r25, r29
    234c:	c8 f0       	brcs	.+50     	; 0x2380 <_ZNK6String9substringEjj+0x74>
    234e:	80 17       	cp	r24, r16
    2350:	91 07       	cpc	r25, r17
    2352:	08 f4       	brcc	.+2      	; 0x2356 <_ZNK6String9substringEjj+0x4a>
    2354:	8c 01       	movw	r16, r24
    2356:	d7 01       	movw	r26, r14
    2358:	ed 91       	ld	r30, X+
    235a:	fc 91       	ld	r31, X
    235c:	11 97       	sbiw	r26, 0x01	; 1
    235e:	e0 0f       	add	r30, r16
    2360:	f1 1f       	adc	r31, r17
    2362:	b0 80       	ld	r11, Z
    2364:	10 82       	st	Z, r1
    2366:	6d 91       	ld	r22, X+
    2368:	7c 91       	ld	r23, X
    236a:	6c 0f       	add	r22, r28
    236c:	7d 1f       	adc	r23, r29
    236e:	c6 01       	movw	r24, r12
    2370:	0e 94 4d 0c 	call	0x189a	; 0x189a <_ZN6StringaSEPKc>
    2374:	d7 01       	movw	r26, r14
    2376:	ed 91       	ld	r30, X+
    2378:	fc 91       	ld	r31, X
    237a:	e0 0f       	add	r30, r16
    237c:	f1 1f       	adc	r31, r17
    237e:	b0 82       	st	Z, r11
    2380:	c6 01       	movw	r24, r12
    2382:	df 91       	pop	r29
    2384:	cf 91       	pop	r28
    2386:	1f 91       	pop	r17
    2388:	0f 91       	pop	r16
    238a:	ff 90       	pop	r15
    238c:	ef 90       	pop	r14
    238e:	df 90       	pop	r13
    2390:	cf 90       	pop	r12
    2392:	bf 90       	pop	r11
    2394:	08 95       	ret

00002396 <_ZNK6String9substringEj>:
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	ec 01       	movw	r28, r24
    239c:	fb 01       	movw	r30, r22
    239e:	24 81       	ldd	r18, Z+4	; 0x04
    23a0:	35 81       	ldd	r19, Z+5	; 0x05
    23a2:	0e 94 86 11 	call	0x230c	; 0x230c <_ZNK6String9substringEjj>
    23a6:	ce 01       	movw	r24, r28
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	08 95       	ret

000023ae <_ZN6String7replaceEcc>:
    23ae:	dc 01       	movw	r26, r24
    23b0:	ed 91       	ld	r30, X+
    23b2:	fc 91       	ld	r31, X
    23b4:	30 97       	sbiw	r30, 0x00	; 0
    23b6:	29 f4       	brne	.+10     	; 0x23c2 <_ZN6String7replaceEcc+0x14>
    23b8:	08 95       	ret
    23ba:	86 13       	cpse	r24, r22
    23bc:	01 c0       	rjmp	.+2      	; 0x23c0 <_ZN6String7replaceEcc+0x12>
    23be:	40 83       	st	Z, r20
    23c0:	31 96       	adiw	r30, 0x01	; 1
    23c2:	80 81       	ld	r24, Z
    23c4:	81 11       	cpse	r24, r1
    23c6:	f9 cf       	rjmp	.-14     	; 0x23ba <_ZN6String7replaceEcc+0xc>
    23c8:	08 95       	ret

000023ca <_ZN6String7replaceERKS_S1_>:
    23ca:	2f 92       	push	r2
    23cc:	3f 92       	push	r3
    23ce:	4f 92       	push	r4
    23d0:	5f 92       	push	r5
    23d2:	6f 92       	push	r6
    23d4:	7f 92       	push	r7
    23d6:	8f 92       	push	r8
    23d8:	9f 92       	push	r9
    23da:	af 92       	push	r10
    23dc:	bf 92       	push	r11
    23de:	cf 92       	push	r12
    23e0:	df 92       	push	r13
    23e2:	ef 92       	push	r14
    23e4:	ff 92       	push	r15
    23e6:	0f 93       	push	r16
    23e8:	1f 93       	push	r17
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	8c 01       	movw	r16, r24
    23f0:	5b 01       	movw	r10, r22
    23f2:	7a 01       	movw	r14, r20
    23f4:	dc 01       	movw	r26, r24
    23f6:	14 96       	adiw	r26, 0x04	; 4
    23f8:	6d 90       	ld	r6, X+
    23fa:	7c 90       	ld	r7, X
    23fc:	15 97       	sbiw	r26, 0x05	; 5
    23fe:	61 14       	cp	r6, r1
    2400:	71 04       	cpc	r7, r1
    2402:	09 f4       	brne	.+2      	; 0x2406 <_ZN6String7replaceERKS_S1_+0x3c>
    2404:	e1 c0       	rjmp	.+450    	; 0x25c8 <_ZN6String7replaceERKS_S1_+0x1fe>
    2406:	fb 01       	movw	r30, r22
    2408:	44 80       	ldd	r4, Z+4	; 0x04
    240a:	55 80       	ldd	r5, Z+5	; 0x05
    240c:	41 14       	cp	r4, r1
    240e:	51 04       	cpc	r5, r1
    2410:	09 f4       	brne	.+2      	; 0x2414 <_ZN6String7replaceERKS_S1_+0x4a>
    2412:	da c0       	rjmp	.+436    	; 0x25c8 <_ZN6String7replaceERKS_S1_+0x1fe>
    2414:	da 01       	movw	r26, r20
    2416:	14 96       	adiw	r26, 0x04	; 4
    2418:	cd 90       	ld	r12, X+
    241a:	dc 90       	ld	r13, X
    241c:	15 97       	sbiw	r26, 0x05	; 5
    241e:	c4 18       	sub	r12, r4
    2420:	d5 08       	sbc	r13, r5
    2422:	fc 01       	movw	r30, r24
    2424:	c0 81       	ld	r28, Z
    2426:	d1 81       	ldd	r29, Z+1	; 0x01
    2428:	c1 14       	cp	r12, r1
    242a:	d1 04       	cpc	r13, r1
    242c:	e1 f4       	brne	.+56     	; 0x2466 <_ZN6String7replaceERKS_S1_+0x9c>
    242e:	11 c0       	rjmp	.+34     	; 0x2452 <_ZN6String7replaceERKS_S1_+0x88>
    2430:	d7 01       	movw	r26, r14
    2432:	6c 91       	ld	r22, X
    2434:	11 96       	adiw	r26, 0x01	; 1
    2436:	7c 91       	ld	r23, X
    2438:	11 97       	sbiw	r26, 0x01	; 1
    243a:	14 96       	adiw	r26, 0x04	; 4
    243c:	4d 91       	ld	r20, X+
    243e:	5c 91       	ld	r21, X
    2440:	15 97       	sbiw	r26, 0x05	; 5
    2442:	c8 01       	movw	r24, r16
    2444:	0e 94 1a 41 	call	0x8234	; 0x8234 <memcpy>
    2448:	f7 01       	movw	r30, r14
    244a:	c4 81       	ldd	r28, Z+4	; 0x04
    244c:	d5 81       	ldd	r29, Z+5	; 0x05
    244e:	c0 0f       	add	r28, r16
    2450:	d1 1f       	adc	r29, r17
    2452:	d5 01       	movw	r26, r10
    2454:	6d 91       	ld	r22, X+
    2456:	7c 91       	ld	r23, X
    2458:	ce 01       	movw	r24, r28
    245a:	0e 94 78 41 	call	0x82f0	; 0x82f0 <strstr>
    245e:	8c 01       	movw	r16, r24
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	31 f7       	brne	.-52     	; 0x2430 <_ZN6String7replaceERKS_S1_+0x66>
    2464:	b1 c0       	rjmp	.+354    	; 0x25c8 <_ZN6String7replaceERKS_S1_+0x1fe>
    2466:	d7 fe       	sbrs	r13, 7
    2468:	02 c0       	rjmp	.+4      	; 0x246e <_ZN6String7replaceERKS_S1_+0xa4>
    246a:	4e 01       	movw	r8, r28
    246c:	2f c0       	rjmp	.+94     	; 0x24cc <_ZN6String7replaceERKS_S1_+0x102>
    246e:	fb 01       	movw	r30, r22
    2470:	20 80       	ld	r2, Z
    2472:	31 80       	ldd	r3, Z+1	; 0x01
    2474:	43 01       	movw	r8, r6
    2476:	4e c0       	rjmp	.+156    	; 0x2514 <_ZN6String7replaceERKS_S1_+0x14a>
    2478:	23 01       	movw	r4, r6
    247a:	4c 1a       	sub	r4, r28
    247c:	5d 0a       	sbc	r5, r29
    247e:	a2 01       	movw	r20, r4
    2480:	be 01       	movw	r22, r28
    2482:	c4 01       	movw	r24, r8
    2484:	0e 94 1a 41 	call	0x8234	; 0x8234 <memcpy>
    2488:	e4 01       	movw	r28, r8
    248a:	c4 0d       	add	r28, r4
    248c:	d5 1d       	adc	r29, r5
    248e:	d7 01       	movw	r26, r14
    2490:	6c 91       	ld	r22, X
    2492:	11 96       	adiw	r26, 0x01	; 1
    2494:	7c 91       	ld	r23, X
    2496:	11 97       	sbiw	r26, 0x01	; 1
    2498:	14 96       	adiw	r26, 0x04	; 4
    249a:	4d 91       	ld	r20, X+
    249c:	5c 91       	ld	r21, X
    249e:	15 97       	sbiw	r26, 0x05	; 5
    24a0:	ce 01       	movw	r24, r28
    24a2:	0e 94 1a 41 	call	0x8234	; 0x8234 <memcpy>
    24a6:	f7 01       	movw	r30, r14
    24a8:	84 80       	ldd	r8, Z+4	; 0x04
    24aa:	95 80       	ldd	r9, Z+5	; 0x05
    24ac:	8c 0e       	add	r8, r28
    24ae:	9d 1e       	adc	r9, r29
    24b0:	d5 01       	movw	r26, r10
    24b2:	14 96       	adiw	r26, 0x04	; 4
    24b4:	cd 91       	ld	r28, X+
    24b6:	dc 91       	ld	r29, X
    24b8:	15 97       	sbiw	r26, 0x05	; 5
    24ba:	c6 0d       	add	r28, r6
    24bc:	d7 1d       	adc	r29, r7
    24be:	f8 01       	movw	r30, r16
    24c0:	84 81       	ldd	r24, Z+4	; 0x04
    24c2:	95 81       	ldd	r25, Z+5	; 0x05
    24c4:	8c 0d       	add	r24, r12
    24c6:	9d 1d       	adc	r25, r13
    24c8:	95 83       	std	Z+5, r25	; 0x05
    24ca:	84 83       	std	Z+4, r24	; 0x04
    24cc:	d5 01       	movw	r26, r10
    24ce:	6d 91       	ld	r22, X+
    24d0:	7c 91       	ld	r23, X
    24d2:	ce 01       	movw	r24, r28
    24d4:	0e 94 78 41 	call	0x82f0	; 0x82f0 <strstr>
    24d8:	3c 01       	movw	r6, r24
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	69 f6       	brne	.-102    	; 0x2478 <_ZN6String7replaceERKS_S1_+0xae>
    24de:	be 01       	movw	r22, r28
    24e0:	c4 01       	movw	r24, r8
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	ff 90       	pop	r15
    24ec:	ef 90       	pop	r14
    24ee:	df 90       	pop	r13
    24f0:	cf 90       	pop	r12
    24f2:	bf 90       	pop	r11
    24f4:	af 90       	pop	r10
    24f6:	9f 90       	pop	r9
    24f8:	8f 90       	pop	r8
    24fa:	7f 90       	pop	r7
    24fc:	6f 90       	pop	r6
    24fe:	5f 90       	pop	r5
    2500:	4f 90       	pop	r4
    2502:	3f 90       	pop	r3
    2504:	2f 90       	pop	r2
    2506:	0c 94 49 41 	jmp	0x8292	; 0x8292 <strcpy>
    250a:	ec 01       	movw	r28, r24
    250c:	c4 0d       	add	r28, r4
    250e:	d5 1d       	adc	r29, r5
    2510:	8c 0c       	add	r8, r12
    2512:	9d 1c       	adc	r9, r13
    2514:	b1 01       	movw	r22, r2
    2516:	ce 01       	movw	r24, r28
    2518:	0e 94 78 41 	call	0x82f0	; 0x82f0 <strstr>
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	a9 f7       	brne	.-22     	; 0x250a <_ZN6String7replaceERKS_S1_+0x140>
    2520:	86 14       	cp	r8, r6
    2522:	97 04       	cpc	r9, r7
    2524:	09 f4       	brne	.+2      	; 0x2528 <_ZN6String7replaceERKS_S1_+0x15e>
    2526:	50 c0       	rjmp	.+160    	; 0x25c8 <_ZN6String7replaceERKS_S1_+0x1fe>
    2528:	f8 01       	movw	r30, r16
    252a:	82 81       	ldd	r24, Z+2	; 0x02
    252c:	93 81       	ldd	r25, Z+3	; 0x03
    252e:	88 15       	cp	r24, r8
    2530:	99 05       	cpc	r25, r9
    2532:	98 f4       	brcc	.+38     	; 0x255a <_ZN6String7replaceERKS_S1_+0x190>
    2534:	b4 01       	movw	r22, r8
    2536:	c8 01       	movw	r24, r16
    2538:	0e 94 b5 0b 	call	0x176a	; 0x176a <_ZN6String12changeBufferEj>
    253c:	88 23       	and	r24, r24
    253e:	09 f4       	brne	.+2      	; 0x2542 <_ZN6String7replaceERKS_S1_+0x178>
    2540:	43 c0       	rjmp	.+134    	; 0x25c8 <_ZN6String7replaceERKS_S1_+0x1fe>
    2542:	0b c0       	rjmp	.+22     	; 0x255a <_ZN6String7replaceERKS_S1_+0x190>
    2544:	d7 fd       	sbrc	r29, 7
    2546:	40 c0       	rjmp	.+128    	; 0x25c8 <_ZN6String7replaceERKS_S1_+0x1fe>
    2548:	ae 01       	movw	r20, r28
    254a:	b5 01       	movw	r22, r10
    254c:	c8 01       	movw	r24, r16
    254e:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZNK6String11lastIndexOfERKS_j>
    2552:	ec 01       	movw	r28, r24
    2554:	97 ff       	sbrs	r25, 7
    2556:	07 c0       	rjmp	.+14     	; 0x2566 <_ZN6String7replaceERKS_S1_+0x19c>
    2558:	37 c0       	rjmp	.+110    	; 0x25c8 <_ZN6String7replaceERKS_S1_+0x1fe>
    255a:	d8 01       	movw	r26, r16
    255c:	14 96       	adiw	r26, 0x04	; 4
    255e:	cd 91       	ld	r28, X+
    2560:	dc 91       	ld	r29, X
    2562:	15 97       	sbiw	r26, 0x05	; 5
    2564:	2f c0       	rjmp	.+94     	; 0x25c4 <_ZN6String7replaceERKS_S1_+0x1fa>
    2566:	f8 01       	movw	r30, r16
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	d5 01       	movw	r26, r10
    256e:	14 96       	adiw	r26, 0x04	; 4
    2570:	2d 91       	ld	r18, X+
    2572:	3c 91       	ld	r19, X
    2574:	15 97       	sbiw	r26, 0x05	; 5
    2576:	2c 0f       	add	r18, r28
    2578:	3d 1f       	adc	r19, r29
    257a:	82 0f       	add	r24, r18
    257c:	93 1f       	adc	r25, r19
    257e:	44 81       	ldd	r20, Z+4	; 0x04
    2580:	55 81       	ldd	r21, Z+5	; 0x05
    2582:	42 1b       	sub	r20, r18
    2584:	53 0b       	sbc	r21, r19
    2586:	bc 01       	movw	r22, r24
    2588:	8c 0d       	add	r24, r12
    258a:	9d 1d       	adc	r25, r13
    258c:	0e 94 23 41 	call	0x8246	; 0x8246 <memmove>
    2590:	f8 01       	movw	r30, r16
    2592:	84 81       	ldd	r24, Z+4	; 0x04
    2594:	95 81       	ldd	r25, Z+5	; 0x05
    2596:	8c 0d       	add	r24, r12
    2598:	9d 1d       	adc	r25, r13
    259a:	95 83       	std	Z+5, r25	; 0x05
    259c:	84 83       	std	Z+4, r24	; 0x04
    259e:	01 90       	ld	r0, Z+
    25a0:	f0 81       	ld	r31, Z
    25a2:	e0 2d       	mov	r30, r0
    25a4:	e8 0f       	add	r30, r24
    25a6:	f9 1f       	adc	r31, r25
    25a8:	10 82       	st	Z, r1
    25aa:	d8 01       	movw	r26, r16
    25ac:	2d 91       	ld	r18, X+
    25ae:	3c 91       	ld	r19, X
    25b0:	2c 0f       	add	r18, r28
    25b2:	3d 1f       	adc	r19, r29
    25b4:	f7 01       	movw	r30, r14
    25b6:	60 81       	ld	r22, Z
    25b8:	71 81       	ldd	r23, Z+1	; 0x01
    25ba:	44 81       	ldd	r20, Z+4	; 0x04
    25bc:	55 81       	ldd	r21, Z+5	; 0x05
    25be:	c9 01       	movw	r24, r18
    25c0:	0e 94 1a 41 	call	0x8234	; 0x8234 <memcpy>
    25c4:	21 97       	sbiw	r28, 0x01	; 1
    25c6:	be cf       	rjmp	.-132    	; 0x2544 <_ZN6String7replaceERKS_S1_+0x17a>
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	ff 90       	pop	r15
    25d2:	ef 90       	pop	r14
    25d4:	df 90       	pop	r13
    25d6:	cf 90       	pop	r12
    25d8:	bf 90       	pop	r11
    25da:	af 90       	pop	r10
    25dc:	9f 90       	pop	r9
    25de:	8f 90       	pop	r8
    25e0:	7f 90       	pop	r7
    25e2:	6f 90       	pop	r6
    25e4:	5f 90       	pop	r5
    25e6:	4f 90       	pop	r4
    25e8:	3f 90       	pop	r3
    25ea:	2f 90       	pop	r2
    25ec:	08 95       	ret

000025ee <_ZN6String11toLowerCaseEv>:
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
    25f2:	fc 01       	movw	r30, r24
    25f4:	c0 81       	ld	r28, Z
    25f6:	d1 81       	ldd	r29, Z+1	; 0x01
    25f8:	20 97       	sbiw	r28, 0x00	; 0
    25fa:	29 f4       	brne	.+10     	; 0x2606 <_ZN6String11toLowerCaseEv+0x18>
    25fc:	07 c0       	rjmp	.+14     	; 0x260c <_ZN6String11toLowerCaseEv+0x1e>
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	0e 94 06 41 	call	0x820c	; 0x820c <tolower>
    2604:	89 93       	st	Y+, r24
    2606:	88 81       	ld	r24, Y
    2608:	81 11       	cpse	r24, r1
    260a:	f9 cf       	rjmp	.-14     	; 0x25fe <_ZN6String11toLowerCaseEv+0x10>
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	08 95       	ret

00002612 <_ZN6String11toUpperCaseEv>:
    2612:	cf 93       	push	r28
    2614:	df 93       	push	r29
    2616:	fc 01       	movw	r30, r24
    2618:	c0 81       	ld	r28, Z
    261a:	d1 81       	ldd	r29, Z+1	; 0x01
    261c:	20 97       	sbiw	r28, 0x00	; 0
    261e:	29 f4       	brne	.+10     	; 0x262a <_ZN6String11toUpperCaseEv+0x18>
    2620:	07 c0       	rjmp	.+14     	; 0x2630 <_ZN6String11toUpperCaseEv+0x1e>
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0e 94 0e 41 	call	0x821c	; 0x821c <toupper>
    2628:	89 93       	st	Y+, r24
    262a:	88 81       	ld	r24, Y
    262c:	81 11       	cpse	r24, r1
    262e:	f9 cf       	rjmp	.-14     	; 0x2622 <_ZN6String11toUpperCaseEv+0x10>
    2630:	df 91       	pop	r29
    2632:	cf 91       	pop	r28
    2634:	08 95       	ret

00002636 <_ZN6String4trimEv>:
    2636:	af 92       	push	r10
    2638:	bf 92       	push	r11
    263a:	cf 92       	push	r12
    263c:	df 92       	push	r13
    263e:	ef 92       	push	r14
    2640:	ff 92       	push	r15
    2642:	0f 93       	push	r16
    2644:	1f 93       	push	r17
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	6c 01       	movw	r12, r24
    264c:	dc 01       	movw	r26, r24
    264e:	ed 90       	ld	r14, X+
    2650:	fc 90       	ld	r15, X
    2652:	11 97       	sbiw	r26, 0x01	; 1
    2654:	e1 14       	cp	r14, r1
    2656:	f1 04       	cpc	r15, r1
    2658:	09 f4       	brne	.+2      	; 0x265c <_ZN6String4trimEv+0x26>
    265a:	42 c0       	rjmp	.+132    	; 0x26e0 <_ZN6String4trimEv+0xaa>
    265c:	14 96       	adiw	r26, 0x04	; 4
    265e:	0d 91       	ld	r16, X+
    2660:	1c 91       	ld	r17, X
    2662:	15 97       	sbiw	r26, 0x05	; 5
    2664:	01 15       	cp	r16, r1
    2666:	11 05       	cpc	r17, r1
    2668:	d9 f1       	breq	.+118    	; 0x26e0 <_ZN6String4trimEv+0xaa>
    266a:	57 01       	movw	r10, r14
    266c:	e5 01       	movw	r28, r10
    266e:	bf ef       	ldi	r27, 0xFF	; 255
    2670:	ab 1a       	sub	r10, r27
    2672:	bb 0a       	sbc	r11, r27
    2674:	88 81       	ld	r24, Y
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	0e 94 fe 40 	call	0x81fc	; 0x81fc <isspace>
    267c:	89 2b       	or	r24, r25
    267e:	b1 f7       	brne	.-20     	; 0x266c <_ZN6String4trimEv+0x36>
    2680:	01 50       	subi	r16, 0x01	; 1
    2682:	11 09       	sbc	r17, r1
    2684:	0e 0d       	add	r16, r14
    2686:	1f 1d       	adc	r17, r15
    2688:	f8 01       	movw	r30, r16
    268a:	80 81       	ld	r24, Z
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	0e 94 fe 40 	call	0x81fc	; 0x81fc <isspace>
    2692:	89 2b       	or	r24, r25
    2694:	69 f4       	brne	.+26     	; 0x26b0 <_ZN6String4trimEv+0x7a>
    2696:	0f 5f       	subi	r16, 0xFF	; 255
    2698:	1f 4f       	sbci	r17, 0xFF	; 255
    269a:	0c 1b       	sub	r16, r28
    269c:	1d 0b       	sbc	r17, r29
    269e:	d6 01       	movw	r26, r12
    26a0:	15 96       	adiw	r26, 0x05	; 5
    26a2:	1c 93       	st	X, r17
    26a4:	0e 93       	st	-X, r16
    26a6:	14 97       	sbiw	r26, 0x04	; 4
    26a8:	ec 16       	cp	r14, r28
    26aa:	fd 06       	cpc	r15, r29
    26ac:	50 f4       	brcc	.+20     	; 0x26c2 <_ZN6String4trimEv+0x8c>
    26ae:	04 c0       	rjmp	.+8      	; 0x26b8 <_ZN6String4trimEv+0x82>
    26b0:	0c 17       	cp	r16, r28
    26b2:	1d 07       	cpc	r17, r29
    26b4:	90 f4       	brcc	.+36     	; 0x26da <_ZN6String4trimEv+0xa4>
    26b6:	ef cf       	rjmp	.-34     	; 0x2696 <_ZN6String4trimEv+0x60>
    26b8:	a8 01       	movw	r20, r16
    26ba:	be 01       	movw	r22, r28
    26bc:	c7 01       	movw	r24, r14
    26be:	0e 94 1a 41 	call	0x8234	; 0x8234 <memcpy>
    26c2:	d6 01       	movw	r26, r12
    26c4:	ed 91       	ld	r30, X+
    26c6:	fc 91       	ld	r31, X
    26c8:	11 97       	sbiw	r26, 0x01	; 1
    26ca:	14 96       	adiw	r26, 0x04	; 4
    26cc:	8d 91       	ld	r24, X+
    26ce:	9c 91       	ld	r25, X
    26d0:	15 97       	sbiw	r26, 0x05	; 5
    26d2:	e8 0f       	add	r30, r24
    26d4:	f9 1f       	adc	r31, r25
    26d6:	10 82       	st	Z, r1
    26d8:	03 c0       	rjmp	.+6      	; 0x26e0 <_ZN6String4trimEv+0xaa>
    26da:	01 50       	subi	r16, 0x01	; 1
    26dc:	11 09       	sbc	r17, r1
    26de:	d4 cf       	rjmp	.-88     	; 0x2688 <_ZN6String4trimEv+0x52>
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	1f 91       	pop	r17
    26e6:	0f 91       	pop	r16
    26e8:	ff 90       	pop	r15
    26ea:	ef 90       	pop	r14
    26ec:	df 90       	pop	r13
    26ee:	cf 90       	pop	r12
    26f0:	bf 90       	pop	r11
    26f2:	af 90       	pop	r10
    26f4:	08 95       	ret

000026f6 <_ZNK6String5toIntEv>:
    26f6:	fc 01       	movw	r30, r24
    26f8:	80 81       	ld	r24, Z
    26fa:	91 81       	ldd	r25, Z+1	; 0x01
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	11 f0       	breq	.+4      	; 0x2704 <_ZNK6String5toIntEv+0xe>
    2700:	0c 94 d7 40 	jmp	0x81ae	; 0x81ae <atol>
    2704:	60 e0       	ldi	r22, 0x00	; 0
    2706:	70 e0       	ldi	r23, 0x00	; 0
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	08 95       	ret

0000270e <malloc>:
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	82 30       	cpi	r24, 0x02	; 2
    2718:	91 05       	cpc	r25, r1
    271a:	10 f4       	brcc	.+4      	; 0x2720 <malloc+0x12>
    271c:	82 e0       	ldi	r24, 0x02	; 2
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	e0 91 b7 10 	lds	r30, 0x10B7
    2724:	f0 91 b8 10 	lds	r31, 0x10B8
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	c0 e0       	ldi	r28, 0x00	; 0
    272e:	d0 e0       	ldi	r29, 0x00	; 0
    2730:	23 c0       	rjmp	.+70     	; 0x2778 <malloc+0x6a>
    2732:	40 81       	ld	r20, Z
    2734:	51 81       	ldd	r21, Z+1	; 0x01
    2736:	48 17       	cp	r20, r24
    2738:	59 07       	cpc	r21, r25
    273a:	a8 f0       	brcs	.+42     	; 0x2766 <malloc+0x58>
    273c:	48 17       	cp	r20, r24
    273e:	59 07       	cpc	r21, r25
    2740:	61 f4       	brne	.+24     	; 0x275a <malloc+0x4c>
    2742:	82 81       	ldd	r24, Z+2	; 0x02
    2744:	93 81       	ldd	r25, Z+3	; 0x03
    2746:	20 97       	sbiw	r28, 0x00	; 0
    2748:	19 f0       	breq	.+6      	; 0x2750 <malloc+0x42>
    274a:	9b 83       	std	Y+3, r25	; 0x03
    274c:	8a 83       	std	Y+2, r24	; 0x02
    274e:	2e c0       	rjmp	.+92     	; 0x27ac <malloc+0x9e>
    2750:	90 93 b8 10 	sts	0x10B8, r25
    2754:	80 93 b7 10 	sts	0x10B7, r24
    2758:	29 c0       	rjmp	.+82     	; 0x27ac <malloc+0x9e>
    275a:	21 15       	cp	r18, r1
    275c:	31 05       	cpc	r19, r1
    275e:	29 f0       	breq	.+10     	; 0x276a <malloc+0x5c>
    2760:	42 17       	cp	r20, r18
    2762:	53 07       	cpc	r21, r19
    2764:	10 f0       	brcs	.+4      	; 0x276a <malloc+0x5c>
    2766:	a9 01       	movw	r20, r18
    2768:	02 c0       	rjmp	.+4      	; 0x276e <malloc+0x60>
    276a:	be 01       	movw	r22, r28
    276c:	df 01       	movw	r26, r30
    276e:	02 81       	ldd	r16, Z+2	; 0x02
    2770:	13 81       	ldd	r17, Z+3	; 0x03
    2772:	ef 01       	movw	r28, r30
    2774:	9a 01       	movw	r18, r20
    2776:	f8 01       	movw	r30, r16
    2778:	30 97       	sbiw	r30, 0x00	; 0
    277a:	d9 f6       	brne	.-74     	; 0x2732 <malloc+0x24>
    277c:	21 15       	cp	r18, r1
    277e:	31 05       	cpc	r19, r1
    2780:	09 f1       	breq	.+66     	; 0x27c4 <malloc+0xb6>
    2782:	28 1b       	sub	r18, r24
    2784:	39 0b       	sbc	r19, r25
    2786:	24 30       	cpi	r18, 0x04	; 4
    2788:	31 05       	cpc	r19, r1
    278a:	90 f4       	brcc	.+36     	; 0x27b0 <malloc+0xa2>
    278c:	12 96       	adiw	r26, 0x02	; 2
    278e:	8d 91       	ld	r24, X+
    2790:	9c 91       	ld	r25, X
    2792:	13 97       	sbiw	r26, 0x03	; 3
    2794:	61 15       	cp	r22, r1
    2796:	71 05       	cpc	r23, r1
    2798:	21 f0       	breq	.+8      	; 0x27a2 <malloc+0x94>
    279a:	fb 01       	movw	r30, r22
    279c:	93 83       	std	Z+3, r25	; 0x03
    279e:	82 83       	std	Z+2, r24	; 0x02
    27a0:	04 c0       	rjmp	.+8      	; 0x27aa <malloc+0x9c>
    27a2:	90 93 b8 10 	sts	0x10B8, r25
    27a6:	80 93 b7 10 	sts	0x10B7, r24
    27aa:	fd 01       	movw	r30, r26
    27ac:	32 96       	adiw	r30, 0x02	; 2
    27ae:	2f c0       	rjmp	.+94     	; 0x280e <malloc+0x100>
    27b0:	fd 01       	movw	r30, r26
    27b2:	e2 0f       	add	r30, r18
    27b4:	f3 1f       	adc	r31, r19
    27b6:	81 93       	st	Z+, r24
    27b8:	91 93       	st	Z+, r25
    27ba:	22 50       	subi	r18, 0x02	; 2
    27bc:	31 09       	sbc	r19, r1
    27be:	2d 93       	st	X+, r18
    27c0:	3c 93       	st	X, r19
    27c2:	25 c0       	rjmp	.+74     	; 0x280e <malloc+0x100>
    27c4:	4d b7       	in	r20, 0x3d	; 61
    27c6:	5e b7       	in	r21, 0x3e	; 62
    27c8:	48 57       	subi	r20, 0x78	; 120
    27ca:	51 09       	sbc	r21, r1
    27cc:	e0 91 02 02 	lds	r30, 0x0202
    27d0:	f0 91 03 02 	lds	r31, 0x0203
    27d4:	e4 17       	cp	r30, r20
    27d6:	f5 07       	cpc	r31, r21
    27d8:	c0 f4       	brcc	.+48     	; 0x280a <malloc+0xfc>
    27da:	4e 1b       	sub	r20, r30
    27dc:	5f 0b       	sbc	r21, r31
    27de:	48 17       	cp	r20, r24
    27e0:	59 07       	cpc	r21, r25
    27e2:	98 f0       	brcs	.+38     	; 0x280a <malloc+0xfc>
    27e4:	9c 01       	movw	r18, r24
    27e6:	2e 5f       	subi	r18, 0xFE	; 254
    27e8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ea:	42 17       	cp	r20, r18
    27ec:	53 07       	cpc	r21, r19
    27ee:	68 f0       	brcs	.+26     	; 0x280a <malloc+0xfc>
    27f0:	2e 0f       	add	r18, r30
    27f2:	3f 1f       	adc	r19, r31
    27f4:	30 93 03 02 	sts	0x0203, r19
    27f8:	20 93 02 02 	sts	0x0202, r18
    27fc:	30 93 01 02 	sts	0x0201, r19
    2800:	20 93 00 02 	sts	0x0200, r18
    2804:	81 93       	st	Z+, r24
    2806:	91 93       	st	Z+, r25
    2808:	02 c0       	rjmp	.+4      	; 0x280e <malloc+0x100>
    280a:	e0 e0       	ldi	r30, 0x00	; 0
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	cf 01       	movw	r24, r30
    2810:	df 91       	pop	r29
    2812:	cf 91       	pop	r28
    2814:	1f 91       	pop	r17
    2816:	0f 91       	pop	r16
    2818:	08 95       	ret

0000281a <free>:
    281a:	ef 92       	push	r14
    281c:	ff 92       	push	r15
    281e:	0f 93       	push	r16
    2820:	1f 93       	push	r17
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	09 f4       	brne	.+2      	; 0x282c <free+0x12>
    282a:	8e c0       	rjmp	.+284    	; 0x2948 <free+0x12e>
    282c:	dc 01       	movw	r26, r24
    282e:	12 97       	sbiw	r26, 0x02	; 2
    2830:	13 96       	adiw	r26, 0x03	; 3
    2832:	1c 92       	st	X, r1
    2834:	1e 92       	st	-X, r1
    2836:	12 97       	sbiw	r26, 0x02	; 2
    2838:	e0 90 b7 10 	lds	r14, 0x10B7
    283c:	f0 90 b8 10 	lds	r15, 0x10B8
    2840:	e1 14       	cp	r14, r1
    2842:	f1 04       	cpc	r15, r1
    2844:	89 f4       	brne	.+34     	; 0x2868 <free+0x4e>
    2846:	2d 91       	ld	r18, X+
    2848:	3c 91       	ld	r19, X
    284a:	11 97       	sbiw	r26, 0x01	; 1
    284c:	28 0f       	add	r18, r24
    284e:	39 1f       	adc	r19, r25
    2850:	80 91 02 02 	lds	r24, 0x0202
    2854:	90 91 03 02 	lds	r25, 0x0203
    2858:	82 17       	cp	r24, r18
    285a:	93 07       	cpc	r25, r19
    285c:	89 f5       	brne	.+98     	; 0x28c0 <free+0xa6>
    285e:	b0 93 03 02 	sts	0x0203, r27
    2862:	a0 93 02 02 	sts	0x0202, r26
    2866:	70 c0       	rjmp	.+224    	; 0x2948 <free+0x12e>
    2868:	e7 01       	movw	r28, r14
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	01 c0       	rjmp	.+2      	; 0x2872 <free+0x58>
    2870:	ea 01       	movw	r28, r20
    2872:	ca 17       	cp	r28, r26
    2874:	db 07       	cpc	r29, r27
    2876:	38 f4       	brcc	.+14     	; 0x2886 <free+0x6c>
    2878:	4a 81       	ldd	r20, Y+2	; 0x02
    287a:	5b 81       	ldd	r21, Y+3	; 0x03
    287c:	9e 01       	movw	r18, r28
    287e:	41 15       	cp	r20, r1
    2880:	51 05       	cpc	r21, r1
    2882:	b1 f7       	brne	.-20     	; 0x2870 <free+0x56>
    2884:	22 c0       	rjmp	.+68     	; 0x28ca <free+0xb0>
    2886:	ac 01       	movw	r20, r24
    2888:	42 50       	subi	r20, 0x02	; 2
    288a:	51 09       	sbc	r21, r1
    288c:	fa 01       	movw	r30, r20
    288e:	d3 83       	std	Z+3, r29	; 0x03
    2890:	c2 83       	std	Z+2, r28	; 0x02
    2892:	00 81       	ld	r16, Z
    2894:	11 81       	ldd	r17, Z+1	; 0x01
    2896:	bc 01       	movw	r22, r24
    2898:	60 0f       	add	r22, r16
    289a:	71 1f       	adc	r23, r17
    289c:	6c 17       	cp	r22, r28
    289e:	7d 07       	cpc	r23, r29
    28a0:	61 f4       	brne	.+24     	; 0x28ba <free+0xa0>
    28a2:	68 81       	ld	r22, Y
    28a4:	79 81       	ldd	r23, Y+1	; 0x01
    28a6:	60 0f       	add	r22, r16
    28a8:	71 1f       	adc	r23, r17
    28aa:	6e 5f       	subi	r22, 0xFE	; 254
    28ac:	7f 4f       	sbci	r23, 0xFF	; 255
    28ae:	71 83       	std	Z+1, r23	; 0x01
    28b0:	60 83       	st	Z, r22
    28b2:	6a 81       	ldd	r22, Y+2	; 0x02
    28b4:	7b 81       	ldd	r23, Y+3	; 0x03
    28b6:	73 83       	std	Z+3, r23	; 0x03
    28b8:	62 83       	std	Z+2, r22	; 0x02
    28ba:	21 15       	cp	r18, r1
    28bc:	31 05       	cpc	r19, r1
    28be:	29 f4       	brne	.+10     	; 0x28ca <free+0xb0>
    28c0:	b0 93 b8 10 	sts	0x10B8, r27
    28c4:	a0 93 b7 10 	sts	0x10B7, r26
    28c8:	3f c0       	rjmp	.+126    	; 0x2948 <free+0x12e>
    28ca:	f9 01       	movw	r30, r18
    28cc:	b3 83       	std	Z+3, r27	; 0x03
    28ce:	a2 83       	std	Z+2, r26	; 0x02
    28d0:	e9 01       	movw	r28, r18
    28d2:	49 91       	ld	r20, Y+
    28d4:	59 91       	ld	r21, Y+
    28d6:	c4 0f       	add	r28, r20
    28d8:	d5 1f       	adc	r29, r21
    28da:	ac 17       	cp	r26, r28
    28dc:	bd 07       	cpc	r27, r29
    28de:	71 f4       	brne	.+28     	; 0x28fc <free+0xe2>
    28e0:	dc 01       	movw	r26, r24
    28e2:	9e 91       	ld	r25, -X
    28e4:	8e 91       	ld	r24, -X
    28e6:	84 0f       	add	r24, r20
    28e8:	95 1f       	adc	r25, r21
    28ea:	02 96       	adiw	r24, 0x02	; 2
    28ec:	91 83       	std	Z+1, r25	; 0x01
    28ee:	80 83       	st	Z, r24
    28f0:	12 96       	adiw	r26, 0x02	; 2
    28f2:	8d 91       	ld	r24, X+
    28f4:	9c 91       	ld	r25, X
    28f6:	13 97       	sbiw	r26, 0x03	; 3
    28f8:	93 83       	std	Z+3, r25	; 0x03
    28fa:	82 83       	std	Z+2, r24	; 0x02
    28fc:	a0 e0       	ldi	r26, 0x00	; 0
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <free+0xec>
    2902:	d7 01       	movw	r26, r14
    2904:	7c 01       	movw	r14, r24
    2906:	f7 01       	movw	r30, r14
    2908:	82 81       	ldd	r24, Z+2	; 0x02
    290a:	93 81       	ldd	r25, Z+3	; 0x03
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	c9 f7       	brne	.-14     	; 0x2902 <free+0xe8>
    2910:	c7 01       	movw	r24, r14
    2912:	02 96       	adiw	r24, 0x02	; 2
    2914:	20 81       	ld	r18, Z
    2916:	31 81       	ldd	r19, Z+1	; 0x01
    2918:	82 0f       	add	r24, r18
    291a:	93 1f       	adc	r25, r19
    291c:	20 91 02 02 	lds	r18, 0x0202
    2920:	30 91 03 02 	lds	r19, 0x0203
    2924:	28 17       	cp	r18, r24
    2926:	39 07       	cpc	r19, r25
    2928:	79 f4       	brne	.+30     	; 0x2948 <free+0x12e>
    292a:	10 97       	sbiw	r26, 0x00	; 0
    292c:	29 f4       	brne	.+10     	; 0x2938 <free+0x11e>
    292e:	10 92 b8 10 	sts	0x10B8, r1
    2932:	10 92 b7 10 	sts	0x10B7, r1
    2936:	04 c0       	rjmp	.+8      	; 0x2940 <free+0x126>
    2938:	13 96       	adiw	r26, 0x03	; 3
    293a:	1c 92       	st	X, r1
    293c:	1e 92       	st	-X, r1
    293e:	12 97       	sbiw	r26, 0x02	; 2
    2940:	f0 92 03 02 	sts	0x0203, r15
    2944:	e0 92 02 02 	sts	0x0202, r14
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	ff 90       	pop	r15
    2952:	ef 90       	pop	r14
    2954:	08 95       	ret

00002956 <realloc>:
    2956:	8f 92       	push	r8
    2958:	9f 92       	push	r9
    295a:	af 92       	push	r10
    295c:	bf 92       	push	r11
    295e:	cf 92       	push	r12
    2960:	df 92       	push	r13
    2962:	ef 92       	push	r14
    2964:	ff 92       	push	r15
    2966:	0f 93       	push	r16
    2968:	1f 93       	push	r17
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    296e:	ec 01       	movw	r28, r24
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	79 f4       	brne	.+30     	; 0x2992 <realloc+0x3c>
    2974:	cb 01       	movw	r24, r22
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	ff 90       	pop	r15
    2980:	ef 90       	pop	r14
    2982:	df 90       	pop	r13
    2984:	cf 90       	pop	r12
    2986:	bf 90       	pop	r11
    2988:	af 90       	pop	r10
    298a:	9f 90       	pop	r9
    298c:	8f 90       	pop	r8
    298e:	0c 94 87 13 	jmp	0x270e	; 0x270e <malloc>
    2992:	dc 01       	movw	r26, r24
    2994:	a6 0f       	add	r26, r22
    2996:	b7 1f       	adc	r27, r23
    2998:	fc 01       	movw	r30, r24
    299a:	32 97       	sbiw	r30, 0x02	; 2
    299c:	ae 17       	cp	r26, r30
    299e:	bf 07       	cpc	r27, r31
    29a0:	18 f4       	brcc	.+6      	; 0x29a8 <realloc+0x52>
    29a2:	c0 e0       	ldi	r28, 0x00	; 0
    29a4:	d0 e0       	ldi	r29, 0x00	; 0
    29a6:	a3 c0       	rjmp	.+326    	; 0x2aee <realloc+0x198>
    29a8:	00 81       	ld	r16, Z
    29aa:	11 81       	ldd	r17, Z+1	; 0x01
    29ac:	06 17       	cp	r16, r22
    29ae:	17 07       	cpc	r17, r23
    29b0:	b0 f0       	brcs	.+44     	; 0x29de <realloc+0x88>
    29b2:	05 30       	cpi	r16, 0x05	; 5
    29b4:	11 05       	cpc	r17, r1
    29b6:	08 f4       	brcc	.+2      	; 0x29ba <realloc+0x64>
    29b8:	9a c0       	rjmp	.+308    	; 0x2aee <realloc+0x198>
    29ba:	c8 01       	movw	r24, r16
    29bc:	04 97       	sbiw	r24, 0x04	; 4
    29be:	86 17       	cp	r24, r22
    29c0:	97 07       	cpc	r25, r23
    29c2:	08 f4       	brcc	.+2      	; 0x29c6 <realloc+0x70>
    29c4:	94 c0       	rjmp	.+296    	; 0x2aee <realloc+0x198>
    29c6:	02 50       	subi	r16, 0x02	; 2
    29c8:	11 09       	sbc	r17, r1
    29ca:	06 1b       	sub	r16, r22
    29cc:	17 0b       	sbc	r17, r23
    29ce:	0d 93       	st	X+, r16
    29d0:	1d 93       	st	X+, r17
    29d2:	71 83       	std	Z+1, r23	; 0x01
    29d4:	60 83       	st	Z, r22
    29d6:	cd 01       	movw	r24, r26
    29d8:	0e 94 0d 14 	call	0x281a	; 0x281a <free>
    29dc:	88 c0       	rjmp	.+272    	; 0x2aee <realloc+0x198>
    29de:	6b 01       	movw	r12, r22
    29e0:	c0 1a       	sub	r12, r16
    29e2:	d1 0a       	sbc	r13, r17
    29e4:	7c 01       	movw	r14, r24
    29e6:	e0 0e       	add	r14, r16
    29e8:	f1 1e       	adc	r15, r17
    29ea:	e0 91 b7 10 	lds	r30, 0x10B7
    29ee:	f0 91 b8 10 	lds	r31, 0x10B8
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	48 c0       	rjmp	.+144    	; 0x2a8c <realloc+0x136>
    29fc:	ee 15       	cp	r30, r14
    29fe:	ff 05       	cpc	r31, r15
    2a00:	d1 f5       	brne	.+116    	; 0x2a76 <realloc+0x120>
    2a02:	80 80       	ld	r8, Z
    2a04:	91 80       	ldd	r9, Z+1	; 0x01
    2a06:	54 01       	movw	r10, r8
    2a08:	42 e0       	ldi	r20, 0x02	; 2
    2a0a:	a4 0e       	add	r10, r20
    2a0c:	b1 1c       	adc	r11, r1
    2a0e:	ac 14       	cp	r10, r12
    2a10:	bd 04       	cpc	r11, r13
    2a12:	88 f1       	brcs	.+98     	; 0x2a76 <realloc+0x120>
    2a14:	74 01       	movw	r14, r8
    2a16:	ec 18       	sub	r14, r12
    2a18:	fd 08       	sbc	r15, r13
    2a1a:	67 01       	movw	r12, r14
    2a1c:	22 e0       	ldi	r18, 0x02	; 2
    2a1e:	c2 0e       	add	r12, r18
    2a20:	d1 1c       	adc	r13, r1
    2a22:	9e 01       	movw	r18, r28
    2a24:	22 50       	subi	r18, 0x02	; 2
    2a26:	31 09       	sbc	r19, r1
    2a28:	45 e0       	ldi	r20, 0x05	; 5
    2a2a:	c4 16       	cp	r12, r20
    2a2c:	d1 04       	cpc	r13, r1
    2a2e:	78 f0       	brcs	.+30     	; 0x2a4e <realloc+0xf8>
    2a30:	42 81       	ldd	r20, Z+2	; 0x02
    2a32:	53 81       	ldd	r21, Z+3	; 0x03
    2a34:	13 96       	adiw	r26, 0x03	; 3
    2a36:	5c 93       	st	X, r21
    2a38:	4e 93       	st	-X, r20
    2a3a:	12 97       	sbiw	r26, 0x02	; 2
    2a3c:	11 96       	adiw	r26, 0x01	; 1
    2a3e:	fc 92       	st	X, r15
    2a40:	ee 92       	st	-X, r14
    2a42:	f9 01       	movw	r30, r18
    2a44:	71 83       	std	Z+1, r23	; 0x01
    2a46:	60 83       	st	Z, r22
    2a48:	3a 2f       	mov	r19, r26
    2a4a:	2b 2f       	mov	r18, r27
    2a4c:	09 c0       	rjmp	.+18     	; 0x2a60 <realloc+0x10a>
    2a4e:	0e 5f       	subi	r16, 0xFE	; 254
    2a50:	1f 4f       	sbci	r17, 0xFF	; 255
    2a52:	08 0d       	add	r16, r8
    2a54:	19 1d       	adc	r17, r9
    2a56:	d9 01       	movw	r26, r18
    2a58:	0d 93       	st	X+, r16
    2a5a:	1c 93       	st	X, r17
    2a5c:	32 81       	ldd	r19, Z+2	; 0x02
    2a5e:	23 81       	ldd	r18, Z+3	; 0x03
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	21 f0       	breq	.+8      	; 0x2a6c <realloc+0x116>
    2a64:	fc 01       	movw	r30, r24
    2a66:	32 83       	std	Z+2, r19	; 0x02
    2a68:	23 83       	std	Z+3, r18	; 0x03
    2a6a:	41 c0       	rjmp	.+130    	; 0x2aee <realloc+0x198>
    2a6c:	30 93 b7 10 	sts	0x10B7, r19
    2a70:	20 93 b8 10 	sts	0x10B8, r18
    2a74:	3c c0       	rjmp	.+120    	; 0x2aee <realloc+0x198>
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	28 17       	cp	r18, r24
    2a7c:	39 07       	cpc	r19, r25
    2a7e:	08 f4       	brcc	.+2      	; 0x2a82 <realloc+0x12c>
    2a80:	9c 01       	movw	r18, r24
    2a82:	52 81       	ldd	r21, Z+2	; 0x02
    2a84:	43 81       	ldd	r20, Z+3	; 0x03
    2a86:	cf 01       	movw	r24, r30
    2a88:	e5 2f       	mov	r30, r21
    2a8a:	f4 2f       	mov	r31, r20
    2a8c:	30 97       	sbiw	r30, 0x00	; 0
    2a8e:	09 f0       	breq	.+2      	; 0x2a92 <realloc+0x13c>
    2a90:	b5 cf       	rjmp	.-150    	; 0x29fc <realloc+0xa6>
    2a92:	80 91 02 02 	lds	r24, 0x0202
    2a96:	90 91 03 02 	lds	r25, 0x0203
    2a9a:	8e 15       	cp	r24, r14
    2a9c:	9f 05       	cpc	r25, r15
    2a9e:	c1 f4       	brne	.+48     	; 0x2ad0 <realloc+0x17a>
    2aa0:	26 17       	cp	r18, r22
    2aa2:	37 07       	cpc	r19, r23
    2aa4:	a8 f4       	brcc	.+42     	; 0x2ad0 <realloc+0x17a>
    2aa6:	8d b7       	in	r24, 0x3d	; 61
    2aa8:	9e b7       	in	r25, 0x3e	; 62
    2aaa:	88 57       	subi	r24, 0x78	; 120
    2aac:	91 09       	sbc	r25, r1
    2aae:	a8 17       	cp	r26, r24
    2ab0:	b9 07       	cpc	r27, r25
    2ab2:	08 f0       	brcs	.+2      	; 0x2ab6 <realloc+0x160>
    2ab4:	76 cf       	rjmp	.-276    	; 0x29a2 <realloc+0x4c>
    2ab6:	b0 93 03 02 	sts	0x0203, r27
    2aba:	a0 93 02 02 	sts	0x0202, r26
    2abe:	b0 93 01 02 	sts	0x0201, r27
    2ac2:	a0 93 00 02 	sts	0x0200, r26
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	32 97       	sbiw	r30, 0x02	; 2
    2aca:	71 83       	std	Z+1, r23	; 0x01
    2acc:	60 83       	st	Z, r22
    2ace:	0f c0       	rjmp	.+30     	; 0x2aee <realloc+0x198>
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	0e 94 87 13 	call	0x270e	; 0x270e <malloc>
    2ad6:	7c 01       	movw	r14, r24
    2ad8:	00 97       	sbiw	r24, 0x00	; 0
    2ada:	09 f4       	brne	.+2      	; 0x2ade <realloc+0x188>
    2adc:	62 cf       	rjmp	.-316    	; 0x29a2 <realloc+0x4c>
    2ade:	a8 01       	movw	r20, r16
    2ae0:	be 01       	movw	r22, r28
    2ae2:	0e 94 1a 41 	call	0x8234	; 0x8234 <memcpy>
    2ae6:	ce 01       	movw	r24, r28
    2ae8:	0e 94 0d 14 	call	0x281a	; 0x281a <free>
    2aec:	e7 01       	movw	r28, r14
    2aee:	ce 01       	movw	r24, r28
    2af0:	df 91       	pop	r29
    2af2:	cf 91       	pop	r28
    2af4:	1f 91       	pop	r17
    2af6:	0f 91       	pop	r16
    2af8:	ff 90       	pop	r15
    2afa:	ef 90       	pop	r14
    2afc:	df 90       	pop	r13
    2afe:	cf 90       	pop	r12
    2b00:	bf 90       	pop	r11
    2b02:	af 90       	pop	r10
    2b04:	9f 90       	pop	r9
    2b06:	8f 90       	pop	r8
    2b08:	08 95       	ret

00002b0a <_Znwj>:
    2b0a:	0c 94 87 13 	jmp	0x270e	; 0x270e <malloc>

00002b0e <_Znaj>:
    2b0e:	0c 94 87 13 	jmp	0x270e	; 0x270e <malloc>

00002b12 <_ZdlPv>:
    2b12:	0c 94 0d 14 	jmp	0x281a	; 0x281a <free>

00002b16 <_ZdaPv>:
    2b16:	0c 94 0d 14 	jmp	0x281a	; 0x281a <free>

00002b1a <__cxa_guard_acquire>:
    2b1a:	21 e0       	ldi	r18, 0x01	; 1
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	fc 01       	movw	r30, r24
    2b20:	80 81       	ld	r24, Z
    2b22:	88 23       	and	r24, r24
    2b24:	11 f0       	breq	.+4      	; 0x2b2a <__cxa_guard_acquire+0x10>
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	c9 01       	movw	r24, r18
    2b2c:	08 95       	ret

00002b2e <__cxa_guard_release>:
    2b2e:	21 e0       	ldi	r18, 0x01	; 1
    2b30:	fc 01       	movw	r30, r24
    2b32:	20 83       	st	Z, r18
    2b34:	08 95       	ret

00002b36 <__cxa_guard_abort>:
    2b36:	08 95       	ret

00002b38 <__cxa_pure_virtual>:
    2b38:	08 95       	ret

00002b3a <__vector_23>:
    2b3a:	1f 92       	push	r1
    2b3c:	0f 92       	push	r0
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	0f 92       	push	r0
    2b42:	11 24       	eor	r1, r1
    2b44:	2f 93       	push	r18
    2b46:	3f 93       	push	r19
    2b48:	8f 93       	push	r24
    2b4a:	9f 93       	push	r25
    2b4c:	af 93       	push	r26
    2b4e:	bf 93       	push	r27
    2b50:	80 91 0b 08 	lds	r24, 0x080B
    2b54:	90 91 0c 08 	lds	r25, 0x080C
    2b58:	a0 91 0d 08 	lds	r26, 0x080D
    2b5c:	b0 91 0e 08 	lds	r27, 0x080E
    2b60:	30 91 13 08 	lds	r19, 0x0813
    2b64:	23 2f       	mov	r18, r19
    2b66:	2d 5f       	subi	r18, 0xFD	; 253
    2b68:	2d 37       	cpi	r18, 0x7D	; 125
    2b6a:	20 f4       	brcc	.+8      	; 0x2b74 <__vector_23+0x3a>
    2b6c:	01 96       	adiw	r24, 0x01	; 1
    2b6e:	a1 1d       	adc	r26, r1
    2b70:	b1 1d       	adc	r27, r1
    2b72:	05 c0       	rjmp	.+10     	; 0x2b7e <__vector_23+0x44>
    2b74:	23 2f       	mov	r18, r19
    2b76:	2a 57       	subi	r18, 0x7A	; 122
    2b78:	02 96       	adiw	r24, 0x02	; 2
    2b7a:	a1 1d       	adc	r26, r1
    2b7c:	b1 1d       	adc	r27, r1
    2b7e:	20 93 13 08 	sts	0x0813, r18
    2b82:	80 93 0b 08 	sts	0x080B, r24
    2b86:	90 93 0c 08 	sts	0x080C, r25
    2b8a:	a0 93 0d 08 	sts	0x080D, r26
    2b8e:	b0 93 0e 08 	sts	0x080E, r27
    2b92:	80 91 0f 08 	lds	r24, 0x080F
    2b96:	90 91 10 08 	lds	r25, 0x0810
    2b9a:	a0 91 11 08 	lds	r26, 0x0811
    2b9e:	b0 91 12 08 	lds	r27, 0x0812
    2ba2:	01 96       	adiw	r24, 0x01	; 1
    2ba4:	a1 1d       	adc	r26, r1
    2ba6:	b1 1d       	adc	r27, r1
    2ba8:	80 93 0f 08 	sts	0x080F, r24
    2bac:	90 93 10 08 	sts	0x0810, r25
    2bb0:	a0 93 11 08 	sts	0x0811, r26
    2bb4:	b0 93 12 08 	sts	0x0812, r27
    2bb8:	bf 91       	pop	r27
    2bba:	af 91       	pop	r26
    2bbc:	9f 91       	pop	r25
    2bbe:	8f 91       	pop	r24
    2bc0:	3f 91       	pop	r19
    2bc2:	2f 91       	pop	r18
    2bc4:	0f 90       	pop	r0
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	0f 90       	pop	r0
    2bca:	1f 90       	pop	r1
    2bcc:	18 95       	reti

00002bce <millis>:
    2bce:	0f 93       	push	r16
    2bd0:	1f 93       	push	r17
    2bd2:	8f b7       	in	r24, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	00 91 0b 08 	lds	r16, 0x080B
    2bda:	10 91 0c 08 	lds	r17, 0x080C
    2bde:	20 91 0d 08 	lds	r18, 0x080D
    2be2:	30 91 0e 08 	lds	r19, 0x080E
    2be6:	8f bf       	out	0x3f, r24	; 63
    2be8:	b8 01       	movw	r22, r16
    2bea:	c9 01       	movw	r24, r18
    2bec:	1f 91       	pop	r17
    2bee:	0f 91       	pop	r16
    2bf0:	08 95       	ret

00002bf2 <micros>:
    2bf2:	0f 93       	push	r16
    2bf4:	1f 93       	push	r17
    2bf6:	9f b7       	in	r25, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	00 91 0f 08 	lds	r16, 0x080F
    2bfe:	10 91 10 08 	lds	r17, 0x0810
    2c02:	20 91 11 08 	lds	r18, 0x0811
    2c06:	30 91 12 08 	lds	r19, 0x0812
    2c0a:	86 b5       	in	r24, 0x26	; 38
    2c0c:	a8 9b       	sbis	0x15, 0	; 21
    2c0e:	06 c0       	rjmp	.+12     	; 0x2c1c <micros+0x2a>
    2c10:	8f 3f       	cpi	r24, 0xFF	; 255
    2c12:	21 f0       	breq	.+8      	; 0x2c1c <micros+0x2a>
    2c14:	0f 5f       	subi	r16, 0xFF	; 255
    2c16:	1f 4f       	sbci	r17, 0xFF	; 255
    2c18:	2f 4f       	sbci	r18, 0xFF	; 255
    2c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1c:	9f bf       	out	0x3f, r25	; 63
    2c1e:	32 2f       	mov	r19, r18
    2c20:	21 2f       	mov	r18, r17
    2c22:	10 2f       	mov	r17, r16
    2c24:	00 27       	eor	r16, r16
    2c26:	08 0f       	add	r16, r24
    2c28:	11 1d       	adc	r17, r1
    2c2a:	21 1d       	adc	r18, r1
    2c2c:	31 1d       	adc	r19, r1
    2c2e:	42 e0       	ldi	r20, 0x02	; 2
    2c30:	00 0f       	add	r16, r16
    2c32:	11 1f       	adc	r17, r17
    2c34:	22 1f       	adc	r18, r18
    2c36:	33 1f       	adc	r19, r19
    2c38:	4a 95       	dec	r20
    2c3a:	d1 f7       	brne	.-12     	; 0x2c30 <micros+0x3e>
    2c3c:	b8 01       	movw	r22, r16
    2c3e:	c9 01       	movw	r24, r18
    2c40:	1f 91       	pop	r17
    2c42:	0f 91       	pop	r16
    2c44:	08 95       	ret

00002c46 <delay>:
    2c46:	cf 92       	push	r12
    2c48:	df 92       	push	r13
    2c4a:	ef 92       	push	r14
    2c4c:	ff 92       	push	r15
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	6b 01       	movw	r12, r22
    2c54:	7c 01       	movw	r14, r24
    2c56:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <micros>
    2c5a:	eb 01       	movw	r28, r22
    2c5c:	10 c0       	rjmp	.+32     	; 0x2c7e <delay+0x38>
    2c5e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <yield>
    2c62:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <micros>
    2c66:	6c 1b       	sub	r22, r28
    2c68:	7d 0b       	sbc	r23, r29
    2c6a:	68 3e       	cpi	r22, 0xE8	; 232
    2c6c:	73 40       	sbci	r23, 0x03	; 3
    2c6e:	38 f0       	brcs	.+14     	; 0x2c7e <delay+0x38>
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	c8 1a       	sub	r12, r24
    2c74:	d1 08       	sbc	r13, r1
    2c76:	e1 08       	sbc	r14, r1
    2c78:	f1 08       	sbc	r15, r1
    2c7a:	c8 51       	subi	r28, 0x18	; 24
    2c7c:	dc 4f       	sbci	r29, 0xFC	; 252
    2c7e:	c1 14       	cp	r12, r1
    2c80:	d1 04       	cpc	r13, r1
    2c82:	e1 04       	cpc	r14, r1
    2c84:	f1 04       	cpc	r15, r1
    2c86:	59 f7       	brne	.-42     	; 0x2c5e <delay+0x18>
    2c88:	df 91       	pop	r29
    2c8a:	cf 91       	pop	r28
    2c8c:	ff 90       	pop	r15
    2c8e:	ef 90       	pop	r14
    2c90:	df 90       	pop	r13
    2c92:	cf 90       	pop	r12
    2c94:	08 95       	ret

00002c96 <delayMicroseconds>:
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	39 f0       	breq	.+14     	; 0x2ca8 <delayMicroseconds+0x12>
    2c9a:	88 0f       	add	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	88 0f       	add	r24, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	02 97       	sbiw	r24, 0x02	; 2
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	f1 f7       	brne	.-4      	; 0x2ca4 <delayMicroseconds+0xe>
    2ca8:	08 95       	ret

00002caa <init>:
    2caa:	78 94       	sei
    2cac:	84 b5       	in	r24, 0x24	; 36
    2cae:	82 60       	ori	r24, 0x02	; 2
    2cb0:	84 bd       	out	0x24, r24	; 36
    2cb2:	84 b5       	in	r24, 0x24	; 36
    2cb4:	81 60       	ori	r24, 0x01	; 1
    2cb6:	84 bd       	out	0x24, r24	; 36
    2cb8:	85 b5       	in	r24, 0x25	; 37
    2cba:	82 60       	ori	r24, 0x02	; 2
    2cbc:	85 bd       	out	0x25, r24	; 37
    2cbe:	85 b5       	in	r24, 0x25	; 37
    2cc0:	81 60       	ori	r24, 0x01	; 1
    2cc2:	85 bd       	out	0x25, r24	; 37
    2cc4:	ee e6       	ldi	r30, 0x6E	; 110
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	80 81       	ld	r24, Z
    2cca:	81 60       	ori	r24, 0x01	; 1
    2ccc:	80 83       	st	Z, r24
    2cce:	e1 e8       	ldi	r30, 0x81	; 129
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	10 82       	st	Z, r1
    2cd4:	80 81       	ld	r24, Z
    2cd6:	82 60       	ori	r24, 0x02	; 2
    2cd8:	80 83       	st	Z, r24
    2cda:	80 81       	ld	r24, Z
    2cdc:	81 60       	ori	r24, 0x01	; 1
    2cde:	80 83       	st	Z, r24
    2ce0:	e0 e8       	ldi	r30, 0x80	; 128
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	81 60       	ori	r24, 0x01	; 1
    2ce8:	80 83       	st	Z, r24
    2cea:	e1 eb       	ldi	r30, 0xB1	; 177
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	84 60       	ori	r24, 0x04	; 4
    2cf2:	80 83       	st	Z, r24
    2cf4:	e0 eb       	ldi	r30, 0xB0	; 176
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	81 60       	ori	r24, 0x01	; 1
    2cfc:	80 83       	st	Z, r24
    2cfe:	e1 e9       	ldi	r30, 0x91	; 145
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	82 60       	ori	r24, 0x02	; 2
    2d06:	80 83       	st	Z, r24
    2d08:	80 81       	ld	r24, Z
    2d0a:	81 60       	ori	r24, 0x01	; 1
    2d0c:	80 83       	st	Z, r24
    2d0e:	e0 e9       	ldi	r30, 0x90	; 144
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	81 60       	ori	r24, 0x01	; 1
    2d16:	80 83       	st	Z, r24
    2d18:	e1 ea       	ldi	r30, 0xA1	; 161
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	80 81       	ld	r24, Z
    2d1e:	82 60       	ori	r24, 0x02	; 2
    2d20:	80 83       	st	Z, r24
    2d22:	80 81       	ld	r24, Z
    2d24:	81 60       	ori	r24, 0x01	; 1
    2d26:	80 83       	st	Z, r24
    2d28:	e0 ea       	ldi	r30, 0xA0	; 160
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	81 60       	ori	r24, 0x01	; 1
    2d30:	80 83       	st	Z, r24
    2d32:	e1 e2       	ldi	r30, 0x21	; 33
    2d34:	f1 e0       	ldi	r31, 0x01	; 1
    2d36:	80 81       	ld	r24, Z
    2d38:	82 60       	ori	r24, 0x02	; 2
    2d3a:	80 83       	st	Z, r24
    2d3c:	80 81       	ld	r24, Z
    2d3e:	81 60       	ori	r24, 0x01	; 1
    2d40:	80 83       	st	Z, r24
    2d42:	e0 e2       	ldi	r30, 0x20	; 32
    2d44:	f1 e0       	ldi	r31, 0x01	; 1
    2d46:	80 81       	ld	r24, Z
    2d48:	81 60       	ori	r24, 0x01	; 1
    2d4a:	80 83       	st	Z, r24
    2d4c:	ea e7       	ldi	r30, 0x7A	; 122
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	84 60       	ori	r24, 0x04	; 4
    2d54:	80 83       	st	Z, r24
    2d56:	80 81       	ld	r24, Z
    2d58:	82 60       	ori	r24, 0x02	; 2
    2d5a:	80 83       	st	Z, r24
    2d5c:	80 81       	ld	r24, Z
    2d5e:	81 60       	ori	r24, 0x01	; 1
    2d60:	80 83       	st	Z, r24
    2d62:	80 81       	ld	r24, Z
    2d64:	80 68       	ori	r24, 0x80	; 128
    2d66:	80 83       	st	Z, r24
    2d68:	10 92 c1 00 	sts	0x00C1, r1
    2d6c:	08 95       	ret

00002d6e <turnOffPWM>:
    2d6e:	89 30       	cpi	r24, 0x09	; 9
    2d70:	09 f4       	brne	.+2      	; 0x2d74 <turnOffPWM+0x6>
    2d72:	43 c0       	rjmp	.+134    	; 0x2dfa <turnOffPWM+0x8c>
    2d74:	88 f4       	brcc	.+34     	; 0x2d98 <turnOffPWM+0x2a>
    2d76:	84 30       	cpi	r24, 0x04	; 4
    2d78:	29 f1       	breq	.+74     	; 0x2dc4 <turnOffPWM+0x56>
    2d7a:	38 f4       	brcc	.+14     	; 0x2d8a <turnOffPWM+0x1c>
    2d7c:	82 30       	cpi	r24, 0x02	; 2
    2d7e:	59 f1       	breq	.+86     	; 0x2dd6 <turnOffPWM+0x68>
    2d80:	e8 f4       	brcc	.+58     	; 0x2dbc <turnOffPWM+0x4e>
    2d82:	81 30       	cpi	r24, 0x01	; 1
    2d84:	09 f0       	breq	.+2      	; 0x2d88 <turnOffPWM+0x1a>
    2d86:	5e c0       	rjmp	.+188    	; 0x2e44 <turnOffPWM+0xd6>
    2d88:	23 c0       	rjmp	.+70     	; 0x2dd0 <turnOffPWM+0x62>
    2d8a:	87 30       	cpi	r24, 0x07	; 7
    2d8c:	61 f1       	breq	.+88     	; 0x2de6 <turnOffPWM+0x78>
    2d8e:	88 f5       	brcc	.+98     	; 0x2df2 <turnOffPWM+0x84>
    2d90:	86 30       	cpi	r24, 0x06	; 6
    2d92:	09 f0       	breq	.+2      	; 0x2d96 <turnOffPWM+0x28>
    2d94:	57 c0       	rjmp	.+174    	; 0x2e44 <turnOffPWM+0xd6>
    2d96:	23 c0       	rjmp	.+70     	; 0x2dde <turnOffPWM+0x70>
    2d98:	8d 30       	cpi	r24, 0x0D	; 13
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <turnOffPWM+0x30>
    2d9c:	40 c0       	rjmp	.+128    	; 0x2e1e <turnOffPWM+0xb0>
    2d9e:	20 f4       	brcc	.+8      	; 0x2da8 <turnOffPWM+0x3a>
    2da0:	8b 30       	cpi	r24, 0x0B	; 11
    2da2:	a9 f1       	breq	.+106    	; 0x2e0e <turnOffPWM+0xa0>
    2da4:	c0 f5       	brcc	.+112    	; 0x2e16 <turnOffPWM+0xa8>
    2da6:	2d c0       	rjmp	.+90     	; 0x2e02 <turnOffPWM+0x94>
    2da8:	80 31       	cpi	r24, 0x10	; 16
    2daa:	09 f4       	brne	.+2      	; 0x2dae <turnOffPWM+0x40>
    2dac:	42 c0       	rjmp	.+132    	; 0x2e32 <turnOffPWM+0xc4>
    2dae:	81 31       	cpi	r24, 0x11	; 17
    2db0:	09 f4       	brne	.+2      	; 0x2db4 <turnOffPWM+0x46>
    2db2:	43 c0       	rjmp	.+134    	; 0x2e3a <turnOffPWM+0xcc>
    2db4:	8f 30       	cpi	r24, 0x0F	; 15
    2db6:	09 f0       	breq	.+2      	; 0x2dba <turnOffPWM+0x4c>
    2db8:	45 c0       	rjmp	.+138    	; 0x2e44 <turnOffPWM+0xd6>
    2dba:	37 c0       	rjmp	.+110    	; 0x2e2a <turnOffPWM+0xbc>
    2dbc:	80 91 80 00 	lds	r24, 0x0080
    2dc0:	8f 77       	andi	r24, 0x7F	; 127
    2dc2:	03 c0       	rjmp	.+6      	; 0x2dca <turnOffPWM+0x5c>
    2dc4:	80 91 80 00 	lds	r24, 0x0080
    2dc8:	8f 7d       	andi	r24, 0xDF	; 223
    2dca:	80 93 80 00 	sts	0x0080, r24
    2dce:	08 95       	ret
    2dd0:	84 b5       	in	r24, 0x24	; 36
    2dd2:	8f 77       	andi	r24, 0x7F	; 127
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <turnOffPWM+0x6c>
    2dd6:	84 b5       	in	r24, 0x24	; 36
    2dd8:	8f 7d       	andi	r24, 0xDF	; 223
    2dda:	84 bd       	out	0x24, r24	; 36
    2ddc:	08 95       	ret
    2dde:	80 91 b0 00 	lds	r24, 0x00B0
    2de2:	8f 77       	andi	r24, 0x7F	; 127
    2de4:	03 c0       	rjmp	.+6      	; 0x2dec <turnOffPWM+0x7e>
    2de6:	80 91 b0 00 	lds	r24, 0x00B0
    2dea:	8f 7d       	andi	r24, 0xDF	; 223
    2dec:	80 93 b0 00 	sts	0x00B0, r24
    2df0:	08 95       	ret
    2df2:	80 91 90 00 	lds	r24, 0x0090
    2df6:	8f 77       	andi	r24, 0x7F	; 127
    2df8:	07 c0       	rjmp	.+14     	; 0x2e08 <turnOffPWM+0x9a>
    2dfa:	80 91 90 00 	lds	r24, 0x0090
    2dfe:	8f 7d       	andi	r24, 0xDF	; 223
    2e00:	03 c0       	rjmp	.+6      	; 0x2e08 <turnOffPWM+0x9a>
    2e02:	80 91 90 00 	lds	r24, 0x0090
    2e06:	87 7f       	andi	r24, 0xF7	; 247
    2e08:	80 93 90 00 	sts	0x0090, r24
    2e0c:	08 95       	ret
    2e0e:	80 91 a0 00 	lds	r24, 0x00A0
    2e12:	8f 77       	andi	r24, 0x7F	; 127
    2e14:	07 c0       	rjmp	.+14     	; 0x2e24 <turnOffPWM+0xb6>
    2e16:	80 91 a0 00 	lds	r24, 0x00A0
    2e1a:	8f 7d       	andi	r24, 0xDF	; 223
    2e1c:	03 c0       	rjmp	.+6      	; 0x2e24 <turnOffPWM+0xb6>
    2e1e:	80 91 a0 00 	lds	r24, 0x00A0
    2e22:	87 7f       	andi	r24, 0xF7	; 247
    2e24:	80 93 a0 00 	sts	0x00A0, r24
    2e28:	08 95       	ret
    2e2a:	80 91 20 01 	lds	r24, 0x0120
    2e2e:	8f 77       	andi	r24, 0x7F	; 127
    2e30:	07 c0       	rjmp	.+14     	; 0x2e40 <turnOffPWM+0xd2>
    2e32:	80 91 20 01 	lds	r24, 0x0120
    2e36:	8f 7d       	andi	r24, 0xDF	; 223
    2e38:	03 c0       	rjmp	.+6      	; 0x2e40 <turnOffPWM+0xd2>
    2e3a:	80 91 20 01 	lds	r24, 0x0120
    2e3e:	87 7f       	andi	r24, 0xF7	; 247
    2e40:	80 93 20 01 	sts	0x0120, r24
    2e44:	08 95       	ret

00002e46 <pinMode>:
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	eb 58       	subi	r30, 0x8B	; 139
    2e50:	fe 4f       	sbci	r31, 0xFE	; 254
    2e52:	44 91       	lpm	r20, Z+
    2e54:	fc 01       	movw	r30, r24
    2e56:	e5 54       	subi	r30, 0x45	; 69
    2e58:	fe 4f       	sbci	r31, 0xFE	; 254
    2e5a:	84 91       	lpm	r24, Z+
    2e5c:	88 23       	and	r24, r24
    2e5e:	41 f1       	breq	.+80     	; 0x2eb0 <pinMode+0x6a>
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	fc 01       	movw	r30, r24
    2e68:	eb 5c       	subi	r30, 0xCB	; 203
    2e6a:	fd 4f       	sbci	r31, 0xFD	; 253
    2e6c:	25 91       	lpm	r18, Z+
    2e6e:	34 91       	lpm	r19, Z+
    2e70:	d9 01       	movw	r26, r18
    2e72:	85 5e       	subi	r24, 0xE5	; 229
    2e74:	9d 4f       	sbci	r25, 0xFD	; 253
    2e76:	fc 01       	movw	r30, r24
    2e78:	85 91       	lpm	r24, Z+
    2e7a:	94 91       	lpm	r25, Z+
    2e7c:	c8 2f       	mov	r28, r24
    2e7e:	d9 2f       	mov	r29, r25
    2e80:	9f b7       	in	r25, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	8c 91       	ld	r24, X
    2e86:	61 11       	cpse	r22, r1
    2e88:	06 c0       	rjmp	.+12     	; 0x2e96 <pinMode+0x50>
    2e8a:	40 95       	com	r20
    2e8c:	84 23       	and	r24, r20
    2e8e:	8c 93       	st	X, r24
    2e90:	88 81       	ld	r24, Y
    2e92:	84 23       	and	r24, r20
    2e94:	08 c0       	rjmp	.+16     	; 0x2ea6 <pinMode+0x60>
    2e96:	62 30       	cpi	r22, 0x02	; 2
    2e98:	41 f4       	brne	.+16     	; 0x2eaa <pinMode+0x64>
    2e9a:	24 2f       	mov	r18, r20
    2e9c:	20 95       	com	r18
    2e9e:	82 23       	and	r24, r18
    2ea0:	8c 93       	st	X, r24
    2ea2:	88 81       	ld	r24, Y
    2ea4:	84 2b       	or	r24, r20
    2ea6:	88 83       	st	Y, r24
    2ea8:	02 c0       	rjmp	.+4      	; 0x2eae <pinMode+0x68>
    2eaa:	84 2b       	or	r24, r20
    2eac:	8c 93       	st	X, r24
    2eae:	9f bf       	out	0x3f, r25	; 63
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	08 95       	ret

00002eb6 <digitalWrite>:
    2eb6:	0f 93       	push	r16
    2eb8:	1f 93       	push	r17
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	1f 92       	push	r1
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
    2ec4:	28 2f       	mov	r18, r24
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	f9 01       	movw	r30, r18
    2eca:	e1 5d       	subi	r30, 0xD1	; 209
    2ecc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ece:	84 91       	lpm	r24, Z+
    2ed0:	f9 01       	movw	r30, r18
    2ed2:	eb 58       	subi	r30, 0x8B	; 139
    2ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed6:	14 91       	lpm	r17, Z+
    2ed8:	f9 01       	movw	r30, r18
    2eda:	e5 54       	subi	r30, 0x45	; 69
    2edc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ede:	04 91       	lpm	r16, Z+
    2ee0:	00 23       	and	r16, r16
    2ee2:	d1 f0       	breq	.+52     	; 0x2f18 <digitalWrite+0x62>
    2ee4:	88 23       	and	r24, r24
    2ee6:	21 f0       	breq	.+8      	; 0x2ef0 <digitalWrite+0x3a>
    2ee8:	69 83       	std	Y+1, r22	; 0x01
    2eea:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <turnOffPWM>
    2eee:	69 81       	ldd	r22, Y+1	; 0x01
    2ef0:	e0 2f       	mov	r30, r16
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	ee 0f       	add	r30, r30
    2ef6:	ff 1f       	adc	r31, r31
    2ef8:	e5 5e       	subi	r30, 0xE5	; 229
    2efa:	fd 4f       	sbci	r31, 0xFD	; 253
    2efc:	85 91       	lpm	r24, Z+
    2efe:	94 91       	lpm	r25, Z+
    2f00:	dc 01       	movw	r26, r24
    2f02:	9f b7       	in	r25, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	8c 91       	ld	r24, X
    2f08:	61 11       	cpse	r22, r1
    2f0a:	03 c0       	rjmp	.+6      	; 0x2f12 <digitalWrite+0x5c>
    2f0c:	10 95       	com	r17
    2f0e:	81 23       	and	r24, r17
    2f10:	01 c0       	rjmp	.+2      	; 0x2f14 <digitalWrite+0x5e>
    2f12:	81 2b       	or	r24, r17
    2f14:	8c 93       	st	X, r24
    2f16:	9f bf       	out	0x3f, r25	; 63
    2f18:	0f 90       	pop	r0
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	1f 91       	pop	r17
    2f20:	0f 91       	pop	r16
    2f22:	08 95       	ret

00002f24 <digitalRead>:
    2f24:	cf 93       	push	r28
    2f26:	df 93       	push	r29
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	f9 01       	movw	r30, r18
    2f2e:	e1 5d       	subi	r30, 0xD1	; 209
    2f30:	fe 4f       	sbci	r31, 0xFE	; 254
    2f32:	84 91       	lpm	r24, Z+
    2f34:	f9 01       	movw	r30, r18
    2f36:	eb 58       	subi	r30, 0x8B	; 139
    2f38:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3a:	d4 91       	lpm	r29, Z+
    2f3c:	f9 01       	movw	r30, r18
    2f3e:	e5 54       	subi	r30, 0x45	; 69
    2f40:	fe 4f       	sbci	r31, 0xFE	; 254
    2f42:	c4 91       	lpm	r28, Z+
    2f44:	cc 23       	and	r28, r28
    2f46:	89 f0       	breq	.+34     	; 0x2f6a <digitalRead+0x46>
    2f48:	81 11       	cpse	r24, r1
    2f4a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <turnOffPWM>
    2f4e:	ec 2f       	mov	r30, r28
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	ee 0f       	add	r30, r30
    2f54:	ff 1f       	adc	r31, r31
    2f56:	ef 5f       	subi	r30, 0xFF	; 255
    2f58:	fd 4f       	sbci	r31, 0xFD	; 253
    2f5a:	85 91       	lpm	r24, Z+
    2f5c:	94 91       	lpm	r25, Z+
    2f5e:	dc 01       	movw	r26, r24
    2f60:	8c 91       	ld	r24, X
    2f62:	8d 23       	and	r24, r29
    2f64:	21 e0       	ldi	r18, 0x01	; 1
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	11 f4       	brne	.+4      	; 0x2f6e <digitalRead+0x4a>
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	c9 01       	movw	r24, r18
    2f70:	df 91       	pop	r29
    2f72:	cf 91       	pop	r28
    2f74:	08 95       	ret

00002f76 <yield>:
    2f76:	08 95       	ret

00002f78 <_ZN15PinCatcher_implC1Ev>:

#include <Arduino.h>

//--- cosntructors/destructor ------------------------------------------------------------------------------------------

PinCatcher_impl::PinCatcher_impl() :
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	dc 01       	movw	r26, r24
		pins0_(*portInputRegister(0)), pins1_(*portInputRegister(9)), pins2_(
    2f7e:	e1 e0       	ldi	r30, 0x01	; 1
    2f80:	f2 e0       	ldi	r31, 0x02	; 2
    2f82:	25 91       	lpm	r18, Z+
    2f84:	34 91       	lpm	r19, Z+
				*portInputRegister(11)), last0_(
				pins0_), last1_(pins1_), last2_(pins2_),  mask0_(
				0), mask1_(0), mask2_(0) {
    2f86:	c9 01       	movw	r24, r18
    2f88:	91 96       	adiw	r26, 0x21	; 33
    2f8a:	3c 93       	st	X, r19
    2f8c:	2e 93       	st	-X, r18
    2f8e:	90 97       	sbiw	r26, 0x20	; 32
#include <Arduino.h>

//--- cosntructors/destructor ------------------------------------------------------------------------------------------

PinCatcher_impl::PinCatcher_impl() :
		pins0_(*portInputRegister(0)), pins1_(*portInputRegister(9)), pins2_(
    2f90:	e3 e1       	ldi	r30, 0x13	; 19
    2f92:	f2 e0       	ldi	r31, 0x02	; 2
    2f94:	25 91       	lpm	r18, Z+
    2f96:	34 91       	lpm	r19, Z+
				*portInputRegister(11)), last0_(
				pins0_), last1_(pins1_), last2_(pins2_),  mask0_(
				0), mask1_(0), mask2_(0) {
    2f98:	c2 2f       	mov	r28, r18
    2f9a:	d3 2f       	mov	r29, r19
    2f9c:	93 96       	adiw	r26, 0x23	; 35
    2f9e:	dc 93       	st	X, r29
    2fa0:	ce 93       	st	-X, r28
    2fa2:	92 97       	sbiw	r26, 0x22	; 34

//--- cosntructors/destructor ------------------------------------------------------------------------------------------

PinCatcher_impl::PinCatcher_impl() :
		pins0_(*portInputRegister(0)), pins1_(*portInputRegister(9)), pins2_(
				*portInputRegister(11)), last0_(
    2fa4:	e7 e1       	ldi	r30, 0x17	; 23
    2fa6:	f2 e0       	ldi	r31, 0x02	; 2
    2fa8:	25 91       	lpm	r18, Z+
    2faa:	34 91       	lpm	r19, Z+
				pins0_), last1_(pins1_), last2_(pins2_),  mask0_(
				0), mask1_(0), mask2_(0) {
    2fac:	95 96       	adiw	r26, 0x25	; 37
    2fae:	3c 93       	st	X, r19
    2fb0:	2e 93       	st	-X, r18
    2fb2:	94 97       	sbiw	r26, 0x24	; 36
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	80 81       	ld	r24, Z
    2fb8:	96 96       	adiw	r26, 0x26	; 38
    2fba:	8c 93       	st	X, r24
    2fbc:	96 97       	sbiw	r26, 0x26	; 38
    2fbe:	88 81       	ld	r24, Y
    2fc0:	97 96       	adiw	r26, 0x27	; 39
    2fc2:	8c 93       	st	X, r24
    2fc4:	97 97       	sbiw	r26, 0x27	; 39
    2fc6:	f9 01       	movw	r30, r18
    2fc8:	80 81       	ld	r24, Z
    2fca:	98 96       	adiw	r26, 0x28	; 40
    2fcc:	8c 93       	st	X, r24
    2fce:	98 97       	sbiw	r26, 0x28	; 40
    2fd0:	99 96       	adiw	r26, 0x29	; 41
    2fd2:	1c 92       	st	X, r1
    2fd4:	99 97       	sbiw	r26, 0x29	; 41
    2fd6:	9a 96       	adiw	r26, 0x2a	; 42
    2fd8:	1c 92       	st	X, r1
    2fda:	9a 97       	sbiw	r26, 0x2a	; 42
    2fdc:	9b 96       	adiw	r26, 0x2b	; 43
    2fde:	1c 92       	st	X, r1
    2fe0:	9b 97       	sbiw	r26, 0x2b	; 43
	// need to clear the who slots.
	memset(who_, 0, (sizeof(PinCatcher*) * 8));
    2fe2:	80 e1       	ldi	r24, 0x10	; 16
    2fe4:	1d 92       	st	X+, r1
    2fe6:	8a 95       	dec	r24
    2fe8:	e9 f7       	brne	.-6      	; 0x2fe4 <_ZN15PinCatcher_implC1Ev+0x6c>
}
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	08 95       	ret

00002ff0 <_ZN15PinCatcher_implD1Ev>:

PinCatcher_impl::~PinCatcher_impl() {
	PCICR = 0;
    2ff0:	10 92 68 00 	sts	0x0068, r1
	PCMSK0 = 0;
    2ff4:	10 92 6b 00 	sts	0x006B, r1
	PCMSK1 = 0;
    2ff8:	10 92 6c 00 	sts	0x006C, r1
	PCMSK2 = 0;
    2ffc:	10 92 6d 00 	sts	0x006D, r1
    3000:	08 95       	ret

00003002 <_ZN15PinCatcher_impl11handlePins2Ev>:
	}
}



void PinCatcher_impl::handlePins2() {
    3002:	ff 92       	push	r15
    3004:	0f 93       	push	r16
    3006:	1f 93       	push	r17
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	ec 01       	movw	r28, r24
	// see handlePins0_ for comments
	//Serial.print("ISR fired");
	uint8_t curr = pins2_;
    300e:	ec a1       	ldd	r30, Y+36	; 0x24
    3010:	fd a1       	ldd	r31, Y+37	; 0x25
    3012:	00 81       	ld	r16, Z
//	Serial.print(", pins2_=");
//	Serial.print(pins2_, BIN);
//	Serial.print(", last2_=");
//	Serial.print(last2_, BIN);
	uint8_t changed = mask2_ & (curr ^ last2_);
    3014:	18 a5       	ldd	r17, Y+40	; 0x28
    3016:	10 27       	eor	r17, r16
    3018:	8b a5       	ldd	r24, Y+43	; 0x2b
    301a:	18 23       	and	r17, r24
	last2_ = curr;
    301c:	08 a7       	std	Y+40, r16	; 0x28
//	Serial.print(", mask2_=");
//	Serial.print(mask2_, BIN);
//
//	Serial.print(", changed mask=");
//	Serial.println(changed, BIN);
	uint8_t count = 62; //pins 62-69
    301e:	ee e3       	ldi	r30, 0x3E	; 62
    3020:	fe 2e       	mov	r15, r30
	while (changed) {
    3022:	19 c0       	rjmp	.+50     	; 0x3056 <_ZN15PinCatcher_impl11handlePins2Ev+0x54>
		if (changed & 0x01)
    3024:	10 ff       	sbrs	r17, 0
    3026:	14 c0       	rjmp	.+40     	; 0x3050 <_ZN15PinCatcher_impl11handlePins2Ev+0x4e>
			who_[count-54]->handle(count, (curr & 0x01));
    3028:	ef 2d       	mov	r30, r15
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	f6 97       	sbiw	r30, 0x36	; 54
    302e:	ee 0f       	add	r30, r30
    3030:	ff 1f       	adc	r31, r31
    3032:	ec 0f       	add	r30, r28
    3034:	fd 1f       	adc	r31, r29
    3036:	80 81       	ld	r24, Z
    3038:	91 81       	ldd	r25, Z+1	; 0x01
    303a:	dc 01       	movw	r26, r24
    303c:	ed 91       	ld	r30, X+
    303e:	fc 91       	ld	r31, X
    3040:	40 2f       	mov	r20, r16
    3042:	41 70       	andi	r20, 0x01	; 1
    3044:	01 90       	ld	r0, Z+
    3046:	f0 81       	ld	r31, Z
    3048:	e0 2d       	mov	r30, r0
    304a:	6f 2d       	mov	r22, r15
    304c:	70 e0       	ldi	r23, 0x00	; 0
    304e:	09 95       	icall
		changed >>= 1;
    3050:	16 95       	lsr	r17
		curr >>= 1;
    3052:	06 95       	lsr	r16
		++count;
    3054:	f3 94       	inc	r15
//	Serial.print(mask2_, BIN);
//
//	Serial.print(", changed mask=");
//	Serial.println(changed, BIN);
	uint8_t count = 62; //pins 62-69
	while (changed) {
    3056:	11 11       	cpse	r17, r1
    3058:	e5 cf       	rjmp	.-54     	; 0x3024 <_ZN15PinCatcher_impl11handlePins2Ev+0x22>
			who_[count-54]->handle(count, (curr & 0x01));
		changed >>= 1;
		curr >>= 1;
		++count;
	}
}
    305a:	df 91       	pop	r29
    305c:	cf 91       	pop	r28
    305e:	1f 91       	pop	r17
    3060:	0f 91       	pop	r16
    3062:	ff 90       	pop	r15
    3064:	08 95       	ret

00003066 <_Z15handlePins2_isrv>:
void handlePins1_isr() {
	pc_i.handlePins1();
}

void handlePins2_isr() {
	pc_i.handlePins2();
    3066:	86 e1       	ldi	r24, 0x16	; 22
    3068:	98 e0       	ldi	r25, 0x08	; 8
    306a:	0c 94 01 18 	jmp	0x3002	; 0x3002 <_ZN15PinCatcher_impl11handlePins2Ev>

0000306e <__vector_11>:
//{
//   handlePins2_isr();
//}

ISR(PCINT2_vect)
{
    306e:	1f 92       	push	r1
    3070:	0f 92       	push	r0
    3072:	0f b6       	in	r0, 0x3f	; 63
    3074:	0f 92       	push	r0
    3076:	11 24       	eor	r1, r1
    3078:	0b b6       	in	r0, 0x3b	; 59
    307a:	0f 92       	push	r0
    307c:	1b be       	out	0x3b, r1	; 59
    307e:	2f 93       	push	r18
    3080:	3f 93       	push	r19
    3082:	4f 93       	push	r20
    3084:	5f 93       	push	r21
    3086:	6f 93       	push	r22
    3088:	7f 93       	push	r23
    308a:	8f 93       	push	r24
    308c:	9f 93       	push	r25
    308e:	af 93       	push	r26
    3090:	bf 93       	push	r27
    3092:	ef 93       	push	r30
    3094:	ff 93       	push	r31
	handlePins2_isr();
    3096:	0e 94 33 18 	call	0x3066	; 0x3066 <_Z15handlePins2_isrv>
}
    309a:	ff 91       	pop	r31
    309c:	ef 91       	pop	r30
    309e:	bf 91       	pop	r27
    30a0:	af 91       	pop	r26
    30a2:	9f 91       	pop	r25
    30a4:	8f 91       	pop	r24
    30a6:	7f 91       	pop	r23
    30a8:	6f 91       	pop	r22
    30aa:	5f 91       	pop	r21
    30ac:	4f 91       	pop	r20
    30ae:	3f 91       	pop	r19
    30b0:	2f 91       	pop	r18
    30b2:	0f 90       	pop	r0
    30b4:	0b be       	out	0x3b, r0	; 59
    30b6:	0f 90       	pop	r0
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	0f 90       	pop	r0
    30bc:	1f 90       	pop	r1
    30be:	18 95       	reti

000030c0 <_GLOBAL__sub_I__ZN15PinCatcher_implC2Ev>:
//--- implementation details ----------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------------
// this is THE pin catcher implementation
PinCatcher_impl pc_i;
    30c0:	86 e1       	ldi	r24, 0x16	; 22
    30c2:	98 e0       	ldi	r25, 0x08	; 8
    30c4:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <_ZN15PinCatcher_implC1Ev>

000030c8 <_GLOBAL__sub_D__ZN15PinCatcher_implC2Ev>:
    30c8:	86 e1       	ldi	r24, 0x16	; 22
    30ca:	98 e0       	ldi	r25, 0x08	; 8
    30cc:	0c 94 f8 17 	jmp	0x2ff0	; 0x2ff0 <_ZN15PinCatcher_implD1Ev>

000030d0 <_ZN7PString5writeEh>:
#if defined(ARDUINO) && ARDUINO >= 100
size_t PString::write(uint8_t b)
#else
void PString::write(uint8_t b)
#endif
{
    30d0:	fc 01       	movw	r30, r24
  if (_cur + 1 < _buf + _size)
    30d2:	a6 81       	ldd	r26, Z+6	; 0x06
    30d4:	b7 81       	ldd	r27, Z+7	; 0x07
    30d6:	9d 01       	movw	r18, r26
    30d8:	2f 5f       	subi	r18, 0xFF	; 255
    30da:	3f 4f       	sbci	r19, 0xFF	; 255
    30dc:	84 81       	ldd	r24, Z+4	; 0x04
    30de:	95 81       	ldd	r25, Z+5	; 0x05
    30e0:	40 85       	ldd	r20, Z+8	; 0x08
    30e2:	51 85       	ldd	r21, Z+9	; 0x09
    30e4:	84 0f       	add	r24, r20
    30e6:	95 1f       	adc	r25, r21
    30e8:	28 17       	cp	r18, r24
    30ea:	39 07       	cpc	r19, r25
    30ec:	40 f4       	brcc	.+16     	; 0x30fe <_ZN7PString5writeEh+0x2e>
  {
    *_cur++ = (char)b;
    30ee:	6c 93       	st	X, r22
    30f0:	37 83       	std	Z+7, r19	; 0x07
    30f2:	26 83       	std	Z+6, r18	; 0x06
    *_cur = '\0';
    30f4:	11 96       	adiw	r26, 0x01	; 1
    30f6:	1c 92       	st	X, r1
#if defined(ARDUINO) && ARDUINO >= 100
		return 1;
    30f8:	21 e0       	ldi	r18, 0x01	; 1
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	02 c0       	rjmp	.+4      	; 0x3102 <_ZN7PString5writeEh+0x32>
#endif
	}

#if defined(ARDUINO) && ARDUINO >= 100
	return 0;
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
#endif
}
    3102:	c9 01       	movw	r24, r18
    3104:	08 95       	ret

00003106 <_ZN7PString5beginEv>:
*/

#include "PString.h"

void PString::begin()
{
    3106:	fc 01       	movw	r30, r24
  _cur = _buf;
    3108:	a4 81       	ldd	r26, Z+4	; 0x04
    310a:	b5 81       	ldd	r27, Z+5	; 0x05
    310c:	b7 83       	std	Z+7, r27	; 0x07
    310e:	a6 83       	std	Z+6, r26	; 0x06
  if (_size > 0)
    3110:	80 85       	ldd	r24, Z+8	; 0x08
    3112:	91 85       	ldd	r25, Z+9	; 0x09
    3114:	89 2b       	or	r24, r25
    3116:	09 f0       	breq	.+2      	; 0x311a <_ZN7PString5beginEv+0x14>
    _buf[0] = '\0';
    3118:	1c 92       	st	X, r1
    311a:	08 95       	ret

0000311c <_ZN3PIDC1Ev>:
  #include "WProgram.h"
#endif

#include <PID_v1/PID_v1.h>

PID::PID(){};
    311c:	08 95       	ret

0000311e <_ZN3PID7ComputeEv>:
 *     This, as they say, is where the magic happens.  this function should be called
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed
 **********************************************************************************/ 
void PID::Compute()
{
    311e:	2f 92       	push	r2
    3120:	3f 92       	push	r3
    3122:	4f 92       	push	r4
    3124:	5f 92       	push	r5
    3126:	6f 92       	push	r6
    3128:	7f 92       	push	r7
    312a:	8f 92       	push	r8
    312c:	9f 92       	push	r9
    312e:	af 92       	push	r10
    3130:	bf 92       	push	r11
    3132:	cf 92       	push	r12
    3134:	df 92       	push	r13
    3136:	ef 92       	push	r14
    3138:	ff 92       	push	r15
    313a:	0f 93       	push	r16
    313c:	1f 93       	push	r17
    313e:	cf 93       	push	r28
    3140:	df 93       	push	r29
    3142:	cd b7       	in	r28, 0x3d	; 61
    3144:	de b7       	in	r29, 0x3e	; 62
    3146:	2a 97       	sbiw	r28, 0x0a	; 10
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	f8 94       	cli
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	cd bf       	out	0x3d, r28	; 61
    3152:	9a 87       	std	Y+10, r25	; 0x0a
    3154:	89 87       	std	Y+9, r24	; 0x09
   if(!inAuto) return;
    3156:	dc 01       	movw	r26, r24
    3158:	d6 96       	adiw	r26, 0x36	; 54
    315a:	8c 91       	ld	r24, X
    315c:	88 23       	and	r24, r24
    315e:	09 f4       	brne	.+2      	; 0x3162 <_ZN3PID7ComputeEv+0x44>
    3160:	fa c0       	rjmp	.+500    	; 0x3356 <_ZN3PID7ComputeEv+0x238>
   unsigned long now = millis();
    3162:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    3166:	69 83       	std	Y+1, r22	; 0x01
    3168:	7a 83       	std	Y+2, r23	; 0x02
    316a:	8b 83       	std	Y+3, r24	; 0x03
    316c:	9c 83       	std	Y+4, r25	; 0x04
   int timeChange = (now - lastTime);
    316e:	e9 85       	ldd	r30, Y+9	; 0x09
    3170:	fa 85       	ldd	r31, Y+10	; 0x0a
    3172:	80 a1       	ldd	r24, Z+32	; 0x20
    3174:	91 a1       	ldd	r25, Z+33	; 0x21
    3176:	29 81       	ldd	r18, Y+1	; 0x01
    3178:	3a 81       	ldd	r19, Y+2	; 0x02
    317a:	28 1b       	sub	r18, r24
    317c:	39 0b       	sbc	r19, r25
   if(timeChange>=SampleTime)
    317e:	84 a5       	ldd	r24, Z+44	; 0x2c
    3180:	95 a5       	ldd	r25, Z+45	; 0x2d
    3182:	28 17       	cp	r18, r24
    3184:	39 07       	cpc	r19, r25
    3186:	0c f4       	brge	.+2      	; 0x318a <_ZN3PID7ComputeEv+0x6c>
    3188:	e6 c0       	rjmp	.+460    	; 0x3356 <_ZN3PID7ComputeEv+0x238>
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
    318a:	02 8c       	ldd	r0, Z+26	; 0x1a
    318c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    318e:	e0 2d       	mov	r30, r0
    3190:	c0 80       	ld	r12, Z
    3192:	d1 80       	ldd	r13, Z+1	; 0x01
    3194:	e2 80       	ldd	r14, Z+2	; 0x02
    3196:	f3 80       	ldd	r15, Z+3	; 0x03
      double error = *mySetpoint - input;
    3198:	a9 85       	ldd	r26, Y+9	; 0x09
    319a:	ba 85       	ldd	r27, Y+10	; 0x0a
    319c:	5e 96       	adiw	r26, 0x1e	; 30
    319e:	ed 91       	ld	r30, X+
    31a0:	fc 91       	ld	r31, X
    31a2:	5f 97       	sbiw	r26, 0x1f	; 31
    31a4:	a7 01       	movw	r20, r14
    31a6:	96 01       	movw	r18, r12
    31a8:	60 81       	ld	r22, Z
    31aa:	71 81       	ldd	r23, Z+1	; 0x01
    31ac:	82 81       	ldd	r24, Z+2	; 0x02
    31ae:	93 81       	ldd	r25, Z+3	; 0x03
    31b0:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    31b4:	6d 83       	std	Y+5, r22	; 0x05
    31b6:	7e 83       	std	Y+6, r23	; 0x06
    31b8:	8f 83       	std	Y+7, r24	; 0x07
    31ba:	98 87       	std	Y+8, r25	; 0x08
      ITerm+= (ki * error);
    31bc:	e9 85       	ldd	r30, Y+9	; 0x09
    31be:	fa 85       	ldd	r31, Y+10	; 0x0a
    31c0:	20 89       	ldd	r18, Z+16	; 0x10
    31c2:	31 89       	ldd	r19, Z+17	; 0x11
    31c4:	42 89       	ldd	r20, Z+18	; 0x12
    31c6:	53 89       	ldd	r21, Z+19	; 0x13
    31c8:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    31cc:	a9 85       	ldd	r26, Y+9	; 0x09
    31ce:	ba 85       	ldd	r27, Y+10	; 0x0a
    31d0:	94 96       	adiw	r26, 0x24	; 36
    31d2:	2d 91       	ld	r18, X+
    31d4:	3d 91       	ld	r19, X+
    31d6:	4d 91       	ld	r20, X+
    31d8:	5c 91       	ld	r21, X
    31da:	97 97       	sbiw	r26, 0x27	; 39
    31dc:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    31e0:	56 2e       	mov	r5, r22
    31e2:	67 2e       	mov	r6, r23
    31e4:	78 2e       	mov	r7, r24
    31e6:	09 2f       	mov	r16, r25
    31e8:	98 2f       	mov	r25, r24
    31ea:	45 2d       	mov	r20, r5
    31ec:	56 2d       	mov	r21, r6
    31ee:	69 2f       	mov	r22, r25
    31f0:	70 2f       	mov	r23, r16
    31f2:	e9 85       	ldd	r30, Y+9	; 0x09
    31f4:	fa 85       	ldd	r31, Y+10	; 0x0a
    31f6:	44 a3       	std	Z+36, r20	; 0x24
    31f8:	55 a3       	std	Z+37, r21	; 0x25
    31fa:	66 a3       	std	Z+38, r22	; 0x26
    31fc:	77 a3       	std	Z+39, r23	; 0x27
      if(ITerm > outMax) ITerm= outMax;
    31fe:	22 a8       	ldd	r2, Z+50	; 0x32
    3200:	13 a9       	ldd	r17, Z+51	; 0x33
    3202:	34 a8       	ldd	r3, Z+52	; 0x34
    3204:	45 a8       	ldd	r4, Z+53	; 0x35
    3206:	22 2d       	mov	r18, r2
    3208:	31 2f       	mov	r19, r17
    320a:	43 2d       	mov	r20, r3
    320c:	54 2d       	mov	r21, r4
    320e:	65 2d       	mov	r22, r5
    3210:	76 2d       	mov	r23, r6
    3212:	87 2d       	mov	r24, r7
    3214:	90 2f       	mov	r25, r16
    3216:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    321a:	18 16       	cp	r1, r24
    321c:	6c f4       	brge	.+26     	; 0x3238 <_ZN3PID7ComputeEv+0x11a>
    321e:	42 2d       	mov	r20, r2
    3220:	51 2f       	mov	r21, r17
    3222:	63 2d       	mov	r22, r3
    3224:	74 2d       	mov	r23, r4
    3226:	a9 85       	ldd	r26, Y+9	; 0x09
    3228:	ba 85       	ldd	r27, Y+10	; 0x0a
    322a:	94 96       	adiw	r26, 0x24	; 36
    322c:	4d 93       	st	X+, r20
    322e:	5d 93       	st	X+, r21
    3230:	6d 93       	st	X+, r22
    3232:	7c 93       	st	X, r23
    3234:	97 97       	sbiw	r26, 0x27	; 39
    3236:	18 c0       	rjmp	.+48     	; 0x3268 <_ZN3PID7ComputeEv+0x14a>
      else if(ITerm < outMin) ITerm= outMin;
    3238:	e9 85       	ldd	r30, Y+9	; 0x09
    323a:	fa 85       	ldd	r31, Y+10	; 0x0a
    323c:	86 a4       	ldd	r8, Z+46	; 0x2e
    323e:	97 a4       	ldd	r9, Z+47	; 0x2f
    3240:	a0 a8       	ldd	r10, Z+48	; 0x30
    3242:	b1 a8       	ldd	r11, Z+49	; 0x31
    3244:	a5 01       	movw	r20, r10
    3246:	94 01       	movw	r18, r8
    3248:	65 2d       	mov	r22, r5
    324a:	76 2d       	mov	r23, r6
    324c:	87 2d       	mov	r24, r7
    324e:	90 2f       	mov	r25, r16
    3250:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    3254:	87 ff       	sbrs	r24, 7
    3256:	08 c0       	rjmp	.+16     	; 0x3268 <_ZN3PID7ComputeEv+0x14a>
    3258:	a9 85       	ldd	r26, Y+9	; 0x09
    325a:	ba 85       	ldd	r27, Y+10	; 0x0a
    325c:	94 96       	adiw	r26, 0x24	; 36
    325e:	8d 92       	st	X+, r8
    3260:	9d 92       	st	X+, r9
    3262:	ad 92       	st	X+, r10
    3264:	bc 92       	st	X, r11
    3266:	97 97       	sbiw	r26, 0x27	; 39
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    3268:	e9 85       	ldd	r30, Y+9	; 0x09
    326a:	fa 85       	ldd	r31, Y+10	; 0x0a
    326c:	24 85       	ldd	r18, Z+12	; 0x0c
    326e:	35 85       	ldd	r19, Z+13	; 0x0d
    3270:	46 85       	ldd	r20, Z+14	; 0x0e
    3272:	57 85       	ldd	r21, Z+15	; 0x0f
    3274:	bd 81       	ldd	r27, Y+5	; 0x05
    3276:	ae 81       	ldd	r26, Y+6	; 0x06
    3278:	0f 81       	ldd	r16, Y+7	; 0x07
    327a:	b8 84       	ldd	r11, Y+8	; 0x08
    327c:	6b 2f       	mov	r22, r27
    327e:	7a 2f       	mov	r23, r26
    3280:	80 2f       	mov	r24, r16
    3282:	9b 2d       	mov	r25, r11
    3284:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    3288:	a9 85       	ldd	r26, Y+9	; 0x09
    328a:	ba 85       	ldd	r27, Y+10	; 0x0a
    328c:	94 96       	adiw	r26, 0x24	; 36
    328e:	2d 91       	ld	r18, X+
    3290:	3d 91       	ld	r19, X+
    3292:	4d 91       	ld	r20, X+
    3294:	5c 91       	ld	r21, X
    3296:	97 97       	sbiw	r26, 0x27	; 39
    3298:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    329c:	4b 01       	movw	r8, r22
    329e:	5c 01       	movw	r10, r24
	  double input = *myInput;
      double error = *mySetpoint - input;
      ITerm+= (ki * error);
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
    32a0:	e9 85       	ldd	r30, Y+9	; 0x09
    32a2:	fa 85       	ldd	r31, Y+10	; 0x0a
    32a4:	20 a5       	ldd	r18, Z+40	; 0x28
    32a6:	31 a5       	ldd	r19, Z+41	; 0x29
    32a8:	42 a5       	ldd	r20, Z+42	; 0x2a
    32aa:	53 a5       	ldd	r21, Z+43	; 0x2b
    32ac:	c7 01       	movw	r24, r14
    32ae:	b6 01       	movw	r22, r12
    32b0:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    32b4:	a9 85       	ldd	r26, Y+9	; 0x09
    32b6:	ba 85       	ldd	r27, Y+10	; 0x0a
    32b8:	54 96       	adiw	r26, 0x14	; 20
    32ba:	2d 91       	ld	r18, X+
    32bc:	3d 91       	ld	r19, X+
    32be:	4d 91       	ld	r20, X+
    32c0:	5c 91       	ld	r21, X
    32c2:	57 97       	sbiw	r26, 0x17	; 23
    32c4:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    32c8:	9b 01       	movw	r18, r22
    32ca:	ac 01       	movw	r20, r24
    32cc:	c5 01       	movw	r24, r10
    32ce:	b4 01       	movw	r22, r8
    32d0:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    32d4:	96 2e       	mov	r9, r22
    32d6:	a7 2e       	mov	r10, r23
    32d8:	b8 2e       	mov	r11, r24
    32da:	09 2f       	mov	r16, r25
      
	  if(output > outMax) output = outMax;
    32dc:	22 2d       	mov	r18, r2
    32de:	31 2f       	mov	r19, r17
    32e0:	43 2d       	mov	r20, r3
    32e2:	54 2d       	mov	r21, r4
    32e4:	69 2d       	mov	r22, r9
    32e6:	7a 2d       	mov	r23, r10
    32e8:	8b 2d       	mov	r24, r11
    32ea:	90 2f       	mov	r25, r16
    32ec:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    32f0:	18 16       	cp	r1, r24
    32f2:	b4 f0       	brlt	.+44     	; 0x3320 <_ZN3PID7ComputeEv+0x202>
      else if(output < outMin) output = outMin;
    32f4:	e9 85       	ldd	r30, Y+9	; 0x09
    32f6:	fa 85       	ldd	r31, Y+10	; 0x0a
    32f8:	26 a4       	ldd	r2, Z+46	; 0x2e
    32fa:	17 a5       	ldd	r17, Z+47	; 0x2f
    32fc:	30 a8       	ldd	r3, Z+48	; 0x30
    32fe:	41 a8       	ldd	r4, Z+49	; 0x31
    3300:	22 2d       	mov	r18, r2
    3302:	31 2f       	mov	r19, r17
    3304:	43 2d       	mov	r20, r3
    3306:	54 2d       	mov	r21, r4
    3308:	69 2d       	mov	r22, r9
    330a:	7a 2d       	mov	r23, r10
    330c:	8b 2d       	mov	r24, r11
    330e:	90 2f       	mov	r25, r16
    3310:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    3314:	87 fd       	sbrc	r24, 7
    3316:	04 c0       	rjmp	.+8      	; 0x3320 <_ZN3PID7ComputeEv+0x202>
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    3318:	29 2c       	mov	r2, r9
    331a:	1a 2d       	mov	r17, r10
    331c:	3b 2c       	mov	r3, r11
    331e:	40 2e       	mov	r4, r16
      
	  if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	  *myOutput = output;
    3320:	a9 85       	ldd	r26, Y+9	; 0x09
    3322:	ba 85       	ldd	r27, Y+10	; 0x0a
    3324:	5c 96       	adiw	r26, 0x1c	; 28
    3326:	ed 91       	ld	r30, X+
    3328:	fc 91       	ld	r31, X
    332a:	5d 97       	sbiw	r26, 0x1d	; 29
    332c:	42 2d       	mov	r20, r2
    332e:	51 2f       	mov	r21, r17
    3330:	63 2d       	mov	r22, r3
    3332:	74 2d       	mov	r23, r4
    3334:	40 83       	st	Z, r20
    3336:	51 83       	std	Z+1, r21	; 0x01
    3338:	62 83       	std	Z+2, r22	; 0x02
    333a:	73 83       	std	Z+3, r23	; 0x03
	  
      /*Remember some variables for next time*/
      lastInput = input;
    333c:	fd 01       	movw	r30, r26
    333e:	c0 a6       	std	Z+40, r12	; 0x28
    3340:	d1 a6       	std	Z+41, r13	; 0x29
    3342:	e2 a6       	std	Z+42, r14	; 0x2a
    3344:	f3 a6       	std	Z+43, r15	; 0x2b
      lastTime = now;
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	9a 81       	ldd	r25, Y+2	; 0x02
    334a:	ab 81       	ldd	r26, Y+3	; 0x03
    334c:	bc 81       	ldd	r27, Y+4	; 0x04
    334e:	80 a3       	std	Z+32, r24	; 0x20
    3350:	91 a3       	std	Z+33, r25	; 0x21
    3352:	a2 a3       	std	Z+34, r26	; 0x22
    3354:	b3 a3       	std	Z+35, r27	; 0x23
   }
}
    3356:	2a 96       	adiw	r28, 0x0a	; 10
    3358:	0f b6       	in	r0, 0x3f	; 63
    335a:	f8 94       	cli
    335c:	de bf       	out	0x3e, r29	; 62
    335e:	0f be       	out	0x3f, r0	; 63
    3360:	cd bf       	out	0x3d, r28	; 61
    3362:	df 91       	pop	r29
    3364:	cf 91       	pop	r28
    3366:	1f 91       	pop	r17
    3368:	0f 91       	pop	r16
    336a:	ff 90       	pop	r15
    336c:	ef 90       	pop	r14
    336e:	df 90       	pop	r13
    3370:	cf 90       	pop	r12
    3372:	bf 90       	pop	r11
    3374:	af 90       	pop	r10
    3376:	9f 90       	pop	r9
    3378:	8f 90       	pop	r8
    337a:	7f 90       	pop	r7
    337c:	6f 90       	pop	r6
    337e:	5f 90       	pop	r5
    3380:	4f 90       	pop	r4
    3382:	3f 90       	pop	r3
    3384:	2f 90       	pop	r2
    3386:	08 95       	ret

00003388 <_ZN3PID10SetTuningsEddd>:
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
    3388:	2f 92       	push	r2
    338a:	3f 92       	push	r3
    338c:	4f 92       	push	r4
    338e:	5f 92       	push	r5
    3390:	6f 92       	push	r6
    3392:	7f 92       	push	r7
    3394:	8f 92       	push	r8
    3396:	9f 92       	push	r9
    3398:	af 92       	push	r10
    339a:	bf 92       	push	r11
    339c:	cf 92       	push	r12
    339e:	df 92       	push	r13
    33a0:	ef 92       	push	r14
    33a2:	ff 92       	push	r15
    33a4:	0f 93       	push	r16
    33a6:	1f 93       	push	r17
    33a8:	cf 93       	push	r28
    33aa:	df 93       	push	r29
    33ac:	1c 01       	movw	r2, r24
    33ae:	4a 01       	movw	r8, r20
    33b0:	5b 01       	movw	r10, r22
    33b2:	28 01       	movw	r4, r16
    33b4:	39 01       	movw	r6, r18
   if (Kp<0 || Ki<0 || Kd<0) return;
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	a9 01       	movw	r20, r18
    33bc:	c5 01       	movw	r24, r10
    33be:	b4 01       	movw	r22, r8
    33c0:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    33c4:	87 fd       	sbrc	r24, 7
    33c6:	8e c0       	rjmp	.+284    	; 0x34e4 <_ZN3PID10SetTuningsEddd+0x15c>
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	a9 01       	movw	r20, r18
    33ce:	c3 01       	movw	r24, r6
    33d0:	b2 01       	movw	r22, r4
    33d2:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    33d6:	87 fd       	sbrc	r24, 7
    33d8:	85 c0       	rjmp	.+266    	; 0x34e4 <_ZN3PID10SetTuningsEddd+0x15c>
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	a9 01       	movw	r20, r18
    33e0:	c7 01       	movw	r24, r14
    33e2:	b6 01       	movw	r22, r12
    33e4:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    33e8:	87 fd       	sbrc	r24, 7
    33ea:	7c c0       	rjmp	.+248    	; 0x34e4 <_ZN3PID10SetTuningsEddd+0x15c>
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    33ec:	f1 01       	movw	r30, r2
    33ee:	80 82       	st	Z, r8
    33f0:	91 82       	std	Z+1, r9	; 0x01
    33f2:	a2 82       	std	Z+2, r10	; 0x02
    33f4:	b3 82       	std	Z+3, r11	; 0x03
    33f6:	44 82       	std	Z+4, r4	; 0x04
    33f8:	55 82       	std	Z+5, r5	; 0x05
    33fa:	66 82       	std	Z+6, r6	; 0x06
    33fc:	77 82       	std	Z+7, r7	; 0x07
    33fe:	c0 86       	std	Z+8, r12	; 0x08
    3400:	d1 86       	std	Z+9, r13	; 0x09
    3402:	e2 86       	std	Z+10, r14	; 0x0a
    3404:	f3 86       	std	Z+11, r15	; 0x0b
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
    3406:	64 a5       	ldd	r22, Z+44	; 0x2c
    3408:	75 a5       	ldd	r23, Z+45	; 0x2d
    340a:	88 27       	eor	r24, r24
    340c:	77 fd       	sbrc	r23, 7
    340e:	80 95       	com	r24
    3410:	98 2f       	mov	r25, r24
    3412:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__floatsisf>
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	4a e7       	ldi	r20, 0x7A	; 122
    341c:	54 e4       	ldi	r21, 0x44	; 68
    341e:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__divsf3>
    3422:	d6 2f       	mov	r29, r22
    3424:	c7 2f       	mov	r28, r23
    3426:	8c 01       	movw	r16, r24
   kp = Kp;
    3428:	f1 01       	movw	r30, r2
    342a:	84 86       	std	Z+12, r8	; 0x0c
    342c:	95 86       	std	Z+13, r9	; 0x0d
    342e:	a6 86       	std	Z+14, r10	; 0x0e
    3430:	b7 86       	std	Z+15, r11	; 0x0f
   ki = Ki * SampleTimeInSec;
    3432:	be 01       	movw	r22, r28
    3434:	98 2f       	mov	r25, r24
    3436:	27 2f       	mov	r18, r23
    3438:	36 2f       	mov	r19, r22
    343a:	49 2f       	mov	r20, r25
    343c:	51 2f       	mov	r21, r17
    343e:	c3 01       	movw	r24, r6
    3440:	b2 01       	movw	r22, r4
    3442:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    3446:	2b 01       	movw	r4, r22
    3448:	3c 01       	movw	r6, r24
    344a:	98 2f       	mov	r25, r24
    344c:	44 2d       	mov	r20, r4
    344e:	55 2d       	mov	r21, r5
    3450:	69 2f       	mov	r22, r25
    3452:	77 2d       	mov	r23, r7
    3454:	f1 01       	movw	r30, r2
    3456:	40 8b       	std	Z+16, r20	; 0x10
    3458:	51 8b       	std	Z+17, r21	; 0x11
    345a:	62 8b       	std	Z+18, r22	; 0x12
    345c:	73 8b       	std	Z+19, r23	; 0x13
   kd = Kd / SampleTimeInSec;
    345e:	be 01       	movw	r22, r28
    3460:	27 2f       	mov	r18, r23
    3462:	36 2f       	mov	r19, r22
    3464:	40 2f       	mov	r20, r16
    3466:	51 2f       	mov	r21, r17
    3468:	c7 01       	movw	r24, r14
    346a:	b6 01       	movw	r22, r12
    346c:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__divsf3>
    3470:	7b 01       	movw	r14, r22
    3472:	d8 2f       	mov	r29, r24
    3474:	c9 2f       	mov	r28, r25
    3476:	ce 01       	movw	r24, r28
    3478:	0e 2d       	mov	r16, r14
    347a:	1f 2d       	mov	r17, r15
    347c:	29 2f       	mov	r18, r25
    347e:	38 2f       	mov	r19, r24
    3480:	f1 01       	movw	r30, r2
    3482:	04 8b       	std	Z+20, r16	; 0x14
    3484:	15 8b       	std	Z+21, r17	; 0x15
    3486:	26 8b       	std	Z+22, r18	; 0x16
    3488:	37 8b       	std	Z+23, r19	; 0x17
 
  if(controllerDirection ==REVERSE)
    348a:	80 8d       	ldd	r24, Z+24	; 0x18
    348c:	91 8d       	ldd	r25, Z+25	; 0x19
    348e:	01 97       	sbiw	r24, 0x01	; 1
    3490:	49 f5       	brne	.+82     	; 0x34e4 <_ZN3PID10SetTuningsEddd+0x15c>
   {
      kp = (0 - kp);
    3492:	a5 01       	movw	r20, r10
    3494:	94 01       	movw	r18, r8
    3496:	60 e0       	ldi	r22, 0x00	; 0
    3498:	70 e0       	ldi	r23, 0x00	; 0
    349a:	cb 01       	movw	r24, r22
    349c:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    34a0:	f1 01       	movw	r30, r2
    34a2:	64 87       	std	Z+12, r22	; 0x0c
    34a4:	75 87       	std	Z+13, r23	; 0x0d
    34a6:	86 87       	std	Z+14, r24	; 0x0e
    34a8:	97 87       	std	Z+15, r25	; 0x0f
      ki = (0 - ki);
    34aa:	24 2d       	mov	r18, r4
    34ac:	35 2d       	mov	r19, r5
    34ae:	46 2d       	mov	r20, r6
    34b0:	57 2d       	mov	r21, r7
    34b2:	60 e0       	ldi	r22, 0x00	; 0
    34b4:	70 e0       	ldi	r23, 0x00	; 0
    34b6:	cb 01       	movw	r24, r22
    34b8:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    34bc:	f1 01       	movw	r30, r2
    34be:	60 8b       	std	Z+16, r22	; 0x10
    34c0:	71 8b       	std	Z+17, r23	; 0x11
    34c2:	82 8b       	std	Z+18, r24	; 0x12
    34c4:	93 8b       	std	Z+19, r25	; 0x13
      kd = (0 - kd);
    34c6:	ce 01       	movw	r24, r28
    34c8:	20 2f       	mov	r18, r16
    34ca:	31 2f       	mov	r19, r17
    34cc:	49 2f       	mov	r20, r25
    34ce:	58 2f       	mov	r21, r24
    34d0:	60 e0       	ldi	r22, 0x00	; 0
    34d2:	70 e0       	ldi	r23, 0x00	; 0
    34d4:	cb 01       	movw	r24, r22
    34d6:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    34da:	f1 01       	movw	r30, r2
    34dc:	64 8b       	std	Z+20, r22	; 0x14
    34de:	75 8b       	std	Z+21, r23	; 0x15
    34e0:	86 8b       	std	Z+22, r24	; 0x16
    34e2:	97 8b       	std	Z+23, r25	; 0x17
   }
}
    34e4:	df 91       	pop	r29
    34e6:	cf 91       	pop	r28
    34e8:	1f 91       	pop	r17
    34ea:	0f 91       	pop	r16
    34ec:	ff 90       	pop	r15
    34ee:	ef 90       	pop	r14
    34f0:	df 90       	pop	r13
    34f2:	cf 90       	pop	r12
    34f4:	bf 90       	pop	r11
    34f6:	af 90       	pop	r10
    34f8:	9f 90       	pop	r9
    34fa:	8f 90       	pop	r8
    34fc:	7f 90       	pop	r7
    34fe:	6f 90       	pop	r6
    3500:	5f 90       	pop	r5
    3502:	4f 90       	pop	r4
    3504:	3f 90       	pop	r3
    3506:	2f 90       	pop	r2
    3508:	08 95       	ret

0000350a <_ZN3PID13SetSampleTimeEi>:
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
    350a:	cf 92       	push	r12
    350c:	df 92       	push	r13
    350e:	ef 92       	push	r14
    3510:	ff 92       	push	r15
    3512:	0f 93       	push	r16
    3514:	1f 93       	push	r17
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
    351a:	ec 01       	movw	r28, r24
    351c:	8b 01       	movw	r16, r22
   if (NewSampleTime > 0)
    351e:	16 16       	cp	r1, r22
    3520:	17 06       	cpc	r1, r23
    3522:	bc f5       	brge	.+110    	; 0x3592 <_ZN3PID13SetSampleTimeEi+0x88>
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
    3524:	88 27       	eor	r24, r24
    3526:	77 fd       	sbrc	r23, 7
    3528:	80 95       	com	r24
    352a:	98 2f       	mov	r25, r24
    352c:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__floatsisf>
    3530:	6b 01       	movw	r12, r22
    3532:	7c 01       	movw	r14, r24
    3534:	6c a5       	ldd	r22, Y+44	; 0x2c
    3536:	7d a5       	ldd	r23, Y+45	; 0x2d
    3538:	88 27       	eor	r24, r24
    353a:	77 fd       	sbrc	r23, 7
    353c:	80 95       	com	r24
    353e:	98 2f       	mov	r25, r24
    3540:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__floatsisf>
    3544:	9b 01       	movw	r18, r22
    3546:	ac 01       	movw	r20, r24
    3548:	c7 01       	movw	r24, r14
    354a:	b6 01       	movw	r22, r12
    354c:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__divsf3>
    3550:	6b 01       	movw	r12, r22
    3552:	7c 01       	movw	r14, r24
      ki *= ratio;
    3554:	76 2f       	mov	r23, r22
    3556:	27 2f       	mov	r18, r23
    3558:	3d 2d       	mov	r19, r13
    355a:	4e 2d       	mov	r20, r14
    355c:	5f 2d       	mov	r21, r15
    355e:	68 89       	ldd	r22, Y+16	; 0x10
    3560:	79 89       	ldd	r23, Y+17	; 0x11
    3562:	8a 89       	ldd	r24, Y+18	; 0x12
    3564:	9b 89       	ldd	r25, Y+19	; 0x13
    3566:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    356a:	68 8b       	std	Y+16, r22	; 0x10
    356c:	79 8b       	std	Y+17, r23	; 0x11
    356e:	8a 8b       	std	Y+18, r24	; 0x12
    3570:	9b 8b       	std	Y+19, r25	; 0x13
      kd /= ratio;
    3572:	2c 2d       	mov	r18, r12
    3574:	3d 2d       	mov	r19, r13
    3576:	4e 2d       	mov	r20, r14
    3578:	5f 2d       	mov	r21, r15
    357a:	6c 89       	ldd	r22, Y+20	; 0x14
    357c:	7d 89       	ldd	r23, Y+21	; 0x15
    357e:	8e 89       	ldd	r24, Y+22	; 0x16
    3580:	9f 89       	ldd	r25, Y+23	; 0x17
    3582:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__divsf3>
    3586:	6c 8b       	std	Y+20, r22	; 0x14
    3588:	7d 8b       	std	Y+21, r23	; 0x15
    358a:	8e 8b       	std	Y+22, r24	; 0x16
    358c:	9f 8b       	std	Y+23, r25	; 0x17
      SampleTime = (unsigned long)NewSampleTime;
    358e:	1d a7       	std	Y+45, r17	; 0x2d
    3590:	0c a7       	std	Y+44, r16	; 0x2c
   }
}
    3592:	df 91       	pop	r29
    3594:	cf 91       	pop	r28
    3596:	1f 91       	pop	r17
    3598:	0f 91       	pop	r16
    359a:	ff 90       	pop	r15
    359c:	ef 90       	pop	r14
    359e:	df 90       	pop	r13
    35a0:	cf 90       	pop	r12
    35a2:	08 95       	ret

000035a4 <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
    35a4:	4f 92       	push	r4
    35a6:	5f 92       	push	r5
    35a8:	6f 92       	push	r6
    35aa:	7f 92       	push	r7
    35ac:	8f 92       	push	r8
    35ae:	9f 92       	push	r9
    35b0:	af 92       	push	r10
    35b2:	bf 92       	push	r11
    35b4:	cf 92       	push	r12
    35b6:	df 92       	push	r13
    35b8:	ef 92       	push	r14
    35ba:	ff 92       	push	r15
    35bc:	0f 93       	push	r16
    35be:	1f 93       	push	r17
    35c0:	cf 93       	push	r28
    35c2:	df 93       	push	r29
    35c4:	ec 01       	movw	r28, r24
    35c6:	6a 01       	movw	r12, r20
    35c8:	7b 01       	movw	r14, r22
    35ca:	48 01       	movw	r8, r16
    35cc:	59 01       	movw	r10, r18
   if(Min >= Max) return;
    35ce:	a9 01       	movw	r20, r18
    35d0:	98 01       	movw	r18, r16
    35d2:	c7 01       	movw	r24, r14
    35d4:	b6 01       	movw	r22, r12
    35d6:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    35da:	87 ff       	sbrs	r24, 7
    35dc:	4f c0       	rjmp	.+158    	; 0x367c <_ZN3PID15SetOutputLimitsEdd+0xd8>
   outMin = Min;
    35de:	ce a6       	std	Y+46, r12	; 0x2e
    35e0:	df a6       	std	Y+47, r13	; 0x2f
    35e2:	e8 aa       	std	Y+48, r14	; 0x30
    35e4:	f9 aa       	std	Y+49, r15	; 0x31
   outMax = Max;
    35e6:	8a aa       	std	Y+50, r8	; 0x32
    35e8:	9b aa       	std	Y+51, r9	; 0x33
    35ea:	ac aa       	std	Y+52, r10	; 0x34
    35ec:	bd aa       	std	Y+53, r11	; 0x35
 
   if(inAuto)
    35ee:	8e a9       	ldd	r24, Y+54	; 0x36
    35f0:	88 23       	and	r24, r24
    35f2:	09 f4       	brne	.+2      	; 0x35f6 <_ZN3PID15SetOutputLimitsEdd+0x52>
    35f4:	43 c0       	rjmp	.+134    	; 0x367c <_ZN3PID15SetOutputLimitsEdd+0xd8>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    35f6:	0c 8d       	ldd	r16, Y+28	; 0x1c
    35f8:	1d 8d       	ldd	r17, Y+29	; 0x1d
    35fa:	f8 01       	movw	r30, r16
    35fc:	40 80       	ld	r4, Z
    35fe:	51 80       	ldd	r5, Z+1	; 0x01
    3600:	62 80       	ldd	r6, Z+2	; 0x02
    3602:	73 80       	ldd	r7, Z+3	; 0x03
    3604:	a5 01       	movw	r20, r10
    3606:	94 01       	movw	r18, r8
    3608:	c3 01       	movw	r24, r6
    360a:	b2 01       	movw	r22, r4
    360c:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    3610:	18 16       	cp	r1, r24
    3612:	34 f4       	brge	.+12     	; 0x3620 <_ZN3PID15SetOutputLimitsEdd+0x7c>
    3614:	f8 01       	movw	r30, r16
    3616:	80 82       	st	Z, r8
    3618:	91 82       	std	Z+1, r9	; 0x01
    361a:	a2 82       	std	Z+2, r10	; 0x02
    361c:	b3 82       	std	Z+3, r11	; 0x03
    361e:	0d c0       	rjmp	.+26     	; 0x363a <_ZN3PID15SetOutputLimitsEdd+0x96>
	   else if(*myOutput < outMin) *myOutput = outMin;
    3620:	a7 01       	movw	r20, r14
    3622:	96 01       	movw	r18, r12
    3624:	c3 01       	movw	r24, r6
    3626:	b2 01       	movw	r22, r4
    3628:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    362c:	87 ff       	sbrs	r24, 7
    362e:	05 c0       	rjmp	.+10     	; 0x363a <_ZN3PID15SetOutputLimitsEdd+0x96>
    3630:	f8 01       	movw	r30, r16
    3632:	c0 82       	st	Z, r12
    3634:	d1 82       	std	Z+1, r13	; 0x01
    3636:	e2 82       	std	Z+2, r14	; 0x02
    3638:	f3 82       	std	Z+3, r15	; 0x03
	 
	   if(ITerm > outMax) ITerm= outMax;
    363a:	8c a0       	ldd	r8, Y+36	; 0x24
    363c:	9d a0       	ldd	r9, Y+37	; 0x25
    363e:	ae a0       	ldd	r10, Y+38	; 0x26
    3640:	bf a0       	ldd	r11, Y+39	; 0x27
    3642:	ca a8       	ldd	r12, Y+50	; 0x32
    3644:	db a8       	ldd	r13, Y+51	; 0x33
    3646:	ec a8       	ldd	r14, Y+52	; 0x34
    3648:	fd a8       	ldd	r15, Y+53	; 0x35
    364a:	a7 01       	movw	r20, r14
    364c:	96 01       	movw	r18, r12
    364e:	c5 01       	movw	r24, r10
    3650:	b4 01       	movw	r22, r8
    3652:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    3656:	18 16       	cp	r1, r24
    3658:	0c f4       	brge	.+2      	; 0x365c <_ZN3PID15SetOutputLimitsEdd+0xb8>
    365a:	0c c0       	rjmp	.+24     	; 0x3674 <_ZN3PID15SetOutputLimitsEdd+0xd0>
	   else if(ITerm < outMin) ITerm= outMin;
    365c:	ce a4       	ldd	r12, Y+46	; 0x2e
    365e:	df a4       	ldd	r13, Y+47	; 0x2f
    3660:	e8 a8       	ldd	r14, Y+48	; 0x30
    3662:	f9 a8       	ldd	r15, Y+49	; 0x31
    3664:	a7 01       	movw	r20, r14
    3666:	96 01       	movw	r18, r12
    3668:	c5 01       	movw	r24, r10
    366a:	b4 01       	movw	r22, r8
    366c:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    3670:	87 ff       	sbrs	r24, 7
    3672:	04 c0       	rjmp	.+8      	; 0x367c <_ZN3PID15SetOutputLimitsEdd+0xd8>
    3674:	cc a2       	std	Y+36, r12	; 0x24
    3676:	dd a2       	std	Y+37, r13	; 0x25
    3678:	ee a2       	std	Y+38, r14	; 0x26
    367a:	ff a2       	std	Y+39, r15	; 0x27
   }
}
    367c:	df 91       	pop	r29
    367e:	cf 91       	pop	r28
    3680:	1f 91       	pop	r17
    3682:	0f 91       	pop	r16
    3684:	ff 90       	pop	r15
    3686:	ef 90       	pop	r14
    3688:	df 90       	pop	r13
    368a:	cf 90       	pop	r12
    368c:	bf 90       	pop	r11
    368e:	af 90       	pop	r10
    3690:	9f 90       	pop	r9
    3692:	8f 90       	pop	r8
    3694:	7f 90       	pop	r7
    3696:	6f 90       	pop	r6
    3698:	5f 90       	pop	r5
    369a:	4f 90       	pop	r4
    369c:	08 95       	ret

0000369e <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
    369e:	8f 92       	push	r8
    36a0:	9f 92       	push	r9
    36a2:	af 92       	push	r10
    36a4:	bf 92       	push	r11
    36a6:	cf 92       	push	r12
    36a8:	df 92       	push	r13
    36aa:	ef 92       	push	r14
    36ac:	ff 92       	push	r15
    36ae:	cf 93       	push	r28
    36b0:	df 93       	push	r29
    36b2:	ec 01       	movw	r28, r24
   ITerm = *myOutput;
    36b4:	ec 8d       	ldd	r30, Y+28	; 0x1c
    36b6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    36b8:	c0 80       	ld	r12, Z
    36ba:	d1 80       	ldd	r13, Z+1	; 0x01
    36bc:	e2 80       	ldd	r14, Z+2	; 0x02
    36be:	f3 80       	ldd	r15, Z+3	; 0x03
    36c0:	cc a2       	std	Y+36, r12	; 0x24
    36c2:	dd a2       	std	Y+37, r13	; 0x25
    36c4:	ee a2       	std	Y+38, r14	; 0x26
    36c6:	ff a2       	std	Y+39, r15	; 0x27
   lastInput = *myInput;
    36c8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    36ca:	fb 8d       	ldd	r31, Y+27	; 0x1b
    36cc:	40 81       	ld	r20, Z
    36ce:	51 81       	ldd	r21, Z+1	; 0x01
    36d0:	62 81       	ldd	r22, Z+2	; 0x02
    36d2:	73 81       	ldd	r23, Z+3	; 0x03
    36d4:	48 a7       	std	Y+40, r20	; 0x28
    36d6:	59 a7       	std	Y+41, r21	; 0x29
    36d8:	6a a7       	std	Y+42, r22	; 0x2a
    36da:	7b a7       	std	Y+43, r23	; 0x2b
   if(ITerm > outMax) ITerm = outMax;
    36dc:	8a a8       	ldd	r8, Y+50	; 0x32
    36de:	9b a8       	ldd	r9, Y+51	; 0x33
    36e0:	ac a8       	ldd	r10, Y+52	; 0x34
    36e2:	bd a8       	ldd	r11, Y+53	; 0x35
    36e4:	a5 01       	movw	r20, r10
    36e6:	94 01       	movw	r18, r8
    36e8:	c7 01       	movw	r24, r14
    36ea:	b6 01       	movw	r22, r12
    36ec:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    36f0:	18 16       	cp	r1, r24
    36f2:	0c f4       	brge	.+2      	; 0x36f6 <_ZN3PID10InitializeEv+0x58>
    36f4:	0c c0       	rjmp	.+24     	; 0x370e <_ZN3PID10InitializeEv+0x70>
   else if(ITerm < outMin) ITerm = outMin;
    36f6:	8e a4       	ldd	r8, Y+46	; 0x2e
    36f8:	9f a4       	ldd	r9, Y+47	; 0x2f
    36fa:	a8 a8       	ldd	r10, Y+48	; 0x30
    36fc:	b9 a8       	ldd	r11, Y+49	; 0x31
    36fe:	a5 01       	movw	r20, r10
    3700:	94 01       	movw	r18, r8
    3702:	c7 01       	movw	r24, r14
    3704:	b6 01       	movw	r22, r12
    3706:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    370a:	87 ff       	sbrs	r24, 7
    370c:	04 c0       	rjmp	.+8      	; 0x3716 <_ZN3PID10InitializeEv+0x78>
    370e:	8c a2       	std	Y+36, r8	; 0x24
    3710:	9d a2       	std	Y+37, r9	; 0x25
    3712:	ae a2       	std	Y+38, r10	; 0x26
    3714:	bf a2       	std	Y+39, r11	; 0x27
}
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	ff 90       	pop	r15
    371c:	ef 90       	pop	r14
    371e:	df 90       	pop	r13
    3720:	cf 90       	pop	r12
    3722:	bf 90       	pop	r11
    3724:	af 90       	pop	r10
    3726:	9f 90       	pop	r9
    3728:	8f 90       	pop	r8
    372a:	08 95       	ret

0000372c <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/ 
void PID::SetMode(int Mode)
{
    372c:	1f 93       	push	r17
    372e:	cf 93       	push	r28
    3730:	df 93       	push	r29
    3732:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    3734:	11 e0       	ldi	r17, 0x01	; 1
    3736:	61 30       	cpi	r22, 0x01	; 1
    3738:	71 05       	cpc	r23, r1
    373a:	09 f0       	breq	.+2      	; 0x373e <_ZN3PID7SetModeEi+0x12>
    373c:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto == !inAuto)
    373e:	8e a9       	ldd	r24, Y+54	; 0x36
    3740:	91 e0       	ldi	r25, 0x01	; 1
    3742:	89 27       	eor	r24, r25
    3744:	18 13       	cpse	r17, r24
    3746:	03 c0       	rjmp	.+6      	; 0x374e <_ZN3PID7SetModeEi+0x22>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    3748:	ce 01       	movw	r24, r28
    374a:	0e 94 4f 1b 	call	0x369e	; 0x369e <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    374e:	1e ab       	std	Y+54, r17	; 0x36
}
    3750:	df 91       	pop	r29
    3752:	cf 91       	pop	r28
    3754:	1f 91       	pop	r17
    3756:	08 95       	ret

00003758 <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    3758:	0f 93       	push	r16
    375a:	1f 93       	push	r17
    375c:	cf 93       	push	r28
    375e:	df 93       	push	r29
    3760:	ec 01       	movw	r28, r24
    3762:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    3764:	8e a9       	ldd	r24, Y+54	; 0x36
    3766:	88 23       	and	r24, r24
    3768:	61 f1       	breq	.+88     	; 0x37c2 <_ZN3PID22SetControllerDirectionEi+0x6a>
    376a:	88 8d       	ldd	r24, Y+24	; 0x18
    376c:	99 8d       	ldd	r25, Y+25	; 0x19
    376e:	68 17       	cp	r22, r24
    3770:	79 07       	cpc	r23, r25
    3772:	39 f1       	breq	.+78     	; 0x37c2 <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	  kp = (0 - kp);
    3774:	2c 85       	ldd	r18, Y+12	; 0x0c
    3776:	3d 85       	ldd	r19, Y+13	; 0x0d
    3778:	4e 85       	ldd	r20, Y+14	; 0x0e
    377a:	5f 85       	ldd	r21, Y+15	; 0x0f
    377c:	60 e0       	ldi	r22, 0x00	; 0
    377e:	70 e0       	ldi	r23, 0x00	; 0
    3780:	cb 01       	movw	r24, r22
    3782:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    3786:	6c 87       	std	Y+12, r22	; 0x0c
    3788:	7d 87       	std	Y+13, r23	; 0x0d
    378a:	8e 87       	std	Y+14, r24	; 0x0e
    378c:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    378e:	28 89       	ldd	r18, Y+16	; 0x10
    3790:	39 89       	ldd	r19, Y+17	; 0x11
    3792:	4a 89       	ldd	r20, Y+18	; 0x12
    3794:	5b 89       	ldd	r21, Y+19	; 0x13
    3796:	60 e0       	ldi	r22, 0x00	; 0
    3798:	70 e0       	ldi	r23, 0x00	; 0
    379a:	cb 01       	movw	r24, r22
    379c:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    37a0:	68 8b       	std	Y+16, r22	; 0x10
    37a2:	79 8b       	std	Y+17, r23	; 0x11
    37a4:	8a 8b       	std	Y+18, r24	; 0x12
    37a6:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    37a8:	2c 89       	ldd	r18, Y+20	; 0x14
    37aa:	3d 89       	ldd	r19, Y+21	; 0x15
    37ac:	4e 89       	ldd	r20, Y+22	; 0x16
    37ae:	5f 89       	ldd	r21, Y+23	; 0x17
    37b0:	60 e0       	ldi	r22, 0x00	; 0
    37b2:	70 e0       	ldi	r23, 0x00	; 0
    37b4:	cb 01       	movw	r24, r22
    37b6:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    37ba:	6c 8b       	std	Y+20, r22	; 0x14
    37bc:	7d 8b       	std	Y+21, r23	; 0x15
    37be:	8e 8b       	std	Y+22, r24	; 0x16
    37c0:	9f 8b       	std	Y+23, r25	; 0x17
   }   
   controllerDirection = Direction;
    37c2:	19 8f       	std	Y+25, r17	; 0x19
    37c4:	08 8f       	std	Y+24, r16	; 0x18
}
    37c6:	df 91       	pop	r29
    37c8:	cf 91       	pop	r28
    37ca:	1f 91       	pop	r17
    37cc:	0f 91       	pop	r16
    37ce:	08 95       	ret

000037d0 <_ZN3PIDC1EPdS0_S0_dddi>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    37d0:	2f 92       	push	r2
    37d2:	3f 92       	push	r3
    37d4:	4f 92       	push	r4
    37d6:	5f 92       	push	r5
    37d8:	6f 92       	push	r6
    37da:	7f 92       	push	r7
    37dc:	8f 92       	push	r8
    37de:	9f 92       	push	r9
    37e0:	af 92       	push	r10
    37e2:	bf 92       	push	r11
    37e4:	cf 92       	push	r12
    37e6:	df 92       	push	r13
    37e8:	ef 92       	push	r14
    37ea:	ff 92       	push	r15
    37ec:	0f 93       	push	r16
    37ee:	1f 93       	push	r17
    37f0:	cf 93       	push	r28
    37f2:	df 93       	push	r29
    37f4:	00 d0       	rcall	.+0      	; 0x37f6 <_ZN3PIDC1EPdS0_S0_dddi+0x26>
    37f6:	00 d0       	rcall	.+0      	; 0x37f8 <_ZN3PIDC1EPdS0_S0_dddi+0x28>
    37f8:	00 d0       	rcall	.+0      	; 0x37fa <_ZN3PIDC1EPdS0_S0_dddi+0x2a>
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
    37fe:	1c 01       	movw	r2, r24
    3800:	7a 83       	std	Y+2, r23	; 0x02
    3802:	69 83       	std	Y+1, r22	; 0x01
    3804:	5c 83       	std	Y+4, r21	; 0x04
    3806:	4b 83       	std	Y+3, r20	; 0x03
    3808:	3e 83       	std	Y+6, r19	; 0x06
    380a:	2d 83       	std	Y+5, r18	; 0x05
    380c:	27 01       	movw	r4, r14
    380e:	38 01       	movw	r6, r16
    3810:	45 01       	movw	r8, r10
    3812:	56 01       	movw	r10, r12
        double Kp, double Ki, double Kd, int ControllerDirection)
{
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
    3814:	00 e0       	ldi	r16, 0x00	; 0
    3816:	10 e0       	ldi	r17, 0x00	; 0
    3818:	2f e7       	ldi	r18, 0x7F	; 127
    381a:	33 e4       	ldi	r19, 0x43	; 67
    381c:	40 e0       	ldi	r20, 0x00	; 0
    381e:	50 e0       	ldi	r21, 0x00	; 0
    3820:	ba 01       	movw	r22, r20
    3822:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <_ZN3PID15SetOutputLimitsEdd>
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    3826:	84 e6       	ldi	r24, 0x64	; 100
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	f1 01       	movw	r30, r2
    382c:	95 a7       	std	Z+45, r25	; 0x2d
    382e:	84 a7       	std	Z+44, r24	; 0x2c

    PID::SetControllerDirection(ControllerDirection);
    3830:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3832:	78 a1       	ldd	r23, Y+32	; 0x20
    3834:	c1 01       	movw	r24, r2
    3836:	0e 94 ac 1b 	call	0x3758	; 0x3758 <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd);
    383a:	cb 8c       	ldd	r12, Y+27	; 0x1b
    383c:	dc 8c       	ldd	r13, Y+28	; 0x1c
    383e:	ed 8c       	ldd	r14, Y+29	; 0x1d
    3840:	fe 8c       	ldd	r15, Y+30	; 0x1e
    3842:	95 01       	movw	r18, r10
    3844:	84 01       	movw	r16, r8
    3846:	b3 01       	movw	r22, r6
    3848:	a2 01       	movw	r20, r4
    384a:	c1 01       	movw	r24, r2
    384c:	0e 94 c4 19 	call	0x3388	; 0x3388 <_ZN3PID10SetTuningsEddd>

    lastTime = millis()-SampleTime;				
    3850:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    3854:	f1 01       	movw	r30, r2
    3856:	84 a4       	ldd	r8, Z+44	; 0x2c
    3858:	95 a4       	ldd	r9, Z+45	; 0x2d
    385a:	aa 24       	eor	r10, r10
    385c:	97 fc       	sbrc	r9, 7
    385e:	a0 94       	com	r10
    3860:	ba 2c       	mov	r11, r10
    3862:	68 19       	sub	r22, r8
    3864:	79 09       	sbc	r23, r9
    3866:	8a 09       	sbc	r24, r10
    3868:	9b 09       	sbc	r25, r11
    386a:	60 a3       	std	Z+32, r22	; 0x20
    386c:	71 a3       	std	Z+33, r23	; 0x21
    386e:	82 a3       	std	Z+34, r24	; 0x22
    3870:	93 a3       	std	Z+35, r25	; 0x23
    inAuto = false;
    3872:	16 aa       	std	Z+54, r1	; 0x36
    myOutput = Output;
    3874:	8b 81       	ldd	r24, Y+3	; 0x03
    3876:	9c 81       	ldd	r25, Y+4	; 0x04
    3878:	95 8f       	std	Z+29, r25	; 0x1d
    387a:	84 8f       	std	Z+28, r24	; 0x1c
    myInput = Input;
    387c:	89 81       	ldd	r24, Y+1	; 0x01
    387e:	9a 81       	ldd	r25, Y+2	; 0x02
    3880:	93 8f       	std	Z+27, r25	; 0x1b
    3882:	82 8f       	std	Z+26, r24	; 0x1a
    mySetpoint = Setpoint;
    3884:	8d 81       	ldd	r24, Y+5	; 0x05
    3886:	9e 81       	ldd	r25, Y+6	; 0x06
    3888:	97 8f       	std	Z+31, r25	; 0x1f
    388a:	86 8f       	std	Z+30, r24	; 0x1e
		
}
    388c:	26 96       	adiw	r28, 0x06	; 6
    388e:	0f b6       	in	r0, 0x3f	; 63
    3890:	f8 94       	cli
    3892:	de bf       	out	0x3e, r29	; 62
    3894:	0f be       	out	0x3f, r0	; 63
    3896:	cd bf       	out	0x3d, r28	; 61
    3898:	df 91       	pop	r29
    389a:	cf 91       	pop	r28
    389c:	1f 91       	pop	r17
    389e:	0f 91       	pop	r16
    38a0:	ff 90       	pop	r15
    38a2:	ef 90       	pop	r14
    38a4:	df 90       	pop	r13
    38a6:	cf 90       	pop	r12
    38a8:	bf 90       	pop	r11
    38aa:	af 90       	pop	r10
    38ac:	9f 90       	pop	r9
    38ae:	8f 90       	pop	r8
    38b0:	7f 90       	pop	r7
    38b2:	6f 90       	pop	r6
    38b4:	5f 90       	pop	r5
    38b6:	4f 90       	pop	r4
    38b8:	3f 90       	pop	r3
    38ba:	2f 90       	pop	r2
    38bc:	08 95       	ret

000038be <_ZN4NMEAC1Ei>:

//
// constructor method
//

NMEA::NMEA(int connect)
    38be:	0f 93       	push	r16
    38c0:	1f 93       	push	r17
    38c2:	cf 93       	push	r28
    38c4:	df 93       	push	r29
    38c6:	fc 01       	movw	r30, r24
{
	// private properties
	_gprmc_only = connect;
    38c8:	71 83       	std	Z+1, r23	; 0x01
    38ca:	60 83       	st	Z, r22
	_gprmc_utc = 0.0;
    38cc:	12 82       	std	Z+2, r1	; 0x02
    38ce:	13 82       	std	Z+3, r1	; 0x03
    38d0:	14 82       	std	Z+4, r1	; 0x04
    38d2:	15 82       	std	Z+5, r1	; 0x05
	_gprmc_status = 'V';
    38d4:	86 e5       	ldi	r24, 0x56	; 86
    38d6:	86 83       	std	Z+6, r24	; 0x06
	_gprmc_lat = 0.0;
    38d8:	17 82       	std	Z+7, r1	; 0x07
    38da:	10 86       	std	Z+8, r1	; 0x08
    38dc:	11 86       	std	Z+9, r1	; 0x09
    38de:	12 86       	std	Z+10, r1	; 0x0a
	_gprmc_long = 0.0;
    38e0:	13 86       	std	Z+11, r1	; 0x0b
    38e2:	14 86       	std	Z+12, r1	; 0x0c
    38e4:	15 86       	std	Z+13, r1	; 0x0d
    38e6:	16 86       	std	Z+14, r1	; 0x0e
	_gprmc_speed = 0.0;
    38e8:	17 86       	std	Z+15, r1	; 0x0f
    38ea:	10 8a       	std	Z+16, r1	; 0x10
    38ec:	11 8a       	std	Z+17, r1	; 0x11
    38ee:	12 8a       	std	Z+18, r1	; 0x12
	_gprmc_angle = 0.0;
    38f0:	13 8a       	std	Z+19, r1	; 0x13
    38f2:	14 8a       	std	Z+20, r1	; 0x14
    38f4:	15 8a       	std	Z+21, r1	; 0x15
    38f6:	16 8a       	std	Z+22, r1	; 0x16
	_terms = 0;
    38f8:	df 01       	movw	r26, r30
    38fa:	a7 54       	subi	r26, 0x47	; 71
    38fc:	bf 4f       	sbci	r27, 0xFF	; 255
    38fe:	1d 92       	st	X+, r1
    3900:	1c 92       	st	X, r1
	n = 0;
    3902:	df 01       	movw	r26, r30
    3904:	a5 5a       	subi	r26, 0xA5	; 165
    3906:	be 4f       	sbci	r27, 0xFE	; 254
    3908:	1d 92       	st	X+, r1
    390a:	1c 92       	st	X, r1
	_state = 0;
    390c:	df 01       	movw	r26, r30
    390e:	a1 5a       	subi	r26, 0xA1	; 161
    3910:	be 4f       	sbci	r27, 0xFE	; 254
    3912:	1d 92       	st	X+, r1
    3914:	1c 92       	st	X, r1
	_parity = 0;
    3916:	df 01       	movw	r26, r30
    3918:	af 59       	subi	r26, 0x9F	; 159
    391a:	be 4f       	sbci	r27, 0xFE	; 254
    391c:	1d 92       	st	X+, r1
    391e:	1c 92       	st	X, r1
	_nt = 0;
    3920:	df 01       	movw	r26, r30
    3922:	ad 59       	subi	r26, 0x9D	; 157
    3924:	be 4f       	sbci	r27, 0xFE	; 254
    3926:	1d 92       	st	X+, r1
    3928:	1c 92       	st	X, r1

	f_sentence[0] = 0;
    392a:	17 8a       	std	Z+23, r1	; 0x17
	f_terms = 0;
    392c:	df 01       	movw	r26, r30
    392e:	a9 54       	subi	r26, 0x49	; 73
    3930:	bf 4f       	sbci	r27, 0xFF	; 255
    3932:	1d 92       	st	X+, r1
    3934:	1c 92       	st	X, r1
    3936:	ef 01       	movw	r28, r30
    3938:	0e e1       	ldi	r16, 0x1E	; 30
    393a:	10 e0       	ldi	r17, 0x00	; 0
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
    393c:	8f e0       	ldi	r24, 0x0F	; 15
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	0e 94 87 13 	call	0x270e	; 0x270e <malloc>

//
// constructor method
//

NMEA::NMEA(int connect)
    3944:	fe 01       	movw	r30, r28
    3946:	e1 5e       	subi	r30, 0xE1	; 225
    3948:	fe 4f       	sbci	r31, 0xFE	; 254

	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
    394a:	80 83       	st	Z, r24
    394c:	91 83       	std	Z+1, r25	; 0x01
    f_term[t] = (char*) malloc (15 * sizeof(char));
    394e:	8f e0       	ldi	r24, 0x0F	; 15
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	0e 94 87 13 	call	0x270e	; 0x270e <malloc>
    3956:	fc 01       	movw	r30, r24

//
// constructor method
//

NMEA::NMEA(int connect)
    3958:	de 01       	movw	r26, r28
    395a:	a5 58       	subi	r26, 0x85	; 133
    395c:	bf 4f       	sbci	r27, 0xFF	; 255
	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
    f_term[t] = (char*) malloc (15 * sizeof(char));
    395e:	8d 93       	st	X+, r24
    3960:	9c 93       	st	X, r25
    (f_term[t])[0] = 0;
    3962:	10 82       	st	Z, r1
    3964:	01 50       	subi	r16, 0x01	; 1
    3966:	11 09       	sbc	r17, r1
    3968:	22 96       	adiw	r28, 0x02	; 2
	_nt = 0;

	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    396a:	01 15       	cp	r16, r1
    396c:	11 05       	cpc	r17, r1
    396e:	31 f7       	brne	.-52     	; 0x393c <_ZN4NMEAC1Ei+0x7e>
    _term[t] = (char*) malloc (15 * sizeof(char));
    f_term[t] = (char*) malloc (15 * sizeof(char));
    (f_term[t])[0] = 0;
  }
}
    3970:	df 91       	pop	r29
    3972:	cf 91       	pop	r28
    3974:	1f 91       	pop	r17
    3976:	0f 91       	pop	r16
    3978:	08 95       	ret

0000397a <_ZN4NMEA9gprmc_utcEv>:
    break;
  }
  return 0;
}

float NMEA::gprmc_utc() {
    397a:	fc 01       	movw	r30, r24
	// returns decimal value of UTC term of last-known GPRMC sentence
	return _gprmc_utc;
}
    397c:	52 81       	ldd	r21, Z+2	; 0x02
    397e:	43 81       	ldd	r20, Z+3	; 0x03
    3980:	34 81       	ldd	r19, Z+4	; 0x04
    3982:	25 81       	ldd	r18, Z+5	; 0x05
    3984:	65 2f       	mov	r22, r21
    3986:	74 2f       	mov	r23, r20
    3988:	83 2f       	mov	r24, r19
    398a:	92 2f       	mov	r25, r18
    398c:	08 95       	ret

0000398e <_ZN4NMEA12gprmc_statusEv>:

char NMEA::gprmc_status() {
	// returns status character of last-known GPRMC sentence ('A' or 'V')
	return _gprmc_status;
}
    398e:	fc 01       	movw	r30, r24
    3990:	86 81       	ldd	r24, Z+6	; 0x06
    3992:	08 95       	ret

00003994 <_ZN4NMEA14gprmc_latitudeEv>:

float NMEA::gprmc_latitude() {
    3994:	fc 01       	movw	r30, r24
	// returns signed degree-decimal latitude value of last-known GPRMC position
	return _gprmc_lat;
}
    3996:	57 81       	ldd	r21, Z+7	; 0x07
    3998:	40 85       	ldd	r20, Z+8	; 0x08
    399a:	31 85       	ldd	r19, Z+9	; 0x09
    399c:	22 85       	ldd	r18, Z+10	; 0x0a
    399e:	65 2f       	mov	r22, r21
    39a0:	74 2f       	mov	r23, r20
    39a2:	83 2f       	mov	r24, r19
    39a4:	92 2f       	mov	r25, r18
    39a6:	08 95       	ret

000039a8 <_ZN4NMEA15gprmc_longitudeEv>:

float NMEA::gprmc_longitude() {
    39a8:	fc 01       	movw	r30, r24
	// returns signed degree-decimal longitude value of last-known GPRMC position
	return _gprmc_long;
}
    39aa:	53 85       	ldd	r21, Z+11	; 0x0b
    39ac:	44 85       	ldd	r20, Z+12	; 0x0c
    39ae:	35 85       	ldd	r19, Z+13	; 0x0d
    39b0:	26 85       	ldd	r18, Z+14	; 0x0e
    39b2:	65 2f       	mov	r22, r21
    39b4:	74 2f       	mov	r23, r20
    39b6:	83 2f       	mov	r24, r19
    39b8:	92 2f       	mov	r25, r18
    39ba:	08 95       	ret

000039bc <_ZN4NMEA11gprmc_speedEf>:

float NMEA::gprmc_speed(float unit) {
    39bc:	cf 92       	push	r12
    39be:	df 92       	push	r13
    39c0:	ef 92       	push	r14
    39c2:	ff 92       	push	r15
    39c4:	6a 01       	movw	r12, r20
    39c6:	7b 01       	movw	r14, r22
	// returns speed-over-ground from last-known GPRMC sentence
	return (_gprmc_speed * unit);
    39c8:	fc 01       	movw	r30, r24
    39ca:	27 85       	ldd	r18, Z+15	; 0x0f
    39cc:	30 89       	ldd	r19, Z+16	; 0x10
    39ce:	41 89       	ldd	r20, Z+17	; 0x11
    39d0:	52 89       	ldd	r21, Z+18	; 0x12
    39d2:	c7 01       	movw	r24, r14
    39d4:	b6 01       	movw	r22, r12
    39d6:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
}
    39da:	ff 90       	pop	r15
    39dc:	ef 90       	pop	r14
    39de:	df 90       	pop	r13
    39e0:	cf 90       	pop	r12
    39e2:	08 95       	ret

000039e4 <_ZN4NMEA12gprmc_courseEv>:

float NMEA::gprmc_course() {
    39e4:	fc 01       	movw	r30, r24
	// returns decimal value of track-angle-made-good term in last-known GPRMC sentence - 0-360 deg
	return _gprmc_angle;
}
    39e6:	53 89       	ldd	r21, Z+19	; 0x13
    39e8:	44 89       	ldd	r20, Z+20	; 0x14
    39ea:	35 89       	ldd	r19, Z+21	; 0x15
    39ec:	26 89       	ldd	r18, Z+22	; 0x16
    39ee:	65 2f       	mov	r22, r21
    39f0:	74 2f       	mov	r23, r20
    39f2:	83 2f       	mov	r24, r19
    39f4:	92 2f       	mov	r25, r18
    39f6:	08 95       	ret

000039f8 <_ZN4NMEA8sentenceEv>:
//	return rc;
//}

char* NMEA::sentence() {
	// returns last received full sentence as zero terminated string
  return f_sentence;
    39f8:	9c 01       	movw	r18, r24
    39fa:	29 5e       	subi	r18, 0xE9	; 233
    39fc:	3f 4f       	sbci	r19, 0xFF	; 255
}
    39fe:	c9 01       	movw	r24, r18
    3a00:	08 95       	ret

00003a02 <_ZN4NMEA4termEi>:
  return f_terms;
}

char* NMEA::term(int t) {
	// returns term t of last received full sentence as zero terminated string
  return f_term[t];
    3a02:	66 0f       	add	r22, r22
    3a04:	77 1f       	adc	r23, r23
    3a06:	68 0f       	add	r22, r24
    3a08:	79 1f       	adc	r23, r25
    3a0a:	fb 01       	movw	r30, r22
    3a0c:	e5 58       	subi	r30, 0x85	; 133
    3a0e:	ff 4f       	sbci	r31, 0xFF	; 255
}
    3a10:	80 81       	ld	r24, Z
    3a12:	91 81       	ldd	r25, Z+1	; 0x01
    3a14:	08 95       	ret

00003a16 <_ZN4NMEA8_decimalEPc>:
  else {
    return int(a)-48;
  }
}

float NMEA::_decimal(char* s) {
    3a16:	4f 92       	push	r4
    3a18:	5f 92       	push	r5
    3a1a:	6f 92       	push	r6
    3a1c:	7f 92       	push	r7
    3a1e:	8f 92       	push	r8
    3a20:	9f 92       	push	r9
    3a22:	af 92       	push	r10
    3a24:	bf 92       	push	r11
    3a26:	cf 92       	push	r12
    3a28:	df 92       	push	r13
    3a2a:	ef 92       	push	r14
    3a2c:	ff 92       	push	r15
    3a2e:	0f 93       	push	r16
    3a30:	1f 93       	push	r17
    3a32:	cf 93       	push	r28
    3a34:	df 93       	push	r29
  float rr = 0.0;
  float rb = 0.1;
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
    3a36:	db 01       	movw	r26, r22
    3a38:	cc 91       	ld	r28, X
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	cd 32       	cpi	r28, 0x2D	; 45
    3a40:	21 f0       	breq	.+8      	; 0x3a4a <_ZN4NMEA8_decimalEPc+0x34>
    3a42:	cb 32       	cpi	r28, 0x2B	; 43
    3a44:	11 f0       	breq	.+4      	; 0x3a4a <_ZN4NMEA8_decimalEPc+0x34>
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	90 e0       	ldi	r25, 0x00	; 0
  else {
    return int(a)-48;
  }
}

float NMEA::_decimal(char* s) {
    3a4a:	2b 01       	movw	r4, r22
    3a4c:	48 0e       	add	r4, r24
    3a4e:	59 1e       	adc	r5, r25
    3a50:	61 2c       	mov	r6, r1
    3a52:	3d ec       	ldi	r19, 0xCD	; 205
    3a54:	a3 2e       	mov	r10, r19
    3a56:	4c ec       	ldi	r20, 0xCC	; 204
    3a58:	94 2e       	mov	r9, r20
    3a5a:	5c ec       	ldi	r21, 0xCC	; 204
    3a5c:	85 2e       	mov	r8, r21
    3a5e:	6d e3       	ldi	r22, 0x3D	; 61
    3a60:	76 2e       	mov	r7, r22
    3a62:	b1 2c       	mov	r11, r1
    3a64:	00 e0       	ldi	r16, 0x00	; 0
    3a66:	10 e0       	ldi	r17, 0x00	; 0
    3a68:	d0 e0       	ldi	r29, 0x00	; 0
    3a6a:	c1 2c       	mov	r12, r1
    3a6c:	d1 2c       	mov	r13, r1
    3a6e:	76 01       	movw	r14, r12
    3a70:	4a c0       	rjmp	.+148    	; 0x3b06 <_ZN4NMEA8_decimalEPc+0xf0>
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    if (s[i] == '.') {
    3a72:	ee 32       	cpi	r30, 0x2E	; 46
    3a74:	09 f4       	brne	.+2      	; 0x3a78 <_ZN4NMEA8_decimalEPc+0x62>
    3a76:	45 c0       	rjmp	.+138    	; 0x3b02 <_ZN4NMEA8_decimalEPc+0xec>
    3a78:	ff 27       	eor	r31, r31
    3a7a:	e7 fd       	sbrc	r30, 7
    3a7c:	f0 95       	com	r31
      dec = true;
    }
    else{
      if (!dec) {
    3a7e:	61 10       	cpse	r6, r1
    3a80:	15 c0       	rjmp	.+42     	; 0x3aac <_ZN4NMEA8_decimalEPc+0x96>
        rl = (10 * rl) + (s[i] - 48);
    3a82:	aa e0       	ldi	r26, 0x0A	; 10
    3a84:	b0 e0       	ldi	r27, 0x00	; 0
    3a86:	a7 01       	movw	r20, r14
    3a88:	96 01       	movw	r18, r12
    3a8a:	0e 94 28 40 	call	0x8050	; 0x8050 <__muluhisi3>
    3a8e:	6b 01       	movw	r12, r22
    3a90:	7c 01       	movw	r14, r24
    3a92:	bf 01       	movw	r22, r30
    3a94:	60 53       	subi	r22, 0x30	; 48
    3a96:	71 09       	sbc	r23, r1
    3a98:	cb 01       	movw	r24, r22
    3a9a:	aa 27       	eor	r26, r26
    3a9c:	97 fd       	sbrc	r25, 7
    3a9e:	a0 95       	com	r26
    3aa0:	ba 2f       	mov	r27, r26
    3aa2:	c8 0e       	add	r12, r24
    3aa4:	d9 1e       	adc	r13, r25
    3aa6:	ea 1e       	adc	r14, r26
    3aa8:	fb 1e       	adc	r15, r27
    3aaa:	2d c0       	rjmp	.+90     	; 0x3b06 <_ZN4NMEA8_decimalEPc+0xf0>
      }
      else {
        rr += rb * (float)(s[i] - 48);
    3aac:	bf 01       	movw	r22, r30
    3aae:	60 53       	subi	r22, 0x30	; 48
    3ab0:	71 09       	sbc	r23, r1
    3ab2:	88 27       	eor	r24, r24
    3ab4:	77 fd       	sbrc	r23, 7
    3ab6:	80 95       	com	r24
    3ab8:	98 2f       	mov	r25, r24
    3aba:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__floatsisf>
    3abe:	9b 01       	movw	r18, r22
    3ac0:	ac 01       	movw	r20, r24
    3ac2:	6a 2d       	mov	r22, r10
    3ac4:	79 2d       	mov	r23, r9
    3ac6:	88 2d       	mov	r24, r8
    3ac8:	97 2d       	mov	r25, r7
    3aca:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    3ace:	9b 01       	movw	r18, r22
    3ad0:	ac 01       	movw	r20, r24
    3ad2:	6b 2d       	mov	r22, r11
    3ad4:	70 2f       	mov	r23, r16
    3ad6:	81 2f       	mov	r24, r17
    3ad8:	9d 2f       	mov	r25, r29
    3ada:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    3ade:	b6 2e       	mov	r11, r22
    3ae0:	07 2f       	mov	r16, r23
    3ae2:	18 2f       	mov	r17, r24
    3ae4:	d9 2f       	mov	r29, r25
        rb /= 10.0;
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	40 e2       	ldi	r20, 0x20	; 32
    3aec:	51 e4       	ldi	r21, 0x41	; 65
    3aee:	6a 2d       	mov	r22, r10
    3af0:	79 2d       	mov	r23, r9
    3af2:	88 2d       	mov	r24, r8
    3af4:	97 2d       	mov	r25, r7
    3af6:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__divsf3>
    3afa:	a6 2e       	mov	r10, r22
    3afc:	97 2e       	mov	r9, r23
    3afe:	88 2e       	mov	r8, r24
    3b00:	79 2e       	mov	r7, r25
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    if (s[i] == '.') {
      dec = true;
    3b02:	66 24       	eor	r6, r6
    3b04:	63 94       	inc	r6
  float rb = 0.1;
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    3b06:	d2 01       	movw	r26, r4
    3b08:	ed 91       	ld	r30, X+
    3b0a:	2d 01       	movw	r4, r26
    3b0c:	e1 11       	cpse	r30, r1
    3b0e:	b1 cf       	rjmp	.-158    	; 0x3a72 <_ZN4NMEA8_decimalEPc+0x5c>
        rb /= 10.0;
      }
    }
    i++;
  }
  rr += (float)rl;
    3b10:	c7 01       	movw	r24, r14
    3b12:	b6 01       	movw	r22, r12
    3b14:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__floatsisf>
    3b18:	9b 01       	movw	r18, r22
    3b1a:	ac 01       	movw	r20, r24
    3b1c:	6b 2d       	mov	r22, r11
    3b1e:	70 2f       	mov	r23, r16
    3b20:	81 2f       	mov	r24, r17
    3b22:	9d 2f       	mov	r25, r29
    3b24:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
  if (s[0] == '-') {
    3b28:	cd 32       	cpi	r28, 0x2D	; 45
    3b2a:	49 f4       	brne	.+18     	; 0x3b3e <_ZN4NMEA8_decimalEPc+0x128>
    rr = 0.0 - rr;
    3b2c:	26 2f       	mov	r18, r22
    3b2e:	37 2f       	mov	r19, r23
    3b30:	48 2f       	mov	r20, r24
    3b32:	59 2f       	mov	r21, r25
    3b34:	60 e0       	ldi	r22, 0x00	; 0
    3b36:	70 e0       	ldi	r23, 0x00	; 0
    3b38:	cb 01       	movw	r24, r22
    3b3a:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
  }
  return rr;
}
    3b3e:	df 91       	pop	r29
    3b40:	cf 91       	pop	r28
    3b42:	1f 91       	pop	r17
    3b44:	0f 91       	pop	r16
    3b46:	ff 90       	pop	r15
    3b48:	ef 90       	pop	r14
    3b4a:	df 90       	pop	r13
    3b4c:	cf 90       	pop	r12
    3b4e:	bf 90       	pop	r11
    3b50:	af 90       	pop	r10
    3b52:	9f 90       	pop	r9
    3b54:	8f 90       	pop	r8
    3b56:	7f 90       	pop	r7
    3b58:	6f 90       	pop	r6
    3b5a:	5f 90       	pop	r5
    3b5c:	4f 90       	pop	r4
    3b5e:	08 95       	ret

00003b60 <_ZN4NMEA6decodeEc>:

//
// public methods
//

int NMEA::decode(char c) {
    3b60:	8f 92       	push	r8
    3b62:	9f 92       	push	r9
    3b64:	af 92       	push	r10
    3b66:	bf 92       	push	r11
    3b68:	ef 92       	push	r14
    3b6a:	ff 92       	push	r15
    3b6c:	0f 93       	push	r16
    3b6e:	1f 93       	push	r17
    3b70:	cf 93       	push	r28
    3b72:	df 93       	push	r29
    3b74:	ec 01       	movw	r28, r24
  // avoid runaway sentences (>99 chars or >29 terms) and terms (>14 chars)
  if ((n >= 100) || (_terms >= 30) || (_nt >= 15)) { _state = 0; }
    3b76:	fc 01       	movw	r30, r24
    3b78:	e5 5a       	subi	r30, 0xA5	; 165
    3b7a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b7c:	80 81       	ld	r24, Z
    3b7e:	91 81       	ldd	r25, Z+1	; 0x01
    3b80:	84 36       	cpi	r24, 0x64	; 100
    3b82:	91 05       	cpc	r25, r1
    3b84:	84 f4       	brge	.+32     	; 0x3ba6 <_ZN4NMEA6decodeEc+0x46>
    3b86:	fe 01       	movw	r30, r28
    3b88:	e7 54       	subi	r30, 0x47	; 71
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	20 81       	ld	r18, Z
    3b8e:	31 81       	ldd	r19, Z+1	; 0x01
    3b90:	2e 31       	cpi	r18, 0x1E	; 30
    3b92:	31 05       	cpc	r19, r1
    3b94:	44 f4       	brge	.+16     	; 0x3ba6 <_ZN4NMEA6decodeEc+0x46>
    3b96:	fe 01       	movw	r30, r28
    3b98:	ed 59       	subi	r30, 0x9D	; 157
    3b9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b9c:	20 81       	ld	r18, Z
    3b9e:	31 81       	ldd	r19, Z+1	; 0x01
    3ba0:	2f 30       	cpi	r18, 0x0F	; 15
    3ba2:	31 05       	cpc	r19, r1
    3ba4:	2c f0       	brlt	.+10     	; 0x3bb0 <_ZN4NMEA6decodeEc+0x50>
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	e1 5a       	subi	r30, 0xA1	; 161
    3baa:	fe 4f       	sbci	r31, 0xFE	; 254
    3bac:	11 82       	std	Z+1, r1	; 0x01
    3bae:	10 82       	st	Z, r1
    3bb0:	8e 01       	movw	r16, r28
    3bb2:	01 5a       	subi	r16, 0xA1	; 161
    3bb4:	1e 4f       	sbci	r17, 0xFE	; 254
  // LF and CR always reset parser
  if ((c == 0x0A) || (c == 0x0D)) { _state = 0; }
    3bb6:	6a 30       	cpi	r22, 0x0A	; 10
    3bb8:	11 f0       	breq	.+4      	; 0x3bbe <_ZN4NMEA6decodeEc+0x5e>
    3bba:	6d 30       	cpi	r22, 0x0D	; 13
    3bbc:	19 f4       	brne	.+6      	; 0x3bc4 <_ZN4NMEA6decodeEc+0x64>
    3bbe:	d8 01       	movw	r26, r16
    3bc0:	1d 92       	st	X+, r1
    3bc2:	1c 92       	st	X, r1
  // '$' always starts a new sentence
  if (c == '$') {
    3bc4:	64 32       	cpi	r22, 0x24	; 36
    3bc6:	11 f5       	brne	.+68     	; 0x3c0c <_ZN4NMEA6decodeEc+0xac>
    _gprmc_tag = 0;
    3bc8:	fe 01       	movw	r30, r28
    3bca:	e3 5a       	subi	r30, 0xA3	; 163
    3bcc:	fe 4f       	sbci	r31, 0xFE	; 254
    3bce:	11 82       	std	Z+1, r1	; 0x01
    3bd0:	10 82       	st	Z, r1
    _parity = 0;
    3bd2:	fe 01       	movw	r30, r28
    3bd4:	ef 59       	subi	r30, 0x9F	; 159
    3bd6:	fe 4f       	sbci	r31, 0xFE	; 254
    3bd8:	11 82       	std	Z+1, r1	; 0x01
    3bda:	10 82       	st	Z, r1
    _terms = 0;
    3bdc:	fe 01       	movw	r30, r28
    3bde:	e7 54       	subi	r30, 0x47	; 71
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	11 82       	std	Z+1, r1	; 0x01
    3be4:	10 82       	st	Z, r1
    _nt = 0;
    3be6:	fe 01       	movw	r30, r28
    3be8:	ed 59       	subi	r30, 0x9D	; 157
    3bea:	fe 4f       	sbci	r31, 0xFE	; 254
    3bec:	11 82       	std	Z+1, r1	; 0x01
    3bee:	10 82       	st	Z, r1
    _sentence[0] = c;
    3bf0:	fe 01       	movw	r30, r28
    3bf2:	e5 54       	subi	r30, 0x45	; 69
    3bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf6:	60 83       	st	Z, r22
    n = 1;
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	e5 5a       	subi	r30, 0xA5	; 165
    3bfc:	fe 4f       	sbci	r31, 0xFE	; 254
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	91 83       	std	Z+1, r25	; 0x01
    3c04:	80 83       	st	Z, r24
    _state = 1;
    3c06:	c1 5a       	subi	r28, 0xA1	; 161
    3c08:	de 4f       	sbci	r29, 0xFE	; 254
    3c0a:	e0 c0       	rjmp	.+448    	; 0x3dcc <_ZN4NMEA6decodeEc+0x26c>
    return 0;
  }
  // parse other chars according to parser state
  switch(_state) {
    3c0c:	f8 01       	movw	r30, r16
    3c0e:	20 81       	ld	r18, Z
    3c10:	31 81       	ldd	r19, Z+1	; 0x01
    3c12:	21 30       	cpi	r18, 0x01	; 1
    3c14:	31 05       	cpc	r19, r1
    3c16:	71 f0       	breq	.+28     	; 0x3c34 <_ZN4NMEA6decodeEc+0xd4>
    3c18:	24 f4       	brge	.+8      	; 0x3c22 <_ZN4NMEA6decodeEc+0xc2>
    3c1a:	23 2b       	or	r18, r19
    3c1c:	09 f4       	brne	.+2      	; 0x3c20 <_ZN4NMEA6decodeEc+0xc0>
    3c1e:	8d c2       	rjmp	.+1306   	; 0x413a <_ZN4NMEA6decodeEc+0x5da>
    3c20:	88 c2       	rjmp	.+1296   	; 0x4132 <_ZN4NMEA6decodeEc+0x5d2>
    3c22:	22 30       	cpi	r18, 0x02	; 2
    3c24:	31 05       	cpc	r19, r1
    3c26:	09 f4       	brne	.+2      	; 0x3c2a <_ZN4NMEA6decodeEc+0xca>
    3c28:	8b c0       	rjmp	.+278    	; 0x3d40 <_ZN4NMEA6decodeEc+0x1e0>
    3c2a:	23 30       	cpi	r18, 0x03	; 3
    3c2c:	31 05       	cpc	r19, r1
    3c2e:	09 f0       	breq	.+2      	; 0x3c32 <_ZN4NMEA6decodeEc+0xd2>
    3c30:	80 c2       	rjmp	.+1280   	; 0x4132 <_ZN4NMEA6decodeEc+0x5d2>
    3c32:	cf c0       	rjmp	.+414    	; 0x3dd2 <_ZN4NMEA6decodeEc+0x272>
  case 0:
    // waiting for '$', do nothing
    break;
  case 1:
  	// decode chars after '$' and before '*' found
    if (n < 7) {
    3c34:	87 30       	cpi	r24, 0x07	; 7
    3c36:	91 05       	cpc	r25, r1
    3c38:	7c f4       	brge	.+30     	; 0x3c58 <_ZN4NMEA6decodeEc+0xf8>
    	// see if first seven chars match "$GPRMC,"
    	if (c == _GPRMC_TERM[n]) { _gprmc_tag++; }
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	e4 5f       	subi	r30, 0xF4	; 244
    3c3e:	fd 4f       	sbci	r31, 0xFD	; 253
    3c40:	20 81       	ld	r18, Z
    3c42:	62 13       	cpse	r22, r18
    3c44:	09 c0       	rjmp	.+18     	; 0x3c58 <_ZN4NMEA6decodeEc+0xf8>
    3c46:	fe 01       	movw	r30, r28
    3c48:	e3 5a       	subi	r30, 0xA3	; 163
    3c4a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c4c:	20 81       	ld	r18, Z
    3c4e:	31 81       	ldd	r19, Z+1	; 0x01
    3c50:	2f 5f       	subi	r18, 0xFF	; 255
    3c52:	3f 4f       	sbci	r19, 0xFF	; 255
    3c54:	31 83       	std	Z+1, r19	; 0x01
    3c56:	20 83       	st	Z, r18
    }
    // add received char to sentence
    _sentence[n++] = c;
    3c58:	fe 01       	movw	r30, r28
    3c5a:	e8 0f       	add	r30, r24
    3c5c:	f9 1f       	adc	r31, r25
    3c5e:	e5 54       	subi	r30, 0x45	; 69
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	60 83       	st	Z, r22
    3c64:	fe 01       	movw	r30, r28
    3c66:	e5 5a       	subi	r30, 0xA5	; 165
    3c68:	fe 4f       	sbci	r31, 0xFE	; 254
    3c6a:	01 96       	adiw	r24, 0x01	; 1
    3c6c:	91 83       	std	Z+1, r25	; 0x01
    3c6e:	80 83       	st	Z, r24
    3c70:	8e 01       	movw	r16, r28
    3c72:	07 54       	subi	r16, 0x47	; 71
    3c74:	1f 4f       	sbci	r17, 0xFF	; 255
    3c76:	fe 01       	movw	r30, r28
    3c78:	ed 59       	subi	r30, 0x9D	; 157
    3c7a:	fe 4f       	sbci	r31, 0xFE	; 254
    switch (c) {
    3c7c:	6a 32       	cpi	r22, 0x2A	; 42
    3c7e:	19 f1       	breq	.+70     	; 0x3cc6 <_ZN4NMEA6decodeEc+0x166>
    3c80:	6c 32       	cpi	r22, 0x2C	; 44
    3c82:	e1 f5       	brne	.+120    	; 0x3cfc <_ZN4NMEA6decodeEc+0x19c>
    case ',':
    	// ',' delimits the individual terms
      (_term[_terms++])[_nt] = 0;
    3c84:	d8 01       	movw	r26, r16
    3c86:	2d 91       	ld	r18, X+
    3c88:	3c 91       	ld	r19, X
    3c8a:	c9 01       	movw	r24, r18
    3c8c:	88 0f       	add	r24, r24
    3c8e:	99 1f       	adc	r25, r25
    3c90:	8c 0f       	add	r24, r28
    3c92:	9d 1f       	adc	r25, r29
    3c94:	81 5e       	subi	r24, 0xE1	; 225
    3c96:	9e 4f       	sbci	r25, 0xFE	; 254
    3c98:	dc 01       	movw	r26, r24
    3c9a:	8d 91       	ld	r24, X+
    3c9c:	9c 91       	ld	r25, X
    3c9e:	40 81       	ld	r20, Z
    3ca0:	51 81       	ldd	r21, Z+1	; 0x01
    3ca2:	84 0f       	add	r24, r20
    3ca4:	95 1f       	adc	r25, r21
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	1c 92       	st	X, r1
    3caa:	2f 5f       	subi	r18, 0xFF	; 255
    3cac:	3f 4f       	sbci	r19, 0xFF	; 255
    3cae:	d8 01       	movw	r26, r16
    3cb0:	2d 93       	st	X+, r18
    3cb2:	3c 93       	st	X, r19
      _nt = 0;
    3cb4:	11 82       	std	Z+1, r1	; 0x01
    3cb6:	10 82       	st	Z, r1
      _parity = _parity ^ c;
    3cb8:	cf 59       	subi	r28, 0x9F	; 159
    3cba:	de 4f       	sbci	r29, 0xFE	; 254
    3cbc:	88 81       	ld	r24, Y
    3cbe:	99 81       	ldd	r25, Y+1	; 0x01
    3cc0:	bc e2       	ldi	r27, 0x2C	; 44
    3cc2:	8b 27       	eor	r24, r27
    3cc4:	83 c0       	rjmp	.+262    	; 0x3dcc <_ZN4NMEA6decodeEc+0x26c>
      break;
    case '*':
    	// '*' delimits term and precedes checksum term
      (_term[_terms++])[_nt] = 0;
    3cc6:	d8 01       	movw	r26, r16
    3cc8:	2d 91       	ld	r18, X+
    3cca:	3c 91       	ld	r19, X
    3ccc:	c9 01       	movw	r24, r18
    3cce:	88 0f       	add	r24, r24
    3cd0:	99 1f       	adc	r25, r25
    3cd2:	8c 0f       	add	r24, r28
    3cd4:	9d 1f       	adc	r25, r29
    3cd6:	81 5e       	subi	r24, 0xE1	; 225
    3cd8:	9e 4f       	sbci	r25, 0xFE	; 254
    3cda:	dc 01       	movw	r26, r24
    3cdc:	8d 91       	ld	r24, X+
    3cde:	9c 91       	ld	r25, X
    3ce0:	40 81       	ld	r20, Z
    3ce2:	51 81       	ldd	r21, Z+1	; 0x01
    3ce4:	84 0f       	add	r24, r20
    3ce6:	95 1f       	adc	r25, r21
    3ce8:	dc 01       	movw	r26, r24
    3cea:	1c 92       	st	X, r1
    3cec:	2f 5f       	subi	r18, 0xFF	; 255
    3cee:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf0:	d8 01       	movw	r26, r16
    3cf2:	2d 93       	st	X+, r18
    3cf4:	3c 93       	st	X, r19
      _nt = 0;
    3cf6:	11 82       	std	Z+1, r1	; 0x01
    3cf8:	10 82       	st	Z, r1
    3cfa:	63 c0       	rjmp	.+198    	; 0x3dc2 <_ZN4NMEA6decodeEc+0x262>
      _state++;
      break;
    default:
    	// all other chars between '$' and '*' are part of a term
      (_term[_terms])[_nt++] = c;
    3cfc:	20 81       	ld	r18, Z
    3cfe:	31 81       	ldd	r19, Z+1	; 0x01
    3d00:	d8 01       	movw	r26, r16
    3d02:	8d 91       	ld	r24, X+
    3d04:	9c 91       	ld	r25, X
    3d06:	88 0f       	add	r24, r24
    3d08:	99 1f       	adc	r25, r25
    3d0a:	8c 0f       	add	r24, r28
    3d0c:	9d 1f       	adc	r25, r29
    3d0e:	dc 01       	movw	r26, r24
    3d10:	a1 5e       	subi	r26, 0xE1	; 225
    3d12:	be 4f       	sbci	r27, 0xFE	; 254
    3d14:	0d 90       	ld	r0, X+
    3d16:	bc 91       	ld	r27, X
    3d18:	a0 2d       	mov	r26, r0
    3d1a:	a2 0f       	add	r26, r18
    3d1c:	b3 1f       	adc	r27, r19
    3d1e:	6c 93       	st	X, r22
    3d20:	2f 5f       	subi	r18, 0xFF	; 255
    3d22:	3f 4f       	sbci	r19, 0xFF	; 255
    3d24:	31 83       	std	Z+1, r19	; 0x01
    3d26:	20 83       	st	Z, r18
      _parity = _parity ^ c;
    3d28:	cf 59       	subi	r28, 0x9F	; 159
    3d2a:	de 4f       	sbci	r29, 0xFE	; 254
    3d2c:	77 27       	eor	r23, r23
    3d2e:	67 fd       	sbrc	r22, 7
    3d30:	70 95       	com	r23
    3d32:	88 81       	ld	r24, Y
    3d34:	99 81       	ldd	r25, Y+1	; 0x01
    3d36:	68 27       	eor	r22, r24
    3d38:	79 27       	eor	r23, r25
    3d3a:	79 83       	std	Y+1, r23	; 0x01
    3d3c:	68 83       	st	Y, r22
    3d3e:	fd c1       	rjmp	.+1018   	; 0x413a <_ZN4NMEA6decodeEc+0x5da>
      break;
    }
    break;
  case 2:
  	// first char following '*' is checksum MSB
    _sentence[n++] = c;
    3d40:	fe 01       	movw	r30, r28
    3d42:	e8 0f       	add	r30, r24
    3d44:	f9 1f       	adc	r31, r25
    3d46:	e5 54       	subi	r30, 0x45	; 69
    3d48:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4a:	60 83       	st	Z, r22
    3d4c:	fe 01       	movw	r30, r28
    3d4e:	e5 5a       	subi	r30, 0xA5	; 165
    3d50:	fe 4f       	sbci	r31, 0xFE	; 254
    3d52:	01 96       	adiw	r24, 0x01	; 1
    3d54:	91 83       	std	Z+1, r25	; 0x01
    3d56:	80 83       	st	Z, r24
    (_term[_terms])[_nt++] = c;
    3d58:	de 01       	movw	r26, r28
    3d5a:	ad 59       	subi	r26, 0x9D	; 157
    3d5c:	be 4f       	sbci	r27, 0xFE	; 254
    3d5e:	2d 91       	ld	r18, X+
    3d60:	3c 91       	ld	r19, X
    3d62:	11 97       	sbiw	r26, 0x01	; 1
    3d64:	fe 01       	movw	r30, r28
    3d66:	e7 54       	subi	r30, 0x47	; 71
    3d68:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6a:	80 81       	ld	r24, Z
    3d6c:	91 81       	ldd	r25, Z+1	; 0x01
    3d6e:	88 0f       	add	r24, r24
    3d70:	99 1f       	adc	r25, r25
    3d72:	8c 0f       	add	r24, r28
    3d74:	9d 1f       	adc	r25, r29
    3d76:	fc 01       	movw	r30, r24
    3d78:	e1 5e       	subi	r30, 0xE1	; 225
    3d7a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d7c:	01 90       	ld	r0, Z+
    3d7e:	f0 81       	ld	r31, Z
    3d80:	e0 2d       	mov	r30, r0
    3d82:	e2 0f       	add	r30, r18
    3d84:	f3 1f       	adc	r31, r19
    3d86:	60 83       	st	Z, r22
    3d88:	2f 5f       	subi	r18, 0xFF	; 255
    3d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8c:	2d 93       	st	X+, r18
    3d8e:	3c 93       	st	X, r19
    _parity = _parity - (16 * _dehex(c));		// replace with bitshift?
    3d90:	fe 01       	movw	r30, r28
    3d92:	ef 59       	subi	r30, 0x9F	; 159
    3d94:	fe 4f       	sbci	r31, 0xFE	; 254
    3d96:	40 81       	ld	r20, Z
    3d98:	51 81       	ldd	r21, Z+1	; 0x01
    3d9a:	86 2f       	mov	r24, r22
    3d9c:	99 27       	eor	r25, r25
    3d9e:	87 fd       	sbrc	r24, 7
    3da0:	90 95       	com	r25
}

int NMEA::_dehex(char a) {
	// returns base-16 value of chars '0'-'9' and 'A'-'F';
	// does not trap invalid chars!
  if (int(a) >= 65) {
    3da2:	61 34       	cpi	r22, 0x41	; 65
    3da4:	14 f0       	brlt	.+4      	; 0x3daa <_ZN4NMEA6decodeEc+0x24a>
    return int(a)-55;
    3da6:	c7 97       	sbiw	r24, 0x37	; 55
    3da8:	01 c0       	rjmp	.+2      	; 0x3dac <_ZN4NMEA6decodeEc+0x24c>
  }
  else {
    return int(a)-48;
    3daa:	c0 97       	sbiw	r24, 0x30	; 48
    break;
  case 2:
  	// first char following '*' is checksum MSB
    _sentence[n++] = c;
    (_term[_terms])[_nt++] = c;
    _parity = _parity - (16 * _dehex(c));		// replace with bitshift?
    3dac:	9c 01       	movw	r18, r24
    3dae:	a4 e0       	ldi	r26, 0x04	; 4
    3db0:	22 0f       	add	r18, r18
    3db2:	33 1f       	adc	r19, r19
    3db4:	aa 95       	dec	r26
    3db6:	e1 f7       	brne	.-8      	; 0x3db0 <_ZN4NMEA6decodeEc+0x250>
    3db8:	ca 01       	movw	r24, r20
    3dba:	82 1b       	sub	r24, r18
    3dbc:	93 0b       	sbc	r25, r19
    3dbe:	91 83       	std	Z+1, r25	; 0x01
    3dc0:	80 83       	st	Z, r24
    _state++;
    3dc2:	c1 5a       	subi	r28, 0xA1	; 161
    3dc4:	de 4f       	sbci	r29, 0xFE	; 254
    3dc6:	88 81       	ld	r24, Y
    3dc8:	99 81       	ldd	r25, Y+1	; 0x01
    3dca:	01 96       	adiw	r24, 0x01	; 1
    3dcc:	99 83       	std	Y+1, r25	; 0x01
    3dce:	88 83       	st	Y, r24
    3dd0:	b4 c1       	rjmp	.+872    	; 0x413a <_ZN4NMEA6decodeEc+0x5da>
    break;
  case 3:
  	// second char after '*' completes the checksum (LSB)
    _sentence[n++] = c;
    3dd2:	9e 01       	movw	r18, r28
    3dd4:	28 0f       	add	r18, r24
    3dd6:	39 1f       	adc	r19, r25
    3dd8:	d9 01       	movw	r26, r18
    3dda:	a5 54       	subi	r26, 0x45	; 69
    3ddc:	bf 4f       	sbci	r27, 0xFF	; 255
    3dde:	6c 93       	st	X, r22
    _sentence[n++] = 0;
    3de0:	d9 01       	movw	r26, r18
    3de2:	a4 54       	subi	r26, 0x44	; 68
    3de4:	bf 4f       	sbci	r27, 0xFF	; 255
    3de6:	1c 92       	st	X, r1
    3de8:	de 01       	movw	r26, r28
    3dea:	a5 5a       	subi	r26, 0xA5	; 165
    3dec:	be 4f       	sbci	r27, 0xFE	; 254
    3dee:	02 96       	adiw	r24, 0x02	; 2
    3df0:	8d 93       	st	X+, r24
    3df2:	9c 93       	st	X, r25
    (_term[_terms])[_nt++] = c;
    3df4:	9e 01       	movw	r18, r28
    3df6:	2d 59       	subi	r18, 0x9D	; 157
    3df8:	3e 4f       	sbci	r19, 0xFE	; 254
    3dfa:	f9 01       	movw	r30, r18
    3dfc:	40 81       	ld	r20, Z
    3dfe:	51 81       	ldd	r21, Z+1	; 0x01
    3e00:	de 01       	movw	r26, r28
    3e02:	a7 54       	subi	r26, 0x47	; 71
    3e04:	bf 4f       	sbci	r27, 0xFF	; 255
    3e06:	8d 91       	ld	r24, X+
    3e08:	9c 91       	ld	r25, X
    3e0a:	11 97       	sbiw	r26, 0x01	; 1
    3e0c:	88 0f       	add	r24, r24
    3e0e:	99 1f       	adc	r25, r25
    3e10:	8c 0f       	add	r24, r28
    3e12:	9d 1f       	adc	r25, r29
    3e14:	81 5e       	subi	r24, 0xE1	; 225
    3e16:	9e 4f       	sbci	r25, 0xFE	; 254
    3e18:	fc 01       	movw	r30, r24
    3e1a:	80 81       	ld	r24, Z
    3e1c:	91 81       	ldd	r25, Z+1	; 0x01
    3e1e:	84 0f       	add	r24, r20
    3e20:	95 1f       	adc	r25, r21
    3e22:	fc 01       	movw	r30, r24
    3e24:	60 83       	st	Z, r22
    3e26:	4f 5f       	subi	r20, 0xFF	; 255
    3e28:	5f 4f       	sbci	r21, 0xFF	; 255
    3e2a:	f9 01       	movw	r30, r18
    3e2c:	51 83       	std	Z+1, r21	; 0x01
    3e2e:	40 83       	st	Z, r20
    (_term[_terms++])[_nt] = 0;
    3e30:	2d 91       	ld	r18, X+
    3e32:	3c 91       	ld	r19, X
    3e34:	11 97       	sbiw	r26, 0x01	; 1
    3e36:	c9 01       	movw	r24, r18
    3e38:	88 0f       	add	r24, r24
    3e3a:	99 1f       	adc	r25, r25
    3e3c:	8c 0f       	add	r24, r28
    3e3e:	9d 1f       	adc	r25, r29
    3e40:	81 5e       	subi	r24, 0xE1	; 225
    3e42:	9e 4f       	sbci	r25, 0xFE	; 254
    3e44:	fc 01       	movw	r30, r24
    3e46:	80 81       	ld	r24, Z
    3e48:	91 81       	ldd	r25, Z+1	; 0x01
    3e4a:	84 0f       	add	r24, r20
    3e4c:	95 1f       	adc	r25, r21
    3e4e:	fc 01       	movw	r30, r24
    3e50:	10 82       	st	Z, r1
    3e52:	2f 5f       	subi	r18, 0xFF	; 255
    3e54:	3f 4f       	sbci	r19, 0xFF	; 255
    3e56:	2d 93       	st	X+, r18
    3e58:	3c 93       	st	X, r19
    _state = 0;
    3e5a:	d8 01       	movw	r26, r16
    3e5c:	1d 92       	st	X+, r1
    3e5e:	1c 92       	st	X, r1
    _parity = _parity - _dehex(c);
    3e60:	fe 01       	movw	r30, r28
    3e62:	ef 59       	subi	r30, 0x9F	; 159
    3e64:	fe 4f       	sbci	r31, 0xFE	; 254
    3e66:	80 81       	ld	r24, Z
    3e68:	91 81       	ldd	r25, Z+1	; 0x01
    3e6a:	26 2f       	mov	r18, r22
    3e6c:	33 27       	eor	r19, r19
    3e6e:	27 fd       	sbrc	r18, 7
    3e70:	30 95       	com	r19
}

int NMEA::_dehex(char a) {
	// returns base-16 value of chars '0'-'9' and 'A'-'F';
	// does not trap invalid chars!
  if (int(a) >= 65) {
    3e72:	61 34       	cpi	r22, 0x41	; 65
    3e74:	1c f0       	brlt	.+6      	; 0x3e7c <_ZN4NMEA6decodeEc+0x31c>
    return int(a)-55;
    3e76:	27 53       	subi	r18, 0x37	; 55
    3e78:	31 09       	sbc	r19, r1
    3e7a:	02 c0       	rjmp	.+4      	; 0x3e80 <_ZN4NMEA6decodeEc+0x320>
  }
  else {
    return int(a)-48;
    3e7c:	20 53       	subi	r18, 0x30	; 48
    3e7e:	31 09       	sbc	r19, r1
    _sentence[n++] = c;
    _sentence[n++] = 0;
    (_term[_terms])[_nt++] = c;
    (_term[_terms++])[_nt] = 0;
    _state = 0;
    _parity = _parity - _dehex(c);
    3e80:	82 1b       	sub	r24, r18
    3e82:	93 0b       	sbc	r25, r19
    3e84:	91 83       	std	Z+1, r25	; 0x01
    3e86:	80 83       	st	Z, r24
    // when parity is zero, checksum was correct!
    if (_parity == 0) {
    3e88:	89 2b       	or	r24, r25
    3e8a:	09 f0       	breq	.+2      	; 0x3e8e <_ZN4NMEA6decodeEc+0x32e>
    3e8c:	56 c1       	rjmp	.+684    	; 0x413a <_ZN4NMEA6decodeEc+0x5da>
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
    3e8e:	88 81       	ld	r24, Y
    3e90:	99 81       	ldd	r25, Y+1	; 0x01
    3e92:	89 2b       	or	r24, r25
    3e94:	39 f4       	brne	.+14     	; 0x3ea4 <_ZN4NMEA6decodeEc+0x344>
    3e96:	fe 01       	movw	r30, r28
    3e98:	e5 5a       	subi	r30, 0xA5	; 165
    3e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e9c:	20 81       	ld	r18, Z
    3e9e:	31 81       	ldd	r19, Z+1	; 0x01
    3ea0:	c9 01       	movw	r24, r18
    3ea2:	10 c0       	rjmp	.+32     	; 0x3ec4 <_ZN4NMEA6decodeEc+0x364>
    3ea4:	fe 01       	movw	r30, r28
    3ea6:	e3 5a       	subi	r30, 0xA3	; 163
    3ea8:	fe 4f       	sbci	r31, 0xFE	; 254
    3eaa:	80 81       	ld	r24, Z
    3eac:	91 81       	ldd	r25, Z+1	; 0x01
    3eae:	06 97       	sbiw	r24, 0x06	; 6
    3eb0:	91 f3       	breq	.-28     	; 0x3e96 <_ZN4NMEA6decodeEc+0x336>
    3eb2:	43 c1       	rjmp	.+646    	; 0x413a <_ZN4NMEA6decodeEc+0x5da>

//
// public methods
//

int NMEA::decode(char c) {
    3eb4:	fe 01       	movw	r30, r28
    3eb6:	e8 0f       	add	r30, r24
    3eb8:	f9 1f       	adc	r31, r25
    3eba:	df 01       	movw	r26, r30
    3ebc:	a5 54       	subi	r26, 0x45	; 69
    3ebe:	bf 4f       	sbci	r27, 0xFF	; 255
    // when parity is zero, checksum was correct!
    if (_parity == 0) {
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
    3ec0:	4c 91       	ld	r20, X
    3ec2:	47 8b       	std	Z+23, r20	; 0x17
    3ec4:	01 97       	sbiw	r24, 0x01	; 1
    3ec6:	97 ff       	sbrs	r25, 7
    3ec8:	f5 cf       	rjmp	.-22     	; 0x3eb4 <_ZN4NMEA6decodeEc+0x354>

//
// public methods
//

int NMEA::decode(char c) {
    3eca:	a9 01       	movw	r20, r18
    3ecc:	41 50       	subi	r20, 0x01	; 1
    3ece:	51 09       	sbc	r21, r1
    3ed0:	c9 01       	movw	r24, r18
    3ed2:	37 ff       	sbrs	r19, 7
    3ed4:	02 c0       	rjmp	.+4      	; 0x3eda <_ZN4NMEA6decodeEc+0x37a>
    3ed6:	80 e0       	ldi	r24, 0x00	; 0
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	fe 01       	movw	r30, r28
    3edc:	e5 5a       	subi	r30, 0xA5	; 165
    3ede:	fe 4f       	sbci	r31, 0xFE	; 254
    3ee0:	9a 01       	movw	r18, r20
    3ee2:	28 1b       	sub	r18, r24
    3ee4:	39 0b       	sbc	r19, r25
    3ee6:	31 83       	std	Z+1, r19	; 0x01
    3ee8:	20 83       	st	Z, r18
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    3eea:	7e 01       	movw	r14, r28
    3eec:	37 eb       	ldi	r19, 0xB7	; 183
    3eee:	e3 0e       	add	r14, r19
    3ef0:	f1 1c       	adc	r15, r1
    3ef2:	d7 01       	movw	r26, r14
    3ef4:	1d 92       	st	X+, r1
    3ef6:	1c 92       	st	X, r1
    3ef8:	b7 01       	movw	r22, r14
    3efa:	8e 01       	movw	r16, r28
    3efc:	07 54       	subi	r16, 0x47	; 71
    3efe:	1f 4f       	sbci	r17, 0xFF	; 255
	      	_nt = 0;
    3f00:	de 01       	movw	r26, r28
    3f02:	ad 59       	subi	r26, 0x9D	; 157
    3f04:	be 4f       	sbci	r27, 0xFE	; 254
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    3f06:	31 c0       	rjmp	.+98     	; 0x3f6a <_ZN4NMEA6decodeEc+0x40a>
	      	_nt = 0;
    3f08:	11 96       	adiw	r26, 0x01	; 1
    3f0a:	1c 92       	st	X, r1
    3f0c:	1e 92       	st	-X, r1
	      	while ((_term[f_terms])[_nt]) {
    3f0e:	08 c0       	rjmp	.+16     	; 0x3f20 <_ZN4NMEA6decodeEc+0x3c0>
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
    3f10:	40 83       	st	Z, r20
	        	_nt++;
    3f12:	8d 91       	ld	r24, X+
    3f14:	9c 91       	ld	r25, X
    3f16:	11 97       	sbiw	r26, 0x01	; 1
    3f18:	01 96       	adiw	r24, 0x01	; 1
    3f1a:	11 96       	adiw	r26, 0x01	; 1
    3f1c:	9c 93       	st	X, r25
    3f1e:	8e 93       	st	-X, r24
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
	      	_nt = 0;
	      	while ((_term[f_terms])[_nt]) {
    3f20:	fb 01       	movw	r30, r22
    3f22:	80 81       	ld	r24, Z
    3f24:	91 81       	ldd	r25, Z+1	; 0x01
    3f26:	2d 91       	ld	r18, X+
    3f28:	3c 91       	ld	r19, X
    3f2a:	11 97       	sbiw	r26, 0x01	; 1
    3f2c:	88 0f       	add	r24, r24
    3f2e:	99 1f       	adc	r25, r25
    3f30:	8c 0f       	add	r24, r28
    3f32:	9d 1f       	adc	r25, r29
    3f34:	ac 01       	movw	r20, r24
    3f36:	41 5e       	subi	r20, 0xE1	; 225
    3f38:	5e 4f       	sbci	r21, 0xFE	; 254
    3f3a:	fa 01       	movw	r30, r20
    3f3c:	40 81       	ld	r20, Z
    3f3e:	51 81       	ldd	r21, Z+1	; 0x01
    3f40:	42 0f       	add	r20, r18
    3f42:	53 1f       	adc	r21, r19
    3f44:	fa 01       	movw	r30, r20
    3f46:	40 81       	ld	r20, Z
    3f48:	85 58       	subi	r24, 0x85	; 133
    3f4a:	9f 4f       	sbci	r25, 0xFF	; 255
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
    3f4c:	fc 01       	movw	r30, r24
    3f4e:	80 81       	ld	r24, Z
    3f50:	91 81       	ldd	r25, Z+1	; 0x01
    3f52:	82 0f       	add	r24, r18
    3f54:	93 1f       	adc	r25, r19
    3f56:	fc 01       	movw	r30, r24
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
	      	_nt = 0;
	      	while ((_term[f_terms])[_nt]) {
    3f58:	41 11       	cpse	r20, r1
    3f5a:	da cf       	rjmp	.-76     	; 0x3f10 <_ZN4NMEA6decodeEc+0x3b0>
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
	        	_nt++;
	        }
	        (f_term[f_terms])[_nt] = 0;
    3f5c:	10 82       	st	Z, r1
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    3f5e:	f7 01       	movw	r30, r14
    3f60:	80 81       	ld	r24, Z
    3f62:	91 81       	ldd	r25, Z+1	; 0x01
    3f64:	01 96       	adiw	r24, 0x01	; 1
    3f66:	91 83       	std	Z+1, r25	; 0x01
    3f68:	80 83       	st	Z, r24
    3f6a:	fb 01       	movw	r30, r22
    3f6c:	20 81       	ld	r18, Z
    3f6e:	31 81       	ldd	r19, Z+1	; 0x01
    3f70:	f8 01       	movw	r30, r16
    3f72:	80 81       	ld	r24, Z
    3f74:	91 81       	ldd	r25, Z+1	; 0x01
    3f76:	28 17       	cp	r18, r24
    3f78:	39 07       	cpc	r19, r25
    3f7a:	34 f2       	brlt	.-116    	; 0x3f08 <_ZN4NMEA6decodeEc+0x3a8>
	        	_nt++;
	        }
	        (f_term[f_terms])[_nt] = 0;
	      }
	      // when sentence is of datatype GPRMC
	      if (_gprmc_tag == 6) {
    3f7c:	fe 01       	movw	r30, r28
    3f7e:	e3 5a       	subi	r30, 0xA3	; 163
    3f80:	fe 4f       	sbci	r31, 0xFE	; 254
    3f82:	80 81       	ld	r24, Z
    3f84:	91 81       	ldd	r25, Z+1	; 0x01
    3f86:	06 97       	sbiw	r24, 0x06	; 6
    3f88:	09 f0       	breq	.+2      	; 0x3f8c <_ZN4NMEA6decodeEc+0x42c>
    3f8a:	da c0       	rjmp	.+436    	; 0x4140 <_ZN4NMEA6decodeEc+0x5e0>
	      	// store values of relevant GPRMC terms
	      	_gprmc_utc = _decimal(_term[1]);
    3f8c:	fe 01       	movw	r30, r28
    3f8e:	ef 5d       	subi	r30, 0xDF	; 223
    3f90:	fe 4f       	sbci	r31, 0xFE	; 254
    3f92:	60 81       	ld	r22, Z
    3f94:	71 81       	ldd	r23, Z+1	; 0x01
    3f96:	ce 01       	movw	r24, r28
    3f98:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <_ZN4NMEA8_decimalEPc>
    3f9c:	6a 83       	std	Y+2, r22	; 0x02
    3f9e:	7b 83       	std	Y+3, r23	; 0x03
    3fa0:	8c 83       	std	Y+4, r24	; 0x04
    3fa2:	9d 83       	std	Y+5, r25	; 0x05
	      	_gprmc_status = (_term[2])[0];
    3fa4:	fe 01       	movw	r30, r28
    3fa6:	ed 5d       	subi	r30, 0xDD	; 221
    3fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    3faa:	01 90       	ld	r0, Z+
    3fac:	f0 81       	ld	r31, Z
    3fae:	e0 2d       	mov	r30, r0
    3fb0:	80 81       	ld	r24, Z
    3fb2:	8e 83       	std	Y+6, r24	; 0x06
	        // calculate signed degree-decimal value of latitude term
	        _gprmc_lat = _decimal(_term[3]) / 100.0;
    3fb4:	fe 01       	movw	r30, r28
    3fb6:	eb 5d       	subi	r30, 0xDB	; 219
    3fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3fba:	60 81       	ld	r22, Z
    3fbc:	71 81       	ldd	r23, Z+1	; 0x01
    3fbe:	ce 01       	movw	r24, r28
    3fc0:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <_ZN4NMEA8_decimalEPc>
    3fc4:	20 e0       	ldi	r18, 0x00	; 0
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	48 ec       	ldi	r20, 0xC8	; 200
    3fca:	52 e4       	ldi	r21, 0x42	; 66
    3fcc:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__divsf3>
    3fd0:	7b 01       	movw	r14, r22
    3fd2:	8c 01       	movw	r16, r24
	        _degs = floor(_gprmc_lat);
    3fd4:	7f 2d       	mov	r23, r15
    3fd6:	80 2f       	mov	r24, r16
    3fd8:	91 2f       	mov	r25, r17
    3fda:	0e 94 2d 3e 	call	0x7c5a	; 0x7c5a <floor>
    3fde:	4b 01       	movw	r8, r22
    3fe0:	5c 01       	movw	r10, r24
    3fe2:	fe 01       	movw	r30, r28
    3fe4:	eb 59       	subi	r30, 0x9B	; 155
    3fe6:	fe 4f       	sbci	r31, 0xFE	; 254
    3fe8:	60 83       	st	Z, r22
    3fea:	71 83       	std	Z+1, r23	; 0x01
    3fec:	82 83       	std	Z+2, r24	; 0x02
    3fee:	93 83       	std	Z+3, r25	; 0x03
	        _gprmc_lat = (100.0 * (_gprmc_lat - _degs)) / 60.0;
    3ff0:	9b 01       	movw	r18, r22
    3ff2:	ac 01       	movw	r20, r24
    3ff4:	6e 2d       	mov	r22, r14
    3ff6:	7f 2d       	mov	r23, r15
    3ff8:	80 2f       	mov	r24, r16
    3ffa:	91 2f       	mov	r25, r17
    3ffc:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    4000:	20 e0       	ldi	r18, 0x00	; 0
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	48 ec       	ldi	r20, 0xC8	; 200
    4006:	52 e4       	ldi	r21, 0x42	; 66
    4008:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    400c:	20 e0       	ldi	r18, 0x00	; 0
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	40 e7       	ldi	r20, 0x70	; 112
    4012:	52 e4       	ldi	r21, 0x42	; 66
    4014:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__divsf3>
	        _gprmc_lat += _degs;
    4018:	a5 01       	movw	r20, r10
    401a:	94 01       	movw	r18, r8
    401c:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    4020:	9b 01       	movw	r18, r22
    4022:	46 2f       	mov	r20, r22
    4024:	53 2f       	mov	r21, r19
    4026:	68 2f       	mov	r22, r24
    4028:	79 2f       	mov	r23, r25
    402a:	4f 83       	std	Y+7, r20	; 0x07
    402c:	58 87       	std	Y+8, r21	; 0x08
    402e:	69 87       	std	Y+9, r22	; 0x09
    4030:	7a 87       	std	Y+10, r23	; 0x0a
	        // southern hemisphere is negative-valued
	        if ((_term[4])[0] == 'S') {
    4032:	fe 01       	movw	r30, r28
    4034:	e9 5d       	subi	r30, 0xD9	; 217
    4036:	fe 4f       	sbci	r31, 0xFE	; 254
    4038:	01 90       	ld	r0, Z+
    403a:	f0 81       	ld	r31, Z
    403c:	e0 2d       	mov	r30, r0
    403e:	40 81       	ld	r20, Z
    4040:	43 35       	cpi	r20, 0x53	; 83
    4042:	59 f4       	brne	.+22     	; 0x405a <_ZN4NMEA6decodeEc+0x4fa>
	          _gprmc_lat = 0.0 - _gprmc_lat;
    4044:	48 2f       	mov	r20, r24
    4046:	59 2f       	mov	r21, r25
    4048:	60 e0       	ldi	r22, 0x00	; 0
    404a:	70 e0       	ldi	r23, 0x00	; 0
    404c:	cb 01       	movw	r24, r22
    404e:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    4052:	6f 83       	std	Y+7, r22	; 0x07
    4054:	78 87       	std	Y+8, r23	; 0x08
    4056:	89 87       	std	Y+9, r24	; 0x09
    4058:	9a 87       	std	Y+10, r25	; 0x0a
	        }
	        // calculate signed degree-decimal value of longitude term
	        _gprmc_long = _decimal(_term[5]) / 100.0;
    405a:	fe 01       	movw	r30, r28
    405c:	e7 5d       	subi	r30, 0xD7	; 215
    405e:	fe 4f       	sbci	r31, 0xFE	; 254
    4060:	60 81       	ld	r22, Z
    4062:	71 81       	ldd	r23, Z+1	; 0x01
    4064:	ce 01       	movw	r24, r28
    4066:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <_ZN4NMEA8_decimalEPc>
    406a:	20 e0       	ldi	r18, 0x00	; 0
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	48 ec       	ldi	r20, 0xC8	; 200
    4070:	52 e4       	ldi	r21, 0x42	; 66
    4072:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__divsf3>
    4076:	7b 01       	movw	r14, r22
    4078:	8c 01       	movw	r16, r24
	        _degs = floor(_gprmc_long);
    407a:	7f 2d       	mov	r23, r15
    407c:	80 2f       	mov	r24, r16
    407e:	91 2f       	mov	r25, r17
    4080:	0e 94 2d 3e 	call	0x7c5a	; 0x7c5a <floor>
    4084:	4b 01       	movw	r8, r22
    4086:	5c 01       	movw	r10, r24
    4088:	fe 01       	movw	r30, r28
    408a:	eb 59       	subi	r30, 0x9B	; 155
    408c:	fe 4f       	sbci	r31, 0xFE	; 254
    408e:	60 83       	st	Z, r22
    4090:	71 83       	std	Z+1, r23	; 0x01
    4092:	82 83       	std	Z+2, r24	; 0x02
    4094:	93 83       	std	Z+3, r25	; 0x03
	        _gprmc_long = (100.0 * (_gprmc_long - _degs)) / 60.0;
    4096:	9b 01       	movw	r18, r22
    4098:	ac 01       	movw	r20, r24
    409a:	6e 2d       	mov	r22, r14
    409c:	7f 2d       	mov	r23, r15
    409e:	80 2f       	mov	r24, r16
    40a0:	91 2f       	mov	r25, r17
    40a2:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    40a6:	20 e0       	ldi	r18, 0x00	; 0
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	48 ec       	ldi	r20, 0xC8	; 200
    40ac:	52 e4       	ldi	r21, 0x42	; 66
    40ae:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    40b2:	20 e0       	ldi	r18, 0x00	; 0
    40b4:	30 e0       	ldi	r19, 0x00	; 0
    40b6:	40 e7       	ldi	r20, 0x70	; 112
    40b8:	52 e4       	ldi	r21, 0x42	; 66
    40ba:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__divsf3>
	        _gprmc_long += _degs;
    40be:	a5 01       	movw	r20, r10
    40c0:	94 01       	movw	r18, r8
    40c2:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    40c6:	9b 01       	movw	r18, r22
    40c8:	46 2f       	mov	r20, r22
    40ca:	53 2f       	mov	r21, r19
    40cc:	68 2f       	mov	r22, r24
    40ce:	79 2f       	mov	r23, r25
    40d0:	4b 87       	std	Y+11, r20	; 0x0b
    40d2:	5c 87       	std	Y+12, r21	; 0x0c
    40d4:	6d 87       	std	Y+13, r22	; 0x0d
    40d6:	7e 87       	std	Y+14, r23	; 0x0e
	        // western hemisphere is negative-valued
	        if ((_term[6])[0] == 'W') {
    40d8:	fe 01       	movw	r30, r28
    40da:	e5 5d       	subi	r30, 0xD5	; 213
    40dc:	fe 4f       	sbci	r31, 0xFE	; 254
    40de:	01 90       	ld	r0, Z+
    40e0:	f0 81       	ld	r31, Z
    40e2:	e0 2d       	mov	r30, r0
    40e4:	40 81       	ld	r20, Z
    40e6:	47 35       	cpi	r20, 0x57	; 87
    40e8:	59 f4       	brne	.+22     	; 0x4100 <_ZN4NMEA6decodeEc+0x5a0>
	          _gprmc_long = 0.0 - _gprmc_long;
    40ea:	48 2f       	mov	r20, r24
    40ec:	59 2f       	mov	r21, r25
    40ee:	60 e0       	ldi	r22, 0x00	; 0
    40f0:	70 e0       	ldi	r23, 0x00	; 0
    40f2:	cb 01       	movw	r24, r22
    40f4:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    40f8:	6b 87       	std	Y+11, r22	; 0x0b
    40fa:	7c 87       	std	Y+12, r23	; 0x0c
    40fc:	8d 87       	std	Y+13, r24	; 0x0d
    40fe:	9e 87       	std	Y+14, r25	; 0x0e
	        }
	        _gprmc_speed = _decimal(_term[7]);
    4100:	fe 01       	movw	r30, r28
    4102:	e3 5d       	subi	r30, 0xD3	; 211
    4104:	fe 4f       	sbci	r31, 0xFE	; 254
    4106:	60 81       	ld	r22, Z
    4108:	71 81       	ldd	r23, Z+1	; 0x01
    410a:	ce 01       	movw	r24, r28
    410c:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <_ZN4NMEA8_decimalEPc>
    4110:	6f 87       	std	Y+15, r22	; 0x0f
    4112:	78 8b       	std	Y+16, r23	; 0x10
    4114:	89 8b       	std	Y+17, r24	; 0x11
    4116:	9a 8b       	std	Y+18, r25	; 0x12
	        _gprmc_angle = _decimal(_term[8]);
    4118:	fe 01       	movw	r30, r28
    411a:	e1 5d       	subi	r30, 0xD1	; 209
    411c:	fe 4f       	sbci	r31, 0xFE	; 254
    411e:	60 81       	ld	r22, Z
    4120:	71 81       	ldd	r23, Z+1	; 0x01
    4122:	ce 01       	movw	r24, r28
    4124:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <_ZN4NMEA8_decimalEPc>
    4128:	6b 8b       	std	Y+19, r22	; 0x13
    412a:	7c 8b       	std	Y+20, r23	; 0x14
    412c:	8d 8b       	std	Y+21, r24	; 0x15
    412e:	9e 8b       	std	Y+22, r25	; 0x16
    4130:	07 c0       	rjmp	.+14     	; 0x4140 <_ZN4NMEA6decodeEc+0x5e0>
      	return 1;
      }
    }
    break;
  default:
    _state = 0;
    4132:	c1 5a       	subi	r28, 0xA1	; 161
    4134:	de 4f       	sbci	r29, 0xFE	; 254
    4136:	19 82       	std	Y+1, r1	; 0x01
    4138:	18 82       	st	Y, r1
    break;
  }
  return 0;
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	02 c0       	rjmp	.+4      	; 0x4144 <_ZN4NMEA6decodeEc+0x5e4>
	        }
	        _gprmc_speed = _decimal(_term[7]);
	        _gprmc_angle = _decimal(_term[8]);
	      }
      	// sentence accepted!
      	return 1;
    4140:	21 e0       	ldi	r18, 0x01	; 1
    4142:	30 e0       	ldi	r19, 0x00	; 0
  default:
    _state = 0;
    break;
  }
  return 0;
}
    4144:	c9 01       	movw	r24, r18
    4146:	df 91       	pop	r29
    4148:	cf 91       	pop	r28
    414a:	1f 91       	pop	r17
    414c:	0f 91       	pop	r16
    414e:	ff 90       	pop	r15
    4150:	ef 90       	pop	r14
    4152:	bf 90       	pop	r11
    4154:	af 90       	pop	r10
    4156:	9f 90       	pop	r9
    4158:	8f 90       	pop	r8
    415a:	08 95       	ret

0000415c <_ZN11FlexiTimer23setEmdPFvvE>:
/**
 * @param resolution
 *   0.001 implies a 1 ms (1/1000s = 0.001s = 1ms) resolution. Therefore,
 *   0.0005 implies a 0.5 ms (1/2000s) resolution. And so on.
 */
void FlexiTimer2::set(unsigned long units, double resolution, void (*f)()) {
    415c:	cf 92       	push	r12
    415e:	df 92       	push	r13
    4160:	ef 92       	push	r14
    4162:	ff 92       	push	r15
    4164:	0f 93       	push	r16
    4166:	1f 93       	push	r17
    4168:	6b 01       	movw	r12, r22
    416a:	7c 01       	movw	r14, r24
    416c:	ca 01       	movw	r24, r20
    416e:	b9 01       	movw	r22, r18
	float prescaler = 0.0;
	
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TIMSK2 &= ~(1<<TOIE2);
    4170:	20 91 70 00 	lds	r18, 0x0070
    4174:	2e 7f       	andi	r18, 0xFE	; 254
    4176:	20 93 70 00 	sts	0x0070, r18
	TCCR2A &= ~((1<<WGM21) | (1<<WGM20));
    417a:	20 91 b0 00 	lds	r18, 0x00B0
    417e:	2c 7f       	andi	r18, 0xFC	; 252
    4180:	20 93 b0 00 	sts	0x00B0, r18
	TCCR2B &= ~(1<<WGM22);
    4184:	20 91 b1 00 	lds	r18, 0x00B1
    4188:	27 7f       	andi	r18, 0xF7	; 247
    418a:	20 93 b1 00 	sts	0x00B1, r18
	ASSR &= ~(1<<AS2);
    418e:	20 91 b6 00 	lds	r18, 0x00B6
    4192:	2f 7d       	andi	r18, 0xDF	; 223
    4194:	20 93 b6 00 	sts	0x00B6, r18
	TIMSK2 &= ~(1<<OCIE2A);
    4198:	20 91 70 00 	lds	r18, 0x0070
    419c:	2d 7f       	andi	r18, 0xFD	; 253
    419e:	20 93 70 00 	sts	0x0070, r18
	
	if ((F_CPU >= 1000000UL) && (F_CPU <= 16000000UL)) {	// prescaler set to 64
		TCCR2B |= (1<<CS22);
    41a2:	20 91 b1 00 	lds	r18, 0x00B1
    41a6:	24 60       	ori	r18, 0x04	; 4
    41a8:	20 93 b1 00 	sts	0x00B1, r18
		TCCR2B &= ~((1<<CS21) | (1<<CS20));
    41ac:	20 91 b1 00 	lds	r18, 0x00B1
    41b0:	2c 7f       	andi	r18, 0xFC	; 252
    41b2:	20 93 b1 00 	sts	0x00B1, r18
		TCCR2 &= ~((1<<CS21) | (1<<CS20));
		prescaler = 256.0;
	}
#endif
	
	tcnt2 = 256 - (int)((float)F_CPU * resolution / prescaler);
    41b6:	20 e0       	ldi	r18, 0x00	; 0
    41b8:	34 e2       	ldi	r19, 0x24	; 36
    41ba:	44 e7       	ldi	r20, 0x74	; 116
    41bc:	5b e4       	ldi	r21, 0x4B	; 75
    41be:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    41c2:	20 e0       	ldi	r18, 0x00	; 0
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	40 e8       	ldi	r20, 0x80	; 128
    41c8:	5c e3       	ldi	r21, 0x3C	; 60
    41ca:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    41ce:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <__fixsfsi>
    41d2:	80 e0       	ldi	r24, 0x00	; 0
    41d4:	91 e0       	ldi	r25, 0x01	; 1
    41d6:	86 1b       	sub	r24, r22
    41d8:	97 0b       	sbc	r25, r23
    41da:	90 93 43 08 	sts	0x0843, r25
    41de:	80 93 42 08 	sts	0x0842, r24
	
	if (units == 0)
    41e2:	c1 14       	cp	r12, r1
    41e4:	d1 04       	cpc	r13, r1
    41e6:	e1 04       	cpc	r14, r1
    41e8:	f1 04       	cpc	r15, r1
    41ea:	69 f4       	brne	.+26     	; 0x4206 <_ZN11FlexiTimer23setEmdPFvvE+0xaa>
		time_units = 1;
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	a0 e0       	ldi	r26, 0x00	; 0
    41f2:	b0 e0       	ldi	r27, 0x00	; 0
    41f4:	80 93 4b 08 	sts	0x084B, r24
    41f8:	90 93 4c 08 	sts	0x084C, r25
    41fc:	a0 93 4d 08 	sts	0x084D, r26
    4200:	b0 93 4e 08 	sts	0x084E, r27
    4204:	08 c0       	rjmp	.+16     	; 0x4216 <_ZN11FlexiTimer23setEmdPFvvE+0xba>
	else
		time_units = units;
    4206:	c0 92 4b 08 	sts	0x084B, r12
    420a:	d0 92 4c 08 	sts	0x084C, r13
    420e:	e0 92 4d 08 	sts	0x084D, r14
    4212:	f0 92 4e 08 	sts	0x084E, r15
		
	func = f;
    4216:	10 93 4a 08 	sts	0x084A, r17
    421a:	00 93 49 08 	sts	0x0849, r16
}
    421e:	1f 91       	pop	r17
    4220:	0f 91       	pop	r16
    4222:	ff 90       	pop	r15
    4224:	ef 90       	pop	r14
    4226:	df 90       	pop	r13
    4228:	cf 90       	pop	r12
    422a:	08 95       	ret

0000422c <_ZN11FlexiTimer23setEmPFvvE>:
void (*FlexiTimer2::func)();
volatile unsigned long FlexiTimer2::count;
volatile char FlexiTimer2::overflowing;
volatile unsigned int FlexiTimer2::tcnt2;

void FlexiTimer2::set(unsigned long ms, void (*f)()) {
    422c:	0f 93       	push	r16
    422e:	1f 93       	push	r17
    FlexiTimer2::set(ms, 0.001, f);
    4230:	8a 01       	movw	r16, r20
    4232:	2f e6       	ldi	r18, 0x6F	; 111
    4234:	32 e1       	ldi	r19, 0x12	; 18
    4236:	43 e8       	ldi	r20, 0x83	; 131
    4238:	5a e3       	ldi	r21, 0x3A	; 58
    423a:	0e 94 ae 20 	call	0x415c	; 0x415c <_ZN11FlexiTimer23setEmdPFvvE>
}
    423e:	1f 91       	pop	r17
    4240:	0f 91       	pop	r16
    4242:	08 95       	ret

00004244 <_ZN11FlexiTimer25startEv>:
		
	func = f;
}

void FlexiTimer2::start() {
	count = 0;
    4244:	10 92 45 08 	sts	0x0845, r1
    4248:	10 92 46 08 	sts	0x0846, r1
    424c:	10 92 47 08 	sts	0x0847, r1
    4250:	10 92 48 08 	sts	0x0848, r1
	overflowing = 0;
    4254:	10 92 44 08 	sts	0x0844, r1
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TCNT2 = tcnt2;
    4258:	80 91 42 08 	lds	r24, 0x0842
    425c:	90 91 43 08 	lds	r25, 0x0843
    4260:	80 93 b2 00 	sts	0x00B2, r24
	TIMSK2 |= (1<<TOIE2);
    4264:	e0 e7       	ldi	r30, 0x70	; 112
    4266:	f0 e0       	ldi	r31, 0x00	; 0
    4268:	80 81       	ld	r24, Z
    426a:	81 60       	ori	r24, 0x01	; 1
    426c:	80 83       	st	Z, r24
    426e:	08 95       	ret

00004270 <_ZN11FlexiTimer29_overflowEv>:
	TIMSK &= ~(1<<TOIE2);
#endif
}

void FlexiTimer2::_overflow() {
	count += 1;
    4270:	80 91 45 08 	lds	r24, 0x0845
    4274:	90 91 46 08 	lds	r25, 0x0846
    4278:	a0 91 47 08 	lds	r26, 0x0847
    427c:	b0 91 48 08 	lds	r27, 0x0848
    4280:	01 96       	adiw	r24, 0x01	; 1
    4282:	a1 1d       	adc	r26, r1
    4284:	b1 1d       	adc	r27, r1
    4286:	80 93 45 08 	sts	0x0845, r24
    428a:	90 93 46 08 	sts	0x0846, r25
    428e:	a0 93 47 08 	sts	0x0847, r26
    4292:	b0 93 48 08 	sts	0x0848, r27
	
	if (count >= time_units && !overflowing) {
    4296:	40 91 45 08 	lds	r20, 0x0845
    429a:	50 91 46 08 	lds	r21, 0x0846
    429e:	60 91 47 08 	lds	r22, 0x0847
    42a2:	70 91 48 08 	lds	r23, 0x0848
    42a6:	80 91 4b 08 	lds	r24, 0x084B
    42aa:	90 91 4c 08 	lds	r25, 0x084C
    42ae:	a0 91 4d 08 	lds	r26, 0x084D
    42b2:	b0 91 4e 08 	lds	r27, 0x084E
    42b6:	48 17       	cp	r20, r24
    42b8:	59 07       	cpc	r21, r25
    42ba:	6a 07       	cpc	r22, r26
    42bc:	7b 07       	cpc	r23, r27
    42be:	b0 f0       	brcs	.+44     	; 0x42ec <_ZN11FlexiTimer29_overflowEv+0x7c>
    42c0:	80 91 44 08 	lds	r24, 0x0844
    42c4:	81 11       	cpse	r24, r1
    42c6:	12 c0       	rjmp	.+36     	; 0x42ec <_ZN11FlexiTimer29_overflowEv+0x7c>
		overflowing = 1;
    42c8:	81 e0       	ldi	r24, 0x01	; 1
    42ca:	80 93 44 08 	sts	0x0844, r24
		count = 0;
    42ce:	10 92 45 08 	sts	0x0845, r1
    42d2:	10 92 46 08 	sts	0x0846, r1
    42d6:	10 92 47 08 	sts	0x0847, r1
    42da:	10 92 48 08 	sts	0x0848, r1
		(*func)();
    42de:	e0 91 49 08 	lds	r30, 0x0849
    42e2:	f0 91 4a 08 	lds	r31, 0x084A
    42e6:	09 95       	icall
		overflowing = 0;
    42e8:	10 92 44 08 	sts	0x0844, r1
    42ec:	08 95       	ret

000042ee <__vector_15>:
	}
}

ISR(TIMER2_OVF_vect) {
    42ee:	1f 92       	push	r1
    42f0:	0f 92       	push	r0
    42f2:	0f b6       	in	r0, 0x3f	; 63
    42f4:	0f 92       	push	r0
    42f6:	11 24       	eor	r1, r1
    42f8:	0b b6       	in	r0, 0x3b	; 59
    42fa:	0f 92       	push	r0
    42fc:	1b be       	out	0x3b, r1	; 59
    42fe:	2f 93       	push	r18
    4300:	3f 93       	push	r19
    4302:	4f 93       	push	r20
    4304:	5f 93       	push	r21
    4306:	6f 93       	push	r22
    4308:	7f 93       	push	r23
    430a:	8f 93       	push	r24
    430c:	9f 93       	push	r25
    430e:	af 93       	push	r26
    4310:	bf 93       	push	r27
    4312:	ef 93       	push	r30
    4314:	ff 93       	push	r31
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TCNT2 = FlexiTimer2::tcnt2;
    4316:	80 91 42 08 	lds	r24, 0x0842
    431a:	90 91 43 08 	lds	r25, 0x0843
    431e:	80 93 b2 00 	sts	0x00B2, r24
#elif defined (__AVR_ATmega128__)
	TCNT2 = FlexiTimer2::tcnt2;
#elif defined (__AVR_ATmega8__)
	TCNT2 = FlexiTimer2::tcnt2;
#endif
	FlexiTimer2::_overflow();
    4322:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN11FlexiTimer29_overflowEv>
}
    4326:	ff 91       	pop	r31
    4328:	ef 91       	pop	r30
    432a:	bf 91       	pop	r27
    432c:	af 91       	pop	r26
    432e:	9f 91       	pop	r25
    4330:	8f 91       	pop	r24
    4332:	7f 91       	pop	r23
    4334:	6f 91       	pop	r22
    4336:	5f 91       	pop	r21
    4338:	4f 91       	pop	r20
    433a:	3f 91       	pop	r19
    433c:	2f 91       	pop	r18
    433e:	0f 90       	pop	r0
    4340:	0b be       	out	0x3b, r0	; 59
    4342:	0f 90       	pop	r0
    4344:	0f be       	out	0x3f, r0	; 63
    4346:	0f 90       	pop	r0
    4348:	1f 90       	pop	r1
    434a:	18 95       	reti

0000434c <_ZN12FirmataClass11systemResetEv>:



// resets the system state upon a SYSTEM_RESET message from the host software
void FirmataClass::systemReset(void)
{
    434c:	fc 01       	movw	r30, r24
  byte i;

  waitForData = 0; // this flag says the next serial input will be data
    434e:	15 82       	std	Z+5, r1	; 0x05
  executeMultiByteCommand = 0; // execute this after getting multi-byte data
    4350:	16 82       	std	Z+6, r1	; 0x06
  multiByteChannel = 0; // channel data for multiByteCommands
    4352:	17 82       	std	Z+7, r1	; 0x07
    4354:	80 e0       	ldi	r24, 0x00	; 0
    4356:	90 e0       	ldi	r25, 0x00	; 0
//******************************************************************************



// resets the system state upon a SYSTEM_RESET message from the host software
void FirmataClass::systemReset(void)
    4358:	df 01       	movw	r26, r30
    435a:	a8 0f       	add	r26, r24
    435c:	b9 1f       	adc	r27, r25
  executeMultiByteCommand = 0; // execute this after getting multi-byte data
  multiByteChannel = 0; // channel data for multiByteCommands


  for(i=0; i<MAX_DATA_BYTES; i++) {
    storedInputData[i] = 0;
    435e:	18 96       	adiw	r26, 0x08	; 8
    4360:	1c 92       	st	X, r1
    4362:	01 96       	adiw	r24, 0x01	; 1
  waitForData = 0; // this flag says the next serial input will be data
  executeMultiByteCommand = 0; // execute this after getting multi-byte data
  multiByteChannel = 0; // channel data for multiByteCommands


  for(i=0; i<MAX_DATA_BYTES; i++) {
    4364:	80 32       	cpi	r24, 0x20	; 32
    4366:	91 05       	cpc	r25, r1
    4368:	b9 f7       	brne	.-18     	; 0x4358 <_ZN12FirmataClass11systemResetEv+0xc>
    storedInputData[i] = 0;
  }

  parsingSysex = false;
    436a:	10 a6       	std	Z+40, r1	; 0x28
  sysexBytesRead = 0;
    436c:	12 a6       	std	Z+42, r1	; 0x2a
    436e:	11 a6       	std	Z+41, r1	; 0x29

  if(currentSystemResetCallback)
    4370:	05 a8       	ldd	r0, Z+53	; 0x35
    4372:	f6 a9       	ldd	r31, Z+54	; 0x36
    4374:	e0 2d       	mov	r30, r0
    4376:	30 97       	sbiw	r30, 0x00	; 0
    4378:	09 f0       	breq	.+2      	; 0x437c <_ZN12FirmataClass11systemResetEv+0x30>
    (*currentSystemResetCallback)();
    437a:	09 94       	ijmp
    437c:	08 95       	ret

0000437e <_GLOBAL__sub_I__ZN12FirmataClass23sendValueAsTwo7bitBytesEi>:

//******************************************************************************
//* Constructors
//******************************************************************************

FirmataClass::FirmataClass(Stream &s) : FirmataSerial(s)
    437e:	88 eb       	ldi	r24, 0xB8	; 184
    4380:	95 e0       	ldi	r25, 0x05	; 5
    4382:	90 93 50 08 	sts	0x0850, r25
    4386:	80 93 4f 08 	sts	0x084F, r24
{
  firmwareVersionCount = 0;
    438a:	10 92 51 08 	sts	0x0851, r1
  systemReset();
    438e:	8f e4       	ldi	r24, 0x4F	; 79
    4390:	98 e0       	ldi	r25, 0x08	; 8
    4392:	0c 94 a6 21 	jmp	0x434c	; 0x434c <_ZN12FirmataClass11systemResetEv>

00004396 <_ZN13AltSoftSerial4readEv>:

int AltSoftSerial::read(void)
{
	uint8_t head, tail, out;

	head = rx_buffer_head;
    4396:	90 91 2e 09 	lds	r25, 0x092E
	tail = rx_buffer_tail;
    439a:	80 91 2d 09 	lds	r24, 0x092D
	if (head == tail) return -1;
    439e:	98 17       	cp	r25, r24
    43a0:	69 f0       	breq	.+26     	; 0x43bc <_ZN13AltSoftSerial4readEv+0x26>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    43a2:	8f 5f       	subi	r24, 0xFF	; 255
    43a4:	80 35       	cpi	r24, 0x50	; 80
    43a6:	08 f0       	brcs	.+2      	; 0x43aa <_ZN13AltSoftSerial4readEv+0x14>
    43a8:	80 e0       	ldi	r24, 0x00	; 0
	out = rx_buffer[tail];
    43aa:	e8 2f       	mov	r30, r24
    43ac:	f0 e0       	ldi	r31, 0x00	; 0
    43ae:	e3 52       	subi	r30, 0x23	; 35
    43b0:	f7 4f       	sbci	r31, 0xF7	; 247
    43b2:	20 81       	ld	r18, Z
	rx_buffer_tail = tail;
    43b4:	80 93 2d 09 	sts	0x092D, r24
	return out;
    43b8:	30 e0       	ldi	r19, 0x00	; 0
    43ba:	02 c0       	rjmp	.+4      	; 0x43c0 <_ZN13AltSoftSerial4readEv+0x2a>
{
	uint8_t head, tail, out;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    43bc:	2f ef       	ldi	r18, 0xFF	; 255
    43be:	3f ef       	ldi	r19, 0xFF	; 255
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	out = rx_buffer[tail];
	rx_buffer_tail = tail;
	return out;
}
    43c0:	c9 01       	movw	r24, r18
    43c2:	08 95       	ret

000043c4 <_ZN13AltSoftSerial4peekEv>:

int AltSoftSerial::peek(void)
{
	uint8_t head, tail;

	head = rx_buffer_head;
    43c4:	80 91 2e 09 	lds	r24, 0x092E
	tail = rx_buffer_tail;
    43c8:	e0 91 2d 09 	lds	r30, 0x092D
	if (head == tail) return -1;
    43cc:	8e 17       	cp	r24, r30
    43ce:	31 f0       	breq	.+12     	; 0x43dc <_ZN13AltSoftSerial4peekEv+0x18>
	return rx_buffer[tail];
    43d0:	f0 e0       	ldi	r31, 0x00	; 0
    43d2:	e3 52       	subi	r30, 0x23	; 35
    43d4:	f7 4f       	sbci	r31, 0xF7	; 247
    43d6:	20 81       	ld	r18, Z
    43d8:	30 e0       	ldi	r19, 0x00	; 0
    43da:	02 c0       	rjmp	.+4      	; 0x43e0 <_ZN13AltSoftSerial4peekEv+0x1c>
{
	uint8_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    43dc:	2f ef       	ldi	r18, 0xFF	; 255
    43de:	3f ef       	ldi	r19, 0xFF	; 255
	return rx_buffer[tail];
}
    43e0:	c9 01       	movw	r24, r18
    43e2:	08 95       	ret

000043e4 <_ZN13AltSoftSerial9availableEv>:

int AltSoftSerial::available(void)
{
	uint8_t head, tail;

	head = rx_buffer_head;
    43e4:	50 91 2e 09 	lds	r21, 0x092E
	tail = rx_buffer_tail;
    43e8:	40 91 2d 09 	lds	r20, 0x092D
    43ec:	25 2f       	mov	r18, r21
    43ee:	30 e0       	ldi	r19, 0x00	; 0
    43f0:	84 2f       	mov	r24, r20
    43f2:	90 e0       	ldi	r25, 0x00	; 0
	if (head >= tail) return head - tail;
    43f4:	54 17       	cp	r21, r20
    43f6:	08 f0       	brcs	.+2      	; 0x43fa <_ZN13AltSoftSerial9availableEv+0x16>
    43f8:	02 c0       	rjmp	.+4      	; 0x43fe <_ZN13AltSoftSerial9availableEv+0x1a>
	return RX_BUFFER_SIZE + head - tail;
    43fa:	20 5b       	subi	r18, 0xB0	; 176
    43fc:	3f 4f       	sbci	r19, 0xFF	; 255
    43fe:	28 1b       	sub	r18, r24
    4400:	39 0b       	sbc	r19, r25
}
    4402:	c9 01       	movw	r24, r18
    4404:	08 95       	ret

00004406 <_ZN13AltSoftSerial4initEm>:
#ifndef INPUT_PULLUP
#define INPUT_PULLUP INPUT
#endif

void AltSoftSerial::init(uint32_t cycles_per_bit)
{
    4406:	9b 01       	movw	r18, r22
    4408:	ac 01       	movw	r20, r24
	if (cycles_per_bit < 7085) {
    440a:	2d 3a       	cpi	r18, 0xAD	; 173
    440c:	8b e1       	ldi	r24, 0x1B	; 27
    440e:	38 07       	cpc	r19, r24
    4410:	41 05       	cpc	r20, r1
    4412:	51 05       	cpc	r21, r1
    4414:	30 f4       	brcc	.+12     	; 0x4422 <_ZN13AltSoftSerial4initEm+0x1c>
		CONFIG_TIMER_NOPRESCALE();
    4416:	10 92 73 00 	sts	0x0073, r1
    441a:	10 92 20 01 	sts	0x0120, r1
    441e:	81 e8       	ldi	r24, 0x81	; 129
    4420:	12 c0       	rjmp	.+36     	; 0x4446 <_ZN13AltSoftSerial4initEm+0x40>
	} else {
		cycles_per_bit /= 8;
    4422:	63 e0       	ldi	r22, 0x03	; 3
    4424:	56 95       	lsr	r21
    4426:	47 95       	ror	r20
    4428:	37 95       	ror	r19
    442a:	27 95       	ror	r18
    442c:	6a 95       	dec	r22
    442e:	d1 f7       	brne	.-12     	; 0x4424 <_ZN13AltSoftSerial4initEm+0x1e>
		if (cycles_per_bit < 7085) {
    4430:	2d 3a       	cpi	r18, 0xAD	; 173
    4432:	8b e1       	ldi	r24, 0x1B	; 27
    4434:	38 07       	cpc	r19, r24
    4436:	41 05       	cpc	r20, r1
    4438:	51 05       	cpc	r21, r1
    443a:	b0 f5       	brcc	.+108    	; 0x44a8 <_ZN13AltSoftSerial4initEm+0xa2>
			CONFIG_TIMER_PRESCALE_8();
    443c:	10 92 73 00 	sts	0x0073, r1
    4440:	10 92 20 01 	sts	0x0120, r1
    4444:	82 e8       	ldi	r24, 0x82	; 130
    4446:	80 93 21 01 	sts	0x0121, r24
		} else {
			return; // minimum 283 baud at 16 MHz clock
		}
	}
	ticks_per_bit = cycles_per_bit;
    444a:	30 93 32 09 	sts	0x0932, r19
    444e:	20 93 31 09 	sts	0x0931, r18
	rx_stop_ticks = cycles_per_bit * 37 / 4;
    4452:	a5 e2       	ldi	r26, 0x25	; 37
    4454:	b0 e0       	ldi	r27, 0x00	; 0
    4456:	0e 94 28 40 	call	0x8050	; 0x8050 <__muluhisi3>
    445a:	22 e0       	ldi	r18, 0x02	; 2
    445c:	96 95       	lsr	r25
    445e:	87 95       	ror	r24
    4460:	77 95       	ror	r23
    4462:	67 95       	ror	r22
    4464:	2a 95       	dec	r18
    4466:	d1 f7       	brne	.-12     	; 0x445c <_ZN13AltSoftSerial4initEm+0x56>
    4468:	70 93 34 09 	sts	0x0934, r23
    446c:	60 93 33 09 	sts	0x0933, r22
	pinMode(INPUT_CAPTURE_PIN, INPUT_PULLUP);
    4470:	62 e0       	ldi	r22, 0x02	; 2
    4472:	80 e3       	ldi	r24, 0x30	; 48
    4474:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	digitalWrite(OUTPUT_COMPARE_A_PIN, HIGH);
    4478:	61 e0       	ldi	r22, 0x01	; 1
    447a:	8e e2       	ldi	r24, 0x2E	; 46
    447c:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <digitalWrite>
	pinMode(OUTPUT_COMPARE_A_PIN, OUTPUT);
    4480:	61 e0       	ldi	r22, 0x01	; 1
    4482:	8e e2       	ldi	r24, 0x2E	; 46
    4484:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	rx_count = 0;
    4488:	10 92 2f 09 	sts	0x092F, r1
	rx_buffer_head = 0;
    448c:	10 92 2e 09 	sts	0x092E, r1
	rx_buffer_tail = 0;
    4490:	10 92 2d 09 	sts	0x092D, r1
	tx_state = 0;
    4494:	10 92 dc 08 	sts	0x08DC, r1
	tx_buffer_head = 0;
    4498:	10 92 db 08 	sts	0x08DB, r1
	tx_buffer_tail = 0;
    449c:	10 92 da 08 	sts	0x08DA, r1
	ENABLE_INT_INPUT_CAPTURE();
    44a0:	80 e2       	ldi	r24, 0x20	; 32
    44a2:	8a bb       	out	0x1a, r24	; 26
    44a4:	80 93 73 00 	sts	0x0073, r24
    44a8:	08 95       	ret

000044aa <_ZN13AltSoftSerial9writeByteEh>:

void AltSoftSerial::writeByte(uint8_t b)
{
	uint8_t intr_state, head;

	head = tx_buffer_head + 1;
    44aa:	90 91 db 08 	lds	r25, 0x08DB
    44ae:	9f 5f       	subi	r25, 0xFF	; 255
	if (head >= TX_BUFFER_SIZE) head = 0;
    44b0:	94 34       	cpi	r25, 0x44	; 68
    44b2:	08 f0       	brcs	.+2      	; 0x44b6 <_ZN13AltSoftSerial9writeByteEh+0xc>
    44b4:	90 e0       	ldi	r25, 0x00	; 0
	while (tx_buffer_tail == head) ; // wait until space in buffer
    44b6:	20 91 da 08 	lds	r18, 0x08DA
    44ba:	29 17       	cp	r18, r25
    44bc:	e1 f3       	breq	.-8      	; 0x44b6 <_ZN13AltSoftSerial9writeByteEh+0xc>
	intr_state = SREG;
    44be:	2f b7       	in	r18, 0x3f	; 63
	cli();
    44c0:	f8 94       	cli
	if (tx_state) {
    44c2:	30 91 dc 08 	lds	r19, 0x08DC
    44c6:	33 23       	and	r19, r19
    44c8:	41 f0       	breq	.+16     	; 0x44da <_ZN13AltSoftSerial9writeByteEh+0x30>
		tx_buffer[head] = b;
    44ca:	e9 2f       	mov	r30, r25
    44cc:	f0 e0       	ldi	r31, 0x00	; 0
    44ce:	e6 57       	subi	r30, 0x76	; 118
    44d0:	f7 4f       	sbci	r31, 0xF7	; 247
    44d2:	80 83       	st	Z, r24
		tx_buffer_head = head;
    44d4:	90 93 db 08 	sts	0x08DB, r25
    44d8:	1d c0       	rjmp	.+58     	; 0x4514 <_ZN13AltSoftSerial9writeByteEh+0x6a>
	} else {
		tx_state = 1;
    44da:	91 e0       	ldi	r25, 0x01	; 1
    44dc:	90 93 dc 08 	sts	0x08DC, r25
		tx_byte = b;
    44e0:	80 93 35 09 	sts	0x0935, r24
		tx_bit = 0;
    44e4:	10 92 36 09 	sts	0x0936, r1
		ENABLE_INT_COMPARE_A();
    44e8:	82 e0       	ldi	r24, 0x02	; 2
    44ea:	8a bb       	out	0x1a, r24	; 26
    44ec:	80 91 73 00 	lds	r24, 0x0073
    44f0:	82 60       	ori	r24, 0x02	; 2
    44f2:	80 93 73 00 	sts	0x0073, r24
		CONFIG_MATCH_CLEAR();
    44f6:	80 91 20 01 	lds	r24, 0x0120
    44fa:	8f 73       	andi	r24, 0x3F	; 63
    44fc:	80 68       	ori	r24, 0x80	; 128
    44fe:	80 93 20 01 	sts	0x0120, r24
		SET_COMPARE_A(GET_TIMER_COUNT() + 16);
    4502:	80 91 24 01 	lds	r24, 0x0124
    4506:	90 91 25 01 	lds	r25, 0x0125
    450a:	40 96       	adiw	r24, 0x10	; 16
    450c:	90 93 29 01 	sts	0x0129, r25
    4510:	80 93 28 01 	sts	0x0128, r24
	}
	SREG = intr_state;
    4514:	2f bf       	out	0x3f, r18	; 63
    4516:	08 95       	ret

00004518 <_ZN13AltSoftSerial5writeEh>:
    4518:	86 2f       	mov	r24, r22
    451a:	0e 94 55 22 	call	0x44aa	; 0x44aa <_ZN13AltSoftSerial9writeByteEh>
    451e:	81 e0       	ldi	r24, 0x01	; 1
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	08 95       	ret

00004524 <__vector_47>:
}


ISR(COMPARE_A_INTERRUPT)
{
    4524:	1f 92       	push	r1
    4526:	0f 92       	push	r0
    4528:	0f b6       	in	r0, 0x3f	; 63
    452a:	0f 92       	push	r0
    452c:	11 24       	eor	r1, r1
    452e:	0b b6       	in	r0, 0x3b	; 59
    4530:	0f 92       	push	r0
    4532:	1b be       	out	0x3b, r1	; 59
    4534:	2f 93       	push	r18
    4536:	3f 93       	push	r19
    4538:	4f 93       	push	r20
    453a:	5f 93       	push	r21
    453c:	6f 93       	push	r22
    453e:	7f 93       	push	r23
    4540:	8f 93       	push	r24
    4542:	9f 93       	push	r25
    4544:	ef 93       	push	r30
    4546:	ff 93       	push	r31
	uint8_t state, byte, bit, head, tail;
	uint16_t target;

	state = tx_state;
    4548:	40 91 dc 08 	lds	r20, 0x08DC
	byte = tx_byte;
    454c:	50 91 35 09 	lds	r21, 0x0935
	target = GET_COMPARE_A();
    4550:	80 91 28 01 	lds	r24, 0x0128
    4554:	90 91 29 01 	lds	r25, 0x0129
	while (state < 9) {
		target += ticks_per_bit;
    4558:	20 91 31 09 	lds	r18, 0x0931
    455c:	30 91 32 09 	lds	r19, 0x0932
		bit = byte & 1;
		byte >>= 1;
		state++;
		if (bit != tx_bit) {
    4560:	70 91 36 09 	lds	r23, 0x0936
	uint16_t target;

	state = tx_state;
	byte = tx_byte;
	target = GET_COMPARE_A();
	while (state < 9) {
    4564:	1d c0       	rjmp	.+58     	; 0x45a0 <__vector_47+0x7c>
		target += ticks_per_bit;
    4566:	82 0f       	add	r24, r18
    4568:	93 1f       	adc	r25, r19
		bit = byte & 1;
    456a:	65 2f       	mov	r22, r21
    456c:	61 70       	andi	r22, 0x01	; 1
		byte >>= 1;
    456e:	56 95       	lsr	r21
		state++;
    4570:	4f 5f       	subi	r20, 0xFF	; 255
		if (bit != tx_bit) {
    4572:	67 17       	cp	r22, r23
    4574:	a9 f0       	breq	.+42     	; 0x45a0 <__vector_47+0x7c>
			if (bit) {
				CONFIG_MATCH_SET();
    4576:	20 91 20 01 	lds	r18, 0x0120
		target += ticks_per_bit;
		bit = byte & 1;
		byte >>= 1;
		state++;
		if (bit != tx_bit) {
			if (bit) {
    457a:	66 23       	and	r22, r22
    457c:	11 f0       	breq	.+4      	; 0x4582 <__vector_47+0x5e>
				CONFIG_MATCH_SET();
    457e:	20 6c       	ori	r18, 0xC0	; 192
    4580:	02 c0       	rjmp	.+4      	; 0x4586 <__vector_47+0x62>
			} else {
				CONFIG_MATCH_CLEAR();
    4582:	2f 73       	andi	r18, 0x3F	; 63
    4584:	20 68       	ori	r18, 0x80	; 128
    4586:	20 93 20 01 	sts	0x0120, r18
			}
			SET_COMPARE_A(target);
    458a:	90 93 29 01 	sts	0x0129, r25
    458e:	80 93 28 01 	sts	0x0128, r24
			tx_bit = bit;
    4592:	60 93 36 09 	sts	0x0936, r22
			tx_byte = byte;
    4596:	50 93 35 09 	sts	0x0935, r21
			tx_state = state;
    459a:	40 93 dc 08 	sts	0x08DC, r20
			// TODO: how to detect timing_error?
			return;
    459e:	3f c0       	rjmp	.+126    	; 0x461e <__vector_47+0xfa>
	uint16_t target;

	state = tx_state;
	byte = tx_byte;
	target = GET_COMPARE_A();
	while (state < 9) {
    45a0:	49 30       	cpi	r20, 0x09	; 9
    45a2:	08 f3       	brcs	.-62     	; 0x4566 <__vector_47+0x42>
			tx_state = state;
			// TODO: how to detect timing_error?
			return;
		}
	}
	if (state == 9) {
    45a4:	49 30       	cpi	r20, 0x09	; 9
    45a6:	39 f4       	brne	.+14     	; 0x45b6 <__vector_47+0x92>
		tx_state = 10;
    45a8:	2a e0       	ldi	r18, 0x0A	; 10
    45aa:	20 93 dc 08 	sts	0x08DC, r18
		CONFIG_MATCH_SET();
    45ae:	20 91 20 01 	lds	r18, 0x0120
    45b2:	20 6c       	ori	r18, 0xC0	; 192
    45b4:	28 c0       	rjmp	.+80     	; 0x4606 <__vector_47+0xe2>
		SET_COMPARE_A(target + ticks_per_bit);
		return;
	}
	head = tx_buffer_head;
    45b6:	20 91 db 08 	lds	r18, 0x08DB
	tail = tx_buffer_tail;
    45ba:	e0 91 da 08 	lds	r30, 0x08DA
	if (head == tail) {
    45be:	2e 13       	cpse	r18, r30
    45c0:	0d c0       	rjmp	.+26     	; 0x45dc <__vector_47+0xb8>
		tx_state = 0;
    45c2:	10 92 dc 08 	sts	0x08DC, r1
		CONFIG_MATCH_NORMAL();
    45c6:	80 91 20 01 	lds	r24, 0x0120
    45ca:	8f 73       	andi	r24, 0x3F	; 63
    45cc:	80 93 20 01 	sts	0x0120, r24
		DISABLE_INT_COMPARE_A();
    45d0:	80 91 73 00 	lds	r24, 0x0073
    45d4:	8d 7f       	andi	r24, 0xFD	; 253
    45d6:	80 93 73 00 	sts	0x0073, r24
    45da:	21 c0       	rjmp	.+66     	; 0x461e <__vector_47+0xfa>
	} else {
		tx_state = 1;
    45dc:	21 e0       	ldi	r18, 0x01	; 1
    45de:	20 93 dc 08 	sts	0x08DC, r18
		if (++tail >= TX_BUFFER_SIZE) tail = 0;
    45e2:	ef 5f       	subi	r30, 0xFF	; 255
    45e4:	e4 34       	cpi	r30, 0x44	; 68
    45e6:	08 f0       	brcs	.+2      	; 0x45ea <__vector_47+0xc6>
    45e8:	e0 e0       	ldi	r30, 0x00	; 0
		tx_buffer_tail = tail;
    45ea:	e0 93 da 08 	sts	0x08DA, r30
		tx_byte = tx_buffer[tail];
    45ee:	f0 e0       	ldi	r31, 0x00	; 0
    45f0:	e6 57       	subi	r30, 0x76	; 118
    45f2:	f7 4f       	sbci	r31, 0xF7	; 247
    45f4:	20 81       	ld	r18, Z
    45f6:	20 93 35 09 	sts	0x0935, r18
		tx_bit = 0;
    45fa:	10 92 36 09 	sts	0x0936, r1
		CONFIG_MATCH_CLEAR();
    45fe:	20 91 20 01 	lds	r18, 0x0120
    4602:	2f 73       	andi	r18, 0x3F	; 63
    4604:	20 68       	ori	r18, 0x80	; 128
    4606:	20 93 20 01 	sts	0x0120, r18
		SET_COMPARE_A(target + ticks_per_bit);
    460a:	20 91 31 09 	lds	r18, 0x0931
    460e:	30 91 32 09 	lds	r19, 0x0932
    4612:	28 0f       	add	r18, r24
    4614:	39 1f       	adc	r19, r25
    4616:	30 93 29 01 	sts	0x0129, r19
    461a:	20 93 28 01 	sts	0x0128, r18
		// TODO: how to detect timing_error?
	}
}
    461e:	ff 91       	pop	r31
    4620:	ef 91       	pop	r30
    4622:	9f 91       	pop	r25
    4624:	8f 91       	pop	r24
    4626:	7f 91       	pop	r23
    4628:	6f 91       	pop	r22
    462a:	5f 91       	pop	r21
    462c:	4f 91       	pop	r20
    462e:	3f 91       	pop	r19
    4630:	2f 91       	pop	r18
    4632:	0f 90       	pop	r0
    4634:	0b be       	out	0x3b, r0	; 59
    4636:	0f 90       	pop	r0
    4638:	0f be       	out	0x3f, r0	; 63
    463a:	0f 90       	pop	r0
    463c:	1f 90       	pop	r1
    463e:	18 95       	reti

00004640 <_ZN13AltSoftSerial11flushOutputEv>:

void AltSoftSerial::flushOutput(void)
{
	while (tx_state) /* wait */ ;
    4640:	80 91 dc 08 	lds	r24, 0x08DC
    4644:	81 11       	cpse	r24, r1
    4646:	fc cf       	rjmp	.-8      	; 0x4640 <_ZN13AltSoftSerial11flushOutputEv>
}
    4648:	08 95       	ret

0000464a <_ZN13AltSoftSerial5flushEv>:
    464a:	0c 94 20 23 	jmp	0x4640	; 0x4640 <_ZN13AltSoftSerial11flushOutputEv>

0000464e <__vector_46>:
/****************************************/
/**            Reception               **/
/****************************************/

ISR(CAPTURE_INTERRUPT)
{
    464e:	1f 92       	push	r1
    4650:	0f 92       	push	r0
    4652:	0f b6       	in	r0, 0x3f	; 63
    4654:	0f 92       	push	r0
    4656:	11 24       	eor	r1, r1
    4658:	0b b6       	in	r0, 0x3b	; 59
    465a:	0f 92       	push	r0
    465c:	1b be       	out	0x3b, r1	; 59
    465e:	2f 93       	push	r18
    4660:	3f 93       	push	r19
    4662:	4f 93       	push	r20
    4664:	8f 93       	push	r24
    4666:	9f 93       	push	r25
    4668:	ef 93       	push	r30
    466a:	ff 93       	push	r31
	uint8_t count;
	uint16_t capture, current;

	capture = GET_INPUT_CAPTURE();
    466c:	80 91 26 01 	lds	r24, 0x0126
    4670:	90 91 27 01 	lds	r25, 0x0127
	count = rx_count;
    4674:	40 91 2f 09 	lds	r20, 0x092F
	if (count & 1) {
		CONFIG_CAPTURE_FALLING_EDGE();
    4678:	20 91 21 01 	lds	r18, 0x0121
	uint8_t count;
	uint16_t capture, current;

	capture = GET_INPUT_CAPTURE();
	count = rx_count;
	if (count & 1) {
    467c:	40 ff       	sbrs	r20, 0
    467e:	04 c0       	rjmp	.+8      	; 0x4688 <__vector_46+0x3a>
		CONFIG_CAPTURE_FALLING_EDGE();
    4680:	2f 7b       	andi	r18, 0xBF	; 191
    4682:	20 93 21 01 	sts	0x0121, r18
    4686:	1b c0       	rjmp	.+54     	; 0x46be <__vector_46+0x70>
	} else {
		CONFIG_CAPTURE_RISING_EDGE();
    4688:	20 64       	ori	r18, 0x40	; 64
    468a:	20 93 21 01 	sts	0x0121, r18
	}
	if (count == 0) {
    468e:	41 11       	cpse	r20, r1
    4690:	16 c0       	rjmp	.+44     	; 0x46be <__vector_46+0x70>
		SET_COMPARE_B(capture + rx_stop_ticks);
    4692:	20 91 33 09 	lds	r18, 0x0933
    4696:	30 91 34 09 	lds	r19, 0x0934
    469a:	28 0f       	add	r18, r24
    469c:	39 1f       	adc	r19, r25
    469e:	30 93 2b 01 	sts	0x012B, r19
    46a2:	20 93 2a 01 	sts	0x012A, r18
		ENABLE_INT_COMPARE_B();
    46a6:	24 e0       	ldi	r18, 0x04	; 4
    46a8:	2a bb       	out	0x1a, r18	; 26
    46aa:	20 91 73 00 	lds	r18, 0x0073
    46ae:	24 60       	ori	r18, 0x04	; 4
    46b0:	20 93 73 00 	sts	0x0073, r18
		rx_event[0] = capture;
    46b4:	90 93 38 09 	sts	0x0938, r25
    46b8:	80 93 37 09 	sts	0x0937, r24
    46bc:	0a c0       	rjmp	.+20     	; 0x46d2 <__vector_46+0x84>
	} else if (count < MAX_RX_EVENTS) {
    46be:	4a 30       	cpi	r20, 0x0A	; 10
    46c0:	40 f4       	brcc	.+16     	; 0x46d2 <__vector_46+0x84>
		rx_event[count] = capture;
    46c2:	e4 2f       	mov	r30, r20
    46c4:	f0 e0       	ldi	r31, 0x00	; 0
    46c6:	ee 0f       	add	r30, r30
    46c8:	ff 1f       	adc	r31, r31
    46ca:	e9 5c       	subi	r30, 0xC9	; 201
    46cc:	f6 4f       	sbci	r31, 0xF6	; 246
    46ce:	91 83       	std	Z+1, r25	; 0x01
    46d0:	80 83       	st	Z, r24
	}
	rx_count = count + 1;
    46d2:	4f 5f       	subi	r20, 0xFF	; 255
    46d4:	40 93 2f 09 	sts	0x092F, r20
	if (GET_TIMER_COUNT() - capture > ticks_per_bit) {
    46d8:	20 91 24 01 	lds	r18, 0x0124
    46dc:	30 91 25 01 	lds	r19, 0x0125
    46e0:	28 1b       	sub	r18, r24
    46e2:	39 0b       	sbc	r19, r25
    46e4:	80 91 31 09 	lds	r24, 0x0931
    46e8:	90 91 32 09 	lds	r25, 0x0932
    46ec:	82 17       	cp	r24, r18
    46ee:	93 07       	cpc	r25, r19
    46f0:	18 f4       	brcc	.+6      	; 0x46f8 <__vector_46+0xaa>
		AltSoftSerial::timing_error = true;
    46f2:	81 e0       	ldi	r24, 0x01	; 1
    46f4:	80 93 30 09 	sts	0x0930, r24
	}
}
    46f8:	ff 91       	pop	r31
    46fa:	ef 91       	pop	r30
    46fc:	9f 91       	pop	r25
    46fe:	8f 91       	pop	r24
    4700:	4f 91       	pop	r20
    4702:	3f 91       	pop	r19
    4704:	2f 91       	pop	r18
    4706:	0f 90       	pop	r0
    4708:	0b be       	out	0x3b, r0	; 59
    470a:	0f 90       	pop	r0
    470c:	0f be       	out	0x3f, r0	; 63
    470e:	0f 90       	pop	r0
    4710:	1f 90       	pop	r1
    4712:	18 95       	reti

00004714 <__vector_48>:
	}
	return out;
}

ISR(COMPARE_B_INTERRUPT)
{
    4714:	1f 92       	push	r1
    4716:	0f 92       	push	r0
    4718:	0f b6       	in	r0, 0x3f	; 63
    471a:	0f 92       	push	r0
    471c:	11 24       	eor	r1, r1
    471e:	0b b6       	in	r0, 0x3b	; 59
    4720:	0f 92       	push	r0
    4722:	1b be       	out	0x3b, r1	; 59
    4724:	af 92       	push	r10
    4726:	bf 92       	push	r11
    4728:	cf 92       	push	r12
    472a:	df 92       	push	r13
    472c:	ef 92       	push	r14
    472e:	ff 92       	push	r15
    4730:	0f 93       	push	r16
    4732:	1f 93       	push	r17
    4734:	2f 93       	push	r18
    4736:	3f 93       	push	r19
    4738:	4f 93       	push	r20
    473a:	5f 93       	push	r21
    473c:	6f 93       	push	r22
    473e:	7f 93       	push	r23
    4740:	8f 93       	push	r24
    4742:	9f 93       	push	r25
    4744:	af 93       	push	r26
    4746:	bf 93       	push	r27
    4748:	cf 93       	push	r28
    474a:	df 93       	push	r29
    474c:	ef 93       	push	r30
    474e:	ff 93       	push	r31
	uint8_t head;

	DISABLE_INT_COMPARE_B();
    4750:	80 91 73 00 	lds	r24, 0x0073
    4754:	8b 7f       	andi	r24, 0xFB	; 251
    4756:	80 93 73 00 	sts	0x0073, r24
	CONFIG_CAPTURE_FALLING_EDGE();
    475a:	80 91 21 01 	lds	r24, 0x0121
    475e:	8f 7b       	andi	r24, 0xBF	; 191
    4760:	80 93 21 01 	sts	0x0121, r24
	head = rx_buffer_head + 1;
    4764:	10 91 2e 09 	lds	r17, 0x092E
    4768:	1f 5f       	subi	r17, 0xFF	; 255
	if (head >= RX_BUFFER_SIZE) head = 0;
    476a:	10 35       	cpi	r17, 0x50	; 80
    476c:	08 f0       	brcs	.+2      	; 0x4770 <__vector_48+0x5c>
    476e:	10 e0       	ldi	r17, 0x00	; 0
	if (head != rx_buffer_tail) {
    4770:	80 91 2d 09 	lds	r24, 0x092D
    4774:	18 17       	cp	r17, r24
    4776:	e9 f1       	breq	.+122    	; 0x47f2 <__vector_48+0xde>
		rx_buffer[head] = analyze(rx_count);
    4778:	c1 2f       	mov	r28, r17
    477a:	d0 e0       	ldi	r29, 0x00	; 0
    477c:	00 91 2f 09 	lds	r16, 0x092F
    4780:	0b 30       	cpi	r16, 0x0B	; 11
    4782:	08 f0       	brcs	.+2      	; 0x4786 <__vector_48+0x72>
    4784:	0a e0       	ldi	r16, 0x0A	; 10
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
    4786:	60 91 37 09 	lds	r22, 0x0937
    478a:	70 91 38 09 	lds	r23, 0x0938
	target = ticks_per_bit + ticks_per_bit / 2;
    478e:	20 91 31 09 	lds	r18, 0x0931
    4792:	30 91 32 09 	lds	r19, 0x0932
    4796:	c9 01       	movw	r24, r18
    4798:	96 95       	lsr	r25
    479a:	87 95       	ror	r24
    479c:	82 0f       	add	r24, r18
    479e:	93 1f       	adc	r25, r19

static inline uint8_t analyze(uint8_t count)
{
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
	uint16_t begin, tmp, target, now=0;
    47a0:	40 e0       	ldi	r20, 0x00	; 0
    47a2:	50 e0       	ldi	r21, 0x00	; 0
}

static inline uint8_t analyze(uint8_t count)
{
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
    47a4:	e1 2c       	mov	r14, r1
    47a6:	dd 24       	eor	r13, r13
    47a8:	d3 94       	inc	r13
    47aa:	ff 24       	eor	r15, r15
    47ac:	fa 94       	dec	r15
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
    47ae:	e9 e3       	ldi	r30, 0x39	; 57
    47b0:	f9 e0       	ldi	r31, 0x09	; 9
		while (now >= target) {
			if (state == 0) out &= ~mask;
			mask <<= 1;
			target += ticks_per_bit;
		}
		state ^= 1;
    47b2:	cc 24       	eor	r12, r12
    47b4:	c3 94       	inc	r12
    47b6:	15 c0       	rjmp	.+42     	; 0x47e2 <__vector_48+0xce>

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
    47b8:	a1 91       	ld	r26, Z+
    47ba:	b1 91       	ld	r27, Z+
		now += tmp - begin;
    47bc:	5d 01       	movw	r10, r26
    47be:	a6 1a       	sub	r10, r22
    47c0:	b7 0a       	sbc	r11, r23
    47c2:	4a 0d       	add	r20, r10
    47c4:	5b 1d       	adc	r21, r11
    47c6:	08 c0       	rjmp	.+16     	; 0x47d8 <__vector_48+0xc4>
		begin = tmp;
		while (now >= target) {
			if (state == 0) out &= ~mask;
    47c8:	e1 10       	cpse	r14, r1
    47ca:	03 c0       	rjmp	.+6      	; 0x47d2 <__vector_48+0xbe>
    47cc:	6d 2d       	mov	r22, r13
    47ce:	60 95       	com	r22
    47d0:	f6 22       	and	r15, r22
			mask <<= 1;
    47d2:	dd 0c       	add	r13, r13
			target += ticks_per_bit;
    47d4:	82 0f       	add	r24, r18
    47d6:	93 1f       	adc	r25, r19
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
		now += tmp - begin;
		begin = tmp;
		while (now >= target) {
    47d8:	48 17       	cp	r20, r24
    47da:	59 07       	cpc	r21, r25
    47dc:	a8 f7       	brcc	.-22     	; 0x47c8 <__vector_48+0xb4>
			if (state == 0) out &= ~mask;
			mask <<= 1;
			target += ticks_per_bit;
		}
		state ^= 1;
    47de:	ec 24       	eor	r14, r12
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
		now += tmp - begin;
		begin = tmp;
    47e0:	bd 01       	movw	r22, r26
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
    47e2:	01 50       	subi	r16, 0x01	; 1
    47e4:	49 f7       	brne	.-46     	; 0x47b8 <__vector_48+0xa4>
	DISABLE_INT_COMPARE_B();
	CONFIG_CAPTURE_FALLING_EDGE();
	head = rx_buffer_head + 1;
	if (head >= RX_BUFFER_SIZE) head = 0;
	if (head != rx_buffer_tail) {
		rx_buffer[head] = analyze(rx_count);
    47e6:	fe 01       	movw	r30, r28
    47e8:	e3 52       	subi	r30, 0x23	; 35
    47ea:	f7 4f       	sbci	r31, 0xF7	; 247
    47ec:	f0 82       	st	Z, r15
		rx_buffer_head = head;
    47ee:	10 93 2e 09 	sts	0x092E, r17
	}
	rx_count = 0;
    47f2:	10 92 2f 09 	sts	0x092F, r1
}
    47f6:	ff 91       	pop	r31
    47f8:	ef 91       	pop	r30
    47fa:	df 91       	pop	r29
    47fc:	cf 91       	pop	r28
    47fe:	bf 91       	pop	r27
    4800:	af 91       	pop	r26
    4802:	9f 91       	pop	r25
    4804:	8f 91       	pop	r24
    4806:	7f 91       	pop	r23
    4808:	6f 91       	pop	r22
    480a:	5f 91       	pop	r21
    480c:	4f 91       	pop	r20
    480e:	3f 91       	pop	r19
    4810:	2f 91       	pop	r18
    4812:	1f 91       	pop	r17
    4814:	0f 91       	pop	r16
    4816:	ff 90       	pop	r15
    4818:	ef 90       	pop	r14
    481a:	df 90       	pop	r13
    481c:	cf 90       	pop	r12
    481e:	bf 90       	pop	r11
    4820:	af 90       	pop	r10
    4822:	0f 90       	pop	r0
    4824:	0b be       	out	0x3b, r0	; 59
    4826:	0f 90       	pop	r0
    4828:	0f be       	out	0x3f, r0	; 63
    482a:	0f 90       	pop	r0
    482c:	1f 90       	pop	r1
    482e:	18 95       	reti

00004830 <_ZN13AltSoftSerial10flushInputEv>:
	return RX_BUFFER_SIZE + head - tail;
}

void AltSoftSerial::flushInput(void)
{
	rx_buffer_head = rx_buffer_tail;
    4830:	80 91 2d 09 	lds	r24, 0x092D
    4834:	80 93 2e 09 	sts	0x092E, r24
    4838:	08 95       	ret

0000483a <_ZN13AltSoftSerial3endEv>:
	tx_buffer_tail = 0;
	ENABLE_INT_INPUT_CAPTURE();
}

void AltSoftSerial::end(void)
{
    483a:	cf 93       	push	r28
    483c:	df 93       	push	r29
	DISABLE_INT_COMPARE_B();
    483e:	c3 e7       	ldi	r28, 0x73	; 115
    4840:	d0 e0       	ldi	r29, 0x00	; 0
    4842:	88 81       	ld	r24, Y
    4844:	8b 7f       	andi	r24, 0xFB	; 251
    4846:	88 83       	st	Y, r24
	DISABLE_INT_INPUT_CAPTURE();
    4848:	88 81       	ld	r24, Y
    484a:	8f 7d       	andi	r24, 0xDF	; 223
    484c:	88 83       	st	Y, r24
	flushInput();
    484e:	0e 94 18 24 	call	0x4830	; 0x4830 <_ZN13AltSoftSerial10flushInputEv>
	flushOutput();
    4852:	0e 94 20 23 	call	0x4640	; 0x4640 <_ZN13AltSoftSerial11flushOutputEv>
	DISABLE_INT_COMPARE_A();
    4856:	88 81       	ld	r24, Y
    4858:	8d 7f       	andi	r24, 0xFD	; 253
    485a:	88 83       	st	Y, r24
	// TODO: restore timer to original settings?
}
    485c:	df 91       	pop	r29
    485e:	cf 91       	pop	r28
    4860:	08 95       	ret

00004862 <_ZN5AlarmD1Ev>:
	pinMode(alarmPin1, OUTPUT);
	pinMode(alarmPin2, OUTPUT);
	pinMode(alarmPin3, OUTPUT);
}

Alarm::~Alarm() {
    4862:	28 e2       	ldi	r18, 0x28	; 40
    4864:	32 e0       	ldi	r19, 0x02	; 2
    4866:	fc 01       	movw	r30, r24
    4868:	31 83       	std	Z+1, r19	; 0x01
    486a:	20 83       	st	Z, r18
    486c:	08 95       	ret

0000486e <_ZN5AlarmD0Ev>:
    486e:	28 e2       	ldi	r18, 0x28	; 40
    4870:	32 e0       	ldi	r19, 0x02	; 2
    4872:	fc 01       	movw	r30, r24
    4874:	31 83       	std	Z+1, r19	; 0x01
    4876:	20 83       	st	Z, r18

}
    4878:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <_ZdlPv>

0000487c <_ZN5AlarmC1EP14FreeBoardModel>:
 *      Author: robert
 */

#include "Alarm.h"

Alarm::Alarm(FreeBoardModel* model) {
    487c:	fc 01       	movw	r30, r24
    487e:	cb 01       	movw	r24, r22
    4880:	28 e2       	ldi	r18, 0x28	; 40
    4882:	32 e0       	ldi	r19, 0x02	; 2
    4884:	31 83       	std	Z+1, r19	; 0x01
    4886:	20 83       	st	Z, r18
	this->model=model;
    4888:	73 83       	std	Z+3, r23	; 0x03
    488a:	62 83       	std	Z+2, r22	; 0x02
	alarmBeepState=false;
    488c:	14 82       	std	Z+4, r1	; 0x04
	model->setAlarmLast(0);
    488e:	40 e0       	ldi	r20, 0x00	; 0
    4890:	50 e0       	ldi	r21, 0x00	; 0
    4892:	ba 01       	movw	r22, r20
    4894:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <_ZN14FreeBoardModel12setAlarmLastEm>
	pinMode(alarmPin0, OUTPUT);
    4898:	61 e0       	ldi	r22, 0x01	; 1
    489a:	86 e1       	ldi	r24, 0x16	; 22
    489c:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	pinMode(alarmPin1, OUTPUT);
    48a0:	61 e0       	ldi	r22, 0x01	; 1
    48a2:	87 e1       	ldi	r24, 0x17	; 23
    48a4:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	pinMode(alarmPin2, OUTPUT);
    48a8:	61 e0       	ldi	r22, 0x01	; 1
    48aa:	88 e1       	ldi	r24, 0x18	; 24
    48ac:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	pinMode(alarmPin3, OUTPUT);
    48b0:	61 e0       	ldi	r22, 0x01	; 1
    48b2:	89 e1       	ldi	r24, 0x19	; 25
    48b4:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <pinMode>

000048b8 <_ZN5Alarm14checkWindAlarmEv>:
		digitalWrite(alarmPin2, LOW);
		digitalWrite(alarmPin3, LOW);
	}
}

void Alarm::checkWindAlarm(){
    48b8:	cf 92       	push	r12
    48ba:	df 92       	push	r13
    48bc:	ef 92       	push	r14
    48be:	ff 92       	push	r15
    48c0:	cf 93       	push	r28
    48c2:	df 93       	push	r29
    48c4:	ec 01       	movw	r28, r24
	//check alarm val
		if (model->isWindAlarmOn() && model->getWindAlarmSpeed() > 0
    48c6:	8a 81       	ldd	r24, Y+2	; 0x02
    48c8:	9b 81       	ldd	r25, Y+3	; 0x03
    48ca:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <_ZN14FreeBoardModel13isWindAlarmOnEv>
    48ce:	88 23       	and	r24, r24
    48d0:	11 f1       	breq	.+68     	; 0x4916 <_ZN5Alarm14checkWindAlarmEv+0x5e>
    48d2:	8a 81       	ldd	r24, Y+2	; 0x02
    48d4:	9b 81       	ldd	r25, Y+3	; 0x03
    48d6:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <_ZN14FreeBoardModel17getWindAlarmSpeedEv>
    48da:	18 16       	cp	r1, r24
    48dc:	19 06       	cpc	r1, r25
    48de:	dc f4       	brge	.+54     	; 0x4916 <_ZN5Alarm14checkWindAlarmEv+0x5e>
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
    48e0:	8a 81       	ldd	r24, Y+2	; 0x02
    48e2:	9b 81       	ldd	r25, Y+3	; 0x03
    48e4:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <_ZN14FreeBoardModel14getWindAverageEv>
    48e8:	6b 01       	movw	r12, r22
    48ea:	7c 01       	movw	r14, r24
    48ec:	8a 81       	ldd	r24, Y+2	; 0x02
    48ee:	9b 81       	ldd	r25, Y+3	; 0x03
    48f0:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <_ZN14FreeBoardModel17getWindAlarmSpeedEv>
	}
}

void Alarm::checkWindAlarm(){
	//check alarm val
		if (model->isWindAlarmOn() && model->getWindAlarmSpeed() > 0
    48f4:	bc 01       	movw	r22, r24
    48f6:	88 27       	eor	r24, r24
    48f8:	77 fd       	sbrc	r23, 7
    48fa:	80 95       	com	r24
    48fc:	98 2f       	mov	r25, r24
    48fe:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__floatsisf>
    4902:	9b 01       	movw	r18, r22
    4904:	ac 01       	movw	r20, r24
    4906:	c7 01       	movw	r24, r14
    4908:	b6 01       	movw	r22, r12
    490a:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    490e:	18 16       	cp	r1, r24
    4910:	14 f4       	brge	.+4      	; 0x4916 <_ZN5Alarm14checkWindAlarmEv+0x5e>
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
			//TODO: Alarm snooze, better handling of this
			//setSnoozeAlarm(0);
			model->setWindAlarmTriggered(true);
    4912:	61 e0       	ldi	r22, 0x01	; 1
    4914:	01 c0       	rjmp	.+2      	; 0x4918 <_ZN5Alarm14checkWindAlarmEv+0x60>
		} else {
			model->setWindAlarmTriggered(false);
    4916:	60 e0       	ldi	r22, 0x00	; 0
    4918:	8a 81       	ldd	r24, Y+2	; 0x02
    491a:	9b 81       	ldd	r25, Y+3	; 0x03
		}
}
    491c:	df 91       	pop	r29
    491e:	cf 91       	pop	r28
    4920:	ff 90       	pop	r15
    4922:	ef 90       	pop	r14
    4924:	df 90       	pop	r13
    4926:	cf 90       	pop	r12
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
			//TODO: Alarm snooze, better handling of this
			//setSnoozeAlarm(0);
			model->setWindAlarmTriggered(true);
		} else {
			model->setWindAlarmTriggered(false);
    4928:	0c 94 26 2f 	jmp	0x5e4c	; 0x5e4c <_ZN14FreeBoardModel21setWindAlarmTriggeredEb>

0000492c <_ZN6AnchorD1Ev>:

	this->model=model;
	resetAnchorBox(model->getAnchorLat(), model->getAnchorLon());
}

Anchor::~Anchor(){
    492c:	20 e3       	ldi	r18, 0x30	; 48
    492e:	32 e0       	ldi	r19, 0x02	; 2
    4930:	fc 01       	movw	r30, r24
    4932:	31 83       	std	Z+1, r19	; 0x01
    4934:	20 83       	st	Z, r18
    4936:	08 95       	ret

00004938 <_ZN6AnchorD0Ev>:
    4938:	20 e3       	ldi	r18, 0x30	; 48
    493a:	32 e0       	ldi	r19, 0x02	; 2
    493c:	fc 01       	movw	r30, r24
    493e:	31 83       	std	Z+1, r19	; 0x01
    4940:	20 83       	st	Z, r18

}
    4942:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <_ZdlPv>

00004946 <_ZN6Anchor15updateAnchorBoxEff>:


/* Adjust the size of the anchor box. Will not go smaller than MINMTRS */
void Anchor::updateAnchorBox(float laty, float lonx) {
    4946:	2f 92       	push	r2
    4948:	3f 92       	push	r3
    494a:	4f 92       	push	r4
    494c:	5f 92       	push	r5
    494e:	6f 92       	push	r6
    4950:	7f 92       	push	r7
    4952:	8f 92       	push	r8
    4954:	9f 92       	push	r9
    4956:	af 92       	push	r10
    4958:	bf 92       	push	r11
    495a:	cf 92       	push	r12
    495c:	df 92       	push	r13
    495e:	ef 92       	push	r14
    4960:	ff 92       	push	r15
    4962:	0f 93       	push	r16
    4964:	1f 93       	push	r17
    4966:	cf 93       	push	r28
    4968:	df 93       	push	r29
    496a:	00 d0       	rcall	.+0      	; 0x496c <_ZN6Anchor15updateAnchorBoxEff+0x26>
    496c:	00 d0       	rcall	.+0      	; 0x496e <_ZN6Anchor15updateAnchorBoxEff+0x28>
    496e:	00 d0       	rcall	.+0      	; 0x4970 <_ZN6Anchor15updateAnchorBoxEff+0x2a>
    4970:	cd b7       	in	r28, 0x3d	; 61
    4972:	de b7       	in	r29, 0x3e	; 62
    4974:	9e 83       	std	Y+6, r25	; 0x06
    4976:	8d 83       	std	Y+5, r24	; 0x05
    4978:	4a 01       	movw	r8, r20
    497a:	5b 01       	movw	r10, r22
    497c:	68 01       	movw	r12, r16
    497e:	79 01       	movw	r14, r18
	//TODO: error testing around 0, 90, 180deg

	float n = laty + model->getAnchorRadiusDeg();
    4980:	fc 01       	movw	r30, r24
    4982:	82 81       	ldd	r24, Z+2	; 0x02
    4984:	93 81       	ldd	r25, Z+3	; 0x03
    4986:	0e 94 4c 2b 	call	0x5698	; 0x5698 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    498a:	9b 01       	movw	r18, r22
    498c:	ac 01       	movw	r20, r24
    498e:	c5 01       	movw	r24, r10
    4990:	b4 01       	movw	r22, r8
    4992:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    4996:	69 83       	std	Y+1, r22	; 0x01
    4998:	7a 83       	std	Y+2, r23	; 0x02
    499a:	1c 01       	movw	r2, r24
	float s = laty - model->getAnchorRadiusDeg();
    499c:	ed 81       	ldd	r30, Y+5	; 0x05
    499e:	fe 81       	ldd	r31, Y+6	; 0x06
    49a0:	82 81       	ldd	r24, Z+2	; 0x02
    49a2:	93 81       	ldd	r25, Z+3	; 0x03
    49a4:	0e 94 4c 2b 	call	0x5698	; 0x5698 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    49a8:	9b 01       	movw	r18, r22
    49aa:	ac 01       	movw	r20, r24
    49ac:	c5 01       	movw	r24, r10
    49ae:	b4 01       	movw	r22, r8
    49b0:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    49b4:	2b 01       	movw	r4, r22
    49b6:	3c 01       	movw	r6, r24
	float e = lonx + model->getAnchorRadiusDeg();
    49b8:	ed 81       	ldd	r30, Y+5	; 0x05
    49ba:	fe 81       	ldd	r31, Y+6	; 0x06
    49bc:	82 81       	ldd	r24, Z+2	; 0x02
    49be:	93 81       	ldd	r25, Z+3	; 0x03
    49c0:	0e 94 4c 2b 	call	0x5698	; 0x5698 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    49c4:	9b 01       	movw	r18, r22
    49c6:	ac 01       	movw	r20, r24
    49c8:	c7 01       	movw	r24, r14
    49ca:	b6 01       	movw	r22, r12
    49cc:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    49d0:	4b 01       	movw	r8, r22
    49d2:	5c 01       	movw	r10, r24
	float w = lonx - model->getAnchorRadiusDeg();
    49d4:	ed 81       	ldd	r30, Y+5	; 0x05
    49d6:	fe 81       	ldd	r31, Y+6	; 0x06
    49d8:	82 81       	ldd	r24, Z+2	; 0x02
    49da:	93 81       	ldd	r25, Z+3	; 0x03
    49dc:	0e 94 4c 2b 	call	0x5698	; 0x5698 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    49e0:	9b 01       	movw	r18, r22
    49e2:	ac 01       	movw	r20, r24
    49e4:	c7 01       	movw	r24, r14
    49e6:	b6 01       	movw	r22, r12
    49e8:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    49ec:	16 2f       	mov	r17, r22
    49ee:	7b 83       	std	Y+3, r23	; 0x03
    49f0:	8c 83       	std	Y+4, r24	; 0x04
    49f2:	09 2f       	mov	r16, r25
	//shrink anchor box if we can
	if ((n - MINMTRS) > model->getAnchorS() && n < model->getAnchorN())
    49f4:	ed 81       	ldd	r30, Y+5	; 0x05
    49f6:	fe 81       	ldd	r31, Y+6	; 0x06
    49f8:	82 81       	ldd	r24, Z+2	; 0x02
    49fa:	93 81       	ldd	r25, Z+3	; 0x03
    49fc:	0e 94 56 2b 	call	0x56ac	; 0x56ac <_ZN14FreeBoardModel10getAnchorSEv>
    4a00:	6b 01       	movw	r12, r22
    4a02:	7c 01       	movw	r14, r24
    4a04:	24 e8       	ldi	r18, 0x84	; 132
    4a06:	3a eb       	ldi	r19, 0xBA	; 186
    4a08:	4c e3       	ldi	r20, 0x3C	; 60
    4a0a:	58 e3       	ldi	r21, 0x38	; 56
    4a0c:	b9 81       	ldd	r27, Y+1	; 0x01
    4a0e:	aa 81       	ldd	r26, Y+2	; 0x02
    4a10:	6b 2f       	mov	r22, r27
    4a12:	7a 2f       	mov	r23, r26
    4a14:	82 2d       	mov	r24, r2
    4a16:	93 2d       	mov	r25, r3
    4a18:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    4a1c:	a7 01       	movw	r20, r14
    4a1e:	96 01       	movw	r18, r12
    4a20:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    4a24:	18 16       	cp	r1, r24
    4a26:	94 f4       	brge	.+36     	; 0x4a4c <_ZN6Anchor15updateAnchorBoxEff+0x106>
    4a28:	ed 81       	ldd	r30, Y+5	; 0x05
    4a2a:	fe 81       	ldd	r31, Y+6	; 0x06
    4a2c:	82 81       	ldd	r24, Z+2	; 0x02
    4a2e:	93 81       	ldd	r25, Z+3	; 0x03
    4a30:	0e 94 36 2b 	call	0x566c	; 0x566c <_ZN14FreeBoardModel10getAnchorNEv>
    4a34:	9b 01       	movw	r18, r22
    4a36:	ac 01       	movw	r20, r24
    4a38:	b9 81       	ldd	r27, Y+1	; 0x01
    4a3a:	aa 81       	ldd	r26, Y+2	; 0x02
    4a3c:	6b 2f       	mov	r22, r27
    4a3e:	7a 2f       	mov	r23, r26
    4a40:	82 2d       	mov	r24, r2
    4a42:	93 2d       	mov	r25, r3
    4a44:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    4a48:	87 fd       	sbrc	r24, 7
    4a4a:	7e c0       	rjmp	.+252    	; 0x4b48 <_ZN6Anchor15updateAnchorBoxEff+0x202>
		model->setAnchorN(n);
	if ((s + MINMTRS) < model->getAnchorN() && s > model->getAnchorS())
    4a4c:	ed 81       	ldd	r30, Y+5	; 0x05
    4a4e:	fe 81       	ldd	r31, Y+6	; 0x06
    4a50:	82 81       	ldd	r24, Z+2	; 0x02
    4a52:	93 81       	ldd	r25, Z+3	; 0x03
    4a54:	0e 94 36 2b 	call	0x566c	; 0x566c <_ZN14FreeBoardModel10getAnchorNEv>
    4a58:	6b 01       	movw	r12, r22
    4a5a:	7c 01       	movw	r14, r24
    4a5c:	24 e8       	ldi	r18, 0x84	; 132
    4a5e:	3a eb       	ldi	r19, 0xBA	; 186
    4a60:	4c e3       	ldi	r20, 0x3C	; 60
    4a62:	58 e3       	ldi	r21, 0x38	; 56
    4a64:	64 2d       	mov	r22, r4
    4a66:	75 2d       	mov	r23, r5
    4a68:	86 2d       	mov	r24, r6
    4a6a:	97 2d       	mov	r25, r7
    4a6c:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    4a70:	a7 01       	movw	r20, r14
    4a72:	96 01       	movw	r18, r12
    4a74:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    4a78:	87 ff       	sbrs	r24, 7
    4a7a:	11 c0       	rjmp	.+34     	; 0x4a9e <_ZN6Anchor15updateAnchorBoxEff+0x158>
    4a7c:	ed 81       	ldd	r30, Y+5	; 0x05
    4a7e:	fe 81       	ldd	r31, Y+6	; 0x06
    4a80:	82 81       	ldd	r24, Z+2	; 0x02
    4a82:	93 81       	ldd	r25, Z+3	; 0x03
    4a84:	0e 94 56 2b 	call	0x56ac	; 0x56ac <_ZN14FreeBoardModel10getAnchorSEv>
    4a88:	9b 01       	movw	r18, r22
    4a8a:	ac 01       	movw	r20, r24
    4a8c:	64 2d       	mov	r22, r4
    4a8e:	75 2d       	mov	r23, r5
    4a90:	86 2d       	mov	r24, r6
    4a92:	97 2d       	mov	r25, r7
    4a94:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    4a98:	18 16       	cp	r1, r24
    4a9a:	0c f4       	brge	.+2      	; 0x4a9e <_ZN6Anchor15updateAnchorBoxEff+0x158>
    4a9c:	62 c0       	rjmp	.+196    	; 0x4b62 <_ZN6Anchor15updateAnchorBoxEff+0x21c>
		model->setAnchorS(s);
	if ((e - MINMTRS) > model->getAnchorW() && e < model->getAnchorE())
    4a9e:	ed 81       	ldd	r30, Y+5	; 0x05
    4aa0:	fe 81       	ldd	r31, Y+6	; 0x06
    4aa2:	82 81       	ldd	r24, Z+2	; 0x02
    4aa4:	93 81       	ldd	r25, Z+3	; 0x03
    4aa6:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <_ZN14FreeBoardModel10getAnchorWEv>
    4aaa:	2b 01       	movw	r4, r22
    4aac:	3c 01       	movw	r6, r24
    4aae:	24 e8       	ldi	r18, 0x84	; 132
    4ab0:	3a eb       	ldi	r19, 0xBA	; 186
    4ab2:	4c e3       	ldi	r20, 0x3C	; 60
    4ab4:	58 e3       	ldi	r21, 0x38	; 56
    4ab6:	68 2d       	mov	r22, r8
    4ab8:	79 2d       	mov	r23, r9
    4aba:	8a 2d       	mov	r24, r10
    4abc:	9b 2d       	mov	r25, r11
    4abe:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    4ac2:	a3 01       	movw	r20, r6
    4ac4:	92 01       	movw	r18, r4
    4ac6:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    4aca:	18 16       	cp	r1, r24
    4acc:	84 f4       	brge	.+32     	; 0x4aee <_ZN6Anchor15updateAnchorBoxEff+0x1a8>
    4ace:	ed 81       	ldd	r30, Y+5	; 0x05
    4ad0:	fe 81       	ldd	r31, Y+6	; 0x06
    4ad2:	82 81       	ldd	r24, Z+2	; 0x02
    4ad4:	93 81       	ldd	r25, Z+3	; 0x03
    4ad6:	0e 94 0a 2b 	call	0x5614	; 0x5614 <_ZN14FreeBoardModel10getAnchorEEv>
    4ada:	9b 01       	movw	r18, r22
    4adc:	ac 01       	movw	r20, r24
    4ade:	68 2d       	mov	r22, r8
    4ae0:	79 2d       	mov	r23, r9
    4ae2:	8a 2d       	mov	r24, r10
    4ae4:	9b 2d       	mov	r25, r11
    4ae6:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    4aea:	87 fd       	sbrc	r24, 7
    4aec:	45 c0       	rjmp	.+138    	; 0x4b78 <_ZN6Anchor15updateAnchorBoxEff+0x232>
		model->setAnchorE(e);
	if ((w + MINMTRS) < model->getAnchorE() && w > model->getAnchorW())
    4aee:	ed 81       	ldd	r30, Y+5	; 0x05
    4af0:	fe 81       	ldd	r31, Y+6	; 0x06
    4af2:	82 81       	ldd	r24, Z+2	; 0x02
    4af4:	93 81       	ldd	r25, Z+3	; 0x03
    4af6:	0e 94 0a 2b 	call	0x5614	; 0x5614 <_ZN14FreeBoardModel10getAnchorEEv>
    4afa:	4b 01       	movw	r8, r22
    4afc:	5c 01       	movw	r10, r24
    4afe:	24 e8       	ldi	r18, 0x84	; 132
    4b00:	3a eb       	ldi	r19, 0xBA	; 186
    4b02:	4c e3       	ldi	r20, 0x3C	; 60
    4b04:	58 e3       	ldi	r21, 0x38	; 56
    4b06:	ab 81       	ldd	r26, Y+3	; 0x03
    4b08:	fc 80       	ldd	r15, Y+4	; 0x04
    4b0a:	61 2f       	mov	r22, r17
    4b0c:	7a 2f       	mov	r23, r26
    4b0e:	8f 2d       	mov	r24, r15
    4b10:	90 2f       	mov	r25, r16
    4b12:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    4b16:	a5 01       	movw	r20, r10
    4b18:	94 01       	movw	r18, r8
    4b1a:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    4b1e:	87 ff       	sbrs	r24, 7
    4b20:	5a c0       	rjmp	.+180    	; 0x4bd6 <_ZN6Anchor15updateAnchorBoxEff+0x290>
    4b22:	ed 81       	ldd	r30, Y+5	; 0x05
    4b24:	fe 81       	ldd	r31, Y+6	; 0x06
    4b26:	82 81       	ldd	r24, Z+2	; 0x02
    4b28:	93 81       	ldd	r25, Z+3	; 0x03
    4b2a:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <_ZN14FreeBoardModel10getAnchorWEv>
    4b2e:	9b 01       	movw	r18, r22
    4b30:	ac 01       	movw	r20, r24
    4b32:	ab 81       	ldd	r26, Y+3	; 0x03
    4b34:	fc 80       	ldd	r15, Y+4	; 0x04
    4b36:	61 2f       	mov	r22, r17
    4b38:	7a 2f       	mov	r23, r26
    4b3a:	8f 2d       	mov	r24, r15
    4b3c:	90 2f       	mov	r25, r16
    4b3e:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    4b42:	18 16       	cp	r1, r24
    4b44:	24 f1       	brlt	.+72     	; 0x4b8e <_ZN6Anchor15updateAnchorBoxEff+0x248>
    4b46:	47 c0       	rjmp	.+142    	; 0x4bd6 <_ZN6Anchor15updateAnchorBoxEff+0x290>
	float s = laty - model->getAnchorRadiusDeg();
	float e = lonx + model->getAnchorRadiusDeg();
	float w = lonx - model->getAnchorRadiusDeg();
	//shrink anchor box if we can
	if ((n - MINMTRS) > model->getAnchorS() && n < model->getAnchorN())
		model->setAnchorN(n);
    4b48:	39 81       	ldd	r19, Y+1	; 0x01
    4b4a:	2a 81       	ldd	r18, Y+2	; 0x02
    4b4c:	43 2f       	mov	r20, r19
    4b4e:	52 2f       	mov	r21, r18
    4b50:	62 2d       	mov	r22, r2
    4b52:	73 2d       	mov	r23, r3
    4b54:	ed 81       	ldd	r30, Y+5	; 0x05
    4b56:	fe 81       	ldd	r31, Y+6	; 0x06
    4b58:	82 81       	ldd	r24, Z+2	; 0x02
    4b5a:	93 81       	ldd	r25, Z+3	; 0x03
    4b5c:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <_ZN14FreeBoardModel10setAnchorNEf>
    4b60:	75 cf       	rjmp	.-278    	; 0x4a4c <_ZN6Anchor15updateAnchorBoxEff+0x106>
	if ((s + MINMTRS) < model->getAnchorN() && s > model->getAnchorS())
		model->setAnchorS(s);
    4b62:	44 2d       	mov	r20, r4
    4b64:	55 2d       	mov	r21, r5
    4b66:	66 2d       	mov	r22, r6
    4b68:	77 2d       	mov	r23, r7
    4b6a:	ed 81       	ldd	r30, Y+5	; 0x05
    4b6c:	fe 81       	ldd	r31, Y+6	; 0x06
    4b6e:	82 81       	ldd	r24, Z+2	; 0x02
    4b70:	93 81       	ldd	r25, Z+3	; 0x03
    4b72:	0e 94 40 2e 	call	0x5c80	; 0x5c80 <_ZN14FreeBoardModel10setAnchorSEf>
    4b76:	93 cf       	rjmp	.-218    	; 0x4a9e <_ZN6Anchor15updateAnchorBoxEff+0x158>
	if ((e - MINMTRS) > model->getAnchorW() && e < model->getAnchorE())
		model->setAnchorE(e);
    4b78:	48 2d       	mov	r20, r8
    4b7a:	59 2d       	mov	r21, r9
    4b7c:	6a 2d       	mov	r22, r10
    4b7e:	7b 2d       	mov	r23, r11
    4b80:	ed 81       	ldd	r30, Y+5	; 0x05
    4b82:	fe 81       	ldd	r31, Y+6	; 0x06
    4b84:	82 81       	ldd	r24, Z+2	; 0x02
    4b86:	93 81       	ldd	r25, Z+3	; 0x03
    4b88:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN14FreeBoardModel10setAnchorEEf>
    4b8c:	b0 cf       	rjmp	.-160    	; 0x4aee <_ZN6Anchor15updateAnchorBoxEff+0x1a8>
	if ((w + MINMTRS) < model->getAnchorE() && w > model->getAnchorW())
		model->setAnchorW(w);
    4b8e:	2b 81       	ldd	r18, Y+3	; 0x03
    4b90:	9c 81       	ldd	r25, Y+4	; 0x04
    4b92:	41 2f       	mov	r20, r17
    4b94:	52 2f       	mov	r21, r18
    4b96:	69 2f       	mov	r22, r25
    4b98:	70 2f       	mov	r23, r16
    4b9a:	ed 81       	ldd	r30, Y+5	; 0x05
    4b9c:	fe 81       	ldd	r31, Y+6	; 0x06
    4b9e:	82 81       	ldd	r24, Z+2	; 0x02
    4ba0:	93 81       	ldd	r25, Z+3	; 0x03

}
    4ba2:	26 96       	adiw	r28, 0x06	; 6
    4ba4:	0f b6       	in	r0, 0x3f	; 63
    4ba6:	f8 94       	cli
    4ba8:	de bf       	out	0x3e, r29	; 62
    4baa:	0f be       	out	0x3f, r0	; 63
    4bac:	cd bf       	out	0x3d, r28	; 61
    4bae:	df 91       	pop	r29
    4bb0:	cf 91       	pop	r28
    4bb2:	1f 91       	pop	r17
    4bb4:	0f 91       	pop	r16
    4bb6:	ff 90       	pop	r15
    4bb8:	ef 90       	pop	r14
    4bba:	df 90       	pop	r13
    4bbc:	cf 90       	pop	r12
    4bbe:	bf 90       	pop	r11
    4bc0:	af 90       	pop	r10
    4bc2:	9f 90       	pop	r9
    4bc4:	8f 90       	pop	r8
    4bc6:	7f 90       	pop	r7
    4bc8:	6f 90       	pop	r6
    4bca:	5f 90       	pop	r5
    4bcc:	4f 90       	pop	r4
    4bce:	3f 90       	pop	r3
    4bd0:	2f 90       	pop	r2
	if ((s + MINMTRS) < model->getAnchorN() && s > model->getAnchorS())
		model->setAnchorS(s);
	if ((e - MINMTRS) > model->getAnchorW() && e < model->getAnchorE())
		model->setAnchorE(e);
	if ((w + MINMTRS) < model->getAnchorE() && w > model->getAnchorW())
		model->setAnchorW(w);
    4bd2:	0c 94 46 2e 	jmp	0x5c8c	; 0x5c8c <_ZN14FreeBoardModel10setAnchorWEf>

}
    4bd6:	26 96       	adiw	r28, 0x06	; 6
    4bd8:	0f b6       	in	r0, 0x3f	; 63
    4bda:	f8 94       	cli
    4bdc:	de bf       	out	0x3e, r29	; 62
    4bde:	0f be       	out	0x3f, r0	; 63
    4be0:	cd bf       	out	0x3d, r28	; 61
    4be2:	df 91       	pop	r29
    4be4:	cf 91       	pop	r28
    4be6:	1f 91       	pop	r17
    4be8:	0f 91       	pop	r16
    4bea:	ff 90       	pop	r15
    4bec:	ef 90       	pop	r14
    4bee:	df 90       	pop	r13
    4bf0:	cf 90       	pop	r12
    4bf2:	bf 90       	pop	r11
    4bf4:	af 90       	pop	r10
    4bf6:	9f 90       	pop	r9
    4bf8:	8f 90       	pop	r8
    4bfa:	7f 90       	pop	r7
    4bfc:	6f 90       	pop	r6
    4bfe:	5f 90       	pop	r5
    4c00:	4f 90       	pop	r4
    4c02:	3f 90       	pop	r3
    4c04:	2f 90       	pop	r2
    4c06:	08 95       	ret

00004c08 <_ZN6Anchor14resetAnchorBoxEff>:

void Anchor::resetAnchorBox(float laty, float lonx) {
    4c08:	8f 92       	push	r8
    4c0a:	9f 92       	push	r9
    4c0c:	af 92       	push	r10
    4c0e:	bf 92       	push	r11
    4c10:	cf 92       	push	r12
    4c12:	df 92       	push	r13
    4c14:	ef 92       	push	r14
    4c16:	ff 92       	push	r15
    4c18:	0f 93       	push	r16
    4c1a:	1f 93       	push	r17
    4c1c:	cf 93       	push	r28
    4c1e:	df 93       	push	r29
    4c20:	ec 01       	movw	r28, r24
    4c22:	6a 01       	movw	r12, r20
    4c24:	7b 01       	movw	r14, r22
    4c26:	48 01       	movw	r8, r16
    4c28:	59 01       	movw	r10, r18
	model->setAnchorN(90.0);
    4c2a:	40 e0       	ldi	r20, 0x00	; 0
    4c2c:	50 e0       	ldi	r21, 0x00	; 0
    4c2e:	64 eb       	ldi	r22, 0xB4	; 180
    4c30:	72 e4       	ldi	r23, 0x42	; 66
    4c32:	8a 81       	ldd	r24, Y+2	; 0x02
    4c34:	9b 81       	ldd	r25, Y+3	; 0x03
    4c36:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <_ZN14FreeBoardModel10setAnchorNEf>
	model->setAnchorS(-90.0);
    4c3a:	40 e0       	ldi	r20, 0x00	; 0
    4c3c:	50 e0       	ldi	r21, 0x00	; 0
    4c3e:	64 eb       	ldi	r22, 0xB4	; 180
    4c40:	72 ec       	ldi	r23, 0xC2	; 194
    4c42:	8a 81       	ldd	r24, Y+2	; 0x02
    4c44:	9b 81       	ldd	r25, Y+3	; 0x03
    4c46:	0e 94 40 2e 	call	0x5c80	; 0x5c80 <_ZN14FreeBoardModel10setAnchorSEf>
	model->setAnchorE(180.0);
    4c4a:	40 e0       	ldi	r20, 0x00	; 0
    4c4c:	50 e0       	ldi	r21, 0x00	; 0
    4c4e:	64 e3       	ldi	r22, 0x34	; 52
    4c50:	73 e4       	ldi	r23, 0x43	; 67
    4c52:	8a 81       	ldd	r24, Y+2	; 0x02
    4c54:	9b 81       	ldd	r25, Y+3	; 0x03
    4c56:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN14FreeBoardModel10setAnchorEEf>
	model->setAnchorW(-180.0);
    4c5a:	40 e0       	ldi	r20, 0x00	; 0
    4c5c:	50 e0       	ldi	r21, 0x00	; 0
    4c5e:	64 e3       	ldi	r22, 0x34	; 52
    4c60:	73 ec       	ldi	r23, 0xC3	; 195
    4c62:	8a 81       	ldd	r24, Y+2	; 0x02
    4c64:	9b 81       	ldd	r25, Y+3	; 0x03
    4c66:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <_ZN14FreeBoardModel10setAnchorWEf>
	model->setAnchorRadiusDeg(model->getAnchorRadius() * LLMTRS);
    4c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    4c6e:	0e 94 40 2b 	call	0x5680	; 0x5680 <_ZN14FreeBoardModel15getAnchorRadiusEv>
    4c72:	2d e9       	ldi	r18, 0x9D	; 157
    4c74:	3b ef       	ldi	r19, 0xFB	; 251
    4c76:	46 e1       	ldi	r20, 0x16	; 22
    4c78:	57 e3       	ldi	r21, 0x37	; 55
    4c7a:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    4c7e:	ab 01       	movw	r20, r22
    4c80:	bc 01       	movw	r22, r24
    4c82:	8a 81       	ldd	r24, Y+2	; 0x02
    4c84:	9b 81       	ldd	r25, Y+3	; 0x03
    4c86:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <_ZN14FreeBoardModel18setAnchorRadiusDegEf>
	updateAnchorBox(laty, lonx);
    4c8a:	95 01       	movw	r18, r10
    4c8c:	84 01       	movw	r16, r8
    4c8e:	b7 01       	movw	r22, r14
    4c90:	a6 01       	movw	r20, r12
    4c92:	ce 01       	movw	r24, r28
    4c94:	0e 94 a3 24 	call	0x4946	; 0x4946 <_ZN6Anchor15updateAnchorBoxEff>
}
    4c98:	df 91       	pop	r29
    4c9a:	cf 91       	pop	r28
    4c9c:	1f 91       	pop	r17
    4c9e:	0f 91       	pop	r16
    4ca0:	ff 90       	pop	r15
    4ca2:	ef 90       	pop	r14
    4ca4:	df 90       	pop	r13
    4ca6:	cf 90       	pop	r12
    4ca8:	bf 90       	pop	r11
    4caa:	af 90       	pop	r10
    4cac:	9f 90       	pop	r9
    4cae:	8f 90       	pop	r8
    4cb0:	08 95       	ret

00004cb2 <_ZN6AnchorC1EP14FreeBoardModel>:

#include "Anchor.h"



Anchor::Anchor(FreeBoardModel* model) {
    4cb2:	cf 92       	push	r12
    4cb4:	df 92       	push	r13
    4cb6:	ef 92       	push	r14
    4cb8:	ff 92       	push	r15
    4cba:	0f 93       	push	r16
    4cbc:	1f 93       	push	r17
    4cbe:	cf 93       	push	r28
    4cc0:	df 93       	push	r29
    4cc2:	00 d0       	rcall	.+0      	; 0x4cc4 <_ZN6AnchorC1EP14FreeBoardModel+0x12>
    4cc4:	cd b7       	in	r28, 0x3d	; 61
    4cc6:	de b7       	in	r29, 0x3e	; 62
    4cc8:	6c 01       	movw	r12, r24
    4cca:	7b 01       	movw	r14, r22
    4ccc:	80 e3       	ldi	r24, 0x30	; 48
    4cce:	92 e0       	ldi	r25, 0x02	; 2
    4cd0:	f6 01       	movw	r30, r12
    4cd2:	91 83       	std	Z+1, r25	; 0x01
    4cd4:	80 83       	st	Z, r24


	this->model=model;
    4cd6:	73 83       	std	Z+3, r23	; 0x03
    4cd8:	62 83       	std	Z+2, r22	; 0x02
	resetAnchorBox(model->getAnchorLat(), model->getAnchorLon());
    4cda:	cb 01       	movw	r24, r22
    4cdc:	0e 94 20 2b 	call	0x5640	; 0x5640 <_ZN14FreeBoardModel12getAnchorLonEv>
    4ce0:	8b 01       	movw	r16, r22
    4ce2:	9c 01       	movw	r18, r24
    4ce4:	c7 01       	movw	r24, r14
    4ce6:	29 83       	std	Y+1, r18	; 0x01
    4ce8:	3a 83       	std	Y+2, r19	; 0x02
    4cea:	0e 94 14 2b 	call	0x5628	; 0x5628 <_ZN14FreeBoardModel12getAnchorLatEv>
    4cee:	ab 01       	movw	r20, r22
    4cf0:	bc 01       	movw	r22, r24
    4cf2:	29 81       	ldd	r18, Y+1	; 0x01
    4cf4:	3a 81       	ldd	r19, Y+2	; 0x02
    4cf6:	c6 01       	movw	r24, r12
    4cf8:	0e 94 04 26 	call	0x4c08	; 0x4c08 <_ZN6Anchor14resetAnchorBoxEff>
}
    4cfc:	0f 90       	pop	r0
    4cfe:	0f 90       	pop	r0
    4d00:	df 91       	pop	r29
    4d02:	cf 91       	pop	r28
    4d04:	1f 91       	pop	r17
    4d06:	0f 91       	pop	r16
    4d08:	ff 90       	pop	r15
    4d0a:	ef 90       	pop	r14
    4d0c:	df 90       	pop	r13
    4d0e:	cf 90       	pop	r12
    4d10:	08 95       	ret

00004d12 <_ZN6Anchor11checkAnchorEv>:
		model->setAnchorW(model->getAnchorW() - change);

	}
}
/*calc all params, and set alarm buzzer state*/
void Anchor::checkAnchor() {
    4d12:	8f 92       	push	r8
    4d14:	9f 92       	push	r9
    4d16:	af 92       	push	r10
    4d18:	bf 92       	push	r11
    4d1a:	cf 92       	push	r12
    4d1c:	df 92       	push	r13
    4d1e:	ef 92       	push	r14
    4d20:	ff 92       	push	r15
    4d22:	0f 93       	push	r16
    4d24:	1f 93       	push	r17
    4d26:	cf 93       	push	r28
    4d28:	df 93       	push	r29
    4d2a:	00 d0       	rcall	.+0      	; 0x4d2c <_ZN6Anchor11checkAnchorEv+0x1a>
    4d2c:	00 d0       	rcall	.+0      	; 0x4d2e <_ZN6Anchor11checkAnchorEv+0x1c>
    4d2e:	cd b7       	in	r28, 0x3d	; 61
    4d30:	de b7       	in	r29, 0x3e	; 62
    4d32:	4c 01       	movw	r8, r24

	//we dont need to do this if the anchor alarm is off
	if(model->isAnchorAlarmOn()){
    4d34:	fc 01       	movw	r30, r24
    4d36:	82 81       	ldd	r24, Z+2	; 0x02
    4d38:	93 81       	ldd	r25, Z+3	; 0x03
    4d3a:	0e 94 e7 2d 	call	0x5bce	; 0x5bce <_ZN14FreeBoardModel15isAnchorAlarmOnEv>
    4d3e:	88 23       	and	r24, r24
    4d40:	09 f4       	brne	.+2      	; 0x4d44 <_ZN6Anchor11checkAnchorEv+0x32>
    4d42:	cf c0       	rjmp	.+414    	; 0x4ee2 <_ZN6Anchor11checkAnchorEv+0x1d0>
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
    4d44:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    4d48:	6b 01       	movw	r12, r22
    4d4a:	7c 01       	movw	r14, r24
    4d4c:	f4 01       	movw	r30, r8
    4d4e:	82 81       	ldd	r24, Z+2	; 0x02
    4d50:	93 81       	ldd	r25, Z+3	; 0x03
    4d52:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <_ZN14FreeBoardModel13getGpsLastFixEv>
    4d56:	c6 1a       	sub	r12, r22
    4d58:	d7 0a       	sbc	r13, r23
    4d5a:	e8 0a       	sbc	r14, r24
    4d5c:	f9 0a       	sbc	r15, r25
    4d5e:	f1 ee       	ldi	r31, 0xE1	; 225
    4d60:	cf 16       	cp	r12, r31
    4d62:	f3 e9       	ldi	r31, 0x93	; 147
    4d64:	df 06       	cpc	r13, r31
    4d66:	f4 e0       	ldi	r31, 0x04	; 4
    4d68:	ef 06       	cpc	r14, r31
    4d6a:	f1 04       	cpc	r15, r1
    4d6c:	38 f0       	brcs	.+14     	; 0x4d7c <_ZN6Anchor11checkAnchorEv+0x6a>
				&& model->isAnchorAlarmOn()) {
    4d6e:	f4 01       	movw	r30, r8
    4d70:	82 81       	ldd	r24, Z+2	; 0x02
    4d72:	93 81       	ldd	r25, Z+3	; 0x03
    4d74:	0e 94 e7 2d 	call	0x5bce	; 0x5bce <_ZN14FreeBoardModel15isAnchorAlarmOnEv>

	//we dont need to do this if the anchor alarm is off
	if(model->isAnchorAlarmOn()){
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
    4d78:	81 11       	cpse	r24, r1
    4d7a:	84 c0       	rjmp	.+264    	; 0x4e84 <_ZN6Anchor11checkAnchorEv+0x172>
				&& model->isAnchorAlarmOn()) {
			model->setAlarmSnooze(0);
			model->setAnchorAlarmTriggered(true);
		}
		//now check position
		if (model->getGpsStatus()) {
    4d7c:	f4 01       	movw	r30, r8
    4d7e:	82 81       	ldd	r24, Z+2	; 0x02
    4d80:	93 81       	ldd	r25, Z+3	; 0x03
    4d82:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN14FreeBoardModel12getGpsStatusEv>
    4d86:	88 23       	and	r24, r24
    4d88:	09 f4       	brne	.+2      	; 0x4d8c <_ZN6Anchor11checkAnchorEv+0x7a>
    4d8a:	ab c0       	rjmp	.+342    	; 0x4ee2 <_ZN6Anchor11checkAnchorEv+0x1d0>
			model->setAnchorDistance(Gps::getMetersTo(model->getAnchorLat(), model->getAnchorLon(),model->getGpsLatitude(),model->getGpsLongitude()));
    4d8c:	f4 01       	movw	r30, r8
    4d8e:	82 81       	ldd	r24, Z+2	; 0x02
    4d90:	93 81       	ldd	r25, Z+3	; 0x03
    4d92:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <_ZN14FreeBoardModel15getGpsLongitudeEv>
    4d96:	5b 01       	movw	r10, r22
    4d98:	6c 01       	movw	r12, r24
    4d9a:	f4 01       	movw	r30, r8
    4d9c:	82 81       	ldd	r24, Z+2	; 0x02
    4d9e:	93 81       	ldd	r25, Z+3	; 0x03
    4da0:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <_ZN14FreeBoardModel14getGpsLatitudeEv>
    4da4:	7b 01       	movw	r14, r22
    4da6:	8c 01       	movw	r16, r24
    4da8:	f4 01       	movw	r30, r8
    4daa:	82 81       	ldd	r24, Z+2	; 0x02
    4dac:	93 81       	ldd	r25, Z+3	; 0x03
    4dae:	0e 94 20 2b 	call	0x5640	; 0x5640 <_ZN14FreeBoardModel12getAnchorLonEv>
    4db2:	9b 01       	movw	r18, r22
    4db4:	ac 01       	movw	r20, r24
    4db6:	f4 01       	movw	r30, r8
    4db8:	82 81       	ldd	r24, Z+2	; 0x02
    4dba:	93 81       	ldd	r25, Z+3	; 0x03
    4dbc:	2b 83       	std	Y+3, r18	; 0x03
    4dbe:	3c 83       	std	Y+4, r19	; 0x04
    4dc0:	49 83       	std	Y+1, r20	; 0x01
    4dc2:	5a 83       	std	Y+2, r21	; 0x02
    4dc4:	0e 94 14 2b 	call	0x5628	; 0x5628 <_ZN14FreeBoardModel12getAnchorLatEv>
    4dc8:	2b 81       	ldd	r18, Y+3	; 0x03
    4dca:	3c 81       	ldd	r19, Y+4	; 0x04
    4dcc:	49 81       	ldd	r20, Y+1	; 0x01
    4dce:	5a 81       	ldd	r21, Y+2	; 0x02
    4dd0:	0e 94 37 34 	call	0x686e	; 0x686e <_ZN3Gps11getMetersToEffff>
    4dd4:	ab 01       	movw	r20, r22
    4dd6:	bc 01       	movw	r22, r24
    4dd8:	f4 01       	movw	r30, r8
    4dda:	82 81       	ldd	r24, Z+2	; 0x02
    4ddc:	93 81       	ldd	r25, Z+3	; 0x03
    4dde:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <_ZN14FreeBoardModel17setAnchorDistanceEf>
			if (model->getAnchorDistance() > model->getAnchorMaxDistance())
    4de2:	f4 01       	movw	r30, r8
    4de4:	82 81       	ldd	r24, Z+2	; 0x02
    4de6:	93 81       	ldd	r25, Z+3	; 0x03
    4de8:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZN14FreeBoardModel17getAnchorDistanceEv>
    4dec:	6b 01       	movw	r12, r22
    4dee:	7c 01       	movw	r14, r24
    4df0:	f4 01       	movw	r30, r8
    4df2:	82 81       	ldd	r24, Z+2	; 0x02
    4df4:	93 81       	ldd	r25, Z+3	; 0x03
    4df6:	0e 94 2c 2b 	call	0x5658	; 0x5658 <_ZN14FreeBoardModel20getAnchorMaxDistanceEv>
    4dfa:	9b 01       	movw	r18, r22
    4dfc:	ac 01       	movw	r20, r24
    4dfe:	c7 01       	movw	r24, r14
    4e00:	b6 01       	movw	r22, r12
    4e02:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    4e06:	18 16       	cp	r1, r24
    4e08:	64 f4       	brge	.+24     	; 0x4e22 <_ZN6Anchor11checkAnchorEv+0x110>
				model->setAnchorMaxDistance(model->getAnchorDistance());
    4e0a:	f4 01       	movw	r30, r8
    4e0c:	82 81       	ldd	r24, Z+2	; 0x02
    4e0e:	93 81       	ldd	r25, Z+3	; 0x03
    4e10:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZN14FreeBoardModel17getAnchorDistanceEv>
    4e14:	ab 01       	movw	r20, r22
    4e16:	bc 01       	movw	r22, r24
    4e18:	f4 01       	movw	r30, r8
    4e1a:	82 81       	ldd	r24, Z+2	; 0x02
    4e1c:	93 81       	ldd	r25, Z+3	; 0x03
    4e1e:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>

			//update the anchor box
			updateAnchorBox(model->getGpsLatitude(), model->getGpsLongitude());
    4e22:	f4 01       	movw	r30, r8
    4e24:	82 81       	ldd	r24, Z+2	; 0x02
    4e26:	93 81       	ldd	r25, Z+3	; 0x03
    4e28:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <_ZN14FreeBoardModel15getGpsLongitudeEv>
    4e2c:	8b 01       	movw	r16, r22
    4e2e:	9c 01       	movw	r18, r24
    4e30:	f4 01       	movw	r30, r8
    4e32:	82 81       	ldd	r24, Z+2	; 0x02
    4e34:	93 81       	ldd	r25, Z+3	; 0x03
    4e36:	2b 83       	std	Y+3, r18	; 0x03
    4e38:	3c 83       	std	Y+4, r19	; 0x04
    4e3a:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <_ZN14FreeBoardModel14getGpsLatitudeEv>
    4e3e:	ab 01       	movw	r20, r22
    4e40:	bc 01       	movw	r22, r24
    4e42:	2b 81       	ldd	r18, Y+3	; 0x03
    4e44:	3c 81       	ldd	r19, Y+4	; 0x04
    4e46:	c4 01       	movw	r24, r8
    4e48:	0e 94 a3 24 	call	0x4946	; 0x4946 <_ZN6Anchor15updateAnchorBoxEff>

			// read distance to anchorPoint in meters and set anchorAlarm accordingly
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (model->isAnchorAlarmOn() && model->getAnchorDistance() > model->getAnchorRadius()) {
    4e4c:	f4 01       	movw	r30, r8
    4e4e:	82 81       	ldd	r24, Z+2	; 0x02
    4e50:	93 81       	ldd	r25, Z+3	; 0x03
    4e52:	0e 94 e7 2d 	call	0x5bce	; 0x5bce <_ZN14FreeBoardModel15isAnchorAlarmOnEv>
    4e56:	88 23       	and	r24, r24
    4e58:	71 f1       	breq	.+92     	; 0x4eb6 <_ZN6Anchor11checkAnchorEv+0x1a4>
    4e5a:	f4 01       	movw	r30, r8
    4e5c:	82 81       	ldd	r24, Z+2	; 0x02
    4e5e:	93 81       	ldd	r25, Z+3	; 0x03
    4e60:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZN14FreeBoardModel17getAnchorDistanceEv>
    4e64:	6b 01       	movw	r12, r22
    4e66:	7c 01       	movw	r14, r24
    4e68:	f4 01       	movw	r30, r8
    4e6a:	82 81       	ldd	r24, Z+2	; 0x02
    4e6c:	93 81       	ldd	r25, Z+3	; 0x03
    4e6e:	0e 94 40 2b 	call	0x5680	; 0x5680 <_ZN14FreeBoardModel15getAnchorRadiusEv>
    4e72:	9b 01       	movw	r18, r22
    4e74:	ac 01       	movw	r20, r24
    4e76:	c7 01       	movw	r24, r14
    4e78:	b6 01       	movw	r22, r12
    4e7a:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    4e7e:	18 16       	cp	r1, r24
    4e80:	84 f0       	brlt	.+32     	; 0x4ea2 <_ZN6Anchor11checkAnchorEv+0x190>
    4e82:	19 c0       	rjmp	.+50     	; 0x4eb6 <_ZN6Anchor11checkAnchorEv+0x1a4>
	if(model->isAnchorAlarmOn()){
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
				&& model->isAnchorAlarmOn()) {
			model->setAlarmSnooze(0);
    4e84:	40 e0       	ldi	r20, 0x00	; 0
    4e86:	50 e0       	ldi	r21, 0x00	; 0
    4e88:	ba 01       	movw	r22, r20
    4e8a:	f4 01       	movw	r30, r8
    4e8c:	82 81       	ldd	r24, Z+2	; 0x02
    4e8e:	93 81       	ldd	r25, Z+3	; 0x03
    4e90:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <_ZN14FreeBoardModel14setAlarmSnoozeEm>
			model->setAnchorAlarmTriggered(true);
    4e94:	61 e0       	ldi	r22, 0x01	; 1
    4e96:	f4 01       	movw	r30, r8
    4e98:	82 81       	ldd	r24, Z+2	; 0x02
    4e9a:	93 81       	ldd	r25, Z+3	; 0x03
    4e9c:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>
    4ea0:	6d cf       	rjmp	.-294    	; 0x4d7c <_ZN6Anchor11checkAnchorEv+0x6a>
			updateAnchorBox(model->getGpsLatitude(), model->getGpsLongitude());

			// read distance to anchorPoint in meters and set anchorAlarm accordingly
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (model->isAnchorAlarmOn() && model->getAnchorDistance() > model->getAnchorRadius()) {
				model->setAlarmSnooze(0);
    4ea2:	40 e0       	ldi	r20, 0x00	; 0
    4ea4:	50 e0       	ldi	r21, 0x00	; 0
    4ea6:	ba 01       	movw	r22, r20
    4ea8:	f4 01       	movw	r30, r8
    4eaa:	82 81       	ldd	r24, Z+2	; 0x02
    4eac:	93 81       	ldd	r25, Z+3	; 0x03
    4eae:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <_ZN14FreeBoardModel14setAlarmSnoozeEm>
				model->setAnchorAlarmTriggered(true);
    4eb2:	61 e0       	ldi	r22, 0x01	; 1
    4eb4:	01 c0       	rjmp	.+2      	; 0x4eb8 <_ZN6Anchor11checkAnchorEv+0x1a6>
			} else {
				model->setAnchorAlarmTriggered(false);
    4eb6:	60 e0       	ldi	r22, 0x00	; 0
    4eb8:	f4 01       	movw	r30, r8
    4eba:	82 81       	ldd	r24, Z+2	; 0x02
    4ebc:	93 81       	ldd	r25, Z+3	; 0x03
			}
		}
	}

}
    4ebe:	0f 90       	pop	r0
    4ec0:	0f 90       	pop	r0
    4ec2:	0f 90       	pop	r0
    4ec4:	0f 90       	pop	r0
    4ec6:	df 91       	pop	r29
    4ec8:	cf 91       	pop	r28
    4eca:	1f 91       	pop	r17
    4ecc:	0f 91       	pop	r16
    4ece:	ff 90       	pop	r15
    4ed0:	ef 90       	pop	r14
    4ed2:	df 90       	pop	r13
    4ed4:	cf 90       	pop	r12
    4ed6:	bf 90       	pop	r11
    4ed8:	af 90       	pop	r10
    4eda:	9f 90       	pop	r9
    4edc:	8f 90       	pop	r8
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (model->isAnchorAlarmOn() && model->getAnchorDistance() > model->getAnchorRadius()) {
				model->setAlarmSnooze(0);
				model->setAnchorAlarmTriggered(true);
			} else {
				model->setAnchorAlarmTriggered(false);
    4ede:	0c 94 07 2e 	jmp	0x5c0e	; 0x5c0e <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>
			}
		}
	}

}
    4ee2:	0f 90       	pop	r0
    4ee4:	0f 90       	pop	r0
    4ee6:	0f 90       	pop	r0
    4ee8:	0f 90       	pop	r0
    4eea:	df 91       	pop	r29
    4eec:	cf 91       	pop	r28
    4eee:	1f 91       	pop	r17
    4ef0:	0f 91       	pop	r16
    4ef2:	ff 90       	pop	r15
    4ef4:	ef 90       	pop	r14
    4ef6:	df 90       	pop	r13
    4ef8:	cf 90       	pop	r12
    4efa:	bf 90       	pop	r11
    4efc:	af 90       	pop	r10
    4efe:	9f 90       	pop	r9
    4f00:	8f 90       	pop	r8
    4f02:	08 95       	ret

00004f04 <_ZN6Anchor14setAnchorPointEv>:

/*Set anchor position*/
void Anchor::setAnchorPoint() {
    4f04:	cf 93       	push	r28
    4f06:	df 93       	push	r29
    4f08:	ec 01       	movw	r28, r24
	model->setAnchorLat(model->getGpsLatitude());
    4f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f0c:	9b 81       	ldd	r25, Y+3	; 0x03
    4f0e:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <_ZN14FreeBoardModel14getGpsLatitudeEv>
    4f12:	ab 01       	movw	r20, r22
    4f14:	bc 01       	movw	r22, r24
    4f16:	8a 81       	ldd	r24, Y+2	; 0x02
    4f18:	9b 81       	ldd	r25, Y+3	; 0x03
    4f1a:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <_ZN14FreeBoardModel12setAnchorLatEf>
	model->setAnchorLon(model->getGpsLongitude());
    4f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f20:	9b 81       	ldd	r25, Y+3	; 0x03
    4f22:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <_ZN14FreeBoardModel15getGpsLongitudeEv>
    4f26:	ab 01       	movw	r20, r22
    4f28:	bc 01       	movw	r22, r24
    4f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    4f2e:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <_ZN14FreeBoardModel12setAnchorLonEf>
	model->setAnchorMaxDistance(0);
    4f32:	40 e0       	ldi	r20, 0x00	; 0
    4f34:	50 e0       	ldi	r21, 0x00	; 0
    4f36:	ba 01       	movw	r22, r20
    4f38:	8a 81       	ldd	r24, Y+2	; 0x02
    4f3a:	9b 81       	ldd	r25, Y+3	; 0x03

}
    4f3c:	df 91       	pop	r29
    4f3e:	cf 91       	pop	r28

/*Set anchor position*/
void Anchor::setAnchorPoint() {
	model->setAnchorLat(model->getGpsLatitude());
	model->setAnchorLon(model->getGpsLongitude());
	model->setAnchorMaxDistance(0);
    4f40:	0c 94 26 2e 	jmp	0x5c4c	; 0x5c4c <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>

00004f44 <_ZN9AutopilotC1EP14FreeBoardModel>:
 * And lastly, if the second you enable the controller the output goes in the wrong direction and pegs at 0 or 100%, you've got the sign of the P_Param wrong.
 * That is, if you've got a 3 in there, make it -3.
 */
#include "Autopilot.h"

Autopilot::Autopilot(FreeBoardModel* model) {
    4f44:	6f 92       	push	r6
    4f46:	7f 92       	push	r7
    4f48:	8f 92       	push	r8
    4f4a:	9f 92       	push	r9
    4f4c:	af 92       	push	r10
    4f4e:	bf 92       	push	r11
    4f50:	cf 92       	push	r12
    4f52:	df 92       	push	r13
    4f54:	ef 92       	push	r14
    4f56:	ff 92       	push	r15
    4f58:	0f 93       	push	r16
    4f5a:	1f 93       	push	r17
    4f5c:	cf 93       	push	r28
    4f5e:	df 93       	push	r29
    4f60:	cd b7       	in	r28, 0x3d	; 61
    4f62:	de b7       	in	r29, 0x3e	; 62
    4f64:	e7 97       	sbiw	r28, 0x37	; 55
    4f66:	0f b6       	in	r0, 0x3f	; 63
    4f68:	f8 94       	cli
    4f6a:	de bf       	out	0x3e, r29	; 62
    4f6c:	0f be       	out	0x3f, r0	; 63
    4f6e:	cd bf       	out	0x3d, r28	; 61
    4f70:	4c 01       	movw	r8, r24
    4f72:	8b 01       	movw	r16, r22
    4f74:	3c 01       	movw	r6, r24
    4f76:	83 e1       	ldi	r24, 0x13	; 19
    4f78:	68 0e       	add	r6, r24
    4f7a:	71 1c       	adc	r7, r1
    4f7c:	c3 01       	movw	r24, r6
    4f7e:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN3PIDC1Ev>
	this->model = model;
    4f82:	f4 01       	movw	r30, r8
    4f84:	12 8b       	std	Z+18, r17	; 0x12
    4f86:	01 8b       	std	Z+17, r16	; 0x11
	autopilotTargetHeading = model->getAutopilotTargetHeading() + 720;
    4f88:	c8 01       	movw	r24, r16
    4f8a:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    4f8e:	20 e0       	ldi	r18, 0x00	; 0
    4f90:	30 e0       	ldi	r19, 0x00	; 0
    4f92:	44 e3       	ldi	r20, 0x34	; 52
    4f94:	54 e4       	ldi	r21, 0x44	; 68
    4f96:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    4f9a:	6b 01       	movw	r12, r22
    4f9c:	7c 01       	movw	r14, r24
    4f9e:	98 2f       	mov	r25, r24
    4fa0:	4c 2d       	mov	r20, r12
    4fa2:	5d 2d       	mov	r21, r13
    4fa4:	69 2f       	mov	r22, r25
    4fa6:	7f 2d       	mov	r23, r15
    4fa8:	f4 01       	movw	r30, r8
    4faa:	40 83       	st	Z, r20
    4fac:	51 83       	std	Z+1, r21	; 0x01
    4fae:	62 83       	std	Z+2, r22	; 0x02
    4fb0:	73 83       	std	Z+3, r23	; 0x03
	autopilotCurrentHeading = autopilotTargetHeading + model->getAutopilotOffCourse();
    4fb2:	c8 01       	movw	r24, r16
    4fb4:	0e 94 92 2b 	call	0x5724	; 0x5724 <_ZN14FreeBoardModel21getAutopilotOffCourseEv>
    4fb8:	9b 01       	movw	r18, r22
    4fba:	ac 01       	movw	r20, r24
    4fbc:	6c 2d       	mov	r22, r12
    4fbe:	7d 2d       	mov	r23, r13
    4fc0:	8e 2d       	mov	r24, r14
    4fc2:	9f 2d       	mov	r25, r15
    4fc4:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    4fc8:	f4 01       	movw	r30, r8
    4fca:	64 83       	std	Z+4, r22	; 0x04
    4fcc:	75 83       	std	Z+5, r23	; 0x05
    4fce:	86 83       	std	Z+6, r24	; 0x06
    4fd0:	97 83       	std	Z+7, r25	; 0x07
	autopilotRudderCommand = model->getAutopilotRudderCommand();
    4fd2:	c8 01       	movw	r24, r16
    4fd4:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <_ZN14FreeBoardModel25getAutopilotRudderCommandEv>
    4fd8:	f4 01       	movw	r30, r8
    4fda:	60 87       	std	Z+8, r22	; 0x08
    4fdc:	71 87       	std	Z+9, r23	; 0x09
    4fde:	82 87       	std	Z+10, r24	; 0x0a
    4fe0:	93 87       	std	Z+11, r25	; 0x0b
	lastDirection=true;
    4fe2:	81 e0       	ldi	r24, 0x01	; 1
    4fe4:	80 8b       	std	Z+16, r24	; 0x10
	this->headingPid = PID(&autopilotCurrentHeading, &autopilotRudderCommand, &autopilotTargetHeading, P_Param, I_Param, D_Param, REVERSE);
    4fe6:	a4 01       	movw	r20, r8
    4fe8:	48 5f       	subi	r20, 0xF8	; 248
    4fea:	5f 4f       	sbci	r21, 0xFF	; 255
    4fec:	b4 01       	movw	r22, r8
    4fee:	6c 5f       	subi	r22, 0xFC	; 252
    4ff0:	7f 4f       	sbci	r23, 0xFF	; 255
    4ff2:	1f 92       	push	r1
    4ff4:	8f 93       	push	r24
    4ff6:	8f e3       	ldi	r24, 0x3F	; 63
    4ff8:	8f 93       	push	r24
    4ffa:	85 e0       	ldi	r24, 0x05	; 5
    4ffc:	8f 93       	push	r24
    4ffe:	8e e1       	ldi	r24, 0x1E	; 30
    5000:	8f 93       	push	r24
    5002:	88 eb       	ldi	r24, 0xB8	; 184
    5004:	8f 93       	push	r24
    5006:	8a e0       	ldi	r24, 0x0A	; 10
    5008:	a8 2e       	mov	r10, r24
    500a:	87 ed       	ldi	r24, 0xD7	; 215
    500c:	b8 2e       	mov	r11, r24
    500e:	83 ea       	ldi	r24, 0xA3	; 163
    5010:	c8 2e       	mov	r12, r24
    5012:	8d e3       	ldi	r24, 0x3D	; 61
    5014:	d8 2e       	mov	r13, r24
    5016:	16 e6       	ldi	r17, 0x66	; 102
    5018:	e1 2e       	mov	r14, r17
    501a:	fe 2c       	mov	r15, r14
    501c:	06 ee       	ldi	r16, 0xE6	; 230
    501e:	1e e3       	ldi	r17, 0x3E	; 62
    5020:	94 01       	movw	r18, r8
    5022:	ce 01       	movw	r24, r28
    5024:	01 96       	adiw	r24, 0x01	; 1
    5026:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <_ZN3PIDC1EPdS0_S0_dddi>
    502a:	87 e3       	ldi	r24, 0x37	; 55
    502c:	fe 01       	movw	r30, r28
    502e:	31 96       	adiw	r30, 0x01	; 1
    5030:	d3 01       	movw	r26, r6
    5032:	01 90       	ld	r0, Z+
    5034:	0d 92       	st	X+, r0
    5036:	8a 95       	dec	r24
    5038:	e1 f7       	brne	.-8      	; 0x5032 <_ZN9AutopilotC1EP14FreeBoardModel+0xee>

	headingPid.SetOutputLimits(0.0, 66.0); //output limits
    503a:	00 e0       	ldi	r16, 0x00	; 0
    503c:	10 e0       	ldi	r17, 0x00	; 0
    503e:	24 e8       	ldi	r18, 0x84	; 132
    5040:	32 e4       	ldi	r19, 0x42	; 66
    5042:	40 e0       	ldi	r20, 0x00	; 0
    5044:	50 e0       	ldi	r21, 0x00	; 0
    5046:	ba 01       	movw	r22, r20
    5048:	c3 01       	movw	r24, r6
    504a:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <_ZN3PID15SetOutputLimitsEdd>
	headingPid.SetSampleTime(100);
    504e:	64 e6       	ldi	r22, 0x64	; 100
    5050:	70 e0       	ldi	r23, 0x00	; 0
    5052:	c3 01       	movw	r24, r6
    5054:	0e 94 85 1a 	call	0x350a	; 0x350a <_ZN3PID13SetSampleTimeEi>
    5058:	0f 90       	pop	r0
    505a:	0f 90       	pop	r0
    505c:	0f 90       	pop	r0
    505e:	0f 90       	pop	r0
    5060:	0f 90       	pop	r0
    5062:	0f 90       	pop	r0

}
    5064:	e7 96       	adiw	r28, 0x37	; 55
    5066:	0f b6       	in	r0, 0x3f	; 63
    5068:	f8 94       	cli
    506a:	de bf       	out	0x3e, r29	; 62
    506c:	0f be       	out	0x3f, r0	; 63
    506e:	cd bf       	out	0x3d, r28	; 61
    5070:	df 91       	pop	r29
    5072:	cf 91       	pop	r28
    5074:	1f 91       	pop	r17
    5076:	0f 91       	pop	r16
    5078:	ff 90       	pop	r15
    507a:	ef 90       	pop	r14
    507c:	df 90       	pop	r13
    507e:	cf 90       	pop	r12
    5080:	bf 90       	pop	r11
    5082:	af 90       	pop	r10
    5084:	9f 90       	pop	r9
    5086:	8f 90       	pop	r8
    5088:	7f 90       	pop	r7
    508a:	6f 90       	pop	r6
    508c:	08 95       	ret

0000508e <_ZN9AutopilotD1Ev>:
Autopilot::~Autopilot() {
    508e:	08 95       	ret

00005090 <_ZN9Autopilot13calcAutoPilotEv>:

}

void Autopilot::calcAutoPilot() {
    5090:	8f 92       	push	r8
    5092:	9f 92       	push	r9
    5094:	af 92       	push	r10
    5096:	bf 92       	push	r11
    5098:	cf 92       	push	r12
    509a:	df 92       	push	r13
    509c:	ef 92       	push	r14
    509e:	ff 92       	push	r15
    50a0:	0f 93       	push	r16
    50a2:	1f 93       	push	r17
    50a4:	cf 93       	push	r28
    50a6:	df 93       	push	r29
    50a8:	ec 01       	movw	r28, r24
	//we dont do this if the autopilot is MANUAL
	if (model->isAutopilotOn()) {
    50aa:	89 89       	ldd	r24, Y+17	; 0x11
    50ac:	9a 89       	ldd	r25, Y+18	; 0x12
    50ae:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <_ZN14FreeBoardModel13isAutopilotOnEv>
    50b2:	8e 01       	movw	r16, r28
    50b4:	0d 5e       	subi	r16, 0xED	; 237
    50b6:	1f 4f       	sbci	r17, 0xFF	; 255
    50b8:	88 23       	and	r24, r24
    50ba:	09 f4       	brne	.+2      	; 0x50be <_ZN9Autopilot13calcAutoPilotEv+0x2e>
    50bc:	cd c0       	rjmp	.+410    	; 0x5258 <_ZN9Autopilot13calcAutoPilotEv+0x1c8>
		//does nothing if its already on, inits if off
		headingPid.SetMode(AUTOMATIC);
    50be:	61 e0       	ldi	r22, 0x01	; 1
    50c0:	70 e0       	ldi	r23, 0x00	; 0
    50c2:	c8 01       	movw	r24, r16
    50c4:	0e 94 96 1b 	call	0x372c	; 0x372c <_ZN3PID7SetModeEi>
		autopilotTargetHeading = model->getAutopilotTargetHeading() + 720;
    50c8:	89 89       	ldd	r24, Y+17	; 0x11
    50ca:	9a 89       	ldd	r25, Y+18	; 0x12
    50cc:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    50d0:	20 e0       	ldi	r18, 0x00	; 0
    50d2:	30 e0       	ldi	r19, 0x00	; 0
    50d4:	44 e3       	ldi	r20, 0x34	; 52
    50d6:	54 e4       	ldi	r21, 0x44	; 68
    50d8:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    50dc:	6b 01       	movw	r12, r22
    50de:	7c 01       	movw	r14, r24
    50e0:	98 2f       	mov	r25, r24
    50e2:	4c 2d       	mov	r20, r12
    50e4:	5d 2d       	mov	r21, r13
    50e6:	69 2f       	mov	r22, r25
    50e8:	7f 2d       	mov	r23, r15
    50ea:	48 83       	st	Y, r20
    50ec:	59 83       	std	Y+1, r21	; 0x01
    50ee:	6a 83       	std	Y+2, r22	; 0x02
    50f0:	7b 83       	std	Y+3, r23	; 0x03
		autopilotCurrentHeading = autopilotTargetHeading + model->getAutopilotOffCourse();
    50f2:	89 89       	ldd	r24, Y+17	; 0x11
    50f4:	9a 89       	ldd	r25, Y+18	; 0x12
    50f6:	0e 94 92 2b 	call	0x5724	; 0x5724 <_ZN14FreeBoardModel21getAutopilotOffCourseEv>
    50fa:	9b 01       	movw	r18, r22
    50fc:	ac 01       	movw	r20, r24
    50fe:	6c 2d       	mov	r22, r12
    5100:	7d 2d       	mov	r23, r13
    5102:	8e 2d       	mov	r24, r14
    5104:	9f 2d       	mov	r25, r15
    5106:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    510a:	6c 83       	std	Y+4, r22	; 0x04
    510c:	7d 83       	std	Y+5, r23	; 0x05
    510e:	8e 83       	std	Y+6, r24	; 0x06
    5110:	9f 83       	std	Y+7, r25	; 0x07
		headingPid.Compute();
    5112:	c8 01       	movw	r24, r16
    5114:	0e 94 8f 18 	call	0x311e	; 0x311e <_ZN3PID7ComputeEv>
		//check deadzone
		if (abs(autopilotRudderCommand - lastRudderCommand) > model->getAutopilotDeadZone()) {
    5118:	2c 85       	ldd	r18, Y+12	; 0x0c
    511a:	3d 85       	ldd	r19, Y+13	; 0x0d
    511c:	4e 85       	ldd	r20, Y+14	; 0x0e
    511e:	5f 85       	ldd	r21, Y+15	; 0x0f
    5120:	68 85       	ldd	r22, Y+8	; 0x08
    5122:	79 85       	ldd	r23, Y+9	; 0x09
    5124:	8a 85       	ldd	r24, Y+10	; 0x0a
    5126:	9b 85       	ldd	r25, Y+11	; 0x0b
    5128:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    512c:	b6 2f       	mov	r27, r22
    512e:	a7 2f       	mov	r26, r23
    5130:	46 2f       	mov	r20, r22
    5132:	57 2f       	mov	r21, r23
    5134:	68 2f       	mov	r22, r24
    5136:	79 2f       	mov	r23, r25
    5138:	4a 01       	movw	r8, r20
    513a:	5b 01       	movw	r10, r22
    513c:	20 e0       	ldi	r18, 0x00	; 0
    513e:	30 e0       	ldi	r19, 0x00	; 0
    5140:	a9 01       	movw	r20, r18
    5142:	6b 2f       	mov	r22, r27
    5144:	7a 2f       	mov	r23, r26
    5146:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    514a:	18 16       	cp	r1, r24
    514c:	24 f0       	brlt	.+8      	; 0x5156 <_ZN9Autopilot13calcAutoPilotEv+0xc6>
    514e:	b7 fa       	bst	r11, 7
    5150:	b0 94       	com	r11
    5152:	b7 f8       	bld	r11, 7
    5154:	b0 94       	com	r11
    5156:	89 89       	ldd	r24, Y+17	; 0x11
    5158:	9a 89       	ldd	r25, Y+18	; 0x12
    515a:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <_ZN14FreeBoardModel20getAutopilotDeadZoneEv>
    515e:	bc 01       	movw	r22, r24
    5160:	88 27       	eor	r24, r24
    5162:	77 fd       	sbrc	r23, 7
    5164:	80 95       	com	r24
    5166:	98 2f       	mov	r25, r24
    5168:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__floatsisf>
    516c:	9b 01       	movw	r18, r22
    516e:	ac 01       	movw	r20, r24
    5170:	c5 01       	movw	r24, r10
    5172:	b4 01       	movw	r22, r8
    5174:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    5178:	18 16       	cp	r1, r24
    517a:	0c f0       	brlt	.+2      	; 0x517e <_ZN9Autopilot13calcAutoPilotEv+0xee>
    517c:	7e c0       	rjmp	.+252    	; 0x527a <_ZN9Autopilot13calcAutoPilotEv+0x1ea>
			//then we move the rudder.
			//is it changing movement direction, we need to compensate for slack
			if (lastDirection && autopilotRudderCommand > lastRudderCommand) {
    517e:	88 89       	ldd	r24, Y+16	; 0x10
    5180:	c8 84       	ldd	r12, Y+8	; 0x08
    5182:	d9 84       	ldd	r13, Y+9	; 0x09
    5184:	ea 84       	ldd	r14, Y+10	; 0x0a
    5186:	fb 84       	ldd	r15, Y+11	; 0x0b
    5188:	8c 84       	ldd	r8, Y+12	; 0x0c
    518a:	9d 84       	ldd	r9, Y+13	; 0x0d
    518c:	ae 84       	ldd	r10, Y+14	; 0x0e
    518e:	bf 84       	ldd	r11, Y+15	; 0x0f
    5190:	a5 01       	movw	r20, r10
    5192:	94 01       	movw	r18, r8
    5194:	88 23       	and	r24, r24
    5196:	11 f1       	breq	.+68     	; 0x51dc <_ZN9Autopilot13calcAutoPilotEv+0x14c>
    5198:	c7 01       	movw	r24, r14
    519a:	b6 01       	movw	r22, r12
    519c:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    51a0:	18 16       	cp	r1, r24
    51a2:	0c f4       	brge	.+2      	; 0x51a6 <_ZN9Autopilot13calcAutoPilotEv+0x116>
    51a4:	21 c0       	rjmp	.+66     	; 0x51e8 <_ZN9Autopilot13calcAutoPilotEv+0x158>
				//same direction to stbd, no slack
				lastRudderCommand = autopilotRudderCommand;
			}else if (lastDirection && autopilotRudderCommand < lastRudderCommand) {
    51a6:	a5 01       	movw	r20, r10
    51a8:	94 01       	movw	r18, r8
    51aa:	c7 01       	movw	r24, r14
    51ac:	b6 01       	movw	r22, r12
    51ae:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    51b2:	87 ff       	sbrs	r24, 7
    51b4:	3d c0       	rjmp	.+122    	; 0x5230 <_ZN9Autopilot13calcAutoPilotEv+0x1a0>
				//changed direction to port, subtract slack
				lastDirection = false;
    51b6:	18 8a       	std	Y+16, r1	; 0x10
				lastRudderCommand = autopilotRudderCommand - model->getAutopilotSlack();
    51b8:	89 89       	ldd	r24, Y+17	; 0x11
    51ba:	9a 89       	ldd	r25, Y+18	; 0x12
    51bc:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <_ZN14FreeBoardModel17getAutopilotSlackEv>
    51c0:	bc 01       	movw	r22, r24
    51c2:	88 27       	eor	r24, r24
    51c4:	77 fd       	sbrc	r23, 7
    51c6:	80 95       	com	r24
    51c8:	98 2f       	mov	r25, r24
    51ca:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__floatsisf>
    51ce:	9b 01       	movw	r18, r22
    51d0:	ac 01       	movw	r20, r24
    51d2:	c7 01       	movw	r24, r14
    51d4:	b6 01       	movw	r22, r12
    51d6:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    51da:	26 c0       	rjmp	.+76     	; 0x5228 <_ZN9Autopilot13calcAutoPilotEv+0x198>
			}else if (!lastDirection && autopilotRudderCommand < lastRudderCommand) {
    51dc:	c7 01       	movw	r24, r14
    51de:	b6 01       	movw	r22, r12
    51e0:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    51e4:	87 ff       	sbrs	r24, 7
    51e6:	05 c0       	rjmp	.+10     	; 0x51f2 <_ZN9Autopilot13calcAutoPilotEv+0x162>
				//same direction to port
				lastRudderCommand = autopilotRudderCommand;
    51e8:	cc 86       	std	Y+12, r12	; 0x0c
    51ea:	dd 86       	std	Y+13, r13	; 0x0d
    51ec:	ee 86       	std	Y+14, r14	; 0x0e
    51ee:	ff 86       	std	Y+15, r15	; 0x0f
    51f0:	1f c0       	rjmp	.+62     	; 0x5230 <_ZN9Autopilot13calcAutoPilotEv+0x1a0>
			}else if (!lastDirection && autopilotRudderCommand > lastRudderCommand) {
    51f2:	a5 01       	movw	r20, r10
    51f4:	94 01       	movw	r18, r8
    51f6:	c7 01       	movw	r24, r14
    51f8:	b6 01       	movw	r22, r12
    51fa:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    51fe:	18 16       	cp	r1, r24
    5200:	bc f4       	brge	.+46     	; 0x5230 <_ZN9Autopilot13calcAutoPilotEv+0x1a0>
				//changed direction to stbd, add slack
				lastDirection = true;
    5202:	81 e0       	ldi	r24, 0x01	; 1
    5204:	88 8b       	std	Y+16, r24	; 0x10
				lastRudderCommand = autopilotRudderCommand + model->getAutopilotSlack();
    5206:	89 89       	ldd	r24, Y+17	; 0x11
    5208:	9a 89       	ldd	r25, Y+18	; 0x12
    520a:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <_ZN14FreeBoardModel17getAutopilotSlackEv>
    520e:	bc 01       	movw	r22, r24
    5210:	88 27       	eor	r24, r24
    5212:	77 fd       	sbrc	r23, 7
    5214:	80 95       	com	r24
    5216:	98 2f       	mov	r25, r24
    5218:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__floatsisf>
    521c:	9b 01       	movw	r18, r22
    521e:	ac 01       	movw	r20, r24
    5220:	c7 01       	movw	r24, r14
    5222:	b6 01       	movw	r22, r12
    5224:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    5228:	6c 87       	std	Y+12, r22	; 0x0c
    522a:	7d 87       	std	Y+13, r23	; 0x0d
    522c:	8e 87       	std	Y+14, r24	; 0x0e
    522e:	9f 87       	std	Y+15, r25	; 0x0f
			}
			//constrain(lastRudderCommand,0.0,66.0);
			//update model
			model->setAutopilotRudderCommand(lastRudderCommand);
    5230:	4c 85       	ldd	r20, Y+12	; 0x0c
    5232:	5d 85       	ldd	r21, Y+13	; 0x0d
    5234:	6e 85       	ldd	r22, Y+14	; 0x0e
    5236:	7f 85       	ldd	r23, Y+15	; 0x0f
    5238:	89 89       	ldd	r24, Y+17	; 0x11
    523a:	9a 89       	ldd	r25, Y+18	; 0x12
		}

	} else {
		headingPid.SetMode(MANUAL);
	}
}
    523c:	df 91       	pop	r29
    523e:	cf 91       	pop	r28
    5240:	1f 91       	pop	r17
    5242:	0f 91       	pop	r16
    5244:	ff 90       	pop	r15
    5246:	ef 90       	pop	r14
    5248:	df 90       	pop	r13
    524a:	cf 90       	pop	r12
    524c:	bf 90       	pop	r11
    524e:	af 90       	pop	r10
    5250:	9f 90       	pop	r9
    5252:	8f 90       	pop	r8
				lastDirection = true;
				lastRudderCommand = autopilotRudderCommand + model->getAutopilotSlack();
			}
			//constrain(lastRudderCommand,0.0,66.0);
			//update model
			model->setAutopilotRudderCommand(lastRudderCommand);
    5254:	0c 94 7b 2e 	jmp	0x5cf6	; 0x5cf6 <_ZN14FreeBoardModel25setAutopilotRudderCommandEd>
		}

	} else {
		headingPid.SetMode(MANUAL);
    5258:	60 e0       	ldi	r22, 0x00	; 0
    525a:	70 e0       	ldi	r23, 0x00	; 0
    525c:	c8 01       	movw	r24, r16
	}
}
    525e:	df 91       	pop	r29
    5260:	cf 91       	pop	r28
    5262:	1f 91       	pop	r17
    5264:	0f 91       	pop	r16
    5266:	ff 90       	pop	r15
    5268:	ef 90       	pop	r14
    526a:	df 90       	pop	r13
    526c:	cf 90       	pop	r12
    526e:	bf 90       	pop	r11
    5270:	af 90       	pop	r10
    5272:	9f 90       	pop	r9
    5274:	8f 90       	pop	r8
			//update model
			model->setAutopilotRudderCommand(lastRudderCommand);
		}

	} else {
		headingPid.SetMode(MANUAL);
    5276:	0c 94 96 1b 	jmp	0x372c	; 0x372c <_ZN3PID7SetModeEi>
	}
}
    527a:	df 91       	pop	r29
    527c:	cf 91       	pop	r28
    527e:	1f 91       	pop	r17
    5280:	0f 91       	pop	r16
    5282:	ff 90       	pop	r15
    5284:	ef 90       	pop	r14
    5286:	df 90       	pop	r13
    5288:	cf 90       	pop	r12
    528a:	bf 90       	pop	r11
    528c:	af 90       	pop	r10
    528e:	9f 90       	pop	r9
    5290:	8f 90       	pop	r8
    5292:	08 95       	ret

00005294 <_ZN14HardwareSerial5writeEi>:
    //support 9 bit seatalk
    virtual size_t write9(uint8_t c, bool p);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    5294:	dc 01       	movw	r26, r24
    5296:	ed 91       	ld	r30, X+
    5298:	fc 91       	ld	r31, X
    529a:	01 90       	ld	r0, Z+
    529c:	f0 81       	ld	r31, Z
    529e:	e0 2d       	mov	r30, r0
    52a0:	09 94       	ijmp

000052a2 <_ZN14FreeBoardModelC1Ev>:
 *      Author: robert
 */

#include "FreeBoardModel.h"

FreeBoardModel::FreeBoardModel() {
    52a2:	0f 93       	push	r16
    52a4:	1f 93       	push	r17
    52a6:	fc 01       	movw	r30, r24
	alarmLast = 0; //millis time of last beep state change
    52a8:	10 82       	st	Z, r1
    52aa:	11 82       	std	Z+1, r1	; 0x01
    52ac:	12 82       	std	Z+2, r1	; 0x02
    52ae:	13 82       	std	Z+3, r1	; 0x03
	alarmSnooze = 0; //5 minute alarm snooze
    52b0:	14 82       	std	Z+4, r1	; 0x04
    52b2:	15 82       	std	Z+5, r1	; 0x05
    52b4:	16 82       	std	Z+6, r1	; 0x06
    52b6:	17 82       	std	Z+7, r1	; 0x07
	//unsigned long alarmTriggered ; //true if any alarm is triggered - derived

	//anchor
	//float anchorRadius; //anchor alarm radius in meters
	anchorState.anchorRadiusDeg = 0.0; //anchor alarm radius in decimal degrees, eg 1deg = 60NM.
    52b8:	10 8a       	std	Z+16, r1	; 0x10
    52ba:	11 8a       	std	Z+17, r1	; 0x11
    52bc:	12 8a       	std	Z+18, r1	; 0x12
    52be:	13 8a       	std	Z+19, r1	; 0x13

	//anchor alarm data
	//float anchorLat; // variable for reading the anchor latitude
	//float anchorLon; // variable for reading the anchor longitude
	anchorState.anchorDistance = 0.0;
    52c0:	14 8a       	std	Z+20, r1	; 0x14
    52c2:	15 8a       	std	Z+21, r1	; 0x15
    52c4:	16 8a       	std	Z+22, r1	; 0x16
    52c6:	17 8a       	std	Z+23, r1	; 0x17
	anchorState.anchorMaxDistance = 0.0;
    52c8:	10 8e       	std	Z+24, r1	; 0x18
    52ca:	11 8e       	std	Z+25, r1	; 0x19
    52cc:	12 8e       	std	Z+26, r1	; 0x1a
    52ce:	13 8e       	std	Z+27, r1	; 0x1b
	//bool anchorAlarmOn; //flag to turn anchor alarm on/off toggle
	anchorState.anchorAlarmTriggered = false; //set to true to trigger anchor alarm
    52d0:	14 8e       	std	Z+28, r1	; 0x1c

	//a box around the anchor, shrinks with every GPS reading to home in on the anchor itself
	anchorState.anchorN = 90.0;
    52d2:	40 e0       	ldi	r20, 0x00	; 0
    52d4:	50 e0       	ldi	r21, 0x00	; 0
    52d6:	64 eb       	ldi	r22, 0xB4	; 180
    52d8:	72 e4       	ldi	r23, 0x42	; 66
    52da:	45 8f       	std	Z+29, r20	; 0x1d
    52dc:	56 8f       	std	Z+30, r21	; 0x1e
    52de:	67 8f       	std	Z+31, r22	; 0x1f
    52e0:	70 a3       	std	Z+32, r23	; 0x20
	anchorState.anchorS = -90.0;
    52e2:	40 e0       	ldi	r20, 0x00	; 0
    52e4:	50 e0       	ldi	r21, 0x00	; 0
    52e6:	64 eb       	ldi	r22, 0xB4	; 180
    52e8:	72 ec       	ldi	r23, 0xC2	; 194
    52ea:	41 a3       	std	Z+33, r20	; 0x21
    52ec:	52 a3       	std	Z+34, r21	; 0x22
    52ee:	63 a3       	std	Z+35, r22	; 0x23
    52f0:	74 a3       	std	Z+36, r23	; 0x24
	anchorState.anchorE = 180.0;
    52f2:	40 e0       	ldi	r20, 0x00	; 0
    52f4:	50 e0       	ldi	r21, 0x00	; 0
    52f6:	64 e3       	ldi	r22, 0x34	; 52
    52f8:	73 e4       	ldi	r23, 0x43	; 67
    52fa:	45 a3       	std	Z+37, r20	; 0x25
    52fc:	56 a3       	std	Z+38, r21	; 0x26
    52fe:	67 a3       	std	Z+39, r22	; 0x27
    5300:	70 a7       	std	Z+40, r23	; 0x28
	anchorState.anchorW = -180.0;
    5302:	40 e0       	ldi	r20, 0x00	; 0
    5304:	50 e0       	ldi	r21, 0x00	; 0
    5306:	64 e3       	ldi	r22, 0x34	; 52
    5308:	73 ec       	ldi	r23, 0xC3	; 195
    530a:	41 a7       	std	Z+41, r20	; 0x29
    530c:	52 a7       	std	Z+42, r21	; 0x2a
    530e:	63 a7       	std	Z+43, r22	; 0x2b
    5310:	74 a7       	std	Z+44, r23	; 0x2c

	//autopilot
	autopilotState.autopilotOn=false;
    5312:	15 a6       	std	Z+45, r1	; 0x2d
	//disengage the autopilot if we reboot!!
	//Dont want to go screaming off on wrong course.
	autopilotState.autopilotReference = AUTOPILOT_COMPASS;
    5314:	83 e4       	ldi	r24, 0x43	; 67
    5316:	82 ab       	std	Z+50, r24	; 0x32
	autopilotState.autopilotTargetHeading = 0; //Setpoint
    5318:	13 aa       	std	Z+51, r1	; 0x33
    531a:	14 aa       	std	Z+52, r1	; 0x34
    531c:	15 aa       	std	Z+53, r1	; 0x35
    531e:	16 aa       	std	Z+54, r1	; 0x36
	autopilotState.autopilotRudderCommand = 33; //Output (rudder central)
    5320:	40 e0       	ldi	r20, 0x00	; 0
    5322:	50 e0       	ldi	r21, 0x00	; 0
    5324:	64 e0       	ldi	r22, 0x04	; 4
    5326:	72 e4       	ldi	r23, 0x42	; 66
    5328:	47 ab       	std	Z+55, r20	; 0x37
    532a:	50 af       	std	Z+56, r21	; 0x38
    532c:	61 af       	std	Z+57, r22	; 0x39
    532e:	72 af       	std	Z+58, r23	; 0x3a
	//bool autopilotAlarmOn;
	autopilotState.autopilotAlarmTriggered = false;
    5330:	13 ae       	std	Z+59, r1	; 0x3b
	autopilotState.autopilotAlarmMaxXTError = 100; // +/- meters cross track error
    5332:	40 e0       	ldi	r20, 0x00	; 0
    5334:	50 e0       	ldi	r21, 0x00	; 0
    5336:	68 ec       	ldi	r22, 0xC8	; 200
    5338:	72 e4       	ldi	r23, 0x42	; 66
    533a:	44 af       	std	Z+60, r20	; 0x3c
    533c:	55 af       	std	Z+61, r21	; 0x3d
    533e:	66 af       	std	Z+62, r22	; 0x3e
    5340:	77 af       	std	Z+63, r23	; 0x3f
	autopilotState.autopilotAlarmMaxWindError = 10; // +/- wind angle change, for over 1 minute
    5342:	df 01       	movw	r26, r30
    5344:	a0 5c       	subi	r26, 0xC0	; 192
    5346:	bf 4f       	sbci	r27, 0xFF	; 255
    5348:	40 e0       	ldi	r20, 0x00	; 0
    534a:	50 e0       	ldi	r21, 0x00	; 0
    534c:	60 e2       	ldi	r22, 0x20	; 32
    534e:	71 e4       	ldi	r23, 0x41	; 65
    5350:	4d 93       	st	X+, r20
    5352:	5d 93       	st	X+, r21
    5354:	6d 93       	st	X+, r22
    5356:	7c 93       	st	X, r23
    5358:	13 97       	sbiw	r26, 0x03	; 3
	autopilotState.autopilotAlarmMaxCourseError = 10; // +/- course error, for over 1 minute
    535a:	df 01       	movw	r26, r30
    535c:	ac 5b       	subi	r26, 0xBC	; 188
    535e:	bf 4f       	sbci	r27, 0xFF	; 255
    5360:	4d 93       	st	X+, r20
    5362:	5d 93       	st	X+, r21
    5364:	6d 93       	st	X+, r22
    5366:	7c 93       	st	X, r23
    5368:	13 97       	sbiw	r26, 0x03	; 3

	//compass
	magneticHeading=0;
    536a:	10 86       	std	Z+8, r1	; 0x08
    536c:	11 86       	std	Z+9, r1	; 0x09
    536e:	12 86       	std	Z+10, r1	; 0x0a
    5370:	13 86       	std	Z+11, r1	; 0x0b
	declination=0;
    5372:	14 86       	std	Z+12, r1	; 0x0c
    5374:	15 86       	std	Z+13, r1	; 0x0d
    5376:	16 86       	std	Z+14, r1	; 0x0e
    5378:	17 86       	std	Z+15, r1	; 0x0f
	//gps
	gpsState.gpsDecode = false; //flag to indicate a new sentence was decoded.
    537a:	df 01       	movw	r26, r30
    537c:	a8 5b       	subi	r26, 0xB8	; 184
    537e:	bf 4f       	sbci	r27, 0xFF	; 255
    5380:	1c 92       	st	X, r1
	gpsState.gpsLastFix = 0; //time of last good gps fix.
    5382:	df 01       	movw	r26, r30
    5384:	a7 5b       	subi	r26, 0xB7	; 183
    5386:	bf 4f       	sbci	r27, 0xFF	; 255
    5388:	1d 92       	st	X+, r1
    538a:	1d 92       	st	X+, r1
    538c:	1d 92       	st	X+, r1
    538e:	1c 92       	st	X, r1
    5390:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsUtc = 0; // decimal value of UTC term in last full GPRMC sentence
    5392:	df 01       	movw	r26, r30
    5394:	a3 5b       	subi	r26, 0xB3	; 179
    5396:	bf 4f       	sbci	r27, 0xFF	; 255
    5398:	1d 92       	st	X+, r1
    539a:	1d 92       	st	X+, r1
    539c:	1d 92       	st	X+, r1
    539e:	1c 92       	st	X, r1
    53a0:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsStatus = 'V'; //  status character in last full GPRMC sentence ('A' or 'V')
    53a2:	df 01       	movw	r26, r30
    53a4:	af 5a       	subi	r26, 0xAF	; 175
    53a6:	bf 4f       	sbci	r27, 0xFF	; 255
    53a8:	86 e5       	ldi	r24, 0x56	; 86
    53aa:	8c 93       	st	X, r24
	gpsState.gpsLatitude = 0.0; // signed degree-decimal value of latitude terms in last full GPRMC sentence
    53ac:	df 01       	movw	r26, r30
    53ae:	ae 5a       	subi	r26, 0xAE	; 174
    53b0:	bf 4f       	sbci	r27, 0xFF	; 255
    53b2:	1d 92       	st	X+, r1
    53b4:	1d 92       	st	X+, r1
    53b6:	1d 92       	st	X+, r1
    53b8:	1c 92       	st	X, r1
    53ba:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsLongitude = 0.0; // signed degree-decimal value of longitude terms in last full GPRMC sentence
    53bc:	df 01       	movw	r26, r30
    53be:	aa 5a       	subi	r26, 0xAA	; 170
    53c0:	bf 4f       	sbci	r27, 0xFF	; 255
    53c2:	1d 92       	st	X+, r1
    53c4:	1d 92       	st	X+, r1
    53c6:	1d 92       	st	X+, r1
    53c8:	1c 92       	st	X, r1
    53ca:	13 97       	sbiw	r26, 0x03	; 3
	//float gpsSpeedUnit; //unit multiplier for gpsSpeed. 1.0 = KNT,1.1507794	=MPH, see nmea.h
	gpsState.gpsSpeed = 0.0; // speed-on-ground term in last full GPRMC sentence
    53cc:	df 01       	movw	r26, r30
    53ce:	a6 5a       	subi	r26, 0xA6	; 166
    53d0:	bf 4f       	sbci	r27, 0xFF	; 255
    53d2:	1d 92       	st	X+, r1
    53d4:	1d 92       	st	X+, r1
    53d6:	1d 92       	st	X+, r1
    53d8:	1c 92       	st	X, r1
    53da:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsCourse = 0.0; // track-angle-made-good term in last full GPRMC sentence
    53dc:	df 01       	movw	r26, r30
    53de:	a2 5a       	subi	r26, 0xA2	; 162
    53e0:	bf 4f       	sbci	r27, 0xFF	; 255
    53e2:	1d 92       	st	X+, r1
    53e4:	1d 92       	st	X+, r1
    53e6:	1d 92       	st	X+, r1
    53e8:	1c 92       	st	X, r1
    53ea:	13 97       	sbiw	r26, 0x03	; 3
	//bool gpsAlarmOn; //true to engage alarm
	gpsState.gpsAlarmTriggered = false; //set to true to trigger gps alarm
    53ec:	df 01       	movw	r26, r30
    53ee:	ae 59       	subi	r26, 0x9E	; 158
    53f0:	bf 4f       	sbci	r27, 0xFF	; 255
    53f2:	1c 92       	st	X, r1
	//double gpsAlarmFixTime; //max time in millis without fix

	//seatalk
	//volatile bool radarAlarmOn; //set to true to enable radar alarm
	radarAlarmTriggered = false; //set to true to trigger radar alarm
    53f4:	df 01       	movw	r26, r30
    53f6:	ad 59       	subi	r26, 0x9D	; 157
    53f8:	bf 4f       	sbci	r27, 0xFF	; 255
    53fa:	1c 92       	st	X, r1
	//volatile bool mobAlarmOn; //set to true to enable mob alarm
	mobAlarmTriggered = false; //set to true to trigger MOB alarm
    53fc:	df 01       	movw	r26, r30
    53fe:	ac 59       	subi	r26, 0x9C	; 156
    5400:	bf 4f       	sbci	r27, 0xFF	; 255
    5402:	1c 92       	st	X, r1

	//wind
	windState.windLastUpdate = 0;
    5404:	df 01       	movw	r26, r30
    5406:	ab 59       	subi	r26, 0x9B	; 155
    5408:	bf 4f       	sbci	r27, 0xFF	; 255
    540a:	1d 92       	st	X+, r1
    540c:	1d 92       	st	X+, r1
    540e:	1d 92       	st	X+, r1
    5410:	1c 92       	st	X, r1
    5412:	13 97       	sbiw	r26, 0x03	; 3
	windState.windAverage = 0.0;
    5414:	df 01       	movw	r26, r30
    5416:	a7 59       	subi	r26, 0x97	; 151
    5418:	bf 4f       	sbci	r27, 0xFF	; 255
    541a:	1d 92       	st	X+, r1
    541c:	1d 92       	st	X+, r1
    541e:	1d 92       	st	X+, r1
    5420:	1c 92       	st	X, r1
    5422:	13 97       	sbiw	r26, 0x03	; 3
	//windState.windFactor=0;
	windState.windMax = 0;
    5424:	df 01       	movw	r26, r30
    5426:	a3 59       	subi	r26, 0x93	; 147
    5428:	bf 4f       	sbci	r27, 0xFF	; 255
    542a:	1d 92       	st	X+, r1
    542c:	1c 92       	st	X, r1
	windState.windApparentDir = 0;
    542e:	df 01       	movw	r26, r30
    5430:	a1 59       	subi	r26, 0x91	; 145
    5432:	bf 4f       	sbci	r27, 0xFF	; 255
    5434:	1d 92       	st	X+, r1
    5436:	1c 92       	st	X, r1
	windState.windTrueDir=0;
    5438:	df 01       	movw	r26, r30
    543a:	af 58       	subi	r26, 0x8F	; 143
    543c:	bf 4f       	sbci	r27, 0xFF	; 255
    543e:	1d 92       	st	X+, r1
    5440:	1c 92       	st	X, r1
	//int windAlarmSpeed;
	//bool windAlarmOn;
	windState.windAlarmTriggered = false;
    5442:	df 01       	movw	r26, r30
    5444:	ad 58       	subi	r26, 0x8D	; 141
    5446:	bf 4f       	sbci	r27, 0xFF	; 255
    5448:	1c 92       	st	X, r1

	//struct Configuration{
	config.anchorLat = 0.0;
    544a:	df 01       	movw	r26, r30
    544c:	ac 58       	subi	r26, 0x8C	; 140
    544e:	bf 4f       	sbci	r27, 0xFF	; 255
    5450:	1d 92       	st	X+, r1
    5452:	1d 92       	st	X+, r1
    5454:	1d 92       	st	X+, r1
    5456:	1c 92       	st	X, r1
    5458:	13 97       	sbiw	r26, 0x03	; 3
	config.anchorLon = 0.0;
    545a:	df 01       	movw	r26, r30
    545c:	a8 58       	subi	r26, 0x88	; 136
    545e:	bf 4f       	sbci	r27, 0xFF	; 255
    5460:	1d 92       	st	X+, r1
    5462:	1d 92       	st	X+, r1
    5464:	1d 92       	st	X+, r1
    5466:	1c 92       	st	X, r1
    5468:	13 97       	sbiw	r26, 0x03	; 3
	config.anchorRadius = 40.0;
    546a:	df 01       	movw	r26, r30
    546c:	a4 58       	subi	r26, 0x84	; 132
    546e:	bf 4f       	sbci	r27, 0xFF	; 255
    5470:	40 e0       	ldi	r20, 0x00	; 0
    5472:	50 e0       	ldi	r21, 0x00	; 0
    5474:	60 e2       	ldi	r22, 0x20	; 32
    5476:	72 e4       	ldi	r23, 0x42	; 66
    5478:	4d 93       	st	X+, r20
    547a:	5d 93       	st	X+, r21
    547c:	6d 93       	st	X+, r22
    547e:	7c 93       	st	X, r23
    5480:	13 97       	sbiw	r26, 0x03	; 3
	config.anchorAlarmOn = false;
    5482:	df 01       	movw	r26, r30
    5484:	a0 58       	subi	r26, 0x80	; 128
    5486:	bf 4f       	sbci	r27, 0xFF	; 255
    5488:	1c 92       	st	X, r1
	config.autopilotAlarmOn = false;
    548a:	df 01       	movw	r26, r30
    548c:	af 57       	subi	r26, 0x7F	; 127
    548e:	bf 4f       	sbci	r27, 0xFF	; 255
    5490:	1c 92       	st	X, r1
	config.autopilotDeadZone = 0;
    5492:	df 01       	movw	r26, r30
    5494:	ae 57       	subi	r26, 0x7E	; 126
    5496:	bf 4f       	sbci	r27, 0xFF	; 255
    5498:	1d 92       	st	X+, r1
    549a:	1c 92       	st	X, r1
	config.autopilotSlack = 0;
    549c:	df 01       	movw	r26, r30
    549e:	ac 57       	subi	r26, 0x7C	; 124
    54a0:	bf 4f       	sbci	r27, 0xFF	; 255
    54a2:	1d 92       	st	X+, r1
    54a4:	1c 92       	st	X, r1
	config.gpsSpeedUnit = KTS;
    54a6:	df 01       	movw	r26, r30
    54a8:	aa 57       	subi	r26, 0x7A	; 122
    54aa:	bf 4f       	sbci	r27, 0xFF	; 255
    54ac:	40 e0       	ldi	r20, 0x00	; 0
    54ae:	50 e0       	ldi	r21, 0x00	; 0
    54b0:	60 e8       	ldi	r22, 0x80	; 128
    54b2:	7f e3       	ldi	r23, 0x3F	; 63
    54b4:	4d 93       	st	X+, r20
    54b6:	5d 93       	st	X+, r21
    54b8:	6d 93       	st	X+, r22
    54ba:	7c 93       	st	X, r23
    54bc:	13 97       	sbiw	r26, 0x03	; 3
	config.gpsAlarmOn = false;
    54be:	df 01       	movw	r26, r30
    54c0:	a6 57       	subi	r26, 0x76	; 118
    54c2:	bf 4f       	sbci	r27, 0xFF	; 255
    54c4:	1c 92       	st	X, r1
	config.gpsAlarmFixTime = 1000l * 60 * 5; //5 min
    54c6:	df 01       	movw	r26, r30
    54c8:	a5 57       	subi	r26, 0x75	; 117
    54ca:	bf 4f       	sbci	r27, 0xFF	; 255
    54cc:	00 ee       	ldi	r16, 0xE0	; 224
    54ce:	13 e9       	ldi	r17, 0x93	; 147
    54d0:	24 e0       	ldi	r18, 0x04	; 4
    54d2:	30 e0       	ldi	r19, 0x00	; 0
    54d4:	0d 93       	st	X+, r16
    54d6:	1d 93       	st	X+, r17
    54d8:	2d 93       	st	X+, r18
    54da:	3c 93       	st	X, r19
    54dc:	13 97       	sbiw	r26, 0x03	; 3
	config.radarAlarmOn = false;
    54de:	df 01       	movw	r26, r30
    54e0:	a1 57       	subi	r26, 0x71	; 113
    54e2:	bf 4f       	sbci	r27, 0xFF	; 255
    54e4:	1c 92       	st	X, r1
	config.mobAlarmOn = false;
    54e6:	df 01       	movw	r26, r30
    54e8:	a0 57       	subi	r26, 0x70	; 112
    54ea:	bf 4f       	sbci	r27, 0xFF	; 255
    54ec:	1c 92       	st	X, r1
	config.windAlarmSpeed = 99;
    54ee:	df 01       	movw	r26, r30
    54f0:	af 56       	subi	r26, 0x6F	; 111
    54f2:	bf 4f       	sbci	r27, 0xFF	; 255
    54f4:	83 e6       	ldi	r24, 0x63	; 99
    54f6:	90 e0       	ldi	r25, 0x00	; 0
    54f8:	8d 93       	st	X+, r24
    54fa:	9c 93       	st	X, r25
	config.windAlarmOn = false;
    54fc:	df 01       	movw	r26, r30
    54fe:	ad 56       	subi	r26, 0x6D	; 109
    5500:	bf 4f       	sbci	r27, 0xFF	; 255
    5502:	1c 92       	st	X, r1
	config.windFactor = 1.0;
    5504:	df 01       	movw	r26, r30
    5506:	ac 56       	subi	r26, 0x6C	; 108
    5508:	bf 4f       	sbci	r27, 0xFF	; 255
    550a:	4d 93       	st	X+, r20
    550c:	5d 93       	st	X+, r21
    550e:	6d 93       	st	X+, r22
    5510:	7c 93       	st	X, r23
    5512:	13 97       	sbiw	r26, 0x03	; 3
	config.windZeroOffset = 0;
    5514:	df 01       	movw	r26, r30
    5516:	a8 56       	subi	r26, 0x68	; 104
    5518:	bf 4f       	sbci	r27, 0xFF	; 255
    551a:	1d 92       	st	X+, r1
    551c:	1c 92       	st	X, r1
	//}config;

//we change this if we change the struct so we can tell before reloading incompatible versions
	version = EEPROM_VER;
    551e:	e6 56       	subi	r30, 0x66	; 102
    5520:	ff 4f       	sbci	r31, 0xFF	; 255
    5522:	85 e0       	ldi	r24, 0x05	; 5
    5524:	90 e0       	ldi	r25, 0x00	; 0
    5526:	91 83       	std	Z+1, r25	; 0x01
    5528:	80 83       	st	Z, r24
}
    552a:	1f 91       	pop	r17
    552c:	0f 91       	pop	r16
    552e:	08 95       	ret

00005530 <_ZN14HardwareSerialC1ERKS_>:
    5530:	fc 01       	movw	r30, r24
    5532:	db 01       	movw	r26, r22
    5534:	12 96       	adiw	r26, 0x02	; 2
    5536:	8d 91       	ld	r24, X+
    5538:	9c 91       	ld	r25, X
    553a:	13 97       	sbiw	r26, 0x03	; 3
    553c:	93 83       	std	Z+3, r25	; 0x03
    553e:	82 83       	std	Z+2, r24	; 0x02
    5540:	14 96       	adiw	r26, 0x04	; 4
    5542:	4d 91       	ld	r20, X+
    5544:	5d 91       	ld	r21, X+
    5546:	6d 91       	ld	r22, X+
    5548:	7c 91       	ld	r23, X
    554a:	17 97       	sbiw	r26, 0x07	; 7
    554c:	44 83       	std	Z+4, r20	; 0x04
    554e:	55 83       	std	Z+5, r21	; 0x05
    5550:	66 83       	std	Z+6, r22	; 0x06
    5552:	77 83       	std	Z+7, r23	; 0x07
    5554:	18 96       	adiw	r26, 0x08	; 8
    5556:	4d 91       	ld	r20, X+
    5558:	5d 91       	ld	r21, X+
    555a:	6d 91       	ld	r22, X+
    555c:	7c 91       	ld	r23, X
    555e:	1b 97       	sbiw	r26, 0x0b	; 11
    5560:	40 87       	std	Z+8, r20	; 0x08
    5562:	51 87       	std	Z+9, r21	; 0x09
    5564:	62 87       	std	Z+10, r22	; 0x0a
    5566:	73 87       	std	Z+11, r23	; 0x0b
    5568:	88 e3       	ldi	r24, 0x38	; 56
    556a:	95 e0       	ldi	r25, 0x05	; 5
    556c:	91 83       	std	Z+1, r25	; 0x01
    556e:	80 83       	st	Z, r24
    5570:	1c 96       	adiw	r26, 0x0c	; 12
    5572:	8d 91       	ld	r24, X+
    5574:	9c 91       	ld	r25, X
    5576:	1d 97       	sbiw	r26, 0x0d	; 13
    5578:	95 87       	std	Z+13, r25	; 0x0d
    557a:	84 87       	std	Z+12, r24	; 0x0c
    557c:	1e 96       	adiw	r26, 0x0e	; 14
    557e:	8d 91       	ld	r24, X+
    5580:	9c 91       	ld	r25, X
    5582:	1f 97       	sbiw	r26, 0x0f	; 15
    5584:	97 87       	std	Z+15, r25	; 0x0f
    5586:	86 87       	std	Z+14, r24	; 0x0e
    5588:	50 96       	adiw	r26, 0x10	; 16
    558a:	8d 91       	ld	r24, X+
    558c:	9c 91       	ld	r25, X
    558e:	51 97       	sbiw	r26, 0x11	; 17
    5590:	91 8b       	std	Z+17, r25	; 0x11
    5592:	80 8b       	std	Z+16, r24	; 0x10
    5594:	52 96       	adiw	r26, 0x12	; 18
    5596:	8d 91       	ld	r24, X+
    5598:	9c 91       	ld	r25, X
    559a:	53 97       	sbiw	r26, 0x13	; 19
    559c:	93 8b       	std	Z+19, r25	; 0x13
    559e:	82 8b       	std	Z+18, r24	; 0x12
    55a0:	54 96       	adiw	r26, 0x14	; 20
    55a2:	8d 91       	ld	r24, X+
    55a4:	9c 91       	ld	r25, X
    55a6:	55 97       	sbiw	r26, 0x15	; 21
    55a8:	95 8b       	std	Z+21, r25	; 0x15
    55aa:	84 8b       	std	Z+20, r24	; 0x14
    55ac:	56 96       	adiw	r26, 0x16	; 22
    55ae:	8d 91       	ld	r24, X+
    55b0:	9c 91       	ld	r25, X
    55b2:	57 97       	sbiw	r26, 0x17	; 23
    55b4:	97 8b       	std	Z+23, r25	; 0x17
    55b6:	86 8b       	std	Z+22, r24	; 0x16
    55b8:	58 96       	adiw	r26, 0x18	; 24
    55ba:	8d 91       	ld	r24, X+
    55bc:	9c 91       	ld	r25, X
    55be:	59 97       	sbiw	r26, 0x19	; 25
    55c0:	91 8f       	std	Z+25, r25	; 0x19
    55c2:	80 8f       	std	Z+24, r24	; 0x18
    55c4:	5a 96       	adiw	r26, 0x1a	; 26
    55c6:	8d 91       	ld	r24, X+
    55c8:	9c 91       	ld	r25, X
    55ca:	5b 97       	sbiw	r26, 0x1b	; 27
    55cc:	93 8f       	std	Z+27, r25	; 0x1b
    55ce:	82 8f       	std	Z+26, r24	; 0x1a
    55d0:	5c 96       	adiw	r26, 0x1c	; 28
    55d2:	8c 91       	ld	r24, X
    55d4:	5c 97       	sbiw	r26, 0x1c	; 28
    55d6:	84 8f       	std	Z+28, r24	; 0x1c
    55d8:	5d 96       	adiw	r26, 0x1d	; 29
    55da:	8c 91       	ld	r24, X
    55dc:	5d 97       	sbiw	r26, 0x1d	; 29
    55de:	85 8f       	std	Z+29, r24	; 0x1d
    55e0:	5e 96       	adiw	r26, 0x1e	; 30
    55e2:	8c 91       	ld	r24, X
    55e4:	5e 97       	sbiw	r26, 0x1e	; 30
    55e6:	86 8f       	std	Z+30, r24	; 0x1e
    55e8:	5f 96       	adiw	r26, 0x1f	; 31
    55ea:	8c 91       	ld	r24, X
    55ec:	5f 97       	sbiw	r26, 0x1f	; 31
    55ee:	87 8f       	std	Z+31, r24	; 0x1f
    55f0:	90 96       	adiw	r26, 0x20	; 32
    55f2:	8c 91       	ld	r24, X
    55f4:	90 97       	sbiw	r26, 0x20	; 32
    55f6:	80 a3       	std	Z+32, r24	; 0x20
    55f8:	91 96       	adiw	r26, 0x21	; 33
    55fa:	8c 91       	ld	r24, X
    55fc:	81 a3       	std	Z+33, r24	; 0x21
    55fe:	08 95       	ret

00005600 <_ZN14FreeBoardModel17getAnchorDistanceEv>:
    5600:	fc 01       	movw	r30, r24
    5602:	54 89       	ldd	r21, Z+20	; 0x14
    5604:	45 89       	ldd	r20, Z+21	; 0x15
    5606:	36 89       	ldd	r19, Z+22	; 0x16
    5608:	27 89       	ldd	r18, Z+23	; 0x17
    560a:	65 2f       	mov	r22, r21
    560c:	74 2f       	mov	r23, r20
    560e:	83 2f       	mov	r24, r19
    5610:	92 2f       	mov	r25, r18
    5612:	08 95       	ret

00005614 <_ZN14FreeBoardModel10getAnchorEEv>:
    5614:	fc 01       	movw	r30, r24
    5616:	55 a1       	ldd	r21, Z+37	; 0x25
    5618:	46 a1       	ldd	r20, Z+38	; 0x26
    561a:	37 a1       	ldd	r19, Z+39	; 0x27
    561c:	20 a5       	ldd	r18, Z+40	; 0x28
    561e:	65 2f       	mov	r22, r21
    5620:	74 2f       	mov	r23, r20
    5622:	83 2f       	mov	r24, r19
    5624:	92 2f       	mov	r25, r18
    5626:	08 95       	ret

00005628 <_ZN14FreeBoardModel12getAnchorLatEv>:
    5628:	fc 01       	movw	r30, r24
    562a:	ec 58       	subi	r30, 0x8C	; 140
    562c:	ff 4f       	sbci	r31, 0xFF	; 255
    562e:	50 81       	ld	r21, Z
    5630:	41 81       	ldd	r20, Z+1	; 0x01
    5632:	32 81       	ldd	r19, Z+2	; 0x02
    5634:	23 81       	ldd	r18, Z+3	; 0x03
    5636:	65 2f       	mov	r22, r21
    5638:	74 2f       	mov	r23, r20
    563a:	83 2f       	mov	r24, r19
    563c:	92 2f       	mov	r25, r18
    563e:	08 95       	ret

00005640 <_ZN14FreeBoardModel12getAnchorLonEv>:
    5640:	fc 01       	movw	r30, r24
    5642:	e8 58       	subi	r30, 0x88	; 136
    5644:	ff 4f       	sbci	r31, 0xFF	; 255
    5646:	50 81       	ld	r21, Z
    5648:	41 81       	ldd	r20, Z+1	; 0x01
    564a:	32 81       	ldd	r19, Z+2	; 0x02
    564c:	23 81       	ldd	r18, Z+3	; 0x03
    564e:	65 2f       	mov	r22, r21
    5650:	74 2f       	mov	r23, r20
    5652:	83 2f       	mov	r24, r19
    5654:	92 2f       	mov	r25, r18
    5656:	08 95       	ret

00005658 <_ZN14FreeBoardModel20getAnchorMaxDistanceEv>:
    5658:	fc 01       	movw	r30, r24
    565a:	50 8d       	ldd	r21, Z+24	; 0x18
    565c:	41 8d       	ldd	r20, Z+25	; 0x19
    565e:	32 8d       	ldd	r19, Z+26	; 0x1a
    5660:	23 8d       	ldd	r18, Z+27	; 0x1b
    5662:	65 2f       	mov	r22, r21
    5664:	74 2f       	mov	r23, r20
    5666:	83 2f       	mov	r24, r19
    5668:	92 2f       	mov	r25, r18
    566a:	08 95       	ret

0000566c <_ZN14FreeBoardModel10getAnchorNEv>:
    566c:	fc 01       	movw	r30, r24
    566e:	55 8d       	ldd	r21, Z+29	; 0x1d
    5670:	46 8d       	ldd	r20, Z+30	; 0x1e
    5672:	37 8d       	ldd	r19, Z+31	; 0x1f
    5674:	20 a1       	ldd	r18, Z+32	; 0x20
    5676:	65 2f       	mov	r22, r21
    5678:	74 2f       	mov	r23, r20
    567a:	83 2f       	mov	r24, r19
    567c:	92 2f       	mov	r25, r18
    567e:	08 95       	ret

00005680 <_ZN14FreeBoardModel15getAnchorRadiusEv>:
    5680:	fc 01       	movw	r30, r24
    5682:	e4 58       	subi	r30, 0x84	; 132
    5684:	ff 4f       	sbci	r31, 0xFF	; 255
    5686:	50 81       	ld	r21, Z
    5688:	41 81       	ldd	r20, Z+1	; 0x01
    568a:	32 81       	ldd	r19, Z+2	; 0x02
    568c:	23 81       	ldd	r18, Z+3	; 0x03
    568e:	65 2f       	mov	r22, r21
    5690:	74 2f       	mov	r23, r20
    5692:	83 2f       	mov	r24, r19
    5694:	92 2f       	mov	r25, r18
    5696:	08 95       	ret

00005698 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>:
    5698:	fc 01       	movw	r30, r24
    569a:	50 89       	ldd	r21, Z+16	; 0x10
    569c:	41 89       	ldd	r20, Z+17	; 0x11
    569e:	32 89       	ldd	r19, Z+18	; 0x12
    56a0:	23 89       	ldd	r18, Z+19	; 0x13
    56a2:	65 2f       	mov	r22, r21
    56a4:	74 2f       	mov	r23, r20
    56a6:	83 2f       	mov	r24, r19
    56a8:	92 2f       	mov	r25, r18
    56aa:	08 95       	ret

000056ac <_ZN14FreeBoardModel10getAnchorSEv>:
    56ac:	fc 01       	movw	r30, r24
    56ae:	51 a1       	ldd	r21, Z+33	; 0x21
    56b0:	42 a1       	ldd	r20, Z+34	; 0x22
    56b2:	33 a1       	ldd	r19, Z+35	; 0x23
    56b4:	24 a1       	ldd	r18, Z+36	; 0x24
    56b6:	65 2f       	mov	r22, r21
    56b8:	74 2f       	mov	r23, r20
    56ba:	83 2f       	mov	r24, r19
    56bc:	92 2f       	mov	r25, r18
    56be:	08 95       	ret

000056c0 <_ZN14FreeBoardModel10getAnchorWEv>:
    56c0:	fc 01       	movw	r30, r24
    56c2:	51 a5       	ldd	r21, Z+41	; 0x29
    56c4:	42 a5       	ldd	r20, Z+42	; 0x2a
    56c6:	33 a5       	ldd	r19, Z+43	; 0x2b
    56c8:	24 a5       	ldd	r18, Z+44	; 0x2c
    56ca:	65 2f       	mov	r22, r21
    56cc:	74 2f       	mov	r23, r20
    56ce:	83 2f       	mov	r24, r19
    56d0:	92 2f       	mov	r25, r18
    56d2:	08 95       	ret

000056d4 <_ZN14FreeBoardModel25getAutopilotRudderCommandEv>:
    56d4:	fc 01       	movw	r30, r24
    56d6:	57 a9       	ldd	r21, Z+55	; 0x37
    56d8:	40 ad       	ldd	r20, Z+56	; 0x38
    56da:	31 ad       	ldd	r19, Z+57	; 0x39
    56dc:	22 ad       	ldd	r18, Z+58	; 0x3a
    56de:	65 2f       	mov	r22, r21
    56e0:	74 2f       	mov	r23, r20
    56e2:	83 2f       	mov	r24, r19
    56e4:	92 2f       	mov	r25, r18
    56e6:	08 95       	ret

000056e8 <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>:
    56e8:	fc 01       	movw	r30, r24
    56ea:	53 a9       	ldd	r21, Z+51	; 0x33
    56ec:	44 a9       	ldd	r20, Z+52	; 0x34
    56ee:	35 a9       	ldd	r19, Z+53	; 0x35
    56f0:	26 a9       	ldd	r18, Z+54	; 0x36
    56f2:	65 2f       	mov	r22, r21
    56f4:	74 2f       	mov	r23, r20
    56f6:	83 2f       	mov	r24, r19
    56f8:	92 2f       	mov	r25, r18
    56fa:	08 95       	ret

000056fc <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>:
    56fc:	fc 01       	movw	r30, r24
    56fe:	82 a9       	ldd	r24, Z+50	; 0x32
    5700:	87 35       	cpi	r24, 0x57	; 87
    5702:	59 f4       	brne	.+22     	; 0x571a <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv+0x1e>
    5704:	e1 59       	subi	r30, 0x91	; 145
    5706:	ff 4f       	sbci	r31, 0xFF	; 255
    5708:	60 81       	ld	r22, Z
    570a:	71 81       	ldd	r23, Z+1	; 0x01
    570c:	88 27       	eor	r24, r24
    570e:	77 fd       	sbrc	r23, 7
    5710:	80 95       	com	r24
    5712:	98 2f       	mov	r25, r24
    5714:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__floatsisf>
    5718:	04 c0       	rjmp	.+8      	; 0x5722 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv+0x26>
    571a:	60 85       	ldd	r22, Z+8	; 0x08
    571c:	71 85       	ldd	r23, Z+9	; 0x09
    571e:	82 85       	ldd	r24, Z+10	; 0x0a
    5720:	93 85       	ldd	r25, Z+11	; 0x0b
    5722:	08 95       	ret

00005724 <_ZN14FreeBoardModel21getAutopilotOffCourseEv>:
    5724:	ef 92       	push	r14
    5726:	ff 92       	push	r15
    5728:	0f 93       	push	r16
    572a:	1f 93       	push	r17
    572c:	cf 93       	push	r28
    572e:	df 93       	push	r29
    5730:	ec 01       	movw	r28, r24
    5732:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>
    5736:	9b 01       	movw	r18, r22
    5738:	ac 01       	movw	r20, r24
    573a:	6b a9       	ldd	r22, Y+51	; 0x33
    573c:	7c a9       	ldd	r23, Y+52	; 0x34
    573e:	8d a9       	ldd	r24, Y+53	; 0x35
    5740:	9e a9       	ldd	r25, Y+54	; 0x36
    5742:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    5746:	7b 01       	movw	r14, r22
    5748:	8c 01       	movw	r16, r24
    574a:	20 e0       	ldi	r18, 0x00	; 0
    574c:	30 e0       	ldi	r19, 0x00	; 0
    574e:	44 e3       	ldi	r20, 0x34	; 52
    5750:	53 e4       	ldi	r21, 0x43	; 67
    5752:	7f 2d       	mov	r23, r15
    5754:	91 2f       	mov	r25, r17
    5756:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    575a:	18 16       	cp	r1, r24
    575c:	8c f0       	brlt	.+34     	; 0x5780 <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x5c>
    575e:	20 e0       	ldi	r18, 0x00	; 0
    5760:	30 e0       	ldi	r19, 0x00	; 0
    5762:	44 e3       	ldi	r20, 0x34	; 52
    5764:	53 ec       	ldi	r21, 0xC3	; 195
    5766:	6e 2d       	mov	r22, r14
    5768:	7f 2d       	mov	r23, r15
    576a:	80 2f       	mov	r24, r16
    576c:	91 2f       	mov	r25, r17
    576e:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    5772:	87 ff       	sbrs	r24, 7
    5774:	0a c0       	rjmp	.+20     	; 0x578a <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x66>
    5776:	20 e0       	ldi	r18, 0x00	; 0
    5778:	30 e0       	ldi	r19, 0x00	; 0
    577a:	44 eb       	ldi	r20, 0xB4	; 180
    577c:	53 e4       	ldi	r21, 0x43	; 67
    577e:	08 c0       	rjmp	.+16     	; 0x5790 <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x6c>
    5780:	20 e0       	ldi	r18, 0x00	; 0
    5782:	30 e0       	ldi	r19, 0x00	; 0
    5784:	44 eb       	ldi	r20, 0xB4	; 180
    5786:	53 ec       	ldi	r21, 0xC3	; 195
    5788:	03 c0       	rjmp	.+6      	; 0x5790 <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x6c>
    578a:	20 e0       	ldi	r18, 0x00	; 0
    578c:	30 e0       	ldi	r19, 0x00	; 0
    578e:	a9 01       	movw	r20, r18
    5790:	6e 2d       	mov	r22, r14
    5792:	7f 2d       	mov	r23, r15
    5794:	80 2f       	mov	r24, r16
    5796:	91 2f       	mov	r25, r17
    5798:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    579c:	9b 01       	movw	r18, r22
    579e:	46 2f       	mov	r20, r22
    57a0:	53 2f       	mov	r21, r19
    57a2:	68 2f       	mov	r22, r24
    57a4:	79 2f       	mov	r23, r25
    57a6:	4e a7       	std	Y+46, r20	; 0x2e
    57a8:	5f a7       	std	Y+47, r21	; 0x2f
    57aa:	68 ab       	std	Y+48, r22	; 0x30
    57ac:	79 ab       	std	Y+49, r23	; 0x31
    57ae:	62 2f       	mov	r22, r18
    57b0:	73 2f       	mov	r23, r19
    57b2:	df 91       	pop	r29
    57b4:	cf 91       	pop	r28
    57b6:	1f 91       	pop	r17
    57b8:	0f 91       	pop	r16
    57ba:	ff 90       	pop	r15
    57bc:	ef 90       	pop	r14
    57be:	08 95       	ret

000057c0 <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial>:
    57c0:	ef 92       	push	r14
    57c2:	ff 92       	push	r15
    57c4:	0f 93       	push	r16
    57c6:	1f 93       	push	r17
    57c8:	cf 93       	push	r28
    57ca:	df 93       	push	r29
    57cc:	8c 01       	movw	r16, r24
    57ce:	d6 2f       	mov	r29, r22
    57d0:	c7 2f       	mov	r28, r23
    57d2:	64 e5       	ldi	r22, 0x54	; 84
    57d4:	72 e0       	ldi	r23, 0x02	; 2
    57d6:	8d 2f       	mov	r24, r29
    57d8:	9c 2f       	mov	r25, r28
    57da:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5Print5printEPKc>
    57de:	60 e6       	ldi	r22, 0x60	; 96
    57e0:	72 e0       	ldi	r23, 0x02	; 2
    57e2:	8d 2f       	mov	r24, r29
    57e4:	9c 2f       	mov	r25, r28
    57e6:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5Print5printEPKc>
    57ea:	f8 01       	movw	r30, r16
    57ec:	65 a5       	ldd	r22, Z+45	; 0x2d
    57ee:	4a e0       	ldi	r20, 0x0A	; 10
    57f0:	50 e0       	ldi	r21, 0x00	; 0
    57f2:	70 e0       	ldi	r23, 0x00	; 0
    57f4:	8d 2f       	mov	r24, r29
    57f6:	9c 2f       	mov	r25, r28
    57f8:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN5Print5printEii>
    57fc:	6e e6       	ldi	r22, 0x6E	; 110
    57fe:	72 e0       	ldi	r23, 0x02	; 2
    5800:	8d 2f       	mov	r24, r29
    5802:	9c 2f       	mov	r25, r28
    5804:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5Print5printEPKc>
    5808:	f8 01       	movw	r30, r16
    580a:	62 a9       	ldd	r22, Z+50	; 0x32
    580c:	8d 2f       	mov	r24, r29
    580e:	9c 2f       	mov	r25, r28
    5810:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEc>
    5814:	f8 01       	movw	r30, r16
    5816:	85 a5       	ldd	r24, Z+45	; 0x2d
    5818:	88 23       	and	r24, r24
    581a:	d9 f1       	breq	.+118    	; 0x5892 <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial+0xd2>
    581c:	64 e7       	ldi	r22, 0x74	; 116
    581e:	72 e0       	ldi	r23, 0x02	; 2
    5820:	8d 2f       	mov	r24, r29
    5822:	9c 2f       	mov	r25, r28
    5824:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5Print5printEPKc>
    5828:	f8 01       	movw	r30, r16
    582a:	43 a9       	ldd	r20, Z+51	; 0x33
    582c:	54 a9       	ldd	r21, Z+52	; 0x34
    582e:	65 a9       	ldd	r22, Z+53	; 0x35
    5830:	76 a9       	ldd	r23, Z+54	; 0x36
    5832:	22 e0       	ldi	r18, 0x02	; 2
    5834:	30 e0       	ldi	r19, 0x00	; 0
    5836:	8d 2f       	mov	r24, r29
    5838:	9c 2f       	mov	r25, r28
    583a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN5Print5printEdi>
    583e:	6a e7       	ldi	r22, 0x7A	; 122
    5840:	72 e0       	ldi	r23, 0x02	; 2
    5842:	8d 2f       	mov	r24, r29
    5844:	9c 2f       	mov	r25, r28
    5846:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5Print5printEPKc>
    584a:	c8 01       	movw	r24, r16
    584c:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>
    5850:	ab 01       	movw	r20, r22
    5852:	bc 01       	movw	r22, r24
    5854:	22 e0       	ldi	r18, 0x02	; 2
    5856:	30 e0       	ldi	r19, 0x00	; 0
    5858:	8d 2f       	mov	r24, r29
    585a:	9c 2f       	mov	r25, r28
    585c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN5Print5printEdi>
    5860:	60 e8       	ldi	r22, 0x80	; 128
    5862:	72 e0       	ldi	r23, 0x02	; 2
    5864:	8d 2f       	mov	r24, r29
    5866:	9c 2f       	mov	r25, r28
    5868:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5Print5printEPKc>
    586c:	20 e0       	ldi	r18, 0x00	; 0
    586e:	30 e0       	ldi	r19, 0x00	; 0
    5870:	44 e0       	ldi	r20, 0x04	; 4
    5872:	52 e4       	ldi	r21, 0x42	; 66
    5874:	f8 01       	movw	r30, r16
    5876:	67 a9       	ldd	r22, Z+55	; 0x37
    5878:	70 ad       	ldd	r23, Z+56	; 0x38
    587a:	81 ad       	ldd	r24, Z+57	; 0x39
    587c:	92 ad       	ldd	r25, Z+58	; 0x3a
    587e:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    5882:	ab 01       	movw	r20, r22
    5884:	bc 01       	movw	r22, r24
    5886:	22 e0       	ldi	r18, 0x02	; 2
    5888:	30 e0       	ldi	r19, 0x00	; 0
    588a:	8d 2f       	mov	r24, r29
    588c:	9c 2f       	mov	r25, r28
    588e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN5Print5printEdi>
    5892:	66 e8       	ldi	r22, 0x86	; 134
    5894:	72 e0       	ldi	r23, 0x02	; 2
    5896:	8d 2f       	mov	r24, r29
    5898:	9c 2f       	mov	r25, r28
    589a:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5Print5printEPKc>
    589e:	78 01       	movw	r14, r16
    58a0:	f0 e8       	ldi	r31, 0x80	; 128
    58a2:	ef 0e       	add	r14, r31
    58a4:	f1 1c       	adc	r15, r1
    58a6:	f7 01       	movw	r30, r14
    58a8:	60 81       	ld	r22, Z
    58aa:	4a e0       	ldi	r20, 0x0A	; 10
    58ac:	50 e0       	ldi	r21, 0x00	; 0
    58ae:	70 e0       	ldi	r23, 0x00	; 0
    58b0:	8d 2f       	mov	r24, r29
    58b2:	9c 2f       	mov	r25, r28
    58b4:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN5Print5printEii>
    58b8:	6c e8       	ldi	r22, 0x8C	; 140
    58ba:	72 e0       	ldi	r23, 0x02	; 2
    58bc:	8d 2f       	mov	r24, r29
    58be:	9c 2f       	mov	r25, r28
    58c0:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5Print5printEPKc>
    58c4:	f8 01       	movw	r30, r16
    58c6:	e4 58       	subi	r30, 0x84	; 132
    58c8:	ff 4f       	sbci	r31, 0xFF	; 255
    58ca:	40 81       	ld	r20, Z
    58cc:	51 81       	ldd	r21, Z+1	; 0x01
    58ce:	62 81       	ldd	r22, Z+2	; 0x02
    58d0:	73 81       	ldd	r23, Z+3	; 0x03
    58d2:	22 e0       	ldi	r18, 0x02	; 2
    58d4:	30 e0       	ldi	r19, 0x00	; 0
    58d6:	8d 2f       	mov	r24, r29
    58d8:	9c 2f       	mov	r25, r28
    58da:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN5Print5printEdi>
    58de:	f7 01       	movw	r30, r14
    58e0:	80 81       	ld	r24, Z
    58e2:	88 23       	and	r24, r24
    58e4:	b9 f1       	breq	.+110    	; 0x5954 <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial+0x194>
    58e6:	62 e9       	ldi	r22, 0x92	; 146
    58e8:	72 e0       	ldi	r23, 0x02	; 2
    58ea:	8d 2f       	mov	r24, r29
    58ec:	9c 2f       	mov	r25, r28
    58ee:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5Print5printEPKc>
    58f2:	f8 01       	movw	r30, r16
    58f4:	ec 58       	subi	r30, 0x8C	; 140
    58f6:	ff 4f       	sbci	r31, 0xFF	; 255
    58f8:	40 81       	ld	r20, Z
    58fa:	51 81       	ldd	r21, Z+1	; 0x01
    58fc:	62 81       	ldd	r22, Z+2	; 0x02
    58fe:	73 81       	ldd	r23, Z+3	; 0x03
    5900:	22 e0       	ldi	r18, 0x02	; 2
    5902:	30 e0       	ldi	r19, 0x00	; 0
    5904:	8d 2f       	mov	r24, r29
    5906:	9c 2f       	mov	r25, r28
    5908:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN5Print5printEdi>
    590c:	68 e9       	ldi	r22, 0x98	; 152
    590e:	72 e0       	ldi	r23, 0x02	; 2
    5910:	8d 2f       	mov	r24, r29
    5912:	9c 2f       	mov	r25, r28
    5914:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5Print5printEPKc>
    5918:	f8 01       	movw	r30, r16
    591a:	e8 58       	subi	r30, 0x88	; 136
    591c:	ff 4f       	sbci	r31, 0xFF	; 255
    591e:	40 81       	ld	r20, Z
    5920:	51 81       	ldd	r21, Z+1	; 0x01
    5922:	62 81       	ldd	r22, Z+2	; 0x02
    5924:	73 81       	ldd	r23, Z+3	; 0x03
    5926:	22 e0       	ldi	r18, 0x02	; 2
    5928:	30 e0       	ldi	r19, 0x00	; 0
    592a:	8d 2f       	mov	r24, r29
    592c:	9c 2f       	mov	r25, r28
    592e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN5Print5printEdi>
    5932:	6e e9       	ldi	r22, 0x9E	; 158
    5934:	72 e0       	ldi	r23, 0x02	; 2
    5936:	8d 2f       	mov	r24, r29
    5938:	9c 2f       	mov	r25, r28
    593a:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5Print5printEPKc>
    593e:	f8 01       	movw	r30, r16
    5940:	44 89       	ldd	r20, Z+20	; 0x14
    5942:	55 89       	ldd	r21, Z+21	; 0x15
    5944:	66 89       	ldd	r22, Z+22	; 0x16
    5946:	77 89       	ldd	r23, Z+23	; 0x17
    5948:	22 e0       	ldi	r18, 0x02	; 2
    594a:	30 e0       	ldi	r19, 0x00	; 0
    594c:	8d 2f       	mov	r24, r29
    594e:	9c 2f       	mov	r25, r28
    5950:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN5Print5printEdi>
    5954:	64 ea       	ldi	r22, 0xA4	; 164
    5956:	72 e0       	ldi	r23, 0x02	; 2
    5958:	8d 2f       	mov	r24, r29
    595a:	9c 2f       	mov	r25, r28
    595c:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5Print5printEPKc>
    5960:	f8 01       	movw	r30, r16
    5962:	ed 56       	subi	r30, 0x6D	; 109
    5964:	ff 4f       	sbci	r31, 0xFF	; 255
    5966:	60 81       	ld	r22, Z
    5968:	4a e0       	ldi	r20, 0x0A	; 10
    596a:	50 e0       	ldi	r21, 0x00	; 0
    596c:	70 e0       	ldi	r23, 0x00	; 0
    596e:	8d 2f       	mov	r24, r29
    5970:	9c 2f       	mov	r25, r28
    5972:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN5Print5printEii>
    5976:	6a ea       	ldi	r22, 0xAA	; 170
    5978:	72 e0       	ldi	r23, 0x02	; 2
    597a:	8d 2f       	mov	r24, r29
    597c:	9c 2f       	mov	r25, r28
    597e:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5Print5printEPKc>
    5982:	f8 01       	movw	r30, r16
    5984:	ef 56       	subi	r30, 0x6F	; 111
    5986:	ff 4f       	sbci	r31, 0xFF	; 255
    5988:	60 81       	ld	r22, Z
    598a:	71 81       	ldd	r23, Z+1	; 0x01
    598c:	4a e0       	ldi	r20, 0x0A	; 10
    598e:	50 e0       	ldi	r21, 0x00	; 0
    5990:	8d 2f       	mov	r24, r29
    5992:	9c 2f       	mov	r25, r28
    5994:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN5Print5printEii>
    5998:	6e e5       	ldi	r22, 0x5E	; 94
    599a:	72 e0       	ldi	r23, 0x02	; 2
    599c:	8d 2f       	mov	r24, r29
    599e:	9c 2f       	mov	r25, r28
    59a0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
    59a4:	80 e0       	ldi	r24, 0x00	; 0
    59a6:	90 e0       	ldi	r25, 0x00	; 0
    59a8:	df 91       	pop	r29
    59aa:	cf 91       	pop	r28
    59ac:	1f 91       	pop	r17
    59ae:	0f 91       	pop	r16
    59b0:	ff 90       	pop	r15
    59b2:	ef 90       	pop	r14
    59b4:	08 95       	ret

000059b6 <_ZN14FreeBoardModel8sendDataE14HardwareSerialc>:
    59b6:	bf 92       	push	r11
    59b8:	cf 92       	push	r12
    59ba:	df 92       	push	r13
    59bc:	ef 92       	push	r14
    59be:	ff 92       	push	r15
    59c0:	0f 93       	push	r16
    59c2:	1f 93       	push	r17
    59c4:	cf 93       	push	r28
    59c6:	df 93       	push	r29
    59c8:	cd b7       	in	r28, 0x3d	; 61
    59ca:	de b7       	in	r29, 0x3e	; 62
    59cc:	a2 97       	sbiw	r28, 0x22	; 34
    59ce:	0f b6       	in	r0, 0x3f	; 63
    59d0:	f8 94       	cli
    59d2:	de bf       	out	0x3e, r29	; 62
    59d4:	0f be       	out	0x3f, r0	; 63
    59d6:	cd bf       	out	0x3d, r28	; 61
    59d8:	7c 01       	movw	r14, r24
    59da:	43 34       	cpi	r20, 0x43	; 67
    59dc:	a1 f5       	brne	.+104    	; 0x5a46 <_ZN14FreeBoardModel8sendDataE14HardwareSerialc+0x90>
    59de:	6c 01       	movw	r12, r24
    59e0:	84 e7       	ldi	r24, 0x74	; 116
    59e2:	c8 0e       	add	r12, r24
    59e4:	d1 1c       	adc	r13, r1
    59e6:	8e 01       	movw	r16, r28
    59e8:	0f 5f       	subi	r16, 0xFF	; 255
    59ea:	1f 4f       	sbci	r17, 0xFF	; 255
    59ec:	c8 01       	movw	r24, r16
    59ee:	0e 94 98 2a 	call	0x5530	; 0x5530 <_ZN14HardwareSerialC1ERKS_>

#endif
    59f2:	60 e4       	ldi	r22, 0x40	; 64
    59f4:	70 e0       	ldi	r23, 0x00	; 0
    59f6:	c8 01       	movw	r24, r16
    59f8:	0e 94 4a 29 	call	0x5294	; 0x5294 <_ZN14HardwareSerial5writeEi>
    59fc:	63 e4       	ldi	r22, 0x43	; 67
    59fe:	70 e0       	ldi	r23, 0x00	; 0
    5a00:	c8 01       	movw	r24, r16
    5a02:	0e 94 4a 29 	call	0x5294	; 0x5294 <_ZN14HardwareSerial5writeEi>
    5a06:	ea e9       	ldi	r30, 0x9A	; 154
    5a08:	ee 0e       	add	r14, r30
    5a0a:	f1 1c       	adc	r15, r1
extern void serialEventRun(void) __attribute__((weak));

#endif
    5a0c:	30 e3       	ldi	r19, 0x30	; 48
    5a0e:	b3 2e       	mov	r11, r19
    5a10:	f6 01       	movw	r30, r12
    5a12:	61 91       	ld	r22, Z+
    5a14:	6f 01       	movw	r12, r30
    5a16:	c8 01       	movw	r24, r16
    5a18:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN14HardwareSerial5writeEh>
    5a1c:	f6 01       	movw	r30, r12
    5a1e:	80 81       	ld	r24, Z
    5a20:	b8 26       	eor	r11, r24
    5a22:	ce 14       	cp	r12, r14
    5a24:	df 04       	cpc	r13, r15
    5a26:	a1 f7       	brne	.-24     	; 0x5a10 <_ZN14FreeBoardModel8sendDataE14HardwareSerialc+0x5a>
    5a28:	6b 2d       	mov	r22, r11
    5a2a:	77 27       	eor	r23, r23
    5a2c:	67 fd       	sbrc	r22, 7
    5a2e:	70 95       	com	r23
    5a30:	c8 01       	movw	r24, r16
    5a32:	0e 94 4a 29 	call	0x5294	; 0x5294 <_ZN14HardwareSerial5writeEi>
    5a36:	6a e0       	ldi	r22, 0x0A	; 10
    5a38:	70 e0       	ldi	r23, 0x00	; 0
    5a3a:	c8 01       	movw	r24, r16
    5a3c:	0e 94 4a 29 	call	0x5294	; 0x5294 <_ZN14HardwareSerial5writeEi>
    5a40:	26 e2       	ldi	r18, 0x26	; 38
    5a42:	30 e0       	ldi	r19, 0x00	; 0
    5a44:	46 c0       	rjmp	.+140    	; 0x5ad2 <_ZN14FreeBoardModel8sendDataE14HardwareSerialc+0x11c>
    5a46:	44 34       	cpi	r20, 0x44	; 68
    5a48:	a1 f5       	brne	.+104    	; 0x5ab2 <_ZN14FreeBoardModel8sendDataE14HardwareSerialc+0xfc>
    5a4a:	6c 01       	movw	r12, r24
    5a4c:	f8 e4       	ldi	r31, 0x48	; 72
    5a4e:	cf 0e       	add	r12, r31
    5a50:	d1 1c       	adc	r13, r1
    5a52:	8e 01       	movw	r16, r28
    5a54:	0f 5f       	subi	r16, 0xFF	; 255
    5a56:	1f 4f       	sbci	r17, 0xFF	; 255
    5a58:	c8 01       	movw	r24, r16
    5a5a:	0e 94 98 2a 	call	0x5530	; 0x5530 <_ZN14HardwareSerialC1ERKS_>

#endif
    5a5e:	60 e4       	ldi	r22, 0x40	; 64
    5a60:	70 e0       	ldi	r23, 0x00	; 0
    5a62:	c8 01       	movw	r24, r16
    5a64:	0e 94 4a 29 	call	0x5294	; 0x5294 <_ZN14HardwareSerial5writeEi>
    5a68:	64 e4       	ldi	r22, 0x44	; 68
    5a6a:	70 e0       	ldi	r23, 0x00	; 0
    5a6c:	c8 01       	movw	r24, r16
    5a6e:	0e 94 4a 29 	call	0x5294	; 0x5294 <_ZN14HardwareSerial5writeEi>
    5a72:	83 e6       	ldi	r24, 0x63	; 99
    5a74:	e8 0e       	add	r14, r24
    5a76:	f1 1c       	adc	r15, r1
extern void serialEventRun(void) __attribute__((weak));

#endif
    5a78:	20 e3       	ldi	r18, 0x30	; 48
    5a7a:	b2 2e       	mov	r11, r18
    5a7c:	f6 01       	movw	r30, r12
    5a7e:	61 91       	ld	r22, Z+
    5a80:	6f 01       	movw	r12, r30
    5a82:	c8 01       	movw	r24, r16
    5a84:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN14HardwareSerial5writeEh>
    5a88:	f6 01       	movw	r30, r12
    5a8a:	80 81       	ld	r24, Z
    5a8c:	b8 26       	eor	r11, r24
    5a8e:	ce 14       	cp	r12, r14
    5a90:	df 04       	cpc	r13, r15
    5a92:	a1 f7       	brne	.-24     	; 0x5a7c <_ZN14FreeBoardModel8sendDataE14HardwareSerialc+0xc6>
    5a94:	6b 2d       	mov	r22, r11
    5a96:	77 27       	eor	r23, r23
    5a98:	67 fd       	sbrc	r22, 7
    5a9a:	70 95       	com	r23
    5a9c:	c8 01       	movw	r24, r16
    5a9e:	0e 94 4a 29 	call	0x5294	; 0x5294 <_ZN14HardwareSerial5writeEi>
    5aa2:	6a e0       	ldi	r22, 0x0A	; 10
    5aa4:	70 e0       	ldi	r23, 0x00	; 0
    5aa6:	c8 01       	movw	r24, r16
    5aa8:	0e 94 4a 29 	call	0x5294	; 0x5294 <_ZN14HardwareSerial5writeEi>
    5aac:	2b e1       	ldi	r18, 0x1B	; 27
    5aae:	30 e0       	ldi	r19, 0x00	; 0
    5ab0:	10 c0       	rjmp	.+32     	; 0x5ad2 <_ZN14FreeBoardModel8sendDataE14HardwareSerialc+0x11c>
    5ab2:	43 35       	cpi	r20, 0x53	; 83
    5ab4:	61 f4       	brne	.+24     	; 0x5ace <_ZN14FreeBoardModel8sendDataE14HardwareSerialc+0x118>
    5ab6:	ce 01       	movw	r24, r28
    5ab8:	01 96       	adiw	r24, 0x01	; 1
    5aba:	0e 94 98 2a 	call	0x5530	; 0x5530 <_ZN14HardwareSerialC1ERKS_>
    5abe:	be 01       	movw	r22, r28
    5ac0:	6f 5f       	subi	r22, 0xFF	; 255
    5ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ac4:	c7 01       	movw	r24, r14
    5ac6:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial>
    5aca:	9c 01       	movw	r18, r24
    5acc:	02 c0       	rjmp	.+4      	; 0x5ad2 <_ZN14FreeBoardModel8sendDataE14HardwareSerialc+0x11c>
    5ace:	2f ef       	ldi	r18, 0xFF	; 255
    5ad0:	3f ef       	ldi	r19, 0xFF	; 255
    5ad2:	c9 01       	movw	r24, r18
    5ad4:	a2 96       	adiw	r28, 0x22	; 34
    5ad6:	0f b6       	in	r0, 0x3f	; 63
    5ad8:	f8 94       	cli
    5ada:	de bf       	out	0x3e, r29	; 62
    5adc:	0f be       	out	0x3f, r0	; 63
    5ade:	cd bf       	out	0x3d, r28	; 61
    5ae0:	df 91       	pop	r29
    5ae2:	cf 91       	pop	r28
    5ae4:	1f 91       	pop	r17
    5ae6:	0f 91       	pop	r16
    5ae8:	ff 90       	pop	r15
    5aea:	ef 90       	pop	r14
    5aec:	df 90       	pop	r13
    5aee:	cf 90       	pop	r12
    5af0:	bf 90       	pop	r11
    5af2:	08 95       	ret

00005af4 <_ZN14FreeBoardModel20getAutopilotDeadZoneEv>:
    5af4:	fc 01       	movw	r30, r24
    5af6:	ee 57       	subi	r30, 0x7E	; 126
    5af8:	ff 4f       	sbci	r31, 0xFF	; 255
    5afa:	80 81       	ld	r24, Z
    5afc:	91 81       	ldd	r25, Z+1	; 0x01
    5afe:	08 95       	ret

00005b00 <_ZN14FreeBoardModel17getAutopilotSlackEv>:
    5b00:	fc 01       	movw	r30, r24
    5b02:	ec 57       	subi	r30, 0x7C	; 124
    5b04:	ff 4f       	sbci	r31, 0xFF	; 255
    5b06:	80 81       	ld	r24, Z
    5b08:	91 81       	ldd	r25, Z+1	; 0x01
    5b0a:	08 95       	ret

00005b0c <_ZN14FreeBoardModel13getGpsLastFixEv>:
    5b0c:	fc 01       	movw	r30, r24
    5b0e:	e7 5b       	subi	r30, 0xB7	; 183
    5b10:	ff 4f       	sbci	r31, 0xFF	; 255
    5b12:	60 81       	ld	r22, Z
    5b14:	71 81       	ldd	r23, Z+1	; 0x01
    5b16:	82 81       	ldd	r24, Z+2	; 0x02
    5b18:	93 81       	ldd	r25, Z+3	; 0x03
    5b1a:	08 95       	ret

00005b1c <_ZN14FreeBoardModel14getGpsLatitudeEv>:
    5b1c:	fc 01       	movw	r30, r24
    5b1e:	ee 5a       	subi	r30, 0xAE	; 174
    5b20:	ff 4f       	sbci	r31, 0xFF	; 255
    5b22:	50 81       	ld	r21, Z
    5b24:	41 81       	ldd	r20, Z+1	; 0x01
    5b26:	32 81       	ldd	r19, Z+2	; 0x02
    5b28:	23 81       	ldd	r18, Z+3	; 0x03
    5b2a:	65 2f       	mov	r22, r21
    5b2c:	74 2f       	mov	r23, r20
    5b2e:	83 2f       	mov	r24, r19
    5b30:	92 2f       	mov	r25, r18
    5b32:	08 95       	ret

00005b34 <_ZN14FreeBoardModel15getGpsLongitudeEv>:
    5b34:	fc 01       	movw	r30, r24
    5b36:	ea 5a       	subi	r30, 0xAA	; 170
    5b38:	ff 4f       	sbci	r31, 0xFF	; 255
    5b3a:	50 81       	ld	r21, Z
    5b3c:	41 81       	ldd	r20, Z+1	; 0x01
    5b3e:	32 81       	ldd	r19, Z+2	; 0x02
    5b40:	23 81       	ldd	r18, Z+3	; 0x03
    5b42:	65 2f       	mov	r22, r21
    5b44:	74 2f       	mov	r23, r20
    5b46:	83 2f       	mov	r24, r19
    5b48:	92 2f       	mov	r25, r18
    5b4a:	08 95       	ret

00005b4c <_ZN14FreeBoardModel15getGpsSpeedUnitEv>:
    5b4c:	fc 01       	movw	r30, r24
    5b4e:	ea 57       	subi	r30, 0x7A	; 122
    5b50:	ff 4f       	sbci	r31, 0xFF	; 255
    5b52:	50 81       	ld	r21, Z
    5b54:	41 81       	ldd	r20, Z+1	; 0x01
    5b56:	32 81       	ldd	r19, Z+2	; 0x02
    5b58:	23 81       	ldd	r18, Z+3	; 0x03
    5b5a:	65 2f       	mov	r22, r21
    5b5c:	74 2f       	mov	r23, r20
    5b5e:	83 2f       	mov	r24, r19
    5b60:	92 2f       	mov	r25, r18
    5b62:	08 95       	ret

00005b64 <_ZN14FreeBoardModel12getGpsStatusEv>:
    5b64:	8f 5a       	subi	r24, 0xAF	; 175
    5b66:	9f 4f       	sbci	r25, 0xFF	; 255
    5b68:	fc 01       	movw	r30, r24
    5b6a:	80 81       	ld	r24, Z
    5b6c:	08 95       	ret

00005b6e <_ZN14FreeBoardModel17getWindZeroOffsetEv>:
    5b6e:	fc 01       	movw	r30, r24
    5b70:	e8 56       	subi	r30, 0x68	; 104
    5b72:	ff 4f       	sbci	r31, 0xFF	; 255
    5b74:	80 81       	ld	r24, Z
    5b76:	91 81       	ldd	r25, Z+1	; 0x01
    5b78:	08 95       	ret

00005b7a <_ZN14FreeBoardModel17getWindAlarmSpeedEv>:
    5b7a:	fc 01       	movw	r30, r24
    5b7c:	ef 56       	subi	r30, 0x6F	; 111
    5b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b80:	80 81       	ld	r24, Z
    5b82:	91 81       	ldd	r25, Z+1	; 0x01
    5b84:	08 95       	ret

00005b86 <_ZN14FreeBoardModel18getWindApparentDirEv>:
    5b86:	fc 01       	movw	r30, r24
    5b88:	e1 59       	subi	r30, 0x91	; 145
    5b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b8c:	80 81       	ld	r24, Z
    5b8e:	91 81       	ldd	r25, Z+1	; 0x01
    5b90:	08 95       	ret

00005b92 <_ZN14FreeBoardModel14getWindAverageEv>:
    5b92:	fc 01       	movw	r30, r24
    5b94:	e7 59       	subi	r30, 0x97	; 151
    5b96:	ff 4f       	sbci	r31, 0xFF	; 255
    5b98:	50 81       	ld	r21, Z
    5b9a:	41 81       	ldd	r20, Z+1	; 0x01
    5b9c:	32 81       	ldd	r19, Z+2	; 0x02
    5b9e:	23 81       	ldd	r18, Z+3	; 0x03
    5ba0:	65 2f       	mov	r22, r21
    5ba2:	74 2f       	mov	r23, r20
    5ba4:	83 2f       	mov	r24, r19
    5ba6:	92 2f       	mov	r25, r18
    5ba8:	08 95       	ret

00005baa <_ZN14FreeBoardModel13getWindFactorEv>:
    5baa:	fc 01       	movw	r30, r24
    5bac:	ec 56       	subi	r30, 0x6C	; 108
    5bae:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb0:	50 81       	ld	r21, Z
    5bb2:	41 81       	ldd	r20, Z+1	; 0x01
    5bb4:	32 81       	ldd	r19, Z+2	; 0x02
    5bb6:	23 81       	ldd	r18, Z+3	; 0x03
    5bb8:	65 2f       	mov	r22, r21
    5bba:	74 2f       	mov	r23, r20
    5bbc:	83 2f       	mov	r24, r19
    5bbe:	92 2f       	mov	r25, r18
    5bc0:	08 95       	ret

00005bc2 <_ZN14FreeBoardModel10getWindMaxEv>:
    5bc2:	fc 01       	movw	r30, r24
    5bc4:	e3 59       	subi	r30, 0x93	; 147
    5bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc8:	80 81       	ld	r24, Z
    5bca:	91 81       	ldd	r25, Z+1	; 0x01
    5bcc:	08 95       	ret

00005bce <_ZN14FreeBoardModel15isAnchorAlarmOnEv>:
    5bce:	80 58       	subi	r24, 0x80	; 128
    5bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    5bd2:	fc 01       	movw	r30, r24
    5bd4:	80 81       	ld	r24, Z
    5bd6:	08 95       	ret

00005bd8 <_ZN14FreeBoardModel11isGpsDecodeEv>:
    5bd8:	88 5b       	subi	r24, 0xB8	; 184
    5bda:	9f 4f       	sbci	r25, 0xFF	; 255
    5bdc:	fc 01       	movw	r30, r24
    5bde:	80 81       	ld	r24, Z
    5be0:	08 95       	ret

00005be2 <_ZN14FreeBoardModel13isWindAlarmOnEv>:
    5be2:	8d 56       	subi	r24, 0x6D	; 109
    5be4:	9f 4f       	sbci	r25, 0xFF	; 255
    5be6:	fc 01       	movw	r30, r24
    5be8:	80 81       	ld	r24, Z
    5bea:	08 95       	ret

00005bec <_ZN14FreeBoardModel12setAlarmLastEm>:
    5bec:	fc 01       	movw	r30, r24
    5bee:	40 83       	st	Z, r20
    5bf0:	51 83       	std	Z+1, r21	; 0x01
    5bf2:	62 83       	std	Z+2, r22	; 0x02
    5bf4:	73 83       	std	Z+3, r23	; 0x03
    5bf6:	08 95       	ret

00005bf8 <_ZN14FreeBoardModel14setAlarmSnoozeEm>:
    5bf8:	fc 01       	movw	r30, r24
    5bfa:	44 83       	std	Z+4, r20	; 0x04
    5bfc:	55 83       	std	Z+5, r21	; 0x05
    5bfe:	66 83       	std	Z+6, r22	; 0x06
    5c00:	77 83       	std	Z+7, r23	; 0x07
    5c02:	08 95       	ret

00005c04 <_ZN14FreeBoardModel16setAnchorAlarmOnEb>:
    5c04:	80 58       	subi	r24, 0x80	; 128
    5c06:	9f 4f       	sbci	r25, 0xFF	; 255
    5c08:	fc 01       	movw	r30, r24
    5c0a:	60 83       	st	Z, r22
    5c0c:	08 95       	ret

00005c0e <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>:
    5c0e:	fc 01       	movw	r30, r24
    5c10:	64 8f       	std	Z+28, r22	; 0x1c
    5c12:	08 95       	ret

00005c14 <_ZN14FreeBoardModel17setAnchorDistanceEf>:
    5c14:	fc 01       	movw	r30, r24
    5c16:	44 8b       	std	Z+20, r20	; 0x14
    5c18:	55 8b       	std	Z+21, r21	; 0x15
    5c1a:	66 8b       	std	Z+22, r22	; 0x16
    5c1c:	77 8b       	std	Z+23, r23	; 0x17
    5c1e:	08 95       	ret

00005c20 <_ZN14FreeBoardModel10setAnchorEEf>:
    5c20:	fc 01       	movw	r30, r24
    5c22:	45 a3       	std	Z+37, r20	; 0x25
    5c24:	56 a3       	std	Z+38, r21	; 0x26
    5c26:	67 a3       	std	Z+39, r22	; 0x27
    5c28:	70 a7       	std	Z+40, r23	; 0x28
    5c2a:	08 95       	ret

00005c2c <_ZN14FreeBoardModel12setAnchorLatEf>:
    5c2c:	8c 58       	subi	r24, 0x8C	; 140
    5c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c30:	fc 01       	movw	r30, r24
    5c32:	40 83       	st	Z, r20
    5c34:	51 83       	std	Z+1, r21	; 0x01
    5c36:	62 83       	std	Z+2, r22	; 0x02
    5c38:	73 83       	std	Z+3, r23	; 0x03
    5c3a:	08 95       	ret

00005c3c <_ZN14FreeBoardModel12setAnchorLonEf>:
    5c3c:	88 58       	subi	r24, 0x88	; 136
    5c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c40:	fc 01       	movw	r30, r24
    5c42:	40 83       	st	Z, r20
    5c44:	51 83       	std	Z+1, r21	; 0x01
    5c46:	62 83       	std	Z+2, r22	; 0x02
    5c48:	73 83       	std	Z+3, r23	; 0x03
    5c4a:	08 95       	ret

00005c4c <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>:
    5c4c:	fc 01       	movw	r30, r24
    5c4e:	40 8f       	std	Z+24, r20	; 0x18
    5c50:	51 8f       	std	Z+25, r21	; 0x19
    5c52:	62 8f       	std	Z+26, r22	; 0x1a
    5c54:	73 8f       	std	Z+27, r23	; 0x1b
    5c56:	08 95       	ret

00005c58 <_ZN14FreeBoardModel10setAnchorNEf>:
    5c58:	fc 01       	movw	r30, r24
    5c5a:	45 8f       	std	Z+29, r20	; 0x1d
    5c5c:	56 8f       	std	Z+30, r21	; 0x1e
    5c5e:	67 8f       	std	Z+31, r22	; 0x1f
    5c60:	70 a3       	std	Z+32, r23	; 0x20
    5c62:	08 95       	ret

00005c64 <_ZN14FreeBoardModel15setAnchorRadiusEf>:
    5c64:	84 58       	subi	r24, 0x84	; 132
    5c66:	9f 4f       	sbci	r25, 0xFF	; 255
    5c68:	fc 01       	movw	r30, r24
    5c6a:	40 83       	st	Z, r20
    5c6c:	51 83       	std	Z+1, r21	; 0x01
    5c6e:	62 83       	std	Z+2, r22	; 0x02
    5c70:	73 83       	std	Z+3, r23	; 0x03
    5c72:	08 95       	ret

00005c74 <_ZN14FreeBoardModel18setAnchorRadiusDegEf>:
    5c74:	fc 01       	movw	r30, r24
    5c76:	40 8b       	std	Z+16, r20	; 0x10
    5c78:	51 8b       	std	Z+17, r21	; 0x11
    5c7a:	62 8b       	std	Z+18, r22	; 0x12
    5c7c:	73 8b       	std	Z+19, r23	; 0x13
    5c7e:	08 95       	ret

00005c80 <_ZN14FreeBoardModel10setAnchorSEf>:
    5c80:	fc 01       	movw	r30, r24
    5c82:	41 a3       	std	Z+33, r20	; 0x21
    5c84:	52 a3       	std	Z+34, r21	; 0x22
    5c86:	63 a3       	std	Z+35, r22	; 0x23
    5c88:	74 a3       	std	Z+36, r23	; 0x24
    5c8a:	08 95       	ret

00005c8c <_ZN14FreeBoardModel10setAnchorWEf>:
    5c8c:	fc 01       	movw	r30, r24
    5c8e:	41 a7       	std	Z+41, r20	; 0x29
    5c90:	52 a7       	std	Z+42, r21	; 0x2a
    5c92:	63 a7       	std	Z+43, r22	; 0x2b
    5c94:	74 a7       	std	Z+44, r23	; 0x2c
    5c96:	08 95       	ret

00005c98 <_ZN14FreeBoardModel21setAutopilotReferenceEc>:
    5c98:	cf 93       	push	r28
    5c9a:	df 93       	push	r29
    5c9c:	ec 01       	movw	r28, r24
    5c9e:	67 35       	cpi	r22, 0x57	; 87
    5ca0:	11 f0       	breq	.+4      	; 0x5ca6 <_ZN14FreeBoardModel21setAutopilotReferenceEc+0xe>
    5ca2:	63 34       	cpi	r22, 0x43	; 67
    5ca4:	29 f5       	brne	.+74     	; 0x5cf0 <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x58>
    5ca6:	6a ab       	std	Y+50, r22	; 0x32
    5ca8:	67 35       	cpi	r22, 0x57	; 87
    5caa:	81 f4       	brne	.+32     	; 0x5ccc <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x34>
    5cac:	fe 01       	movw	r30, r28
    5cae:	e1 59       	subi	r30, 0x91	; 145
    5cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb2:	60 81       	ld	r22, Z
    5cb4:	71 81       	ldd	r23, Z+1	; 0x01
    5cb6:	88 27       	eor	r24, r24
    5cb8:	77 fd       	sbrc	r23, 7
    5cba:	80 95       	com	r24
    5cbc:	98 2f       	mov	r25, r24
    5cbe:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__floatsisf>
    5cc2:	6b ab       	std	Y+51, r22	; 0x33
    5cc4:	7c ab       	std	Y+52, r23	; 0x34
    5cc6:	8d ab       	std	Y+53, r24	; 0x35
    5cc8:	9e ab       	std	Y+54, r25	; 0x36
    5cca:	0a c0       	rjmp	.+20     	; 0x5ce0 <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x48>
    5ccc:	63 34       	cpi	r22, 0x43	; 67
    5cce:	41 f4       	brne	.+16     	; 0x5ce0 <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x48>
    5cd0:	48 85       	ldd	r20, Y+8	; 0x08
    5cd2:	59 85       	ldd	r21, Y+9	; 0x09
    5cd4:	6a 85       	ldd	r22, Y+10	; 0x0a
    5cd6:	7b 85       	ldd	r23, Y+11	; 0x0b
    5cd8:	4b ab       	std	Y+51, r20	; 0x33
    5cda:	5c ab       	std	Y+52, r21	; 0x34
    5cdc:	6d ab       	std	Y+53, r22	; 0x35
    5cde:	7e ab       	std	Y+54, r23	; 0x36
    5ce0:	40 e0       	ldi	r20, 0x00	; 0
    5ce2:	50 e0       	ldi	r21, 0x00	; 0
    5ce4:	64 e0       	ldi	r22, 0x04	; 4
    5ce6:	72 e4       	ldi	r23, 0x42	; 66
    5ce8:	4f ab       	std	Y+55, r20	; 0x37
    5cea:	58 af       	std	Y+56, r21	; 0x38
    5cec:	69 af       	std	Y+57, r22	; 0x39
    5cee:	7a af       	std	Y+58, r23	; 0x3a
    5cf0:	df 91       	pop	r29
    5cf2:	cf 91       	pop	r28
    5cf4:	08 95       	ret

00005cf6 <_ZN14FreeBoardModel25setAutopilotRudderCommandEd>:
    5cf6:	fc 01       	movw	r30, r24
    5cf8:	47 ab       	std	Z+55, r20	; 0x37
    5cfa:	50 af       	std	Z+56, r21	; 0x38
    5cfc:	61 af       	std	Z+57, r22	; 0x39
    5cfe:	72 af       	std	Z+58, r23	; 0x3a
    5d00:	08 95       	ret

00005d02 <_ZN14FreeBoardModel25setAutopilotTargetHeadingEd>:
    5d02:	cf 93       	push	r28
    5d04:	df 93       	push	r29
    5d06:	ec 01       	movw	r28, r24
    5d08:	cb 01       	movw	r24, r22
    5d0a:	ba 01       	movw	r22, r20
    5d0c:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <__fixsfsi>
    5d10:	cb 01       	movw	r24, r22
    5d12:	88 59       	subi	r24, 0x98	; 152
    5d14:	9e 4f       	sbci	r25, 0xFE	; 254
    5d16:	68 e6       	ldi	r22, 0x68	; 104
    5d18:	71 e0       	ldi	r23, 0x01	; 1
    5d1a:	0e 94 3f 40 	call	0x807e	; 0x807e <__divmodhi4>
    5d1e:	bc 01       	movw	r22, r24
    5d20:	88 27       	eor	r24, r24
    5d22:	77 fd       	sbrc	r23, 7
    5d24:	80 95       	com	r24
    5d26:	98 2f       	mov	r25, r24
    5d28:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__floatsisf>
    5d2c:	6b ab       	std	Y+51, r22	; 0x33
    5d2e:	7c ab       	std	Y+52, r23	; 0x34
    5d30:	8d ab       	std	Y+53, r24	; 0x35
    5d32:	9e ab       	std	Y+54, r25	; 0x36
    5d34:	df 91       	pop	r29
    5d36:	cf 91       	pop	r28
    5d38:	08 95       	ret

00005d3a <_ZN14FreeBoardModel12setGpsCourseEf>:
    5d3a:	82 5a       	subi	r24, 0xA2	; 162
    5d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d3e:	fc 01       	movw	r30, r24
    5d40:	40 83       	st	Z, r20
    5d42:	51 83       	std	Z+1, r21	; 0x01
    5d44:	62 83       	std	Z+2, r22	; 0x02
    5d46:	73 83       	std	Z+3, r23	; 0x03
    5d48:	08 95       	ret

00005d4a <_ZN14FreeBoardModel12setGpsDecodeEb>:
    5d4a:	88 5b       	subi	r24, 0xB8	; 184
    5d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d4e:	fc 01       	movw	r30, r24
    5d50:	60 83       	st	Z, r22
    5d52:	08 95       	ret

00005d54 <_ZN14FreeBoardModel13setGpsLastFixEm>:
    5d54:	87 5b       	subi	r24, 0xB7	; 183
    5d56:	9f 4f       	sbci	r25, 0xFF	; 255
    5d58:	fc 01       	movw	r30, r24
    5d5a:	40 83       	st	Z, r20
    5d5c:	51 83       	std	Z+1, r21	; 0x01
    5d5e:	62 83       	std	Z+2, r22	; 0x02
    5d60:	73 83       	std	Z+3, r23	; 0x03
    5d62:	08 95       	ret

00005d64 <_ZN14FreeBoardModel14setGpsLatitudeEf>:
    5d64:	8e 5a       	subi	r24, 0xAE	; 174
    5d66:	9f 4f       	sbci	r25, 0xFF	; 255
    5d68:	fc 01       	movw	r30, r24
    5d6a:	40 83       	st	Z, r20
    5d6c:	51 83       	std	Z+1, r21	; 0x01
    5d6e:	62 83       	std	Z+2, r22	; 0x02
    5d70:	73 83       	std	Z+3, r23	; 0x03
    5d72:	08 95       	ret

00005d74 <_ZN14FreeBoardModel15setGpsLongitudeEf>:
    5d74:	8a 5a       	subi	r24, 0xAA	; 170
    5d76:	9f 4f       	sbci	r25, 0xFF	; 255
    5d78:	fc 01       	movw	r30, r24
    5d7a:	40 83       	st	Z, r20
    5d7c:	51 83       	std	Z+1, r21	; 0x01
    5d7e:	62 83       	std	Z+2, r22	; 0x02
    5d80:	73 83       	std	Z+3, r23	; 0x03
    5d82:	08 95       	ret

00005d84 <_ZN14FreeBoardModel11setGpsSpeedEf>:
    5d84:	86 5a       	subi	r24, 0xA6	; 166
    5d86:	9f 4f       	sbci	r25, 0xFF	; 255
    5d88:	fc 01       	movw	r30, r24
    5d8a:	40 83       	st	Z, r20
    5d8c:	51 83       	std	Z+1, r21	; 0x01
    5d8e:	62 83       	std	Z+2, r22	; 0x02
    5d90:	73 83       	std	Z+3, r23	; 0x03
    5d92:	08 95       	ret

00005d94 <_ZN14FreeBoardModel12setGpsStatusEc>:
    5d94:	8f 5a       	subi	r24, 0xAF	; 175
    5d96:	9f 4f       	sbci	r25, 0xFF	; 255
    5d98:	fc 01       	movw	r30, r24
    5d9a:	60 83       	st	Z, r22
    5d9c:	08 95       	ret

00005d9e <_ZN14FreeBoardModel9setGpsUtcEf>:
    5d9e:	83 5b       	subi	r24, 0xB3	; 179
    5da0:	9f 4f       	sbci	r25, 0xFF	; 255
    5da2:	fc 01       	movw	r30, r24
    5da4:	40 83       	st	Z, r20
    5da6:	51 83       	std	Z+1, r21	; 0x01
    5da8:	62 83       	std	Z+2, r22	; 0x02
    5daa:	73 83       	std	Z+3, r23	; 0x03
    5dac:	08 95       	ret

00005dae <_ZN14FreeBoardModel18setMagneticHeadingEf>:
    5dae:	fc 01       	movw	r30, r24
    5db0:	40 87       	std	Z+8, r20	; 0x08
    5db2:	51 87       	std	Z+9, r21	; 0x09
    5db4:	62 87       	std	Z+10, r22	; 0x0a
    5db6:	73 87       	std	Z+11, r23	; 0x0b
    5db8:	08 95       	ret

00005dba <_ZN14FreeBoardModel14setDeclinationEf>:
    5dba:	fc 01       	movw	r30, r24
    5dbc:	44 87       	std	Z+12, r20	; 0x0c
    5dbe:	55 87       	std	Z+13, r21	; 0x0d
    5dc0:	66 87       	std	Z+14, r22	; 0x0e
    5dc2:	77 87       	std	Z+15, r23	; 0x0f
    5dc4:	08 95       	ret

00005dc6 <_ZN14FreeBoardModel17setWindZeroOffsetEi>:
    5dc6:	88 56       	subi	r24, 0x68	; 104
    5dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dca:	fc 01       	movw	r30, r24
    5dcc:	71 83       	std	Z+1, r23	; 0x01
    5dce:	60 83       	st	Z, r22
    5dd0:	08 95       	ret

00005dd2 <_ZN14FreeBoardModel14setWindAlarmOnEb>:
    5dd2:	8d 56       	subi	r24, 0x6D	; 109
    5dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    5dd6:	fc 01       	movw	r30, r24
    5dd8:	60 83       	st	Z, r22
    5dda:	08 95       	ret

00005ddc <_ZN14FreeBoardModel17setWindAlarmSpeedEi>:
    5ddc:	8f 56       	subi	r24, 0x6F	; 111
    5dde:	9f 4f       	sbci	r25, 0xFF	; 255
    5de0:	fc 01       	movw	r30, r24
    5de2:	71 83       	std	Z+1, r23	; 0x01
    5de4:	60 83       	st	Z, r22
    5de6:	08 95       	ret

00005de8 <_ZN14FreeBoardModel18setWindApparentDirEi>:
    5de8:	81 59       	subi	r24, 0x91	; 145
    5dea:	9f 4f       	sbci	r25, 0xFF	; 255
    5dec:	fc 01       	movw	r30, r24
    5dee:	71 83       	std	Z+1, r23	; 0x01
    5df0:	60 83       	st	Z, r22
    5df2:	08 95       	ret

00005df4 <_ZN14FreeBoardModel14setWindTrueDirEi>:
    5df4:	8f 58       	subi	r24, 0x8F	; 143
    5df6:	9f 4f       	sbci	r25, 0xFF	; 255
    5df8:	fc 01       	movw	r30, r24
    5dfa:	71 83       	std	Z+1, r23	; 0x01
    5dfc:	60 83       	st	Z, r22
    5dfe:	08 95       	ret

00005e00 <_ZN14FreeBoardModel14setWindAverageEf>:
    5e00:	87 59       	subi	r24, 0x97	; 151
    5e02:	9f 4f       	sbci	r25, 0xFF	; 255
    5e04:	fc 01       	movw	r30, r24
    5e06:	40 83       	st	Z, r20
    5e08:	51 83       	std	Z+1, r21	; 0x01
    5e0a:	62 83       	std	Z+2, r22	; 0x02
    5e0c:	73 83       	std	Z+3, r23	; 0x03
    5e0e:	08 95       	ret

00005e10 <_ZN14FreeBoardModel17setWindLastUpdateEm>:
    5e10:	8b 59       	subi	r24, 0x9B	; 155
    5e12:	9f 4f       	sbci	r25, 0xFF	; 255
    5e14:	fc 01       	movw	r30, r24
    5e16:	40 83       	st	Z, r20
    5e18:	51 83       	std	Z+1, r21	; 0x01
    5e1a:	62 83       	std	Z+2, r22	; 0x02
    5e1c:	73 83       	std	Z+3, r23	; 0x03
    5e1e:	08 95       	ret

00005e20 <_ZN14FreeBoardModel13isAutopilotOnEv>:
    5e20:	fc 01       	movw	r30, r24
    5e22:	85 a5       	ldd	r24, Z+45	; 0x2d
    5e24:	08 95       	ret

00005e26 <_ZN14FreeBoardModel14setAutopilotOnEb>:
    5e26:	1f 93       	push	r17
    5e28:	cf 93       	push	r28
    5e2a:	df 93       	push	r29
    5e2c:	ec 01       	movw	r28, r24
    5e2e:	16 2f       	mov	r17, r22
    5e30:	6a a9       	ldd	r22, Y+50	; 0x32
    5e32:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <_ZN14FreeBoardModel21setAutopilotReferenceEc>
    5e36:	1d a7       	std	Y+45, r17	; 0x2d
    5e38:	df 91       	pop	r29
    5e3a:	cf 91       	pop	r28
    5e3c:	1f 91       	pop	r17
    5e3e:	08 95       	ret

00005e40 <_ZN14FreeBoardModel10setWindMaxEi>:
    5e40:	83 59       	subi	r24, 0x93	; 147
    5e42:	9f 4f       	sbci	r25, 0xFF	; 255
    5e44:	fc 01       	movw	r30, r24
    5e46:	71 83       	std	Z+1, r23	; 0x01
    5e48:	60 83       	st	Z, r22
    5e4a:	08 95       	ret

00005e4c <_ZN14FreeBoardModel21setWindAlarmTriggeredEb>:
    5e4c:	8d 58       	subi	r24, 0x8D	; 141
    5e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e50:	fc 01       	movw	r30, r24
    5e52:	60 83       	st	Z, r22
    5e54:	08 95       	ret

00005e56 <_Z9calculatev>:
 * Timer interrupt driven method to do time sensitive calculations
 * The calc flag causes the main loop to execute other less sensitive calls.
 */
void calculate() {
	//we create 100ms pings here
	execute = true;
    5e56:	81 e0       	ldi	r24, 0x01	; 1
    5e58:	80 93 4c 10 	sts	0x104C, r24
	//we record the ping count out to 2 secs
	interval++;
    5e5c:	80 91 4a 10 	lds	r24, 0x104A
    5e60:	90 91 4b 10 	lds	r25, 0x104B
    5e64:	01 96       	adiw	r24, 0x01	; 1
    5e66:	90 93 4b 10 	sts	0x104B, r25
    5e6a:	80 93 4a 10 	sts	0x104A, r24
	interval = interval % 20;
    5e6e:	80 91 4a 10 	lds	r24, 0x104A
    5e72:	90 91 4b 10 	lds	r25, 0x104B
    5e76:	64 e1       	ldi	r22, 0x14	; 20
    5e78:	70 e0       	ldi	r23, 0x00	; 0
    5e7a:	0e 94 3f 40 	call	0x807e	; 0x807e <__divmodhi4>
    5e7e:	90 93 4b 10 	sts	0x104B, r25
    5e82:	80 93 4a 10 	sts	0x104A, r24
    5e86:	08 95       	ret

00005e88 <_Z7readWDDv>:
	wind.readWindDataSpeed();
}

void readWDD() {
	//intCnt++;
	wind.readWindDataDir();
    5e88:	82 ec       	ldi	r24, 0xC2	; 194
    5e8a:	99 e0       	ldi	r25, 0x09	; 9
    5e8c:	0c 94 89 37 	jmp	0x6f12	; 0x6f12 <_ZN4Wind15readWindDataDirEv>

00005e90 <_Z7readWDSv>:
	interval = interval % 20;
}

void readWDS() {
	//intCnt++;
	wind.readWindDataSpeed();
    5e90:	82 ec       	ldi	r24, 0xC2	; 194
    5e92:	99 e0       	ldi	r25, 0x09	; 9
    5e94:	0c 94 09 37 	jmp	0x6e12	; 0x6e12 <_ZN4Wind17readWindDataSpeedEv>

00005e98 <setup>:
//boolean inputSerialComplete = false; // whether the string is complete
boolean inputSerial1Complete = false; // whether the GPS string is complete
boolean inputSerial2Complete = false; // whether the string is complete
boolean inputSerial3Complete = false; // whether the string is complete

void setup() {
    5e98:	cf 93       	push	r28
    5e9a:	df 93       	push	r29
    5e9c:	cd b7       	in	r28, 0x3d	; 61
    5e9e:	de b7       	in	r29, 0x3e	; 62
    5ea0:	a2 97       	sbiw	r28, 0x22	; 34
    5ea2:	0f b6       	in	r0, 0x3f	; 63
    5ea4:	f8 94       	cli
    5ea6:	de bf       	out	0x3e, r29	; 62
    5ea8:	0f be       	out	0x3f, r0	; 63
    5eaa:	cd bf       	out	0x3d, r28	; 61

	//model.readConfig();
	inputSerial.reserve(40);
    5eac:	68 e2       	ldi	r22, 0x28	; 40
    5eae:	70 e0       	ldi	r23, 0x00	; 0
    5eb0:	8d e4       	ldi	r24, 0x4D	; 77
    5eb2:	99 e0       	ldi	r25, 0x09	; 9
    5eb4:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN6String7reserveEj>
	// initialize  serial ports:
	Serial.begin(38400, SERIAL_8N1);
    5eb8:	26 e0       	ldi	r18, 0x06	; 6
    5eba:	40 e0       	ldi	r20, 0x00	; 0
    5ebc:	56 e9       	ldi	r21, 0x96	; 150
    5ebe:	60 e0       	ldi	r22, 0x00	; 0
    5ec0:	70 e0       	ldi	r23, 0x00	; 0
    5ec2:	88 eb       	ldi	r24, 0xB8	; 184
    5ec4:	95 e0       	ldi	r25, 0x05	; 5
    5ec6:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN14HardwareSerial5beginEmh>
	if (DEBUG) Serial.println("Initializing..");
    5eca:	60 eb       	ldi	r22, 0xB0	; 176
    5ecc:	72 e0       	ldi	r23, 0x02	; 2
    5ece:	88 eb       	ldi	r24, 0xB8	; 184
    5ed0:	95 e0       	ldi	r25, 0x05	; 5
    5ed2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>

	//start gps on serial1, autobaud
	if (DEBUG) Serial.println("Start gps..");
    5ed6:	6f eb       	ldi	r22, 0xBF	; 191
    5ed8:	72 e0       	ldi	r23, 0x02	; 2
    5eda:	88 eb       	ldi	r24, 0xB8	; 184
    5edc:	95 e0       	ldi	r25, 0x05	; 5
    5ede:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
	gps.setupGps();
    5ee2:	8c eb       	ldi	r24, 0xBC	; 188
    5ee4:	99 e0       	ldi	r25, 0x09	; 9
    5ee6:	0e 94 00 36 	call	0x6c00	; 0x6c00 <_ZN3Gps8setupGpsEv>
	Serial1.begin(38400);
    5eea:	40 e0       	ldi	r20, 0x00	; 0
    5eec:	56 e9       	ldi	r21, 0x96	; 150
    5eee:	60 e0       	ldi	r22, 0x00	; 0
    5ef0:	70 e0       	ldi	r23, 0x00	; 0
    5ef2:	86 e9       	ldi	r24, 0x96	; 150
    5ef4:	95 e0       	ldi	r25, 0x05	; 5
    5ef6:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN14HardwareSerial5beginEm>

	if (DEBUG) Serial.println("Start seatalk - serial2..");
    5efa:	6b ec       	ldi	r22, 0xCB	; 203
    5efc:	72 e0       	ldi	r23, 0x02	; 2
    5efe:	88 eb       	ldi	r24, 0xB8	; 184
    5f00:	95 e0       	ldi	r25, 0x05	; 5
    5f02:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
	Serial2.begin(4800, SERIAL_9N1); //Seatalk interface
    5f06:	27 e0       	ldi	r18, 0x07	; 7
    5f08:	40 ec       	ldi	r20, 0xC0	; 192
    5f0a:	52 e1       	ldi	r21, 0x12	; 18
    5f0c:	60 e0       	ldi	r22, 0x00	; 0
    5f0e:	70 e0       	ldi	r23, 0x00	; 0
    5f10:	84 e7       	ldi	r24, 0x74	; 116
    5f12:	95 e0       	ldi	r25, 0x05	; 5
    5f14:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN14HardwareSerial5beginEmh>

	if (DEBUG) Serial.println("Start nmea Rx - serial3..");
    5f18:	65 ee       	ldi	r22, 0xE5	; 229
    5f1a:	72 e0       	ldi	r23, 0x02	; 2
    5f1c:	88 eb       	ldi	r24, 0xB8	; 184
    5f1e:	95 e0       	ldi	r25, 0x05	; 5
    5f20:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
	Serial3.begin(4800, SERIAL_8N1); //talker2
    5f24:	26 e0       	ldi	r18, 0x06	; 6
    5f26:	40 ec       	ldi	r20, 0xC0	; 192
    5f28:	52 e1       	ldi	r21, 0x12	; 18
    5f2a:	60 e0       	ldi	r22, 0x00	; 0
    5f2c:	70 e0       	ldi	r23, 0x00	; 0
    5f2e:	82 e5       	ldi	r24, 0x52	; 82
    5f30:	95 e0       	ldi	r25, 0x05	; 5
    5f32:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN14HardwareSerial5beginEmh>

	if (DEBUG) Serial.println("Start nmea Tx..");
    5f36:	6f ef       	ldi	r22, 0xFF	; 255
    5f38:	72 e0       	ldi	r23, 0x02	; 2
    5f3a:	88 eb       	ldi	r24, 0xB8	; 184
    5f3c:	95 e0       	ldi	r25, 0x05	; 5
    5f3e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
	pinMode(nmeaRxPin, INPUT);
    5f42:	60 e0       	ldi	r22, 0x00	; 0
    5f44:	84 e3       	ldi	r24, 0x34	; 52
    5f46:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	pinMode(nmeaTxPin, OUTPUT);
    5f4a:	61 e0       	ldi	r22, 0x01	; 1
    5f4c:	85 e3       	ldi	r24, 0x35	; 53
    5f4e:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	nmea.begin(4800);
    5f52:	40 ec       	ldi	r20, 0xC0	; 192
    5f54:	52 e1       	ldi	r21, 0x12	; 18
    5f56:	60 e0       	ldi	r22, 0x00	; 0
    5f58:	70 e0       	ldi	r23, 0x00	; 0
    5f5a:	8d e6       	ldi	r24, 0x6D	; 109
    5f5c:	9f e0       	ldi	r25, 0x0F	; 15
    5f5e:	0e 94 49 36 	call	0x6c92	; 0x6c92 <_ZN10NmeaSerial5beginEl>

	//setup interrupts to windPins
	if (DEBUG) Serial.println("Start wind..");
    5f62:	6f e0       	ldi	r22, 0x0F	; 15
    5f64:	73 e0       	ldi	r23, 0x03	; 3
    5f66:	88 eb       	ldi	r24, 0xB8	; 184
    5f68:	95 e0       	ldi	r25, 0x05	; 5
    5f6a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
	pinMode(windSpeedPin, INPUT);
    5f6e:	60 e0       	ldi	r22, 0x00	; 0
    5f70:	83 e0       	ldi	r24, 0x03	; 3
    5f72:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	attachInterrupt(windSpeedInterrupt, readWDS, FALLING);
    5f76:	42 e0       	ldi	r20, 0x02	; 2
    5f78:	50 e0       	ldi	r21, 0x00	; 0
    5f7a:	68 e4       	ldi	r22, 0x48	; 72
    5f7c:	7f e2       	ldi	r23, 0x2F	; 47
    5f7e:	81 e0       	ldi	r24, 0x01	; 1
    5f80:	0e 94 6e 09 	call	0x12dc	; 0x12dc <attachInterrupt>
	pinMode(windDirPin, INPUT);
    5f84:	60 e0       	ldi	r22, 0x00	; 0
    5f86:	82 e0       	ldi	r24, 0x02	; 2
    5f88:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	attachInterrupt(windDirInterrupt, readWDD, FALLING);
    5f8c:	42 e0       	ldi	r20, 0x02	; 2
    5f8e:	50 e0       	ldi	r21, 0x00	; 0
    5f90:	64 e4       	ldi	r22, 0x44	; 68
    5f92:	7f e2       	ldi	r23, 0x2F	; 47
    5f94:	80 e0       	ldi	r24, 0x00	; 0
    5f96:	0e 94 6e 09 	call	0x12dc	; 0x12dc <attachInterrupt>

//	//setup timers
	if (DEBUG) Serial.println("Start timer..");
    5f9a:	6c e1       	ldi	r22, 0x1C	; 28
    5f9c:	73 e0       	ldi	r23, 0x03	; 3
    5f9e:	88 eb       	ldi	r24, 0xB8	; 184
    5fa0:	95 e0       	ldi	r25, 0x05	; 5
    5fa2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
	FlexiTimer2::set(100, calculate); // 100ms period
    5fa6:	4b e2       	ldi	r20, 0x2B	; 43
    5fa8:	5f e2       	ldi	r21, 0x2F	; 47
    5faa:	64 e6       	ldi	r22, 0x64	; 100
    5fac:	70 e0       	ldi	r23, 0x00	; 0
    5fae:	80 e0       	ldi	r24, 0x00	; 0
    5fb0:	90 e0       	ldi	r25, 0x00	; 0
    5fb2:	0e 94 16 21 	call	0x422c	; 0x422c <_ZN11FlexiTimer23setEmPFvvE>
	FlexiTimer2::start();
    5fb6:	0e 94 22 21 	call	0x4244	; 0x4244 <_ZN11FlexiTimer25startEv>
	//lcd.clearLcd();

	if (DEBUG) Serial.println("Setup complete..");
    5fba:	6a e2       	ldi	r22, 0x2A	; 42
    5fbc:	73 e0       	ldi	r23, 0x03	; 3
    5fbe:	88 eb       	ldi	r24, 0xB8	; 184
    5fc0:	95 e0       	ldi	r25, 0x05	; 5
    5fc2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
	//print out the config
	model.sendData(Serial, CONFIG_T);
    5fc6:	68 eb       	ldi	r22, 0xB8	; 184
    5fc8:	75 e0       	ldi	r23, 0x05	; 5
    5fca:	ce 01       	movw	r24, r28
    5fcc:	01 96       	adiw	r24, 0x01	; 1
    5fce:	0e 94 98 2a 	call	0x5530	; 0x5530 <_ZN14HardwareSerialC1ERKS_>
    5fd2:	43 e4       	ldi	r20, 0x43	; 67
    5fd4:	be 01       	movw	r22, r28
    5fd6:	6f 5f       	subi	r22, 0xFF	; 255
    5fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    5fda:	8e ea       	ldi	r24, 0xAE	; 174
    5fdc:	9f e0       	ldi	r25, 0x0F	; 15
    5fde:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <_ZN14FreeBoardModel8sendDataE14HardwareSerialc>
}
    5fe2:	a2 96       	adiw	r28, 0x22	; 34
    5fe4:	0f b6       	in	r0, 0x3f	; 63
    5fe6:	f8 94       	cli
    5fe8:	de bf       	out	0x3e, r29	; 62
    5fea:	0f be       	out	0x3f, r0	; 63
    5fec:	cd bf       	out	0x3d, r28	; 61
    5fee:	df 91       	pop	r29
    5ff0:	cf 91       	pop	r28
    5ff2:	08 95       	ret

00005ff4 <_Z12serialEvent1v>:

	}
}

void serialEvent1() {
	while (Serial1.available()) {
    5ff4:	1f c0       	rjmp	.+62     	; 0x6034 <_Z12serialEvent1v+0x40>
		inputSerial1Complete = gps.decode(Serial1.read());
    5ff6:	86 e9       	ldi	r24, 0x96	; 150
    5ff8:	95 e0       	ldi	r25, 0x05	; 5
    5ffa:	0e 94 ad 01 	call	0x35a	; 0x35a <_ZN14HardwareSerial4readEv>
    5ffe:	68 2f       	mov	r22, r24
    6000:	8c eb       	ldi	r24, 0xBC	; 188
    6002:	99 e0       	ldi	r25, 0x09	; 9
    6004:	0e 94 41 35 	call	0x6a82	; 0x6a82 <_ZN3Gps6decodeEh>
    6008:	80 93 4c 09 	sts	0x094C, r24
		// read from port 1 (GPS), send to port 0:
		if (inputSerial1Complete) {
    600c:	88 23       	and	r24, r24
    600e:	91 f0       	breq	.+36     	; 0x6034 <_Z12serialEvent1v+0x40>
			if (MUX) nmea.printNmea(gpsSource.sentence());
    6010:	84 e0       	ldi	r24, 0x04	; 4
    6012:	9e e0       	ldi	r25, 0x0E	; 14
    6014:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <_ZN4NMEA8sentenceEv>
    6018:	bc 01       	movw	r22, r24
    601a:	8d e6       	ldi	r24, 0x6D	; 109
    601c:	9f e0       	ldi	r25, 0x0F	; 15
    601e:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <_ZN10NmeaSerial9printNmeaEPc>
			Serial.println(gpsSource.sentence());
    6022:	84 e0       	ldi	r24, 0x04	; 4
    6024:	9e e0       	ldi	r25, 0x0E	; 14
    6026:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <_ZN4NMEA8sentenceEv>
    602a:	bc 01       	movw	r22, r24
    602c:	88 eb       	ldi	r24, 0xB8	; 184
    602e:	95 e0       	ldi	r25, 0x05	; 5
    6030:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>

	}
}

void serialEvent1() {
	while (Serial1.available()) {
    6034:	86 e9       	ldi	r24, 0x96	; 150
    6036:	95 e0       	ldi	r25, 0x05	; 5
    6038:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN14HardwareSerial9availableEv>
    603c:	89 2b       	or	r24, r25
    603e:	d9 f6       	brne	.-74     	; 0x5ff6 <_Z12serialEvent1v+0x2>
			Serial.println(gpsSource.sentence());
			//loop every sentence
			break;
		}
	}
}
    6040:	08 95       	ret

00006042 <_Z12serialEvent2v>:

void serialEvent2() {
	while (Serial2.available()) {
    6042:	09 c0       	rjmp	.+18     	; 0x6056 <_Z12serialEvent2v+0x14>
		seatalk.processSeaTalkByte(Serial2.read());
    6044:	84 e7       	ldi	r24, 0x74	; 116
    6046:	95 e0       	ldi	r25, 0x05	; 5
    6048:	0e 94 ad 01 	call	0x35a	; 0x35a <_ZN14HardwareSerial4readEv>
    604c:	68 2f       	mov	r22, r24
    604e:	84 e5       	ldi	r24, 0x54	; 84
    6050:	99 e0       	ldi	r25, 0x09	; 9
    6052:	0e 94 f8 36 	call	0x6df0	; 0x6df0 <_ZN7Seatalk18processSeaTalkByteEh>
		}
	}
}

void serialEvent2() {
	while (Serial2.available()) {
    6056:	84 e7       	ldi	r24, 0x74	; 116
    6058:	95 e0       	ldi	r25, 0x05	; 5
    605a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN14HardwareSerial9availableEv>
    605e:	89 2b       	or	r24, r25
    6060:	89 f7       	brne	.-30     	; 0x6044 <_Z12serialEvent2v+0x2>
		seatalk.processSeaTalkByte(Serial2.read());
	}
}
    6062:	08 95       	ret

00006064 <_Z12serialEvent3v>:

void serialEvent3() {
	while (Serial3.available()) {
    6064:	1f c0       	rjmp	.+62     	; 0x60a4 <_Z12serialEvent3v+0x40>
		inputSerial3Complete = talker3.decode(Serial3.read());
    6066:	82 e5       	ldi	r24, 0x52	; 82
    6068:	95 e0       	ldi	r25, 0x05	; 5
    606a:	0e 94 ad 01 	call	0x35a	; 0x35a <_ZN14HardwareSerial4readEv>
    606e:	68 2f       	mov	r22, r24
    6070:	89 ec       	ldi	r24, 0xC9	; 201
    6072:	99 e0       	ldi	r25, 0x09	; 9
    6074:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <_ZN4NMEA6decodeEc>
    6078:	80 93 4b 09 	sts	0x094B, r24
		if (inputSerial3Complete) {
    607c:	88 23       	and	r24, r24
    607e:	91 f0       	breq	.+36     	; 0x60a4 <_Z12serialEvent3v+0x40>
			if (MUX) nmea.printNmea(talker3.sentence());
    6080:	89 ec       	ldi	r24, 0xC9	; 201
    6082:	99 e0       	ldi	r25, 0x09	; 9
    6084:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <_ZN4NMEA8sentenceEv>
    6088:	bc 01       	movw	r22, r24
    608a:	8d e6       	ldi	r24, 0x6D	; 109
    608c:	9f e0       	ldi	r25, 0x0F	; 15
    608e:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <_ZN10NmeaSerial9printNmeaEPc>
			Serial.println(talker3.sentence());
    6092:	89 ec       	ldi	r24, 0xC9	; 201
    6094:	99 e0       	ldi	r25, 0x09	; 9
    6096:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <_ZN4NMEA8sentenceEv>
    609a:	bc 01       	movw	r22, r24
    609c:	88 eb       	ldi	r24, 0xB8	; 184
    609e:	95 e0       	ldi	r25, 0x05	; 5
    60a0:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
		seatalk.processSeaTalkByte(Serial2.read());
	}
}

void serialEvent3() {
	while (Serial3.available()) {
    60a4:	82 e5       	ldi	r24, 0x52	; 82
    60a6:	95 e0       	ldi	r25, 0x05	; 5
    60a8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN14HardwareSerial9availableEv>
    60ac:	89 2b       	or	r24, r25
    60ae:	d9 f6       	brne	.-74     	; 0x6066 <_Z12serialEvent3v+0x2>
			Serial.println(talker3.sentence());
			//loop every sentence
			break;
		}
	}
}
    60b0:	08 95       	ret

000060b2 <loop>:

void loop() {
    60b2:	cf 93       	push	r28
    60b4:	df 93       	push	r29
    60b6:	cd b7       	in	r28, 0x3d	; 61
    60b8:	de b7       	in	r29, 0x3e	; 62
    60ba:	a2 97       	sbiw	r28, 0x22	; 34
    60bc:	0f b6       	in	r0, 0x3f	; 63
    60be:	f8 94       	cli
    60c0:	de bf       	out	0x3e, r29	; 62
    60c2:	0f be       	out	0x3f, r0	; 63
    60c4:	cd bf       	out	0x3d, r28	; 61

	//if (DEBUG)
	//Serial.println("Looping..");

	if (execute) {
    60c6:	80 91 4c 10 	lds	r24, 0x104C
    60ca:	88 23       	and	r24, r24
    60cc:	b9 f1       	breq	.+110    	; 0x613c <loop+0x8a>
		//timer ping
		//do these every 100ms
		autopilot.calcAutoPilot();
    60ce:	82 e7       	ldi	r24, 0x72	; 114
    60d0:	99 e0       	ldi	r25, 0x09	; 9
    60d2:	0e 94 48 28 	call	0x5090	; 0x5090 <_ZN9Autopilot13calcAutoPilotEv>

//		if (interval % 2 == 0) {
//			//do every 200ms
		wind.calcWindData();
    60d6:	82 ec       	ldi	r24, 0xC2	; 194
    60d8:	99 e0       	ldi	r25, 0x09	; 9
    60da:	0e 94 f7 38 	call	0x71ee	; 0x71ee <_ZN4Wind12calcWindDataEv>
//		}
		if (interval % 5 == 0) {
    60de:	80 91 4a 10 	lds	r24, 0x104A
    60e2:	90 91 4b 10 	lds	r25, 0x104B
    60e6:	65 e0       	ldi	r22, 0x05	; 5
    60e8:	70 e0       	ldi	r23, 0x00	; 0
    60ea:	0e 94 3f 40 	call	0x807e	; 0x807e <__divmodhi4>
    60ee:	89 2b       	or	r24, r25
    60f0:	69 f4       	brne	.+26     	; 0x610c <loop+0x5a>
			//do every 500ms

			//fire any alarms
			//alarm.checkAlarms();
			model.writeSimple(Serial);
    60f2:	68 eb       	ldi	r22, 0xB8	; 184
    60f4:	75 e0       	ldi	r23, 0x05	; 5
    60f6:	ce 01       	movw	r24, r28
    60f8:	01 96       	adiw	r24, 0x01	; 1
    60fa:	0e 94 98 2a 	call	0x5530	; 0x5530 <_ZN14HardwareSerialC1ERKS_>
    60fe:	be 01       	movw	r22, r28
    6100:	6f 5f       	subi	r22, 0xFF	; 255
    6102:	7f 4f       	sbci	r23, 0xFF	; 255
    6104:	8e ea       	ldi	r24, 0xAE	; 174
    6106:	9f e0       	ldi	r25, 0x0F	; 15
    6108:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial>
		}
		if (interval % 10 == 0) {
    610c:	80 91 4a 10 	lds	r24, 0x104A
    6110:	90 91 4b 10 	lds	r25, 0x104B
    6114:	6a e0       	ldi	r22, 0x0A	; 10
    6116:	70 e0       	ldi	r23, 0x00	; 0
    6118:	0e 94 3f 40 	call	0x807e	; 0x807e <__divmodhi4>
    611c:	89 2b       	or	r24, r25
    611e:	61 f4       	brne	.+24     	; 0x6138 <loop+0x86>
			//do every 1000ms
			anchor.checkAnchor();
    6120:	8e e6       	ldi	r24, 0x6E	; 110
    6122:	99 e0       	ldi	r25, 0x09	; 9
    6124:	0e 94 89 26 	call	0x4d12	; 0x4d12 <_ZN6Anchor11checkAnchorEv>
			alarm.checkWindAlarm();
    6128:	84 ec       	ldi	r24, 0xC4	; 196
    612a:	99 e0       	ldi	r25, 0x09	; 9
    612c:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <_ZN5Alarm14checkWindAlarmEv>
			nmea.printWindNmea();
    6130:	8d e6       	ldi	r24, 0x6D	; 109
    6132:	9f e0       	ldi	r25, 0x0F	; 15
    6134:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <_ZN10NmeaSerial13printWindNmeaEv>
		}
		//if (interval % 20 == 0) {
		//do every 2000ms
		//}

		execute = false;
    6138:	10 92 4c 10 	sts	0x104C, r1
	 s.append(", stack: ");
	 s.append((int)stackptr);
	 if(DEBUG)Serial.println(s);
	 */

}
    613c:	a2 96       	adiw	r28, 0x22	; 34
    613e:	0f b6       	in	r0, 0x3f	; 63
    6140:	f8 94       	cli
    6142:	de bf       	out	0x3e, r29	; 62
    6144:	0f be       	out	0x3f, r0	; 63
    6146:	cd bf       	out	0x3d, r28	; 61
    6148:	df 91       	pop	r29
    614a:	cf 91       	pop	r28
    614c:	08 95       	ret

0000614e <_Z7processPcc>:

void process(char * s, char parser) {
    614e:	4f 92       	push	r4
    6150:	5f 92       	push	r5
    6152:	6f 92       	push	r6
    6154:	7f 92       	push	r7
    6156:	8f 92       	push	r8
    6158:	9f 92       	push	r9
    615a:	af 92       	push	r10
    615c:	bf 92       	push	r11
    615e:	cf 92       	push	r12
    6160:	df 92       	push	r13
    6162:	ef 92       	push	r14
    6164:	ff 92       	push	r15
    6166:	0f 93       	push	r16
    6168:	1f 93       	push	r17
    616a:	cf 93       	push	r28
    616c:	df 93       	push	r29
    616e:	00 d0       	rcall	.+0      	; 0x6170 <_Z7processPcc+0x22>
    6170:	00 d0       	rcall	.+0      	; 0x6172 <_Z7processPcc+0x24>
    6172:	1f 92       	push	r1
    6174:	cd b7       	in	r28, 0x3d	; 61
    6176:	de b7       	in	r29, 0x3e	; 62
		}
		//next token
		cmd = strtok(NULL, ",");
	}
	//if (DEBUG) Serial.println("Process str exit");
}
    6178:	6d b6       	in	r6, 0x3d	; 61
    617a:	7e b6       	in	r7, 0x3e	; 62
}

void process(char * s, char parser) {
	//if (DEBUG) Serial.print("Process str:");
	//if (DEBUG) Serial.println(s);
	char *cmd = strtok(s, ",");
    617c:	6e e5       	ldi	r22, 0x5E	; 94
    617e:	72 e0       	ldi	r23, 0x02	; 2
    6180:	73 c1       	rjmp	.+742    	; 0x6468 <_Z7processPcc+0x31a>
    6182:	4d b6       	in	r4, 0x3d	; 61
    6184:	5e b6       	in	r5, 0x3e	; 62
		char key[5];
		int l = strlen(cmd);

		if (cmd[0] == '#') {
			//
			strncpy(key, cmd, 4);
    6186:	44 e0       	ldi	r20, 0x04	; 4
    6188:	50 e0       	ldi	r21, 0x00	; 0
    618a:	b7 01       	movw	r22, r14
    618c:	ce 01       	movw	r24, r28
    618e:	01 96       	adiw	r24, 0x01	; 1
    6190:	0e 94 5e 41 	call	0x82bc	; 0x82bc <strncpy>
			key[4] = '\0';
    6194:	1d 82       	std	Y+5, r1	; 0x05
			char val[l - 4];
    6196:	48 01       	movw	r8, r16
    6198:	85 e0       	ldi	r24, 0x05	; 5
    619a:	88 1a       	sub	r8, r24
    619c:	91 08       	sbc	r9, r1
    619e:	68 01       	movw	r12, r16
    61a0:	94 e0       	ldi	r25, 0x04	; 4
    61a2:	c9 1a       	sub	r12, r25
    61a4:	d1 08       	sbc	r13, r1
    61a6:	ad b7       	in	r26, 0x3d	; 61
    61a8:	be b7       	in	r27, 0x3e	; 62
    61aa:	ac 19       	sub	r26, r12
    61ac:	bd 09       	sbc	r27, r13
    61ae:	0f b6       	in	r0, 0x3f	; 63
    61b0:	f8 94       	cli
    61b2:	be bf       	out	0x3e, r27	; 62
    61b4:	0f be       	out	0x3f, r0	; 63
    61b6:	ad bf       	out	0x3d, r26	; 61
    61b8:	ad b6       	in	r10, 0x3d	; 61
    61ba:	be b6       	in	r11, 0x3e	; 62
    61bc:	ef ef       	ldi	r30, 0xFF	; 255
    61be:	ae 1a       	sub	r10, r30
    61c0:	be 0a       	sbc	r11, r30
			memcpy(val, &cmd[5], l - 5);
    61c2:	65 01       	movw	r12, r10
    61c4:	f5 e0       	ldi	r31, 0x05	; 5
    61c6:	ef 0e       	add	r14, r31
    61c8:	f1 1c       	adc	r15, r1
    61ca:	a4 01       	movw	r20, r8
    61cc:	b7 01       	movw	r22, r14
    61ce:	c5 01       	movw	r24, r10
    61d0:	0e 94 1a 41 	call	0x8234	; 0x8234 <memcpy>
			val[l - 5] = '\0';
    61d4:	f5 01       	movw	r30, r10
    61d6:	e8 0d       	add	r30, r8
    61d8:	f9 1d       	adc	r31, r9
    61da:	10 82       	st	Z, r1
			//if (DEBUG) Serial.print(key);
			//if (DEBUG) Serial.print(" = ");
			//if (DEBUG) Serial.println(val);

			//anchor
			if (strcmp(key, ANCHOR_ALARM_STATE) == 0) {
    61dc:	6b e3       	ldi	r22, 0x3B	; 59
    61de:	73 e0       	ldi	r23, 0x03	; 3
    61e0:	ce 01       	movw	r24, r28
    61e2:	01 96       	adiw	r24, 0x01	; 1
    61e4:	0e 94 40 41 	call	0x8280	; 0x8280 <strcmp>
    61e8:	00 97       	sbiw	r24, 0x00	; 0
    61ea:	b1 f4       	brne	.+44     	; 0x6218 <_Z7processPcc+0xca>
				//if (DEBUG) Serial.print("AA Entered..");
				model.setAnchorAlarmOn(atoi(val));
    61ec:	c5 01       	movw	r24, r10
    61ee:	0e 94 b9 40 	call	0x8172	; 0x8172 <atoi>
    61f2:	61 e0       	ldi	r22, 0x01	; 1
    61f4:	89 2b       	or	r24, r25
    61f6:	09 f4       	brne	.+2      	; 0x61fa <_Z7processPcc+0xac>
    61f8:	60 e0       	ldi	r22, 0x00	; 0
    61fa:	8e ea       	ldi	r24, 0xAE	; 174
    61fc:	9f e0       	ldi	r25, 0x0F	; 15
    61fe:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <_ZN14FreeBoardModel16setAnchorAlarmOnEb>
				if (atoi(val) == 1) {
    6202:	c6 01       	movw	r24, r12
    6204:	0e 94 b9 40 	call	0x8172	; 0x8172 <atoi>
    6208:	01 97       	sbiw	r24, 0x01	; 1
    620a:	09 f0       	breq	.+2      	; 0x620e <_Z7processPcc+0xc0>
    620c:	bf c0       	rjmp	.+382    	; 0x638c <_Z7processPcc+0x23e>
					anchor.setAnchorPoint();
    620e:	8e e6       	ldi	r24, 0x6E	; 110
    6210:	99 e0       	ldi	r25, 0x09	; 9
    6212:	0e 94 82 27 	call	0x4f04	; 0x4f04 <_ZN6Anchor14setAnchorPointEv>
    6216:	ba c0       	rjmp	.+372    	; 0x638c <_Z7processPcc+0x23e>
				}
			} else if (strcmp(key, ANCHOR_ALARM_ADJUST) == 0) {
    6218:	60 e4       	ldi	r22, 0x40	; 64
    621a:	73 e0       	ldi	r23, 0x03	; 3
    621c:	ce 01       	movw	r24, r28
    621e:	01 96       	adiw	r24, 0x01	; 1
    6220:	0e 94 40 41 	call	0x8280	; 0x8280 <strcmp>
    6224:	00 97       	sbiw	r24, 0x00	; 0
    6226:	b1 f4       	brne	.+44     	; 0x6254 <_Z7processPcc+0x106>
				model.setAnchorRadius(model.getAnchorRadius() + atof(val));
    6228:	8e ea       	ldi	r24, 0xAE	; 174
    622a:	9f e0       	ldi	r25, 0x0F	; 15
    622c:	0e 94 40 2b 	call	0x5680	; 0x5680 <_ZN14FreeBoardModel15getAnchorRadiusEv>
    6230:	6b 01       	movw	r12, r22
    6232:	7c 01       	movw	r14, r24
    6234:	c5 01       	movw	r24, r10
    6236:	0e 94 b5 40 	call	0x816a	; 0x816a <atof>
    623a:	9b 01       	movw	r18, r22
    623c:	ac 01       	movw	r20, r24
    623e:	c7 01       	movw	r24, r14
    6240:	b6 01       	movw	r22, r12
    6242:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    6246:	ab 01       	movw	r20, r22
    6248:	bc 01       	movw	r22, r24
    624a:	8e ea       	ldi	r24, 0xAE	; 174
    624c:	9f e0       	ldi	r25, 0x0F	; 15
    624e:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <_ZN14FreeBoardModel15setAnchorRadiusEf>
    6252:	9c c0       	rjmp	.+312    	; 0x638c <_Z7processPcc+0x23e>
			} else if (strcmp(key, ANCHOR_ALARM_LAT) == 0) {
    6254:	65 e4       	ldi	r22, 0x45	; 69
    6256:	73 e0       	ldi	r23, 0x03	; 3
    6258:	ce 01       	movw	r24, r28
    625a:	01 96       	adiw	r24, 0x01	; 1
    625c:	0e 94 40 41 	call	0x8280	; 0x8280 <strcmp>
    6260:	00 97       	sbiw	r24, 0x00	; 0
    6262:	51 f4       	brne	.+20     	; 0x6278 <_Z7processPcc+0x12a>
				model.setAnchorLat(atof(val));
    6264:	c5 01       	movw	r24, r10
    6266:	0e 94 b5 40 	call	0x816a	; 0x816a <atof>
    626a:	ab 01       	movw	r20, r22
    626c:	bc 01       	movw	r22, r24
    626e:	8e ea       	ldi	r24, 0xAE	; 174
    6270:	9f e0       	ldi	r25, 0x0F	; 15
    6272:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <_ZN14FreeBoardModel12setAnchorLatEf>
    6276:	8a c0       	rjmp	.+276    	; 0x638c <_Z7processPcc+0x23e>
			} else if (strcmp(key, ANCHOR_ALARM_LON) == 0) {
    6278:	6a e4       	ldi	r22, 0x4A	; 74
    627a:	73 e0       	ldi	r23, 0x03	; 3
    627c:	ce 01       	movw	r24, r28
    627e:	01 96       	adiw	r24, 0x01	; 1
    6280:	0e 94 40 41 	call	0x8280	; 0x8280 <strcmp>
    6284:	00 97       	sbiw	r24, 0x00	; 0
    6286:	51 f4       	brne	.+20     	; 0x629c <_Z7processPcc+0x14e>
				model.setAnchorLon(atof(val));
    6288:	c5 01       	movw	r24, r10
    628a:	0e 94 b5 40 	call	0x816a	; 0x816a <atof>
    628e:	ab 01       	movw	r20, r22
    6290:	bc 01       	movw	r22, r24
    6292:	8e ea       	ldi	r24, 0xAE	; 174
    6294:	9f e0       	ldi	r25, 0x0F	; 15
    6296:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <_ZN14FreeBoardModel12setAnchorLonEf>
    629a:	78 c0       	rjmp	.+240    	; 0x638c <_Z7processPcc+0x23e>
			}
			//autopliot
			else if (strcmp(key, AUTOPILOT_STATE) == 0) {
    629c:	6f e4       	ldi	r22, 0x4F	; 79
    629e:	73 e0       	ldi	r23, 0x03	; 3
    62a0:	ce 01       	movw	r24, r28
    62a2:	01 96       	adiw	r24, 0x01	; 1
    62a4:	0e 94 40 41 	call	0x8280	; 0x8280 <strcmp>
    62a8:	00 97       	sbiw	r24, 0x00	; 0
    62aa:	61 f4       	brne	.+24     	; 0x62c4 <_Z7processPcc+0x176>
				//if (DEBUG) Serial.print("AP Entered..");
				//if (DEBUG) Serial.println(val);
				//this is potentailly dangerous, since we dont want the boat diving off on an old target heading.
				//in model we ALWAYS reset to current magnetic or wind heading at this point
				model.setAutopilotOn(atoi(val));
    62ac:	c5 01       	movw	r24, r10
    62ae:	0e 94 b9 40 	call	0x8172	; 0x8172 <atoi>
    62b2:	61 e0       	ldi	r22, 0x01	; 1
    62b4:	89 2b       	or	r24, r25
    62b6:	09 f4       	brne	.+2      	; 0x62ba <_Z7processPcc+0x16c>
    62b8:	60 e0       	ldi	r22, 0x00	; 0
    62ba:	8e ea       	ldi	r24, 0xAE	; 174
    62bc:	9f e0       	ldi	r25, 0x0F	; 15
    62be:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <_ZN14FreeBoardModel14setAutopilotOnEb>
    62c2:	64 c0       	rjmp	.+200    	; 0x638c <_Z7processPcc+0x23e>
			} else if (strcmp(key, AUTOPILOT_ADJUST) == 0) {
    62c4:	64 e5       	ldi	r22, 0x54	; 84
    62c6:	73 e0       	ldi	r23, 0x03	; 3
    62c8:	ce 01       	movw	r24, r28
    62ca:	01 96       	adiw	r24, 0x01	; 1
    62cc:	0e 94 40 41 	call	0x8280	; 0x8280 <strcmp>
    62d0:	00 97       	sbiw	r24, 0x00	; 0
    62d2:	c1 f4       	brne	.+48     	; 0x6304 <_Z7processPcc+0x1b6>
				model.setAutopilotTargetHeading(model.getAutopilotTargetHeading() + atol(val));
    62d4:	8e ea       	ldi	r24, 0xAE	; 174
    62d6:	9f e0       	ldi	r25, 0x0F	; 15
    62d8:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    62dc:	6b 01       	movw	r12, r22
    62de:	7c 01       	movw	r14, r24
    62e0:	c5 01       	movw	r24, r10
    62e2:	0e 94 d7 40 	call	0x81ae	; 0x81ae <atol>
    62e6:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__floatsisf>
    62ea:	9b 01       	movw	r18, r22
    62ec:	ac 01       	movw	r20, r24
    62ee:	c7 01       	movw	r24, r14
    62f0:	b6 01       	movw	r22, r12
    62f2:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    62f6:	ab 01       	movw	r20, r22
    62f8:	bc 01       	movw	r22, r24
    62fa:	8e ea       	ldi	r24, 0xAE	; 174
    62fc:	9f e0       	ldi	r25, 0x0F	; 15
    62fe:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <_ZN14FreeBoardModel25setAutopilotTargetHeadingEd>
    6302:	44 c0       	rjmp	.+136    	; 0x638c <_Z7processPcc+0x23e>
			} else if (strcmp(key, AUTOPILOT_SOURCE) == 0) {
    6304:	69 e5       	ldi	r22, 0x59	; 89
    6306:	73 e0       	ldi	r23, 0x03	; 3
    6308:	ce 01       	movw	r24, r28
    630a:	01 96       	adiw	r24, 0x01	; 1
    630c:	0e 94 40 41 	call	0x8280	; 0x8280 <strcmp>
    6310:	00 97       	sbiw	r24, 0x00	; 0
    6312:	39 f4       	brne	.+14     	; 0x6322 <_Z7processPcc+0x1d4>
				model.setAutopilotReference(val[0]);
    6314:	d5 01       	movw	r26, r10
    6316:	6c 91       	ld	r22, X
    6318:	8e ea       	ldi	r24, 0xAE	; 174
    631a:	9f e0       	ldi	r25, 0x0F	; 15
    631c:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <_ZN14FreeBoardModel21setAutopilotReferenceEc>
    6320:	35 c0       	rjmp	.+106    	; 0x638c <_Z7processPcc+0x23e>
			}
			//wind
			else if (strcmp(key, WIND_SPEED_ALARM_STATE) == 0) {
    6322:	6e e5       	ldi	r22, 0x5E	; 94
    6324:	73 e0       	ldi	r23, 0x03	; 3
    6326:	ce 01       	movw	r24, r28
    6328:	01 96       	adiw	r24, 0x01	; 1
    632a:	0e 94 40 41 	call	0x8280	; 0x8280 <strcmp>
    632e:	00 97       	sbiw	r24, 0x00	; 0
    6330:	61 f4       	brne	.+24     	; 0x634a <_Z7processPcc+0x1fc>
				model.setWindAlarmOn(atoi(val));
    6332:	c5 01       	movw	r24, r10
    6334:	0e 94 b9 40 	call	0x8172	; 0x8172 <atoi>
    6338:	61 e0       	ldi	r22, 0x01	; 1
    633a:	89 2b       	or	r24, r25
    633c:	09 f4       	brne	.+2      	; 0x6340 <_Z7processPcc+0x1f2>
    633e:	60 e0       	ldi	r22, 0x00	; 0
    6340:	8e ea       	ldi	r24, 0xAE	; 174
    6342:	9f e0       	ldi	r25, 0x0F	; 15
    6344:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <_ZN14FreeBoardModel14setWindAlarmOnEb>
    6348:	21 c0       	rjmp	.+66     	; 0x638c <_Z7processPcc+0x23e>
			} else if (strcpy(key, WIND_ALARM_KNOTS) == 0) {
    634a:	63 e6       	ldi	r22, 0x63	; 99
    634c:	73 e0       	ldi	r23, 0x03	; 3
    634e:	ce 01       	movw	r24, r28
    6350:	01 96       	adiw	r24, 0x01	; 1
    6352:	0e 94 49 41 	call	0x8292	; 0x8292 <strcpy>
    6356:	00 97       	sbiw	r24, 0x00	; 0
    6358:	49 f4       	brne	.+18     	; 0x636c <_Z7processPcc+0x21e>
				model.setWindAlarmSpeed(atoi(val));
    635a:	c5 01       	movw	r24, r10
    635c:	0e 94 b9 40 	call	0x8172	; 0x8172 <atoi>
    6360:	bc 01       	movw	r22, r24
    6362:	8e ea       	ldi	r24, 0xAE	; 174
    6364:	9f e0       	ldi	r25, 0x0F	; 15
    6366:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <_ZN14FreeBoardModel17setWindAlarmSpeedEi>
    636a:	10 c0       	rjmp	.+32     	; 0x638c <_Z7processPcc+0x23e>
			} else if (strcpy(key, WIND_ZERO_ADJUST) == 0) {
    636c:	68 e6       	ldi	r22, 0x68	; 104
    636e:	73 e0       	ldi	r23, 0x03	; 3
    6370:	ce 01       	movw	r24, r28
    6372:	01 96       	adiw	r24, 0x01	; 1
    6374:	0e 94 49 41 	call	0x8292	; 0x8292 <strcpy>
    6378:	00 97       	sbiw	r24, 0x00	; 0
    637a:	41 f4       	brne	.+16     	; 0x638c <_Z7processPcc+0x23e>
				model.setWindZeroOffset(atoi(val));
    637c:	c5 01       	movw	r24, r10
    637e:	0e 94 b9 40 	call	0x8172	; 0x8172 <atoi>
    6382:	bc 01       	movw	r22, r24
    6384:	8e ea       	ldi	r24, 0xAE	; 174
    6386:	9f e0       	ldi	r25, 0x0F	; 15
    6388:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <_ZN14FreeBoardModel17setWindZeroOffsetEi>
    638c:	34 2d       	mov	r19, r4
    638e:	25 2d       	mov	r18, r5
    6390:	60 c0       	rjmp	.+192    	; 0x6452 <_Z7processPcc+0x304>
    6392:	8d b6       	in	r8, 0x3d	; 61
    6394:	9e b6       	in	r9, 0x3e	; 62
			}
		} else {
			strncpy(key, cmd, 3);
    6396:	43 e0       	ldi	r20, 0x03	; 3
    6398:	50 e0       	ldi	r21, 0x00	; 0
    639a:	b7 01       	movw	r22, r14
    639c:	ce 01       	movw	r24, r28
    639e:	01 96       	adiw	r24, 0x01	; 1
    63a0:	0e 94 5e 41 	call	0x82bc	; 0x82bc <strncpy>
			key[3] = '\0';
    63a4:	1c 82       	std	Y+4, r1	; 0x04
			char val[l - 3];
    63a6:	58 01       	movw	r10, r16
    63a8:	b4 e0       	ldi	r27, 0x04	; 4
    63aa:	ab 1a       	sub	r10, r27
    63ac:	b1 08       	sbc	r11, r1
    63ae:	68 01       	movw	r12, r16
    63b0:	e3 e0       	ldi	r30, 0x03	; 3
    63b2:	ce 1a       	sub	r12, r30
    63b4:	d1 08       	sbc	r13, r1
    63b6:	8d b7       	in	r24, 0x3d	; 61
    63b8:	9e b7       	in	r25, 0x3e	; 62
    63ba:	8c 19       	sub	r24, r12
    63bc:	9d 09       	sbc	r25, r13
    63be:	0f b6       	in	r0, 0x3f	; 63
    63c0:	f8 94       	cli
    63c2:	9e bf       	out	0x3e, r25	; 62
    63c4:	0f be       	out	0x3f, r0	; 63
    63c6:	8d bf       	out	0x3d, r24	; 61
    63c8:	0d b7       	in	r16, 0x3d	; 61
    63ca:	1e b7       	in	r17, 0x3e	; 62
    63cc:	0f 5f       	subi	r16, 0xFF	; 255
    63ce:	1f 4f       	sbci	r17, 0xFF	; 255
			memcpy(val, &cmd[4], l - 4);
    63d0:	68 01       	movw	r12, r16
    63d2:	94 e0       	ldi	r25, 0x04	; 4
    63d4:	e9 0e       	add	r14, r25
    63d6:	f1 1c       	adc	r15, r1
    63d8:	a5 01       	movw	r20, r10
    63da:	b7 01       	movw	r22, r14
    63dc:	c8 01       	movw	r24, r16
    63de:	0e 94 1a 41 	call	0x8234	; 0x8234 <memcpy>
			val[l - 4] = '\0';
    63e2:	f8 01       	movw	r30, r16
    63e4:	ea 0d       	add	r30, r10
    63e6:	fb 1d       	adc	r31, r11
    63e8:	10 82       	st	Z, r1
			//if (DEBUG) Serial.print(key);
			//if (DEBUG) Serial.print(" = ");
			//if (DEBUG) Serial.println(val);
			// incoming data = WST,WSA,WDT,WDA,WSU,LAT,LON,COG,MGH,SOG,YAW
			if (strcmp(key, MGH) == 0) {
    63ea:	6d e6       	ldi	r22, 0x6D	; 109
    63ec:	73 e0       	ldi	r23, 0x03	; 3
    63ee:	ce 01       	movw	r24, r28
    63f0:	01 96       	adiw	r24, 0x01	; 1
    63f2:	0e 94 40 41 	call	0x8280	; 0x8280 <strcmp>
    63f6:	00 97       	sbiw	r24, 0x00	; 0
    63f8:	49 f4       	brne	.+18     	; 0x640c <_Z7processPcc+0x2be>
				model.setMagneticHeading(atof(val));
    63fa:	c8 01       	movw	r24, r16
    63fc:	0e 94 b5 40 	call	0x816a	; 0x816a <atof>
    6400:	ab 01       	movw	r20, r22
    6402:	bc 01       	movw	r22, r24
    6404:	8e ea       	ldi	r24, 0xAE	; 174
    6406:	9f e0       	ldi	r25, 0x0F	; 15
    6408:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <_ZN14FreeBoardModel18setMagneticHeadingEf>
			}
			if (strcmp(key, DECL) == 0) {
    640c:	61 e7       	ldi	r22, 0x71	; 113
    640e:	73 e0       	ldi	r23, 0x03	; 3
    6410:	ce 01       	movw	r24, r28
    6412:	01 96       	adiw	r24, 0x01	; 1
    6414:	0e 94 40 41 	call	0x8280	; 0x8280 <strcmp>
    6418:	00 97       	sbiw	r24, 0x00	; 0
    641a:	49 f4       	brne	.+18     	; 0x642e <_Z7processPcc+0x2e0>
				model.setDeclination(atof(val));
    641c:	c6 01       	movw	r24, r12
    641e:	0e 94 b5 40 	call	0x816a	; 0x816a <atof>
    6422:	ab 01       	movw	r20, r22
    6424:	bc 01       	movw	r22, r24
    6426:	8e ea       	ldi	r24, 0xAE	; 174
    6428:	9f e0       	ldi	r25, 0x0F	; 15
    642a:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <_ZN14FreeBoardModel14setDeclinationEf>
			}
			if (strcmp(key, WDT) == 0) {
    642e:	65 e7       	ldi	r22, 0x75	; 117
    6430:	73 e0       	ldi	r23, 0x03	; 3
    6432:	ce 01       	movw	r24, r28
    6434:	01 96       	adiw	r24, 0x01	; 1
    6436:	0e 94 40 41 	call	0x8280	; 0x8280 <strcmp>
    643a:	00 97       	sbiw	r24, 0x00	; 0
    643c:	41 f4       	brne	.+16     	; 0x644e <_Z7processPcc+0x300>
				model.setWindTrueDir(atoi(val));
    643e:	c6 01       	movw	r24, r12
    6440:	0e 94 b9 40 	call	0x8172	; 0x8172 <atoi>
    6444:	bc 01       	movw	r22, r24
    6446:	8e ea       	ldi	r24, 0xAE	; 174
    6448:	9f e0       	ldi	r25, 0x0F	; 15
    644a:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <_ZN14FreeBoardModel14setWindTrueDirEi>
    644e:	38 2d       	mov	r19, r8
    6450:	29 2d       	mov	r18, r9
    6452:	83 2f       	mov	r24, r19
    6454:	92 2f       	mov	r25, r18
    6456:	0f b6       	in	r0, 0x3f	; 63
    6458:	f8 94       	cli
    645a:	9e bf       	out	0x3e, r25	; 62
    645c:	0f be       	out	0x3f, r0	; 63
    645e:	8d bf       	out	0x3d, r24	; 61
			}

		}
		//next token
		cmd = strtok(NULL, ",");
    6460:	6e e5       	ldi	r22, 0x5E	; 94
    6462:	72 e0       	ldi	r23, 0x02	; 2
    6464:	80 e0       	ldi	r24, 0x00	; 0
    6466:	90 e0       	ldi	r25, 0x00	; 0
    6468:	0e 94 16 41 	call	0x822c	; 0x822c <strtok>
    646c:	7c 01       	movw	r14, r24

void process(char * s, char parser) {
	//if (DEBUG) Serial.print("Process str:");
	//if (DEBUG) Serial.println(s);
	char *cmd = strtok(s, ",");
	while (cmd != NULL && strlen(cmd) > 3) {
    646e:	00 97       	sbiw	r24, 0x00	; 0
    6470:	91 f0       	breq	.+36     	; 0x6496 <_Z7processPcc+0x348>
    6472:	dc 01       	movw	r26, r24
    6474:	0d 90       	ld	r0, X+
    6476:	00 20       	and	r0, r0
    6478:	e9 f7       	brne	.-6      	; 0x6474 <_Z7processPcc+0x326>
    647a:	8d 01       	movw	r16, r26
    647c:	01 50       	subi	r16, 0x01	; 1
    647e:	11 09       	sbc	r17, r1
    6480:	08 1b       	sub	r16, r24
    6482:	19 0b       	sbc	r17, r25
    6484:	04 30       	cpi	r16, 0x04	; 4
    6486:	11 05       	cpc	r17, r1
    6488:	30 f0       	brcs	.+12     	; 0x6496 <_Z7processPcc+0x348>
		//if (DEBUG) Serial.println(cmd);

		char key[5];
		int l = strlen(cmd);

		if (cmd[0] == '#') {
    648a:	fc 01       	movw	r30, r24
    648c:	80 81       	ld	r24, Z
    648e:	83 32       	cpi	r24, 0x23	; 35
    6490:	09 f0       	breq	.+2      	; 0x6494 <_Z7processPcc+0x346>
    6492:	7f cf       	rjmp	.-258    	; 0x6392 <_Z7processPcc+0x244>
    6494:	76 ce       	rjmp	.-788    	; 0x6182 <_Z7processPcc+0x34>
		}
		//next token
		cmd = strtok(NULL, ",");
	}
	//if (DEBUG) Serial.println("Process str exit");
}
    6496:	0f b6       	in	r0, 0x3f	; 63
    6498:	f8 94       	cli
    649a:	7e be       	out	0x3e, r7	; 62
    649c:	0f be       	out	0x3f, r0	; 63
    649e:	6d be       	out	0x3d, r6	; 61
    64a0:	0f 90       	pop	r0
    64a2:	0f 90       	pop	r0
    64a4:	0f 90       	pop	r0
    64a6:	0f 90       	pop	r0
    64a8:	0f 90       	pop	r0
    64aa:	df 91       	pop	r29
    64ac:	cf 91       	pop	r28
    64ae:	1f 91       	pop	r17
    64b0:	0f 91       	pop	r16
    64b2:	ff 90       	pop	r15
    64b4:	ef 90       	pop	r14
    64b6:	df 90       	pop	r13
    64b8:	cf 90       	pop	r12
    64ba:	bf 90       	pop	r11
    64bc:	af 90       	pop	r10
    64be:	9f 90       	pop	r9
    64c0:	8f 90       	pop	r8
    64c2:	7f 90       	pop	r7
    64c4:	6f 90       	pop	r6
    64c6:	5f 90       	pop	r5
    64c8:	4f 90       	pop	r4
    64ca:	08 95       	ret

000064cc <_Z11serialEventv>:
 SerialEvent occurs whenever a new data comes in the
 hardware serial RX.  This routine is run between each
 time loop() runs, so using delay inside loop can delay
 response.  Multiple bytes of data may be available.
 */
void serialEvent() {
    64cc:	cf 92       	push	r12
    64ce:	df 92       	push	r13
    64d0:	ef 92       	push	r14
    64d2:	ff 92       	push	r15
    64d4:	0f 93       	push	r16
    64d6:	1f 93       	push	r17
    64d8:	cf 93       	push	r28
    64da:	df 93       	push	r29
    64dc:	cd b7       	in	r28, 0x3d	; 61
    64de:	de b7       	in	r29, 0x3e	; 62
			inputSerial = "";
			//inputSerialComplete = false;
		}

	}
}
    64e0:	ed b6       	in	r14, 0x3d	; 61
    64e2:	fe b6       	in	r15, 0x3e	; 62
 hardware serial RX.  This routine is run between each
 time loop() runs, so using delay inside loop can delay
 response.  Multiple bytes of data may be available.
 */
void serialEvent() {
	while (Serial.available()) {
    64e4:	39 c0       	rjmp	.+114    	; 0x6558 <_Z11serialEventv+0x8c>
		// get the new byte:
		char inChar = (char) Serial.read();
    64e6:	88 eb       	ldi	r24, 0xB8	; 184
    64e8:	95 e0       	ldi	r25, 0x05	; 5
    64ea:	0e 94 ad 01 	call	0x35a	; 0x35a <_ZN14HardwareSerial4readEv>
    64ee:	18 2f       	mov	r17, r24
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    64f0:	68 2f       	mov	r22, r24
    64f2:	8d e4       	ldi	r24, 0x4D	; 77
    64f4:	99 e0       	ldi	r25, 0x09	; 9
    64f6:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZN6String6concatEc>
		// add it to the inputString:
		inputSerial += inChar;
		if (inChar == '\n') {
    64fa:	1a 30       	cpi	r17, 0x0A	; 10
    64fc:	69 f5       	brne	.+90     	; 0x6558 <_Z11serialEventv+0x8c>
    64fe:	cd b6       	in	r12, 0x3d	; 61
    6500:	de b6       	in	r13, 0x3e	; 62
			//inputSerialComplete = true;
			char carray[inputSerial.length() + 1]; //determine size of the array
    6502:	40 91 51 09 	lds	r20, 0x0951
    6506:	50 91 52 09 	lds	r21, 0x0952
    650a:	4f 5f       	subi	r20, 0xFF	; 255
    650c:	5f 4f       	sbci	r21, 0xFF	; 255
    650e:	8d b7       	in	r24, 0x3d	; 61
    6510:	9e b7       	in	r25, 0x3e	; 62
    6512:	84 1b       	sub	r24, r20
    6514:	95 0b       	sbc	r25, r21
    6516:	0f b6       	in	r0, 0x3f	; 63
    6518:	f8 94       	cli
    651a:	9e bf       	out	0x3e, r25	; 62
    651c:	0f be       	out	0x3f, r0	; 63
    651e:	8d bf       	out	0x3d, r24	; 61
    6520:	0d b7       	in	r16, 0x3d	; 61
    6522:	1e b7       	in	r17, 0x3e	; 62
    6524:	0f 5f       	subi	r16, 0xFF	; 255
    6526:	1f 4f       	sbci	r17, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    6528:	20 e0       	ldi	r18, 0x00	; 0
    652a:	30 e0       	ldi	r19, 0x00	; 0
    652c:	b8 01       	movw	r22, r16
    652e:	8d e4       	ldi	r24, 0x4D	; 77
    6530:	99 e0       	ldi	r25, 0x09	; 9
    6532:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZNK6String8getBytesEPhjj>
			inputSerial.toCharArray(carray, sizeof(carray));
			process(carray, ',');
    6536:	6c e2       	ldi	r22, 0x2C	; 44
    6538:	c8 01       	movw	r24, r16
    653a:	0e 94 a7 30 	call	0x614e	; 0x614e <_Z7processPcc>
			inputSerial = "";
    653e:	67 ef       	ldi	r22, 0xF7	; 247
    6540:	74 e0       	ldi	r23, 0x04	; 4
    6542:	8d e4       	ldi	r24, 0x4D	; 77
    6544:	99 e0       	ldi	r25, 0x09	; 9
    6546:	0e 94 4d 0c 	call	0x189a	; 0x189a <_ZN6StringaSEPKc>
    654a:	8c 2d       	mov	r24, r12
    654c:	9d 2d       	mov	r25, r13
    654e:	0f b6       	in	r0, 0x3f	; 63
    6550:	f8 94       	cli
    6552:	9e bf       	out	0x3e, r25	; 62
    6554:	0f be       	out	0x3f, r0	; 63
    6556:	8d bf       	out	0x3d, r24	; 61
 hardware serial RX.  This routine is run between each
 time loop() runs, so using delay inside loop can delay
 response.  Multiple bytes of data may be available.
 */
void serialEvent() {
	while (Serial.available()) {
    6558:	88 eb       	ldi	r24, 0xB8	; 184
    655a:	95 e0       	ldi	r25, 0x05	; 5
    655c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN14HardwareSerial9availableEv>
    6560:	89 2b       	or	r24, r25
    6562:	09 f6       	brne	.-126    	; 0x64e6 <_Z11serialEventv+0x1a>
			inputSerial = "";
			//inputSerialComplete = false;
		}

	}
}
    6564:	0f b6       	in	r0, 0x3f	; 63
    6566:	f8 94       	cli
    6568:	fe be       	out	0x3e, r15	; 62
    656a:	0f be       	out	0x3f, r0	; 63
    656c:	ed be       	out	0x3d, r14	; 61
    656e:	df 91       	pop	r29
    6570:	cf 91       	pop	r28
    6572:	1f 91       	pop	r17
    6574:	0f 91       	pop	r16
    6576:	ff 90       	pop	r15
    6578:	ef 90       	pop	r14
    657a:	df 90       	pop	r13
    657c:	cf 90       	pop	r12
    657e:	08 95       	ret

00006580 <_GLOBAL__sub_I_execute>:
int inByteSerial3;
char input;
//volatile int intCnt = 0;

//freeboard model
FreeBoardModel model;
    6580:	8e ea       	ldi	r24, 0xAE	; 174
    6582:	9f e0       	ldi	r25, 0x0F	; 15
    6584:	0e 94 51 29 	call	0x52a2	; 0x52a2 <_ZN14FreeBoardModelC1Ev>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    6588:	10 92 70 0f 	sts	0x0F70, r1
    658c:	10 92 6f 0f 	sts	0x0F6F, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    6590:	88 ee       	ldi	r24, 0xE8	; 232
    6592:	93 e0       	ldi	r25, 0x03	; 3
    6594:	a0 e0       	ldi	r26, 0x00	; 0
    6596:	b0 e0       	ldi	r27, 0x00	; 0
    6598:	80 93 71 0f 	sts	0x0F71, r24
    659c:	90 93 72 0f 	sts	0x0F72, r25
    65a0:	a0 93 73 0f 	sts	0x0F73, r26
    65a4:	b0 93 74 0f 	sts	0x0F74, r27
#include "FreeBoardConstants.h"
#include "FreeBoardModel.h"

class NmeaSerial: AltSoftSerial {
public:
	NmeaSerial(FreeBoardModel* model):model(model){};
    65a8:	84 e2       	ldi	r24, 0x24	; 36
    65aa:	95 e0       	ldi	r25, 0x05	; 5
    65ac:	90 93 6e 0f 	sts	0x0F6E, r25
    65b0:	80 93 6d 0f 	sts	0x0F6D, r24
    65b4:	8e ea       	ldi	r24, 0xAE	; 174
    65b6:	9f e0       	ldi	r25, 0x0F	; 15
    65b8:	90 93 7a 0f 	sts	0x0F7A, r25
    65bc:	80 93 79 0f 	sts	0x0F79, r24
// See http://forums.parallax.com/forums/default.aspx?f=19&m=50925
// See http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=63469&start=0
NmeaSerial nmea(&model);

//NMEA ports
NMEA gpsSource(ALL);
    65c0:	60 e0       	ldi	r22, 0x00	; 0
    65c2:	70 e0       	ldi	r23, 0x00	; 0
    65c4:	84 e0       	ldi	r24, 0x04	; 4
    65c6:	9e e0       	ldi	r25, 0x0E	; 14
    65c8:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN4NMEAC1Ei>
NMEA talker0(ALL);
    65cc:	60 e0       	ldi	r22, 0x00	; 0
    65ce:	70 e0       	ldi	r23, 0x00	; 0
    65d0:	8b e9       	ldi	r24, 0x9B	; 155
    65d2:	9c e0       	ldi	r25, 0x0C	; 12
    65d4:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN4NMEAC1Ei>
NMEA talker2(ALL);
    65d8:	60 e0       	ldi	r22, 0x00	; 0
    65da:	70 e0       	ldi	r23, 0x00	; 0
    65dc:	82 e3       	ldi	r24, 0x32	; 50
    65de:	9b e0       	ldi	r25, 0x0B	; 11
    65e0:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN4NMEAC1Ei>
NMEA talker3(ALL);
    65e4:	60 e0       	ldi	r22, 0x00	; 0
    65e6:	70 e0       	ldi	r23, 0x00	; 0
    65e8:	89 ec       	ldi	r24, 0xC9	; 201
    65ea:	99 e0       	ldi	r25, 0x09	; 9
    65ec:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN4NMEAC1Ei>

//alarm
Alarm alarm(&model);
    65f0:	6e ea       	ldi	r22, 0xAE	; 174
    65f2:	7f e0       	ldi	r23, 0x0F	; 15
    65f4:	84 ec       	ldi	r24, 0xC4	; 196
    65f6:	99 e0       	ldi	r25, 0x09	; 9
    65f8:	0e 94 3e 24 	call	0x487c	; 0x487c <_ZN5AlarmC1EP14FreeBoardModel>

//wind
Wind wind(&model);
    65fc:	6e ea       	ldi	r22, 0xAE	; 174
    65fe:	7f e0       	ldi	r23, 0x0F	; 15
    6600:	82 ec       	ldi	r24, 0xC2	; 194
    6602:	99 e0       	ldi	r25, 0x09	; 9
    6604:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_ZN4WindC1EP14FreeBoardModel>

//Gps
Gps gps(&gpsSource, &model);
    6608:	4e ea       	ldi	r20, 0xAE	; 174
    660a:	5f e0       	ldi	r21, 0x0F	; 15
    660c:	64 e0       	ldi	r22, 0x04	; 4
    660e:	7e e0       	ldi	r23, 0x0E	; 14
    6610:	8c eb       	ldi	r24, 0xBC	; 188
    6612:	99 e0       	ldi	r25, 0x09	; 9
    6614:	0e 94 4b 33 	call	0x6696	; 0x6696 <_ZN3GpsC1EP4NMEAP14FreeBoardModel>

//Autopilot
Autopilot autopilot(&model);
    6618:	6e ea       	ldi	r22, 0xAE	; 174
    661a:	7f e0       	ldi	r23, 0x0F	; 15
    661c:	82 e7       	ldi	r24, 0x72	; 114
    661e:	99 e0       	ldi	r25, 0x09	; 9
    6620:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <_ZN9AutopilotC1EP14FreeBoardModel>

//Anchor
Anchor anchor(&model);
    6624:	6e ea       	ldi	r22, 0xAE	; 174
    6626:	7f e0       	ldi	r23, 0x0F	; 15
    6628:	8e e6       	ldi	r24, 0x6E	; 110
    662a:	99 e0       	ldi	r25, 0x09	; 9
    662c:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <_ZN6AnchorC1EP14FreeBoardModel>

Seatalk seatalk(&Serial2, &model);
    6630:	4e ea       	ldi	r20, 0xAE	; 174
    6632:	5f e0       	ldi	r21, 0x0F	; 15
    6634:	64 e7       	ldi	r22, 0x74	; 116
    6636:	75 e0       	ldi	r23, 0x05	; 5
    6638:	84 e5       	ldi	r24, 0x54	; 84
    663a:	99 e0       	ldi	r25, 0x09	; 9
    663c:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <_ZN7SeatalkC1EP14HardwareSerialP14FreeBoardModel>

String inputSerial = ""; // a string to hold incoming data
    6640:	67 ef       	ldi	r22, 0xF7	; 247
    6642:	74 e0       	ldi	r23, 0x04	; 4
    6644:	8d e4       	ldi	r24, 0x4D	; 77
    6646:	99 e0       	ldi	r25, 0x09	; 9
    6648:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <_ZN6StringC1EPKc>

0000664c <_GLOBAL__sub_D_execute>:
    664c:	8d e4       	ldi	r24, 0x4D	; 77
    664e:	99 e0       	ldi	r25, 0x09	; 9
    6650:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN6StringD1Ev>

//Autopilot
Autopilot autopilot(&model);

//Anchor
Anchor anchor(&model);
    6654:	8e e6       	ldi	r24, 0x6E	; 110
    6656:	99 e0       	ldi	r25, 0x09	; 9
    6658:	0e 94 96 24 	call	0x492c	; 0x492c <_ZN6AnchorD1Ev>

//Gps
Gps gps(&gpsSource, &model);

//Autopilot
Autopilot autopilot(&model);
    665c:	82 e7       	ldi	r24, 0x72	; 114
    665e:	99 e0       	ldi	r25, 0x09	; 9
    6660:	0e 94 47 28 	call	0x508e	; 0x508e <_ZN9AutopilotD1Ev>

//wind
Wind wind(&model);

//Gps
Gps gps(&gpsSource, &model);
    6664:	8c eb       	ldi	r24, 0xBC	; 188
    6666:	99 e0       	ldi	r25, 0x09	; 9
    6668:	0e 94 3e 33 	call	0x667c	; 0x667c <_ZN3GpsD1Ev>
NMEA talker0(ALL);
NMEA talker2(ALL);
NMEA talker3(ALL);

//alarm
Alarm alarm(&model);
    666c:	84 ec       	ldi	r24, 0xC4	; 196
    666e:	99 e0       	ldi	r25, 0x09	; 9
    6670:	0e 94 31 24 	call	0x4862	; 0x4862 <_ZN5AlarmD1Ev>

//NMEA output - The arduino puts out TTL, NMEA is RS232. They are different V and amps. The +-5V levels may need inverting or you get
// garbage.
// See http://forums.parallax.com/forums/default.aspx?f=19&m=50925
// See http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=63469&start=0
NmeaSerial nmea(&model);
    6674:	8d e6       	ldi	r24, 0x6D	; 109
    6676:	9f e0       	ldi	r25, 0x0F	; 15
    6678:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <_ZN10NmeaSerialD1Ev>

0000667c <_ZN3GpsD1Ev>:
 */
#include "Gps.h"
char gpsBuffer[40];
PString gpsStr(gpsBuffer, sizeof(gpsBuffer));

Gps::~Gps() {
    667c:	2c ef       	ldi	r18, 0xFC	; 252
    667e:	34 e0       	ldi	r19, 0x04	; 4
    6680:	fc 01       	movw	r30, r24
    6682:	31 83       	std	Z+1, r19	; 0x01
    6684:	20 83       	st	Z, r18
    6686:	08 95       	ret

00006688 <_ZN3GpsD0Ev>:
    6688:	2c ef       	ldi	r18, 0xFC	; 252
    668a:	34 e0       	ldi	r19, 0x04	; 4
    668c:	fc 01       	movw	r30, r24
    668e:	31 83       	std	Z+1, r19	; 0x01
    6690:	20 83       	st	Z, r18
}
    6692:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <_ZdlPv>

00006696 <_ZN3GpsC1EP4NMEAP14FreeBoardModel>:
Gps::Gps(NMEA* gpsSource, FreeBoardModel* model) {
    6696:	fc 01       	movw	r30, r24
    6698:	8c ef       	ldi	r24, 0xFC	; 252
    669a:	94 e0       	ldi	r25, 0x04	; 4
    669c:	91 83       	std	Z+1, r25	; 0x01
    669e:	80 83       	st	Z, r24

	this->model = model;
    66a0:	55 83       	std	Z+5, r21	; 0x05
    66a2:	44 83       	std	Z+4, r20	; 0x04
	this->gpsSource = gpsSource;
    66a4:	73 83       	std	Z+3, r23	; 0x03
    66a6:	62 83       	std	Z+2, r22	; 0x02
    66a8:	08 95       	ret

000066aa <_ZN3Gps7testMsgEv>:
	//setupGps();
}

bool Gps::testMsg() {
    66aa:	cf 92       	push	r12
    66ac:	df 92       	push	r13
    66ae:	ef 92       	push	r14
    66b0:	ff 92       	push	r15
    66b2:	cf 93       	push	r28
    66b4:	df 93       	push	r29
	//clear buffer of rubbish
	int x = 0;
	while (x < 100) {
    66b6:	c5 e6       	ldi	r28, 0x65	; 101
    66b8:	d0 e0       	ldi	r29, 0x00	; 0
    66ba:	0a c0       	rjmp	.+20     	; 0x66d0 <_ZN3Gps7testMsgEv+0x26>
		if (Serial1.available()) {
    66bc:	86 e9       	ldi	r24, 0x96	; 150
    66be:	95 e0       	ldi	r25, 0x05	; 5
    66c0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN14HardwareSerial9availableEv>
    66c4:	89 2b       	or	r24, r25
    66c6:	d1 f3       	breq	.-12     	; 0x66bc <_ZN3Gps7testMsgEv+0x12>
			Serial1.read();
    66c8:	86 e9       	ldi	r24, 0x96	; 150
    66ca:	95 e0       	ldi	r25, 0x05	; 5
    66cc:	0e 94 ad 01 	call	0x35a	; 0x35a <_ZN14HardwareSerial4readEv>
    66d0:	21 97       	sbiw	r28, 0x01	; 1
}

bool Gps::testMsg() {
	//clear buffer of rubbish
	int x = 0;
	while (x < 100) {
    66d2:	a1 f7       	brne	.-24     	; 0x66bc <_ZN3Gps7testMsgEv+0x12>
			Serial1.read();
			x++;
		}
	}
	//5 secs
	unsigned long now = millis();
    66d4:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    66d8:	6b 01       	movw	r12, r22
    66da:	7c 01       	movw	r14, r24
	bool valid = true;
    66dc:	c1 e0       	ldi	r28, 0x01	; 1
	while (now + 5000 > millis() && valid) {
    66de:	88 e8       	ldi	r24, 0x88	; 136
    66e0:	c8 0e       	add	r12, r24
    66e2:	83 e1       	ldi	r24, 0x13	; 19
    66e4:	d8 1e       	adc	r13, r24
    66e6:	e1 1c       	adc	r14, r1
    66e8:	f1 1c       	adc	r15, r1
    66ea:	09 c0       	rjmp	.+18     	; 0x66fe <_ZN3Gps7testMsgEv+0x54>
		if (Serial1.available()) {
			int c = Serial1.read();
    66ec:	86 e9       	ldi	r24, 0x96	; 150
    66ee:	95 e0       	ldi	r25, 0x05	; 5
    66f0:	0e 94 ad 01 	call	0x35a	; 0x35a <_ZN14HardwareSerial4readEv>
			//Serial.print(c);
			//Serial.print(",");
			//not Cntrl-n or printable so invalid
			if (c > 128) valid = false;
    66f4:	c1 e0       	ldi	r28, 0x01	; 1
    66f6:	81 38       	cpi	r24, 0x81	; 129
    66f8:	91 05       	cpc	r25, r1
    66fa:	0c f0       	brlt	.+2      	; 0x66fe <_ZN3Gps7testMsgEv+0x54>
    66fc:	c0 e0       	ldi	r28, 0x00	; 0
		}
	}
	//5 secs
	unsigned long now = millis();
	bool valid = true;
	while (now + 5000 > millis() && valid) {
    66fe:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    6702:	6c 15       	cp	r22, r12
    6704:	7d 05       	cpc	r23, r13
    6706:	8e 05       	cpc	r24, r14
    6708:	9f 05       	cpc	r25, r15
    670a:	18 f4       	brcc	.+6      	; 0x6712 <_ZN3Gps7testMsgEv+0x68>
    670c:	c1 11       	cpse	r28, r1
    670e:	12 c0       	rjmp	.+36     	; 0x6734 <_ZN3Gps7testMsgEv+0x8a>
    6710:	09 c0       	rjmp	.+18     	; 0x6724 <_ZN3Gps7testMsgEv+0x7a>
			//not Cntrl-n or printable so invalid
			if (c > 128) valid = false;
		}
	}
	if (DEBUG) {
		if (valid)
    6712:	cc 23       	and	r28, r28
    6714:	39 f0       	breq	.+14     	; 0x6724 <_ZN3Gps7testMsgEv+0x7a>
			Serial.println("OK");
    6716:	69 e7       	ldi	r22, 0x79	; 121
    6718:	73 e0       	ldi	r23, 0x03	; 3
    671a:	88 eb       	ldi	r24, 0xB8	; 184
    671c:	95 e0       	ldi	r25, 0x05	; 5
    671e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
    6722:	0f c0       	rjmp	.+30     	; 0x6742 <_ZN3Gps7testMsgEv+0x98>
		else
			Serial.println("FAIL");
    6724:	6c e7       	ldi	r22, 0x7C	; 124
    6726:	73 e0       	ldi	r23, 0x03	; 3
    6728:	88 eb       	ldi	r24, 0xB8	; 184
    672a:	95 e0       	ldi	r25, 0x05	; 5
    672c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
    6730:	c0 e0       	ldi	r28, 0x00	; 0
    6732:	07 c0       	rjmp	.+14     	; 0x6742 <_ZN3Gps7testMsgEv+0x98>
	}
	//5 secs
	unsigned long now = millis();
	bool valid = true;
	while (now + 5000 > millis() && valid) {
		if (Serial1.available()) {
    6734:	86 e9       	ldi	r24, 0x96	; 150
    6736:	95 e0       	ldi	r25, 0x05	; 5
    6738:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN14HardwareSerial9availableEv>
    673c:	89 2b       	or	r24, r25
    673e:	f9 f2       	breq	.-66     	; 0x66fe <_ZN3Gps7testMsgEv+0x54>
    6740:	d5 cf       	rjmp	.-86     	; 0x66ec <_ZN3Gps7testMsgEv+0x42>
			Serial.println("OK");
		else
			Serial.println("FAIL");
	}
	return valid;
}
    6742:	8c 2f       	mov	r24, r28
    6744:	df 91       	pop	r29
    6746:	cf 91       	pop	r28
    6748:	ff 90       	pop	r15
    674a:	ef 90       	pop	r14
    674c:	df 90       	pop	r13
    674e:	cf 90       	pop	r12
    6750:	08 95       	ret

00006752 <_ZN3Gps8autoBaudEv>:


int Gps::autoBaud() {
    6752:	cf 93       	push	r28
    6754:	df 93       	push	r29
    6756:	ec 01       	movw	r28, r24
	//try the various baud rates until one makes sense
	//should only output simple NMEA [$A-Z0-9*\r\c]

	if (DEBUG) Serial.println("   try autobaud 4800..");
    6758:	61 e8       	ldi	r22, 0x81	; 129
    675a:	73 e0       	ldi	r23, 0x03	; 3
    675c:	88 eb       	ldi	r24, 0xB8	; 184
    675e:	95 e0       	ldi	r25, 0x05	; 5
    6760:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
	Serial1.begin(4800);
    6764:	40 ec       	ldi	r20, 0xC0	; 192
    6766:	52 e1       	ldi	r21, 0x12	; 18
    6768:	60 e0       	ldi	r22, 0x00	; 0
    676a:	70 e0       	ldi	r23, 0x00	; 0
    676c:	86 e9       	ldi	r24, 0x96	; 150
    676e:	95 e0       	ldi	r25, 0x05	; 5
    6770:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 4800;
    6774:	ce 01       	movw	r24, r28
    6776:	0e 94 55 33 	call	0x66aa	; 0x66aa <_ZN3Gps7testMsgEv>
    677a:	81 11       	cpse	r24, r1
    677c:	66 c0       	rjmp	.+204    	; 0x684a <_ZN3Gps8autoBaudEv+0xf8>
	Serial1.end();
    677e:	86 e9       	ldi	r24, 0x96	; 150
    6780:	95 e0       	ldi	r25, 0x05	; 5
    6782:	0e 94 c2 05 	call	0xb84	; 0xb84 <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 9600..");
    6786:	68 e9       	ldi	r22, 0x98	; 152
    6788:	73 e0       	ldi	r23, 0x03	; 3
    678a:	88 eb       	ldi	r24, 0xB8	; 184
    678c:	95 e0       	ldi	r25, 0x05	; 5
    678e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
	Serial1.begin(9600);
    6792:	40 e8       	ldi	r20, 0x80	; 128
    6794:	55 e2       	ldi	r21, 0x25	; 37
    6796:	60 e0       	ldi	r22, 0x00	; 0
    6798:	70 e0       	ldi	r23, 0x00	; 0
    679a:	86 e9       	ldi	r24, 0x96	; 150
    679c:	95 e0       	ldi	r25, 0x05	; 5
    679e:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 9600;
    67a2:	ce 01       	movw	r24, r28
    67a4:	0e 94 55 33 	call	0x66aa	; 0x66aa <_ZN3Gps7testMsgEv>
    67a8:	81 11       	cpse	r24, r1
    67aa:	52 c0       	rjmp	.+164    	; 0x6850 <_ZN3Gps8autoBaudEv+0xfe>
	Serial1.end();
    67ac:	86 e9       	ldi	r24, 0x96	; 150
    67ae:	95 e0       	ldi	r25, 0x05	; 5
    67b0:	0e 94 c2 05 	call	0xb84	; 0xb84 <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 19200..");
    67b4:	6f ea       	ldi	r22, 0xAF	; 175
    67b6:	73 e0       	ldi	r23, 0x03	; 3
    67b8:	88 eb       	ldi	r24, 0xB8	; 184
    67ba:	95 e0       	ldi	r25, 0x05	; 5
    67bc:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
	Serial1.begin(19200);
    67c0:	40 e0       	ldi	r20, 0x00	; 0
    67c2:	5b e4       	ldi	r21, 0x4B	; 75
    67c4:	60 e0       	ldi	r22, 0x00	; 0
    67c6:	70 e0       	ldi	r23, 0x00	; 0
    67c8:	86 e9       	ldi	r24, 0x96	; 150
    67ca:	95 e0       	ldi	r25, 0x05	; 5
    67cc:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 19200;
    67d0:	ce 01       	movw	r24, r28
    67d2:	0e 94 55 33 	call	0x66aa	; 0x66aa <_ZN3Gps7testMsgEv>
    67d6:	81 11       	cpse	r24, r1
    67d8:	3e c0       	rjmp	.+124    	; 0x6856 <_ZN3Gps8autoBaudEv+0x104>
	Serial1.end();
    67da:	86 e9       	ldi	r24, 0x96	; 150
    67dc:	95 e0       	ldi	r25, 0x05	; 5
    67de:	0e 94 c2 05 	call	0xb84	; 0xb84 <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 38400..");
    67e2:	67 ec       	ldi	r22, 0xC7	; 199
    67e4:	73 e0       	ldi	r23, 0x03	; 3
    67e6:	88 eb       	ldi	r24, 0xB8	; 184
    67e8:	95 e0       	ldi	r25, 0x05	; 5
    67ea:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
	Serial1.begin(38400);
    67ee:	40 e0       	ldi	r20, 0x00	; 0
    67f0:	56 e9       	ldi	r21, 0x96	; 150
    67f2:	60 e0       	ldi	r22, 0x00	; 0
    67f4:	70 e0       	ldi	r23, 0x00	; 0
    67f6:	86 e9       	ldi	r24, 0x96	; 150
    67f8:	95 e0       	ldi	r25, 0x05	; 5
    67fa:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 38400;
    67fe:	ce 01       	movw	r24, r28
    6800:	0e 94 55 33 	call	0x66aa	; 0x66aa <_ZN3Gps7testMsgEv>
    6804:	81 11       	cpse	r24, r1
    6806:	2a c0       	rjmp	.+84     	; 0x685c <_ZN3Gps8autoBaudEv+0x10a>
	Serial1.end();
    6808:	86 e9       	ldi	r24, 0x96	; 150
    680a:	95 e0       	ldi	r25, 0x05	; 5
    680c:	0e 94 c2 05 	call	0xb84	; 0xb84 <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 57600..");
    6810:	6f ed       	ldi	r22, 0xDF	; 223
    6812:	73 e0       	ldi	r23, 0x03	; 3
    6814:	88 eb       	ldi	r24, 0xB8	; 184
    6816:	95 e0       	ldi	r25, 0x05	; 5
    6818:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
	Serial1.begin(57600);
    681c:	40 e0       	ldi	r20, 0x00	; 0
    681e:	51 ee       	ldi	r21, 0xE1	; 225
    6820:	60 e0       	ldi	r22, 0x00	; 0
    6822:	70 e0       	ldi	r23, 0x00	; 0
    6824:	86 e9       	ldi	r24, 0x96	; 150
    6826:	95 e0       	ldi	r25, 0x05	; 5
    6828:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 57600;
    682c:	ce 01       	movw	r24, r28
    682e:	0e 94 55 33 	call	0x66aa	; 0x66aa <_ZN3Gps7testMsgEv>
    6832:	81 11       	cpse	r24, r1
    6834:	16 c0       	rjmp	.+44     	; 0x6862 <_ZN3Gps8autoBaudEv+0x110>
	Serial1.end();
    6836:	86 e9       	ldi	r24, 0x96	; 150
    6838:	95 e0       	ldi	r25, 0x05	; 5
    683a:	0e 94 c2 05 	call	0xb84	; 0xb84 <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   default to 4800..");
    683e:	67 ef       	ldi	r22, 0xF7	; 247
    6840:	73 e0       	ldi	r23, 0x03	; 3
    6842:	88 eb       	ldi	r24, 0xB8	; 184
    6844:	95 e0       	ldi	r25, 0x05	; 5
    6846:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
	//try the various baud rates until one makes sense
	//should only output simple NMEA [$A-Z0-9*\r\c]

	if (DEBUG) Serial.println("   try autobaud 4800..");
	Serial1.begin(4800);
	if (testMsg()) return 4800;
    684a:	20 ec       	ldi	r18, 0xC0	; 192
    684c:	32 e1       	ldi	r19, 0x12	; 18
    684e:	0b c0       	rjmp	.+22     	; 0x6866 <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 9600..");
	Serial1.begin(9600);
	if (testMsg()) return 9600;
    6850:	20 e8       	ldi	r18, 0x80	; 128
    6852:	35 e2       	ldi	r19, 0x25	; 37
    6854:	08 c0       	rjmp	.+16     	; 0x6866 <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 19200..");
	Serial1.begin(19200);
	if (testMsg()) return 19200;
    6856:	20 e0       	ldi	r18, 0x00	; 0
    6858:	3b e4       	ldi	r19, 0x4B	; 75
    685a:	05 c0       	rjmp	.+10     	; 0x6866 <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 38400..");
	Serial1.begin(38400);
	if (testMsg()) return 38400;
    685c:	20 e0       	ldi	r18, 0x00	; 0
    685e:	36 e9       	ldi	r19, 0x96	; 150
    6860:	02 c0       	rjmp	.+4      	; 0x6866 <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 57600..");
	Serial1.begin(57600);
	if (testMsg()) return 57600;
    6862:	20 e0       	ldi	r18, 0x00	; 0
    6864:	31 ee       	ldi	r19, 0xE1	; 225
	Serial1.end();
	if (DEBUG) Serial.println("   default to 4800..");
	return 4800;
}
    6866:	c9 01       	movw	r24, r18
    6868:	df 91       	pop	r29
    686a:	cf 91       	pop	r28
    686c:	08 95       	ret

0000686e <_ZN3Gps11getMetersToEffff>:
	Serial1.flush();
	Serial1.end();
	Serial1.begin(38400);
}

float Gps::getMetersTo(float targetLat, float targetLon, float currentLat, float currentLon) {
    686e:	2f 92       	push	r2
    6870:	3f 92       	push	r3
    6872:	4f 92       	push	r4
    6874:	5f 92       	push	r5
    6876:	6f 92       	push	r6
    6878:	7f 92       	push	r7
    687a:	8f 92       	push	r8
    687c:	9f 92       	push	r9
    687e:	af 92       	push	r10
    6880:	bf 92       	push	r11
    6882:	cf 92       	push	r12
    6884:	df 92       	push	r13
    6886:	ef 92       	push	r14
    6888:	ff 92       	push	r15
    688a:	0f 93       	push	r16
    688c:	1f 93       	push	r17
    688e:	cf 93       	push	r28
    6890:	df 93       	push	r29
    6892:	cd b7       	in	r28, 0x3d	; 61
    6894:	de b7       	in	r29, 0x3e	; 62
    6896:	60 97       	sbiw	r28, 0x10	; 16
    6898:	0f b6       	in	r0, 0x3f	; 63
    689a:	f8 94       	cli
    689c:	de bf       	out	0x3e, r29	; 62
    689e:	0f be       	out	0x3f, r0	; 63
    68a0:	cd bf       	out	0x3d, r28	; 61
    68a2:	69 83       	std	Y+1, r22	; 0x01
    68a4:	7a 83       	std	Y+2, r23	; 0x02
    68a6:	8b 83       	std	Y+3, r24	; 0x03
    68a8:	9c 83       	std	Y+4, r25	; 0x04
    68aa:	ca 01       	movw	r24, r20
    68ac:	b9 01       	movw	r22, r18
    68ae:	a6 01       	movw	r20, r12
    68b0:	95 01       	movw	r18, r10
	// returns distance in meters between two positions, both specified
	// as signed decimal-degrees latitude and longitude. Uses great-circle
	// distance computation for hypothised sphere of radius 6372795 meters.
	// Because Earth is no exact sphere, rounding errors may be upto 0.5%.
	float delta = radians(targetLon - currentLon);
    68b2:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    68b6:	25 e3       	ldi	r18, 0x35	; 53
    68b8:	3a ef       	ldi	r19, 0xFA	; 250
    68ba:	4e e8       	ldi	r20, 0x8E	; 142
    68bc:	5c e3       	ldi	r21, 0x3C	; 60
    68be:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    68c2:	6b 01       	movw	r12, r22
    68c4:	5c 01       	movw	r10, r24
	float sdlong = sin(delta);
    68c6:	7d 2d       	mov	r23, r13
    68c8:	9b 2d       	mov	r25, r11
    68ca:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <sin>
    68ce:	2b 01       	movw	r4, r22
    68d0:	3c 01       	movw	r6, r24
	float cdlong = cos(delta);
    68d2:	6c 2d       	mov	r22, r12
    68d4:	7d 2d       	mov	r23, r13
    68d6:	8a 2d       	mov	r24, r10
    68d8:	9b 2d       	mov	r25, r11
    68da:	0e 94 54 3d 	call	0x7aa8	; 0x7aa8 <cos>
    68de:	6d 83       	std	Y+5, r22	; 0x05
    68e0:	7e 83       	std	Y+6, r23	; 0x06
    68e2:	8f 83       	std	Y+7, r24	; 0x07
    68e4:	98 87       	std	Y+8, r25	; 0x08
	targetLat = radians(targetLat);
    68e6:	25 e3       	ldi	r18, 0x35	; 53
    68e8:	3a ef       	ldi	r19, 0xFA	; 250
    68ea:	4e e8       	ldi	r20, 0x8E	; 142
    68ec:	5c e3       	ldi	r21, 0x3C	; 60
    68ee:	69 81       	ldd	r22, Y+1	; 0x01
    68f0:	7a 81       	ldd	r23, Y+2	; 0x02
    68f2:	8b 81       	ldd	r24, Y+3	; 0x03
    68f4:	9c 81       	ldd	r25, Y+4	; 0x04
    68f6:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    68fa:	6b 01       	movw	r12, r22
    68fc:	89 83       	std	Y+1, r24	; 0x01
    68fe:	99 87       	std	Y+9, r25	; 0x09
	currentLat = radians(currentLat);
    6900:	25 e3       	ldi	r18, 0x35	; 53
    6902:	3a ef       	ldi	r19, 0xFA	; 250
    6904:	4e e8       	ldi	r20, 0x8E	; 142
    6906:	5c e3       	ldi	r21, 0x3C	; 60
    6908:	c8 01       	movw	r24, r16
    690a:	b7 01       	movw	r22, r14
    690c:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    6910:	16 2f       	mov	r17, r22
    6912:	07 2f       	mov	r16, r23
    6914:	38 2e       	mov	r3, r24
    6916:	29 2e       	mov	r2, r25
	float slat1 = sin(targetLat);
    6918:	39 81       	ldd	r19, Y+1	; 0x01
    691a:	29 85       	ldd	r18, Y+9	; 0x09
    691c:	6c 2d       	mov	r22, r12
    691e:	7d 2d       	mov	r23, r13
    6920:	83 2f       	mov	r24, r19
    6922:	92 2f       	mov	r25, r18
    6924:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <sin>
    6928:	4b 01       	movw	r8, r22
    692a:	5c 01       	movw	r10, r24
	float clat1 = cos(targetLat);
    692c:	39 81       	ldd	r19, Y+1	; 0x01
    692e:	29 85       	ldd	r18, Y+9	; 0x09
    6930:	6c 2d       	mov	r22, r12
    6932:	7d 2d       	mov	r23, r13
    6934:	83 2f       	mov	r24, r19
    6936:	92 2f       	mov	r25, r18
    6938:	0e 94 54 3d 	call	0x7aa8	; 0x7aa8 <cos>
    693c:	69 83       	std	Y+1, r22	; 0x01
    693e:	7a 83       	std	Y+2, r23	; 0x02
    6940:	8b 83       	std	Y+3, r24	; 0x03
    6942:	9c 83       	std	Y+4, r25	; 0x04
	float slat2 = sin(currentLat);
    6944:	a8 01       	movw	r20, r16
    6946:	91 01       	movw	r18, r2
    6948:	65 2f       	mov	r22, r21
    694a:	74 2f       	mov	r23, r20
    694c:	83 2f       	mov	r24, r19
    694e:	92 2f       	mov	r25, r18
    6950:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <sin>
    6954:	69 87       	std	Y+9, r22	; 0x09
    6956:	7a 87       	std	Y+10, r23	; 0x0a
    6958:	8b 87       	std	Y+11, r24	; 0x0b
    695a:	9c 87       	std	Y+12, r25	; 0x0c
	float clat2 = cos(currentLat);
    695c:	a8 01       	movw	r20, r16
    695e:	91 01       	movw	r18, r2
    6960:	65 2f       	mov	r22, r21
    6962:	74 2f       	mov	r23, r20
    6964:	83 2f       	mov	r24, r19
    6966:	92 2f       	mov	r25, r18
    6968:	0e 94 54 3d 	call	0x7aa8	; 0x7aa8 <cos>
    696c:	6b 01       	movw	r12, r22
    696e:	7c 01       	movw	r14, r24
	delta = (clat1 * slat2) - (slat1 * clat2 * cdlong);
    6970:	29 85       	ldd	r18, Y+9	; 0x09
    6972:	3a 85       	ldd	r19, Y+10	; 0x0a
    6974:	4b 85       	ldd	r20, Y+11	; 0x0b
    6976:	5c 85       	ldd	r21, Y+12	; 0x0c
    6978:	69 81       	ldd	r22, Y+1	; 0x01
    697a:	7a 81       	ldd	r23, Y+2	; 0x02
    697c:	8b 81       	ldd	r24, Y+3	; 0x03
    697e:	9c 81       	ldd	r25, Y+4	; 0x04
    6980:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    6984:	6d 87       	std	Y+13, r22	; 0x0d
    6986:	7e 87       	std	Y+14, r23	; 0x0e
    6988:	8f 87       	std	Y+15, r24	; 0x0f
    698a:	98 8b       	std	Y+16, r25	; 0x10
    698c:	a7 01       	movw	r20, r14
    698e:	96 01       	movw	r18, r12
    6990:	c5 01       	movw	r24, r10
    6992:	b4 01       	movw	r22, r8
    6994:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    6998:	2d 81       	ldd	r18, Y+5	; 0x05
    699a:	3e 81       	ldd	r19, Y+6	; 0x06
    699c:	4f 81       	ldd	r20, Y+7	; 0x07
    699e:	58 85       	ldd	r21, Y+8	; 0x08
    69a0:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    69a4:	9b 01       	movw	r18, r22
    69a6:	ac 01       	movw	r20, r24
    69a8:	6d 85       	ldd	r22, Y+13	; 0x0d
    69aa:	7e 85       	ldd	r23, Y+14	; 0x0e
    69ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    69ae:	98 89       	ldd	r25, Y+16	; 0x10
    69b0:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
	delta = sq(delta);
    69b4:	26 2f       	mov	r18, r22
    69b6:	37 2f       	mov	r19, r23
    69b8:	48 2f       	mov	r20, r24
    69ba:	59 2f       	mov	r21, r25
    69bc:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    69c0:	36 2e       	mov	r3, r22
    69c2:	27 2e       	mov	r2, r23
    69c4:	18 2f       	mov	r17, r24
    69c6:	09 2f       	mov	r16, r25
	delta += sq(clat2 * sdlong);
    69c8:	a3 01       	movw	r20, r6
    69ca:	92 01       	movw	r18, r4
    69cc:	c7 01       	movw	r24, r14
    69ce:	b6 01       	movw	r22, r12
    69d0:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    69d4:	26 2f       	mov	r18, r22
    69d6:	37 2f       	mov	r19, r23
    69d8:	48 2f       	mov	r20, r24
    69da:	59 2f       	mov	r21, r25
    69dc:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    69e0:	9b 01       	movw	r18, r22
    69e2:	ac 01       	movw	r20, r24
    69e4:	d1 01       	movw	r26, r2
    69e6:	f8 01       	movw	r30, r16
    69e8:	6b 2f       	mov	r22, r27
    69ea:	7a 2f       	mov	r23, r26
    69ec:	8f 2f       	mov	r24, r31
    69ee:	9e 2f       	mov	r25, r30
    69f0:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
	delta = sqrt(delta);
    69f4:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <sqrt>
    69f8:	2b 01       	movw	r4, r22
    69fa:	3c 01       	movw	r6, r24
	float denom = (slat1 * slat2) + (clat1 * clat2 * cdlong);
    69fc:	29 85       	ldd	r18, Y+9	; 0x09
    69fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    6a00:	4b 85       	ldd	r20, Y+11	; 0x0b
    6a02:	5c 85       	ldd	r21, Y+12	; 0x0c
    6a04:	c5 01       	movw	r24, r10
    6a06:	b4 01       	movw	r22, r8
    6a08:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    6a0c:	4b 01       	movw	r8, r22
    6a0e:	5c 01       	movw	r10, r24
    6a10:	a7 01       	movw	r20, r14
    6a12:	96 01       	movw	r18, r12
    6a14:	69 81       	ldd	r22, Y+1	; 0x01
    6a16:	7a 81       	ldd	r23, Y+2	; 0x02
    6a18:	8b 81       	ldd	r24, Y+3	; 0x03
    6a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    6a1c:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    6a20:	2d 81       	ldd	r18, Y+5	; 0x05
    6a22:	3e 81       	ldd	r19, Y+6	; 0x06
    6a24:	4f 81       	ldd	r20, Y+7	; 0x07
    6a26:	58 85       	ldd	r21, Y+8	; 0x08
    6a28:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    6a2c:	9b 01       	movw	r18, r22
    6a2e:	ac 01       	movw	r20, r24
    6a30:	c5 01       	movw	r24, r10
    6a32:	b4 01       	movw	r22, r8
    6a34:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    6a38:	9b 01       	movw	r18, r22
    6a3a:	ac 01       	movw	r20, r24
	delta = atan2(delta, denom);
    6a3c:	c3 01       	movw	r24, r6
    6a3e:	b2 01       	movw	r22, r4
    6a40:	0e 94 fd 3c 	call	0x79fa	; 0x79fa <atan2>
	return delta * 6372795 * MTR;
    6a44:	26 e7       	ldi	r18, 0x76	; 118
    6a46:	3b e7       	ldi	r19, 0x7B	; 123
    6a48:	42 ec       	ldi	r20, 0xC2	; 194
    6a4a:	5a e4       	ldi	r21, 0x4A	; 74
    6a4c:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
}
    6a50:	60 96       	adiw	r28, 0x10	; 16
    6a52:	0f b6       	in	r0, 0x3f	; 63
    6a54:	f8 94       	cli
    6a56:	de bf       	out	0x3e, r29	; 62
    6a58:	0f be       	out	0x3f, r0	; 63
    6a5a:	cd bf       	out	0x3d, r28	; 61
    6a5c:	df 91       	pop	r29
    6a5e:	cf 91       	pop	r28
    6a60:	1f 91       	pop	r17
    6a62:	0f 91       	pop	r16
    6a64:	ff 90       	pop	r15
    6a66:	ef 90       	pop	r14
    6a68:	df 90       	pop	r13
    6a6a:	cf 90       	pop	r12
    6a6c:	bf 90       	pop	r11
    6a6e:	af 90       	pop	r10
    6a70:	9f 90       	pop	r9
    6a72:	8f 90       	pop	r8
    6a74:	7f 90       	pop	r7
    6a76:	6f 90       	pop	r6
    6a78:	5f 90       	pop	r5
    6a7a:	4f 90       	pop	r4
    6a7c:	3f 90       	pop	r3
    6a7e:	2f 90       	pop	r2
    6a80:	08 95       	ret

00006a82 <_ZN3Gps6decodeEh>:

bool Gps::decode(byte inByte) {
    6a82:	cf 93       	push	r28
    6a84:	df 93       	push	r29
    6a86:	ec 01       	movw	r28, r24
	// check if the character completes a valid GPS sentence
	model->setGpsDecode(gpsSource->decode(inByte));
    6a88:	8a 81       	ldd	r24, Y+2	; 0x02
    6a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    6a8c:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <_ZN4NMEA6decodeEc>
    6a90:	61 e0       	ldi	r22, 0x01	; 1
    6a92:	89 2b       	or	r24, r25
    6a94:	09 f4       	brne	.+2      	; 0x6a98 <_ZN3Gps6decodeEh+0x16>
    6a96:	60 e0       	ldi	r22, 0x00	; 0
    6a98:	8c 81       	ldd	r24, Y+4	; 0x04
    6a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    6a9c:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <_ZN14FreeBoardModel12setGpsDecodeEb>
	//if(DEBUG)Serial.print(inByte,BYTE);
	if (model->isGpsDecode()) {
    6aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    6aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    6aa4:	0e 94 ec 2d 	call	0x5bd8	; 0x5bd8 <_ZN14FreeBoardModel11isGpsDecodeEv>
    6aa8:	88 23       	and	r24, r24
    6aaa:	69 f1       	breq	.+90     	; 0x6b06 <_ZN3Gps6decodeEh+0x84>
		model->setGpsStatus(gpsSource->gprmc_status());
    6aac:	8a 81       	ldd	r24, Y+2	; 0x02
    6aae:	9b 81       	ldd	r25, Y+3	; 0x03
    6ab0:	0e 94 c7 1c 	call	0x398e	; 0x398e <_ZN4NMEA12gprmc_statusEv>
    6ab4:	68 2f       	mov	r22, r24
    6ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    6ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    6aba:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <_ZN14FreeBoardModel12setGpsStatusEc>
		if (gpsSource->gprmc_status() == 'A' && gpsSource->term(0)[2] != 'R' && gpsSource->term(0)[3] != 'M' && gpsSource->term(0)[4] != 'C') {
    6abe:	8a 81       	ldd	r24, Y+2	; 0x02
    6ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    6ac2:	0e 94 c7 1c 	call	0x398e	; 0x398e <_ZN4NMEA12gprmc_statusEv>
    6ac6:	81 34       	cpi	r24, 0x41	; 65
    6ac8:	f1 f4       	brne	.+60     	; 0x6b06 <_ZN3Gps6decodeEh+0x84>
    6aca:	60 e0       	ldi	r22, 0x00	; 0
    6acc:	70 e0       	ldi	r23, 0x00	; 0
    6ace:	8a 81       	ldd	r24, Y+2	; 0x02
    6ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    6ad2:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <_ZN4NMEA4termEi>
    6ad6:	fc 01       	movw	r30, r24
    6ad8:	82 81       	ldd	r24, Z+2	; 0x02
    6ada:	82 35       	cpi	r24, 0x52	; 82
    6adc:	a1 f0       	breq	.+40     	; 0x6b06 <_ZN3Gps6decodeEh+0x84>
    6ade:	60 e0       	ldi	r22, 0x00	; 0
    6ae0:	70 e0       	ldi	r23, 0x00	; 0
    6ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ae4:	9b 81       	ldd	r25, Y+3	; 0x03
    6ae6:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <_ZN4NMEA4termEi>
    6aea:	fc 01       	movw	r30, r24
    6aec:	83 81       	ldd	r24, Z+3	; 0x03
    6aee:	8d 34       	cpi	r24, 0x4D	; 77
    6af0:	51 f0       	breq	.+20     	; 0x6b06 <_ZN3Gps6decodeEh+0x84>
    6af2:	60 e0       	ldi	r22, 0x00	; 0
    6af4:	70 e0       	ldi	r23, 0x00	; 0
    6af6:	8a 81       	ldd	r24, Y+2	; 0x02
    6af8:	9b 81       	ldd	r25, Y+3	; 0x03
    6afa:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <_ZN4NMEA4termEi>
    6afe:	fc 01       	movw	r30, r24
    6b00:	84 81       	ldd	r24, Z+4	; 0x04
    6b02:	83 34       	cpi	r24, 0x43	; 67
    6b04:	31 f4       	brne	.+12     	; 0x6b12 <_ZN3Gps6decodeEh+0x90>
			model->setGpsLongitude(gpsSource->gprmc_longitude());
			model->setGpsSpeed(gpsSource->gprmc_speed(model->getGpsSpeedUnit()));
			model->setGpsUtc(gpsSource->gprmc_utc());
		}
	}
	return model->isGpsDecode();
    6b06:	8c 81       	ldd	r24, Y+4	; 0x04
    6b08:	9d 81       	ldd	r25, Y+5	; 0x05
}
    6b0a:	df 91       	pop	r29
    6b0c:	cf 91       	pop	r28
			model->setGpsLongitude(gpsSource->gprmc_longitude());
			model->setGpsSpeed(gpsSource->gprmc_speed(model->getGpsSpeedUnit()));
			model->setGpsUtc(gpsSource->gprmc_utc());
		}
	}
	return model->isGpsDecode();
    6b0e:	0c 94 ec 2d 	jmp	0x5bd8	; 0x5bd8 <_ZN14FreeBoardModel11isGpsDecodeEv>
	model->setGpsDecode(gpsSource->decode(inByte));
	//if(DEBUG)Serial.print(inByte,BYTE);
	if (model->isGpsDecode()) {
		model->setGpsStatus(gpsSource->gprmc_status());
		if (gpsSource->gprmc_status() == 'A' && gpsSource->term(0)[2] != 'R' && gpsSource->term(0)[3] != 'M' && gpsSource->term(0)[4] != 'C') {
			model->setGpsLastFix(millis());
    6b12:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    6b16:	ab 01       	movw	r20, r22
    6b18:	bc 01       	movw	r22, r24
    6b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    6b1c:	9d 81       	ldd	r25, Y+5	; 0x05
    6b1e:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <_ZN14FreeBoardModel13setGpsLastFixEm>
			model->setGpsCourse(gpsSource->gprmc_course());
    6b22:	8a 81       	ldd	r24, Y+2	; 0x02
    6b24:	9b 81       	ldd	r25, Y+3	; 0x03
    6b26:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <_ZN4NMEA12gprmc_courseEv>
    6b2a:	ab 01       	movw	r20, r22
    6b2c:	bc 01       	movw	r22, r24
    6b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    6b30:	9d 81       	ldd	r25, Y+5	; 0x05
    6b32:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <_ZN14FreeBoardModel12setGpsCourseEf>
			model->setGpsLatitude(gpsSource->gprmc_latitude());
    6b36:	8a 81       	ldd	r24, Y+2	; 0x02
    6b38:	9b 81       	ldd	r25, Y+3	; 0x03
    6b3a:	0e 94 ca 1c 	call	0x3994	; 0x3994 <_ZN4NMEA14gprmc_latitudeEv>
    6b3e:	ab 01       	movw	r20, r22
    6b40:	bc 01       	movw	r22, r24
    6b42:	8c 81       	ldd	r24, Y+4	; 0x04
    6b44:	9d 81       	ldd	r25, Y+5	; 0x05
    6b46:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <_ZN14FreeBoardModel14setGpsLatitudeEf>
			model->setGpsLongitude(gpsSource->gprmc_longitude());
    6b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    6b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    6b4e:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <_ZN4NMEA15gprmc_longitudeEv>
    6b52:	ab 01       	movw	r20, r22
    6b54:	bc 01       	movw	r22, r24
    6b56:	8c 81       	ldd	r24, Y+4	; 0x04
    6b58:	9d 81       	ldd	r25, Y+5	; 0x05
    6b5a:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <_ZN14FreeBoardModel15setGpsLongitudeEf>
			model->setGpsSpeed(gpsSource->gprmc_speed(model->getGpsSpeedUnit()));
    6b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    6b60:	9d 81       	ldd	r25, Y+5	; 0x05
    6b62:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <_ZN14FreeBoardModel15getGpsSpeedUnitEv>
    6b66:	ab 01       	movw	r20, r22
    6b68:	bc 01       	movw	r22, r24
    6b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    6b6c:	9b 81       	ldd	r25, Y+3	; 0x03
    6b6e:	0e 94 de 1c 	call	0x39bc	; 0x39bc <_ZN4NMEA11gprmc_speedEf>
    6b72:	ab 01       	movw	r20, r22
    6b74:	bc 01       	movw	r22, r24
    6b76:	8c 81       	ldd	r24, Y+4	; 0x04
    6b78:	9d 81       	ldd	r25, Y+5	; 0x05
    6b7a:	0e 94 c2 2e 	call	0x5d84	; 0x5d84 <_ZN14FreeBoardModel11setGpsSpeedEf>
			model->setGpsUtc(gpsSource->gprmc_utc());
    6b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    6b80:	9b 81       	ldd	r25, Y+3	; 0x03
    6b82:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN4NMEA9gprmc_utcEv>
    6b86:	ab 01       	movw	r20, r22
    6b88:	bc 01       	movw	r22, r24
    6b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    6b8c:	9d 81       	ldd	r25, Y+5	; 0x05
    6b8e:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <_ZN14FreeBoardModel9setGpsUtcEf>
    6b92:	b9 cf       	rjmp	.-142    	; 0x6b06 <_ZN3Gps6decodeEh+0x84>

00006b94 <_ZN3Gps12setupGpsImplEv>:
void Gps::setupGpsImpl(){
	//setup based on GPS type - probably wants a more modular way if many GPS types appear
	#ifdef GPS_EM_406A
		//Serial1.begin(38400, 8, 1, 0); //gps
		//set debug on
		Serial1.println("$PSRF105,1*3E");
    6b94:	6c e0       	ldi	r22, 0x0C	; 12
    6b96:	74 e0       	ldi	r23, 0x04	; 4
    6b98:	86 e9       	ldi	r24, 0x96	; 150
    6b9a:	95 e0       	ldi	r25, 0x05	; 5
    6b9c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>

		//set VTG off -  Vector track an Speed over the Ground
		Serial1.println("$PSRF103,05,00,00,01*21");
    6ba0:	6c e4       	ldi	r22, 0x4C	; 76
    6ba2:	74 e0       	ldi	r23, 0x04	; 4
    6ba4:	86 e9       	ldi	r24, 0x96	; 150
    6ba6:	95 e0       	ldi	r25, 0x05	; 5
    6ba8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
		//set GLL off -  Lat/Lon data
		Serial1.println("$PSRF103,01,00,00,01*25");
    6bac:	64 e6       	ldi	r22, 0x64	; 100
    6bae:	74 e0       	ldi	r23, 0x04	; 4
    6bb0:	86 e9       	ldi	r24, 0x96	; 150
    6bb2:	95 e0       	ldi	r25, 0x05	; 5
    6bb4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
		//set GGA on, 5sec, constant -  Fix information
		Serial1.println("$PSRF103,00,00,05,01*21");
    6bb8:	6c e7       	ldi	r22, 0x7C	; 124
    6bba:	74 e0       	ldi	r23, 0x04	; 4
    6bbc:	86 e9       	ldi	r24, 0x96	; 150
    6bbe:	95 e0       	ldi	r25, 0x05	; 5
    6bc0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
		//set GSA on, 5 sec, constant - Overall Satellite data
		Serial1.println("$PSRF103,02,00,05,01*23");
    6bc4:	64 e9       	ldi	r22, 0x94	; 148
    6bc6:	74 e0       	ldi	r23, 0x04	; 4
    6bc8:	86 e9       	ldi	r24, 0x96	; 150
    6bca:	95 e0       	ldi	r25, 0x05	; 5
    6bcc:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
		//set GSV on, 20sec, constant -Detailed Satellite data
		Serial1.println("$PSRF103,03,00,20,01*25");
    6bd0:	6c ea       	ldi	r22, 0xAC	; 172
    6bd2:	74 e0       	ldi	r23, 0x04	; 4
    6bd4:	86 e9       	ldi	r24, 0x96	; 150
    6bd6:	95 e0       	ldi	r25, 0x05	; 5
    6bd8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
		//set RMC on, 1sec, constant, Recommended minimum info
		Serial1.println("$PSRF103,04,00,01,01*21");
    6bdc:	64 ec       	ldi	r22, 0xC4	; 196
    6bde:	74 e0       	ldi	r23, 0x04	; 4
    6be0:	86 e9       	ldi	r24, 0x96	; 150
    6be2:	95 e0       	ldi	r25, 0x05	; 5
    6be4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>

		//debug off
		Serial1.println("$PSRF105,0*3F");
    6be8:	67 e3       	ldi	r22, 0x37	; 55
    6bea:	74 e0       	ldi	r23, 0x04	; 4
    6bec:	86 e9       	ldi	r24, 0x96	; 150
    6bee:	95 e0       	ldi	r25, 0x05	; 5
    6bf0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
		//#define SIRF_BAUD_RATE_19200    "$PSRF100,1,19200,8,1,0*38\r\n"
		//#define SIRF_BAUD_RATE_38400    "$PSRF100,1,38400,8,1,0*3D\r\n"
		//#define SIRF_BAUD_RATE_57600    "$PSRF100,1,57600,8,1,0*36\r\n"

		//$PSRF100,1,38400,8,1,0*3D\r\n
		Serial1.print("$PSRF100,1,38400,8,1,0*3D\r\n");
    6bf4:	6c ed       	ldi	r22, 0xDC	; 220
    6bf6:	74 e0       	ldi	r23, 0x04	; 4
    6bf8:	86 e9       	ldi	r24, 0x96	; 150
    6bfa:	95 e0       	ldi	r25, 0x05	; 5
    6bfc:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <_ZN5Print5printEPKc>

00006c00 <_ZN3Gps8setupGpsEv>:
//	return gpsDecode;
//}
/*
 Set baud rate and various message frequencies.
 */
void Gps::setupGps() {
    6c00:	cf 93       	push	r28
    6c02:	df 93       	push	r29
    6c04:	ec 01       	movw	r28, r24
	 6 MSS (If internal beacon is supported)
	 7 Not defined
	 8 ZDA (if 1PPS output is supported)
	 9 Not defined
	 */
	autoBaud();
    6c06:	0e 94 a9 33 	call	0x6752	; 0x6752 <_ZN3Gps8autoBaudEv>

	setupGpsImpl();
    6c0a:	ce 01       	movw	r24, r28
    6c0c:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <_ZN3Gps12setupGpsImplEv>
	//now flush and restart
	Serial1.flush();
    6c10:	86 e9       	ldi	r24, 0x96	; 150
    6c12:	95 e0       	ldi	r25, 0x05	; 5
    6c14:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN14HardwareSerial5flushEv>
	Serial1.end();
    6c18:	86 e9       	ldi	r24, 0x96	; 150
    6c1a:	95 e0       	ldi	r25, 0x05	; 5
    6c1c:	0e 94 c2 05 	call	0xb84	; 0xb84 <_ZN14HardwareSerial3endEv>
	Serial1.begin(38400);
    6c20:	40 e0       	ldi	r20, 0x00	; 0
    6c22:	56 e9       	ldi	r21, 0x96	; 150
    6c24:	60 e0       	ldi	r22, 0x00	; 0
    6c26:	70 e0       	ldi	r23, 0x00	; 0
    6c28:	86 e9       	ldi	r24, 0x96	; 150
    6c2a:	95 e0       	ldi	r25, 0x05	; 5
}
    6c2c:	df 91       	pop	r29
    6c2e:	cf 91       	pop	r28

	setupGpsImpl();
	//now flush and restart
	Serial1.flush();
	Serial1.end();
	Serial1.begin(38400);
    6c30:	0c 94 a9 04 	jmp	0x952	; 0x952 <_ZN14HardwareSerial5beginEm>

00006c34 <_GLOBAL__sub_I_gpsBuffer>:
    6c34:	10 92 50 10 	sts	0x1050, r1
    6c38:	10 92 4f 10 	sts	0x104F, r1
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    6c3c:	88 e0       	ldi	r24, 0x08	; 8
    6c3e:	92 e0       	ldi	r25, 0x02	; 2
    6c40:	90 93 4e 10 	sts	0x104E, r25
    6c44:	80 93 4d 10 	sts	0x104D, r24
    6c48:	87 e5       	ldi	r24, 0x57	; 87
    6c4a:	90 e1       	ldi	r25, 0x10	; 16
    6c4c:	90 93 52 10 	sts	0x1052, r25
    6c50:	80 93 51 10 	sts	0x1051, r24
    6c54:	88 e2       	ldi	r24, 0x28	; 40
    6c56:	90 e0       	ldi	r25, 0x00	; 0
    6c58:	90 93 56 10 	sts	0x1056, r25
    6c5c:	80 93 55 10 	sts	0x1055, r24
  { begin(); }
    6c60:	8d e4       	ldi	r24, 0x4D	; 77
    6c62:	90 e1       	ldi	r25, 0x10	; 16
    6c64:	0c 94 83 18 	jmp	0x3106	; 0x3106 <_ZN7PString5beginEv>

00006c68 <_ZN10NmeaSerialD1Ev>:

class AltSoftSerial : public Stream
{
public:
	AltSoftSerial() { }
	~AltSoftSerial() { end(); }
    6c68:	28 e1       	ldi	r18, 0x18	; 24
    6c6a:	32 e0       	ldi	r19, 0x02	; 2
    6c6c:	fc 01       	movw	r30, r24
    6c6e:	31 83       	std	Z+1, r19	; 0x01
    6c70:	20 83       	st	Z, r18
    6c72:	0c 94 1d 24 	jmp	0x483a	; 0x483a <_ZN13AltSoftSerial3endEv>

00006c76 <_ZN10NmeaSerialD0Ev>:
 *      Author: robert
 */

#include "NmeaSerial.h"

NmeaSerial::~NmeaSerial() {
    6c76:	cf 93       	push	r28
    6c78:	df 93       	push	r29
    6c7a:	ec 01       	movw	r28, r24
    6c7c:	88 e1       	ldi	r24, 0x18	; 24
    6c7e:	92 e0       	ldi	r25, 0x02	; 2
    6c80:	99 83       	std	Y+1, r25	; 0x01
    6c82:	88 83       	st	Y, r24
    6c84:	0e 94 1d 24 	call	0x483a	; 0x483a <_ZN13AltSoftSerial3endEv>

}
    6c88:	ce 01       	movw	r24, r28
    6c8a:	df 91       	pop	r29
    6c8c:	cf 91       	pop	r28
    6c8e:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <_ZdlPv>

00006c92 <_ZN10NmeaSerial5beginEl>:
void NmeaSerial::begin(long speed) {
	//initialise the nmea output
	//pinMode(nmeaRxPin, INPUT);
	//pinMode(nmeaTxPin, OUTPUT);
	AltSoftSerial::begin(speed);
    6c92:	9a 01       	movw	r18, r20
    6c94:	ab 01       	movw	r20, r22
	static void begin(uint32_t baud) { init((F_CPU + baud / 2) / baud); }
    6c96:	ca 01       	movw	r24, r20
    6c98:	b9 01       	movw	r22, r18
    6c9a:	96 95       	lsr	r25
    6c9c:	87 95       	ror	r24
    6c9e:	77 95       	ror	r23
    6ca0:	67 95       	ror	r22
    6ca2:	7c 5d       	subi	r23, 0xDC	; 220
    6ca4:	8b 40       	sbci	r24, 0x0B	; 11
    6ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ca8:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__udivmodsi4>
    6cac:	ca 01       	movw	r24, r20
    6cae:	b9 01       	movw	r22, r18
    6cb0:	0c 94 03 22 	jmp	0x4406	; 0x4406 <_ZN13AltSoftSerial4initEm>

00006cb4 <_ZN10NmeaSerial9printNmeaEPc>:

void NmeaSerial::printNmea(char* sentence) {
	//sentence can be up to 80 chars
	//make it as perfect as possible, as the Raymarine C70 is very touchy
	// noInterrupts();
	println(sentence);
    6cb4:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>

00006cb8 <_ZN10NmeaSerial13printWindNmeaEv>:
 * 4. Wind Speed Units, K/M/N
 * 5. Status, A = Data Valid
 * 6. Checksum
 *
 */
void NmeaSerial::printWindNmea() {
    6cb8:	cf 92       	push	r12
    6cba:	df 92       	push	r13
    6cbc:	ef 92       	push	r14
    6cbe:	ff 92       	push	r15
    6cc0:	0f 93       	push	r16
    6cc2:	1f 93       	push	r17
    6cc4:	cf 93       	push	r28
    6cc6:	df 93       	push	r29
    6cc8:	cd b7       	in	r28, 0x3d	; 61
    6cca:	de b7       	in	r29, 0x3e	; 62
    6ccc:	2a 97       	sbiw	r28, 0x0a	; 10
    6cce:	0f b6       	in	r0, 0x3f	; 63
    6cd0:	f8 94       	cli
    6cd2:	de bf       	out	0x3e, r29	; 62
    6cd4:	0f be       	out	0x3f, r0	; 63
    6cd6:	cd bf       	out	0x3d, r28	; 61
    6cd8:	8c 01       	movw	r16, r24
	//Assemble a sentence of the various parts so that we can calculate the proper checksum

	PString str(windSentence, sizeof(windSentence));
    6cda:	7c 01       	movw	r14, r24
    6cdc:	8e e0       	ldi	r24, 0x0E	; 14
    6cde:	e8 0e       	add	r14, r24
    6ce0:	f1 1c       	adc	r15, r1
    6ce2:	1c 82       	std	Y+4, r1	; 0x04
    6ce4:	1b 82       	std	Y+3, r1	; 0x03
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    6ce6:	88 e0       	ldi	r24, 0x08	; 8
    6ce8:	92 e0       	ldi	r25, 0x02	; 2
    6cea:	9a 83       	std	Y+2, r25	; 0x02
    6cec:	89 83       	std	Y+1, r24	; 0x01
    6cee:	fe 82       	std	Y+6, r15	; 0x06
    6cf0:	ed 82       	std	Y+5, r14	; 0x05
    6cf2:	8e e1       	ldi	r24, 0x1E	; 30
    6cf4:	90 e0       	ldi	r25, 0x00	; 0
    6cf6:	9a 87       	std	Y+10, r25	; 0x0a
    6cf8:	89 87       	std	Y+9, r24	; 0x09
  { begin(); }
    6cfa:	ce 01       	movw	r24, r28
    6cfc:	01 96       	adiw	r24, 0x01	; 1
    6cfe:	0e 94 83 18 	call	0x3106	; 0x3106 <_ZN7PString5beginEv>
	str.print("$FBMWV,");
    6d02:	60 e0       	ldi	r22, 0x00	; 0
    6d04:	75 e0       	ldi	r23, 0x05	; 5
    6d06:	ce 01       	movw	r24, r28
    6d08:	01 96       	adiw	r24, 0x01	; 1
    6d0a:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5Print5printEPKc>
	str.print(model->getWindApparentDir());
    6d0e:	f8 01       	movw	r30, r16
    6d10:	84 85       	ldd	r24, Z+12	; 0x0c
    6d12:	95 85       	ldd	r25, Z+13	; 0x0d
    6d14:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <_ZN14FreeBoardModel18getWindApparentDirEv>
    6d18:	4a e0       	ldi	r20, 0x0A	; 10
    6d1a:	50 e0       	ldi	r21, 0x00	; 0
    6d1c:	bc 01       	movw	r22, r24
    6d1e:	ce 01       	movw	r24, r28
    6d20:	01 96       	adiw	r24, 0x01	; 1
    6d22:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN5Print5printEii>
	str.print(".0,R,");
    6d26:	68 e0       	ldi	r22, 0x08	; 8
    6d28:	75 e0       	ldi	r23, 0x05	; 5
    6d2a:	ce 01       	movw	r24, r28
    6d2c:	01 96       	adiw	r24, 0x01	; 1
    6d2e:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5Print5printEPKc>
	str.print(model->getWindAverage());
    6d32:	f8 01       	movw	r30, r16
    6d34:	84 85       	ldd	r24, Z+12	; 0x0c
    6d36:	95 85       	ldd	r25, Z+13	; 0x0d
    6d38:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <_ZN14FreeBoardModel14getWindAverageEv>
    6d3c:	ab 01       	movw	r20, r22
    6d3e:	bc 01       	movw	r22, r24
    6d40:	22 e0       	ldi	r18, 0x02	; 2
    6d42:	30 e0       	ldi	r19, 0x00	; 0
    6d44:	ce 01       	movw	r24, r28
    6d46:	01 96       	adiw	r24, 0x01	; 1
    6d48:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN5Print5printEdi>
	str.print(",N,A*");
    6d4c:	6e e0       	ldi	r22, 0x0E	; 14
    6d4e:	75 e0       	ldi	r23, 0x05	; 5
    6d50:	ce 01       	movw	r24, r28
    6d52:	01 96       	adiw	r24, 0x01	; 1
    6d54:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5Print5printEPKc>
	//calculate the checksum

	cs = 0; //clear any old checksum
    6d58:	f8 01       	movw	r30, r16
    6d5a:	e0 5c       	subi	r30, 0xC0	; 192
    6d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    6d5e:	10 82       	st	Z, r1
	for (unsigned int n = 1; n < strlen(windSentence) - 1; n++) {
    6d60:	81 e0       	ldi	r24, 0x01	; 1
    6d62:	90 e0       	ldi	r25, 0x00	; 0
    6d64:	6f 01       	movw	r12, r30
    6d66:	09 c0       	rjmp	.+18     	; 0x6d7a <_ZN10NmeaSerial13printWindNmeaEv+0xc2>
 * 4. Wind Speed Units, K/M/N
 * 5. Status, A = Data Valid
 * 6. Checksum
 *
 */
void NmeaSerial::printWindNmea() {
    6d68:	f8 01       	movw	r30, r16
    6d6a:	e8 0f       	add	r30, r24
    6d6c:	f9 1f       	adc	r31, r25
	str.print(",N,A*");
	//calculate the checksum

	cs = 0; //clear any old checksum
	for (unsigned int n = 1; n < strlen(windSentence) - 1; n++) {
		cs ^= windSentence[n]; //calculates the checksum
    6d6e:	26 85       	ldd	r18, Z+14	; 0x0e
    6d70:	f6 01       	movw	r30, r12
    6d72:	30 81       	ld	r19, Z
    6d74:	23 27       	eor	r18, r19
    6d76:	20 83       	st	Z, r18
	str.print(model->getWindAverage());
	str.print(",N,A*");
	//calculate the checksum

	cs = 0; //clear any old checksum
	for (unsigned int n = 1; n < strlen(windSentence) - 1; n++) {
    6d78:	01 96       	adiw	r24, 0x01	; 1
    6d7a:	f7 01       	movw	r30, r14
    6d7c:	01 90       	ld	r0, Z+
    6d7e:	00 20       	and	r0, r0
    6d80:	e9 f7       	brne	.-6      	; 0x6d7c <_ZN10NmeaSerial13printWindNmeaEv+0xc4>
    6d82:	ee 19       	sub	r30, r14
    6d84:	ff 09       	sbc	r31, r15
    6d86:	32 97       	sbiw	r30, 0x02	; 2
    6d88:	8e 17       	cp	r24, r30
    6d8a:	9f 07       	cpc	r25, r31
    6d8c:	68 f3       	brcs	.-38     	; 0x6d68 <_ZN10NmeaSerial13printWindNmeaEv+0xb0>
		cs ^= windSentence[n]; //calculates the checksum
	}
	//bug - arduino prints 0x007 as 7, 0x02B as 2B, so we add it now
	if (cs < 0x10) str.print('0');
    6d8e:	f6 01       	movw	r30, r12
    6d90:	80 81       	ld	r24, Z
    6d92:	80 31       	cpi	r24, 0x10	; 16
    6d94:	28 f4       	brcc	.+10     	; 0x6da0 <_ZN10NmeaSerial13printWindNmeaEv+0xe8>
    6d96:	60 e3       	ldi	r22, 0x30	; 48
    6d98:	ce 01       	movw	r24, r28
    6d9a:	01 96       	adiw	r24, 0x01	; 1
    6d9c:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEc>
	str.print(cs, HEX); // Assemble the final message and send it out the serial port
    6da0:	40 e1       	ldi	r20, 0x10	; 16
    6da2:	50 e0       	ldi	r21, 0x00	; 0
    6da4:	f6 01       	movw	r30, r12
    6da6:	60 81       	ld	r22, Z
    6da8:	ce 01       	movw	r24, r28
    6daa:	01 96       	adiw	r24, 0x01	; 1
    6dac:	0e 94 c2 07 	call	0xf84	; 0xf84 <_ZN5Print5printEhi>
	Serial.println(windSentence);
    6db0:	b7 01       	movw	r22, r14
    6db2:	88 eb       	ldi	r24, 0xB8	; 184
    6db4:	95 e0       	ldi	r25, 0x05	; 5
    6db6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN5Print7printlnEPKc>
	printNmea(windSentence);
    6dba:	b7 01       	movw	r22, r14
    6dbc:	c8 01       	movw	r24, r16
    6dbe:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <_ZN10NmeaSerial9printNmeaEPc>

}
    6dc2:	2a 96       	adiw	r28, 0x0a	; 10
    6dc4:	0f b6       	in	r0, 0x3f	; 63
    6dc6:	f8 94       	cli
    6dc8:	de bf       	out	0x3e, r29	; 62
    6dca:	0f be       	out	0x3f, r0	; 63
    6dcc:	cd bf       	out	0x3d, r28	; 61
    6dce:	df 91       	pop	r29
    6dd0:	cf 91       	pop	r28
    6dd2:	1f 91       	pop	r17
    6dd4:	0f 91       	pop	r16
    6dd6:	ff 90       	pop	r15
    6dd8:	ef 90       	pop	r14
    6dda:	df 90       	pop	r13
    6ddc:	cf 90       	pop	r12
    6dde:	08 95       	ret

00006de0 <_ZN7SeatalkC1EP14HardwareSerialP14FreeBoardModel>:

 */

#include "Seatalk.h"

	Seatalk::Seatalk( HardwareSerial* serial, FreeBoardModel* model) {
    6de0:	fc 01       	movw	r30, r24
	this->model=model;
    6de2:	57 8b       	std	Z+23, r21	; 0x17
    6de4:	46 8b       	std	Z+22, r20	; 0x16
	this->serial=serial;
    6de6:	71 8f       	std	Z+25, r23	; 0x19
    6de8:	60 8f       	std	Z+24, r22	; 0x18
	seaTalkPos = 0;
    6dea:	11 82       	std	Z+1, r1	; 0x01
    6dec:	10 82       	st	Z, r1
    6dee:	08 95       	ret

00006df0 <_ZN7Seatalk18processSeaTalkByteEh>:
	// Send 36  00  01      Cancel MOB (Man Over Board) condition
	serial->write9(0x36, true);
	serial->write9(0x00, false);
	serial->write9(0x01, false);
}
void Seatalk::processSeaTalkByte(byte inByte) {
    6df0:	fc 01       	movw	r30, r24
		processSeatalk(seatalkStream);
		seaTalkPos = 0;
		// Serial.print("Command:");
		inByte = inByte - 256;
	}
	seatalkStream[seaTalkPos] = inByte;
    6df2:	a0 81       	ld	r26, Z
    6df4:	b1 81       	ldd	r27, Z+1	; 0x01
    6df6:	a8 0f       	add	r26, r24
    6df8:	b9 1f       	adc	r27, r25
    6dfa:	12 96       	adiw	r26, 0x02	; 2
    6dfc:	6c 93       	st	X, r22
	if (seaTalkPos < 19)
    6dfe:	80 81       	ld	r24, Z
    6e00:	91 81       	ldd	r25, Z+1	; 0x01
    6e02:	43 97       	sbiw	r24, 0x13	; 19
    6e04:	2c f4       	brge	.+10     	; 0x6e10 <_ZN7Seatalk18processSeaTalkByteEh+0x20>
		seaTalkPos++;
    6e06:	80 81       	ld	r24, Z
    6e08:	91 81       	ldd	r25, Z+1	; 0x01
    6e0a:	01 96       	adiw	r24, 0x01	; 1
    6e0c:	91 83       	std	Z+1, r25	; 0x01
    6e0e:	80 83       	st	Z, r24
    6e10:	08 95       	ret

00006e12 <_ZN4Wind17readWindDataSpeedEv>:



/* NMEA Wind routines and alarm
 */
void Wind::readWindDataSpeed() {
    6e12:	0f 93       	push	r16
    6e14:	1f 93       	push	r17
	if(windSpeedFlag){
    6e16:	80 91 a2 10 	lds	r24, 0x10A2
    6e1a:	88 23       	and	r24, r24
    6e1c:	09 f4       	brne	.+2      	; 0x6e20 <_ZN4Wind17readWindDataSpeedEv+0xe>
    6e1e:	76 c0       	rjmp	.+236    	; 0x6f0c <_ZN4Wind17readWindDataSpeedEv+0xfa>
		windSpeedFlag=false;
    6e20:	10 92 a2 10 	sts	0x10A2, r1
		//therefore about 50/ms = 100knts = 150 rps = 1000000/150 = 6500 us per pulse
		//at 100 knts about 20us per degree of rotation
		//ULTIMETER:
		// 66RPS = 136MPH == 118 KNTS
		// so 1000000/66=15151/360=42us/degree at 118knts
		lastPulse=millis();
    6e24:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    6e28:	60 93 b3 10 	sts	0x10B3, r22
    6e2c:	70 93 b4 10 	sts	0x10B4, r23
    6e30:	80 93 b5 10 	sts	0x10B5, r24
    6e34:	90 93 b6 10 	sts	0x10B6, r25
		windSpeedDur=micros()-windSpeedMicros;
    6e38:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <micros>
    6e3c:	00 91 a7 10 	lds	r16, 0x10A7
    6e40:	10 91 a8 10 	lds	r17, 0x10A8
    6e44:	20 91 a9 10 	lds	r18, 0x10A9
    6e48:	30 91 aa 10 	lds	r19, 0x10AA
    6e4c:	60 1b       	sub	r22, r16
    6e4e:	71 0b       	sbc	r23, r17
    6e50:	82 0b       	sbc	r24, r18
    6e52:	93 0b       	sbc	r25, r19
    6e54:	60 93 af 10 	sts	0x10AF, r22
    6e58:	70 93 b0 10 	sts	0x10B0, r23
    6e5c:	80 93 b1 10 	sts	0x10B1, r24
    6e60:	90 93 b2 10 	sts	0x10B2, r25
		if(windSpeedDur>0){
    6e64:	80 91 af 10 	lds	r24, 0x10AF
    6e68:	90 91 b0 10 	lds	r25, 0x10B0
    6e6c:	a0 91 b1 10 	lds	r26, 0x10B1
    6e70:	b0 91 b2 10 	lds	r27, 0x10B2
    6e74:	89 2b       	or	r24, r25
    6e76:	8a 2b       	or	r24, r26
    6e78:	8b 2b       	or	r24, r27
    6e7a:	f1 f1       	breq	.+124    	; 0x6ef8 <_ZN4Wind17readWindDataSpeedEv+0xe6>
			speedList.addValue(windSpeedDur);
    6e7c:	00 91 af 10 	lds	r16, 0x10AF
    6e80:	10 91 b0 10 	lds	r17, 0x10B0
    6e84:	20 91 b1 10 	lds	r18, 0x10B1
    6e88:	30 91 b2 10 	lds	r19, 0x10B2
			currentIndex = 0; 
		}
		
		//add a value to the AverageList at the next index, if out of bounds, return false, else return true
		void addValue(datatype value){ 
			currentIndex=currentIndex+1;
    6e8c:	80 91 88 10 	lds	r24, 0x1088
    6e90:	8f 5f       	subi	r24, 0xFF	; 255
    6e92:	80 93 88 10 	sts	0x1088, r24
			if (currentSize<size){
    6e96:	70 91 87 10 	lds	r23, 0x1087
    6e9a:	60 91 86 10 	lds	r22, 0x1086
    6e9e:	40 91 84 10 	lds	r20, 0x1084
    6ea2:	50 91 85 10 	lds	r21, 0x1085
    6ea6:	76 17       	cp	r23, r22
    6ea8:	b8 f4       	brcc	.+46     	; 0x6ed8 <_ZN4Wind17readWindDataSpeedEv+0xc6>
				values[currentSize++] = value;
    6eaa:	fa 01       	movw	r30, r20
    6eac:	84 e0       	ldi	r24, 0x04	; 4
    6eae:	78 9f       	mul	r23, r24
    6eb0:	e0 0d       	add	r30, r0
    6eb2:	f1 1d       	adc	r31, r1
    6eb4:	11 24       	eor	r1, r1
    6eb6:	c8 01       	movw	r24, r16
    6eb8:	d9 01       	movw	r26, r18
    6eba:	80 83       	st	Z, r24
    6ebc:	91 83       	std	Z+1, r25	; 0x01
    6ebe:	a2 83       	std	Z+2, r26	; 0x02
    6ec0:	b3 83       	std	Z+3, r27	; 0x03
    6ec2:	67 2f       	mov	r22, r23
    6ec4:	6f 5f       	subi	r22, 0xFF	; 255
    6ec6:	60 93 87 10 	sts	0x1087, r22
				currentIndex = currentIndex % currentSize;
    6eca:	80 91 88 10 	lds	r24, 0x1088
    6ece:	0e 94 33 40 	call	0x8066	; 0x8066 <__udivmodqi4>
    6ed2:	90 93 88 10 	sts	0x1088, r25
    6ed6:	10 c0       	rjmp	.+32     	; 0x6ef8 <_ZN4Wind17readWindDataSpeedEv+0xe6>
			}else{
				currentIndex = currentIndex % size;
    6ed8:	0e 94 33 40 	call	0x8066	; 0x8066 <__udivmodqi4>
    6edc:	90 93 88 10 	sts	0x1088, r25
				values[currentIndex] = value; 
    6ee0:	fa 01       	movw	r30, r20
    6ee2:	84 e0       	ldi	r24, 0x04	; 4
    6ee4:	98 9f       	mul	r25, r24
    6ee6:	e0 0d       	add	r30, r0
    6ee8:	f1 1d       	adc	r31, r1
    6eea:	11 24       	eor	r1, r1
    6eec:	c8 01       	movw	r24, r16
    6eee:	d9 01       	movw	r26, r18
    6ef0:	80 83       	st	Z, r24
    6ef2:	91 83       	std	Z+1, r25	; 0x01
    6ef4:	a2 83       	std	Z+2, r26	; 0x02
    6ef6:	b3 83       	std	Z+3, r27	; 0x03
		}
		windSpeedMicros=micros();
    6ef8:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <micros>
    6efc:	60 93 a7 10 	sts	0x10A7, r22
    6f00:	70 93 a8 10 	sts	0x10A8, r23
    6f04:	80 93 a9 10 	sts	0x10A9, r24
    6f08:	90 93 aa 10 	sts	0x10AA, r25
	}

}
    6f0c:	1f 91       	pop	r17
    6f0e:	0f 91       	pop	r16
    6f10:	08 95       	ret

00006f12 <_ZN4Wind15readWindDataDirEv>:
void Wind::readWindDataDir() {
    6f12:	8f 92       	push	r8
    6f14:	9f 92       	push	r9
    6f16:	af 92       	push	r10
    6f18:	bf 92       	push	r11
    6f1a:	cf 92       	push	r12
    6f1c:	df 92       	push	r13
    6f1e:	ef 92       	push	r14
    6f20:	ff 92       	push	r15
    6f22:	cf 93       	push	r28
    6f24:	df 93       	push	r29
	if(!windSpeedFlag){
    6f26:	80 91 a2 10 	lds	r24, 0x10A2
    6f2a:	81 11       	cpse	r24, r1
    6f2c:	9b c0       	rjmp	.+310    	; 0x7064 <_ZN4Wind15readWindDataDirEv+0x152>
		windSpeedFlag=true;
    6f2e:	81 e0       	ldi	r24, 0x01	; 1
    6f30:	80 93 a2 10 	sts	0x10A2, r24
		//called by dir pin interrupt
		//micros resets every 50 min, reset if that happens
		//debounce 5ms
		windDirDur=micros()-windSpeedMicros;
    6f34:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <micros>
    6f38:	c0 90 a7 10 	lds	r12, 0x10A7
    6f3c:	d0 90 a8 10 	lds	r13, 0x10A8
    6f40:	e0 90 a9 10 	lds	r14, 0x10A9
    6f44:	f0 90 aa 10 	lds	r15, 0x10AA
    6f48:	6c 19       	sub	r22, r12
    6f4a:	7d 09       	sbc	r23, r13
    6f4c:	8e 09       	sbc	r24, r14
    6f4e:	9f 09       	sbc	r25, r15
    6f50:	60 93 a3 10 	sts	0x10A3, r22
    6f54:	70 93 a4 10 	sts	0x10A4, r23
    6f58:	80 93 a5 10 	sts	0x10A5, r24
    6f5c:	90 93 a6 10 	sts	0x10A6, r25
		if(windDirDur>0 && windSpeedDur>windDirDur)
    6f60:	80 91 a3 10 	lds	r24, 0x10A3
    6f64:	90 91 a4 10 	lds	r25, 0x10A4
    6f68:	a0 91 a5 10 	lds	r26, 0x10A5
    6f6c:	b0 91 a6 10 	lds	r27, 0x10A6
    6f70:	89 2b       	or	r24, r25
    6f72:	8a 2b       	or	r24, r26
    6f74:	8b 2b       	or	r24, r27
    6f76:	09 f4       	brne	.+2      	; 0x6f7a <_ZN4Wind15readWindDataDirEv+0x68>
    6f78:	75 c0       	rjmp	.+234    	; 0x7064 <_ZN4Wind15readWindDataDirEv+0x152>
    6f7a:	40 91 af 10 	lds	r20, 0x10AF
    6f7e:	50 91 b0 10 	lds	r21, 0x10B0
    6f82:	60 91 b1 10 	lds	r22, 0x10B1
    6f86:	70 91 b2 10 	lds	r23, 0x10B2
    6f8a:	80 91 a3 10 	lds	r24, 0x10A3
    6f8e:	90 91 a4 10 	lds	r25, 0x10A4
    6f92:	a0 91 a5 10 	lds	r26, 0x10A5
    6f96:	b0 91 a6 10 	lds	r27, 0x10A6
    6f9a:	84 17       	cp	r24, r20
    6f9c:	95 07       	cpc	r25, r21
    6f9e:	a6 07       	cpc	r26, r22
    6fa0:	b7 07       	cpc	r27, r23
    6fa2:	68 f1       	brcs	.+90     	; 0x6ffe <_ZN4Wind15readWindDataDirEv+0xec>
    6fa4:	5f c0       	rjmp	.+190    	; 0x7064 <_ZN4Wind15readWindDataDirEv+0x152>
		
		//add a value to the AverageList at the next index, if out of bounds, return false, else return true
		void addValue(datatype value){ 
			currentIndex=currentIndex+1;
			if (currentSize<size){
				values[currentSize++] = value;
    6fa6:	e9 01       	movw	r28, r18
    6fa8:	84 e0       	ldi	r24, 0x04	; 4
    6faa:	e8 9f       	mul	r30, r24
    6fac:	c0 0d       	add	r28, r0
    6fae:	d1 1d       	adc	r29, r1
    6fb0:	11 24       	eor	r1, r1
    6fb2:	4f 2f       	mov	r20, r31
    6fb4:	5a 2f       	mov	r21, r26
    6fb6:	6b 2f       	mov	r22, r27
    6fb8:	7f 2d       	mov	r23, r15
    6fba:	48 83       	st	Y, r20
    6fbc:	59 83       	std	Y+1, r21	; 0x01
    6fbe:	6a 83       	std	Y+2, r22	; 0x02
    6fc0:	7b 83       	std	Y+3, r23	; 0x03
    6fc2:	6e 2f       	mov	r22, r30
    6fc4:	6f 5f       	subi	r22, 0xFF	; 255
    6fc6:	60 93 82 10 	sts	0x1082, r22
				currentIndex = currentIndex % currentSize;
    6fca:	80 91 83 10 	lds	r24, 0x1083
    6fce:	0e 94 33 40 	call	0x8066	; 0x8066 <__udivmodqi4>
    6fd2:	90 93 83 10 	sts	0x1083, r25
    6fd6:	46 c0       	rjmp	.+140    	; 0x7064 <_ZN4Wind15readWindDataDirEv+0x152>
			}else{
				currentIndex = currentIndex % size;
    6fd8:	0e 94 33 40 	call	0x8066	; 0x8066 <__udivmodqi4>
    6fdc:	90 93 83 10 	sts	0x1083, r25
				values[currentIndex] = value; 
    6fe0:	e9 01       	movw	r28, r18
    6fe2:	84 e0       	ldi	r24, 0x04	; 4
    6fe4:	98 9f       	mul	r25, r24
    6fe6:	c0 0d       	add	r28, r0
    6fe8:	d1 1d       	adc	r29, r1
    6fea:	11 24       	eor	r1, r1
    6fec:	4f 2f       	mov	r20, r31
    6fee:	5a 2f       	mov	r21, r26
    6ff0:	6b 2f       	mov	r22, r27
    6ff2:	7f 2d       	mov	r23, r15
    6ff4:	48 83       	st	Y, r20
    6ff6:	59 83       	std	Y+1, r21	; 0x01
    6ff8:	6a 83       	std	Y+2, r22	; 0x02
    6ffa:	7b 83       	std	Y+3, r23	; 0x03
    6ffc:	33 c0       	rjmp	.+102    	; 0x7064 <_ZN4Wind15readWindDataDirEv+0x152>
			dirList.addValue(((float)windDirDur/(float)windSpeedDur));
    6ffe:	60 91 a3 10 	lds	r22, 0x10A3
    7002:	70 91 a4 10 	lds	r23, 0x10A4
    7006:	80 91 a5 10 	lds	r24, 0x10A5
    700a:	90 91 a6 10 	lds	r25, 0x10A6
    700e:	80 90 af 10 	lds	r8, 0x10AF
    7012:	90 90 b0 10 	lds	r9, 0x10B0
    7016:	a0 90 b1 10 	lds	r10, 0x10B1
    701a:	b0 90 b2 10 	lds	r11, 0x10B2
    701e:	0e 94 f0 3d 	call	0x7be0	; 0x7be0 <__floatunsisf>
    7022:	6b 01       	movw	r12, r22
    7024:	7c 01       	movw	r14, r24
    7026:	c5 01       	movw	r24, r10
    7028:	b4 01       	movw	r22, r8
    702a:	0e 94 f0 3d 	call	0x7be0	; 0x7be0 <__floatunsisf>
    702e:	9b 01       	movw	r18, r22
    7030:	ac 01       	movw	r20, r24
    7032:	c7 01       	movw	r24, r14
    7034:	b6 01       	movw	r22, r12
    7036:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__divsf3>
    703a:	f6 2f       	mov	r31, r22
    703c:	a7 2f       	mov	r26, r23
    703e:	b8 2f       	mov	r27, r24
    7040:	f9 2e       	mov	r15, r25
			currentIndex = 0; 
		}
		
		//add a value to the AverageList at the next index, if out of bounds, return false, else return true
		void addValue(datatype value){ 
			currentIndex=currentIndex+1;
    7042:	80 91 83 10 	lds	r24, 0x1083
    7046:	8f 5f       	subi	r24, 0xFF	; 255
    7048:	80 93 83 10 	sts	0x1083, r24
			if (currentSize<size){
    704c:	e0 91 82 10 	lds	r30, 0x1082
    7050:	60 91 81 10 	lds	r22, 0x1081
    7054:	20 91 7f 10 	lds	r18, 0x107F
    7058:	30 91 80 10 	lds	r19, 0x1080
    705c:	e6 17       	cp	r30, r22
    705e:	08 f0       	brcs	.+2      	; 0x7062 <_ZN4Wind15readWindDataDirEv+0x150>
    7060:	bb cf       	rjmp	.-138    	; 0x6fd8 <_ZN4Wind15readWindDataDirEv+0xc6>
    7062:	a1 cf       	rjmp	.-190    	; 0x6fa6 <_ZN4Wind15readWindDataDirEv+0x94>

	}
}
    7064:	df 91       	pop	r29
    7066:	cf 91       	pop	r28
    7068:	ff 90       	pop	r15
    706a:	ef 90       	pop	r14
    706c:	df 90       	pop	r13
    706e:	cf 90       	pop	r12
    7070:	bf 90       	pop	r11
    7072:	af 90       	pop	r10
    7074:	9f 90       	pop	r9
    7076:	8f 90       	pop	r8
    7078:	08 95       	ret

0000707a <_ZN11AverageListIVlE5resetEv>:
			}
			return min;
		}
		
		//reset the AverageList
		void reset(){ 
    707a:	fc 01       	movw	r30, r24
			currentSize = 0; 
    707c:	13 82       	std	Z+3, r1	; 0x03
			currentIndex = 0;
    707e:	14 82       	std	Z+4, r1	; 0x04
			for (byte i=0; i<size; i++){ values[i]=0; }
    7080:	80 e0       	ldi	r24, 0x00	; 0
    7082:	0d c0       	rjmp	.+26     	; 0x709e <_ZN11AverageListIVlE5resetEv+0x24>
    7084:	a0 81       	ld	r26, Z
    7086:	b1 81       	ldd	r27, Z+1	; 0x01
    7088:	94 e0       	ldi	r25, 0x04	; 4
    708a:	89 9f       	mul	r24, r25
    708c:	a0 0d       	add	r26, r0
    708e:	b1 1d       	adc	r27, r1
    7090:	11 24       	eor	r1, r1
    7092:	1d 92       	st	X+, r1
    7094:	1d 92       	st	X+, r1
    7096:	1d 92       	st	X+, r1
    7098:	1c 92       	st	X, r1
    709a:	13 97       	sbiw	r26, 0x03	; 3
    709c:	8f 5f       	subi	r24, 0xFF	; 255
    709e:	92 81       	ldd	r25, Z+2	; 0x02
    70a0:	89 17       	cp	r24, r25
    70a2:	80 f3       	brcs	.-32     	; 0x7084 <_ZN11AverageListIVlE5resetEv+0xa>
		}
    70a4:	08 95       	ret

000070a6 <_ZN4WindC1EP14FreeBoardModel>:
rval dirStorage[MAX_NUMBER_OF_READINGS] = {0.0};

AverageList<val> speedList = AverageList<val>( speedStorage, MAX_NUMBER_OF_READINGS );
AverageList<rval> dirList = AverageList<rval>( dirStorage, MAX_NUMBER_OF_READINGS );

Wind::Wind( FreeBoardModel* model) {
    70a6:	cf 93       	push	r28
    70a8:	df 93       	push	r29
    70aa:	eb 01       	movw	r28, r22
	this->model=model;
    70ac:	fc 01       	movw	r30, r24
    70ae:	71 83       	std	Z+1, r23	; 0x01
    70b0:	60 83       	st	Z, r22
	//initialise the wind interrupt
	//analogReference(INTERNAL); //ref to about 1.1V
	windSpeedDur=0;
    70b2:	10 92 af 10 	sts	0x10AF, r1
    70b6:	10 92 b0 10 	sts	0x10B0, r1
    70ba:	10 92 b1 10 	sts	0x10B1, r1
    70be:	10 92 b2 10 	sts	0x10B2, r1
	windSpeedMicros=micros();
    70c2:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <micros>
    70c6:	60 93 a7 10 	sts	0x10A7, r22
    70ca:	70 93 a8 10 	sts	0x10A8, r23
    70ce:	80 93 a9 10 	sts	0x10A9, r24
    70d2:	90 93 aa 10 	sts	0x10AA, r25
	windDirDur=0;
    70d6:	10 92 a3 10 	sts	0x10A3, r1
    70da:	10 92 a4 10 	sts	0x10A4, r1
    70de:	10 92 a5 10 	sts	0x10A5, r1
    70e2:	10 92 a6 10 	sts	0x10A6, r1
	windSpeedFlag=true;
    70e6:	81 e0       	ldi	r24, 0x01	; 1
    70e8:	80 93 a2 10 	sts	0x10A2, r24
	windDirFlag=false;
    70ec:	10 92 a1 10 	sts	0x10A1, r1
	speedList.reset();
    70f0:	84 e8       	ldi	r24, 0x84	; 132
    70f2:	90 e1       	ldi	r25, 0x10	; 16
    70f4:	0e 94 3d 38 	call	0x707a	; 0x707a <_ZN11AverageListIVlE5resetEv>
			return min;
		}
		
		//reset the AverageList
		void reset(){ 
			currentSize = 0; 
    70f8:	10 92 82 10 	sts	0x1082, r1
			currentIndex = 0;
    70fc:	10 92 83 10 	sts	0x1083, r1
			for (byte i=0; i<size; i++){ values[i]=0; }
    7100:	80 91 7f 10 	lds	r24, 0x107F
    7104:	90 91 80 10 	lds	r25, 0x1080
    7108:	20 e0       	ldi	r18, 0x00	; 0
    710a:	0b c0       	rjmp	.+22     	; 0x7122 <_ZN4WindC1EP14FreeBoardModel+0x7c>
    710c:	fc 01       	movw	r30, r24
    710e:	34 e0       	ldi	r19, 0x04	; 4
    7110:	23 9f       	mul	r18, r19
    7112:	e0 0d       	add	r30, r0
    7114:	f1 1d       	adc	r31, r1
    7116:	11 24       	eor	r1, r1
    7118:	10 82       	st	Z, r1
    711a:	11 82       	std	Z+1, r1	; 0x01
    711c:	12 82       	std	Z+2, r1	; 0x02
    711e:	13 82       	std	Z+3, r1	; 0x03
    7120:	2f 5f       	subi	r18, 0xFF	; 255
    7122:	30 91 81 10 	lds	r19, 0x1081
    7126:	23 17       	cp	r18, r19
    7128:	88 f3       	brcs	.-30     	; 0x710c <_ZN4WindC1EP14FreeBoardModel+0x66>
	dirList.reset();

	// read the last wind alarm values
	if (model->getWindAlarmSpeed() > 99) {
    712a:	ce 01       	movw	r24, r28
    712c:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <_ZN14FreeBoardModel17getWindAlarmSpeedEv>
    7130:	84 36       	cpi	r24, 0x64	; 100
    7132:	91 05       	cpc	r25, r1
    7134:	3c f0       	brlt	.+14     	; 0x7144 <_ZN4WindC1EP14FreeBoardModel+0x9e>
		model->setWindAlarmSpeed(99);
    7136:	63 e6       	ldi	r22, 0x63	; 99
    7138:	70 e0       	ldi	r23, 0x00	; 0
    713a:	ce 01       	movw	r24, r28
	}

}
    713c:	df 91       	pop	r29
    713e:	cf 91       	pop	r28
	speedList.reset();
	dirList.reset();

	// read the last wind alarm values
	if (model->getWindAlarmSpeed() > 99) {
		model->setWindAlarmSpeed(99);
    7140:	0c 94 ee 2e 	jmp	0x5ddc	; 0x5ddc <_ZN14FreeBoardModel17setWindAlarmSpeedEi>
	}

}
    7144:	df 91       	pop	r29
    7146:	cf 91       	pop	r28
    7148:	08 95       	ret

0000714a <_ZN11AverageListIVlE15getTotalAverageEv>:
			return degrees(atan2(y, x));

		}

		//return the average of the entire AverageList, even though all values might not be initialized
		datatype getTotalAverage(){
    714a:	cf 92       	push	r12
    714c:	df 92       	push	r13
    714e:	ef 92       	push	r14
    7150:	ff 92       	push	r15
    7152:	0f 93       	push	r16
    7154:	1f 93       	push	r17
    7156:	cf 93       	push	r28
    7158:	df 93       	push	r29
    715a:	00 d0       	rcall	.+0      	; 0x715c <_ZN11AverageListIVlE15getTotalAverageEv+0x12>
    715c:	00 d0       	rcall	.+0      	; 0x715e <_ZN11AverageListIVlE15getTotalAverageEv+0x14>
    715e:	cd b7       	in	r28, 0x3d	; 61
    7160:	de b7       	in	r29, 0x3e	; 62
			datatype buffer = 0;
    7162:	19 82       	std	Y+1, r1	; 0x01
    7164:	1a 82       	std	Y+2, r1	; 0x02
    7166:	1b 82       	std	Y+3, r1	; 0x03
    7168:	1c 82       	std	Y+4, r1	; 0x04
			for (byte i=0; i<size; i++){ buffer += values[i]; }
    716a:	dc 01       	movw	r26, r24
    716c:	12 96       	adiw	r26, 0x02	; 2
    716e:	5c 91       	ld	r21, X
    7170:	60 e0       	ldi	r22, 0x00	; 0
    7172:	70 e0       	ldi	r23, 0x00	; 0
    7174:	40 e0       	ldi	r20, 0x00	; 0
    7176:	18 c0       	rjmp	.+48     	; 0x71a8 <_ZN11AverageListIVlE15getTotalAverageEv+0x5e>
    7178:	dc 01       	movw	r26, r24
    717a:	ed 91       	ld	r30, X+
    717c:	fc 91       	ld	r31, X
    717e:	e6 0f       	add	r30, r22
    7180:	f7 1f       	adc	r31, r23
    7182:	c0 80       	ld	r12, Z
    7184:	d1 80       	ldd	r13, Z+1	; 0x01
    7186:	e2 80       	ldd	r14, Z+2	; 0x02
    7188:	f3 80       	ldd	r15, Z+3	; 0x03
    718a:	09 81       	ldd	r16, Y+1	; 0x01
    718c:	1a 81       	ldd	r17, Y+2	; 0x02
    718e:	2b 81       	ldd	r18, Y+3	; 0x03
    7190:	3c 81       	ldd	r19, Y+4	; 0x04
    7192:	0c 0d       	add	r16, r12
    7194:	1d 1d       	adc	r17, r13
    7196:	2e 1d       	adc	r18, r14
    7198:	3f 1d       	adc	r19, r15
    719a:	09 83       	std	Y+1, r16	; 0x01
    719c:	1a 83       	std	Y+2, r17	; 0x02
    719e:	2b 83       	std	Y+3, r18	; 0x03
    71a0:	3c 83       	std	Y+4, r19	; 0x04
    71a2:	4f 5f       	subi	r20, 0xFF	; 255
    71a4:	6c 5f       	subi	r22, 0xFC	; 252
    71a6:	7f 4f       	sbci	r23, 0xFF	; 255
    71a8:	45 13       	cpse	r20, r21
    71aa:	e6 cf       	rjmp	.-52     	; 0x7178 <_ZN11AverageListIVlE15getTotalAverageEv+0x2e>
			buffer /= size;
    71ac:	69 81       	ldd	r22, Y+1	; 0x01
    71ae:	7a 81       	ldd	r23, Y+2	; 0x02
    71b0:	8b 81       	ldd	r24, Y+3	; 0x03
    71b2:	9c 81       	ldd	r25, Y+4	; 0x04
    71b4:	24 2f       	mov	r18, r20
    71b6:	30 e0       	ldi	r19, 0x00	; 0
    71b8:	40 e0       	ldi	r20, 0x00	; 0
    71ba:	50 e0       	ldi	r21, 0x00	; 0
    71bc:	0e 94 75 40 	call	0x80ea	; 0x80ea <__divmodsi4>
    71c0:	29 83       	std	Y+1, r18	; 0x01
    71c2:	3a 83       	std	Y+2, r19	; 0x02
    71c4:	4b 83       	std	Y+3, r20	; 0x03
    71c6:	5c 83       	std	Y+4, r21	; 0x04
			return buffer;
    71c8:	09 81       	ldd	r16, Y+1	; 0x01
    71ca:	1a 81       	ldd	r17, Y+2	; 0x02
    71cc:	2b 81       	ldd	r18, Y+3	; 0x03
    71ce:	3c 81       	ldd	r19, Y+4	; 0x04
		}
    71d0:	b8 01       	movw	r22, r16
    71d2:	c9 01       	movw	r24, r18
    71d4:	0f 90       	pop	r0
    71d6:	0f 90       	pop	r0
    71d8:	0f 90       	pop	r0
    71da:	0f 90       	pop	r0
    71dc:	df 91       	pop	r29
    71de:	cf 91       	pop	r28
    71e0:	1f 91       	pop	r17
    71e2:	0f 91       	pop	r16
    71e4:	ff 90       	pop	r15
    71e6:	ef 90       	pop	r14
    71e8:	df 90       	pop	r13
    71ea:	cf 90       	pop	r12
    71ec:	08 95       	ret

000071ee <_ZN4Wind12calcWindDataEv>:
}

/*
 * Calculates wind data. Direction is apparent, 0-360 deg off the bow, clockwise, in degrees.
 */
void Wind::calcWindData() {
    71ee:	2f 92       	push	r2
    71f0:	3f 92       	push	r3
    71f2:	4f 92       	push	r4
    71f4:	5f 92       	push	r5
    71f6:	6f 92       	push	r6
    71f8:	7f 92       	push	r7
    71fa:	8f 92       	push	r8
    71fc:	9f 92       	push	r9
    71fe:	af 92       	push	r10
    7200:	bf 92       	push	r11
    7202:	cf 92       	push	r12
    7204:	df 92       	push	r13
    7206:	ef 92       	push	r14
    7208:	ff 92       	push	r15
    720a:	0f 93       	push	r16
    720c:	1f 93       	push	r17
    720e:	cf 93       	push	r28
    7210:	df 93       	push	r29
    7212:	1c 01       	movw	r2, r24
		//Serial.print(dirList.getTotalAverage());
		//Serial.print(", WindDirDur:");
		//Serial.println(windSpeedMicros);


		model->setWindLastUpdate(millis());
    7214:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    7218:	ab 01       	movw	r20, r22
    721a:	bc 01       	movw	r22, r24
    721c:	f1 01       	movw	r30, r2
    721e:	80 81       	ld	r24, Z
    7220:	91 81       	ldd	r25, Z+1	; 0x01
    7222:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <_ZN14FreeBoardModel17setWindLastUpdateEm>
						Serial.print(dirList.getTotalAverage());
						Serial.print(", Wind speed:");
						Serial.println(speedList.getTotalAverage());
					}*/
		//convert to windAverage
		if(millis()-lastPulse>3000){
    7226:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    722a:	00 91 b3 10 	lds	r16, 0x10B3
    722e:	10 91 b4 10 	lds	r17, 0x10B4
    7232:	20 91 b5 10 	lds	r18, 0x10B5
    7236:	30 91 b6 10 	lds	r19, 0x10B6
    723a:	60 1b       	sub	r22, r16
    723c:	71 0b       	sbc	r23, r17
    723e:	82 0b       	sbc	r24, r18
    7240:	93 0b       	sbc	r25, r19
    7242:	69 3b       	cpi	r22, 0xB9	; 185
    7244:	7b 40       	sbci	r23, 0x0B	; 11
    7246:	81 05       	cpc	r24, r1
    7248:	91 05       	cpc	r25, r1
    724a:	68 f0       	brcs	.+26     	; 0x7266 <_ZN4Wind12calcWindDataEv+0x78>
			//no rotation, no wind
			model->setWindAverage(0);
    724c:	40 e0       	ldi	r20, 0x00	; 0
    724e:	50 e0       	ldi	r21, 0x00	; 0
    7250:	ba 01       	movw	r22, r20
    7252:	f1 01       	movw	r30, r2
    7254:	80 81       	ld	r24, Z
    7256:	91 81       	ldd	r25, Z+1	; 0x01
    7258:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <_ZN14FreeBoardModel14setWindAverageEf>
			//Serial.println("Wind speed reset");
			speedList.reset();
    725c:	84 e8       	ldi	r24, 0x84	; 132
    725e:	90 e1       	ldi	r25, 0x10	; 16
    7260:	0e 94 3d 38 	call	0x707a	; 0x707a <_ZN11AverageListIVlE5resetEv>
    7264:	b7 c1       	rjmp	.+878    	; 0x75d4 <_ZN4Wind12calcWindDataEv+0x3e6>
		}else{
			if(speedList.getTotalAverage()>0){
    7266:	84 e8       	ldi	r24, 0x84	; 132
    7268:	90 e1       	ldi	r25, 0x10	; 16
    726a:	0e 94 a5 38 	call	0x714a	; 0x714a <_ZN11AverageListIVlE15getTotalAverageEv>
    726e:	16 16       	cp	r1, r22
    7270:	17 06       	cpc	r1, r23
    7272:	18 06       	cpc	r1, r24
    7274:	19 06       	cpc	r1, r25
    7276:	0c f0       	brlt	.+2      	; 0x727a <_ZN4Wind12calcWindDataEv+0x8c>
    7278:	f9 c0       	rjmp	.+498    	; 0x746c <_ZN4Wind12calcWindDataEv+0x27e>
				windSpeedRpm=1000000.0/speedList.getTotalAverage();
    727a:	84 e8       	ldi	r24, 0x84	; 132
    727c:	90 e1       	ldi	r25, 0x10	; 16
    727e:	0e 94 a5 38 	call	0x714a	; 0x714a <_ZN11AverageListIVlE15getTotalAverageEv>
    7282:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__floatsisf>
    7286:	9b 01       	movw	r18, r22
    7288:	ac 01       	movw	r20, r24
    728a:	60 e0       	ldi	r22, 0x00	; 0
    728c:	74 e2       	ldi	r23, 0x24	; 36
    728e:	84 e7       	ldi	r24, 0x74	; 116
    7290:	99 e4       	ldi	r25, 0x49	; 73
    7292:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__divsf3>
    7296:	ab 01       	movw	r20, r22
    7298:	bc 01       	movw	r22, r24
    729a:	40 93 ab 10 	sts	0x10AB, r20
    729e:	50 93 ac 10 	sts	0x10AC, r21
    72a2:	60 93 ad 10 	sts	0x10AD, r22
    72a6:	70 93 ae 10 	sts	0x10AE, r23
				//convert to KNTS
				if(windSpeedRpm<3.229){
    72aa:	60 91 ab 10 	lds	r22, 0x10AB
    72ae:	70 91 ac 10 	lds	r23, 0x10AC
    72b2:	80 91 ad 10 	lds	r24, 0x10AD
    72b6:	90 91 ae 10 	lds	r25, 0x10AE
    72ba:	20 ef       	ldi	r18, 0xF0	; 240
    72bc:	37 ea       	ldi	r19, 0xA7	; 167
    72be:	4e e4       	ldi	r20, 0x4E	; 78
    72c0:	50 e4       	ldi	r21, 0x40	; 64
    72c2:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    72c6:	f1 01       	movw	r30, r2
    72c8:	c0 81       	ld	r28, Z
    72ca:	d1 81       	ldd	r29, Z+1	; 0x01
    72cc:	87 ff       	sbrs	r24, 7
    72ce:	3c c0       	rjmp	.+120    	; 0x7348 <_ZN4Wind12calcWindDataEv+0x15a>
					model->setWindAverage(model->getWindFactor() *( -0.09515*(windSpeedRpm*windSpeedRpm) + 2.5476*(windSpeedRpm) - 0.1226));
    72d0:	ce 01       	movw	r24, r28
    72d2:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <_ZN14FreeBoardModel13getWindFactorEv>
    72d6:	6b 01       	movw	r12, r22
    72d8:	7c 01       	movw	r14, r24
    72da:	60 91 ab 10 	lds	r22, 0x10AB
    72de:	70 91 ac 10 	lds	r23, 0x10AC
    72e2:	80 91 ad 10 	lds	r24, 0x10AD
    72e6:	90 91 ae 10 	lds	r25, 0x10AE
    72ea:	20 91 ab 10 	lds	r18, 0x10AB
    72ee:	30 91 ac 10 	lds	r19, 0x10AC
    72f2:	40 91 ad 10 	lds	r20, 0x10AD
    72f6:	50 91 ae 10 	lds	r21, 0x10AE
    72fa:	40 90 ab 10 	lds	r4, 0x10AB
    72fe:	50 90 ac 10 	lds	r5, 0x10AC
    7302:	60 90 ad 10 	lds	r6, 0x10AD
    7306:	70 90 ae 10 	lds	r7, 0x10AE
    730a:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    730e:	21 e0       	ldi	r18, 0x01	; 1
    7310:	3e ed       	ldi	r19, 0xDE	; 222
    7312:	42 ec       	ldi	r20, 0xC2	; 194
    7314:	5d eb       	ldi	r21, 0xBD	; 189
    7316:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    731a:	4b 01       	movw	r8, r22
    731c:	5c 01       	movw	r10, r24
    731e:	21 ee       	ldi	r18, 0xE1	; 225
    7320:	3b e0       	ldi	r19, 0x0B	; 11
    7322:	43 e2       	ldi	r20, 0x23	; 35
    7324:	50 e4       	ldi	r21, 0x40	; 64
    7326:	c3 01       	movw	r24, r6
    7328:	b2 01       	movw	r22, r4
    732a:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    732e:	9b 01       	movw	r18, r22
    7330:	ac 01       	movw	r20, r24
    7332:	c5 01       	movw	r24, r10
    7334:	b4 01       	movw	r22, r8
    7336:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    733a:	25 eb       	ldi	r18, 0xB5	; 181
    733c:	35 e1       	ldi	r19, 0x15	; 21
    733e:	4b ef       	ldi	r20, 0xFB	; 251
    7340:	5d e3       	ldi	r21, 0x3D	; 61
    7342:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    7346:	85 c0       	rjmp	.+266    	; 0x7452 <_ZN4Wind12calcWindDataEv+0x264>
				}else if(windSpeedRpm < 54.362){
    7348:	60 91 ab 10 	lds	r22, 0x10AB
    734c:	70 91 ac 10 	lds	r23, 0x10AC
    7350:	80 91 ad 10 	lds	r24, 0x10AD
    7354:	90 91 ae 10 	lds	r25, 0x10AE
    7358:	20 eb       	ldi	r18, 0xB0	; 176
    735a:	32 e7       	ldi	r19, 0x72	; 114
    735c:	49 e5       	ldi	r20, 0x59	; 89
    735e:	52 e4       	ldi	r21, 0x42	; 66
    7360:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    7364:	87 ff       	sbrs	r24, 7
    7366:	3a c0       	rjmp	.+116    	; 0x73dc <_ZN4Wind12calcWindDataEv+0x1ee>
					model->setWindAverage(model->getWindFactor() *(0.0045*(windSpeedRpm*windSpeedRpm) + 1.9099*(windSpeedRpm) + 0.9638));
    7368:	ce 01       	movw	r24, r28
    736a:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <_ZN14FreeBoardModel13getWindFactorEv>
    736e:	6b 01       	movw	r12, r22
    7370:	7c 01       	movw	r14, r24
    7372:	60 91 ab 10 	lds	r22, 0x10AB
    7376:	70 91 ac 10 	lds	r23, 0x10AC
    737a:	80 91 ad 10 	lds	r24, 0x10AD
    737e:	90 91 ae 10 	lds	r25, 0x10AE
    7382:	20 91 ab 10 	lds	r18, 0x10AB
    7386:	30 91 ac 10 	lds	r19, 0x10AC
    738a:	40 91 ad 10 	lds	r20, 0x10AD
    738e:	50 91 ae 10 	lds	r21, 0x10AE
    7392:	40 90 ab 10 	lds	r4, 0x10AB
    7396:	50 90 ac 10 	lds	r5, 0x10AC
    739a:	60 90 ad 10 	lds	r6, 0x10AD
    739e:	70 90 ae 10 	lds	r7, 0x10AE
    73a2:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    73a6:	2c eb       	ldi	r18, 0xBC	; 188
    73a8:	34 e7       	ldi	r19, 0x74	; 116
    73aa:	43 e9       	ldi	r20, 0x93	; 147
    73ac:	5b e3       	ldi	r21, 0x3B	; 59
    73ae:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    73b2:	4b 01       	movw	r8, r22
    73b4:	5c 01       	movw	r10, r24
    73b6:	2a e9       	ldi	r18, 0x9A	; 154
    73b8:	37 e7       	ldi	r19, 0x77	; 119
    73ba:	44 ef       	ldi	r20, 0xF4	; 244
    73bc:	5f e3       	ldi	r21, 0x3F	; 63
    73be:	c3 01       	movw	r24, r6
    73c0:	b2 01       	movw	r22, r4
    73c2:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    73c6:	9b 01       	movw	r18, r22
    73c8:	ac 01       	movw	r20, r24
    73ca:	c5 01       	movw	r24, r10
    73cc:	b4 01       	movw	r22, r8
    73ce:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    73d2:	29 e9       	ldi	r18, 0x99	; 153
    73d4:	3b eb       	ldi	r19, 0xBB	; 187
    73d6:	46 e7       	ldi	r20, 0x76	; 118
    73d8:	5f e3       	ldi	r21, 0x3F	; 63
    73da:	39 c0       	rjmp	.+114    	; 0x744e <_ZN4Wind12calcWindDataEv+0x260>
				}else{
					model->setWindAverage(model->getWindFactor() *(0.09593*(windSpeedRpm*windSpeedRpm) - 8.3147*(windSpeedRpm) + 286.65));
    73dc:	ce 01       	movw	r24, r28
    73de:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <_ZN14FreeBoardModel13getWindFactorEv>
    73e2:	6b 01       	movw	r12, r22
    73e4:	7c 01       	movw	r14, r24
    73e6:	60 91 ab 10 	lds	r22, 0x10AB
    73ea:	70 91 ac 10 	lds	r23, 0x10AC
    73ee:	80 91 ad 10 	lds	r24, 0x10AD
    73f2:	90 91 ae 10 	lds	r25, 0x10AE
    73f6:	20 91 ab 10 	lds	r18, 0x10AB
    73fa:	30 91 ac 10 	lds	r19, 0x10AC
    73fe:	40 91 ad 10 	lds	r20, 0x10AD
    7402:	50 91 ae 10 	lds	r21, 0x10AE
    7406:	40 90 ab 10 	lds	r4, 0x10AB
    740a:	50 90 ac 10 	lds	r5, 0x10AC
    740e:	60 90 ad 10 	lds	r6, 0x10AD
    7412:	70 90 ae 10 	lds	r7, 0x10AE
    7416:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    741a:	23 ef       	ldi	r18, 0xF3	; 243
    741c:	36 e7       	ldi	r19, 0x76	; 118
    741e:	44 ec       	ldi	r20, 0xC4	; 196
    7420:	5d e3       	ldi	r21, 0x3D	; 61
    7422:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    7426:	4b 01       	movw	r8, r22
    7428:	5c 01       	movw	r10, r24
    742a:	23 e0       	ldi	r18, 0x03	; 3
    742c:	39 e0       	ldi	r19, 0x09	; 9
    742e:	45 e0       	ldi	r20, 0x05	; 5
    7430:	51 e4       	ldi	r21, 0x41	; 65
    7432:	c3 01       	movw	r24, r6
    7434:	b2 01       	movw	r22, r4
    7436:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    743a:	9b 01       	movw	r18, r22
    743c:	ac 01       	movw	r20, r24
    743e:	c5 01       	movw	r24, r10
    7440:	b4 01       	movw	r22, r8
    7442:	0e 94 89 3c 	call	0x7912	; 0x7912 <__subsf3>
    7446:	23 e3       	ldi	r18, 0x33	; 51
    7448:	33 e5       	ldi	r19, 0x53	; 83
    744a:	4f e8       	ldi	r20, 0x8F	; 143
    744c:	53 e4       	ldi	r21, 0x43	; 67
    744e:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    7452:	9b 01       	movw	r18, r22
    7454:	ac 01       	movw	r20, r24
    7456:	c7 01       	movw	r24, r14
    7458:	b6 01       	movw	r22, r12
    745a:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    745e:	ab 01       	movw	r20, r22
    7460:	bc 01       	movw	r22, r24
    7462:	f1 01       	movw	r30, r2
    7464:	80 81       	ld	r24, Z
    7466:	91 81       	ldd	r25, Z+1	; 0x01
    7468:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <_ZN14FreeBoardModel14setWindAverageEf>
				}
				//Serial.print(", WindAvg:");
				//		Serial.println(( -0.09515*(windSpeedRpm*windSpeedRpm) + 2.5476*(windSpeedRpm) - 0.1226));
			}
			//update gusts
			if (model->getWindAverage() > model->getWindMax())
    746c:	f1 01       	movw	r30, r2
    746e:	80 81       	ld	r24, Z
    7470:	91 81       	ldd	r25, Z+1	; 0x01
    7472:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <_ZN14FreeBoardModel14getWindAverageEv>
    7476:	6b 01       	movw	r12, r22
    7478:	7c 01       	movw	r14, r24
    747a:	f1 01       	movw	r30, r2
    747c:	80 81       	ld	r24, Z
    747e:	91 81       	ldd	r25, Z+1	; 0x01
    7480:	0e 94 e1 2d 	call	0x5bc2	; 0x5bc2 <_ZN14FreeBoardModel10getWindMaxEv>
    7484:	bc 01       	movw	r22, r24
    7486:	88 27       	eor	r24, r24
    7488:	77 fd       	sbrc	r23, 7
    748a:	80 95       	com	r24
    748c:	98 2f       	mov	r25, r24
    748e:	0e 94 f2 3d 	call	0x7be4	; 0x7be4 <__floatsisf>
    7492:	9b 01       	movw	r18, r22
    7494:	ac 01       	movw	r20, r24
    7496:	c7 01       	movw	r24, r14
    7498:	b6 01       	movw	r22, r12
    749a:	0e 94 53 3f 	call	0x7ea6	; 0x7ea6 <__gesf2>
    749e:	18 16       	cp	r1, r24
    74a0:	64 f4       	brge	.+24     	; 0x74ba <_ZN4Wind12calcWindDataEv+0x2cc>
				model->setWindMax(model->getWindAverage());
    74a2:	f1 01       	movw	r30, r2
    74a4:	80 81       	ld	r24, Z
    74a6:	91 81       	ldd	r25, Z+1	; 0x01
    74a8:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <_ZN14FreeBoardModel14getWindAverageEv>
    74ac:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <__fixsfsi>
    74b0:	f1 01       	movw	r30, r2
    74b2:	80 81       	ld	r24, Z
    74b4:	91 81       	ldd	r25, Z+1	; 0x01
    74b6:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <_ZN14FreeBoardModel10setWindMaxEi>
		 */
		datatype getRotationalAverage(){
			float x = 0;
			float y = 0;
			float angle=0;
			for (byte i=0; i<currentSize; i++){
    74ba:	a0 90 82 10 	lds	r10, 0x1082
    74be:	40 90 7f 10 	lds	r4, 0x107F
    74c2:	50 90 80 10 	lds	r5, 0x1080
    74c6:	b1 2c       	mov	r11, r1
		 * return the average of all circular (0-360) values in DEGREES added with an addRotationalValue call
		 * Range is 0-360 DEGREES
		 */
		datatype getRotationalAverage(){
			float x = 0;
			float y = 0;
    74c8:	00 e0       	ldi	r16, 0x00	; 0
    74ca:	10 e0       	ldi	r17, 0x00	; 0
    74cc:	d0 e0       	ldi	r29, 0x00	; 0
    74ce:	c0 e0       	ldi	r28, 0x00	; 0
		/*
		 * return the average of all circular (0-360) values in DEGREES added with an addRotationalValue call
		 * Range is 0-360 DEGREES
		 */
		datatype getRotationalAverage(){
			float x = 0;
    74d0:	c1 2c       	mov	r12, r1
    74d2:	d1 2c       	mov	r13, r1
    74d4:	e1 2c       	mov	r14, r1
    74d6:	f1 2c       	mov	r15, r1
    74d8:	2f c0       	rjmp	.+94     	; 0x7538 <_ZN4Wind12calcWindDataEv+0x34a>
			float y = 0;
			float angle=0;
			for (byte i=0; i<currentSize; i++){
				angle=2*PI*values[i];
    74da:	f2 01       	movw	r30, r4
    74dc:	61 91       	ld	r22, Z+
    74de:	71 91       	ld	r23, Z+
    74e0:	81 91       	ld	r24, Z+
    74e2:	91 91       	ld	r25, Z+
    74e4:	2f 01       	movw	r4, r30
    74e6:	2b ed       	ldi	r18, 0xDB	; 219
    74e8:	3f e0       	ldi	r19, 0x0F	; 15
    74ea:	49 ec       	ldi	r20, 0xC9	; 201
    74ec:	50 e4       	ldi	r21, 0x40	; 64
    74ee:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    74f2:	3b 01       	movw	r6, r22
    74f4:	4c 01       	movw	r8, r24
			    x += cos(angle);
    74f6:	77 2d       	mov	r23, r7
    74f8:	99 2d       	mov	r25, r9
    74fa:	0e 94 54 3d 	call	0x7aa8	; 0x7aa8 <cos>
    74fe:	9b 01       	movw	r18, r22
    7500:	ac 01       	movw	r20, r24
    7502:	6c 2d       	mov	r22, r12
    7504:	7d 2d       	mov	r23, r13
    7506:	8e 2d       	mov	r24, r14
    7508:	9f 2d       	mov	r25, r15
    750a:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    750e:	6b 01       	movw	r12, r22
    7510:	7c 01       	movw	r14, r24
			    y += sin(angle);
    7512:	66 2d       	mov	r22, r6
    7514:	77 2d       	mov	r23, r7
    7516:	88 2d       	mov	r24, r8
    7518:	99 2d       	mov	r25, r9
    751a:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <sin>
    751e:	9b 01       	movw	r18, r22
    7520:	ac 01       	movw	r20, r24
    7522:	fe 01       	movw	r30, r28
    7524:	60 2f       	mov	r22, r16
    7526:	71 2f       	mov	r23, r17
    7528:	8f 2f       	mov	r24, r31
    752a:	9c 2f       	mov	r25, r28
    752c:	0e 94 8a 3c 	call	0x7914	; 0x7914 <__addsf3>
    7530:	8b 01       	movw	r16, r22
    7532:	d8 2f       	mov	r29, r24
    7534:	c9 2f       	mov	r28, r25
		 */
		datatype getRotationalAverage(){
			float x = 0;
			float y = 0;
			float angle=0;
			for (byte i=0; i<currentSize; i++){
    7536:	b3 94       	inc	r11
    7538:	ba 10       	cpse	r11, r10
    753a:	cf cf       	rjmp	.-98     	; 0x74da <_ZN4Wind12calcWindDataEv+0x2ec>
				angle=2*PI*values[i];
			    x += cos(angle);
			    y += sin(angle);
			}
			//TODO:watch out for zeros
			if(x==0.0f && y==0.0f){
    753c:	20 e0       	ldi	r18, 0x00	; 0
    753e:	30 e0       	ldi	r19, 0x00	; 0
    7540:	a9 01       	movw	r20, r18
    7542:	6c 2d       	mov	r22, r12
    7544:	7d 2d       	mov	r23, r13
    7546:	8e 2d       	mov	r24, r14
    7548:	9f 2d       	mov	r25, r15
    754a:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    754e:	81 11       	cpse	r24, r1
    7550:	0c c0       	rjmp	.+24     	; 0x756a <_ZN4Wind12calcWindDataEv+0x37c>
    7552:	20 e0       	ldi	r18, 0x00	; 0
    7554:	30 e0       	ldi	r19, 0x00	; 0
    7556:	a9 01       	movw	r20, r18
    7558:	fe 01       	movw	r30, r28
    755a:	60 2f       	mov	r22, r16
    755c:	71 2f       	mov	r23, r17
    755e:	8f 2f       	mov	r24, r31
    7560:	9c 2f       	mov	r25, r28
    7562:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    7566:	88 23       	and	r24, r24
    7568:	a1 f0       	breq	.+40     	; 0x7592 <_ZN4Wind12calcWindDataEv+0x3a4>
				return 0.0f;
			}
			return degrees(atan2(y, x));
    756a:	2c 2d       	mov	r18, r12
    756c:	3d 2d       	mov	r19, r13
    756e:	4e 2d       	mov	r20, r14
    7570:	5f 2d       	mov	r21, r15
    7572:	fe 01       	movw	r30, r28
    7574:	60 2f       	mov	r22, r16
    7576:	71 2f       	mov	r23, r17
    7578:	8f 2f       	mov	r24, r31
    757a:	9c 2f       	mov	r25, r28
    757c:	0e 94 fd 3c 	call	0x79fa	; 0x79fa <atan2>
    7580:	21 ee       	ldi	r18, 0xE1	; 225
    7582:	3e e2       	ldi	r19, 0x2E	; 46
    7584:	45 e6       	ldi	r20, 0x65	; 101
    7586:	52 e4       	ldi	r21, 0x42	; 66
    7588:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    758c:	7b 01       	movw	r14, r22
    758e:	8c 01       	movw	r16, r24
    7590:	04 c0       	rjmp	.+8      	; 0x759a <_ZN4Wind12calcWindDataEv+0x3ac>
			    x += cos(angle);
			    y += sin(angle);
			}
			//TODO:watch out for zeros
			if(x==0.0f && y==0.0f){
				return 0.0f;
    7592:	e1 2c       	mov	r14, r1
    7594:	f1 2c       	mov	r15, r1
    7596:	00 e0       	ldi	r16, 0x00	; 0
    7598:	10 e0       	ldi	r17, 0x00	; 0

			// calc direction, degrees clockwise
			//should round to int, min 1
			int dir = (int)dirList.getRotationalAverage();
			//limit to +-360, after adjust zero
			dir = (dir + model->getWindZeroOffset()) %360;
    759a:	f1 01       	movw	r30, r2
    759c:	80 81       	ld	r24, Z
    759e:	91 81       	ldd	r25, Z+1	; 0x01
    75a0:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <_ZN14FreeBoardModel17getWindZeroOffsetEv>
    75a4:	ec 01       	movw	r28, r24
				model->setWindMax(model->getWindAverage());


			// calc direction, degrees clockwise
			//should round to int, min 1
			int dir = (int)dirList.getRotationalAverage();
    75a6:	6e 2d       	mov	r22, r14
    75a8:	7f 2d       	mov	r23, r15
    75aa:	80 2f       	mov	r24, r16
    75ac:	91 2f       	mov	r25, r17
    75ae:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <__fixsfsi>
    75b2:	cb 01       	movw	r24, r22
			//limit to +-360, after adjust zero
			dir = (dir + model->getWindZeroOffset()) %360;
    75b4:	8c 0f       	add	r24, r28
    75b6:	9d 1f       	adc	r25, r29
    75b8:	68 e6       	ldi	r22, 0x68	; 104
    75ba:	71 e0       	ldi	r23, 0x01	; 1
    75bc:	0e 94 3f 40 	call	0x807e	; 0x807e <__divmodhi4>
			//if minus, then reverse to +ve
			if (dir<0){
    75c0:	97 ff       	sbrs	r25, 7
    75c2:	02 c0       	rjmp	.+4      	; 0x75c8 <_ZN4Wind12calcWindDataEv+0x3da>
				dir = 360+dir;
    75c4:	88 59       	subi	r24, 0x98	; 152
    75c6:	9e 4f       	sbci	r25, 0xFE	; 254
			}
			model->setWindApparentDir(dir);
    75c8:	bc 01       	movw	r22, r24
    75ca:	f1 01       	movw	r30, r2
    75cc:	80 81       	ld	r24, Z
    75ce:	91 81       	ldd	r25, Z+1	; 0x01
    75d0:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <_ZN14FreeBoardModel18setWindApparentDirEi>
		}
}
    75d4:	df 91       	pop	r29
    75d6:	cf 91       	pop	r28
    75d8:	1f 91       	pop	r17
    75da:	0f 91       	pop	r16
    75dc:	ff 90       	pop	r15
    75de:	ef 90       	pop	r14
    75e0:	df 90       	pop	r13
    75e2:	cf 90       	pop	r12
    75e4:	bf 90       	pop	r11
    75e6:	af 90       	pop	r10
    75e8:	9f 90       	pop	r9
    75ea:	8f 90       	pop	r8
    75ec:	7f 90       	pop	r7
    75ee:	6f 90       	pop	r6
    75f0:	5f 90       	pop	r5
    75f2:	4f 90       	pop	r4
    75f4:	3f 90       	pop	r3
    75f6:	2f 90       	pop	r2
    75f8:	08 95       	ret

000075fa <_GLOBAL__sub_I_lastPulse>:

template<typename datatype>
class AverageList {
	public:
		//<<constructor>>
		AverageList(datatype* storage, byte storageSize) : values(storage) , size(storageSize) { 
    75fa:	85 e9       	ldi	r24, 0x95	; 149
    75fc:	90 e1       	ldi	r25, 0x10	; 16
    75fe:	90 93 85 10 	sts	0x1085, r25
    7602:	80 93 84 10 	sts	0x1084, r24
    7606:	23 e0       	ldi	r18, 0x03	; 3
    7608:	20 93 86 10 	sts	0x1086, r18
			currentSize = 0; 
    760c:	10 92 87 10 	sts	0x1087, r1
			currentIndex = 0; 
    7610:	10 92 88 10 	sts	0x1088, r1

template<typename datatype>
class AverageList {
	public:
		//<<constructor>>
		AverageList(datatype* storage, byte storageSize) : values(storage) , size(storageSize) { 
    7614:	89 e8       	ldi	r24, 0x89	; 137
    7616:	90 e1       	ldi	r25, 0x10	; 16
    7618:	90 93 80 10 	sts	0x1080, r25
    761c:	80 93 7f 10 	sts	0x107F, r24
    7620:	20 93 81 10 	sts	0x1081, r18
			currentSize = 0; 
    7624:	10 92 82 10 	sts	0x1082, r1
			currentIndex = 0; 
    7628:	10 92 83 10 	sts	0x1083, r1
    762c:	08 95       	ret

0000762e <_Z10store_charhP11ring_buffer>:
    762e:	fb 01       	movw	r30, r22
    7630:	e0 5c       	subi	r30, 0xC0	; 192
    7632:	ff 4f       	sbci	r31, 0xFF	; 255
    7634:	20 81       	ld	r18, Z
    7636:	31 81       	ldd	r19, Z+1	; 0x01
    7638:	2f 5f       	subi	r18, 0xFF	; 255
    763a:	3f 4f       	sbci	r19, 0xFF	; 255
    763c:	2f 73       	andi	r18, 0x3F	; 63
    763e:	33 27       	eor	r19, r19
    7640:	db 01       	movw	r26, r22
    7642:	ae 5b       	subi	r26, 0xBE	; 190
    7644:	bf 4f       	sbci	r27, 0xFF	; 255
    7646:	4d 91       	ld	r20, X+
    7648:	5c 91       	ld	r21, X
    764a:	24 17       	cp	r18, r20
    764c:	35 07       	cpc	r19, r21
    764e:	39 f0       	breq	.+14     	; 0x765e <_Z10store_charhP11ring_buffer+0x30>
    7650:	a0 81       	ld	r26, Z
    7652:	b1 81       	ldd	r27, Z+1	; 0x01
    7654:	a6 0f       	add	r26, r22
    7656:	b7 1f       	adc	r27, r23
    7658:	8c 93       	st	X, r24
    765a:	31 83       	std	Z+1, r19	; 0x01
    765c:	20 83       	st	Z, r18
    765e:	08 95       	ret

00007660 <_GLOBAL__sub_I_rx_buffer>:
    7660:	cf 93       	push	r28
    7662:	10 92 bb 05 	sts	0x05BB, r1
    7666:	10 92 ba 05 	sts	0x05BA, r1
    766a:	88 ee       	ldi	r24, 0xE8	; 232
    766c:	93 e0       	ldi	r25, 0x03	; 3
    766e:	a0 e0       	ldi	r26, 0x00	; 0
    7670:	b0 e0       	ldi	r27, 0x00	; 0
    7672:	80 93 bc 05 	sts	0x05BC, r24
    7676:	90 93 bd 05 	sts	0x05BD, r25
    767a:	a0 93 be 05 	sts	0x05BE, r26
    767e:	b0 93 bf 05 	sts	0x05BF, r27
    7682:	28 e3       	ldi	r18, 0x38	; 56
    7684:	35 e0       	ldi	r19, 0x05	; 5
    7686:	30 93 b9 05 	sts	0x05B9, r19
    768a:	20 93 b8 05 	sts	0x05B8, r18
    768e:	46 eb       	ldi	r20, 0xB6	; 182
    7690:	57 e0       	ldi	r21, 0x07	; 7
    7692:	50 93 c5 05 	sts	0x05C5, r21
    7696:	40 93 c4 05 	sts	0x05C4, r20
    769a:	42 e7       	ldi	r20, 0x72	; 114
    769c:	57 e0       	ldi	r21, 0x07	; 7
    769e:	50 93 c7 05 	sts	0x05C7, r21
    76a2:	40 93 c6 05 	sts	0x05C6, r20
    76a6:	45 ec       	ldi	r20, 0xC5	; 197
    76a8:	50 e0       	ldi	r21, 0x00	; 0
    76aa:	50 93 c9 05 	sts	0x05C9, r21
    76ae:	40 93 c8 05 	sts	0x05C8, r20
    76b2:	44 ec       	ldi	r20, 0xC4	; 196
    76b4:	50 e0       	ldi	r21, 0x00	; 0
    76b6:	50 93 cb 05 	sts	0x05CB, r21
    76ba:	40 93 ca 05 	sts	0x05CA, r20
    76be:	40 ec       	ldi	r20, 0xC0	; 192
    76c0:	50 e0       	ldi	r21, 0x00	; 0
    76c2:	50 93 cd 05 	sts	0x05CD, r21
    76c6:	40 93 cc 05 	sts	0x05CC, r20
    76ca:	41 ec       	ldi	r20, 0xC1	; 193
    76cc:	50 e0       	ldi	r21, 0x00	; 0
    76ce:	50 93 cf 05 	sts	0x05CF, r21
    76d2:	40 93 ce 05 	sts	0x05CE, r20
    76d6:	42 ec       	ldi	r20, 0xC2	; 194
    76d8:	50 e0       	ldi	r21, 0x00	; 0
    76da:	50 93 d1 05 	sts	0x05D1, r21
    76de:	40 93 d0 05 	sts	0x05D0, r20
    76e2:	46 ec       	ldi	r20, 0xC6	; 198
    76e4:	50 e0       	ldi	r21, 0x00	; 0
    76e6:	50 93 d3 05 	sts	0x05D3, r21
    76ea:	40 93 d2 05 	sts	0x05D2, r20
    76ee:	c4 e0       	ldi	r28, 0x04	; 4
    76f0:	c0 93 d4 05 	sts	0x05D4, r28
    76f4:	f3 e0       	ldi	r31, 0x03	; 3
    76f6:	f0 93 d5 05 	sts	0x05D5, r31
    76fa:	e7 e0       	ldi	r30, 0x07	; 7
    76fc:	e0 93 d6 05 	sts	0x05D6, r30
    7700:	75 e0       	ldi	r23, 0x05	; 5
    7702:	70 93 d7 05 	sts	0x05D7, r23
    7706:	61 e0       	ldi	r22, 0x01	; 1
    7708:	60 93 d8 05 	sts	0x05D8, r22
    770c:	10 92 99 05 	sts	0x0599, r1
    7710:	10 92 98 05 	sts	0x0598, r1
    7714:	80 93 9a 05 	sts	0x059A, r24
    7718:	90 93 9b 05 	sts	0x059B, r25
    771c:	a0 93 9c 05 	sts	0x059C, r26
    7720:	b0 93 9d 05 	sts	0x059D, r27
    7724:	30 93 97 05 	sts	0x0597, r19
    7728:	20 93 96 05 	sts	0x0596, r18
    772c:	4e e2       	ldi	r20, 0x2E	; 46
    772e:	57 e0       	ldi	r21, 0x07	; 7
    7730:	50 93 a3 05 	sts	0x05A3, r21
    7734:	40 93 a2 05 	sts	0x05A2, r20
    7738:	4a ee       	ldi	r20, 0xEA	; 234
    773a:	56 e0       	ldi	r21, 0x06	; 6
    773c:	50 93 a5 05 	sts	0x05A5, r21
    7740:	40 93 a4 05 	sts	0x05A4, r20
    7744:	4d ec       	ldi	r20, 0xCD	; 205
    7746:	50 e0       	ldi	r21, 0x00	; 0
    7748:	50 93 a7 05 	sts	0x05A7, r21
    774c:	40 93 a6 05 	sts	0x05A6, r20
    7750:	4c ec       	ldi	r20, 0xCC	; 204
    7752:	50 e0       	ldi	r21, 0x00	; 0
    7754:	50 93 a9 05 	sts	0x05A9, r21
    7758:	40 93 a8 05 	sts	0x05A8, r20
    775c:	48 ec       	ldi	r20, 0xC8	; 200
    775e:	50 e0       	ldi	r21, 0x00	; 0
    7760:	50 93 ab 05 	sts	0x05AB, r21
    7764:	40 93 aa 05 	sts	0x05AA, r20
    7768:	49 ec       	ldi	r20, 0xC9	; 201
    776a:	50 e0       	ldi	r21, 0x00	; 0
    776c:	50 93 ad 05 	sts	0x05AD, r21
    7770:	40 93 ac 05 	sts	0x05AC, r20
    7774:	4a ec       	ldi	r20, 0xCA	; 202
    7776:	50 e0       	ldi	r21, 0x00	; 0
    7778:	50 93 af 05 	sts	0x05AF, r21
    777c:	40 93 ae 05 	sts	0x05AE, r20
    7780:	4e ec       	ldi	r20, 0xCE	; 206
    7782:	50 e0       	ldi	r21, 0x00	; 0
    7784:	50 93 b1 05 	sts	0x05B1, r21
    7788:	40 93 b0 05 	sts	0x05B0, r20
    778c:	c0 93 b2 05 	sts	0x05B2, r28
    7790:	f0 93 b3 05 	sts	0x05B3, r31
    7794:	e0 93 b4 05 	sts	0x05B4, r30
    7798:	70 93 b5 05 	sts	0x05B5, r23
    779c:	60 93 b6 05 	sts	0x05B6, r22
    77a0:	10 92 77 05 	sts	0x0577, r1
    77a4:	10 92 76 05 	sts	0x0576, r1
    77a8:	80 93 78 05 	sts	0x0578, r24
    77ac:	90 93 79 05 	sts	0x0579, r25
    77b0:	a0 93 7a 05 	sts	0x057A, r26
    77b4:	b0 93 7b 05 	sts	0x057B, r27
    77b8:	30 93 75 05 	sts	0x0575, r19
    77bc:	20 93 74 05 	sts	0x0574, r18
    77c0:	46 ea       	ldi	r20, 0xA6	; 166
    77c2:	56 e0       	ldi	r21, 0x06	; 6
    77c4:	50 93 81 05 	sts	0x0581, r21
    77c8:	40 93 80 05 	sts	0x0580, r20
    77cc:	42 e6       	ldi	r20, 0x62	; 98
    77ce:	56 e0       	ldi	r21, 0x06	; 6
    77d0:	50 93 83 05 	sts	0x0583, r21
    77d4:	40 93 82 05 	sts	0x0582, r20
    77d8:	45 ed       	ldi	r20, 0xD5	; 213
    77da:	50 e0       	ldi	r21, 0x00	; 0
    77dc:	50 93 85 05 	sts	0x0585, r21
    77e0:	40 93 84 05 	sts	0x0584, r20
    77e4:	44 ed       	ldi	r20, 0xD4	; 212
    77e6:	50 e0       	ldi	r21, 0x00	; 0
    77e8:	50 93 87 05 	sts	0x0587, r21
    77ec:	40 93 86 05 	sts	0x0586, r20
    77f0:	40 ed       	ldi	r20, 0xD0	; 208
    77f2:	50 e0       	ldi	r21, 0x00	; 0
    77f4:	50 93 89 05 	sts	0x0589, r21
    77f8:	40 93 88 05 	sts	0x0588, r20
    77fc:	41 ed       	ldi	r20, 0xD1	; 209
    77fe:	50 e0       	ldi	r21, 0x00	; 0
    7800:	50 93 8b 05 	sts	0x058B, r21
    7804:	40 93 8a 05 	sts	0x058A, r20
    7808:	42 ed       	ldi	r20, 0xD2	; 210
    780a:	50 e0       	ldi	r21, 0x00	; 0
    780c:	50 93 8d 05 	sts	0x058D, r21
    7810:	40 93 8c 05 	sts	0x058C, r20
    7814:	46 ed       	ldi	r20, 0xD6	; 214
    7816:	50 e0       	ldi	r21, 0x00	; 0
    7818:	50 93 8f 05 	sts	0x058F, r21
    781c:	40 93 8e 05 	sts	0x058E, r20
    7820:	c0 93 90 05 	sts	0x0590, r28
    7824:	f0 93 91 05 	sts	0x0591, r31
    7828:	e0 93 92 05 	sts	0x0592, r30
    782c:	70 93 93 05 	sts	0x0593, r23
    7830:	60 93 94 05 	sts	0x0594, r22
    7834:	10 92 55 05 	sts	0x0555, r1
    7838:	10 92 54 05 	sts	0x0554, r1
    783c:	80 93 56 05 	sts	0x0556, r24
    7840:	90 93 57 05 	sts	0x0557, r25
    7844:	a0 93 58 05 	sts	0x0558, r26
    7848:	b0 93 59 05 	sts	0x0559, r27
    784c:	30 93 53 05 	sts	0x0553, r19
    7850:	20 93 52 05 	sts	0x0552, r18
    7854:	8e e1       	ldi	r24, 0x1E	; 30
    7856:	96 e0       	ldi	r25, 0x06	; 6
    7858:	90 93 5f 05 	sts	0x055F, r25
    785c:	80 93 5e 05 	sts	0x055E, r24
    7860:	8a ed       	ldi	r24, 0xDA	; 218
    7862:	95 e0       	ldi	r25, 0x05	; 5
    7864:	90 93 61 05 	sts	0x0561, r25
    7868:	80 93 60 05 	sts	0x0560, r24
    786c:	85 e3       	ldi	r24, 0x35	; 53
    786e:	91 e0       	ldi	r25, 0x01	; 1
    7870:	90 93 63 05 	sts	0x0563, r25
    7874:	80 93 62 05 	sts	0x0562, r24
    7878:	84 e3       	ldi	r24, 0x34	; 52
    787a:	91 e0       	ldi	r25, 0x01	; 1
    787c:	90 93 65 05 	sts	0x0565, r25
    7880:	80 93 64 05 	sts	0x0564, r24
    7884:	80 e3       	ldi	r24, 0x30	; 48
    7886:	91 e0       	ldi	r25, 0x01	; 1
    7888:	90 93 67 05 	sts	0x0567, r25
    788c:	80 93 66 05 	sts	0x0566, r24
    7890:	81 e3       	ldi	r24, 0x31	; 49
    7892:	91 e0       	ldi	r25, 0x01	; 1
    7894:	90 93 69 05 	sts	0x0569, r25
    7898:	80 93 68 05 	sts	0x0568, r24
    789c:	82 e3       	ldi	r24, 0x32	; 50
    789e:	91 e0       	ldi	r25, 0x01	; 1
    78a0:	90 93 6b 05 	sts	0x056B, r25
    78a4:	80 93 6a 05 	sts	0x056A, r24
    78a8:	86 e3       	ldi	r24, 0x36	; 54
    78aa:	91 e0       	ldi	r25, 0x01	; 1
    78ac:	90 93 6d 05 	sts	0x056D, r25
    78b0:	80 93 6c 05 	sts	0x056C, r24
    78b4:	c0 93 6e 05 	sts	0x056E, r28
    78b8:	f0 93 6f 05 	sts	0x056F, r31
    78bc:	e0 93 70 05 	sts	0x0570, r30
    78c0:	70 93 71 05 	sts	0x0571, r23
    78c4:	60 93 72 05 	sts	0x0572, r22
    78c8:	cf 91       	pop	r28
    78ca:	08 95       	ret

000078cc <_ZN5Print5writeEPKc>:
    78cc:	61 15       	cp	r22, r1
    78ce:	71 05       	cpc	r23, r1
    78d0:	81 f0       	breq	.+32     	; 0x78f2 <_ZN5Print5writeEPKc+0x26>
    78d2:	db 01       	movw	r26, r22
    78d4:	0d 90       	ld	r0, X+
    78d6:	00 20       	and	r0, r0
    78d8:	e9 f7       	brne	.-6      	; 0x78d4 <_ZN5Print5writeEPKc+0x8>
    78da:	ad 01       	movw	r20, r26
    78dc:	41 50       	subi	r20, 0x01	; 1
    78de:	51 09       	sbc	r21, r1
    78e0:	46 1b       	sub	r20, r22
    78e2:	57 0b       	sbc	r21, r23
    78e4:	dc 01       	movw	r26, r24
    78e6:	ed 91       	ld	r30, X+
    78e8:	fc 91       	ld	r31, X
    78ea:	02 80       	ldd	r0, Z+2	; 0x02
    78ec:	f3 81       	ldd	r31, Z+3	; 0x03
    78ee:	e0 2d       	mov	r30, r0
    78f0:	09 94       	ijmp
    78f2:	80 e0       	ldi	r24, 0x00	; 0
    78f4:	90 e0       	ldi	r25, 0x00	; 0
    78f6:	08 95       	ret

000078f8 <main>:
    78f8:	0e 94 55 16 	call	0x2caa	; 0x2caa <init>
    78fc:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <setup>
    7900:	ca e3       	ldi	r28, 0x3A	; 58
    7902:	d3 e0       	ldi	r29, 0x03	; 3
    7904:	0e 94 59 30 	call	0x60b2	; 0x60b2 <loop>
    7908:	20 97       	sbiw	r28, 0x00	; 0
    790a:	e1 f3       	breq	.-8      	; 0x7904 <main+0xc>
    790c:	0e 94 3a 03 	call	0x674	; 0x674 <_Z14serialEventRunv>
    7910:	f9 cf       	rjmp	.-14     	; 0x7904 <main+0xc>

00007912 <__subsf3>:
    7912:	50 58       	subi	r21, 0x80	; 128

00007914 <__addsf3>:
    7914:	bb 27       	eor	r27, r27
    7916:	aa 27       	eor	r26, r26
    7918:	0e d0       	rcall	.+28     	; 0x7936 <__addsf3x>
    791a:	63 c2       	rjmp	.+1222   	; 0x7de2 <__fp_round>
    791c:	2c d2       	rcall	.+1112   	; 0x7d76 <__fp_pscA>
    791e:	30 f0       	brcs	.+12     	; 0x792c <__addsf3+0x18>
    7920:	31 d2       	rcall	.+1122   	; 0x7d84 <__fp_pscB>
    7922:	20 f0       	brcs	.+8      	; 0x792c <__addsf3+0x18>
    7924:	31 f4       	brne	.+12     	; 0x7932 <__addsf3+0x1e>
    7926:	9f 3f       	cpi	r25, 0xFF	; 255
    7928:	11 f4       	brne	.+4      	; 0x792e <__addsf3+0x1a>
    792a:	1e f4       	brtc	.+6      	; 0x7932 <__addsf3+0x1e>
    792c:	fc c1       	rjmp	.+1016   	; 0x7d26 <__fp_nan>
    792e:	0e f4       	brtc	.+2      	; 0x7932 <__addsf3+0x1e>
    7930:	e0 95       	com	r30
    7932:	e7 fb       	bst	r30, 7
    7934:	c9 c1       	rjmp	.+914    	; 0x7cc8 <__fp_inf>

00007936 <__addsf3x>:
    7936:	e9 2f       	mov	r30, r25
    7938:	76 d2       	rcall	.+1260   	; 0x7e26 <__fp_split3>
    793a:	80 f3       	brcs	.-32     	; 0x791c <__addsf3+0x8>
    793c:	ba 17       	cp	r27, r26
    793e:	62 07       	cpc	r22, r18
    7940:	73 07       	cpc	r23, r19
    7942:	84 07       	cpc	r24, r20
    7944:	95 07       	cpc	r25, r21
    7946:	18 f0       	brcs	.+6      	; 0x794e <__addsf3x+0x18>
    7948:	71 f4       	brne	.+28     	; 0x7966 <__addsf3x+0x30>
    794a:	9e f5       	brtc	.+102    	; 0x79b2 <__addsf3x+0x7c>
    794c:	a5 c2       	rjmp	.+1354   	; 0x7e98 <__fp_zero>
    794e:	0e f4       	brtc	.+2      	; 0x7952 <__addsf3x+0x1c>
    7950:	e0 95       	com	r30
    7952:	0b 2e       	mov	r0, r27
    7954:	ba 2f       	mov	r27, r26
    7956:	a0 2d       	mov	r26, r0
    7958:	0b 01       	movw	r0, r22
    795a:	b9 01       	movw	r22, r18
    795c:	90 01       	movw	r18, r0
    795e:	0c 01       	movw	r0, r24
    7960:	ca 01       	movw	r24, r20
    7962:	a0 01       	movw	r20, r0
    7964:	11 24       	eor	r1, r1
    7966:	ff 27       	eor	r31, r31
    7968:	59 1b       	sub	r21, r25
    796a:	99 f0       	breq	.+38     	; 0x7992 <__addsf3x+0x5c>
    796c:	59 3f       	cpi	r21, 0xF9	; 249
    796e:	50 f4       	brcc	.+20     	; 0x7984 <__addsf3x+0x4e>
    7970:	50 3e       	cpi	r21, 0xE0	; 224
    7972:	68 f1       	brcs	.+90     	; 0x79ce <__addsf3x+0x98>
    7974:	1a 16       	cp	r1, r26
    7976:	f0 40       	sbci	r31, 0x00	; 0
    7978:	a2 2f       	mov	r26, r18
    797a:	23 2f       	mov	r18, r19
    797c:	34 2f       	mov	r19, r20
    797e:	44 27       	eor	r20, r20
    7980:	58 5f       	subi	r21, 0xF8	; 248
    7982:	f3 cf       	rjmp	.-26     	; 0x796a <__addsf3x+0x34>
    7984:	46 95       	lsr	r20
    7986:	37 95       	ror	r19
    7988:	27 95       	ror	r18
    798a:	a7 95       	ror	r26
    798c:	f0 40       	sbci	r31, 0x00	; 0
    798e:	53 95       	inc	r21
    7990:	c9 f7       	brne	.-14     	; 0x7984 <__addsf3x+0x4e>
    7992:	7e f4       	brtc	.+30     	; 0x79b2 <__addsf3x+0x7c>
    7994:	1f 16       	cp	r1, r31
    7996:	ba 0b       	sbc	r27, r26
    7998:	62 0b       	sbc	r22, r18
    799a:	73 0b       	sbc	r23, r19
    799c:	84 0b       	sbc	r24, r20
    799e:	ba f0       	brmi	.+46     	; 0x79ce <__addsf3x+0x98>
    79a0:	91 50       	subi	r25, 0x01	; 1
    79a2:	a1 f0       	breq	.+40     	; 0x79cc <__addsf3x+0x96>
    79a4:	ff 0f       	add	r31, r31
    79a6:	bb 1f       	adc	r27, r27
    79a8:	66 1f       	adc	r22, r22
    79aa:	77 1f       	adc	r23, r23
    79ac:	88 1f       	adc	r24, r24
    79ae:	c2 f7       	brpl	.-16     	; 0x79a0 <__addsf3x+0x6a>
    79b0:	0e c0       	rjmp	.+28     	; 0x79ce <__addsf3x+0x98>
    79b2:	ba 0f       	add	r27, r26
    79b4:	62 1f       	adc	r22, r18
    79b6:	73 1f       	adc	r23, r19
    79b8:	84 1f       	adc	r24, r20
    79ba:	48 f4       	brcc	.+18     	; 0x79ce <__addsf3x+0x98>
    79bc:	87 95       	ror	r24
    79be:	77 95       	ror	r23
    79c0:	67 95       	ror	r22
    79c2:	b7 95       	ror	r27
    79c4:	f7 95       	ror	r31
    79c6:	9e 3f       	cpi	r25, 0xFE	; 254
    79c8:	08 f0       	brcs	.+2      	; 0x79cc <__addsf3x+0x96>
    79ca:	b3 cf       	rjmp	.-154    	; 0x7932 <__addsf3+0x1e>
    79cc:	93 95       	inc	r25
    79ce:	88 0f       	add	r24, r24
    79d0:	08 f0       	brcs	.+2      	; 0x79d4 <__addsf3x+0x9e>
    79d2:	99 27       	eor	r25, r25
    79d4:	ee 0f       	add	r30, r30
    79d6:	97 95       	ror	r25
    79d8:	87 95       	ror	r24
    79da:	08 95       	ret
    79dc:	cc d1       	rcall	.+920    	; 0x7d76 <__fp_pscA>
    79de:	58 f0       	brcs	.+22     	; 0x79f6 <__addsf3x+0xc0>
    79e0:	80 e8       	ldi	r24, 0x80	; 128
    79e2:	91 e0       	ldi	r25, 0x01	; 1
    79e4:	09 f4       	brne	.+2      	; 0x79e8 <__addsf3x+0xb2>
    79e6:	9e ef       	ldi	r25, 0xFE	; 254
    79e8:	cd d1       	rcall	.+922    	; 0x7d84 <__fp_pscB>
    79ea:	28 f0       	brcs	.+10     	; 0x79f6 <__addsf3x+0xc0>
    79ec:	40 e8       	ldi	r20, 0x80	; 128
    79ee:	51 e0       	ldi	r21, 0x01	; 1
    79f0:	59 f4       	brne	.+22     	; 0x7a08 <atan2+0xe>
    79f2:	5e ef       	ldi	r21, 0xFE	; 254
    79f4:	09 c0       	rjmp	.+18     	; 0x7a08 <atan2+0xe>
    79f6:	97 c1       	rjmp	.+814    	; 0x7d26 <__fp_nan>
    79f8:	4f c2       	rjmp	.+1182   	; 0x7e98 <__fp_zero>

000079fa <atan2>:
    79fa:	e9 2f       	mov	r30, r25
    79fc:	e0 78       	andi	r30, 0x80	; 128
    79fe:	13 d2       	rcall	.+1062   	; 0x7e26 <__fp_split3>
    7a00:	68 f3       	brcs	.-38     	; 0x79dc <__addsf3x+0xa6>
    7a02:	09 2e       	mov	r0, r25
    7a04:	05 2a       	or	r0, r21
    7a06:	c1 f3       	breq	.-16     	; 0x79f8 <__addsf3x+0xc2>
    7a08:	26 17       	cp	r18, r22
    7a0a:	37 07       	cpc	r19, r23
    7a0c:	48 07       	cpc	r20, r24
    7a0e:	59 07       	cpc	r21, r25
    7a10:	38 f0       	brcs	.+14     	; 0x7a20 <atan2+0x26>
    7a12:	0e 2e       	mov	r0, r30
    7a14:	07 f8       	bld	r0, 7
    7a16:	e0 25       	eor	r30, r0
    7a18:	69 f0       	breq	.+26     	; 0x7a34 <atan2+0x3a>
    7a1a:	e0 25       	eor	r30, r0
    7a1c:	e0 64       	ori	r30, 0x40	; 64
    7a1e:	0a c0       	rjmp	.+20     	; 0x7a34 <atan2+0x3a>
    7a20:	ef 63       	ori	r30, 0x3F	; 63
    7a22:	07 f8       	bld	r0, 7
    7a24:	00 94       	com	r0
    7a26:	07 fa       	bst	r0, 7
    7a28:	db 01       	movw	r26, r22
    7a2a:	b9 01       	movw	r22, r18
    7a2c:	9d 01       	movw	r18, r26
    7a2e:	dc 01       	movw	r26, r24
    7a30:	ca 01       	movw	r24, r20
    7a32:	ad 01       	movw	r20, r26
    7a34:	ef 93       	push	r30
    7a36:	4a d0       	rcall	.+148    	; 0x7acc <__divsf3_pse>
    7a38:	d4 d1       	rcall	.+936    	; 0x7de2 <__fp_round>
    7a3a:	0a d0       	rcall	.+20     	; 0x7a50 <atan>
    7a3c:	5f 91       	pop	r21
    7a3e:	55 23       	and	r21, r21
    7a40:	31 f0       	breq	.+12     	; 0x7a4e <atan2+0x54>
    7a42:	2b ed       	ldi	r18, 0xDB	; 219
    7a44:	3f e0       	ldi	r19, 0x0F	; 15
    7a46:	49 e4       	ldi	r20, 0x49	; 73
    7a48:	50 fd       	sbrc	r21, 0
    7a4a:	49 ec       	ldi	r20, 0xC9	; 201
    7a4c:	63 cf       	rjmp	.-314    	; 0x7914 <__addsf3>
    7a4e:	08 95       	ret

00007a50 <atan>:
    7a50:	df 93       	push	r29
    7a52:	dd 27       	eor	r29, r29
    7a54:	b9 2f       	mov	r27, r25
    7a56:	bf 77       	andi	r27, 0x7F	; 127
    7a58:	40 e8       	ldi	r20, 0x80	; 128
    7a5a:	5f e3       	ldi	r21, 0x3F	; 63
    7a5c:	16 16       	cp	r1, r22
    7a5e:	17 06       	cpc	r1, r23
    7a60:	48 07       	cpc	r20, r24
    7a62:	5b 07       	cpc	r21, r27
    7a64:	10 f4       	brcc	.+4      	; 0x7a6a <atan+0x1a>
    7a66:	d9 2f       	mov	r29, r25
    7a68:	22 d2       	rcall	.+1092   	; 0x7eae <inverse>
    7a6a:	9f 93       	push	r25
    7a6c:	8f 93       	push	r24
    7a6e:	7f 93       	push	r23
    7a70:	6f 93       	push	r22
    7a72:	cf d2       	rcall	.+1438   	; 0x8012 <square>
    7a74:	e4 ee       	ldi	r30, 0xE4	; 228
    7a76:	f0 e0       	ldi	r31, 0x00	; 0
    7a78:	59 d1       	rcall	.+690    	; 0x7d2c <__fp_powser>
    7a7a:	b3 d1       	rcall	.+870    	; 0x7de2 <__fp_round>
    7a7c:	2f 91       	pop	r18
    7a7e:	3f 91       	pop	r19
    7a80:	4f 91       	pop	r20
    7a82:	5f 91       	pop	r21
    7a84:	27 d2       	rcall	.+1102   	; 0x7ed4 <__mulsf3x>
    7a86:	dd 23       	and	r29, r29
    7a88:	49 f0       	breq	.+18     	; 0x7a9c <atan+0x4c>
    7a8a:	90 58       	subi	r25, 0x80	; 128
    7a8c:	a2 ea       	ldi	r26, 0xA2	; 162
    7a8e:	2a ed       	ldi	r18, 0xDA	; 218
    7a90:	3f e0       	ldi	r19, 0x0F	; 15
    7a92:	49 ec       	ldi	r20, 0xC9	; 201
    7a94:	5f e3       	ldi	r21, 0x3F	; 63
    7a96:	d0 78       	andi	r29, 0x80	; 128
    7a98:	5d 27       	eor	r21, r29
    7a9a:	4d df       	rcall	.-358    	; 0x7936 <__addsf3x>
    7a9c:	df 91       	pop	r29
    7a9e:	a1 c1       	rjmp	.+834    	; 0x7de2 <__fp_round>

00007aa0 <__cmpsf2>:
    7aa0:	ef d0       	rcall	.+478    	; 0x7c80 <__fp_cmp>
    7aa2:	08 f4       	brcc	.+2      	; 0x7aa6 <__cmpsf2+0x6>
    7aa4:	81 e0       	ldi	r24, 0x01	; 1
    7aa6:	08 95       	ret

00007aa8 <cos>:
    7aa8:	75 d1       	rcall	.+746    	; 0x7d94 <__fp_rempio2>
    7aaa:	e3 95       	inc	r30
    7aac:	ab c1       	rjmp	.+854    	; 0x7e04 <__fp_sinus>

00007aae <__divsf3>:
    7aae:	0c d0       	rcall	.+24     	; 0x7ac8 <__divsf3x>
    7ab0:	98 c1       	rjmp	.+816    	; 0x7de2 <__fp_round>
    7ab2:	68 d1       	rcall	.+720    	; 0x7d84 <__fp_pscB>
    7ab4:	40 f0       	brcs	.+16     	; 0x7ac6 <__divsf3+0x18>
    7ab6:	5f d1       	rcall	.+702    	; 0x7d76 <__fp_pscA>
    7ab8:	30 f0       	brcs	.+12     	; 0x7ac6 <__divsf3+0x18>
    7aba:	21 f4       	brne	.+8      	; 0x7ac4 <__divsf3+0x16>
    7abc:	5f 3f       	cpi	r21, 0xFF	; 255
    7abe:	19 f0       	breq	.+6      	; 0x7ac6 <__divsf3+0x18>
    7ac0:	03 c1       	rjmp	.+518    	; 0x7cc8 <__fp_inf>
    7ac2:	51 11       	cpse	r21, r1
    7ac4:	ea c1       	rjmp	.+980    	; 0x7e9a <__fp_szero>
    7ac6:	2f c1       	rjmp	.+606    	; 0x7d26 <__fp_nan>

00007ac8 <__divsf3x>:
    7ac8:	ae d1       	rcall	.+860    	; 0x7e26 <__fp_split3>
    7aca:	98 f3       	brcs	.-26     	; 0x7ab2 <__divsf3+0x4>

00007acc <__divsf3_pse>:
    7acc:	99 23       	and	r25, r25
    7ace:	c9 f3       	breq	.-14     	; 0x7ac2 <__divsf3+0x14>
    7ad0:	55 23       	and	r21, r21
    7ad2:	b1 f3       	breq	.-20     	; 0x7ac0 <__divsf3+0x12>
    7ad4:	95 1b       	sub	r25, r21
    7ad6:	55 0b       	sbc	r21, r21
    7ad8:	bb 27       	eor	r27, r27
    7ada:	aa 27       	eor	r26, r26
    7adc:	62 17       	cp	r22, r18
    7ade:	73 07       	cpc	r23, r19
    7ae0:	84 07       	cpc	r24, r20
    7ae2:	38 f0       	brcs	.+14     	; 0x7af2 <__divsf3_pse+0x26>
    7ae4:	9f 5f       	subi	r25, 0xFF	; 255
    7ae6:	5f 4f       	sbci	r21, 0xFF	; 255
    7ae8:	22 0f       	add	r18, r18
    7aea:	33 1f       	adc	r19, r19
    7aec:	44 1f       	adc	r20, r20
    7aee:	aa 1f       	adc	r26, r26
    7af0:	a9 f3       	breq	.-22     	; 0x7adc <__divsf3_pse+0x10>
    7af2:	33 d0       	rcall	.+102    	; 0x7b5a <__divsf3_pse+0x8e>
    7af4:	0e 2e       	mov	r0, r30
    7af6:	3a f0       	brmi	.+14     	; 0x7b06 <__divsf3_pse+0x3a>
    7af8:	e0 e8       	ldi	r30, 0x80	; 128
    7afa:	30 d0       	rcall	.+96     	; 0x7b5c <__divsf3_pse+0x90>
    7afc:	91 50       	subi	r25, 0x01	; 1
    7afe:	50 40       	sbci	r21, 0x00	; 0
    7b00:	e6 95       	lsr	r30
    7b02:	00 1c       	adc	r0, r0
    7b04:	ca f7       	brpl	.-14     	; 0x7af8 <__divsf3_pse+0x2c>
    7b06:	29 d0       	rcall	.+82     	; 0x7b5a <__divsf3_pse+0x8e>
    7b08:	fe 2f       	mov	r31, r30
    7b0a:	27 d0       	rcall	.+78     	; 0x7b5a <__divsf3_pse+0x8e>
    7b0c:	66 0f       	add	r22, r22
    7b0e:	77 1f       	adc	r23, r23
    7b10:	88 1f       	adc	r24, r24
    7b12:	bb 1f       	adc	r27, r27
    7b14:	26 17       	cp	r18, r22
    7b16:	37 07       	cpc	r19, r23
    7b18:	48 07       	cpc	r20, r24
    7b1a:	ab 07       	cpc	r26, r27
    7b1c:	b0 e8       	ldi	r27, 0x80	; 128
    7b1e:	09 f0       	breq	.+2      	; 0x7b22 <__divsf3_pse+0x56>
    7b20:	bb 0b       	sbc	r27, r27
    7b22:	80 2d       	mov	r24, r0
    7b24:	bf 01       	movw	r22, r30
    7b26:	ff 27       	eor	r31, r31
    7b28:	93 58       	subi	r25, 0x83	; 131
    7b2a:	5f 4f       	sbci	r21, 0xFF	; 255
    7b2c:	2a f0       	brmi	.+10     	; 0x7b38 <__divsf3_pse+0x6c>
    7b2e:	9e 3f       	cpi	r25, 0xFE	; 254
    7b30:	51 05       	cpc	r21, r1
    7b32:	68 f0       	brcs	.+26     	; 0x7b4e <__divsf3_pse+0x82>
    7b34:	c9 c0       	rjmp	.+402    	; 0x7cc8 <__fp_inf>
    7b36:	b1 c1       	rjmp	.+866    	; 0x7e9a <__fp_szero>
    7b38:	5f 3f       	cpi	r21, 0xFF	; 255
    7b3a:	ec f3       	brlt	.-6      	; 0x7b36 <__divsf3_pse+0x6a>
    7b3c:	98 3e       	cpi	r25, 0xE8	; 232
    7b3e:	dc f3       	brlt	.-10     	; 0x7b36 <__divsf3_pse+0x6a>
    7b40:	86 95       	lsr	r24
    7b42:	77 95       	ror	r23
    7b44:	67 95       	ror	r22
    7b46:	b7 95       	ror	r27
    7b48:	f7 95       	ror	r31
    7b4a:	9f 5f       	subi	r25, 0xFF	; 255
    7b4c:	c9 f7       	brne	.-14     	; 0x7b40 <__divsf3_pse+0x74>
    7b4e:	88 0f       	add	r24, r24
    7b50:	91 1d       	adc	r25, r1
    7b52:	96 95       	lsr	r25
    7b54:	87 95       	ror	r24
    7b56:	97 f9       	bld	r25, 7
    7b58:	08 95       	ret
    7b5a:	e1 e0       	ldi	r30, 0x01	; 1
    7b5c:	66 0f       	add	r22, r22
    7b5e:	77 1f       	adc	r23, r23
    7b60:	88 1f       	adc	r24, r24
    7b62:	bb 1f       	adc	r27, r27
    7b64:	62 17       	cp	r22, r18
    7b66:	73 07       	cpc	r23, r19
    7b68:	84 07       	cpc	r24, r20
    7b6a:	ba 07       	cpc	r27, r26
    7b6c:	20 f0       	brcs	.+8      	; 0x7b76 <__divsf3_pse+0xaa>
    7b6e:	62 1b       	sub	r22, r18
    7b70:	73 0b       	sbc	r23, r19
    7b72:	84 0b       	sbc	r24, r20
    7b74:	ba 0b       	sbc	r27, r26
    7b76:	ee 1f       	adc	r30, r30
    7b78:	88 f7       	brcc	.-30     	; 0x7b5c <__divsf3_pse+0x90>
    7b7a:	e0 95       	com	r30
    7b7c:	08 95       	ret

00007b7e <__fixsfsi>:
    7b7e:	04 d0       	rcall	.+8      	; 0x7b88 <__fixunssfsi>
    7b80:	68 94       	set
    7b82:	b1 11       	cpse	r27, r1
    7b84:	8a c1       	rjmp	.+788    	; 0x7e9a <__fp_szero>
    7b86:	08 95       	ret

00007b88 <__fixunssfsi>:
    7b88:	56 d1       	rcall	.+684    	; 0x7e36 <__fp_splitA>
    7b8a:	88 f0       	brcs	.+34     	; 0x7bae <__fixunssfsi+0x26>
    7b8c:	9f 57       	subi	r25, 0x7F	; 127
    7b8e:	90 f0       	brcs	.+36     	; 0x7bb4 <__fixunssfsi+0x2c>
    7b90:	b9 2f       	mov	r27, r25
    7b92:	99 27       	eor	r25, r25
    7b94:	b7 51       	subi	r27, 0x17	; 23
    7b96:	a0 f0       	brcs	.+40     	; 0x7bc0 <__fixunssfsi+0x38>
    7b98:	d1 f0       	breq	.+52     	; 0x7bce <__fixunssfsi+0x46>
    7b9a:	66 0f       	add	r22, r22
    7b9c:	77 1f       	adc	r23, r23
    7b9e:	88 1f       	adc	r24, r24
    7ba0:	99 1f       	adc	r25, r25
    7ba2:	1a f0       	brmi	.+6      	; 0x7baa <__fixunssfsi+0x22>
    7ba4:	ba 95       	dec	r27
    7ba6:	c9 f7       	brne	.-14     	; 0x7b9a <__fixunssfsi+0x12>
    7ba8:	12 c0       	rjmp	.+36     	; 0x7bce <__fixunssfsi+0x46>
    7baa:	b1 30       	cpi	r27, 0x01	; 1
    7bac:	81 f0       	breq	.+32     	; 0x7bce <__fixunssfsi+0x46>
    7bae:	74 d1       	rcall	.+744    	; 0x7e98 <__fp_zero>
    7bb0:	b1 e0       	ldi	r27, 0x01	; 1
    7bb2:	08 95       	ret
    7bb4:	71 c1       	rjmp	.+738    	; 0x7e98 <__fp_zero>
    7bb6:	67 2f       	mov	r22, r23
    7bb8:	78 2f       	mov	r23, r24
    7bba:	88 27       	eor	r24, r24
    7bbc:	b8 5f       	subi	r27, 0xF8	; 248
    7bbe:	39 f0       	breq	.+14     	; 0x7bce <__fixunssfsi+0x46>
    7bc0:	b9 3f       	cpi	r27, 0xF9	; 249
    7bc2:	cc f3       	brlt	.-14     	; 0x7bb6 <__fixunssfsi+0x2e>
    7bc4:	86 95       	lsr	r24
    7bc6:	77 95       	ror	r23
    7bc8:	67 95       	ror	r22
    7bca:	b3 95       	inc	r27
    7bcc:	d9 f7       	brne	.-10     	; 0x7bc4 <__fixunssfsi+0x3c>
    7bce:	3e f4       	brtc	.+14     	; 0x7bde <__fixunssfsi+0x56>
    7bd0:	90 95       	com	r25
    7bd2:	80 95       	com	r24
    7bd4:	70 95       	com	r23
    7bd6:	61 95       	neg	r22
    7bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    7bda:	8f 4f       	sbci	r24, 0xFF	; 255
    7bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    7bde:	08 95       	ret

00007be0 <__floatunsisf>:
    7be0:	e8 94       	clt
    7be2:	09 c0       	rjmp	.+18     	; 0x7bf6 <__floatsisf+0x12>

00007be4 <__floatsisf>:
    7be4:	97 fb       	bst	r25, 7
    7be6:	3e f4       	brtc	.+14     	; 0x7bf6 <__floatsisf+0x12>
    7be8:	90 95       	com	r25
    7bea:	80 95       	com	r24
    7bec:	70 95       	com	r23
    7bee:	61 95       	neg	r22
    7bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    7bf2:	8f 4f       	sbci	r24, 0xFF	; 255
    7bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    7bf6:	99 23       	and	r25, r25
    7bf8:	a9 f0       	breq	.+42     	; 0x7c24 <__floatsisf+0x40>
    7bfa:	f9 2f       	mov	r31, r25
    7bfc:	96 e9       	ldi	r25, 0x96	; 150
    7bfe:	bb 27       	eor	r27, r27
    7c00:	93 95       	inc	r25
    7c02:	f6 95       	lsr	r31
    7c04:	87 95       	ror	r24
    7c06:	77 95       	ror	r23
    7c08:	67 95       	ror	r22
    7c0a:	b7 95       	ror	r27
    7c0c:	f1 11       	cpse	r31, r1
    7c0e:	f8 cf       	rjmp	.-16     	; 0x7c00 <__floatsisf+0x1c>
    7c10:	fa f4       	brpl	.+62     	; 0x7c50 <__floatsisf+0x6c>
    7c12:	bb 0f       	add	r27, r27
    7c14:	11 f4       	brne	.+4      	; 0x7c1a <__floatsisf+0x36>
    7c16:	60 ff       	sbrs	r22, 0
    7c18:	1b c0       	rjmp	.+54     	; 0x7c50 <__floatsisf+0x6c>
    7c1a:	6f 5f       	subi	r22, 0xFF	; 255
    7c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    7c1e:	8f 4f       	sbci	r24, 0xFF	; 255
    7c20:	9f 4f       	sbci	r25, 0xFF	; 255
    7c22:	16 c0       	rjmp	.+44     	; 0x7c50 <__floatsisf+0x6c>
    7c24:	88 23       	and	r24, r24
    7c26:	11 f0       	breq	.+4      	; 0x7c2c <__floatsisf+0x48>
    7c28:	96 e9       	ldi	r25, 0x96	; 150
    7c2a:	11 c0       	rjmp	.+34     	; 0x7c4e <__floatsisf+0x6a>
    7c2c:	77 23       	and	r23, r23
    7c2e:	21 f0       	breq	.+8      	; 0x7c38 <__floatsisf+0x54>
    7c30:	9e e8       	ldi	r25, 0x8E	; 142
    7c32:	87 2f       	mov	r24, r23
    7c34:	76 2f       	mov	r23, r22
    7c36:	05 c0       	rjmp	.+10     	; 0x7c42 <__floatsisf+0x5e>
    7c38:	66 23       	and	r22, r22
    7c3a:	71 f0       	breq	.+28     	; 0x7c58 <__floatsisf+0x74>
    7c3c:	96 e8       	ldi	r25, 0x86	; 134
    7c3e:	86 2f       	mov	r24, r22
    7c40:	70 e0       	ldi	r23, 0x00	; 0
    7c42:	60 e0       	ldi	r22, 0x00	; 0
    7c44:	2a f0       	brmi	.+10     	; 0x7c50 <__floatsisf+0x6c>
    7c46:	9a 95       	dec	r25
    7c48:	66 0f       	add	r22, r22
    7c4a:	77 1f       	adc	r23, r23
    7c4c:	88 1f       	adc	r24, r24
    7c4e:	da f7       	brpl	.-10     	; 0x7c46 <__floatsisf+0x62>
    7c50:	88 0f       	add	r24, r24
    7c52:	96 95       	lsr	r25
    7c54:	87 95       	ror	r24
    7c56:	97 f9       	bld	r25, 7
    7c58:	08 95       	ret

00007c5a <floor>:
    7c5a:	07 d1       	rcall	.+526    	; 0x7e6a <__fp_trunc>
    7c5c:	80 f0       	brcs	.+32     	; 0x7c7e <floor+0x24>
    7c5e:	9f 37       	cpi	r25, 0x7F	; 127
    7c60:	40 f4       	brcc	.+16     	; 0x7c72 <floor+0x18>
    7c62:	91 11       	cpse	r25, r1
    7c64:	0e f0       	brts	.+2      	; 0x7c68 <floor+0xe>
    7c66:	19 c1       	rjmp	.+562    	; 0x7e9a <__fp_szero>
    7c68:	60 e0       	ldi	r22, 0x00	; 0
    7c6a:	70 e0       	ldi	r23, 0x00	; 0
    7c6c:	80 e8       	ldi	r24, 0x80	; 128
    7c6e:	9f eb       	ldi	r25, 0xBF	; 191
    7c70:	08 95       	ret
    7c72:	26 f4       	brtc	.+8      	; 0x7c7c <floor+0x22>
    7c74:	1b 16       	cp	r1, r27
    7c76:	61 1d       	adc	r22, r1
    7c78:	71 1d       	adc	r23, r1
    7c7a:	81 1d       	adc	r24, r1
    7c7c:	2b c0       	rjmp	.+86     	; 0x7cd4 <__fp_mintl>
    7c7e:	45 c0       	rjmp	.+138    	; 0x7d0a <__fp_mpack>

00007c80 <__fp_cmp>:
    7c80:	99 0f       	add	r25, r25
    7c82:	00 08       	sbc	r0, r0
    7c84:	55 0f       	add	r21, r21
    7c86:	aa 0b       	sbc	r26, r26
    7c88:	e0 e8       	ldi	r30, 0x80	; 128
    7c8a:	fe ef       	ldi	r31, 0xFE	; 254
    7c8c:	16 16       	cp	r1, r22
    7c8e:	17 06       	cpc	r1, r23
    7c90:	e8 07       	cpc	r30, r24
    7c92:	f9 07       	cpc	r31, r25
    7c94:	c0 f0       	brcs	.+48     	; 0x7cc6 <__fp_cmp+0x46>
    7c96:	12 16       	cp	r1, r18
    7c98:	13 06       	cpc	r1, r19
    7c9a:	e4 07       	cpc	r30, r20
    7c9c:	f5 07       	cpc	r31, r21
    7c9e:	98 f0       	brcs	.+38     	; 0x7cc6 <__fp_cmp+0x46>
    7ca0:	62 1b       	sub	r22, r18
    7ca2:	73 0b       	sbc	r23, r19
    7ca4:	84 0b       	sbc	r24, r20
    7ca6:	95 0b       	sbc	r25, r21
    7ca8:	39 f4       	brne	.+14     	; 0x7cb8 <__fp_cmp+0x38>
    7caa:	0a 26       	eor	r0, r26
    7cac:	61 f0       	breq	.+24     	; 0x7cc6 <__fp_cmp+0x46>
    7cae:	23 2b       	or	r18, r19
    7cb0:	24 2b       	or	r18, r20
    7cb2:	25 2b       	or	r18, r21
    7cb4:	21 f4       	brne	.+8      	; 0x7cbe <__fp_cmp+0x3e>
    7cb6:	08 95       	ret
    7cb8:	0a 26       	eor	r0, r26
    7cba:	09 f4       	brne	.+2      	; 0x7cbe <__fp_cmp+0x3e>
    7cbc:	a1 40       	sbci	r26, 0x01	; 1
    7cbe:	a6 95       	lsr	r26
    7cc0:	8f ef       	ldi	r24, 0xFF	; 255
    7cc2:	81 1d       	adc	r24, r1
    7cc4:	81 1d       	adc	r24, r1
    7cc6:	08 95       	ret

00007cc8 <__fp_inf>:
    7cc8:	97 f9       	bld	r25, 7
    7cca:	9f 67       	ori	r25, 0x7F	; 127
    7ccc:	80 e8       	ldi	r24, 0x80	; 128
    7cce:	70 e0       	ldi	r23, 0x00	; 0
    7cd0:	60 e0       	ldi	r22, 0x00	; 0
    7cd2:	08 95       	ret

00007cd4 <__fp_mintl>:
    7cd4:	88 23       	and	r24, r24
    7cd6:	71 f4       	brne	.+28     	; 0x7cf4 <__fp_mintl+0x20>
    7cd8:	77 23       	and	r23, r23
    7cda:	21 f0       	breq	.+8      	; 0x7ce4 <__fp_mintl+0x10>
    7cdc:	98 50       	subi	r25, 0x08	; 8
    7cde:	87 2b       	or	r24, r23
    7ce0:	76 2f       	mov	r23, r22
    7ce2:	07 c0       	rjmp	.+14     	; 0x7cf2 <__fp_mintl+0x1e>
    7ce4:	66 23       	and	r22, r22
    7ce6:	11 f4       	brne	.+4      	; 0x7cec <__fp_mintl+0x18>
    7ce8:	99 27       	eor	r25, r25
    7cea:	0d c0       	rjmp	.+26     	; 0x7d06 <__fp_mintl+0x32>
    7cec:	90 51       	subi	r25, 0x10	; 16
    7cee:	86 2b       	or	r24, r22
    7cf0:	70 e0       	ldi	r23, 0x00	; 0
    7cf2:	60 e0       	ldi	r22, 0x00	; 0
    7cf4:	2a f0       	brmi	.+10     	; 0x7d00 <__fp_mintl+0x2c>
    7cf6:	9a 95       	dec	r25
    7cf8:	66 0f       	add	r22, r22
    7cfa:	77 1f       	adc	r23, r23
    7cfc:	88 1f       	adc	r24, r24
    7cfe:	da f7       	brpl	.-10     	; 0x7cf6 <__fp_mintl+0x22>
    7d00:	88 0f       	add	r24, r24
    7d02:	96 95       	lsr	r25
    7d04:	87 95       	ror	r24
    7d06:	97 f9       	bld	r25, 7
    7d08:	08 95       	ret

00007d0a <__fp_mpack>:
    7d0a:	9f 3f       	cpi	r25, 0xFF	; 255
    7d0c:	31 f0       	breq	.+12     	; 0x7d1a <__fp_mpack_finite+0xc>

00007d0e <__fp_mpack_finite>:
    7d0e:	91 50       	subi	r25, 0x01	; 1
    7d10:	20 f4       	brcc	.+8      	; 0x7d1a <__fp_mpack_finite+0xc>
    7d12:	87 95       	ror	r24
    7d14:	77 95       	ror	r23
    7d16:	67 95       	ror	r22
    7d18:	b7 95       	ror	r27
    7d1a:	88 0f       	add	r24, r24
    7d1c:	91 1d       	adc	r25, r1
    7d1e:	96 95       	lsr	r25
    7d20:	87 95       	ror	r24
    7d22:	97 f9       	bld	r25, 7
    7d24:	08 95       	ret

00007d26 <__fp_nan>:
    7d26:	9f ef       	ldi	r25, 0xFF	; 255
    7d28:	80 ec       	ldi	r24, 0xC0	; 192
    7d2a:	08 95       	ret

00007d2c <__fp_powser>:
    7d2c:	df 93       	push	r29
    7d2e:	cf 93       	push	r28
    7d30:	1f 93       	push	r17
    7d32:	0f 93       	push	r16
    7d34:	ff 92       	push	r15
    7d36:	ef 92       	push	r14
    7d38:	df 92       	push	r13
    7d3a:	7b 01       	movw	r14, r22
    7d3c:	8c 01       	movw	r16, r24
    7d3e:	68 94       	set
    7d40:	05 c0       	rjmp	.+10     	; 0x7d4c <__fp_powser+0x20>
    7d42:	da 2e       	mov	r13, r26
    7d44:	ef 01       	movw	r28, r30
    7d46:	c6 d0       	rcall	.+396    	; 0x7ed4 <__mulsf3x>
    7d48:	fe 01       	movw	r30, r28
    7d4a:	e8 94       	clt
    7d4c:	a5 91       	lpm	r26, Z+
    7d4e:	25 91       	lpm	r18, Z+
    7d50:	35 91       	lpm	r19, Z+
    7d52:	45 91       	lpm	r20, Z+
    7d54:	55 91       	lpm	r21, Z+
    7d56:	ae f3       	brts	.-22     	; 0x7d42 <__fp_powser+0x16>
    7d58:	ef 01       	movw	r28, r30
    7d5a:	ed dd       	rcall	.-1062   	; 0x7936 <__addsf3x>
    7d5c:	fe 01       	movw	r30, r28
    7d5e:	97 01       	movw	r18, r14
    7d60:	a8 01       	movw	r20, r16
    7d62:	da 94       	dec	r13
    7d64:	79 f7       	brne	.-34     	; 0x7d44 <__fp_powser+0x18>
    7d66:	df 90       	pop	r13
    7d68:	ef 90       	pop	r14
    7d6a:	ff 90       	pop	r15
    7d6c:	0f 91       	pop	r16
    7d6e:	1f 91       	pop	r17
    7d70:	cf 91       	pop	r28
    7d72:	df 91       	pop	r29
    7d74:	08 95       	ret

00007d76 <__fp_pscA>:
    7d76:	00 24       	eor	r0, r0
    7d78:	0a 94       	dec	r0
    7d7a:	16 16       	cp	r1, r22
    7d7c:	17 06       	cpc	r1, r23
    7d7e:	18 06       	cpc	r1, r24
    7d80:	09 06       	cpc	r0, r25
    7d82:	08 95       	ret

00007d84 <__fp_pscB>:
    7d84:	00 24       	eor	r0, r0
    7d86:	0a 94       	dec	r0
    7d88:	12 16       	cp	r1, r18
    7d8a:	13 06       	cpc	r1, r19
    7d8c:	14 06       	cpc	r1, r20
    7d8e:	05 06       	cpc	r0, r21
    7d90:	08 95       	ret
    7d92:	c9 cf       	rjmp	.-110    	; 0x7d26 <__fp_nan>

00007d94 <__fp_rempio2>:
    7d94:	50 d0       	rcall	.+160    	; 0x7e36 <__fp_splitA>
    7d96:	e8 f3       	brcs	.-6      	; 0x7d92 <__fp_pscB+0xe>
    7d98:	e8 94       	clt
    7d9a:	e0 e0       	ldi	r30, 0x00	; 0
    7d9c:	bb 27       	eor	r27, r27
    7d9e:	9f 57       	subi	r25, 0x7F	; 127
    7da0:	f0 f0       	brcs	.+60     	; 0x7dde <__fp_rempio2+0x4a>
    7da2:	2a ed       	ldi	r18, 0xDA	; 218
    7da4:	3f e0       	ldi	r19, 0x0F	; 15
    7da6:	49 ec       	ldi	r20, 0xC9	; 201
    7da8:	06 c0       	rjmp	.+12     	; 0x7db6 <__fp_rempio2+0x22>
    7daa:	ee 0f       	add	r30, r30
    7dac:	bb 0f       	add	r27, r27
    7dae:	66 1f       	adc	r22, r22
    7db0:	77 1f       	adc	r23, r23
    7db2:	88 1f       	adc	r24, r24
    7db4:	28 f0       	brcs	.+10     	; 0x7dc0 <__fp_rempio2+0x2c>
    7db6:	b2 3a       	cpi	r27, 0xA2	; 162
    7db8:	62 07       	cpc	r22, r18
    7dba:	73 07       	cpc	r23, r19
    7dbc:	84 07       	cpc	r24, r20
    7dbe:	28 f0       	brcs	.+10     	; 0x7dca <__fp_rempio2+0x36>
    7dc0:	b2 5a       	subi	r27, 0xA2	; 162
    7dc2:	62 0b       	sbc	r22, r18
    7dc4:	73 0b       	sbc	r23, r19
    7dc6:	84 0b       	sbc	r24, r20
    7dc8:	e3 95       	inc	r30
    7dca:	9a 95       	dec	r25
    7dcc:	72 f7       	brpl	.-36     	; 0x7daa <__fp_rempio2+0x16>
    7dce:	80 38       	cpi	r24, 0x80	; 128
    7dd0:	30 f4       	brcc	.+12     	; 0x7dde <__fp_rempio2+0x4a>
    7dd2:	9a 95       	dec	r25
    7dd4:	bb 0f       	add	r27, r27
    7dd6:	66 1f       	adc	r22, r22
    7dd8:	77 1f       	adc	r23, r23
    7dda:	88 1f       	adc	r24, r24
    7ddc:	d2 f7       	brpl	.-12     	; 0x7dd2 <__fp_rempio2+0x3e>
    7dde:	90 48       	sbci	r25, 0x80	; 128
    7de0:	96 cf       	rjmp	.-212    	; 0x7d0e <__fp_mpack_finite>

00007de2 <__fp_round>:
    7de2:	09 2e       	mov	r0, r25
    7de4:	03 94       	inc	r0
    7de6:	00 0c       	add	r0, r0
    7de8:	11 f4       	brne	.+4      	; 0x7dee <__fp_round+0xc>
    7dea:	88 23       	and	r24, r24
    7dec:	52 f0       	brmi	.+20     	; 0x7e02 <__fp_round+0x20>
    7dee:	bb 0f       	add	r27, r27
    7df0:	40 f4       	brcc	.+16     	; 0x7e02 <__fp_round+0x20>
    7df2:	bf 2b       	or	r27, r31
    7df4:	11 f4       	brne	.+4      	; 0x7dfa <__fp_round+0x18>
    7df6:	60 ff       	sbrs	r22, 0
    7df8:	04 c0       	rjmp	.+8      	; 0x7e02 <__fp_round+0x20>
    7dfa:	6f 5f       	subi	r22, 0xFF	; 255
    7dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    7dfe:	8f 4f       	sbci	r24, 0xFF	; 255
    7e00:	9f 4f       	sbci	r25, 0xFF	; 255
    7e02:	08 95       	ret

00007e04 <__fp_sinus>:
    7e04:	ef 93       	push	r30
    7e06:	e0 ff       	sbrs	r30, 0
    7e08:	06 c0       	rjmp	.+12     	; 0x7e16 <__fp_sinus+0x12>
    7e0a:	a2 ea       	ldi	r26, 0xA2	; 162
    7e0c:	2a ed       	ldi	r18, 0xDA	; 218
    7e0e:	3f e0       	ldi	r19, 0x0F	; 15
    7e10:	49 ec       	ldi	r20, 0xC9	; 201
    7e12:	5f eb       	ldi	r21, 0xBF	; 191
    7e14:	90 dd       	rcall	.-1248   	; 0x7936 <__addsf3x>
    7e16:	e5 df       	rcall	.-54     	; 0x7de2 <__fp_round>
    7e18:	0f 90       	pop	r0
    7e1a:	03 94       	inc	r0
    7e1c:	01 fc       	sbrc	r0, 1
    7e1e:	90 58       	subi	r25, 0x80	; 128
    7e20:	e1 e1       	ldi	r30, 0x11	; 17
    7e22:	f1 e0       	ldi	r31, 0x01	; 1
    7e24:	04 c1       	rjmp	.+520    	; 0x802e <__fp_powsodd>

00007e26 <__fp_split3>:
    7e26:	57 fd       	sbrc	r21, 7
    7e28:	90 58       	subi	r25, 0x80	; 128
    7e2a:	44 0f       	add	r20, r20
    7e2c:	55 1f       	adc	r21, r21
    7e2e:	59 f0       	breq	.+22     	; 0x7e46 <__fp_splitA+0x10>
    7e30:	5f 3f       	cpi	r21, 0xFF	; 255
    7e32:	71 f0       	breq	.+28     	; 0x7e50 <__fp_splitA+0x1a>
    7e34:	47 95       	ror	r20

00007e36 <__fp_splitA>:
    7e36:	88 0f       	add	r24, r24
    7e38:	97 fb       	bst	r25, 7
    7e3a:	99 1f       	adc	r25, r25
    7e3c:	61 f0       	breq	.+24     	; 0x7e56 <__fp_splitA+0x20>
    7e3e:	9f 3f       	cpi	r25, 0xFF	; 255
    7e40:	79 f0       	breq	.+30     	; 0x7e60 <__fp_splitA+0x2a>
    7e42:	87 95       	ror	r24
    7e44:	08 95       	ret
    7e46:	12 16       	cp	r1, r18
    7e48:	13 06       	cpc	r1, r19
    7e4a:	14 06       	cpc	r1, r20
    7e4c:	55 1f       	adc	r21, r21
    7e4e:	f2 cf       	rjmp	.-28     	; 0x7e34 <__fp_split3+0xe>
    7e50:	46 95       	lsr	r20
    7e52:	f1 df       	rcall	.-30     	; 0x7e36 <__fp_splitA>
    7e54:	08 c0       	rjmp	.+16     	; 0x7e66 <__fp_splitA+0x30>
    7e56:	16 16       	cp	r1, r22
    7e58:	17 06       	cpc	r1, r23
    7e5a:	18 06       	cpc	r1, r24
    7e5c:	99 1f       	adc	r25, r25
    7e5e:	f1 cf       	rjmp	.-30     	; 0x7e42 <__fp_splitA+0xc>
    7e60:	86 95       	lsr	r24
    7e62:	71 05       	cpc	r23, r1
    7e64:	61 05       	cpc	r22, r1
    7e66:	08 94       	sec
    7e68:	08 95       	ret

00007e6a <__fp_trunc>:
    7e6a:	e5 df       	rcall	.-54     	; 0x7e36 <__fp_splitA>
    7e6c:	a0 f0       	brcs	.+40     	; 0x7e96 <__fp_trunc+0x2c>
    7e6e:	be e7       	ldi	r27, 0x7E	; 126
    7e70:	b9 17       	cp	r27, r25
    7e72:	88 f4       	brcc	.+34     	; 0x7e96 <__fp_trunc+0x2c>
    7e74:	bb 27       	eor	r27, r27
    7e76:	9f 38       	cpi	r25, 0x8F	; 143
    7e78:	60 f4       	brcc	.+24     	; 0x7e92 <__fp_trunc+0x28>
    7e7a:	16 16       	cp	r1, r22
    7e7c:	b1 1d       	adc	r27, r1
    7e7e:	67 2f       	mov	r22, r23
    7e80:	78 2f       	mov	r23, r24
    7e82:	88 27       	eor	r24, r24
    7e84:	98 5f       	subi	r25, 0xF8	; 248
    7e86:	f7 cf       	rjmp	.-18     	; 0x7e76 <__fp_trunc+0xc>
    7e88:	86 95       	lsr	r24
    7e8a:	77 95       	ror	r23
    7e8c:	67 95       	ror	r22
    7e8e:	b1 1d       	adc	r27, r1
    7e90:	93 95       	inc	r25
    7e92:	96 39       	cpi	r25, 0x96	; 150
    7e94:	c8 f3       	brcs	.-14     	; 0x7e88 <__fp_trunc+0x1e>
    7e96:	08 95       	ret

00007e98 <__fp_zero>:
    7e98:	e8 94       	clt

00007e9a <__fp_szero>:
    7e9a:	bb 27       	eor	r27, r27
    7e9c:	66 27       	eor	r22, r22
    7e9e:	77 27       	eor	r23, r23
    7ea0:	cb 01       	movw	r24, r22
    7ea2:	97 f9       	bld	r25, 7
    7ea4:	08 95       	ret

00007ea6 <__gesf2>:
    7ea6:	ec de       	rcall	.-552    	; 0x7c80 <__fp_cmp>
    7ea8:	08 f4       	brcc	.+2      	; 0x7eac <__gesf2+0x6>
    7eaa:	8f ef       	ldi	r24, 0xFF	; 255
    7eac:	08 95       	ret

00007eae <inverse>:
    7eae:	9b 01       	movw	r18, r22
    7eb0:	ac 01       	movw	r20, r24
    7eb2:	60 e0       	ldi	r22, 0x00	; 0
    7eb4:	70 e0       	ldi	r23, 0x00	; 0
    7eb6:	80 e8       	ldi	r24, 0x80	; 128
    7eb8:	9f e3       	ldi	r25, 0x3F	; 63
    7eba:	f9 cd       	rjmp	.-1038   	; 0x7aae <__divsf3>

00007ebc <__mulsf3>:
    7ebc:	0b d0       	rcall	.+22     	; 0x7ed4 <__mulsf3x>
    7ebe:	91 cf       	rjmp	.-222    	; 0x7de2 <__fp_round>
    7ec0:	5a df       	rcall	.-332    	; 0x7d76 <__fp_pscA>
    7ec2:	28 f0       	brcs	.+10     	; 0x7ece <__mulsf3+0x12>
    7ec4:	5f df       	rcall	.-322    	; 0x7d84 <__fp_pscB>
    7ec6:	18 f0       	brcs	.+6      	; 0x7ece <__mulsf3+0x12>
    7ec8:	95 23       	and	r25, r21
    7eca:	09 f0       	breq	.+2      	; 0x7ece <__mulsf3+0x12>
    7ecc:	fd ce       	rjmp	.-518    	; 0x7cc8 <__fp_inf>
    7ece:	2b cf       	rjmp	.-426    	; 0x7d26 <__fp_nan>
    7ed0:	11 24       	eor	r1, r1
    7ed2:	e3 cf       	rjmp	.-58     	; 0x7e9a <__fp_szero>

00007ed4 <__mulsf3x>:
    7ed4:	a8 df       	rcall	.-176    	; 0x7e26 <__fp_split3>
    7ed6:	a0 f3       	brcs	.-24     	; 0x7ec0 <__mulsf3+0x4>

00007ed8 <__mulsf3_pse>:
    7ed8:	95 9f       	mul	r25, r21
    7eda:	d1 f3       	breq	.-12     	; 0x7ed0 <__mulsf3+0x14>
    7edc:	95 0f       	add	r25, r21
    7ede:	50 e0       	ldi	r21, 0x00	; 0
    7ee0:	55 1f       	adc	r21, r21
    7ee2:	62 9f       	mul	r22, r18
    7ee4:	f0 01       	movw	r30, r0
    7ee6:	72 9f       	mul	r23, r18
    7ee8:	bb 27       	eor	r27, r27
    7eea:	f0 0d       	add	r31, r0
    7eec:	b1 1d       	adc	r27, r1
    7eee:	63 9f       	mul	r22, r19
    7ef0:	aa 27       	eor	r26, r26
    7ef2:	f0 0d       	add	r31, r0
    7ef4:	b1 1d       	adc	r27, r1
    7ef6:	aa 1f       	adc	r26, r26
    7ef8:	64 9f       	mul	r22, r20
    7efa:	66 27       	eor	r22, r22
    7efc:	b0 0d       	add	r27, r0
    7efe:	a1 1d       	adc	r26, r1
    7f00:	66 1f       	adc	r22, r22
    7f02:	82 9f       	mul	r24, r18
    7f04:	22 27       	eor	r18, r18
    7f06:	b0 0d       	add	r27, r0
    7f08:	a1 1d       	adc	r26, r1
    7f0a:	62 1f       	adc	r22, r18
    7f0c:	73 9f       	mul	r23, r19
    7f0e:	b0 0d       	add	r27, r0
    7f10:	a1 1d       	adc	r26, r1
    7f12:	62 1f       	adc	r22, r18
    7f14:	83 9f       	mul	r24, r19
    7f16:	a0 0d       	add	r26, r0
    7f18:	61 1d       	adc	r22, r1
    7f1a:	22 1f       	adc	r18, r18
    7f1c:	74 9f       	mul	r23, r20
    7f1e:	33 27       	eor	r19, r19
    7f20:	a0 0d       	add	r26, r0
    7f22:	61 1d       	adc	r22, r1
    7f24:	23 1f       	adc	r18, r19
    7f26:	84 9f       	mul	r24, r20
    7f28:	60 0d       	add	r22, r0
    7f2a:	21 1d       	adc	r18, r1
    7f2c:	82 2f       	mov	r24, r18
    7f2e:	76 2f       	mov	r23, r22
    7f30:	6a 2f       	mov	r22, r26
    7f32:	11 24       	eor	r1, r1
    7f34:	9f 57       	subi	r25, 0x7F	; 127
    7f36:	50 40       	sbci	r21, 0x00	; 0
    7f38:	8a f0       	brmi	.+34     	; 0x7f5c <__mulsf3_pse+0x84>
    7f3a:	e1 f0       	breq	.+56     	; 0x7f74 <__mulsf3_pse+0x9c>
    7f3c:	88 23       	and	r24, r24
    7f3e:	4a f0       	brmi	.+18     	; 0x7f52 <__mulsf3_pse+0x7a>
    7f40:	ee 0f       	add	r30, r30
    7f42:	ff 1f       	adc	r31, r31
    7f44:	bb 1f       	adc	r27, r27
    7f46:	66 1f       	adc	r22, r22
    7f48:	77 1f       	adc	r23, r23
    7f4a:	88 1f       	adc	r24, r24
    7f4c:	91 50       	subi	r25, 0x01	; 1
    7f4e:	50 40       	sbci	r21, 0x00	; 0
    7f50:	a9 f7       	brne	.-22     	; 0x7f3c <__mulsf3_pse+0x64>
    7f52:	9e 3f       	cpi	r25, 0xFE	; 254
    7f54:	51 05       	cpc	r21, r1
    7f56:	70 f0       	brcs	.+28     	; 0x7f74 <__mulsf3_pse+0x9c>
    7f58:	b7 ce       	rjmp	.-658    	; 0x7cc8 <__fp_inf>
    7f5a:	9f cf       	rjmp	.-194    	; 0x7e9a <__fp_szero>
    7f5c:	5f 3f       	cpi	r21, 0xFF	; 255
    7f5e:	ec f3       	brlt	.-6      	; 0x7f5a <__mulsf3_pse+0x82>
    7f60:	98 3e       	cpi	r25, 0xE8	; 232
    7f62:	dc f3       	brlt	.-10     	; 0x7f5a <__mulsf3_pse+0x82>
    7f64:	86 95       	lsr	r24
    7f66:	77 95       	ror	r23
    7f68:	67 95       	ror	r22
    7f6a:	b7 95       	ror	r27
    7f6c:	f7 95       	ror	r31
    7f6e:	e7 95       	ror	r30
    7f70:	9f 5f       	subi	r25, 0xFF	; 255
    7f72:	c1 f7       	brne	.-16     	; 0x7f64 <__mulsf3_pse+0x8c>
    7f74:	fe 2b       	or	r31, r30
    7f76:	88 0f       	add	r24, r24
    7f78:	91 1d       	adc	r25, r1
    7f7a:	96 95       	lsr	r25
    7f7c:	87 95       	ror	r24
    7f7e:	97 f9       	bld	r25, 7
    7f80:	08 95       	ret

00007f82 <sin>:
    7f82:	9f 93       	push	r25
    7f84:	07 df       	rcall	.-498    	; 0x7d94 <__fp_rempio2>
    7f86:	0f 90       	pop	r0
    7f88:	07 fc       	sbrc	r0, 7
    7f8a:	ee 5f       	subi	r30, 0xFE	; 254
    7f8c:	3b cf       	rjmp	.-394    	; 0x7e04 <__fp_sinus>
    7f8e:	11 f4       	brne	.+4      	; 0x7f94 <sin+0x12>
    7f90:	0e f4       	brtc	.+2      	; 0x7f94 <sin+0x12>
    7f92:	c9 ce       	rjmp	.-622    	; 0x7d26 <__fp_nan>
    7f94:	ba ce       	rjmp	.-652    	; 0x7d0a <__fp_mpack>

00007f96 <sqrt>:
    7f96:	4f df       	rcall	.-354    	; 0x7e36 <__fp_splitA>
    7f98:	d0 f3       	brcs	.-12     	; 0x7f8e <sin+0xc>
    7f9a:	99 23       	and	r25, r25
    7f9c:	d9 f3       	breq	.-10     	; 0x7f94 <sin+0x12>
    7f9e:	ce f3       	brts	.-14     	; 0x7f92 <sin+0x10>
    7fa0:	9f 57       	subi	r25, 0x7F	; 127
    7fa2:	55 0b       	sbc	r21, r21
    7fa4:	87 ff       	sbrs	r24, 7
    7fa6:	3c d0       	rcall	.+120    	; 0x8020 <__fp_norm2>
    7fa8:	00 24       	eor	r0, r0
    7faa:	a0 e6       	ldi	r26, 0x60	; 96
    7fac:	40 ea       	ldi	r20, 0xA0	; 160
    7fae:	90 01       	movw	r18, r0
    7fb0:	80 58       	subi	r24, 0x80	; 128
    7fb2:	56 95       	lsr	r21
    7fb4:	97 95       	ror	r25
    7fb6:	28 f4       	brcc	.+10     	; 0x7fc2 <sqrt+0x2c>
    7fb8:	80 5c       	subi	r24, 0xC0	; 192
    7fba:	66 0f       	add	r22, r22
    7fbc:	77 1f       	adc	r23, r23
    7fbe:	88 1f       	adc	r24, r24
    7fc0:	20 f0       	brcs	.+8      	; 0x7fca <sqrt+0x34>
    7fc2:	26 17       	cp	r18, r22
    7fc4:	37 07       	cpc	r19, r23
    7fc6:	48 07       	cpc	r20, r24
    7fc8:	30 f4       	brcc	.+12     	; 0x7fd6 <sqrt+0x40>
    7fca:	62 1b       	sub	r22, r18
    7fcc:	73 0b       	sbc	r23, r19
    7fce:	84 0b       	sbc	r24, r20
    7fd0:	20 29       	or	r18, r0
    7fd2:	31 29       	or	r19, r1
    7fd4:	4a 2b       	or	r20, r26
    7fd6:	a6 95       	lsr	r26
    7fd8:	17 94       	ror	r1
    7fda:	07 94       	ror	r0
    7fdc:	20 25       	eor	r18, r0
    7fde:	31 25       	eor	r19, r1
    7fe0:	4a 27       	eor	r20, r26
    7fe2:	58 f7       	brcc	.-42     	; 0x7fba <sqrt+0x24>
    7fe4:	66 0f       	add	r22, r22
    7fe6:	77 1f       	adc	r23, r23
    7fe8:	88 1f       	adc	r24, r24
    7fea:	20 f0       	brcs	.+8      	; 0x7ff4 <sqrt+0x5e>
    7fec:	26 17       	cp	r18, r22
    7fee:	37 07       	cpc	r19, r23
    7ff0:	48 07       	cpc	r20, r24
    7ff2:	30 f4       	brcc	.+12     	; 0x8000 <sqrt+0x6a>
    7ff4:	62 0b       	sbc	r22, r18
    7ff6:	73 0b       	sbc	r23, r19
    7ff8:	84 0b       	sbc	r24, r20
    7ffa:	20 0d       	add	r18, r0
    7ffc:	31 1d       	adc	r19, r1
    7ffe:	41 1d       	adc	r20, r1
    8000:	a0 95       	com	r26
    8002:	81 f7       	brne	.-32     	; 0x7fe4 <sqrt+0x4e>
    8004:	b9 01       	movw	r22, r18
    8006:	84 2f       	mov	r24, r20
    8008:	91 58       	subi	r25, 0x81	; 129
    800a:	88 0f       	add	r24, r24
    800c:	96 95       	lsr	r25
    800e:	87 95       	ror	r24
    8010:	08 95       	ret

00008012 <square>:
    8012:	9b 01       	movw	r18, r22
    8014:	ac 01       	movw	r20, r24
    8016:	52 cf       	rjmp	.-348    	; 0x7ebc <__mulsf3>

00008018 <__unordsf2>:
    8018:	33 de       	rcall	.-922    	; 0x7c80 <__fp_cmp>
    801a:	88 0b       	sbc	r24, r24
    801c:	99 0b       	sbc	r25, r25
    801e:	08 95       	ret

00008020 <__fp_norm2>:
    8020:	91 50       	subi	r25, 0x01	; 1
    8022:	50 40       	sbci	r21, 0x00	; 0
    8024:	66 0f       	add	r22, r22
    8026:	77 1f       	adc	r23, r23
    8028:	88 1f       	adc	r24, r24
    802a:	d2 f7       	brpl	.-12     	; 0x8020 <__fp_norm2>
    802c:	08 95       	ret

0000802e <__fp_powsodd>:
    802e:	9f 93       	push	r25
    8030:	8f 93       	push	r24
    8032:	7f 93       	push	r23
    8034:	6f 93       	push	r22
    8036:	ff 93       	push	r31
    8038:	ef 93       	push	r30
    803a:	9b 01       	movw	r18, r22
    803c:	ac 01       	movw	r20, r24
    803e:	3e df       	rcall	.-388    	; 0x7ebc <__mulsf3>
    8040:	ef 91       	pop	r30
    8042:	ff 91       	pop	r31
    8044:	73 de       	rcall	.-794    	; 0x7d2c <__fp_powser>
    8046:	2f 91       	pop	r18
    8048:	3f 91       	pop	r19
    804a:	4f 91       	pop	r20
    804c:	5f 91       	pop	r21
    804e:	36 cf       	rjmp	.-404    	; 0x7ebc <__mulsf3>

00008050 <__muluhisi3>:
    8050:	0e 94 91 40 	call	0x8122	; 0x8122 <__umulhisi3>
    8054:	a5 9f       	mul	r26, r21
    8056:	90 0d       	add	r25, r0
    8058:	b4 9f       	mul	r27, r20
    805a:	90 0d       	add	r25, r0
    805c:	a4 9f       	mul	r26, r20
    805e:	80 0d       	add	r24, r0
    8060:	91 1d       	adc	r25, r1
    8062:	11 24       	eor	r1, r1
    8064:	08 95       	ret

00008066 <__udivmodqi4>:
    8066:	99 1b       	sub	r25, r25
    8068:	79 e0       	ldi	r23, 0x09	; 9
    806a:	04 c0       	rjmp	.+8      	; 0x8074 <__udivmodqi4_ep>

0000806c <__udivmodqi4_loop>:
    806c:	99 1f       	adc	r25, r25
    806e:	96 17       	cp	r25, r22
    8070:	08 f0       	brcs	.+2      	; 0x8074 <__udivmodqi4_ep>
    8072:	96 1b       	sub	r25, r22

00008074 <__udivmodqi4_ep>:
    8074:	88 1f       	adc	r24, r24
    8076:	7a 95       	dec	r23
    8078:	c9 f7       	brne	.-14     	; 0x806c <__udivmodqi4_loop>
    807a:	80 95       	com	r24
    807c:	08 95       	ret

0000807e <__divmodhi4>:
    807e:	97 fb       	bst	r25, 7
    8080:	07 2e       	mov	r0, r23
    8082:	16 f4       	brtc	.+4      	; 0x8088 <__divmodhi4+0xa>
    8084:	00 94       	com	r0
    8086:	07 d0       	rcall	.+14     	; 0x8096 <__divmodhi4_neg1>
    8088:	77 fd       	sbrc	r23, 7
    808a:	09 d0       	rcall	.+18     	; 0x809e <__divmodhi4_neg2>
    808c:	0e 94 9d 40 	call	0x813a	; 0x813a <__udivmodhi4>
    8090:	07 fc       	sbrc	r0, 7
    8092:	05 d0       	rcall	.+10     	; 0x809e <__divmodhi4_neg2>
    8094:	3e f4       	brtc	.+14     	; 0x80a4 <__divmodhi4_exit>

00008096 <__divmodhi4_neg1>:
    8096:	90 95       	com	r25
    8098:	81 95       	neg	r24
    809a:	9f 4f       	sbci	r25, 0xFF	; 255
    809c:	08 95       	ret

0000809e <__divmodhi4_neg2>:
    809e:	70 95       	com	r23
    80a0:	61 95       	neg	r22
    80a2:	7f 4f       	sbci	r23, 0xFF	; 255

000080a4 <__divmodhi4_exit>:
    80a4:	08 95       	ret

000080a6 <__udivmodsi4>:
    80a6:	a1 e2       	ldi	r26, 0x21	; 33
    80a8:	1a 2e       	mov	r1, r26
    80aa:	aa 1b       	sub	r26, r26
    80ac:	bb 1b       	sub	r27, r27
    80ae:	fd 01       	movw	r30, r26
    80b0:	0d c0       	rjmp	.+26     	; 0x80cc <__udivmodsi4_ep>

000080b2 <__udivmodsi4_loop>:
    80b2:	aa 1f       	adc	r26, r26
    80b4:	bb 1f       	adc	r27, r27
    80b6:	ee 1f       	adc	r30, r30
    80b8:	ff 1f       	adc	r31, r31
    80ba:	a2 17       	cp	r26, r18
    80bc:	b3 07       	cpc	r27, r19
    80be:	e4 07       	cpc	r30, r20
    80c0:	f5 07       	cpc	r31, r21
    80c2:	20 f0       	brcs	.+8      	; 0x80cc <__udivmodsi4_ep>
    80c4:	a2 1b       	sub	r26, r18
    80c6:	b3 0b       	sbc	r27, r19
    80c8:	e4 0b       	sbc	r30, r20
    80ca:	f5 0b       	sbc	r31, r21

000080cc <__udivmodsi4_ep>:
    80cc:	66 1f       	adc	r22, r22
    80ce:	77 1f       	adc	r23, r23
    80d0:	88 1f       	adc	r24, r24
    80d2:	99 1f       	adc	r25, r25
    80d4:	1a 94       	dec	r1
    80d6:	69 f7       	brne	.-38     	; 0x80b2 <__udivmodsi4_loop>
    80d8:	60 95       	com	r22
    80da:	70 95       	com	r23
    80dc:	80 95       	com	r24
    80de:	90 95       	com	r25
    80e0:	9b 01       	movw	r18, r22
    80e2:	ac 01       	movw	r20, r24
    80e4:	bd 01       	movw	r22, r26
    80e6:	cf 01       	movw	r24, r30
    80e8:	08 95       	ret

000080ea <__divmodsi4>:
    80ea:	05 2e       	mov	r0, r21
    80ec:	97 fb       	bst	r25, 7
    80ee:	16 f4       	brtc	.+4      	; 0x80f4 <__divmodsi4+0xa>
    80f0:	00 94       	com	r0
    80f2:	07 d0       	rcall	.+14     	; 0x8102 <__divmodsi4_neg1>
    80f4:	57 fd       	sbrc	r21, 7
    80f6:	0d d0       	rcall	.+26     	; 0x8112 <__divmodsi4_neg2>
    80f8:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__udivmodsi4>
    80fc:	07 fc       	sbrc	r0, 7
    80fe:	09 d0       	rcall	.+18     	; 0x8112 <__divmodsi4_neg2>
    8100:	7e f4       	brtc	.+30     	; 0x8120 <__divmodsi4_exit>

00008102 <__divmodsi4_neg1>:
    8102:	90 95       	com	r25
    8104:	80 95       	com	r24
    8106:	70 95       	com	r23
    8108:	61 95       	neg	r22
    810a:	7f 4f       	sbci	r23, 0xFF	; 255
    810c:	8f 4f       	sbci	r24, 0xFF	; 255
    810e:	9f 4f       	sbci	r25, 0xFF	; 255
    8110:	08 95       	ret

00008112 <__divmodsi4_neg2>:
    8112:	50 95       	com	r21
    8114:	40 95       	com	r20
    8116:	30 95       	com	r19
    8118:	21 95       	neg	r18
    811a:	3f 4f       	sbci	r19, 0xFF	; 255
    811c:	4f 4f       	sbci	r20, 0xFF	; 255
    811e:	5f 4f       	sbci	r21, 0xFF	; 255

00008120 <__divmodsi4_exit>:
    8120:	08 95       	ret

00008122 <__umulhisi3>:
    8122:	a2 9f       	mul	r26, r18
    8124:	b0 01       	movw	r22, r0
    8126:	b3 9f       	mul	r27, r19
    8128:	c0 01       	movw	r24, r0
    812a:	a3 9f       	mul	r26, r19
    812c:	01 d0       	rcall	.+2      	; 0x8130 <__umulhisi3+0xe>
    812e:	b2 9f       	mul	r27, r18
    8130:	70 0d       	add	r23, r0
    8132:	81 1d       	adc	r24, r1
    8134:	11 24       	eor	r1, r1
    8136:	91 1d       	adc	r25, r1
    8138:	08 95       	ret

0000813a <__udivmodhi4>:
    813a:	aa 1b       	sub	r26, r26
    813c:	bb 1b       	sub	r27, r27
    813e:	51 e1       	ldi	r21, 0x11	; 17
    8140:	07 c0       	rjmp	.+14     	; 0x8150 <__udivmodhi4_ep>

00008142 <__udivmodhi4_loop>:
    8142:	aa 1f       	adc	r26, r26
    8144:	bb 1f       	adc	r27, r27
    8146:	a6 17       	cp	r26, r22
    8148:	b7 07       	cpc	r27, r23
    814a:	10 f0       	brcs	.+4      	; 0x8150 <__udivmodhi4_ep>
    814c:	a6 1b       	sub	r26, r22
    814e:	b7 0b       	sbc	r27, r23

00008150 <__udivmodhi4_ep>:
    8150:	88 1f       	adc	r24, r24
    8152:	99 1f       	adc	r25, r25
    8154:	5a 95       	dec	r21
    8156:	a9 f7       	brne	.-22     	; 0x8142 <__udivmodhi4_loop>
    8158:	80 95       	com	r24
    815a:	90 95       	com	r25
    815c:	bc 01       	movw	r22, r24
    815e:	cd 01       	movw	r24, r26
    8160:	08 95       	ret

00008162 <__tablejump_elpm__>:
    8162:	07 90       	elpm	r0, Z+
    8164:	f6 91       	elpm	r31, Z+
    8166:	e0 2d       	mov	r30, r0
    8168:	09 94       	ijmp

0000816a <atof>:
    816a:	66 27       	eor	r22, r22
    816c:	77 27       	eor	r23, r23
    816e:	0c 94 66 42 	jmp	0x84cc	; 0x84cc <strtod>

00008172 <atoi>:
    8172:	fc 01       	movw	r30, r24
    8174:	88 27       	eor	r24, r24
    8176:	99 27       	eor	r25, r25
    8178:	e8 94       	clt
    817a:	21 91       	ld	r18, Z+
    817c:	20 32       	cpi	r18, 0x20	; 32
    817e:	e9 f3       	breq	.-6      	; 0x817a <atoi+0x8>
    8180:	29 30       	cpi	r18, 0x09	; 9
    8182:	10 f0       	brcs	.+4      	; 0x8188 <atoi+0x16>
    8184:	2e 30       	cpi	r18, 0x0E	; 14
    8186:	c8 f3       	brcs	.-14     	; 0x817a <atoi+0x8>
    8188:	2b 32       	cpi	r18, 0x2B	; 43
    818a:	41 f0       	breq	.+16     	; 0x819c <atoi+0x2a>
    818c:	2d 32       	cpi	r18, 0x2D	; 45
    818e:	39 f4       	brne	.+14     	; 0x819e <atoi+0x2c>
    8190:	68 94       	set
    8192:	04 c0       	rjmp	.+8      	; 0x819c <atoi+0x2a>
    8194:	0e 94 23 42 	call	0x8446	; 0x8446 <__mulhi_const_10>
    8198:	82 0f       	add	r24, r18
    819a:	91 1d       	adc	r25, r1
    819c:	21 91       	ld	r18, Z+
    819e:	20 53       	subi	r18, 0x30	; 48
    81a0:	2a 30       	cpi	r18, 0x0A	; 10
    81a2:	c0 f3       	brcs	.-16     	; 0x8194 <atoi+0x22>
    81a4:	1e f4       	brtc	.+6      	; 0x81ac <atoi+0x3a>
    81a6:	90 95       	com	r25
    81a8:	81 95       	neg	r24
    81aa:	9f 4f       	sbci	r25, 0xFF	; 255
    81ac:	08 95       	ret

000081ae <atol>:
    81ae:	1f 93       	push	r17
    81b0:	fc 01       	movw	r30, r24
    81b2:	99 27       	eor	r25, r25
    81b4:	88 27       	eor	r24, r24
    81b6:	bc 01       	movw	r22, r24
    81b8:	e8 94       	clt
    81ba:	11 91       	ld	r17, Z+
    81bc:	10 32       	cpi	r17, 0x20	; 32
    81be:	e9 f3       	breq	.-6      	; 0x81ba <atol+0xc>
    81c0:	19 30       	cpi	r17, 0x09	; 9
    81c2:	10 f0       	brcs	.+4      	; 0x81c8 <atol+0x1a>
    81c4:	1e 30       	cpi	r17, 0x0E	; 14
    81c6:	c8 f3       	brcs	.-14     	; 0x81ba <atol+0xc>
    81c8:	1b 32       	cpi	r17, 0x2B	; 43
    81ca:	51 f0       	breq	.+20     	; 0x81e0 <atol+0x32>
    81cc:	1d 32       	cpi	r17, 0x2D	; 45
    81ce:	49 f4       	brne	.+18     	; 0x81e2 <atol+0x34>
    81d0:	68 94       	set
    81d2:	06 c0       	rjmp	.+12     	; 0x81e0 <atol+0x32>
    81d4:	0e 94 0e 42 	call	0x841c	; 0x841c <__mulsi_const_10>
    81d8:	61 0f       	add	r22, r17
    81da:	71 1d       	adc	r23, r1
    81dc:	81 1d       	adc	r24, r1
    81de:	91 1d       	adc	r25, r1
    81e0:	11 91       	ld	r17, Z+
    81e2:	10 53       	subi	r17, 0x30	; 48
    81e4:	1a 30       	cpi	r17, 0x0A	; 10
    81e6:	b0 f3       	brcs	.-20     	; 0x81d4 <atol+0x26>
    81e8:	3e f4       	brtc	.+14     	; 0x81f8 <atol+0x4a>
    81ea:	90 95       	com	r25
    81ec:	80 95       	com	r24
    81ee:	70 95       	com	r23
    81f0:	61 95       	neg	r22
    81f2:	7f 4f       	sbci	r23, 0xFF	; 255
    81f4:	8f 4f       	sbci	r24, 0xFF	; 255
    81f6:	9f 4f       	sbci	r25, 0xFF	; 255
    81f8:	1f 91       	pop	r17
    81fa:	08 95       	ret

000081fc <isspace>:
    81fc:	91 11       	cpse	r25, r1
    81fe:	cb c2       	rjmp	.+1430   	; 0x8796 <__ctype_isfalse>
    8200:	80 32       	cpi	r24, 0x20	; 32
    8202:	19 f0       	breq	.+6      	; 0x820a <isspace+0xe>
    8204:	89 50       	subi	r24, 0x09	; 9
    8206:	85 50       	subi	r24, 0x05	; 5
    8208:	d0 f7       	brcc	.-12     	; 0x81fe <isspace+0x2>
    820a:	08 95       	ret

0000820c <tolower>:
    820c:	91 11       	cpse	r25, r1
    820e:	08 95       	ret
    8210:	81 54       	subi	r24, 0x41	; 65
    8212:	8a 51       	subi	r24, 0x1A	; 26
    8214:	08 f4       	brcc	.+2      	; 0x8218 <tolower+0xc>
    8216:	80 5e       	subi	r24, 0xE0	; 224
    8218:	85 5a       	subi	r24, 0xA5	; 165
    821a:	08 95       	ret

0000821c <toupper>:
    821c:	91 11       	cpse	r25, r1
    821e:	08 95       	ret
    8220:	81 56       	subi	r24, 0x61	; 97
    8222:	8a 51       	subi	r24, 0x1A	; 26
    8224:	08 f4       	brcc	.+2      	; 0x8228 <toupper+0xc>
    8226:	80 52       	subi	r24, 0x20	; 32
    8228:	85 58       	subi	r24, 0x85	; 133
    822a:	08 95       	ret

0000822c <strtok>:
    822c:	44 e1       	ldi	r20, 0x14	; 20
    822e:	58 e0       	ldi	r21, 0x08	; 8
    8230:	0c 94 92 41 	jmp	0x8324	; 0x8324 <strtok_r>

00008234 <memcpy>:
    8234:	fb 01       	movw	r30, r22
    8236:	dc 01       	movw	r26, r24
    8238:	02 c0       	rjmp	.+4      	; 0x823e <memcpy+0xa>
    823a:	01 90       	ld	r0, Z+
    823c:	0d 92       	st	X+, r0
    823e:	41 50       	subi	r20, 0x01	; 1
    8240:	50 40       	sbci	r21, 0x00	; 0
    8242:	d8 f7       	brcc	.-10     	; 0x823a <memcpy+0x6>
    8244:	08 95       	ret

00008246 <memmove>:
    8246:	68 17       	cp	r22, r24
    8248:	79 07       	cpc	r23, r25
    824a:	68 f4       	brcc	.+26     	; 0x8266 <memmove+0x20>
    824c:	fb 01       	movw	r30, r22
    824e:	dc 01       	movw	r26, r24
    8250:	e4 0f       	add	r30, r20
    8252:	f5 1f       	adc	r31, r21
    8254:	a4 0f       	add	r26, r20
    8256:	b5 1f       	adc	r27, r21
    8258:	02 c0       	rjmp	.+4      	; 0x825e <memmove+0x18>
    825a:	02 90       	ld	r0, -Z
    825c:	0e 92       	st	-X, r0
    825e:	41 50       	subi	r20, 0x01	; 1
    8260:	50 40       	sbci	r21, 0x00	; 0
    8262:	d8 f7       	brcc	.-10     	; 0x825a <memmove+0x14>
    8264:	08 95       	ret
    8266:	0c 94 1a 41 	jmp	0x8234	; 0x8234 <memcpy>

0000826a <strchr>:
    826a:	fc 01       	movw	r30, r24
    826c:	81 91       	ld	r24, Z+
    826e:	86 17       	cp	r24, r22
    8270:	21 f0       	breq	.+8      	; 0x827a <strchr+0x10>
    8272:	88 23       	and	r24, r24
    8274:	d9 f7       	brne	.-10     	; 0x826c <strchr+0x2>
    8276:	99 27       	eor	r25, r25
    8278:	08 95       	ret
    827a:	31 97       	sbiw	r30, 0x01	; 1
    827c:	cf 01       	movw	r24, r30
    827e:	08 95       	ret

00008280 <strcmp>:
    8280:	fb 01       	movw	r30, r22
    8282:	dc 01       	movw	r26, r24
    8284:	8d 91       	ld	r24, X+
    8286:	01 90       	ld	r0, Z+
    8288:	80 19       	sub	r24, r0
    828a:	01 10       	cpse	r0, r1
    828c:	d9 f3       	breq	.-10     	; 0x8284 <strcmp+0x4>
    828e:	99 0b       	sbc	r25, r25
    8290:	08 95       	ret

00008292 <strcpy>:
    8292:	fb 01       	movw	r30, r22
    8294:	dc 01       	movw	r26, r24
    8296:	01 90       	ld	r0, Z+
    8298:	0d 92       	st	X+, r0
    829a:	00 20       	and	r0, r0
    829c:	e1 f7       	brne	.-8      	; 0x8296 <strcpy+0x4>
    829e:	08 95       	ret

000082a0 <strncmp>:
    82a0:	fb 01       	movw	r30, r22
    82a2:	dc 01       	movw	r26, r24
    82a4:	41 50       	subi	r20, 0x01	; 1
    82a6:	50 40       	sbci	r21, 0x00	; 0
    82a8:	30 f0       	brcs	.+12     	; 0x82b6 <strncmp+0x16>
    82aa:	8d 91       	ld	r24, X+
    82ac:	01 90       	ld	r0, Z+
    82ae:	80 19       	sub	r24, r0
    82b0:	19 f4       	brne	.+6      	; 0x82b8 <strncmp+0x18>
    82b2:	00 20       	and	r0, r0
    82b4:	b9 f7       	brne	.-18     	; 0x82a4 <strncmp+0x4>
    82b6:	88 1b       	sub	r24, r24
    82b8:	99 0b       	sbc	r25, r25
    82ba:	08 95       	ret

000082bc <strncpy>:
    82bc:	fb 01       	movw	r30, r22
    82be:	dc 01       	movw	r26, r24
    82c0:	41 50       	subi	r20, 0x01	; 1
    82c2:	50 40       	sbci	r21, 0x00	; 0
    82c4:	48 f0       	brcs	.+18     	; 0x82d8 <strncpy+0x1c>
    82c6:	01 90       	ld	r0, Z+
    82c8:	0d 92       	st	X+, r0
    82ca:	00 20       	and	r0, r0
    82cc:	c9 f7       	brne	.-14     	; 0x82c0 <strncpy+0x4>
    82ce:	01 c0       	rjmp	.+2      	; 0x82d2 <strncpy+0x16>
    82d0:	1d 92       	st	X+, r1
    82d2:	41 50       	subi	r20, 0x01	; 1
    82d4:	50 40       	sbci	r21, 0x00	; 0
    82d6:	e0 f7       	brcc	.-8      	; 0x82d0 <strncpy+0x14>
    82d8:	08 95       	ret

000082da <strrchr>:
    82da:	fc 01       	movw	r30, r24
    82dc:	81 e0       	ldi	r24, 0x01	; 1
    82de:	90 e0       	ldi	r25, 0x00	; 0
    82e0:	01 90       	ld	r0, Z+
    82e2:	06 16       	cp	r0, r22
    82e4:	09 f4       	brne	.+2      	; 0x82e8 <strrchr+0xe>
    82e6:	cf 01       	movw	r24, r30
    82e8:	00 20       	and	r0, r0
    82ea:	d1 f7       	brne	.-12     	; 0x82e0 <strrchr+0x6>
    82ec:	01 97       	sbiw	r24, 0x01	; 1
    82ee:	08 95       	ret

000082f0 <strstr>:
    82f0:	fb 01       	movw	r30, r22
    82f2:	51 91       	ld	r21, Z+
    82f4:	55 23       	and	r21, r21
    82f6:	a9 f0       	breq	.+42     	; 0x8322 <strstr+0x32>
    82f8:	bf 01       	movw	r22, r30
    82fa:	dc 01       	movw	r26, r24
    82fc:	4d 91       	ld	r20, X+
    82fe:	45 17       	cp	r20, r21
    8300:	41 11       	cpse	r20, r1
    8302:	e1 f7       	brne	.-8      	; 0x82fc <strstr+0xc>
    8304:	59 f4       	brne	.+22     	; 0x831c <strstr+0x2c>
    8306:	cd 01       	movw	r24, r26
    8308:	01 90       	ld	r0, Z+
    830a:	00 20       	and	r0, r0
    830c:	49 f0       	breq	.+18     	; 0x8320 <strstr+0x30>
    830e:	4d 91       	ld	r20, X+
    8310:	40 15       	cp	r20, r0
    8312:	41 11       	cpse	r20, r1
    8314:	c9 f3       	breq	.-14     	; 0x8308 <strstr+0x18>
    8316:	fb 01       	movw	r30, r22
    8318:	41 11       	cpse	r20, r1
    831a:	ef cf       	rjmp	.-34     	; 0x82fa <strstr+0xa>
    831c:	81 e0       	ldi	r24, 0x01	; 1
    831e:	90 e0       	ldi	r25, 0x00	; 0
    8320:	01 97       	sbiw	r24, 0x01	; 1
    8322:	08 95       	ret

00008324 <strtok_r>:
    8324:	fa 01       	movw	r30, r20
    8326:	a1 91       	ld	r26, Z+
    8328:	b0 81       	ld	r27, Z
    832a:	00 97       	sbiw	r24, 0x00	; 0
    832c:	19 f4       	brne	.+6      	; 0x8334 <strtok_r+0x10>
    832e:	10 97       	sbiw	r26, 0x00	; 0
    8330:	e1 f0       	breq	.+56     	; 0x836a <strtok_r+0x46>
    8332:	cd 01       	movw	r24, r26
    8334:	dc 01       	movw	r26, r24
    8336:	cd 01       	movw	r24, r26
    8338:	0d 90       	ld	r0, X+
    833a:	00 20       	and	r0, r0
    833c:	11 f4       	brne	.+4      	; 0x8342 <strtok_r+0x1e>
    833e:	c0 01       	movw	r24, r0
    8340:	13 c0       	rjmp	.+38     	; 0x8368 <strtok_r+0x44>
    8342:	fb 01       	movw	r30, r22
    8344:	21 91       	ld	r18, Z+
    8346:	22 23       	and	r18, r18
    8348:	19 f0       	breq	.+6      	; 0x8350 <strtok_r+0x2c>
    834a:	20 15       	cp	r18, r0
    834c:	d9 f7       	brne	.-10     	; 0x8344 <strtok_r+0x20>
    834e:	f3 cf       	rjmp	.-26     	; 0x8336 <strtok_r+0x12>
    8350:	fb 01       	movw	r30, r22
    8352:	21 91       	ld	r18, Z+
    8354:	20 15       	cp	r18, r0
    8356:	19 f4       	brne	.+6      	; 0x835e <strtok_r+0x3a>
    8358:	1e 92       	st	-X, r1
    835a:	11 96       	adiw	r26, 0x01	; 1
    835c:	06 c0       	rjmp	.+12     	; 0x836a <strtok_r+0x46>
    835e:	22 23       	and	r18, r18
    8360:	c1 f7       	brne	.-16     	; 0x8352 <strtok_r+0x2e>
    8362:	0d 90       	ld	r0, X+
    8364:	00 20       	and	r0, r0
    8366:	a1 f7       	brne	.-24     	; 0x8350 <strtok_r+0x2c>
    8368:	d0 01       	movw	r26, r0
    836a:	fa 01       	movw	r30, r20
    836c:	a1 93       	st	Z+, r26
    836e:	b0 83       	st	Z, r27
    8370:	08 95       	ret

00008372 <itoa>:
    8372:	fb 01       	movw	r30, r22
    8374:	9f 01       	movw	r18, r30
    8376:	e8 94       	clt
    8378:	42 30       	cpi	r20, 0x02	; 2
    837a:	c4 f0       	brlt	.+48     	; 0x83ac <itoa+0x3a>
    837c:	45 32       	cpi	r20, 0x25	; 37
    837e:	b4 f4       	brge	.+44     	; 0x83ac <itoa+0x3a>
    8380:	4a 30       	cpi	r20, 0x0A	; 10
    8382:	29 f4       	brne	.+10     	; 0x838e <itoa+0x1c>
    8384:	97 fb       	bst	r25, 7
    8386:	1e f4       	brtc	.+6      	; 0x838e <itoa+0x1c>
    8388:	90 95       	com	r25
    838a:	81 95       	neg	r24
    838c:	9f 4f       	sbci	r25, 0xFF	; 255
    838e:	64 2f       	mov	r22, r20
    8390:	77 27       	eor	r23, r23
    8392:	0e 94 9d 40 	call	0x813a	; 0x813a <__udivmodhi4>
    8396:	80 5d       	subi	r24, 0xD0	; 208
    8398:	8a 33       	cpi	r24, 0x3A	; 58
    839a:	0c f0       	brlt	.+2      	; 0x839e <itoa+0x2c>
    839c:	89 5d       	subi	r24, 0xD9	; 217
    839e:	81 93       	st	Z+, r24
    83a0:	cb 01       	movw	r24, r22
    83a2:	00 97       	sbiw	r24, 0x00	; 0
    83a4:	a1 f7       	brne	.-24     	; 0x838e <itoa+0x1c>
    83a6:	16 f4       	brtc	.+4      	; 0x83ac <itoa+0x3a>
    83a8:	5d e2       	ldi	r21, 0x2D	; 45
    83aa:	51 93       	st	Z+, r21
    83ac:	10 82       	st	Z, r1
    83ae:	c9 01       	movw	r24, r18
    83b0:	0c 94 e6 43 	jmp	0x87cc	; 0x87cc <strrev>

000083b4 <ltoa>:
    83b4:	fa 01       	movw	r30, r20
    83b6:	cf 93       	push	r28
    83b8:	ff 93       	push	r31
    83ba:	ef 93       	push	r30
    83bc:	22 30       	cpi	r18, 0x02	; 2
    83be:	44 f1       	brlt	.+80     	; 0x8410 <ltoa+0x5c>
    83c0:	25 32       	cpi	r18, 0x25	; 37
    83c2:	34 f5       	brge	.+76     	; 0x8410 <ltoa+0x5c>
    83c4:	c2 2f       	mov	r28, r18
    83c6:	e8 94       	clt
    83c8:	ca 30       	cpi	r28, 0x0A	; 10
    83ca:	49 f4       	brne	.+18     	; 0x83de <ltoa+0x2a>
    83cc:	97 fb       	bst	r25, 7
    83ce:	3e f4       	brtc	.+14     	; 0x83de <ltoa+0x2a>
    83d0:	90 95       	com	r25
    83d2:	80 95       	com	r24
    83d4:	70 95       	com	r23
    83d6:	61 95       	neg	r22
    83d8:	7f 4f       	sbci	r23, 0xFF	; 255
    83da:	8f 4f       	sbci	r24, 0xFF	; 255
    83dc:	9f 4f       	sbci	r25, 0xFF	; 255
    83de:	2c 2f       	mov	r18, r28
    83e0:	33 27       	eor	r19, r19
    83e2:	44 27       	eor	r20, r20
    83e4:	55 27       	eor	r21, r21
    83e6:	ff 93       	push	r31
    83e8:	ef 93       	push	r30
    83ea:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__udivmodsi4>
    83ee:	ef 91       	pop	r30
    83f0:	ff 91       	pop	r31
    83f2:	60 5d       	subi	r22, 0xD0	; 208
    83f4:	6a 33       	cpi	r22, 0x3A	; 58
    83f6:	0c f0       	brlt	.+2      	; 0x83fa <ltoa+0x46>
    83f8:	69 5d       	subi	r22, 0xD9	; 217
    83fa:	61 93       	st	Z+, r22
    83fc:	b9 01       	movw	r22, r18
    83fe:	ca 01       	movw	r24, r20
    8400:	60 50       	subi	r22, 0x00	; 0
    8402:	70 40       	sbci	r23, 0x00	; 0
    8404:	80 40       	sbci	r24, 0x00	; 0
    8406:	90 40       	sbci	r25, 0x00	; 0
    8408:	51 f7       	brne	.-44     	; 0x83de <ltoa+0x2a>
    840a:	16 f4       	brtc	.+4      	; 0x8410 <ltoa+0x5c>
    840c:	cd e2       	ldi	r28, 0x2D	; 45
    840e:	c1 93       	st	Z+, r28
    8410:	10 82       	st	Z, r1
    8412:	8f 91       	pop	r24
    8414:	9f 91       	pop	r25
    8416:	cf 91       	pop	r28
    8418:	0c 94 e6 43 	jmp	0x87cc	; 0x87cc <strrev>

0000841c <__mulsi_const_10>:
    841c:	59 2f       	mov	r21, r25
    841e:	48 2f       	mov	r20, r24
    8420:	37 2f       	mov	r19, r23
    8422:	26 2f       	mov	r18, r22
    8424:	66 0f       	add	r22, r22
    8426:	77 1f       	adc	r23, r23
    8428:	88 1f       	adc	r24, r24
    842a:	99 1f       	adc	r25, r25
    842c:	66 0f       	add	r22, r22
    842e:	77 1f       	adc	r23, r23
    8430:	88 1f       	adc	r24, r24
    8432:	99 1f       	adc	r25, r25
    8434:	62 0f       	add	r22, r18
    8436:	73 1f       	adc	r23, r19
    8438:	84 1f       	adc	r24, r20
    843a:	95 1f       	adc	r25, r21
    843c:	66 0f       	add	r22, r22
    843e:	77 1f       	adc	r23, r23
    8440:	88 1f       	adc	r24, r24
    8442:	99 1f       	adc	r25, r25
    8444:	08 95       	ret

00008446 <__mulhi_const_10>:
    8446:	7a e0       	ldi	r23, 0x0A	; 10
    8448:	97 9f       	mul	r25, r23
    844a:	90 2d       	mov	r25, r0
    844c:	87 9f       	mul	r24, r23
    844e:	80 2d       	mov	r24, r0
    8450:	91 0d       	add	r25, r1
    8452:	11 24       	eor	r1, r1
    8454:	08 95       	ret

00008456 <ultoa>:
    8456:	fa 01       	movw	r30, r20
    8458:	cf 93       	push	r28
    845a:	ff 93       	push	r31
    845c:	ef 93       	push	r30
    845e:	22 30       	cpi	r18, 0x02	; 2
    8460:	cc f0       	brlt	.+50     	; 0x8494 <ultoa+0x3e>
    8462:	25 32       	cpi	r18, 0x25	; 37
    8464:	bc f4       	brge	.+46     	; 0x8494 <ultoa+0x3e>
    8466:	c2 2f       	mov	r28, r18
    8468:	2c 2f       	mov	r18, r28
    846a:	33 27       	eor	r19, r19
    846c:	44 27       	eor	r20, r20
    846e:	55 27       	eor	r21, r21
    8470:	ff 93       	push	r31
    8472:	ef 93       	push	r30
    8474:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__udivmodsi4>
    8478:	ef 91       	pop	r30
    847a:	ff 91       	pop	r31
    847c:	60 5d       	subi	r22, 0xD0	; 208
    847e:	6a 33       	cpi	r22, 0x3A	; 58
    8480:	0c f0       	brlt	.+2      	; 0x8484 <ultoa+0x2e>
    8482:	69 5d       	subi	r22, 0xD9	; 217
    8484:	61 93       	st	Z+, r22
    8486:	b9 01       	movw	r22, r18
    8488:	ca 01       	movw	r24, r20
    848a:	60 50       	subi	r22, 0x00	; 0
    848c:	70 40       	sbci	r23, 0x00	; 0
    848e:	80 40       	sbci	r24, 0x00	; 0
    8490:	90 40       	sbci	r25, 0x00	; 0
    8492:	51 f7       	brne	.-44     	; 0x8468 <ultoa+0x12>
    8494:	10 82       	st	Z, r1
    8496:	8f 91       	pop	r24
    8498:	9f 91       	pop	r25
    849a:	cf 91       	pop	r28
    849c:	0c 94 e6 43 	jmp	0x87cc	; 0x87cc <strrev>

000084a0 <utoa>:
    84a0:	fb 01       	movw	r30, r22
    84a2:	9f 01       	movw	r18, r30
    84a4:	42 30       	cpi	r20, 0x02	; 2
    84a6:	74 f0       	brlt	.+28     	; 0x84c4 <utoa+0x24>
    84a8:	45 32       	cpi	r20, 0x25	; 37
    84aa:	64 f4       	brge	.+24     	; 0x84c4 <utoa+0x24>
    84ac:	64 2f       	mov	r22, r20
    84ae:	77 27       	eor	r23, r23
    84b0:	0e 94 9d 40 	call	0x813a	; 0x813a <__udivmodhi4>
    84b4:	80 5d       	subi	r24, 0xD0	; 208
    84b6:	8a 33       	cpi	r24, 0x3A	; 58
    84b8:	0c f0       	brlt	.+2      	; 0x84bc <utoa+0x1c>
    84ba:	89 5d       	subi	r24, 0xD9	; 217
    84bc:	81 93       	st	Z+, r24
    84be:	cb 01       	movw	r24, r22
    84c0:	00 97       	sbiw	r24, 0x00	; 0
    84c2:	a1 f7       	brne	.-24     	; 0x84ac <utoa+0xc>
    84c4:	10 82       	st	Z, r1
    84c6:	c9 01       	movw	r24, r18
    84c8:	0c 94 e6 43 	jmp	0x87cc	; 0x87cc <strrev>

000084cc <strtod>:
    84cc:	8f 92       	push	r8
    84ce:	9f 92       	push	r9
    84d0:	af 92       	push	r10
    84d2:	bf 92       	push	r11
    84d4:	cf 92       	push	r12
    84d6:	df 92       	push	r13
    84d8:	ef 92       	push	r14
    84da:	ff 92       	push	r15
    84dc:	0f 93       	push	r16
    84de:	1f 93       	push	r17
    84e0:	cf 93       	push	r28
    84e2:	df 93       	push	r29
    84e4:	8b 01       	movw	r16, r22
    84e6:	61 15       	cp	r22, r1
    84e8:	71 05       	cpc	r23, r1
    84ea:	19 f0       	breq	.+6      	; 0x84f2 <strtod+0x26>
    84ec:	fb 01       	movw	r30, r22
    84ee:	80 83       	st	Z, r24
    84f0:	91 83       	std	Z+1, r25	; 0x01
    84f2:	7c 01       	movw	r14, r24
    84f4:	f7 01       	movw	r30, r14
    84f6:	c1 90       	ld	r12, Z+
    84f8:	7f 01       	movw	r14, r30
    84fa:	ef 01       	movw	r28, r30
    84fc:	8c 2d       	mov	r24, r12
    84fe:	90 e0       	ldi	r25, 0x00	; 0
    8500:	0e 94 fe 40 	call	0x81fc	; 0x81fc <isspace>
    8504:	89 2b       	or	r24, r25
    8506:	b1 f7       	brne	.-20     	; 0x84f4 <strtod+0x28>
    8508:	fd e2       	ldi	r31, 0x2D	; 45
    850a:	cf 12       	cpse	r12, r31
    850c:	04 c0       	rjmp	.+8      	; 0x8516 <strtod+0x4a>
    850e:	c9 90       	ld	r12, Y+
    8510:	dd 24       	eor	r13, r13
    8512:	d3 94       	inc	r13
    8514:	05 c0       	rjmp	.+10     	; 0x8520 <strtod+0x54>
    8516:	2b e2       	ldi	r18, 0x2B	; 43
    8518:	c2 12       	cpse	r12, r18
    851a:	01 c0       	rjmp	.+2      	; 0x851e <strtod+0x52>
    851c:	c9 90       	ld	r12, Y+
    851e:	d1 2c       	mov	r13, r1
    8520:	7e 01       	movw	r14, r28
    8522:	41 e0       	ldi	r20, 0x01	; 1
    8524:	e4 1a       	sub	r14, r20
    8526:	f1 08       	sbc	r15, r1
    8528:	43 e0       	ldi	r20, 0x03	; 3
    852a:	50 e0       	ldi	r21, 0x00	; 0
    852c:	6f e4       	ldi	r22, 0x4F	; 79
    852e:	72 e0       	ldi	r23, 0x02	; 2
    8530:	c7 01       	movw	r24, r14
    8532:	0e 94 ce 43 	call	0x879c	; 0x879c <strncasecmp_P>
    8536:	89 2b       	or	r24, r25
    8538:	e9 f4       	brne	.+58     	; 0x8574 <strtod+0xa8>
    853a:	7e 01       	movw	r14, r28
    853c:	82 e0       	ldi	r24, 0x02	; 2
    853e:	e8 0e       	add	r14, r24
    8540:	f1 1c       	adc	r15, r1
    8542:	45 e0       	ldi	r20, 0x05	; 5
    8544:	50 e0       	ldi	r21, 0x00	; 0
    8546:	62 e5       	ldi	r22, 0x52	; 82
    8548:	72 e0       	ldi	r23, 0x02	; 2
    854a:	c7 01       	movw	r24, r14
    854c:	0e 94 ce 43 	call	0x879c	; 0x879c <strncasecmp_P>
    8550:	89 2b       	or	r24, r25
    8552:	21 f4       	brne	.+8      	; 0x855c <strtod+0x90>
    8554:	7e 01       	movw	r14, r28
    8556:	e7 e0       	ldi	r30, 0x07	; 7
    8558:	ee 0e       	add	r14, r30
    855a:	f1 1c       	adc	r15, r1
    855c:	01 15       	cp	r16, r1
    855e:	11 05       	cpc	r17, r1
    8560:	19 f0       	breq	.+6      	; 0x8568 <strtod+0x9c>
    8562:	f8 01       	movw	r30, r16
    8564:	f1 82       	std	Z+1, r15	; 0x01
    8566:	e0 82       	st	Z, r14
    8568:	10 e0       	ldi	r17, 0x00	; 0
    856a:	d0 e0       	ldi	r29, 0x00	; 0
    856c:	c0 e8       	ldi	r28, 0x80	; 128
    856e:	d1 10       	cpse	r13, r1
    8570:	fb c0       	rjmp	.+502    	; 0x8768 <strtod+0x29c>
    8572:	ff c0       	rjmp	.+510    	; 0x8772 <strtod+0x2a6>
    8574:	43 e0       	ldi	r20, 0x03	; 3
    8576:	50 e0       	ldi	r21, 0x00	; 0
    8578:	67 e5       	ldi	r22, 0x57	; 87
    857a:	72 e0       	ldi	r23, 0x02	; 2
    857c:	c7 01       	movw	r24, r14
    857e:	0e 94 ce 43 	call	0x879c	; 0x879c <strncasecmp_P>
    8582:	89 2b       	or	r24, r25
    8584:	49 f4       	brne	.+18     	; 0x8598 <strtod+0xcc>
    8586:	01 15       	cp	r16, r1
    8588:	11 05       	cpc	r17, r1
    858a:	09 f4       	brne	.+2      	; 0x858e <strtod+0xc2>
    858c:	ef c0       	rjmp	.+478    	; 0x876c <strtod+0x2a0>
    858e:	22 96       	adiw	r28, 0x02	; 2
    8590:	f8 01       	movw	r30, r16
    8592:	d1 83       	std	Z+1, r29	; 0x01
    8594:	c0 83       	st	Z, r28
    8596:	ea c0       	rjmp	.+468    	; 0x876c <strtod+0x2a0>
    8598:	60 e0       	ldi	r22, 0x00	; 0
    859a:	70 e0       	ldi	r23, 0x00	; 0
    859c:	cb 01       	movw	r24, r22
    859e:	e1 2c       	mov	r14, r1
    85a0:	f1 2c       	mov	r15, r1
    85a2:	ec 2d       	mov	r30, r12
    85a4:	e0 53       	subi	r30, 0x30	; 48
    85a6:	ea 30       	cpi	r30, 0x0A	; 10
    85a8:	48 f5       	brcc	.+82     	; 0x85fc <strtod+0x130>
    85aa:	fd 2d       	mov	r31, r13
    85ac:	f2 60       	ori	r31, 0x02	; 2
    85ae:	2d 2d       	mov	r18, r13
    85b0:	28 70       	andi	r18, 0x08	; 8
    85b2:	d2 fe       	sbrs	r13, 2
    85b4:	06 c0       	rjmp	.+12     	; 0x85c2 <strtod+0xf6>
    85b6:	21 11       	cpse	r18, r1
    85b8:	27 c0       	rjmp	.+78     	; 0x8608 <strtod+0x13c>
    85ba:	2f ef       	ldi	r18, 0xFF	; 255
    85bc:	e2 1a       	sub	r14, r18
    85be:	f2 0a       	sbc	r15, r18
    85c0:	23 c0       	rjmp	.+70     	; 0x8608 <strtod+0x13c>
    85c2:	22 23       	and	r18, r18
    85c4:	19 f0       	breq	.+6      	; 0x85cc <strtod+0x100>
    85c6:	41 e0       	ldi	r20, 0x01	; 1
    85c8:	e4 1a       	sub	r14, r20
    85ca:	f1 08       	sbc	r15, r1
    85cc:	a5 e0       	ldi	r26, 0x05	; 5
    85ce:	b0 e0       	ldi	r27, 0x00	; 0
    85d0:	9b 01       	movw	r18, r22
    85d2:	ac 01       	movw	r20, r24
    85d4:	0e 94 28 40 	call	0x8050	; 0x8050 <__muluhisi3>
    85d8:	66 0f       	add	r22, r22
    85da:	77 1f       	adc	r23, r23
    85dc:	88 1f       	adc	r24, r24
    85de:	99 1f       	adc	r25, r25
    85e0:	6e 0f       	add	r22, r30
    85e2:	71 1d       	adc	r23, r1
    85e4:	81 1d       	adc	r24, r1
    85e6:	91 1d       	adc	r25, r1
    85e8:	68 39       	cpi	r22, 0x98	; 152
    85ea:	e9 e9       	ldi	r30, 0x99	; 153
    85ec:	7e 07       	cpc	r23, r30
    85ee:	8e 07       	cpc	r24, r30
    85f0:	e9 e1       	ldi	r30, 0x19	; 25
    85f2:	9e 07       	cpc	r25, r30
    85f4:	48 f0       	brcs	.+18     	; 0x8608 <strtod+0x13c>
    85f6:	fd 2d       	mov	r31, r13
    85f8:	f6 60       	ori	r31, 0x06	; 6
    85fa:	06 c0       	rjmp	.+12     	; 0x8608 <strtod+0x13c>
    85fc:	ee 3f       	cpi	r30, 0xFE	; 254
    85fe:	39 f4       	brne	.+14     	; 0x860e <strtod+0x142>
    8600:	d3 fc       	sbrc	r13, 3
    8602:	3d c0       	rjmp	.+122    	; 0x867e <strtod+0x1b2>
    8604:	fd 2d       	mov	r31, r13
    8606:	f8 60       	ori	r31, 0x08	; 8
    8608:	c9 90       	ld	r12, Y+
    860a:	df 2e       	mov	r13, r31
    860c:	ca cf       	rjmp	.-108    	; 0x85a2 <strtod+0xd6>
    860e:	e5 33       	cpi	r30, 0x35	; 53
    8610:	11 f0       	breq	.+4      	; 0x8616 <strtod+0x14a>
    8612:	e5 31       	cpi	r30, 0x15	; 21
    8614:	a1 f5       	brne	.+104    	; 0x867e <strtod+0x1b2>
    8616:	a8 81       	ld	r26, Y
    8618:	ad 32       	cpi	r26, 0x2D	; 45
    861a:	19 f4       	brne	.+6      	; 0x8622 <strtod+0x156>
    861c:	f0 e1       	ldi	r31, 0x10	; 16
    861e:	df 2a       	or	r13, r31
    8620:	06 c0       	rjmp	.+12     	; 0x862e <strtod+0x162>
    8622:	ab 32       	cpi	r26, 0x2B	; 43
    8624:	21 f0       	breq	.+8      	; 0x862e <strtod+0x162>
    8626:	21 96       	adiw	r28, 0x01	; 1
    8628:	21 e0       	ldi	r18, 0x01	; 1
    862a:	30 e0       	ldi	r19, 0x00	; 0
    862c:	04 c0       	rjmp	.+8      	; 0x8636 <strtod+0x16a>
    862e:	a9 81       	ldd	r26, Y+1	; 0x01
    8630:	22 96       	adiw	r28, 0x02	; 2
    8632:	22 e0       	ldi	r18, 0x02	; 2
    8634:	30 e0       	ldi	r19, 0x00	; 0
    8636:	a0 53       	subi	r26, 0x30	; 48
    8638:	aa 30       	cpi	r26, 0x0A	; 10
    863a:	18 f0       	brcs	.+6      	; 0x8642 <strtod+0x176>
    863c:	c2 1b       	sub	r28, r18
    863e:	d3 0b       	sbc	r29, r19
    8640:	1e c0       	rjmp	.+60     	; 0x867e <strtod+0x1b2>
    8642:	fe 01       	movw	r30, r28
    8644:	20 e0       	ldi	r18, 0x00	; 0
    8646:	30 e0       	ldi	r19, 0x00	; 0
    8648:	20 38       	cpi	r18, 0x80	; 128
    864a:	4c e0       	ldi	r20, 0x0C	; 12
    864c:	34 07       	cpc	r19, r20
    864e:	5c f4       	brge	.+22     	; 0x8666 <strtod+0x19a>
    8650:	a9 01       	movw	r20, r18
    8652:	44 0f       	add	r20, r20
    8654:	55 1f       	adc	r21, r21
    8656:	44 0f       	add	r20, r20
    8658:	55 1f       	adc	r21, r21
    865a:	24 0f       	add	r18, r20
    865c:	35 1f       	adc	r19, r21
    865e:	22 0f       	add	r18, r18
    8660:	33 1f       	adc	r19, r19
    8662:	2a 0f       	add	r18, r26
    8664:	31 1d       	adc	r19, r1
    8666:	a1 91       	ld	r26, Z+
    8668:	a0 53       	subi	r26, 0x30	; 48
    866a:	ef 01       	movw	r28, r30
    866c:	aa 30       	cpi	r26, 0x0A	; 10
    866e:	60 f3       	brcs	.-40     	; 0x8648 <strtod+0x17c>
    8670:	d4 fe       	sbrs	r13, 4
    8672:	03 c0       	rjmp	.+6      	; 0x867a <strtod+0x1ae>
    8674:	31 95       	neg	r19
    8676:	21 95       	neg	r18
    8678:	31 09       	sbc	r19, r1
    867a:	e2 0e       	add	r14, r18
    867c:	f3 1e       	adc	r15, r19
    867e:	d1 fe       	sbrs	r13, 1
    8680:	07 c0       	rjmp	.+14     	; 0x8690 <strtod+0x1c4>
    8682:	01 15       	cp	r16, r1
    8684:	11 05       	cpc	r17, r1
    8686:	21 f0       	breq	.+8      	; 0x8690 <strtod+0x1c4>
    8688:	21 97       	sbiw	r28, 0x01	; 1
    868a:	f8 01       	movw	r30, r16
    868c:	d1 83       	std	Z+1, r29	; 0x01
    868e:	c0 83       	st	Z, r28
    8690:	0e 94 f0 3d 	call	0x7be0	; 0x7be0 <__floatunsisf>
    8694:	2d 2d       	mov	r18, r13
    8696:	23 70       	andi	r18, 0x03	; 3
    8698:	23 30       	cpi	r18, 0x03	; 3
    869a:	29 f0       	breq	.+10     	; 0x86a6 <strtod+0x1da>
    869c:	16 2f       	mov	r17, r22
    869e:	d7 2f       	mov	r29, r23
    86a0:	c8 2f       	mov	r28, r24
    86a2:	09 2f       	mov	r16, r25
    86a4:	07 c0       	rjmp	.+14     	; 0x86b4 <strtod+0x1e8>
    86a6:	dc 01       	movw	r26, r24
    86a8:	cb 01       	movw	r24, r22
    86aa:	b0 58       	subi	r27, 0x80	; 128
    86ac:	18 2f       	mov	r17, r24
    86ae:	d9 2f       	mov	r29, r25
    86b0:	ca 2f       	mov	r28, r26
    86b2:	0b 2f       	mov	r16, r27
    86b4:	20 e0       	ldi	r18, 0x00	; 0
    86b6:	30 e0       	ldi	r19, 0x00	; 0
    86b8:	a9 01       	movw	r20, r18
    86ba:	61 2f       	mov	r22, r17
    86bc:	7d 2f       	mov	r23, r29
    86be:	8c 2f       	mov	r24, r28
    86c0:	90 2f       	mov	r25, r16
    86c2:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    86c6:	88 23       	and	r24, r24
    86c8:	09 f4       	brne	.+2      	; 0x86cc <strtod+0x200>
    86ca:	54 c0       	rjmp	.+168    	; 0x8774 <strtod+0x2a8>
    86cc:	f7 fe       	sbrs	r15, 7
    86ce:	08 c0       	rjmp	.+16     	; 0x86e0 <strtod+0x214>
    86d0:	f1 94       	neg	r15
    86d2:	e1 94       	neg	r14
    86d4:	f1 08       	sbc	r15, r1
    86d6:	36 e8       	ldi	r19, 0x86	; 134
    86d8:	c3 2e       	mov	r12, r19
    86da:	32 e0       	ldi	r19, 0x02	; 2
    86dc:	d3 2e       	mov	r13, r19
    86de:	04 c0       	rjmp	.+8      	; 0x86e8 <strtod+0x21c>
    86e0:	2e e6       	ldi	r18, 0x6E	; 110
    86e2:	c2 2e       	mov	r12, r18
    86e4:	22 e0       	ldi	r18, 0x02	; 2
    86e6:	d2 2e       	mov	r13, r18
    86e8:	46 01       	movw	r8, r12
    86ea:	f8 e1       	ldi	r31, 0x18	; 24
    86ec:	8f 1a       	sub	r8, r31
    86ee:	91 08       	sbc	r9, r1
    86f0:	90 e2       	ldi	r25, 0x20	; 32
    86f2:	a9 2e       	mov	r10, r25
    86f4:	b1 2c       	mov	r11, r1
    86f6:	15 c0       	rjmp	.+42     	; 0x8722 <strtod+0x256>
    86f8:	f6 01       	movw	r30, r12
    86fa:	45 91       	lpm	r20, Z+
    86fc:	55 91       	lpm	r21, Z+
    86fe:	65 91       	lpm	r22, Z+
    8700:	74 91       	lpm	r23, Z+
    8702:	24 2f       	mov	r18, r20
    8704:	35 2f       	mov	r19, r21
    8706:	46 2f       	mov	r20, r22
    8708:	57 2f       	mov	r21, r23
    870a:	61 2f       	mov	r22, r17
    870c:	7d 2f       	mov	r23, r29
    870e:	8c 2f       	mov	r24, r28
    8710:	90 2f       	mov	r25, r16
    8712:	0e 94 5e 3f 	call	0x7ebc	; 0x7ebc <__mulsf3>
    8716:	16 2f       	mov	r17, r22
    8718:	d7 2f       	mov	r29, r23
    871a:	c8 2f       	mov	r28, r24
    871c:	09 2f       	mov	r16, r25
    871e:	ea 18       	sub	r14, r10
    8720:	fb 08       	sbc	r15, r11
    8722:	ea 14       	cp	r14, r10
    8724:	fb 04       	cpc	r15, r11
    8726:	44 f7       	brge	.-48     	; 0x86f8 <strtod+0x22c>
    8728:	24 e0       	ldi	r18, 0x04	; 4
    872a:	c2 1a       	sub	r12, r18
    872c:	d1 08       	sbc	r13, r1
    872e:	b5 94       	asr	r11
    8730:	a7 94       	ror	r10
    8732:	c8 14       	cp	r12, r8
    8734:	d9 04       	cpc	r13, r9
    8736:	a9 f7       	brne	.-22     	; 0x8722 <strtod+0x256>
    8738:	61 2f       	mov	r22, r17
    873a:	7d 2f       	mov	r23, r29
    873c:	8c 2f       	mov	r24, r28
    873e:	90 2f       	mov	r25, r16
    8740:	28 2f       	mov	r18, r24
    8742:	22 0f       	add	r18, r18
    8744:	29 2f       	mov	r18, r25
    8746:	22 1f       	adc	r18, r18
    8748:	2f 3f       	cpi	r18, 0xFF	; 255
    874a:	39 f0       	breq	.+14     	; 0x875a <strtod+0x28e>
    874c:	20 e0       	ldi	r18, 0x00	; 0
    874e:	30 e0       	ldi	r19, 0x00	; 0
    8750:	a9 01       	movw	r20, r18
    8752:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__cmpsf2>
    8756:	81 11       	cpse	r24, r1
    8758:	0d c0       	rjmp	.+26     	; 0x8774 <strtod+0x2a8>
    875a:	82 e2       	ldi	r24, 0x22	; 34
    875c:	90 e0       	ldi	r25, 0x00	; 0
    875e:	90 93 ba 10 	sts	0x10BA, r25
    8762:	80 93 b9 10 	sts	0x10B9, r24
    8766:	06 c0       	rjmp	.+12     	; 0x8774 <strtod+0x2a8>
    8768:	0f ef       	ldi	r16, 0xFF	; 255
    876a:	04 c0       	rjmp	.+8      	; 0x8774 <strtod+0x2a8>
    876c:	10 e0       	ldi	r17, 0x00	; 0
    876e:	d0 e0       	ldi	r29, 0x00	; 0
    8770:	c0 ec       	ldi	r28, 0xC0	; 192
    8772:	0f e7       	ldi	r16, 0x7F	; 127
    8774:	61 2f       	mov	r22, r17
    8776:	7d 2f       	mov	r23, r29
    8778:	8c 2f       	mov	r24, r28
    877a:	90 2f       	mov	r25, r16
    877c:	df 91       	pop	r29
    877e:	cf 91       	pop	r28
    8780:	1f 91       	pop	r17
    8782:	0f 91       	pop	r16
    8784:	ff 90       	pop	r15
    8786:	ef 90       	pop	r14
    8788:	df 90       	pop	r13
    878a:	cf 90       	pop	r12
    878c:	bf 90       	pop	r11
    878e:	af 90       	pop	r10
    8790:	9f 90       	pop	r9
    8792:	8f 90       	pop	r8
    8794:	08 95       	ret

00008796 <__ctype_isfalse>:
    8796:	99 27       	eor	r25, r25
    8798:	88 27       	eor	r24, r24

0000879a <__ctype_istrue>:
    879a:	08 95       	ret

0000879c <strncasecmp_P>:
    879c:	fb 01       	movw	r30, r22
    879e:	dc 01       	movw	r26, r24
    87a0:	41 50       	subi	r20, 0x01	; 1
    87a2:	50 40       	sbci	r21, 0x00	; 0
    87a4:	88 f0       	brcs	.+34     	; 0x87c8 <strncasecmp_P+0x2c>
    87a6:	8d 91       	ld	r24, X+
    87a8:	81 34       	cpi	r24, 0x41	; 65
    87aa:	1c f0       	brlt	.+6      	; 0x87b2 <strncasecmp_P+0x16>
    87ac:	8b 35       	cpi	r24, 0x5B	; 91
    87ae:	0c f4       	brge	.+2      	; 0x87b2 <strncasecmp_P+0x16>
    87b0:	80 5e       	subi	r24, 0xE0	; 224
    87b2:	65 91       	lpm	r22, Z+
    87b4:	61 34       	cpi	r22, 0x41	; 65
    87b6:	1c f0       	brlt	.+6      	; 0x87be <strncasecmp_P+0x22>
    87b8:	6b 35       	cpi	r22, 0x5B	; 91
    87ba:	0c f4       	brge	.+2      	; 0x87be <strncasecmp_P+0x22>
    87bc:	60 5e       	subi	r22, 0xE0	; 224
    87be:	86 1b       	sub	r24, r22
    87c0:	61 11       	cpse	r22, r1
    87c2:	71 f3       	breq	.-36     	; 0x87a0 <strncasecmp_P+0x4>
    87c4:	99 0b       	sbc	r25, r25
    87c6:	08 95       	ret
    87c8:	88 1b       	sub	r24, r24
    87ca:	fc cf       	rjmp	.-8      	; 0x87c4 <strncasecmp_P+0x28>

000087cc <strrev>:
    87cc:	dc 01       	movw	r26, r24
    87ce:	fc 01       	movw	r30, r24
    87d0:	67 2f       	mov	r22, r23
    87d2:	71 91       	ld	r23, Z+
    87d4:	77 23       	and	r23, r23
    87d6:	e1 f7       	brne	.-8      	; 0x87d0 <strrev+0x4>
    87d8:	32 97       	sbiw	r30, 0x02	; 2
    87da:	04 c0       	rjmp	.+8      	; 0x87e4 <strrev+0x18>
    87dc:	7c 91       	ld	r23, X
    87de:	6d 93       	st	X+, r22
    87e0:	70 83       	st	Z, r23
    87e2:	62 91       	ld	r22, -Z
    87e4:	ae 17       	cp	r26, r30
    87e6:	bf 07       	cpc	r27, r31
    87e8:	c8 f3       	brcs	.-14     	; 0x87dc <strrev+0x10>
    87ea:	08 95       	ret

000087ec <__do_global_dtors>:
    87ec:	12 e0       	ldi	r17, 0x02	; 2
    87ee:	c6 e9       	ldi	r28, 0x96	; 150
    87f0:	d2 e0       	ldi	r29, 0x02	; 2
    87f2:	00 e0       	ldi	r16, 0x00	; 0
    87f4:	06 c0       	rjmp	.+12     	; 0x8802 <__do_global_dtors+0x16>
    87f6:	22 97       	sbiw	r28, 0x02	; 2
    87f8:	01 09       	sbc	r16, r1
    87fa:	fe 01       	movw	r30, r28
    87fc:	0b bf       	out	0x3b, r16	; 59
    87fe:	0e 94 b1 40 	call	0x8162	; 0x8162 <__tablejump_elpm__>
    8802:	ca 39       	cpi	r28, 0x9A	; 154
    8804:	d1 07       	cpc	r29, r17
    8806:	80 e0       	ldi	r24, 0x00	; 0
    8808:	08 07       	cpc	r16, r24
    880a:	a9 f7       	brne	.-22     	; 0x87f6 <__do_global_dtors+0xa>
    880c:	f8 94       	cli

0000880e <__stop_program>:
    880e:	ff cf       	rjmp	.-2      	; 0x880e <__stop_program>
