
FreeBoardPLC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002fa  00800200  00008762  000087f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008762  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b69  008004fa  008004fa  00008af0  2**0
                  ALLOC
  3 .stab         000150c0  00000000  00000000  00008af0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0002369a  00000000  00000000  0001dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0004124a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__dtors_end>
       4:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__vector_1>
       8:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__vector_2>
       c:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__vector_3>
      10:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__vector_4>
      14:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <__vector_5>
      18:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__vector_6>
      1c:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__vector_7>
      20:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__vector_8>
      24:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      28:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      2c:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <__vector_11>
      30:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      34:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      38:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      3c:	0c 94 4a 21 	jmp	0x4294	; 0x4294 <__vector_15>
      40:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      44:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      48:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      4c:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      50:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      54:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      58:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      5c:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__vector_23>
      60:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      64:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_25>
      68:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_26>
      6c:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      70:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      74:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      78:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      7c:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      80:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      84:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      88:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      8c:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      90:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__vector_36>
      94:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__vector_37>
      98:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      9c:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      a0:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      a4:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      a8:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      ac:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      b0:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      b4:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      b8:	0c 94 f4 22 	jmp	0x45e8	; 0x45e8 <__vector_46>
      bc:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__vector_47>
      c0:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__vector_48>
      c4:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      c8:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      cc:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_51>
      d0:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__vector_52>
      d4:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      d8:	0c 94 08 03 	jmp	0x610	; 0x610 <__vector_54>
      dc:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__vector_55>
      e0:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

0000012f <digital_pin_to_timer_PGM>:
     12f:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     15b:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000175 <digital_pin_to_bit_mask_PGM>:
     175:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     185:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     195:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1a5:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1b5:	04 08 10 20 40 80                                   ... @.

000001bb <digital_pin_to_port_PGM>:
     1bb:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1cb:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1db:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1eb:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1fb:	0b 0b 0b 0b 0b 0b                                   ......

00000201 <port_to_input_PGM>:
     201:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     211:	00 01 00 00 03 01 06 01 09 01                       ..........

0000021b <port_to_output_PGM>:
     21b:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     22b:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000235 <port_to_mode_PGM>:
     235:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     245:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000024f <pstr_inf>:
     24f:	49 4e 46                                            INF

00000252 <pstr_inity>:
     252:	49 4e 49 54 59                                      INITY

00000257 <pstr_nan>:
     257:	4e 41 4e                                            NAN

0000025a <pwr_p10>:
     25a:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     26a:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000272 <pwr_m10>:
     272:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     282:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000028a <__ctors_start>:
     28a:	63 18       	sub	r6, r3
     28c:	8c 21       	and	r24, r12
     28e:	8d 32       	cpi	r24, 0x2D	; 45
     290:	c3 35       	cpi	r28, 0x53	; 83
     292:	a6 3a       	cpi	r26, 0xA6	; 166
     294:	d9 3a       	cpi	r29, 0xA9	; 169

00000296 <__ctors_end>:
     296:	67 18       	sub	r6, r7
     298:	f3 32       	cpi	r31, 0x23	; 35

0000029a <__dtors_end>:
     29a:	11 24       	eor	r1, r1
     29c:	1f be       	out	0x3f, r1	; 63
     29e:	cf ef       	ldi	r28, 0xFF	; 255
     2a0:	d1 e2       	ldi	r29, 0x21	; 33
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	cd bf       	out	0x3d, r28	; 61
     2a6:	00 e0       	ldi	r16, 0x00	; 0
     2a8:	0c bf       	out	0x3c, r16	; 60

000002aa <__do_copy_data>:
     2aa:	14 e0       	ldi	r17, 0x04	; 4
     2ac:	a0 e0       	ldi	r26, 0x00	; 0
     2ae:	b2 e0       	ldi	r27, 0x02	; 2
     2b0:	e2 e6       	ldi	r30, 0x62	; 98
     2b2:	f7 e8       	ldi	r31, 0x87	; 135
     2b4:	00 e0       	ldi	r16, 0x00	; 0
     2b6:	0b bf       	out	0x3b, r16	; 59
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <__do_copy_data+0x14>
     2ba:	07 90       	elpm	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	aa 3f       	cpi	r26, 0xFA	; 250
     2c0:	b1 07       	cpc	r27, r17
     2c2:	d9 f7       	brne	.-10     	; 0x2ba <__do_copy_data+0x10>

000002c4 <__do_clear_bss>:
     2c4:	10 e1       	ldi	r17, 0x10	; 16
     2c6:	aa ef       	ldi	r26, 0xFA	; 250
     2c8:	b4 e0       	ldi	r27, 0x04	; 4
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <.do_clear_bss_start>

000002cc <.do_clear_bss_loop>:
     2cc:	1d 92       	st	X+, r1

000002ce <.do_clear_bss_start>:
     2ce:	a3 36       	cpi	r26, 0x63	; 99
     2d0:	b1 07       	cpc	r27, r17
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <.do_clear_bss_loop>

000002d4 <__do_global_ctors>:
     2d4:	12 e0       	ldi	r17, 0x02	; 2
     2d6:	c6 e9       	ldi	r28, 0x96	; 150
     2d8:	d2 e0       	ldi	r29, 0x02	; 2
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	06 c0       	rjmp	.+12     	; 0x2ea <__do_global_ctors+0x16>
     2de:	22 97       	sbiw	r28, 0x02	; 2
     2e0:	01 09       	sbc	r16, r1
     2e2:	fe 01       	movw	r30, r28
     2e4:	0b bf       	out	0x3b, r16	; 59
     2e6:	0e 94 5a 40 	call	0x80b4	; 0x80b4 <__tablejump_elpm__>
     2ea:	ca 38       	cpi	r28, 0x8A	; 138
     2ec:	d1 07       	cpc	r29, r17
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	08 07       	cpc	r16, r24
     2f2:	a9 f7       	brne	.-22     	; 0x2de <__do_global_ctors+0xa>
     2f4:	0e 94 25 3c 	call	0x784a	; 0x784a <main>
     2f8:	0c 94 9f 43 	jmp	0x873e	; 0x873e <__do_global_dtors>

000002fc <__bad_interrupt>:
     2fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000300 <_ZN14HardwareSerial9availableEv>:
     300:	fc 01       	movw	r30, r24
     302:	84 85       	ldd	r24, Z+12	; 0x0c
     304:	95 85       	ldd	r25, Z+13	; 0x0d
     306:	fc 01       	movw	r30, r24
     308:	e0 5c       	subi	r30, 0xC0	; 192
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
     30c:	20 81       	ld	r18, Z
     30e:	31 81       	ldd	r19, Z+1	; 0x01
     310:	fc 01       	movw	r30, r24
     312:	ee 5b       	subi	r30, 0xBE	; 190
     314:	ff 4f       	sbci	r31, 0xFF	; 255
     316:	80 81       	ld	r24, Z
     318:	91 81       	ldd	r25, Z+1	; 0x01
     31a:	28 1b       	sub	r18, r24
     31c:	39 0b       	sbc	r19, r25
     31e:	2f 73       	andi	r18, 0x3F	; 63
     320:	33 27       	eor	r19, r19
     322:	c9 01       	movw	r24, r18
     324:	08 95       	ret

00000326 <_ZN14HardwareSerial4peekEv>:
     326:	fc 01       	movw	r30, r24
     328:	84 85       	ldd	r24, Z+12	; 0x0c
     32a:	95 85       	ldd	r25, Z+13	; 0x0d
     32c:	fc 01       	movw	r30, r24
     32e:	e0 5c       	subi	r30, 0xC0	; 192
     330:	ff 4f       	sbci	r31, 0xFF	; 255
     332:	40 81       	ld	r20, Z
     334:	51 81       	ldd	r21, Z+1	; 0x01
     336:	fc 01       	movw	r30, r24
     338:	ee 5b       	subi	r30, 0xBE	; 190
     33a:	ff 4f       	sbci	r31, 0xFF	; 255
     33c:	20 81       	ld	r18, Z
     33e:	31 81       	ldd	r19, Z+1	; 0x01
     340:	42 17       	cp	r20, r18
     342:	53 07       	cpc	r21, r19
     344:	41 f0       	breq	.+16     	; 0x356 <_ZN14HardwareSerial4peekEv+0x30>
     346:	01 90       	ld	r0, Z+
     348:	f0 81       	ld	r31, Z
     34a:	e0 2d       	mov	r30, r0
     34c:	e8 0f       	add	r30, r24
     34e:	f9 1f       	adc	r31, r25
     350:	20 81       	ld	r18, Z
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	02 c0       	rjmp	.+4      	; 0x35a <_ZN14HardwareSerial4peekEv+0x34>
     356:	2f ef       	ldi	r18, 0xFF	; 255
     358:	3f ef       	ldi	r19, 0xFF	; 255
     35a:	c9 01       	movw	r24, r18
     35c:	08 95       	ret

0000035e <_ZN14HardwareSerial4readEv>:
     35e:	fc 01       	movw	r30, r24
     360:	84 85       	ldd	r24, Z+12	; 0x0c
     362:	95 85       	ldd	r25, Z+13	; 0x0d
     364:	fc 01       	movw	r30, r24
     366:	e0 5c       	subi	r30, 0xC0	; 192
     368:	ff 4f       	sbci	r31, 0xFF	; 255
     36a:	40 81       	ld	r20, Z
     36c:	51 81       	ldd	r21, Z+1	; 0x01
     36e:	fc 01       	movw	r30, r24
     370:	ee 5b       	subi	r30, 0xBE	; 190
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	20 81       	ld	r18, Z
     376:	31 81       	ldd	r19, Z+1	; 0x01
     378:	42 17       	cp	r20, r18
     37a:	53 07       	cpc	r21, r19
     37c:	71 f0       	breq	.+28     	; 0x39a <_ZN14HardwareSerial4readEv+0x3c>
     37e:	a0 81       	ld	r26, Z
     380:	b1 81       	ldd	r27, Z+1	; 0x01
     382:	a8 0f       	add	r26, r24
     384:	b9 1f       	adc	r27, r25
     386:	2c 91       	ld	r18, X
     388:	80 81       	ld	r24, Z
     38a:	91 81       	ldd	r25, Z+1	; 0x01
     38c:	01 96       	adiw	r24, 0x01	; 1
     38e:	8f 73       	andi	r24, 0x3F	; 63
     390:	99 27       	eor	r25, r25
     392:	91 83       	std	Z+1, r25	; 0x01
     394:	80 83       	st	Z, r24
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	02 c0       	rjmp	.+4      	; 0x39e <_ZN14HardwareSerial4readEv+0x40>
     39a:	2f ef       	ldi	r18, 0xFF	; 255
     39c:	3f ef       	ldi	r19, 0xFF	; 255
     39e:	c9 01       	movw	r24, r18
     3a0:	08 95       	ret

000003a2 <_ZN14HardwareSerial5flushEv>:
     3a2:	fc 01       	movw	r30, r24
     3a4:	81 a1       	ldd	r24, Z+33	; 0x21
     3a6:	88 23       	and	r24, r24
     3a8:	29 f0       	breq	.+10     	; 0x3b4 <_ZN14HardwareSerial5flushEv+0x12>
     3aa:	a4 89       	ldd	r26, Z+20	; 0x14
     3ac:	b5 89       	ldd	r27, Z+21	; 0x15
     3ae:	8c 91       	ld	r24, X
     3b0:	86 ff       	sbrs	r24, 6
     3b2:	fb cf       	rjmp	.-10     	; 0x3aa <_ZN14HardwareSerial5flushEv+0x8>
     3b4:	11 a2       	std	Z+33, r1	; 0x21
     3b6:	08 95       	ret

000003b8 <_ZN14HardwareSerial5writeEh>:
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	fc 01       	movw	r30, r24
     3be:	26 85       	ldd	r18, Z+14	; 0x0e
     3c0:	37 85       	ldd	r19, Z+15	; 0x0f
     3c2:	d9 01       	movw	r26, r18
     3c4:	a0 5c       	subi	r26, 0xC0	; 192
     3c6:	bf 4f       	sbci	r27, 0xFF	; 255
     3c8:	8d 91       	ld	r24, X+
     3ca:	9c 91       	ld	r25, X
     3cc:	11 97       	sbiw	r26, 0x01	; 1
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	8f 73       	andi	r24, 0x3F	; 63
     3d2:	99 27       	eor	r25, r25
     3d4:	e9 01       	movw	r28, r18
     3d6:	ce 5b       	subi	r28, 0xBE	; 190
     3d8:	df 4f       	sbci	r29, 0xFF	; 255
     3da:	48 81       	ld	r20, Y
     3dc:	59 81       	ldd	r21, Y+1	; 0x01
     3de:	84 17       	cp	r24, r20
     3e0:	95 07       	cpc	r25, r21
     3e2:	d9 f3       	breq	.-10     	; 0x3da <_ZN14HardwareSerial5writeEh+0x22>
     3e4:	0d 90       	ld	r0, X+
     3e6:	bc 91       	ld	r27, X
     3e8:	a0 2d       	mov	r26, r0
     3ea:	a2 0f       	add	r26, r18
     3ec:	b3 1f       	adc	r27, r19
     3ee:	6c 93       	st	X, r22
     3f0:	a6 85       	ldd	r26, Z+14	; 0x0e
     3f2:	b7 85       	ldd	r27, Z+15	; 0x0f
     3f4:	a0 5c       	subi	r26, 0xC0	; 192
     3f6:	bf 4f       	sbci	r27, 0xFF	; 255
     3f8:	11 96       	adiw	r26, 0x01	; 1
     3fa:	9c 93       	st	X, r25
     3fc:	8e 93       	st	-X, r24
     3fe:	a6 89       	ldd	r26, Z+22	; 0x16
     400:	b7 89       	ldd	r27, Z+23	; 0x17
     402:	2c 91       	ld	r18, X
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	07 8c       	ldd	r0, Z+31	; 0x1f
     40a:	02 c0       	rjmp	.+4      	; 0x410 <_ZN14HardwareSerial5writeEh+0x58>
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	0a 94       	dec	r0
     412:	e2 f7       	brpl	.-8      	; 0x40c <_ZN14HardwareSerial5writeEh+0x54>
     414:	28 2b       	or	r18, r24
     416:	2c 93       	st	X, r18
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	81 a3       	std	Z+33, r24	; 0x21
     41c:	04 88       	ldd	r0, Z+20	; 0x14
     41e:	f5 89       	ldd	r31, Z+21	; 0x15
     420:	e0 2d       	mov	r30, r0
     422:	80 81       	ld	r24, Z
     424:	80 64       	ori	r24, 0x40	; 64
     426:	80 83       	st	Z, r24
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	08 95       	ret

00000432 <_ZN14HardwareSerial6write9Ehb>:
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	fc 01       	movw	r30, r24
     440:	26 85       	ldd	r18, Z+14	; 0x0e
     442:	37 85       	ldd	r19, Z+15	; 0x0f
     444:	d9 01       	movw	r26, r18
     446:	a0 5c       	subi	r26, 0xC0	; 192
     448:	bf 4f       	sbci	r27, 0xFF	; 255
     44a:	8d 91       	ld	r24, X+
     44c:	9c 91       	ld	r25, X
     44e:	11 97       	sbiw	r26, 0x01	; 1
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	8f 73       	andi	r24, 0x3F	; 63
     454:	99 27       	eor	r25, r25
     456:	89 01       	movw	r16, r18
     458:	0e 5b       	subi	r16, 0xBE	; 190
     45a:	1f 4f       	sbci	r17, 0xFF	; 255
     45c:	e8 01       	movw	r28, r16
     45e:	e8 80       	ld	r14, Y
     460:	f9 80       	ldd	r15, Y+1	; 0x01
     462:	8e 15       	cp	r24, r14
     464:	9f 05       	cpc	r25, r15
     466:	d1 f3       	breq	.-12     	; 0x45c <_ZN14HardwareSerial6write9Ehb+0x2a>
     468:	0d 90       	ld	r0, X+
     46a:	bc 91       	ld	r27, X
     46c:	a0 2d       	mov	r26, r0
     46e:	a2 0f       	add	r26, r18
     470:	b3 1f       	adc	r27, r19
     472:	6c 93       	st	X, r22
     474:	a6 85       	ldd	r26, Z+14	; 0x0e
     476:	b7 85       	ldd	r27, Z+15	; 0x0f
     478:	a0 5c       	subi	r26, 0xC0	; 192
     47a:	bf 4f       	sbci	r27, 0xFF	; 255
     47c:	11 96       	adiw	r26, 0x01	; 1
     47e:	9c 93       	st	X, r25
     480:	8e 93       	st	-X, r24
     482:	a6 89       	ldd	r26, Z+22	; 0x16
     484:	b7 89       	ldd	r27, Z+23	; 0x17
     486:	8c 91       	ld	r24, X
     488:	44 23       	and	r20, r20
     48a:	11 f0       	breq	.+4      	; 0x490 <_ZN14HardwareSerial6write9Ehb+0x5e>
     48c:	81 60       	ori	r24, 0x01	; 1
     48e:	01 c0       	rjmp	.+2      	; 0x492 <_ZN14HardwareSerial6write9Ehb+0x60>
     490:	8e 7f       	andi	r24, 0xFE	; 254
     492:	8c 93       	st	X, r24
     494:	a6 89       	ldd	r26, Z+22	; 0x16
     496:	b7 89       	ldd	r27, Z+23	; 0x17
     498:	2c 91       	ld	r18, X
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	07 8c       	ldd	r0, Z+31	; 0x1f
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <_ZN14HardwareSerial6write9Ehb+0x74>
     4a2:	88 0f       	add	r24, r24
     4a4:	99 1f       	adc	r25, r25
     4a6:	0a 94       	dec	r0
     4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <_ZN14HardwareSerial6write9Ehb+0x70>
     4aa:	28 2b       	or	r18, r24
     4ac:	2c 93       	st	X, r18
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	81 a3       	std	Z+33, r24	; 0x21
     4b2:	04 88       	ldd	r0, Z+20	; 0x14
     4b4:	f5 89       	ldd	r31, Z+21	; 0x15
     4b6:	e0 2d       	mov	r30, r0
     4b8:	80 81       	ld	r24, Z
     4ba:	80 64       	ori	r24, 0x40	; 64
     4bc:	80 83       	st	Z, r24
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	08 95       	ret
     4d0:	08 95       	ret

000004d2 <__vector_25>:
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	0b b6       	in	r0, 0x3b	; 59
     4de:	0f 92       	push	r0
     4e0:	1b be       	out	0x3b, r1	; 59
     4e2:	2f 93       	push	r18
     4e4:	3f 93       	push	r19
     4e6:	4f 93       	push	r20
     4e8:	5f 93       	push	r21
     4ea:	6f 93       	push	r22
     4ec:	7f 93       	push	r23
     4ee:	8f 93       	push	r24
     4f0:	9f 93       	push	r25
     4f2:	af 93       	push	r26
     4f4:	bf 93       	push	r27
     4f6:	ef 93       	push	r30
     4f8:	ff 93       	push	r31
     4fa:	80 91 c0 00 	lds	r24, 0x00C0
     4fe:	82 fd       	sbrc	r24, 2
     500:	07 c0       	rjmp	.+14     	; 0x510 <__vector_25+0x3e>
     502:	80 91 c6 00 	lds	r24, 0x00C6
     506:	6e e5       	ldi	r22, 0x5E	; 94
     508:	77 e0       	ldi	r23, 0x07	; 7
     50a:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_Z10store_charhP11ring_buffer>
     50e:	02 c0       	rjmp	.+4      	; 0x514 <__vector_25+0x42>
     510:	80 91 c6 00 	lds	r24, 0x00C6
     514:	ff 91       	pop	r31
     516:	ef 91       	pop	r30
     518:	bf 91       	pop	r27
     51a:	af 91       	pop	r26
     51c:	9f 91       	pop	r25
     51e:	8f 91       	pop	r24
     520:	7f 91       	pop	r23
     522:	6f 91       	pop	r22
     524:	5f 91       	pop	r21
     526:	4f 91       	pop	r20
     528:	3f 91       	pop	r19
     52a:	2f 91       	pop	r18
     52c:	0f 90       	pop	r0
     52e:	0b be       	out	0x3b, r0	; 59
     530:	0f 90       	pop	r0
     532:	0f be       	out	0x3f, r0	; 63
     534:	0f 90       	pop	r0
     536:	1f 90       	pop	r1
     538:	18 95       	reti
     53a:	08 95       	ret

0000053c <__vector_36>:
     53c:	1f 92       	push	r1
     53e:	0f 92       	push	r0
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	0f 92       	push	r0
     544:	11 24       	eor	r1, r1
     546:	0b b6       	in	r0, 0x3b	; 59
     548:	0f 92       	push	r0
     54a:	1b be       	out	0x3b, r1	; 59
     54c:	2f 93       	push	r18
     54e:	3f 93       	push	r19
     550:	4f 93       	push	r20
     552:	5f 93       	push	r21
     554:	6f 93       	push	r22
     556:	7f 93       	push	r23
     558:	8f 93       	push	r24
     55a:	9f 93       	push	r25
     55c:	af 93       	push	r26
     55e:	bf 93       	push	r27
     560:	ef 93       	push	r30
     562:	ff 93       	push	r31
     564:	80 91 c8 00 	lds	r24, 0x00C8
     568:	82 fd       	sbrc	r24, 2
     56a:	07 c0       	rjmp	.+14     	; 0x57a <__vector_36+0x3e>
     56c:	80 91 ce 00 	lds	r24, 0x00CE
     570:	66 ed       	ldi	r22, 0xD6	; 214
     572:	76 e0       	ldi	r23, 0x06	; 6
     574:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_Z10store_charhP11ring_buffer>
     578:	02 c0       	rjmp	.+4      	; 0x57e <__vector_36+0x42>
     57a:	80 91 ce 00 	lds	r24, 0x00CE
     57e:	ff 91       	pop	r31
     580:	ef 91       	pop	r30
     582:	bf 91       	pop	r27
     584:	af 91       	pop	r26
     586:	9f 91       	pop	r25
     588:	8f 91       	pop	r24
     58a:	7f 91       	pop	r23
     58c:	6f 91       	pop	r22
     58e:	5f 91       	pop	r21
     590:	4f 91       	pop	r20
     592:	3f 91       	pop	r19
     594:	2f 91       	pop	r18
     596:	0f 90       	pop	r0
     598:	0b be       	out	0x3b, r0	; 59
     59a:	0f 90       	pop	r0
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	0f 90       	pop	r0
     5a0:	1f 90       	pop	r1
     5a2:	18 95       	reti
     5a4:	08 95       	ret

000005a6 <__vector_51>:
     5a6:	1f 92       	push	r1
     5a8:	0f 92       	push	r0
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	0f 92       	push	r0
     5ae:	11 24       	eor	r1, r1
     5b0:	0b b6       	in	r0, 0x3b	; 59
     5b2:	0f 92       	push	r0
     5b4:	1b be       	out	0x3b, r1	; 59
     5b6:	2f 93       	push	r18
     5b8:	3f 93       	push	r19
     5ba:	4f 93       	push	r20
     5bc:	5f 93       	push	r21
     5be:	6f 93       	push	r22
     5c0:	7f 93       	push	r23
     5c2:	8f 93       	push	r24
     5c4:	9f 93       	push	r25
     5c6:	af 93       	push	r26
     5c8:	bf 93       	push	r27
     5ca:	ef 93       	push	r30
     5cc:	ff 93       	push	r31
     5ce:	80 91 d0 00 	lds	r24, 0x00D0
     5d2:	82 fd       	sbrc	r24, 2
     5d4:	07 c0       	rjmp	.+14     	; 0x5e4 <__vector_51+0x3e>
     5d6:	80 91 d6 00 	lds	r24, 0x00D6
     5da:	6e e4       	ldi	r22, 0x4E	; 78
     5dc:	76 e0       	ldi	r23, 0x06	; 6
     5de:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_Z10store_charhP11ring_buffer>
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <__vector_51+0x42>
     5e4:	80 91 d6 00 	lds	r24, 0x00D6
     5e8:	ff 91       	pop	r31
     5ea:	ef 91       	pop	r30
     5ec:	bf 91       	pop	r27
     5ee:	af 91       	pop	r26
     5f0:	9f 91       	pop	r25
     5f2:	8f 91       	pop	r24
     5f4:	7f 91       	pop	r23
     5f6:	6f 91       	pop	r22
     5f8:	5f 91       	pop	r21
     5fa:	4f 91       	pop	r20
     5fc:	3f 91       	pop	r19
     5fe:	2f 91       	pop	r18
     600:	0f 90       	pop	r0
     602:	0b be       	out	0x3b, r0	; 59
     604:	0f 90       	pop	r0
     606:	0f be       	out	0x3f, r0	; 63
     608:	0f 90       	pop	r0
     60a:	1f 90       	pop	r1
     60c:	18 95       	reti
     60e:	08 95       	ret

00000610 <__vector_54>:
     610:	1f 92       	push	r1
     612:	0f 92       	push	r0
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	0f 92       	push	r0
     618:	11 24       	eor	r1, r1
     61a:	0b b6       	in	r0, 0x3b	; 59
     61c:	0f 92       	push	r0
     61e:	1b be       	out	0x3b, r1	; 59
     620:	2f 93       	push	r18
     622:	3f 93       	push	r19
     624:	4f 93       	push	r20
     626:	5f 93       	push	r21
     628:	6f 93       	push	r22
     62a:	7f 93       	push	r23
     62c:	8f 93       	push	r24
     62e:	9f 93       	push	r25
     630:	af 93       	push	r26
     632:	bf 93       	push	r27
     634:	ef 93       	push	r30
     636:	ff 93       	push	r31
     638:	80 91 30 01 	lds	r24, 0x0130
     63c:	82 fd       	sbrc	r24, 2
     63e:	07 c0       	rjmp	.+14     	; 0x64e <__vector_54+0x3e>
     640:	80 91 36 01 	lds	r24, 0x0136
     644:	66 ec       	ldi	r22, 0xC6	; 198
     646:	75 e0       	ldi	r23, 0x05	; 5
     648:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_Z10store_charhP11ring_buffer>
     64c:	02 c0       	rjmp	.+4      	; 0x652 <__vector_54+0x42>
     64e:	80 91 36 01 	lds	r24, 0x0136
     652:	ff 91       	pop	r31
     654:	ef 91       	pop	r30
     656:	bf 91       	pop	r27
     658:	af 91       	pop	r26
     65a:	9f 91       	pop	r25
     65c:	8f 91       	pop	r24
     65e:	7f 91       	pop	r23
     660:	6f 91       	pop	r22
     662:	5f 91       	pop	r21
     664:	4f 91       	pop	r20
     666:	3f 91       	pop	r19
     668:	2f 91       	pop	r18
     66a:	0f 90       	pop	r0
     66c:	0b be       	out	0x3b, r0	; 59
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <_Z14serialEventRunv>:
     678:	80 e6       	ldi	r24, 0x60	; 96
     67a:	95 e0       	ldi	r25, 0x05	; 5
     67c:	0e 94 80 01 	call	0x300	; 0x300 <_ZN14HardwareSerial9availableEv>
     680:	89 2b       	or	r24, r25
     682:	11 f0       	breq	.+4      	; 0x688 <_Z14serialEventRunv+0x10>
     684:	0e 94 33 32 	call	0x6466	; 0x6466 <_Z11serialEventv>
     688:	8e e3       	ldi	r24, 0x3E	; 62
     68a:	95 e0       	ldi	r25, 0x05	; 5
     68c:	0e 94 80 01 	call	0x300	; 0x300 <_ZN14HardwareSerial9availableEv>
     690:	89 2b       	or	r24, r25
     692:	11 f0       	breq	.+4      	; 0x698 <_Z14serialEventRunv+0x20>
     694:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <_Z12serialEvent1v>
     698:	8c e1       	ldi	r24, 0x1C	; 28
     69a:	95 e0       	ldi	r25, 0x05	; 5
     69c:	0e 94 80 01 	call	0x300	; 0x300 <_ZN14HardwareSerial9availableEv>
     6a0:	89 2b       	or	r24, r25
     6a2:	11 f0       	breq	.+4      	; 0x6a8 <_Z14serialEventRunv+0x30>
     6a4:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <_Z12serialEvent2v>
     6a8:	8a ef       	ldi	r24, 0xFA	; 250
     6aa:	94 e0       	ldi	r25, 0x04	; 4
     6ac:	0e 94 80 01 	call	0x300	; 0x300 <_ZN14HardwareSerial9availableEv>
     6b0:	89 2b       	or	r24, r25
     6b2:	11 f0       	breq	.+4      	; 0x6b8 <_Z14serialEventRunv+0x40>
     6b4:	0c 94 ff 2f 	jmp	0x5ffe	; 0x5ffe <_Z12serialEvent3v>
     6b8:	08 95       	ret

000006ba <__vector_26>:
     6ba:	1f 92       	push	r1
     6bc:	0f 92       	push	r0
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	0f 92       	push	r0
     6c2:	11 24       	eor	r1, r1
     6c4:	0b b6       	in	r0, 0x3b	; 59
     6c6:	0f 92       	push	r0
     6c8:	1b be       	out	0x3b, r1	; 59
     6ca:	2f 93       	push	r18
     6cc:	3f 93       	push	r19
     6ce:	8f 93       	push	r24
     6d0:	9f 93       	push	r25
     6d2:	ef 93       	push	r30
     6d4:	ff 93       	push	r31
     6d6:	20 91 5a 07 	lds	r18, 0x075A
     6da:	30 91 5b 07 	lds	r19, 0x075B
     6de:	80 91 5c 07 	lds	r24, 0x075C
     6e2:	90 91 5d 07 	lds	r25, 0x075D
     6e6:	28 17       	cp	r18, r24
     6e8:	39 07       	cpc	r19, r25
     6ea:	31 f4       	brne	.+12     	; 0x6f8 <__vector_26+0x3e>
     6ec:	80 91 c1 00 	lds	r24, 0x00C1
     6f0:	8f 7d       	andi	r24, 0xDF	; 223
     6f2:	80 93 c1 00 	sts	0x00C1, r24
     6f6:	14 c0       	rjmp	.+40     	; 0x720 <__vector_26+0x66>
     6f8:	e0 91 5c 07 	lds	r30, 0x075C
     6fc:	f0 91 5d 07 	lds	r31, 0x075D
     700:	e6 5e       	subi	r30, 0xE6	; 230
     702:	f8 4f       	sbci	r31, 0xF8	; 248
     704:	20 81       	ld	r18, Z
     706:	80 91 5c 07 	lds	r24, 0x075C
     70a:	90 91 5d 07 	lds	r25, 0x075D
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	8f 73       	andi	r24, 0x3F	; 63
     712:	99 27       	eor	r25, r25
     714:	90 93 5d 07 	sts	0x075D, r25
     718:	80 93 5c 07 	sts	0x075C, r24
     71c:	20 93 c6 00 	sts	0x00C6, r18
     720:	ff 91       	pop	r31
     722:	ef 91       	pop	r30
     724:	9f 91       	pop	r25
     726:	8f 91       	pop	r24
     728:	3f 91       	pop	r19
     72a:	2f 91       	pop	r18
     72c:	0f 90       	pop	r0
     72e:	0b be       	out	0x3b, r0	; 59
     730:	0f 90       	pop	r0
     732:	0f be       	out	0x3f, r0	; 63
     734:	0f 90       	pop	r0
     736:	1f 90       	pop	r1
     738:	18 95       	reti

0000073a <__vector_37>:
     73a:	1f 92       	push	r1
     73c:	0f 92       	push	r0
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	0f 92       	push	r0
     742:	11 24       	eor	r1, r1
     744:	0b b6       	in	r0, 0x3b	; 59
     746:	0f 92       	push	r0
     748:	1b be       	out	0x3b, r1	; 59
     74a:	2f 93       	push	r18
     74c:	3f 93       	push	r19
     74e:	8f 93       	push	r24
     750:	9f 93       	push	r25
     752:	ef 93       	push	r30
     754:	ff 93       	push	r31
     756:	20 91 d2 06 	lds	r18, 0x06D2
     75a:	30 91 d3 06 	lds	r19, 0x06D3
     75e:	80 91 d4 06 	lds	r24, 0x06D4
     762:	90 91 d5 06 	lds	r25, 0x06D5
     766:	28 17       	cp	r18, r24
     768:	39 07       	cpc	r19, r25
     76a:	31 f4       	brne	.+12     	; 0x778 <__vector_37+0x3e>
     76c:	80 91 c9 00 	lds	r24, 0x00C9
     770:	8f 7d       	andi	r24, 0xDF	; 223
     772:	80 93 c9 00 	sts	0x00C9, r24
     776:	14 c0       	rjmp	.+40     	; 0x7a0 <__vector_37+0x66>
     778:	e0 91 d4 06 	lds	r30, 0x06D4
     77c:	f0 91 d5 06 	lds	r31, 0x06D5
     780:	ee 56       	subi	r30, 0x6E	; 110
     782:	f9 4f       	sbci	r31, 0xF9	; 249
     784:	20 81       	ld	r18, Z
     786:	80 91 d4 06 	lds	r24, 0x06D4
     78a:	90 91 d5 06 	lds	r25, 0x06D5
     78e:	01 96       	adiw	r24, 0x01	; 1
     790:	8f 73       	andi	r24, 0x3F	; 63
     792:	99 27       	eor	r25, r25
     794:	90 93 d5 06 	sts	0x06D5, r25
     798:	80 93 d4 06 	sts	0x06D4, r24
     79c:	20 93 ce 00 	sts	0x00CE, r18
     7a0:	ff 91       	pop	r31
     7a2:	ef 91       	pop	r30
     7a4:	9f 91       	pop	r25
     7a6:	8f 91       	pop	r24
     7a8:	3f 91       	pop	r19
     7aa:	2f 91       	pop	r18
     7ac:	0f 90       	pop	r0
     7ae:	0b be       	out	0x3b, r0	; 59
     7b0:	0f 90       	pop	r0
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	0f 90       	pop	r0
     7b6:	1f 90       	pop	r1
     7b8:	18 95       	reti

000007ba <__vector_52>:
     7ba:	1f 92       	push	r1
     7bc:	0f 92       	push	r0
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	0f 92       	push	r0
     7c2:	11 24       	eor	r1, r1
     7c4:	0b b6       	in	r0, 0x3b	; 59
     7c6:	0f 92       	push	r0
     7c8:	1b be       	out	0x3b, r1	; 59
     7ca:	2f 93       	push	r18
     7cc:	3f 93       	push	r19
     7ce:	8f 93       	push	r24
     7d0:	9f 93       	push	r25
     7d2:	ef 93       	push	r30
     7d4:	ff 93       	push	r31
     7d6:	20 91 4a 06 	lds	r18, 0x064A
     7da:	30 91 4b 06 	lds	r19, 0x064B
     7de:	80 91 4c 06 	lds	r24, 0x064C
     7e2:	90 91 4d 06 	lds	r25, 0x064D
     7e6:	28 17       	cp	r18, r24
     7e8:	39 07       	cpc	r19, r25
     7ea:	31 f4       	brne	.+12     	; 0x7f8 <__vector_52+0x3e>
     7ec:	80 91 d1 00 	lds	r24, 0x00D1
     7f0:	8f 7d       	andi	r24, 0xDF	; 223
     7f2:	80 93 d1 00 	sts	0x00D1, r24
     7f6:	14 c0       	rjmp	.+40     	; 0x820 <__vector_52+0x66>
     7f8:	e0 91 4c 06 	lds	r30, 0x064C
     7fc:	f0 91 4d 06 	lds	r31, 0x064D
     800:	e6 5f       	subi	r30, 0xF6	; 246
     802:	f9 4f       	sbci	r31, 0xF9	; 249
     804:	20 81       	ld	r18, Z
     806:	80 91 4c 06 	lds	r24, 0x064C
     80a:	90 91 4d 06 	lds	r25, 0x064D
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	8f 73       	andi	r24, 0x3F	; 63
     812:	99 27       	eor	r25, r25
     814:	90 93 4d 06 	sts	0x064D, r25
     818:	80 93 4c 06 	sts	0x064C, r24
     81c:	20 93 d6 00 	sts	0x00D6, r18
     820:	ff 91       	pop	r31
     822:	ef 91       	pop	r30
     824:	9f 91       	pop	r25
     826:	8f 91       	pop	r24
     828:	3f 91       	pop	r19
     82a:	2f 91       	pop	r18
     82c:	0f 90       	pop	r0
     82e:	0b be       	out	0x3b, r0	; 59
     830:	0f 90       	pop	r0
     832:	0f be       	out	0x3f, r0	; 63
     834:	0f 90       	pop	r0
     836:	1f 90       	pop	r1
     838:	18 95       	reti

0000083a <__vector_55>:
     83a:	1f 92       	push	r1
     83c:	0f 92       	push	r0
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	0f 92       	push	r0
     842:	11 24       	eor	r1, r1
     844:	0b b6       	in	r0, 0x3b	; 59
     846:	0f 92       	push	r0
     848:	1b be       	out	0x3b, r1	; 59
     84a:	2f 93       	push	r18
     84c:	3f 93       	push	r19
     84e:	8f 93       	push	r24
     850:	9f 93       	push	r25
     852:	ef 93       	push	r30
     854:	ff 93       	push	r31
     856:	20 91 c2 05 	lds	r18, 0x05C2
     85a:	30 91 c3 05 	lds	r19, 0x05C3
     85e:	80 91 c4 05 	lds	r24, 0x05C4
     862:	90 91 c5 05 	lds	r25, 0x05C5
     866:	28 17       	cp	r18, r24
     868:	39 07       	cpc	r19, r25
     86a:	31 f4       	brne	.+12     	; 0x878 <__vector_55+0x3e>
     86c:	80 91 31 01 	lds	r24, 0x0131
     870:	8f 7d       	andi	r24, 0xDF	; 223
     872:	80 93 31 01 	sts	0x0131, r24
     876:	14 c0       	rjmp	.+40     	; 0x8a0 <__vector_55+0x66>
     878:	e0 91 c4 05 	lds	r30, 0x05C4
     87c:	f0 91 c5 05 	lds	r31, 0x05C5
     880:	ee 57       	subi	r30, 0x7E	; 126
     882:	fa 4f       	sbci	r31, 0xFA	; 250
     884:	20 81       	ld	r18, Z
     886:	80 91 c4 05 	lds	r24, 0x05C4
     88a:	90 91 c5 05 	lds	r25, 0x05C5
     88e:	01 96       	adiw	r24, 0x01	; 1
     890:	8f 73       	andi	r24, 0x3F	; 63
     892:	99 27       	eor	r25, r25
     894:	90 93 c5 05 	sts	0x05C5, r25
     898:	80 93 c4 05 	sts	0x05C4, r24
     89c:	20 93 36 01 	sts	0x0136, r18
     8a0:	ff 91       	pop	r31
     8a2:	ef 91       	pop	r30
     8a4:	9f 91       	pop	r25
     8a6:	8f 91       	pop	r24
     8a8:	3f 91       	pop	r19
     8aa:	2f 91       	pop	r18
     8ac:	0f 90       	pop	r0
     8ae:	0b be       	out	0x3b, r0	; 59
     8b0:	0f 90       	pop	r0
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	0f 90       	pop	r0
     8b6:	1f 90       	pop	r1
     8b8:	18 95       	reti

000008ba <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
     8ba:	4f 92       	push	r4
     8bc:	5f 92       	push	r5
     8be:	6f 92       	push	r6
     8c0:	7f 92       	push	r7
     8c2:	8f 92       	push	r8
     8c4:	9f 92       	push	r9
     8c6:	af 92       	push	r10
     8c8:	bf 92       	push	r11
     8ca:	cf 92       	push	r12
     8cc:	df 92       	push	r13
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	fc 01       	movw	r30, r24
     8e0:	13 82       	std	Z+3, r1	; 0x03
     8e2:	12 82       	std	Z+2, r1	; 0x02
     8e4:	88 ee       	ldi	r24, 0xE8	; 232
     8e6:	48 2e       	mov	r4, r24
     8e8:	83 e0       	ldi	r24, 0x03	; 3
     8ea:	58 2e       	mov	r5, r24
     8ec:	61 2c       	mov	r6, r1
     8ee:	71 2c       	mov	r7, r1
     8f0:	44 82       	std	Z+4, r4	; 0x04
     8f2:	55 82       	std	Z+5, r5	; 0x05
     8f4:	66 82       	std	Z+6, r6	; 0x06
     8f6:	77 82       	std	Z+7, r7	; 0x07
     8f8:	80 ee       	ldi	r24, 0xE0	; 224
     8fa:	94 e0       	ldi	r25, 0x04	; 4
     8fc:	91 83       	std	Z+1, r25	; 0x01
     8fe:	80 83       	st	Z, r24
     900:	75 87       	std	Z+13, r23	; 0x0d
     902:	64 87       	std	Z+12, r22	; 0x0c
     904:	57 87       	std	Z+15, r21	; 0x0f
     906:	46 87       	std	Z+14, r20	; 0x0e
     908:	31 8b       	std	Z+17, r19	; 0x11
     90a:	20 8b       	std	Z+16, r18	; 0x10
     90c:	13 8b       	std	Z+19, r17	; 0x13
     90e:	02 8b       	std	Z+18, r16	; 0x12
     910:	f5 8a       	std	Z+21, r15	; 0x15
     912:	e4 8a       	std	Z+20, r14	; 0x14
     914:	d7 8a       	std	Z+23, r13	; 0x17
     916:	c6 8a       	std	Z+22, r12	; 0x16
     918:	b1 8e       	std	Z+25, r11	; 0x19
     91a:	a0 8e       	std	Z+24, r10	; 0x18
     91c:	93 8e       	std	Z+27, r9	; 0x1b
     91e:	82 8e       	std	Z+26, r8	; 0x1a
     920:	8c 89       	ldd	r24, Y+20	; 0x14
     922:	84 8f       	std	Z+28, r24	; 0x1c
     924:	8d 89       	ldd	r24, Y+21	; 0x15
     926:	85 8f       	std	Z+29, r24	; 0x1d
     928:	8e 89       	ldd	r24, Y+22	; 0x16
     92a:	86 8f       	std	Z+30, r24	; 0x1e
     92c:	8f 89       	ldd	r24, Y+23	; 0x17
     92e:	87 8f       	std	Z+31, r24	; 0x1f
     930:	88 8d       	ldd	r24, Y+24	; 0x18
     932:	80 a3       	std	Z+32, r24	; 0x20
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	ff 90       	pop	r15
     93e:	ef 90       	pop	r14
     940:	df 90       	pop	r13
     942:	cf 90       	pop	r12
     944:	bf 90       	pop	r11
     946:	af 90       	pop	r10
     948:	9f 90       	pop	r9
     94a:	8f 90       	pop	r8
     94c:	7f 90       	pop	r7
     94e:	6f 90       	pop	r6
     950:	5f 90       	pop	r5
     952:	4f 90       	pop	r4
     954:	08 95       	ret

00000956 <_ZN14HardwareSerial5beginEm>:
     956:	cf 92       	push	r12
     958:	df 92       	push	r13
     95a:	ef 92       	push	r14
     95c:	ff 92       	push	r15
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	ec 01       	movw	r28, r24
     964:	6a 01       	movw	r12, r20
     966:	7b 01       	movw	r14, r22
     968:	41 15       	cp	r20, r1
     96a:	81 ee       	ldi	r24, 0xE1	; 225
     96c:	58 07       	cpc	r21, r24
     96e:	61 05       	cpc	r22, r1
     970:	71 05       	cpc	r23, r1
     972:	f9 f0       	breq	.+62     	; 0x9b2 <_ZN14HardwareSerial5beginEm+0x5c>
     974:	ec 89       	ldd	r30, Y+20	; 0x14
     976:	fd 89       	ldd	r31, Y+21	; 0x15
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	08 a0       	ldd	r0, Y+32	; 0x20
     97e:	02 c0       	rjmp	.+4      	; 0x984 <_ZN14HardwareSerial5beginEm+0x2e>
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	0a 94       	dec	r0
     986:	e2 f7       	brpl	.-8      	; 0x980 <_ZN14HardwareSerial5beginEm+0x2a>
     988:	80 83       	st	Z, r24
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	79 e0       	ldi	r23, 0x09	; 9
     98e:	8d e3       	ldi	r24, 0x3D	; 61
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a7 01       	movw	r20, r14
     994:	96 01       	movw	r18, r12
     996:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__udivmodsi4>
     99a:	21 50       	subi	r18, 0x01	; 1
     99c:	31 09       	sbc	r19, r1
     99e:	41 09       	sbc	r20, r1
     9a0:	51 09       	sbc	r21, r1
     9a2:	56 95       	lsr	r21
     9a4:	47 95       	ror	r20
     9a6:	37 95       	ror	r19
     9a8:	27 95       	ror	r18
     9aa:	21 15       	cp	r18, r1
     9ac:	80 e1       	ldi	r24, 0x10	; 16
     9ae:	38 07       	cpc	r19, r24
     9b0:	98 f0       	brcs	.+38     	; 0x9d8 <_ZN14HardwareSerial5beginEm+0x82>
     9b2:	ec 89       	ldd	r30, Y+20	; 0x14
     9b4:	fd 89       	ldd	r31, Y+21	; 0x15
     9b6:	10 82       	st	Z, r1
     9b8:	60 e8       	ldi	r22, 0x80	; 128
     9ba:	74 e8       	ldi	r23, 0x84	; 132
     9bc:	8e e1       	ldi	r24, 0x1E	; 30
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a7 01       	movw	r20, r14
     9c2:	96 01       	movw	r18, r12
     9c4:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__udivmodsi4>
     9c8:	21 50       	subi	r18, 0x01	; 1
     9ca:	31 09       	sbc	r19, r1
     9cc:	41 09       	sbc	r20, r1
     9ce:	51 09       	sbc	r21, r1
     9d0:	56 95       	lsr	r21
     9d2:	47 95       	ror	r20
     9d4:	37 95       	ror	r19
     9d6:	27 95       	ror	r18
     9d8:	e8 89       	ldd	r30, Y+16	; 0x10
     9da:	f9 89       	ldd	r31, Y+17	; 0x11
     9dc:	30 83       	st	Z, r19
     9de:	ea 89       	ldd	r30, Y+18	; 0x12
     9e0:	fb 89       	ldd	r31, Y+19	; 0x13
     9e2:	20 83       	st	Z, r18
     9e4:	19 a2       	std	Y+33, r1	; 0x21
     9e6:	ee 89       	ldd	r30, Y+22	; 0x16
     9e8:	ff 89       	ldd	r31, Y+23	; 0x17
     9ea:	40 81       	ld	r20, Z
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	9c 01       	movw	r18, r24
     9f2:	0c 8c       	ldd	r0, Y+28	; 0x1c
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <_ZN14HardwareSerial5beginEm+0xa4>
     9f6:	22 0f       	add	r18, r18
     9f8:	33 1f       	adc	r19, r19
     9fa:	0a 94       	dec	r0
     9fc:	e2 f7       	brpl	.-8      	; 0x9f6 <_ZN14HardwareSerial5beginEm+0xa0>
     9fe:	42 2b       	or	r20, r18
     a00:	40 83       	st	Z, r20
     a02:	ee 89       	ldd	r30, Y+22	; 0x16
     a04:	ff 89       	ldd	r31, Y+23	; 0x17
     a06:	40 81       	ld	r20, Z
     a08:	9c 01       	movw	r18, r24
     a0a:	0d 8c       	ldd	r0, Y+29	; 0x1d
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <_ZN14HardwareSerial5beginEm+0xbc>
     a0e:	22 0f       	add	r18, r18
     a10:	33 1f       	adc	r19, r19
     a12:	0a 94       	dec	r0
     a14:	e2 f7       	brpl	.-8      	; 0xa0e <_ZN14HardwareSerial5beginEm+0xb8>
     a16:	42 2b       	or	r20, r18
     a18:	40 83       	st	Z, r20
     a1a:	ee 89       	ldd	r30, Y+22	; 0x16
     a1c:	ff 89       	ldd	r31, Y+23	; 0x17
     a1e:	40 81       	ld	r20, Z
     a20:	9c 01       	movw	r18, r24
     a22:	0e 8c       	ldd	r0, Y+30	; 0x1e
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <_ZN14HardwareSerial5beginEm+0xd4>
     a26:	22 0f       	add	r18, r18
     a28:	33 1f       	adc	r19, r19
     a2a:	0a 94       	dec	r0
     a2c:	e2 f7       	brpl	.-8      	; 0xa26 <_ZN14HardwareSerial5beginEm+0xd0>
     a2e:	42 2b       	or	r20, r18
     a30:	40 83       	st	Z, r20
     a32:	ee 89       	ldd	r30, Y+22	; 0x16
     a34:	ff 89       	ldd	r31, Y+23	; 0x17
     a36:	20 81       	ld	r18, Z
     a38:	0f 8c       	ldd	r0, Y+31	; 0x1f
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <_ZN14HardwareSerial5beginEm+0xea>
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	0a 94       	dec	r0
     a42:	e2 f7       	brpl	.-8      	; 0xa3c <_ZN14HardwareSerial5beginEm+0xe6>
     a44:	80 95       	com	r24
     a46:	82 23       	and	r24, r18
     a48:	80 83       	st	Z, r24
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	08 95       	ret

00000a58 <_ZN14HardwareSerial5beginEmh>:
     a58:	bf 92       	push	r11
     a5a:	cf 92       	push	r12
     a5c:	df 92       	push	r13
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	ec 01       	movw	r28, r24
     a68:	6a 01       	movw	r12, r20
     a6a:	7b 01       	movw	r14, r22
     a6c:	b2 2e       	mov	r11, r18
     a6e:	41 15       	cp	r20, r1
     a70:	81 ee       	ldi	r24, 0xE1	; 225
     a72:	58 07       	cpc	r21, r24
     a74:	61 05       	cpc	r22, r1
     a76:	71 05       	cpc	r23, r1
     a78:	f9 f0       	breq	.+62     	; 0xab8 <_ZN14HardwareSerial5beginEmh+0x60>
     a7a:	ec 89       	ldd	r30, Y+20	; 0x14
     a7c:	fd 89       	ldd	r31, Y+21	; 0x15
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	08 a0       	ldd	r0, Y+32	; 0x20
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <_ZN14HardwareSerial5beginEmh+0x32>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	0a 94       	dec	r0
     a8c:	e2 f7       	brpl	.-8      	; 0xa86 <_ZN14HardwareSerial5beginEmh+0x2e>
     a8e:	80 83       	st	Z, r24
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	79 e0       	ldi	r23, 0x09	; 9
     a94:	8d e3       	ldi	r24, 0x3D	; 61
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	a7 01       	movw	r20, r14
     a9a:	96 01       	movw	r18, r12
     a9c:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__udivmodsi4>
     aa0:	21 50       	subi	r18, 0x01	; 1
     aa2:	31 09       	sbc	r19, r1
     aa4:	41 09       	sbc	r20, r1
     aa6:	51 09       	sbc	r21, r1
     aa8:	56 95       	lsr	r21
     aaa:	47 95       	ror	r20
     aac:	37 95       	ror	r19
     aae:	27 95       	ror	r18
     ab0:	21 15       	cp	r18, r1
     ab2:	80 e1       	ldi	r24, 0x10	; 16
     ab4:	38 07       	cpc	r19, r24
     ab6:	98 f0       	brcs	.+38     	; 0xade <_ZN14HardwareSerial5beginEmh+0x86>
     ab8:	ec 89       	ldd	r30, Y+20	; 0x14
     aba:	fd 89       	ldd	r31, Y+21	; 0x15
     abc:	10 82       	st	Z, r1
     abe:	60 e8       	ldi	r22, 0x80	; 128
     ac0:	74 e8       	ldi	r23, 0x84	; 132
     ac2:	8e e1       	ldi	r24, 0x1E	; 30
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	a7 01       	movw	r20, r14
     ac8:	96 01       	movw	r18, r12
     aca:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__udivmodsi4>
     ace:	21 50       	subi	r18, 0x01	; 1
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	56 95       	lsr	r21
     ad8:	47 95       	ror	r20
     ada:	37 95       	ror	r19
     adc:	27 95       	ror	r18
     ade:	e8 89       	ldd	r30, Y+16	; 0x10
     ae0:	f9 89       	ldd	r31, Y+17	; 0x11
     ae2:	30 83       	st	Z, r19
     ae4:	ea 89       	ldd	r30, Y+18	; 0x12
     ae6:	fb 89       	ldd	r31, Y+19	; 0x13
     ae8:	20 83       	st	Z, r18
     aea:	87 e0       	ldi	r24, 0x07	; 7
     aec:	b8 12       	cpse	r11, r24
     aee:	0a c0       	rjmp	.+20     	; 0xb04 <_ZN14HardwareSerial5beginEmh+0xac>
     af0:	e8 8d       	ldd	r30, Y+24	; 0x18
     af2:	f9 8d       	ldd	r31, Y+25	; 0x19
     af4:	86 e0       	ldi	r24, 0x06	; 6
     af6:	80 83       	st	Z, r24
     af8:	ee 89       	ldd	r30, Y+22	; 0x16
     afa:	ff 89       	ldd	r31, Y+23	; 0x17
     afc:	80 81       	ld	r24, Z
     afe:	84 60       	ori	r24, 0x04	; 4
     b00:	80 83       	st	Z, r24
     b02:	08 c0       	rjmp	.+16     	; 0xb14 <_ZN14HardwareSerial5beginEmh+0xbc>
     b04:	ee 89       	ldd	r30, Y+22	; 0x16
     b06:	ff 89       	ldd	r31, Y+23	; 0x17
     b08:	80 81       	ld	r24, Z
     b0a:	84 70       	andi	r24, 0x04	; 4
     b0c:	80 83       	st	Z, r24
     b0e:	e8 8d       	ldd	r30, Y+24	; 0x18
     b10:	f9 8d       	ldd	r31, Y+25	; 0x19
     b12:	b0 82       	st	Z, r11
     b14:	ee 89       	ldd	r30, Y+22	; 0x16
     b16:	ff 89       	ldd	r31, Y+23	; 0x17
     b18:	40 81       	ld	r20, Z
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	9c 01       	movw	r18, r24
     b20:	0c 8c       	ldd	r0, Y+28	; 0x1c
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <_ZN14HardwareSerial5beginEmh+0xd0>
     b24:	22 0f       	add	r18, r18
     b26:	33 1f       	adc	r19, r19
     b28:	0a 94       	dec	r0
     b2a:	e2 f7       	brpl	.-8      	; 0xb24 <_ZN14HardwareSerial5beginEmh+0xcc>
     b2c:	42 2b       	or	r20, r18
     b2e:	40 83       	st	Z, r20
     b30:	ee 89       	ldd	r30, Y+22	; 0x16
     b32:	ff 89       	ldd	r31, Y+23	; 0x17
     b34:	40 81       	ld	r20, Z
     b36:	9c 01       	movw	r18, r24
     b38:	0d 8c       	ldd	r0, Y+29	; 0x1d
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <_ZN14HardwareSerial5beginEmh+0xe8>
     b3c:	22 0f       	add	r18, r18
     b3e:	33 1f       	adc	r19, r19
     b40:	0a 94       	dec	r0
     b42:	e2 f7       	brpl	.-8      	; 0xb3c <_ZN14HardwareSerial5beginEmh+0xe4>
     b44:	42 2b       	or	r20, r18
     b46:	40 83       	st	Z, r20
     b48:	ee 89       	ldd	r30, Y+22	; 0x16
     b4a:	ff 89       	ldd	r31, Y+23	; 0x17
     b4c:	40 81       	ld	r20, Z
     b4e:	9c 01       	movw	r18, r24
     b50:	0e 8c       	ldd	r0, Y+30	; 0x1e
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <_ZN14HardwareSerial5beginEmh+0x100>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	0a 94       	dec	r0
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <_ZN14HardwareSerial5beginEmh+0xfc>
     b5c:	42 2b       	or	r20, r18
     b5e:	40 83       	st	Z, r20
     b60:	ee 89       	ldd	r30, Y+22	; 0x16
     b62:	ff 89       	ldd	r31, Y+23	; 0x17
     b64:	20 81       	ld	r18, Z
     b66:	0f 8c       	ldd	r0, Y+31	; 0x1f
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <_ZN14HardwareSerial5beginEmh+0x116>
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	0a 94       	dec	r0
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <_ZN14HardwareSerial5beginEmh+0x112>
     b72:	80 95       	com	r24
     b74:	82 23       	and	r24, r18
     b76:	80 83       	st	Z, r24
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	df 90       	pop	r13
     b82:	cf 90       	pop	r12
     b84:	bf 90       	pop	r11
     b86:	08 95       	ret

00000b88 <_ZN14HardwareSerial3endEv>:
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	fc 01       	movw	r30, r24
     b8e:	86 85       	ldd	r24, Z+14	; 0x0e
     b90:	97 85       	ldd	r25, Z+15	; 0x0f
     b92:	dc 01       	movw	r26, r24
     b94:	a0 5c       	subi	r26, 0xC0	; 192
     b96:	bf 4f       	sbci	r27, 0xFF	; 255
     b98:	ec 01       	movw	r28, r24
     b9a:	ce 5b       	subi	r28, 0xBE	; 190
     b9c:	df 4f       	sbci	r29, 0xFF	; 255
     b9e:	4d 91       	ld	r20, X+
     ba0:	5c 91       	ld	r21, X
     ba2:	11 97       	sbiw	r26, 0x01	; 1
     ba4:	28 81       	ld	r18, Y
     ba6:	39 81       	ldd	r19, Y+1	; 0x01
     ba8:	42 17       	cp	r20, r18
     baa:	53 07       	cpc	r21, r19
     bac:	c1 f7       	brne	.-16     	; 0xb9e <_ZN14HardwareSerial3endEv+0x16>
     bae:	a6 89       	ldd	r26, Z+22	; 0x16
     bb0:	b7 89       	ldd	r27, Z+23	; 0x17
     bb2:	4c 91       	ld	r20, X
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	9c 01       	movw	r18, r24
     bba:	04 8c       	ldd	r0, Z+28	; 0x1c
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <_ZN14HardwareSerial3endEv+0x3a>
     bbe:	22 0f       	add	r18, r18
     bc0:	33 1f       	adc	r19, r19
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <_ZN14HardwareSerial3endEv+0x36>
     bc6:	20 95       	com	r18
     bc8:	24 23       	and	r18, r20
     bca:	2c 93       	st	X, r18
     bcc:	a6 89       	ldd	r26, Z+22	; 0x16
     bce:	b7 89       	ldd	r27, Z+23	; 0x17
     bd0:	4c 91       	ld	r20, X
     bd2:	9c 01       	movw	r18, r24
     bd4:	05 8c       	ldd	r0, Z+29	; 0x1d
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <_ZN14HardwareSerial3endEv+0x54>
     bd8:	22 0f       	add	r18, r18
     bda:	33 1f       	adc	r19, r19
     bdc:	0a 94       	dec	r0
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <_ZN14HardwareSerial3endEv+0x50>
     be0:	20 95       	com	r18
     be2:	24 23       	and	r18, r20
     be4:	2c 93       	st	X, r18
     be6:	a6 89       	ldd	r26, Z+22	; 0x16
     be8:	b7 89       	ldd	r27, Z+23	; 0x17
     bea:	4c 91       	ld	r20, X
     bec:	9c 01       	movw	r18, r24
     bee:	06 8c       	ldd	r0, Z+30	; 0x1e
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <_ZN14HardwareSerial3endEv+0x6e>
     bf2:	22 0f       	add	r18, r18
     bf4:	33 1f       	adc	r19, r19
     bf6:	0a 94       	dec	r0
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <_ZN14HardwareSerial3endEv+0x6a>
     bfa:	20 95       	com	r18
     bfc:	24 23       	and	r18, r20
     bfe:	2c 93       	st	X, r18
     c00:	a6 89       	ldd	r26, Z+22	; 0x16
     c02:	b7 89       	ldd	r27, Z+23	; 0x17
     c04:	2c 91       	ld	r18, X
     c06:	07 8c       	ldd	r0, Z+31	; 0x1f
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <_ZN14HardwareSerial3endEv+0x86>
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	0a 94       	dec	r0
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <_ZN14HardwareSerial3endEv+0x82>
     c12:	80 95       	com	r24
     c14:	82 23       	and	r24, r18
     c16:	8c 93       	st	X, r24
     c18:	84 85       	ldd	r24, Z+12	; 0x0c
     c1a:	95 85       	ldd	r25, Z+13	; 0x0d
     c1c:	fc 01       	movw	r30, r24
     c1e:	ee 5b       	subi	r30, 0xBE	; 190
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	20 81       	ld	r18, Z
     c24:	31 81       	ldd	r19, Z+1	; 0x01
     c26:	fc 01       	movw	r30, r24
     c28:	e0 5c       	subi	r30, 0xC0	; 192
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	31 83       	std	Z+1, r19	; 0x01
     c2e:	20 83       	st	Z, r18
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	08 95       	ret

00000c36 <_ZN14HardwareSerialcvbEv>:
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	08 95       	ret

00000c3a <_ZN5Print5writeEPKhj>:
     c3a:	cf 92       	push	r12
     c3c:	df 92       	push	r13
     c3e:	ef 92       	push	r14
     c40:	ff 92       	push	r15
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	6c 01       	movw	r12, r24
     c4c:	eb 01       	movw	r28, r22
     c4e:	7a 01       	movw	r14, r20
     c50:	e6 0e       	add	r14, r22
     c52:	f7 1e       	adc	r15, r23
     c54:	00 e0       	ldi	r16, 0x00	; 0
     c56:	10 e0       	ldi	r17, 0x00	; 0
     c58:	0b c0       	rjmp	.+22     	; 0xc70 <_ZN5Print5writeEPKhj+0x36>
     c5a:	69 91       	ld	r22, Y+
     c5c:	d6 01       	movw	r26, r12
     c5e:	ed 91       	ld	r30, X+
     c60:	fc 91       	ld	r31, X
     c62:	01 90       	ld	r0, Z+
     c64:	f0 81       	ld	r31, Z
     c66:	e0 2d       	mov	r30, r0
     c68:	c6 01       	movw	r24, r12
     c6a:	19 95       	eicall
     c6c:	08 0f       	add	r16, r24
     c6e:	19 1f       	adc	r17, r25
     c70:	ce 15       	cp	r28, r14
     c72:	df 05       	cpc	r29, r15
     c74:	91 f7       	brne	.-28     	; 0xc5a <_ZN5Print5writeEPKhj+0x20>
     c76:	c8 01       	movw	r24, r16
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	cf 90       	pop	r12
     c88:	08 95       	ret

00000c8a <_ZN5Print5printEPK19__FlashStringHelper>:
     c8a:	ef 92       	push	r14
     c8c:	ff 92       	push	r15
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	7c 01       	movw	r14, r24
     c98:	eb 01       	movw	r28, r22
     c9a:	00 e0       	ldi	r16, 0x00	; 0
     c9c:	10 e0       	ldi	r17, 0x00	; 0
     c9e:	fe 01       	movw	r30, r28
     ca0:	21 96       	adiw	r28, 0x01	; 1
     ca2:	64 91       	lpm	r22, Z+
     ca4:	66 23       	and	r22, r22
     ca6:	51 f0       	breq	.+20     	; 0xcbc <_ZN5Print5printEPK19__FlashStringHelper+0x32>
     ca8:	f7 01       	movw	r30, r14
     caa:	a0 81       	ld	r26, Z
     cac:	b1 81       	ldd	r27, Z+1	; 0x01
     cae:	ed 91       	ld	r30, X+
     cb0:	fc 91       	ld	r31, X
     cb2:	c7 01       	movw	r24, r14
     cb4:	19 95       	eicall
     cb6:	08 0f       	add	r16, r24
     cb8:	19 1f       	adc	r17, r25
     cba:	f1 cf       	rjmp	.-30     	; 0xc9e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
     cbc:	c8 01       	movw	r24, r16
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	08 95       	ret

00000ccc <_ZN5Print5printERK6String>:
     ccc:	af 92       	push	r10
     cce:	bf 92       	push	r11
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	7c 01       	movw	r14, r24
     ce2:	6b 01       	movw	r12, r22
     ce4:	00 e0       	ldi	r16, 0x00	; 0
     ce6:	10 e0       	ldi	r17, 0x00	; 0
     ce8:	c0 e0       	ldi	r28, 0x00	; 0
     cea:	d0 e0       	ldi	r29, 0x00	; 0
     cec:	11 c0       	rjmp	.+34     	; 0xd10 <_ZN5Print5printERK6String+0x44>
     cee:	d7 01       	movw	r26, r14
     cf0:	ed 91       	ld	r30, X+
     cf2:	fc 91       	ld	r31, X
     cf4:	a0 80       	ld	r10, Z
     cf6:	b1 80       	ldd	r11, Z+1	; 0x01
     cf8:	b8 01       	movw	r22, r16
     cfa:	c6 01       	movw	r24, r12
     cfc:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZNK6StringixEj>
     d00:	68 2f       	mov	r22, r24
     d02:	c7 01       	movw	r24, r14
     d04:	f5 01       	movw	r30, r10
     d06:	19 95       	eicall
     d08:	c8 0f       	add	r28, r24
     d0a:	d9 1f       	adc	r29, r25
     d0c:	0f 5f       	subi	r16, 0xFF	; 255
     d0e:	1f 4f       	sbci	r17, 0xFF	; 255
     d10:	d6 01       	movw	r26, r12
     d12:	14 96       	adiw	r26, 0x04	; 4
     d14:	8d 91       	ld	r24, X+
     d16:	9c 91       	ld	r25, X
     d18:	15 97       	sbiw	r26, 0x05	; 5
     d1a:	08 17       	cp	r16, r24
     d1c:	19 07       	cpc	r17, r25
     d1e:	38 f3       	brcs	.-50     	; 0xcee <_ZN5Print5printERK6String+0x22>
     d20:	ce 01       	movw	r24, r28
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	ff 90       	pop	r15
     d2c:	ef 90       	pop	r14
     d2e:	df 90       	pop	r13
     d30:	cf 90       	pop	r12
     d32:	bf 90       	pop	r11
     d34:	af 90       	pop	r10
     d36:	08 95       	ret

00000d38 <_ZN5Print5printEPKc>:
     d38:	0c 94 0f 3c 	jmp	0x781e	; 0x781e <_ZN5Print5writeEPKc>

00000d3c <_ZN5Print5printEc>:
     d3c:	dc 01       	movw	r26, r24
     d3e:	ed 91       	ld	r30, X+
     d40:	fc 91       	ld	r31, X
     d42:	01 90       	ld	r0, Z+
     d44:	f0 81       	ld	r31, Z
     d46:	e0 2d       	mov	r30, r0
     d48:	19 94       	eijmp

00000d4a <_ZN5Print5printERK9Printable>:
     d4a:	db 01       	movw	r26, r22
     d4c:	ed 91       	ld	r30, X+
     d4e:	fc 91       	ld	r31, X
     d50:	11 97       	sbiw	r26, 0x01	; 1
     d52:	01 90       	ld	r0, Z+
     d54:	f0 81       	ld	r31, Z
     d56:	e0 2d       	mov	r30, r0
     d58:	bc 01       	movw	r22, r24
     d5a:	cd 01       	movw	r24, r26
     d5c:	19 94       	eijmp

00000d5e <_ZN5Print7printlnEv>:
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	ec 01       	movw	r28, r24
     d68:	6d e0       	ldi	r22, 0x0D	; 13
     d6a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_ZN5Print5printEc>
     d6e:	8c 01       	movw	r16, r24
     d70:	6a e0       	ldi	r22, 0x0A	; 10
     d72:	ce 01       	movw	r24, r28
     d74:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_ZN5Print5printEc>
     d78:	9c 01       	movw	r18, r24
     d7a:	20 0f       	add	r18, r16
     d7c:	31 1f       	adc	r19, r17
     d7e:	c9 01       	movw	r24, r18
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	08 95       	ret

00000d8a <_ZN5Print7printlnEPK19__FlashStringHelper>:
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	ec 01       	movw	r28, r24
     d94:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN5Print5printEPK19__FlashStringHelper>
     d98:	8c 01       	movw	r16, r24
     d9a:	ce 01       	movw	r24, r28
     d9c:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN5Print7printlnEv>
     da0:	9c 01       	movw	r18, r24
     da2:	20 0f       	add	r18, r16
     da4:	31 1f       	adc	r19, r17
     da6:	c9 01       	movw	r24, r18
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	08 95       	ret

00000db2 <_ZN5Print7printlnERK6String>:
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	ec 01       	movw	r28, r24
     dbc:	0e 94 66 06 	call	0xccc	; 0xccc <_ZN5Print5printERK6String>
     dc0:	8c 01       	movw	r16, r24
     dc2:	ce 01       	movw	r24, r28
     dc4:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN5Print7printlnEv>
     dc8:	9c 01       	movw	r18, r24
     dca:	20 0f       	add	r18, r16
     dcc:	31 1f       	adc	r19, r17
     dce:	c9 01       	movw	r24, r18
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	08 95       	ret

00000dda <_ZN5Print7printlnEPKc>:
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	ec 01       	movw	r28, r24
     de4:	0e 94 0f 3c 	call	0x781e	; 0x781e <_ZN5Print5writeEPKc>
     de8:	8c 01       	movw	r16, r24
     dea:	ce 01       	movw	r24, r28
     dec:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN5Print7printlnEv>
     df0:	98 01       	movw	r18, r16
     df2:	28 0f       	add	r18, r24
     df4:	39 1f       	adc	r19, r25
     df6:	c9 01       	movw	r24, r18
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	08 95       	ret

00000e02 <_ZN5Print7printlnEc>:
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	ec 01       	movw	r28, r24
     e0c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_ZN5Print5printEc>
     e10:	8c 01       	movw	r16, r24
     e12:	ce 01       	movw	r24, r28
     e14:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN5Print7printlnEv>
     e18:	9c 01       	movw	r18, r24
     e1a:	20 0f       	add	r18, r16
     e1c:	31 1f       	adc	r19, r17
     e1e:	c9 01       	movw	r24, r18
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	08 95       	ret

00000e2a <_ZN5Print7printlnERK9Printable>:
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	ec 01       	movw	r28, r24
     e34:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN5Print5printERK9Printable>
     e38:	8c 01       	movw	r16, r24
     e3a:	ce 01       	movw	r24, r28
     e3c:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN5Print7printlnEv>
     e40:	9c 01       	movw	r18, r24
     e42:	20 0f       	add	r18, r16
     e44:	31 1f       	adc	r19, r17
     e46:	c9 01       	movw	r24, r18
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	08 95       	ret

00000e52 <_ZN5Print11printNumberEmh>:
     e52:	5f 92       	push	r5
     e54:	6f 92       	push	r6
     e56:	7f 92       	push	r7
     e58:	8f 92       	push	r8
     e5a:	9f 92       	push	r9
     e5c:	af 92       	push	r10
     e5e:	bf 92       	push	r11
     e60:	cf 92       	push	r12
     e62:	df 92       	push	r13
     e64:	ef 92       	push	r14
     e66:	ff 92       	push	r15
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	a1 97       	sbiw	r28, 0x21	; 33
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	3c 01       	movw	r6, r24
     e82:	6a 01       	movw	r12, r20
     e84:	7b 01       	movw	r14, r22
     e86:	52 2e       	mov	r5, r18
     e88:	19 a2       	std	Y+33, r1	; 0x21
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	82 17       	cp	r24, r18
     e8e:	10 f0       	brcs	.+4      	; 0xe94 <_ZN5Print11printNumberEmh+0x42>
     e90:	8a e0       	ldi	r24, 0x0A	; 10
     e92:	58 2e       	mov	r5, r24
     e94:	8e 01       	movw	r16, r28
     e96:	0f 5d       	subi	r16, 0xDF	; 223
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
     e9a:	85 2c       	mov	r8, r5
     e9c:	91 2c       	mov	r9, r1
     e9e:	a1 2c       	mov	r10, r1
     ea0:	b1 2c       	mov	r11, r1
     ea2:	c7 01       	movw	r24, r14
     ea4:	b6 01       	movw	r22, r12
     ea6:	a5 01       	movw	r20, r10
     ea8:	94 01       	movw	r18, r8
     eaa:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__udivmodsi4>
     eae:	8c 2d       	mov	r24, r12
     eb0:	52 9e       	mul	r5, r18
     eb2:	80 19       	sub	r24, r0
     eb4:	11 24       	eor	r1, r1
     eb6:	01 50       	subi	r16, 0x01	; 1
     eb8:	11 09       	sbc	r17, r1
     eba:	8a 30       	cpi	r24, 0x0A	; 10
     ebc:	10 f4       	brcc	.+4      	; 0xec2 <_ZN5Print11printNumberEmh+0x70>
     ebe:	80 5d       	subi	r24, 0xD0	; 208
     ec0:	01 c0       	rjmp	.+2      	; 0xec4 <_ZN5Print11printNumberEmh+0x72>
     ec2:	89 5c       	subi	r24, 0xC9	; 201
     ec4:	f8 01       	movw	r30, r16
     ec6:	80 83       	st	Z, r24
     ec8:	69 01       	movw	r12, r18
     eca:	7a 01       	movw	r14, r20
     ecc:	c1 14       	cp	r12, r1
     ece:	d1 04       	cpc	r13, r1
     ed0:	e1 04       	cpc	r14, r1
     ed2:	f1 04       	cpc	r15, r1
     ed4:	31 f7       	brne	.-52     	; 0xea2 <_ZN5Print11printNumberEmh+0x50>
     ed6:	b8 01       	movw	r22, r16
     ed8:	c3 01       	movw	r24, r6
     eda:	0e 94 0f 3c 	call	0x781e	; 0x781e <_ZN5Print5writeEPKc>
     ede:	a1 96       	adiw	r28, 0x21	; 33
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	df 90       	pop	r13
     ef8:	cf 90       	pop	r12
     efa:	bf 90       	pop	r11
     efc:	af 90       	pop	r10
     efe:	9f 90       	pop	r9
     f00:	8f 90       	pop	r8
     f02:	7f 90       	pop	r7
     f04:	6f 90       	pop	r6
     f06:	5f 90       	pop	r5
     f08:	08 95       	ret

00000f0a <_ZN5Print5printEmi>:
     f0a:	21 15       	cp	r18, r1
     f0c:	31 05       	cpc	r19, r1
     f0e:	41 f4       	brne	.+16     	; 0xf20 <_ZN5Print5printEmi+0x16>
     f10:	dc 01       	movw	r26, r24
     f12:	ed 91       	ld	r30, X+
     f14:	fc 91       	ld	r31, X
     f16:	01 90       	ld	r0, Z+
     f18:	f0 81       	ld	r31, Z
     f1a:	e0 2d       	mov	r30, r0
     f1c:	64 2f       	mov	r22, r20
     f1e:	19 94       	eijmp
     f20:	0c 94 29 07 	jmp	0xe52	; 0xe52 <_ZN5Print11printNumberEmh>

00000f24 <_ZN5Print7printlnEmi>:
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	ec 01       	movw	r28, r24
     f2e:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN5Print5printEmi>
     f32:	8c 01       	movw	r16, r24
     f34:	ce 01       	movw	r24, r28
     f36:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN5Print7printlnEv>
     f3a:	9c 01       	movw	r18, r24
     f3c:	20 0f       	add	r18, r16
     f3e:	31 1f       	adc	r19, r17
     f40:	c9 01       	movw	r24, r18
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	08 95       	ret

00000f4c <_ZN5Print5printEji>:
     f4c:	9a 01       	movw	r18, r20
     f4e:	ab 01       	movw	r20, r22
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <_ZN5Print5printEmi>

00000f58 <_ZN5Print7printlnEji>:
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	ec 01       	movw	r28, r24
     f62:	9a 01       	movw	r18, r20
     f64:	ab 01       	movw	r20, r22
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN5Print5printEmi>
     f6e:	8c 01       	movw	r16, r24
     f70:	ce 01       	movw	r24, r28
     f72:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN5Print7printlnEv>
     f76:	98 01       	movw	r18, r16
     f78:	28 0f       	add	r18, r24
     f7a:	39 1f       	adc	r19, r25
     f7c:	c9 01       	movw	r24, r18
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	08 95       	ret

00000f88 <_ZN5Print5printEhi>:
     f88:	9a 01       	movw	r18, r20
     f8a:	46 2f       	mov	r20, r22
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <_ZN5Print5printEmi>

00000f96 <_ZN5Print7printlnEhi>:
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	ec 01       	movw	r28, r24
     fa0:	9a 01       	movw	r18, r20
     fa2:	46 2f       	mov	r20, r22
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN5Print5printEmi>
     fae:	8c 01       	movw	r16, r24
     fb0:	ce 01       	movw	r24, r28
     fb2:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN5Print7printlnEv>
     fb6:	98 01       	movw	r18, r16
     fb8:	28 0f       	add	r18, r24
     fba:	39 1f       	adc	r19, r25
     fbc:	c9 01       	movw	r24, r18
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	08 95       	ret

00000fc8 <_ZN5Print5printEli>:
     fc8:	cf 92       	push	r12
     fca:	df 92       	push	r13
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	ec 01       	movw	r28, r24
     fda:	6a 01       	movw	r12, r20
     fdc:	7b 01       	movw	r14, r22
     fde:	21 15       	cp	r18, r1
     fe0:	31 05       	cpc	r19, r1
     fe2:	79 f4       	brne	.+30     	; 0x1002 <_ZN5Print5printEli+0x3a>
     fe4:	e8 81       	ld	r30, Y
     fe6:	f9 81       	ldd	r31, Y+1	; 0x01
     fe8:	01 90       	ld	r0, Z+
     fea:	f0 81       	ld	r31, Z
     fec:	e0 2d       	mov	r30, r0
     fee:	64 2f       	mov	r22, r20
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	df 90       	pop	r13
     ffe:	cf 90       	pop	r12
    1000:	19 94       	eijmp
    1002:	2a 30       	cpi	r18, 0x0A	; 10
    1004:	31 05       	cpc	r19, r1
    1006:	19 f4       	brne	.+6      	; 0x100e <_ZN5Print5printEli+0x46>
    1008:	77 fd       	sbrc	r23, 7
    100a:	0e c0       	rjmp	.+28     	; 0x1028 <_ZN5Print5printEli+0x60>
    100c:	2a e0       	ldi	r18, 0x0A	; 10
    100e:	b7 01       	movw	r22, r14
    1010:	a6 01       	movw	r20, r12
    1012:	ce 01       	movw	r24, r28
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	ff 90       	pop	r15
    101e:	ef 90       	pop	r14
    1020:	df 90       	pop	r13
    1022:	cf 90       	pop	r12
    1024:	0c 94 29 07 	jmp	0xe52	; 0xe52 <_ZN5Print11printNumberEmh>
    1028:	6d e2       	ldi	r22, 0x2D	; 45
    102a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_ZN5Print5printEc>
    102e:	8c 01       	movw	r16, r24
    1030:	44 27       	eor	r20, r20
    1032:	55 27       	eor	r21, r21
    1034:	ba 01       	movw	r22, r20
    1036:	4c 19       	sub	r20, r12
    1038:	5d 09       	sbc	r21, r13
    103a:	6e 09       	sbc	r22, r14
    103c:	7f 09       	sbc	r23, r15
    103e:	2a e0       	ldi	r18, 0x0A	; 10
    1040:	ce 01       	movw	r24, r28
    1042:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN5Print11printNumberEmh>
    1046:	9c 01       	movw	r18, r24
    1048:	20 0f       	add	r18, r16
    104a:	31 1f       	adc	r19, r17
    104c:	c9 01       	movw	r24, r18
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	ff 90       	pop	r15
    1058:	ef 90       	pop	r14
    105a:	df 90       	pop	r13
    105c:	cf 90       	pop	r12
    105e:	08 95       	ret

00001060 <_ZN5Print7printlnEli>:
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	ec 01       	movw	r28, r24
    106a:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <_ZN5Print5printEli>
    106e:	8c 01       	movw	r16, r24
    1070:	ce 01       	movw	r24, r28
    1072:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN5Print7printlnEv>
    1076:	9c 01       	movw	r18, r24
    1078:	20 0f       	add	r18, r16
    107a:	31 1f       	adc	r19, r17
    107c:	c9 01       	movw	r24, r18
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	08 95       	ret

00001088 <_ZN5Print5printEii>:
    1088:	9a 01       	movw	r18, r20
    108a:	ab 01       	movw	r20, r22
    108c:	66 27       	eor	r22, r22
    108e:	57 fd       	sbrc	r21, 7
    1090:	60 95       	com	r22
    1092:	76 2f       	mov	r23, r22
    1094:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <_ZN5Print5printEli>

00001098 <_ZN5Print7printlnEii>:
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	ec 01       	movw	r28, r24
    10a2:	9a 01       	movw	r18, r20
    10a4:	ab 01       	movw	r20, r22
    10a6:	66 27       	eor	r22, r22
    10a8:	57 fd       	sbrc	r21, 7
    10aa:	60 95       	com	r22
    10ac:	76 2f       	mov	r23, r22
    10ae:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <_ZN5Print5printEli>
    10b2:	8c 01       	movw	r16, r24
    10b4:	ce 01       	movw	r24, r28
    10b6:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN5Print7printlnEv>
    10ba:	98 01       	movw	r18, r16
    10bc:	28 0f       	add	r18, r24
    10be:	39 1f       	adc	r19, r25
    10c0:	c9 01       	movw	r24, r18
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	08 95       	ret

000010cc <_ZN5Print10printFloatEdh>:
    10cc:	6f 92       	push	r6
    10ce:	7f 92       	push	r7
    10d0:	8f 92       	push	r8
    10d2:	9f 92       	push	r9
    10d4:	af 92       	push	r10
    10d6:	bf 92       	push	r11
    10d8:	cf 92       	push	r12
    10da:	df 92       	push	r13
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	8c 01       	movw	r16, r24
    10e8:	6a 01       	movw	r12, r20
    10ea:	7b 01       	movw	r14, r22
    10ec:	c2 2f       	mov	r28, r18
    10ee:	9a 01       	movw	r18, r20
    10f0:	ab 01       	movw	r20, r22
    10f2:	c7 01       	movw	r24, r14
    10f4:	b6 01       	movw	r22, r12
    10f6:	0e 94 b5 3f 	call	0x7f6a	; 0x7f6a <__unordsf2>
    10fa:	88 23       	and	r24, r24
    10fc:	19 f0       	breq	.+6      	; 0x1104 <_ZN5Print10printFloatEdh+0x38>
    10fe:	6e ee       	ldi	r22, 0xEE	; 238
    1100:	74 e0       	ldi	r23, 0x04	; 4
    1102:	32 c0       	rjmp	.+100    	; 0x1168 <_ZN5Print10printFloatEdh+0x9c>
    1104:	46 01       	movw	r8, r12
    1106:	57 01       	movw	r10, r14
    1108:	e8 94       	clt
    110a:	b7 f8       	bld	r11, 7
    110c:	2f ef       	ldi	r18, 0xFF	; 255
    110e:	3f ef       	ldi	r19, 0xFF	; 255
    1110:	4f e7       	ldi	r20, 0x7F	; 127
    1112:	5f e7       	ldi	r21, 0x7F	; 127
    1114:	c5 01       	movw	r24, r10
    1116:	b4 01       	movw	r22, r8
    1118:	0e 94 b5 3f 	call	0x7f6a	; 0x7f6a <__unordsf2>
    111c:	81 11       	cpse	r24, r1
    111e:	0d c0       	rjmp	.+26     	; 0x113a <_ZN5Print10printFloatEdh+0x6e>
    1120:	2f ef       	ldi	r18, 0xFF	; 255
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	5f e7       	ldi	r21, 0x7F	; 127
    1128:	c5 01       	movw	r24, r10
    112a:	b4 01       	movw	r22, r8
    112c:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    1130:	18 16       	cp	r1, r24
    1132:	1c f4       	brge	.+6      	; 0x113a <_ZN5Print10printFloatEdh+0x6e>
    1134:	62 ef       	ldi	r22, 0xF2	; 242
    1136:	74 e0       	ldi	r23, 0x04	; 4
    1138:	17 c0       	rjmp	.+46     	; 0x1168 <_ZN5Print10printFloatEdh+0x9c>
    113a:	2f ef       	ldi	r18, 0xFF	; 255
    113c:	3f ef       	ldi	r19, 0xFF	; 255
    113e:	4f e7       	ldi	r20, 0x7F	; 127
    1140:	5f e4       	ldi	r21, 0x4F	; 79
    1142:	c7 01       	movw	r24, r14
    1144:	b6 01       	movw	r22, r12
    1146:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    114a:	18 16       	cp	r1, r24
    114c:	0c f4       	brge	.+2      	; 0x1150 <_ZN5Print10printFloatEdh+0x84>
    114e:	0a c0       	rjmp	.+20     	; 0x1164 <_ZN5Print10printFloatEdh+0x98>
    1150:	2f ef       	ldi	r18, 0xFF	; 255
    1152:	3f ef       	ldi	r19, 0xFF	; 255
    1154:	4f e7       	ldi	r20, 0x7F	; 127
    1156:	5f ec       	ldi	r21, 0xCF	; 207
    1158:	c7 01       	movw	r24, r14
    115a:	b6 01       	movw	r22, r12
    115c:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    1160:	87 ff       	sbrs	r24, 7
    1162:	12 c0       	rjmp	.+36     	; 0x1188 <_ZN5Print10printFloatEdh+0xbc>
    1164:	66 ef       	ldi	r22, 0xF6	; 246
    1166:	74 e0       	ldi	r23, 0x04	; 4
    1168:	c8 01       	movw	r24, r16
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	df 90       	pop	r13
    1176:	cf 90       	pop	r12
    1178:	bf 90       	pop	r11
    117a:	af 90       	pop	r10
    117c:	9f 90       	pop	r9
    117e:	8f 90       	pop	r8
    1180:	7f 90       	pop	r7
    1182:	6f 90       	pop	r6
    1184:	0c 94 0f 3c 	jmp	0x781e	; 0x781e <_ZN5Print5writeEPKc>
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	a9 01       	movw	r20, r18
    118e:	c7 01       	movw	r24, r14
    1190:	b6 01       	movw	r22, r12
    1192:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    1196:	87 ff       	sbrs	r24, 7
    1198:	0a c0       	rjmp	.+20     	; 0x11ae <_ZN5Print10printFloatEdh+0xe2>
    119a:	6d e2       	ldi	r22, 0x2D	; 45
    119c:	c8 01       	movw	r24, r16
    119e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_ZN5Print5printEc>
    11a2:	3c 01       	movw	r6, r24
    11a4:	f7 fa       	bst	r15, 7
    11a6:	f0 94       	com	r15
    11a8:	f7 f8       	bld	r15, 7
    11aa:	f0 94       	com	r15
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <_ZN5Print10printFloatEdh+0xe6>
    11ae:	61 2c       	mov	r6, r1
    11b0:	71 2c       	mov	r7, r1
    11b2:	b1 2c       	mov	r11, r1
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	9f e3       	ldi	r25, 0x3F	; 63
    11bc:	07 c0       	rjmp	.+14     	; 0x11cc <_ZN5Print10printFloatEdh+0x100>
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e2       	ldi	r20, 0x20	; 32
    11c4:	51 e4       	ldi	r21, 0x41	; 65
    11c6:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <__divsf3>
    11ca:	b3 94       	inc	r11
    11cc:	bc 12       	cpse	r11, r28
    11ce:	f7 cf       	rjmp	.-18     	; 0x11be <_ZN5Print10printFloatEdh+0xf2>
    11d0:	26 2f       	mov	r18, r22
    11d2:	37 2f       	mov	r19, r23
    11d4:	48 2f       	mov	r20, r24
    11d6:	59 2f       	mov	r21, r25
    11d8:	c7 01       	movw	r24, r14
    11da:	b6 01       	movw	r22, r12
    11dc:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    11e0:	4b 01       	movw	r8, r22
    11e2:	5c 01       	movw	r10, r24
    11e4:	79 2d       	mov	r23, r9
    11e6:	9b 2d       	mov	r25, r11
    11e8:	0e 94 6d 3d 	call	0x7ada	; 0x7ada <__fixunssfsi>
    11ec:	6b 01       	movw	r12, r22
    11ee:	7c 01       	movw	r14, r24
    11f0:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <__floatunsisf>
    11f4:	9b 01       	movw	r18, r22
    11f6:	ac 01       	movw	r20, r24
    11f8:	68 2d       	mov	r22, r8
    11fa:	79 2d       	mov	r23, r9
    11fc:	8a 2d       	mov	r24, r10
    11fe:	9b 2d       	mov	r25, r11
    1200:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    1204:	b6 2e       	mov	r11, r22
    1206:	a7 2e       	mov	r10, r23
    1208:	98 2e       	mov	r9, r24
    120a:	89 2e       	mov	r8, r25
    120c:	2a e0       	ldi	r18, 0x0A	; 10
    120e:	a6 01       	movw	r20, r12
    1210:	b7 01       	movw	r22, r14
    1212:	c8 01       	movw	r24, r16
    1214:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN5Print11printNumberEmh>
    1218:	68 0e       	add	r6, r24
    121a:	79 1e       	adc	r7, r25
    121c:	cc 23       	and	r28, r28
    121e:	c9 f1       	breq	.+114    	; 0x1292 <_ZN5Print10printFloatEdh+0x1c6>
    1220:	64 ec       	ldi	r22, 0xC4	; 196
    1222:	73 e0       	ldi	r23, 0x03	; 3
    1224:	c8 01       	movw	r24, r16
    1226:	0e 94 0f 3c 	call	0x781e	; 0x781e <_ZN5Print5writeEPKc>
    122a:	68 0e       	add	r6, r24
    122c:	79 1e       	adc	r7, r25
    122e:	31 c0       	rjmp	.+98     	; 0x1292 <_ZN5Print10printFloatEdh+0x1c6>
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e2       	ldi	r20, 0x20	; 32
    1236:	51 e4       	ldi	r21, 0x41	; 65
    1238:	d5 01       	movw	r26, r10
    123a:	f4 01       	movw	r30, r8
    123c:	6b 2f       	mov	r22, r27
    123e:	7a 2d       	mov	r23, r10
    1240:	8f 2f       	mov	r24, r31
    1242:	98 2d       	mov	r25, r8
    1244:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    1248:	4b 01       	movw	r8, r22
    124a:	5c 01       	movw	r10, r24
    124c:	79 2d       	mov	r23, r9
    124e:	9b 2d       	mov	r25, r11
    1250:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__fixsfsi>
    1254:	6b 01       	movw	r12, r22
    1256:	ee 24       	eor	r14, r14
    1258:	d7 fc       	sbrc	r13, 7
    125a:	e0 94       	com	r14
    125c:	fe 2c       	mov	r15, r14
    125e:	2a e0       	ldi	r18, 0x0A	; 10
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	b7 01       	movw	r22, r14
    1264:	a6 01       	movw	r20, r12
    1266:	c8 01       	movw	r24, r16
    1268:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <_ZN5Print5printEli>
    126c:	68 0e       	add	r6, r24
    126e:	79 1e       	adc	r7, r25
    1270:	c7 01       	movw	r24, r14
    1272:	b6 01       	movw	r22, r12
    1274:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__floatsisf>
    1278:	9b 01       	movw	r18, r22
    127a:	ac 01       	movw	r20, r24
    127c:	68 2d       	mov	r22, r8
    127e:	79 2d       	mov	r23, r9
    1280:	8a 2d       	mov	r24, r10
    1282:	9b 2d       	mov	r25, r11
    1284:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    1288:	b6 2e       	mov	r11, r22
    128a:	a7 2e       	mov	r10, r23
    128c:	98 2e       	mov	r9, r24
    128e:	89 2e       	mov	r8, r25
    1290:	c1 50       	subi	r28, 0x01	; 1
    1292:	c1 11       	cpse	r28, r1
    1294:	cd cf       	rjmp	.-102    	; 0x1230 <_ZN5Print10printFloatEdh+0x164>
    1296:	c3 01       	movw	r24, r6
    1298:	cf 91       	pop	r28
    129a:	1f 91       	pop	r17
    129c:	0f 91       	pop	r16
    129e:	ff 90       	pop	r15
    12a0:	ef 90       	pop	r14
    12a2:	df 90       	pop	r13
    12a4:	cf 90       	pop	r12
    12a6:	bf 90       	pop	r11
    12a8:	af 90       	pop	r10
    12aa:	9f 90       	pop	r9
    12ac:	8f 90       	pop	r8
    12ae:	7f 90       	pop	r7
    12b0:	6f 90       	pop	r6
    12b2:	08 95       	ret

000012b4 <_ZN5Print5printEdi>:
    12b4:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <_ZN5Print10printFloatEdh>

000012b8 <_ZN5Print7printlnEdi>:
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	ec 01       	movw	r28, r24
    12c2:	0e 94 66 08 	call	0x10cc	; 0x10cc <_ZN5Print10printFloatEdh>
    12c6:	8c 01       	movw	r16, r24
    12c8:	ce 01       	movw	r24, r28
    12ca:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN5Print7printlnEv>
    12ce:	98 01       	movw	r18, r16
    12d0:	28 0f       	add	r18, r24
    12d2:	39 1f       	adc	r19, r25
    12d4:	c9 01       	movw	r24, r18
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	08 95       	ret

000012e0 <attachInterrupt>:
    12e0:	88 30       	cpi	r24, 0x08	; 8
    12e2:	08 f0       	brcs	.+2      	; 0x12e6 <attachInterrupt+0x6>
    12e4:	73 c0       	rjmp	.+230    	; 0x13cc <attachInterrupt+0xec>
    12e6:	e8 2f       	mov	r30, r24
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	ee 0f       	add	r30, r30
    12ec:	ff 1f       	adc	r31, r31
    12ee:	ee 55       	subi	r30, 0x5E	; 94
    12f0:	f8 4f       	sbci	r31, 0xF8	; 248
    12f2:	71 83       	std	Z+1, r23	; 0x01
    12f4:	60 83       	st	Z, r22
    12f6:	84 30       	cpi	r24, 0x04	; 4
    12f8:	11 f1       	breq	.+68     	; 0x133e <attachInterrupt+0x5e>
    12fa:	30 f4       	brcc	.+12     	; 0x1308 <attachInterrupt+0x28>
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	59 f0       	breq	.+22     	; 0x1316 <attachInterrupt+0x36>
    1300:	90 f4       	brcc	.+36     	; 0x1326 <attachInterrupt+0x46>
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	b1 f5       	brne	.+108    	; 0x1372 <attachInterrupt+0x92>
    1306:	3d c0       	rjmp	.+122    	; 0x1382 <attachInterrupt+0xa2>
    1308:	86 30       	cpi	r24, 0x06	; 6
    130a:	09 f4       	brne	.+2      	; 0x130e <attachInterrupt+0x2e>
    130c:	46 c0       	rjmp	.+140    	; 0x139a <attachInterrupt+0xba>
    130e:	20 f1       	brcs	.+72     	; 0x1358 <attachInterrupt+0x78>
    1310:	87 30       	cpi	r24, 0x07	; 7
    1312:	79 f5       	brne	.+94     	; 0x1372 <attachInterrupt+0x92>
    1314:	4f c0       	rjmp	.+158    	; 0x13b4 <attachInterrupt+0xd4>
    1316:	80 91 69 00 	lds	r24, 0x0069
    131a:	8c 7f       	andi	r24, 0xFC	; 252
    131c:	84 2b       	or	r24, r20
    131e:	80 93 69 00 	sts	0x0069, r24
    1322:	e8 9a       	sbi	0x1d, 0	; 29
    1324:	08 95       	ret
    1326:	80 91 69 00 	lds	r24, 0x0069
    132a:	44 0f       	add	r20, r20
    132c:	55 1f       	adc	r21, r21
    132e:	44 0f       	add	r20, r20
    1330:	55 1f       	adc	r21, r21
    1332:	83 7f       	andi	r24, 0xF3	; 243
    1334:	84 2b       	or	r24, r20
    1336:	80 93 69 00 	sts	0x0069, r24
    133a:	e9 9a       	sbi	0x1d, 1	; 29
    133c:	08 95       	ret
    133e:	80 91 69 00 	lds	r24, 0x0069
    1342:	74 e0       	ldi	r23, 0x04	; 4
    1344:	44 0f       	add	r20, r20
    1346:	55 1f       	adc	r21, r21
    1348:	7a 95       	dec	r23
    134a:	e1 f7       	brne	.-8      	; 0x1344 <attachInterrupt+0x64>
    134c:	8f 7c       	andi	r24, 0xCF	; 207
    134e:	84 2b       	or	r24, r20
    1350:	80 93 69 00 	sts	0x0069, r24
    1354:	ea 9a       	sbi	0x1d, 2	; 29
    1356:	08 95       	ret
    1358:	80 91 69 00 	lds	r24, 0x0069
    135c:	66 e0       	ldi	r22, 0x06	; 6
    135e:	44 0f       	add	r20, r20
    1360:	55 1f       	adc	r21, r21
    1362:	6a 95       	dec	r22
    1364:	e1 f7       	brne	.-8      	; 0x135e <attachInterrupt+0x7e>
    1366:	8f 73       	andi	r24, 0x3F	; 63
    1368:	84 2b       	or	r24, r20
    136a:	80 93 69 00 	sts	0x0069, r24
    136e:	eb 9a       	sbi	0x1d, 3	; 29
    1370:	08 95       	ret
    1372:	80 91 6a 00 	lds	r24, 0x006A
    1376:	8c 7f       	andi	r24, 0xFC	; 252
    1378:	84 2b       	or	r24, r20
    137a:	80 93 6a 00 	sts	0x006A, r24
    137e:	ec 9a       	sbi	0x1d, 4	; 29
    1380:	08 95       	ret
    1382:	80 91 6a 00 	lds	r24, 0x006A
    1386:	44 0f       	add	r20, r20
    1388:	55 1f       	adc	r21, r21
    138a:	44 0f       	add	r20, r20
    138c:	55 1f       	adc	r21, r21
    138e:	83 7f       	andi	r24, 0xF3	; 243
    1390:	84 2b       	or	r24, r20
    1392:	80 93 6a 00 	sts	0x006A, r24
    1396:	ed 9a       	sbi	0x1d, 5	; 29
    1398:	08 95       	ret
    139a:	80 91 6a 00 	lds	r24, 0x006A
    139e:	24 e0       	ldi	r18, 0x04	; 4
    13a0:	44 0f       	add	r20, r20
    13a2:	55 1f       	adc	r21, r21
    13a4:	2a 95       	dec	r18
    13a6:	e1 f7       	brne	.-8      	; 0x13a0 <attachInterrupt+0xc0>
    13a8:	8f 7c       	andi	r24, 0xCF	; 207
    13aa:	84 2b       	or	r24, r20
    13ac:	80 93 6a 00 	sts	0x006A, r24
    13b0:	ee 9a       	sbi	0x1d, 6	; 29
    13b2:	08 95       	ret
    13b4:	80 91 6a 00 	lds	r24, 0x006A
    13b8:	96 e0       	ldi	r25, 0x06	; 6
    13ba:	44 0f       	add	r20, r20
    13bc:	55 1f       	adc	r21, r21
    13be:	9a 95       	dec	r25
    13c0:	e1 f7       	brne	.-8      	; 0x13ba <attachInterrupt+0xda>
    13c2:	8f 73       	andi	r24, 0x3F	; 63
    13c4:	84 2b       	or	r24, r20
    13c6:	80 93 6a 00 	sts	0x006A, r24
    13ca:	ef 9a       	sbi	0x1d, 7	; 29
    13cc:	08 95       	ret

000013ce <detachInterrupt>:
    13ce:	88 30       	cpi	r24, 0x08	; 8
    13d0:	30 f5       	brcc	.+76     	; 0x141e <detachInterrupt+0x50>
    13d2:	84 30       	cpi	r24, 0x04	; 4
    13d4:	89 f0       	breq	.+34     	; 0x13f8 <detachInterrupt+0x2a>
    13d6:	30 f4       	brcc	.+12     	; 0x13e4 <detachInterrupt+0x16>
    13d8:	82 30       	cpi	r24, 0x02	; 2
    13da:	51 f0       	breq	.+20     	; 0x13f0 <detachInterrupt+0x22>
    13dc:	58 f4       	brcc	.+22     	; 0x13f4 <detachInterrupt+0x26>
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	79 f4       	brne	.+30     	; 0x1400 <detachInterrupt+0x32>
    13e2:	10 c0       	rjmp	.+32     	; 0x1404 <detachInterrupt+0x36>
    13e4:	86 30       	cpi	r24, 0x06	; 6
    13e6:	81 f0       	breq	.+32     	; 0x1408 <detachInterrupt+0x3a>
    13e8:	48 f0       	brcs	.+18     	; 0x13fc <detachInterrupt+0x2e>
    13ea:	87 30       	cpi	r24, 0x07	; 7
    13ec:	49 f4       	brne	.+18     	; 0x1400 <detachInterrupt+0x32>
    13ee:	0e c0       	rjmp	.+28     	; 0x140c <detachInterrupt+0x3e>
    13f0:	e8 98       	cbi	0x1d, 0	; 29
    13f2:	0d c0       	rjmp	.+26     	; 0x140e <detachInterrupt+0x40>
    13f4:	e9 98       	cbi	0x1d, 1	; 29
    13f6:	0b c0       	rjmp	.+22     	; 0x140e <detachInterrupt+0x40>
    13f8:	ea 98       	cbi	0x1d, 2	; 29
    13fa:	09 c0       	rjmp	.+18     	; 0x140e <detachInterrupt+0x40>
    13fc:	eb 98       	cbi	0x1d, 3	; 29
    13fe:	07 c0       	rjmp	.+14     	; 0x140e <detachInterrupt+0x40>
    1400:	ec 98       	cbi	0x1d, 4	; 29
    1402:	05 c0       	rjmp	.+10     	; 0x140e <detachInterrupt+0x40>
    1404:	ed 98       	cbi	0x1d, 5	; 29
    1406:	03 c0       	rjmp	.+6      	; 0x140e <detachInterrupt+0x40>
    1408:	ee 98       	cbi	0x1d, 6	; 29
    140a:	01 c0       	rjmp	.+2      	; 0x140e <detachInterrupt+0x40>
    140c:	ef 98       	cbi	0x1d, 7	; 29
    140e:	e8 2f       	mov	r30, r24
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	ee 55       	subi	r30, 0x5E	; 94
    1418:	f8 4f       	sbci	r31, 0xF8	; 248
    141a:	11 82       	std	Z+1, r1	; 0x01
    141c:	10 82       	st	Z, r1
    141e:	08 95       	ret

00001420 <__vector_1>:
    1420:	1f 92       	push	r1
    1422:	0f 92       	push	r0
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	0f 92       	push	r0
    1428:	11 24       	eor	r1, r1
    142a:	0b b6       	in	r0, 0x3b	; 59
    142c:	0f 92       	push	r0
    142e:	1b be       	out	0x3b, r1	; 59
    1430:	2f 93       	push	r18
    1432:	3f 93       	push	r19
    1434:	4f 93       	push	r20
    1436:	5f 93       	push	r21
    1438:	6f 93       	push	r22
    143a:	7f 93       	push	r23
    143c:	8f 93       	push	r24
    143e:	9f 93       	push	r25
    1440:	af 93       	push	r26
    1442:	bf 93       	push	r27
    1444:	ef 93       	push	r30
    1446:	ff 93       	push	r31
    1448:	80 91 a6 07 	lds	r24, 0x07A6
    144c:	90 91 a7 07 	lds	r25, 0x07A7
    1450:	89 2b       	or	r24, r25
    1452:	29 f0       	breq	.+10     	; 0x145e <__vector_1+0x3e>
    1454:	e0 91 a6 07 	lds	r30, 0x07A6
    1458:	f0 91 a7 07 	lds	r31, 0x07A7
    145c:	19 95       	eicall
    145e:	ff 91       	pop	r31
    1460:	ef 91       	pop	r30
    1462:	bf 91       	pop	r27
    1464:	af 91       	pop	r26
    1466:	9f 91       	pop	r25
    1468:	8f 91       	pop	r24
    146a:	7f 91       	pop	r23
    146c:	6f 91       	pop	r22
    146e:	5f 91       	pop	r21
    1470:	4f 91       	pop	r20
    1472:	3f 91       	pop	r19
    1474:	2f 91       	pop	r18
    1476:	0f 90       	pop	r0
    1478:	0b be       	out	0x3b, r0	; 59
    147a:	0f 90       	pop	r0
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	0f 90       	pop	r0
    1480:	1f 90       	pop	r1
    1482:	18 95       	reti

00001484 <__vector_2>:
    1484:	1f 92       	push	r1
    1486:	0f 92       	push	r0
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	0f 92       	push	r0
    148c:	11 24       	eor	r1, r1
    148e:	0b b6       	in	r0, 0x3b	; 59
    1490:	0f 92       	push	r0
    1492:	1b be       	out	0x3b, r1	; 59
    1494:	2f 93       	push	r18
    1496:	3f 93       	push	r19
    1498:	4f 93       	push	r20
    149a:	5f 93       	push	r21
    149c:	6f 93       	push	r22
    149e:	7f 93       	push	r23
    14a0:	8f 93       	push	r24
    14a2:	9f 93       	push	r25
    14a4:	af 93       	push	r26
    14a6:	bf 93       	push	r27
    14a8:	ef 93       	push	r30
    14aa:	ff 93       	push	r31
    14ac:	80 91 a8 07 	lds	r24, 0x07A8
    14b0:	90 91 a9 07 	lds	r25, 0x07A9
    14b4:	89 2b       	or	r24, r25
    14b6:	29 f0       	breq	.+10     	; 0x14c2 <__vector_2+0x3e>
    14b8:	e0 91 a8 07 	lds	r30, 0x07A8
    14bc:	f0 91 a9 07 	lds	r31, 0x07A9
    14c0:	19 95       	eicall
    14c2:	ff 91       	pop	r31
    14c4:	ef 91       	pop	r30
    14c6:	bf 91       	pop	r27
    14c8:	af 91       	pop	r26
    14ca:	9f 91       	pop	r25
    14cc:	8f 91       	pop	r24
    14ce:	7f 91       	pop	r23
    14d0:	6f 91       	pop	r22
    14d2:	5f 91       	pop	r21
    14d4:	4f 91       	pop	r20
    14d6:	3f 91       	pop	r19
    14d8:	2f 91       	pop	r18
    14da:	0f 90       	pop	r0
    14dc:	0b be       	out	0x3b, r0	; 59
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	0f 90       	pop	r0
    14e4:	1f 90       	pop	r1
    14e6:	18 95       	reti

000014e8 <__vector_3>:
    14e8:	1f 92       	push	r1
    14ea:	0f 92       	push	r0
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	0f 92       	push	r0
    14f0:	11 24       	eor	r1, r1
    14f2:	0b b6       	in	r0, 0x3b	; 59
    14f4:	0f 92       	push	r0
    14f6:	1b be       	out	0x3b, r1	; 59
    14f8:	2f 93       	push	r18
    14fa:	3f 93       	push	r19
    14fc:	4f 93       	push	r20
    14fe:	5f 93       	push	r21
    1500:	6f 93       	push	r22
    1502:	7f 93       	push	r23
    1504:	8f 93       	push	r24
    1506:	9f 93       	push	r25
    1508:	af 93       	push	r26
    150a:	bf 93       	push	r27
    150c:	ef 93       	push	r30
    150e:	ff 93       	push	r31
    1510:	80 91 aa 07 	lds	r24, 0x07AA
    1514:	90 91 ab 07 	lds	r25, 0x07AB
    1518:	89 2b       	or	r24, r25
    151a:	29 f0       	breq	.+10     	; 0x1526 <__vector_3+0x3e>
    151c:	e0 91 aa 07 	lds	r30, 0x07AA
    1520:	f0 91 ab 07 	lds	r31, 0x07AB
    1524:	19 95       	eicall
    1526:	ff 91       	pop	r31
    1528:	ef 91       	pop	r30
    152a:	bf 91       	pop	r27
    152c:	af 91       	pop	r26
    152e:	9f 91       	pop	r25
    1530:	8f 91       	pop	r24
    1532:	7f 91       	pop	r23
    1534:	6f 91       	pop	r22
    1536:	5f 91       	pop	r21
    1538:	4f 91       	pop	r20
    153a:	3f 91       	pop	r19
    153c:	2f 91       	pop	r18
    153e:	0f 90       	pop	r0
    1540:	0b be       	out	0x3b, r0	; 59
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0
    1548:	1f 90       	pop	r1
    154a:	18 95       	reti

0000154c <__vector_4>:
    154c:	1f 92       	push	r1
    154e:	0f 92       	push	r0
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	0f 92       	push	r0
    1554:	11 24       	eor	r1, r1
    1556:	0b b6       	in	r0, 0x3b	; 59
    1558:	0f 92       	push	r0
    155a:	1b be       	out	0x3b, r1	; 59
    155c:	2f 93       	push	r18
    155e:	3f 93       	push	r19
    1560:	4f 93       	push	r20
    1562:	5f 93       	push	r21
    1564:	6f 93       	push	r22
    1566:	7f 93       	push	r23
    1568:	8f 93       	push	r24
    156a:	9f 93       	push	r25
    156c:	af 93       	push	r26
    156e:	bf 93       	push	r27
    1570:	ef 93       	push	r30
    1572:	ff 93       	push	r31
    1574:	80 91 ac 07 	lds	r24, 0x07AC
    1578:	90 91 ad 07 	lds	r25, 0x07AD
    157c:	89 2b       	or	r24, r25
    157e:	29 f0       	breq	.+10     	; 0x158a <__vector_4+0x3e>
    1580:	e0 91 ac 07 	lds	r30, 0x07AC
    1584:	f0 91 ad 07 	lds	r31, 0x07AD
    1588:	19 95       	eicall
    158a:	ff 91       	pop	r31
    158c:	ef 91       	pop	r30
    158e:	bf 91       	pop	r27
    1590:	af 91       	pop	r26
    1592:	9f 91       	pop	r25
    1594:	8f 91       	pop	r24
    1596:	7f 91       	pop	r23
    1598:	6f 91       	pop	r22
    159a:	5f 91       	pop	r21
    159c:	4f 91       	pop	r20
    159e:	3f 91       	pop	r19
    15a0:	2f 91       	pop	r18
    15a2:	0f 90       	pop	r0
    15a4:	0b be       	out	0x3b, r0	; 59
    15a6:	0f 90       	pop	r0
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	0f 90       	pop	r0
    15ac:	1f 90       	pop	r1
    15ae:	18 95       	reti

000015b0 <__vector_5>:
    15b0:	1f 92       	push	r1
    15b2:	0f 92       	push	r0
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	0f 92       	push	r0
    15b8:	11 24       	eor	r1, r1
    15ba:	0b b6       	in	r0, 0x3b	; 59
    15bc:	0f 92       	push	r0
    15be:	1b be       	out	0x3b, r1	; 59
    15c0:	2f 93       	push	r18
    15c2:	3f 93       	push	r19
    15c4:	4f 93       	push	r20
    15c6:	5f 93       	push	r21
    15c8:	6f 93       	push	r22
    15ca:	7f 93       	push	r23
    15cc:	8f 93       	push	r24
    15ce:	9f 93       	push	r25
    15d0:	af 93       	push	r26
    15d2:	bf 93       	push	r27
    15d4:	ef 93       	push	r30
    15d6:	ff 93       	push	r31
    15d8:	80 91 a2 07 	lds	r24, 0x07A2
    15dc:	90 91 a3 07 	lds	r25, 0x07A3
    15e0:	89 2b       	or	r24, r25
    15e2:	29 f0       	breq	.+10     	; 0x15ee <__vector_5+0x3e>
    15e4:	e0 91 a2 07 	lds	r30, 0x07A2
    15e8:	f0 91 a3 07 	lds	r31, 0x07A3
    15ec:	19 95       	eicall
    15ee:	ff 91       	pop	r31
    15f0:	ef 91       	pop	r30
    15f2:	bf 91       	pop	r27
    15f4:	af 91       	pop	r26
    15f6:	9f 91       	pop	r25
    15f8:	8f 91       	pop	r24
    15fa:	7f 91       	pop	r23
    15fc:	6f 91       	pop	r22
    15fe:	5f 91       	pop	r21
    1600:	4f 91       	pop	r20
    1602:	3f 91       	pop	r19
    1604:	2f 91       	pop	r18
    1606:	0f 90       	pop	r0
    1608:	0b be       	out	0x3b, r0	; 59
    160a:	0f 90       	pop	r0
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	0f 90       	pop	r0
    1610:	1f 90       	pop	r1
    1612:	18 95       	reti

00001614 <__vector_6>:
    1614:	1f 92       	push	r1
    1616:	0f 92       	push	r0
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	0f 92       	push	r0
    161c:	11 24       	eor	r1, r1
    161e:	0b b6       	in	r0, 0x3b	; 59
    1620:	0f 92       	push	r0
    1622:	1b be       	out	0x3b, r1	; 59
    1624:	2f 93       	push	r18
    1626:	3f 93       	push	r19
    1628:	4f 93       	push	r20
    162a:	5f 93       	push	r21
    162c:	6f 93       	push	r22
    162e:	7f 93       	push	r23
    1630:	8f 93       	push	r24
    1632:	9f 93       	push	r25
    1634:	af 93       	push	r26
    1636:	bf 93       	push	r27
    1638:	ef 93       	push	r30
    163a:	ff 93       	push	r31
    163c:	80 91 a4 07 	lds	r24, 0x07A4
    1640:	90 91 a5 07 	lds	r25, 0x07A5
    1644:	89 2b       	or	r24, r25
    1646:	29 f0       	breq	.+10     	; 0x1652 <__vector_6+0x3e>
    1648:	e0 91 a4 07 	lds	r30, 0x07A4
    164c:	f0 91 a5 07 	lds	r31, 0x07A5
    1650:	19 95       	eicall
    1652:	ff 91       	pop	r31
    1654:	ef 91       	pop	r30
    1656:	bf 91       	pop	r27
    1658:	af 91       	pop	r26
    165a:	9f 91       	pop	r25
    165c:	8f 91       	pop	r24
    165e:	7f 91       	pop	r23
    1660:	6f 91       	pop	r22
    1662:	5f 91       	pop	r21
    1664:	4f 91       	pop	r20
    1666:	3f 91       	pop	r19
    1668:	2f 91       	pop	r18
    166a:	0f 90       	pop	r0
    166c:	0b be       	out	0x3b, r0	; 59
    166e:	0f 90       	pop	r0
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	0f 90       	pop	r0
    1674:	1f 90       	pop	r1
    1676:	18 95       	reti

00001678 <__vector_7>:
    1678:	1f 92       	push	r1
    167a:	0f 92       	push	r0
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	0f 92       	push	r0
    1680:	11 24       	eor	r1, r1
    1682:	0b b6       	in	r0, 0x3b	; 59
    1684:	0f 92       	push	r0
    1686:	1b be       	out	0x3b, r1	; 59
    1688:	2f 93       	push	r18
    168a:	3f 93       	push	r19
    168c:	4f 93       	push	r20
    168e:	5f 93       	push	r21
    1690:	6f 93       	push	r22
    1692:	7f 93       	push	r23
    1694:	8f 93       	push	r24
    1696:	9f 93       	push	r25
    1698:	af 93       	push	r26
    169a:	bf 93       	push	r27
    169c:	ef 93       	push	r30
    169e:	ff 93       	push	r31
    16a0:	80 91 ae 07 	lds	r24, 0x07AE
    16a4:	90 91 af 07 	lds	r25, 0x07AF
    16a8:	89 2b       	or	r24, r25
    16aa:	29 f0       	breq	.+10     	; 0x16b6 <__vector_7+0x3e>
    16ac:	e0 91 ae 07 	lds	r30, 0x07AE
    16b0:	f0 91 af 07 	lds	r31, 0x07AF
    16b4:	19 95       	eicall
    16b6:	ff 91       	pop	r31
    16b8:	ef 91       	pop	r30
    16ba:	bf 91       	pop	r27
    16bc:	af 91       	pop	r26
    16be:	9f 91       	pop	r25
    16c0:	8f 91       	pop	r24
    16c2:	7f 91       	pop	r23
    16c4:	6f 91       	pop	r22
    16c6:	5f 91       	pop	r21
    16c8:	4f 91       	pop	r20
    16ca:	3f 91       	pop	r19
    16cc:	2f 91       	pop	r18
    16ce:	0f 90       	pop	r0
    16d0:	0b be       	out	0x3b, r0	; 59
    16d2:	0f 90       	pop	r0
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	0f 90       	pop	r0
    16d8:	1f 90       	pop	r1
    16da:	18 95       	reti

000016dc <__vector_8>:
    16dc:	1f 92       	push	r1
    16de:	0f 92       	push	r0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	0f 92       	push	r0
    16e4:	11 24       	eor	r1, r1
    16e6:	0b b6       	in	r0, 0x3b	; 59
    16e8:	0f 92       	push	r0
    16ea:	1b be       	out	0x3b, r1	; 59
    16ec:	2f 93       	push	r18
    16ee:	3f 93       	push	r19
    16f0:	4f 93       	push	r20
    16f2:	5f 93       	push	r21
    16f4:	6f 93       	push	r22
    16f6:	7f 93       	push	r23
    16f8:	8f 93       	push	r24
    16fa:	9f 93       	push	r25
    16fc:	af 93       	push	r26
    16fe:	bf 93       	push	r27
    1700:	ef 93       	push	r30
    1702:	ff 93       	push	r31
    1704:	80 91 b0 07 	lds	r24, 0x07B0
    1708:	90 91 b1 07 	lds	r25, 0x07B1
    170c:	89 2b       	or	r24, r25
    170e:	29 f0       	breq	.+10     	; 0x171a <__vector_8+0x3e>
    1710:	e0 91 b0 07 	lds	r30, 0x07B0
    1714:	f0 91 b1 07 	lds	r31, 0x07B1
    1718:	19 95       	eicall
    171a:	ff 91       	pop	r31
    171c:	ef 91       	pop	r30
    171e:	bf 91       	pop	r27
    1720:	af 91       	pop	r26
    1722:	9f 91       	pop	r25
    1724:	8f 91       	pop	r24
    1726:	7f 91       	pop	r23
    1728:	6f 91       	pop	r22
    172a:	5f 91       	pop	r21
    172c:	4f 91       	pop	r20
    172e:	3f 91       	pop	r19
    1730:	2f 91       	pop	r18
    1732:	0f 90       	pop	r0
    1734:	0b be       	out	0x3b, r0	; 59
    1736:	0f 90       	pop	r0
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	0f 90       	pop	r0
    173c:	1f 90       	pop	r1
    173e:	18 95       	reti

00001740 <_ZN6StringD1Ev>:
    1740:	fc 01       	movw	r30, r24
    1742:	80 81       	ld	r24, Z
    1744:	91 81       	ldd	r25, Z+1	; 0x01
    1746:	0c 94 10 14 	jmp	0x2820	; 0x2820 <free>

0000174a <_ZN6String10invalidateEv>:
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	ec 01       	movw	r28, r24
    1750:	88 81       	ld	r24, Y
    1752:	99 81       	ldd	r25, Y+1	; 0x01
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	11 f0       	breq	.+4      	; 0x175c <_ZN6String10invalidateEv+0x12>
    1758:	0e 94 10 14 	call	0x2820	; 0x2820 <free>
    175c:	19 82       	std	Y+1, r1	; 0x01
    175e:	18 82       	st	Y, r1
    1760:	1d 82       	std	Y+5, r1	; 0x05
    1762:	1c 82       	std	Y+4, r1	; 0x04
    1764:	1b 82       	std	Y+3, r1	; 0x03
    1766:	1a 82       	std	Y+2, r1	; 0x02
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	08 95       	ret

0000176e <_ZN6String12changeBufferEj>:
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	ec 01       	movw	r28, r24
    1778:	8b 01       	movw	r16, r22
    177a:	6f 5f       	subi	r22, 0xFF	; 255
    177c:	7f 4f       	sbci	r23, 0xFF	; 255
    177e:	88 81       	ld	r24, Y
    1780:	99 81       	ldd	r25, Y+1	; 0x01
    1782:	0e 94 ae 14 	call	0x295c	; 0x295c <realloc>
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	31 f0       	breq	.+12     	; 0x1796 <_ZN6String12changeBufferEj+0x28>
    178a:	99 83       	std	Y+1, r25	; 0x01
    178c:	88 83       	st	Y, r24
    178e:	1b 83       	std	Y+3, r17	; 0x03
    1790:	0a 83       	std	Y+2, r16	; 0x02
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <_ZN6String12changeBufferEj+0x2a>
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	1f 91       	pop	r17
    179e:	0f 91       	pop	r16
    17a0:	08 95       	ret

000017a2 <_ZN6String7reserveEj>:
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	ec 01       	movw	r28, r24
    17a8:	88 81       	ld	r24, Y
    17aa:	99 81       	ldd	r25, Y+1	; 0x01
    17ac:	89 2b       	or	r24, r25
    17ae:	31 f0       	breq	.+12     	; 0x17bc <_ZN6String7reserveEj+0x1a>
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	9b 81       	ldd	r25, Y+3	; 0x03
    17b4:	86 17       	cp	r24, r22
    17b6:	97 07       	cpc	r25, r23
    17b8:	08 f0       	brcs	.+2      	; 0x17bc <_ZN6String7reserveEj+0x1a>
    17ba:	0c c0       	rjmp	.+24     	; 0x17d4 <_ZN6String7reserveEj+0x32>
    17bc:	ce 01       	movw	r24, r28
    17be:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN6String12changeBufferEj>
    17c2:	88 23       	and	r24, r24
    17c4:	49 f0       	breq	.+18     	; 0x17d8 <_ZN6String7reserveEj+0x36>
    17c6:	8c 81       	ldd	r24, Y+4	; 0x04
    17c8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ca:	89 2b       	or	r24, r25
    17cc:	19 f4       	brne	.+6      	; 0x17d4 <_ZN6String7reserveEj+0x32>
    17ce:	e8 81       	ld	r30, Y
    17d0:	f9 81       	ldd	r31, Y+1	; 0x01
    17d2:	10 82       	st	Z, r1
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <_ZN6String7reserveEj+0x38>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	08 95       	ret

000017e0 <_ZN6String4copyEPKcj>:
    17e0:	ef 92       	push	r14
    17e2:	ff 92       	push	r15
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	ec 01       	movw	r28, r24
    17ee:	7b 01       	movw	r14, r22
    17f0:	8a 01       	movw	r16, r20
    17f2:	ba 01       	movw	r22, r20
    17f4:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_ZN6String7reserveEj>
    17f8:	81 11       	cpse	r24, r1
    17fa:	04 c0       	rjmp	.+8      	; 0x1804 <_ZN6String4copyEPKcj+0x24>
    17fc:	ce 01       	movw	r24, r28
    17fe:	0e 94 a5 0b 	call	0x174a	; 0x174a <_ZN6String10invalidateEv>
    1802:	07 c0       	rjmp	.+14     	; 0x1812 <_ZN6String4copyEPKcj+0x32>
    1804:	1d 83       	std	Y+5, r17	; 0x05
    1806:	0c 83       	std	Y+4, r16	; 0x04
    1808:	b7 01       	movw	r22, r14
    180a:	88 81       	ld	r24, Y
    180c:	99 81       	ldd	r25, Y+1	; 0x01
    180e:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <strcpy>
    1812:	ce 01       	movw	r24, r28
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	08 95       	ret

00001822 <_ZN6StringC1EPKc>:
    1822:	dc 01       	movw	r26, r24
    1824:	11 96       	adiw	r26, 0x01	; 1
    1826:	1c 92       	st	X, r1
    1828:	1e 92       	st	-X, r1
    182a:	13 96       	adiw	r26, 0x03	; 3
    182c:	1c 92       	st	X, r1
    182e:	1e 92       	st	-X, r1
    1830:	12 97       	sbiw	r26, 0x02	; 2
    1832:	15 96       	adiw	r26, 0x05	; 5
    1834:	1c 92       	st	X, r1
    1836:	1e 92       	st	-X, r1
    1838:	14 97       	sbiw	r26, 0x04	; 4
    183a:	16 96       	adiw	r26, 0x06	; 6
    183c:	1c 92       	st	X, r1
    183e:	61 15       	cp	r22, r1
    1840:	71 05       	cpc	r23, r1
    1842:	59 f0       	breq	.+22     	; 0x185a <_ZN6StringC1EPKc+0x38>
    1844:	db 01       	movw	r26, r22
    1846:	0d 90       	ld	r0, X+
    1848:	00 20       	and	r0, r0
    184a:	e9 f7       	brne	.-6      	; 0x1846 <_ZN6StringC1EPKc+0x24>
    184c:	ad 01       	movw	r20, r26
    184e:	41 50       	subi	r20, 0x01	; 1
    1850:	51 09       	sbc	r21, r1
    1852:	46 1b       	sub	r20, r22
    1854:	57 0b       	sbc	r21, r23
    1856:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <_ZN6String4copyEPKcj>
    185a:	08 95       	ret

0000185c <_ZN6StringaSERKS_>:
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	ec 01       	movw	r28, r24
    1862:	fb 01       	movw	r30, r22
    1864:	86 17       	cp	r24, r22
    1866:	97 07       	cpc	r25, r23
    1868:	61 f0       	breq	.+24     	; 0x1882 <_ZN6StringaSERKS_+0x26>
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	61 15       	cp	r22, r1
    1870:	71 05       	cpc	r23, r1
    1872:	29 f0       	breq	.+10     	; 0x187e <_ZN6StringaSERKS_+0x22>
    1874:	44 81       	ldd	r20, Z+4	; 0x04
    1876:	55 81       	ldd	r21, Z+5	; 0x05
    1878:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZN6String4copyEPKcj>
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <_ZN6StringaSERKS_+0x26>
    187e:	0e 94 a5 0b 	call	0x174a	; 0x174a <_ZN6String10invalidateEv>
    1882:	ce 01       	movw	r24, r28
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	08 95       	ret

0000188a <_ZN6StringC1ERKS_>:
    188a:	fc 01       	movw	r30, r24
    188c:	11 82       	std	Z+1, r1	; 0x01
    188e:	10 82       	st	Z, r1
    1890:	13 82       	std	Z+3, r1	; 0x03
    1892:	12 82       	std	Z+2, r1	; 0x02
    1894:	15 82       	std	Z+5, r1	; 0x05
    1896:	14 82       	std	Z+4, r1	; 0x04
    1898:	16 82       	std	Z+6, r1	; 0x06
    189a:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <_ZN6StringaSERKS_>

0000189e <_ZN6StringaSEPKc>:
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	d8 2f       	mov	r29, r24
    18a4:	c9 2f       	mov	r28, r25
    18a6:	61 15       	cp	r22, r1
    18a8:	71 05       	cpc	r23, r1
    18aa:	61 f0       	breq	.+24     	; 0x18c4 <_ZN6StringaSEPKc+0x26>
    18ac:	db 01       	movw	r26, r22
    18ae:	0d 90       	ld	r0, X+
    18b0:	00 20       	and	r0, r0
    18b2:	e9 f7       	brne	.-6      	; 0x18ae <_ZN6StringaSEPKc+0x10>
    18b4:	ad 01       	movw	r20, r26
    18b6:	41 50       	subi	r20, 0x01	; 1
    18b8:	51 09       	sbc	r21, r1
    18ba:	46 1b       	sub	r20, r22
    18bc:	57 0b       	sbc	r21, r23
    18be:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZN6String4copyEPKcj>
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <_ZN6StringaSEPKc+0x2a>
    18c4:	0e 94 a5 0b 	call	0x174a	; 0x174a <_ZN6String10invalidateEv>
    18c8:	8d 2f       	mov	r24, r29
    18ca:	9c 2f       	mov	r25, r28
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	08 95       	ret

000018d2 <_ZN6StringC1Emh>:
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	a1 97       	sbiw	r28, 0x21	; 33
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	8c 01       	movw	r16, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	ba 01       	movw	r22, r20
    18f0:	f8 01       	movw	r30, r16
    18f2:	11 82       	std	Z+1, r1	; 0x01
    18f4:	10 82       	st	Z, r1
    18f6:	13 82       	std	Z+3, r1	; 0x03
    18f8:	12 82       	std	Z+2, r1	; 0x02
    18fa:	15 82       	std	Z+5, r1	; 0x05
    18fc:	14 82       	std	Z+4, r1	; 0x04
    18fe:	16 82       	std	Z+6, r1	; 0x06
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	ae 01       	movw	r20, r28
    1904:	4f 5f       	subi	r20, 0xFF	; 255
    1906:	5f 4f       	sbci	r21, 0xFF	; 255
    1908:	0e 94 d4 41 	call	0x83a8	; 0x83a8 <ultoa>
    190c:	be 01       	movw	r22, r28
    190e:	6f 5f       	subi	r22, 0xFF	; 255
    1910:	7f 4f       	sbci	r23, 0xFF	; 255
    1912:	c8 01       	movw	r24, r16
    1914:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6StringaSEPKc>
    1918:	a1 96       	adiw	r28, 0x21	; 33
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	08 95       	ret

0000192e <_ZN6StringC1Elh>:
    192e:	0f 93       	push	r16
    1930:	1f 93       	push	r17
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	a2 97       	sbiw	r28, 0x22	; 34
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	8c 01       	movw	r16, r24
    1948:	cb 01       	movw	r24, r22
    194a:	ba 01       	movw	r22, r20
    194c:	f8 01       	movw	r30, r16
    194e:	11 82       	std	Z+1, r1	; 0x01
    1950:	10 82       	st	Z, r1
    1952:	13 82       	std	Z+3, r1	; 0x03
    1954:	12 82       	std	Z+2, r1	; 0x02
    1956:	15 82       	std	Z+5, r1	; 0x05
    1958:	14 82       	std	Z+4, r1	; 0x04
    195a:	16 82       	std	Z+6, r1	; 0x06
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	ae 01       	movw	r20, r28
    1960:	4f 5f       	subi	r20, 0xFF	; 255
    1962:	5f 4f       	sbci	r21, 0xFF	; 255
    1964:	0e 94 83 41 	call	0x8306	; 0x8306 <ltoa>
    1968:	be 01       	movw	r22, r28
    196a:	6f 5f       	subi	r22, 0xFF	; 255
    196c:	7f 4f       	sbci	r23, 0xFF	; 255
    196e:	c8 01       	movw	r24, r16
    1970:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6StringaSEPKc>
    1974:	a2 96       	adiw	r28, 0x22	; 34
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	08 95       	ret

0000198a <_ZN6StringC1Ejh>:
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	61 97       	sbiw	r28, 0x11	; 17
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	8c 01       	movw	r16, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	f8 01       	movw	r30, r16
    19a8:	11 82       	std	Z+1, r1	; 0x01
    19aa:	10 82       	st	Z, r1
    19ac:	13 82       	std	Z+3, r1	; 0x03
    19ae:	12 82       	std	Z+2, r1	; 0x02
    19b0:	15 82       	std	Z+5, r1	; 0x05
    19b2:	14 82       	std	Z+4, r1	; 0x04
    19b4:	16 82       	std	Z+6, r1	; 0x06
    19b6:	50 e0       	ldi	r21, 0x00	; 0
    19b8:	be 01       	movw	r22, r28
    19ba:	6f 5f       	subi	r22, 0xFF	; 255
    19bc:	7f 4f       	sbci	r23, 0xFF	; 255
    19be:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <utoa>
    19c2:	be 01       	movw	r22, r28
    19c4:	6f 5f       	subi	r22, 0xFF	; 255
    19c6:	7f 4f       	sbci	r23, 0xFF	; 255
    19c8:	c8 01       	movw	r24, r16
    19ca:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6StringaSEPKc>
    19ce:	61 96       	adiw	r28, 0x11	; 17
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	08 95       	ret

000019e4 <_ZN6StringC1Eih>:
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	62 97       	sbiw	r28, 0x12	; 18
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	8c 01       	movw	r16, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	f8 01       	movw	r30, r16
    1a02:	11 82       	std	Z+1, r1	; 0x01
    1a04:	10 82       	st	Z, r1
    1a06:	13 82       	std	Z+3, r1	; 0x03
    1a08:	12 82       	std	Z+2, r1	; 0x02
    1a0a:	15 82       	std	Z+5, r1	; 0x05
    1a0c:	14 82       	std	Z+4, r1	; 0x04
    1a0e:	16 82       	std	Z+6, r1	; 0x06
    1a10:	50 e0       	ldi	r21, 0x00	; 0
    1a12:	be 01       	movw	r22, r28
    1a14:	6f 5f       	subi	r22, 0xFF	; 255
    1a16:	7f 4f       	sbci	r23, 0xFF	; 255
    1a18:	0e 94 62 41 	call	0x82c4	; 0x82c4 <itoa>
    1a1c:	be 01       	movw	r22, r28
    1a1e:	6f 5f       	subi	r22, 0xFF	; 255
    1a20:	7f 4f       	sbci	r23, 0xFF	; 255
    1a22:	c8 01       	movw	r24, r16
    1a24:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6StringaSEPKc>
    1a28:	62 96       	adiw	r28, 0x12	; 18
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	1f 91       	pop	r17
    1a3a:	0f 91       	pop	r16
    1a3c:	08 95       	ret

00001a3e <_ZN6StringC1Ehh>:
    1a3e:	0f 93       	push	r16
    1a40:	1f 93       	push	r17
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	29 97       	sbiw	r28, 0x09	; 9
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	8c 01       	movw	r16, r24
    1a58:	86 2f       	mov	r24, r22
    1a5a:	f8 01       	movw	r30, r16
    1a5c:	11 82       	std	Z+1, r1	; 0x01
    1a5e:	10 82       	st	Z, r1
    1a60:	13 82       	std	Z+3, r1	; 0x03
    1a62:	12 82       	std	Z+2, r1	; 0x02
    1a64:	15 82       	std	Z+5, r1	; 0x05
    1a66:	14 82       	std	Z+4, r1	; 0x04
    1a68:	16 82       	std	Z+6, r1	; 0x06
    1a6a:	50 e0       	ldi	r21, 0x00	; 0
    1a6c:	be 01       	movw	r22, r28
    1a6e:	6f 5f       	subi	r22, 0xFF	; 255
    1a70:	7f 4f       	sbci	r23, 0xFF	; 255
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <utoa>
    1a78:	be 01       	movw	r22, r28
    1a7a:	6f 5f       	subi	r22, 0xFF	; 255
    1a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7e:	c8 01       	movw	r24, r16
    1a80:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6StringaSEPKc>
    1a84:	29 96       	adiw	r28, 0x09	; 9
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	08 95       	ret

00001a9a <_ZN6StringC1Ec>:
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	1f 92       	push	r1
    1aa0:	1f 92       	push	r1
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	11 82       	std	Z+1, r1	; 0x01
    1aaa:	10 82       	st	Z, r1
    1aac:	13 82       	std	Z+3, r1	; 0x03
    1aae:	12 82       	std	Z+2, r1	; 0x02
    1ab0:	15 82       	std	Z+5, r1	; 0x05
    1ab2:	14 82       	std	Z+4, r1	; 0x04
    1ab4:	16 82       	std	Z+6, r1	; 0x06
    1ab6:	69 83       	std	Y+1, r22	; 0x01
    1ab8:	1a 82       	std	Y+2, r1	; 0x02
    1aba:	be 01       	movw	r22, r28
    1abc:	6f 5f       	subi	r22, 0xFF	; 255
    1abe:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac0:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6StringaSEPKc>
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	08 95       	ret

00001ace <_ZN6String6concatEPKcj>:
    1ace:	ef 92       	push	r14
    1ad0:	ff 92       	push	r15
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	ec 01       	movw	r28, r24
    1adc:	7b 01       	movw	r14, r22
    1ade:	0c 81       	ldd	r16, Y+4	; 0x04
    1ae0:	1d 81       	ldd	r17, Y+5	; 0x05
    1ae2:	61 15       	cp	r22, r1
    1ae4:	71 05       	cpc	r23, r1
    1ae6:	11 f4       	brne	.+4      	; 0x1aec <_ZN6String6concatEPKcj+0x1e>
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	16 c0       	rjmp	.+44     	; 0x1b18 <_ZN6String6concatEPKcj+0x4a>
    1aec:	41 15       	cp	r20, r1
    1aee:	51 05       	cpc	r21, r1
    1af0:	91 f0       	breq	.+36     	; 0x1b16 <_ZN6String6concatEPKcj+0x48>
    1af2:	04 0f       	add	r16, r20
    1af4:	15 1f       	adc	r17, r21
    1af6:	b8 01       	movw	r22, r16
    1af8:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_ZN6String7reserveEj>
    1afc:	88 23       	and	r24, r24
    1afe:	a1 f3       	breq	.-24     	; 0x1ae8 <_ZN6String6concatEPKcj+0x1a>
    1b00:	28 81       	ld	r18, Y
    1b02:	39 81       	ldd	r19, Y+1	; 0x01
    1b04:	8c 81       	ldd	r24, Y+4	; 0x04
    1b06:	9d 81       	ldd	r25, Y+5	; 0x05
    1b08:	b7 01       	movw	r22, r14
    1b0a:	82 0f       	add	r24, r18
    1b0c:	93 1f       	adc	r25, r19
    1b0e:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <strcpy>
    1b12:	1d 83       	std	Y+5, r17	; 0x05
    1b14:	0c 83       	std	Y+4, r16	; 0x04
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	ff 90       	pop	r15
    1b22:	ef 90       	pop	r14
    1b24:	08 95       	ret

00001b26 <_ZN6String6concatERKS_>:
    1b26:	fb 01       	movw	r30, r22
    1b28:	44 81       	ldd	r20, Z+4	; 0x04
    1b2a:	55 81       	ldd	r21, Z+5	; 0x05
    1b2c:	60 81       	ld	r22, Z
    1b2e:	71 81       	ldd	r23, Z+1	; 0x01
    1b30:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <_ZN6String6concatEPKcj>

00001b34 <_ZN6String6concatEPKc>:
    1b34:	61 15       	cp	r22, r1
    1b36:	71 05       	cpc	r23, r1
    1b38:	59 f0       	breq	.+22     	; 0x1b50 <_ZN6String6concatEPKc+0x1c>
    1b3a:	db 01       	movw	r26, r22
    1b3c:	0d 90       	ld	r0, X+
    1b3e:	00 20       	and	r0, r0
    1b40:	e9 f7       	brne	.-6      	; 0x1b3c <_ZN6String6concatEPKc+0x8>
    1b42:	ad 01       	movw	r20, r26
    1b44:	41 50       	subi	r20, 0x01	; 1
    1b46:	51 09       	sbc	r21, r1
    1b48:	46 1b       	sub	r20, r22
    1b4a:	57 0b       	sbc	r21, r23
    1b4c:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <_ZN6String6concatEPKcj>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	08 95       	ret

00001b54 <_ZN6String6concatEc>:
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	1f 92       	push	r1
    1b5a:	1f 92       	push	r1
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	69 83       	std	Y+1, r22	; 0x01
    1b62:	1a 82       	std	Y+2, r1	; 0x02
    1b64:	41 e0       	ldi	r20, 0x01	; 1
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	be 01       	movw	r22, r28
    1b6a:	6f 5f       	subi	r22, 0xFF	; 255
    1b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN6String6concatEPKcj>
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	08 95       	ret

00001b7c <_ZN6String6concatEh>:
    1b7c:	ef 92       	push	r14
    1b7e:	ff 92       	push	r15
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <_ZN6String6concatEh+0xe>
    1b8a:	1f 92       	push	r1
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	7c 01       	movw	r14, r24
    1b92:	86 2f       	mov	r24, r22
    1b94:	4a e0       	ldi	r20, 0x0A	; 10
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	8e 01       	movw	r16, r28
    1b9a:	0f 5f       	subi	r16, 0xFF	; 255
    1b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9e:	b8 01       	movw	r22, r16
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 62 41 	call	0x82c4	; 0x82c4 <itoa>
    1ba6:	f8 01       	movw	r30, r16
    1ba8:	01 90       	ld	r0, Z+
    1baa:	00 20       	and	r0, r0
    1bac:	e9 f7       	brne	.-6      	; 0x1ba8 <_ZN6String6concatEh+0x2c>
    1bae:	af 01       	movw	r20, r30
    1bb0:	41 50       	subi	r20, 0x01	; 1
    1bb2:	51 09       	sbc	r21, r1
    1bb4:	40 1b       	sub	r20, r16
    1bb6:	51 0b       	sbc	r21, r17
    1bb8:	b8 01       	movw	r22, r16
    1bba:	c7 01       	movw	r24, r14
    1bbc:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN6String6concatEPKcj>
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	ff 90       	pop	r15
    1bd2:	ef 90       	pop	r14
    1bd4:	08 95       	ret

00001bd6 <_ZN6String6concatEi>:
    1bd6:	ef 92       	push	r14
    1bd8:	ff 92       	push	r15
    1bda:	0f 93       	push	r16
    1bdc:	1f 93       	push	r17
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	27 97       	sbiw	r28, 0x07	; 7
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	7c 01       	movw	r14, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	4a e0       	ldi	r20, 0x0A	; 10
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	8e 01       	movw	r16, r28
    1bfc:	0f 5f       	subi	r16, 0xFF	; 255
    1bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1c00:	b8 01       	movw	r22, r16
    1c02:	0e 94 62 41 	call	0x82c4	; 0x82c4 <itoa>
    1c06:	f8 01       	movw	r30, r16
    1c08:	01 90       	ld	r0, Z+
    1c0a:	00 20       	and	r0, r0
    1c0c:	e9 f7       	brne	.-6      	; 0x1c08 <_ZN6String6concatEi+0x32>
    1c0e:	af 01       	movw	r20, r30
    1c10:	41 50       	subi	r20, 0x01	; 1
    1c12:	51 09       	sbc	r21, r1
    1c14:	40 1b       	sub	r20, r16
    1c16:	51 0b       	sbc	r21, r17
    1c18:	b8 01       	movw	r22, r16
    1c1a:	c7 01       	movw	r24, r14
    1c1c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN6String6concatEPKcj>
    1c20:	27 96       	adiw	r28, 0x07	; 7
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	ff 90       	pop	r15
    1c36:	ef 90       	pop	r14
    1c38:	08 95       	ret

00001c3a <_ZN6String6concatEj>:
    1c3a:	ef 92       	push	r14
    1c3c:	ff 92       	push	r15
    1c3e:	0f 93       	push	r16
    1c40:	1f 93       	push	r17
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <_ZN6String6concatEj+0xe>
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <_ZN6String6concatEj+0x10>
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	7c 01       	movw	r14, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	4a e0       	ldi	r20, 0x0A	; 10
    1c54:	50 e0       	ldi	r21, 0x00	; 0
    1c56:	8e 01       	movw	r16, r28
    1c58:	0f 5f       	subi	r16, 0xFF	; 255
    1c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5c:	b8 01       	movw	r22, r16
    1c5e:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <utoa>
    1c62:	f8 01       	movw	r30, r16
    1c64:	01 90       	ld	r0, Z+
    1c66:	00 20       	and	r0, r0
    1c68:	e9 f7       	brne	.-6      	; 0x1c64 <_ZN6String6concatEj+0x2a>
    1c6a:	af 01       	movw	r20, r30
    1c6c:	41 50       	subi	r20, 0x01	; 1
    1c6e:	51 09       	sbc	r21, r1
    1c70:	40 1b       	sub	r20, r16
    1c72:	51 0b       	sbc	r21, r17
    1c74:	b8 01       	movw	r22, r16
    1c76:	c7 01       	movw	r24, r14
    1c78:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN6String6concatEPKcj>
    1c7c:	26 96       	adiw	r28, 0x06	; 6
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	1f 91       	pop	r17
    1c8e:	0f 91       	pop	r16
    1c90:	ff 90       	pop	r15
    1c92:	ef 90       	pop	r14
    1c94:	08 95       	ret

00001c96 <_ZN6String6concatEl>:
    1c96:	ef 92       	push	r14
    1c98:	ff 92       	push	r15
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	2c 97       	sbiw	r28, 0x0c	; 12
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	7c 01       	movw	r14, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	ba 01       	movw	r22, r20
    1cb8:	2a e0       	ldi	r18, 0x0A	; 10
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	8e 01       	movw	r16, r28
    1cbe:	0f 5f       	subi	r16, 0xFF	; 255
    1cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc2:	a8 01       	movw	r20, r16
    1cc4:	0e 94 83 41 	call	0x8306	; 0x8306 <ltoa>
    1cc8:	f8 01       	movw	r30, r16
    1cca:	01 90       	ld	r0, Z+
    1ccc:	00 20       	and	r0, r0
    1cce:	e9 f7       	brne	.-6      	; 0x1cca <_ZN6String6concatEl+0x34>
    1cd0:	af 01       	movw	r20, r30
    1cd2:	41 50       	subi	r20, 0x01	; 1
    1cd4:	51 09       	sbc	r21, r1
    1cd6:	40 1b       	sub	r20, r16
    1cd8:	51 0b       	sbc	r21, r17
    1cda:	b8 01       	movw	r22, r16
    1cdc:	c7 01       	movw	r24, r14
    1cde:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN6String6concatEPKcj>
    1ce2:	2c 96       	adiw	r28, 0x0c	; 12
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	df 91       	pop	r29
    1cf0:	cf 91       	pop	r28
    1cf2:	1f 91       	pop	r17
    1cf4:	0f 91       	pop	r16
    1cf6:	ff 90       	pop	r15
    1cf8:	ef 90       	pop	r14
    1cfa:	08 95       	ret

00001cfc <_ZN6String6concatEm>:
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	2b 97       	sbiw	r28, 0x0b	; 11
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	7c 01       	movw	r14, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	ba 01       	movw	r22, r20
    1d1e:	2a e0       	ldi	r18, 0x0A	; 10
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	8e 01       	movw	r16, r28
    1d24:	0f 5f       	subi	r16, 0xFF	; 255
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	a8 01       	movw	r20, r16
    1d2a:	0e 94 d4 41 	call	0x83a8	; 0x83a8 <ultoa>
    1d2e:	f8 01       	movw	r30, r16
    1d30:	01 90       	ld	r0, Z+
    1d32:	00 20       	and	r0, r0
    1d34:	e9 f7       	brne	.-6      	; 0x1d30 <_ZN6String6concatEm+0x34>
    1d36:	af 01       	movw	r20, r30
    1d38:	41 50       	subi	r20, 0x01	; 1
    1d3a:	51 09       	sbc	r21, r1
    1d3c:	40 1b       	sub	r20, r16
    1d3e:	51 0b       	sbc	r21, r17
    1d40:	b8 01       	movw	r22, r16
    1d42:	c7 01       	movw	r24, r14
    1d44:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN6String6concatEPKcj>
    1d48:	2b 96       	adiw	r28, 0x0b	; 11
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	ff 90       	pop	r15
    1d5e:	ef 90       	pop	r14
    1d60:	08 95       	ret

00001d62 <_ZplRK15StringSumHelperRK6String>:
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	d8 2f       	mov	r29, r24
    1d68:	c9 2f       	mov	r28, r25
    1d6a:	fb 01       	movw	r30, r22
    1d6c:	44 81       	ldd	r20, Z+4	; 0x04
    1d6e:	55 81       	ldd	r21, Z+5	; 0x05
    1d70:	60 81       	ld	r22, Z
    1d72:	71 81       	ldd	r23, Z+1	; 0x01
    1d74:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN6String6concatEPKcj>
    1d78:	81 11       	cpse	r24, r1
    1d7a:	04 c0       	rjmp	.+8      	; 0x1d84 <_ZplRK15StringSumHelperRK6String+0x22>
    1d7c:	8d 2f       	mov	r24, r29
    1d7e:	9c 2f       	mov	r25, r28
    1d80:	0e 94 a5 0b 	call	0x174a	; 0x174a <_ZN6String10invalidateEv>
    1d84:	8d 2f       	mov	r24, r29
    1d86:	9c 2f       	mov	r25, r28
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	08 95       	ret

00001d8e <_ZplRK15StringSumHelperPKc>:
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
    1d92:	d8 2f       	mov	r29, r24
    1d94:	c9 2f       	mov	r28, r25
    1d96:	61 15       	cp	r22, r1
    1d98:	71 05       	cpc	r23, r1
    1d9a:	69 f0       	breq	.+26     	; 0x1db6 <_ZplRK15StringSumHelperPKc+0x28>
    1d9c:	db 01       	movw	r26, r22
    1d9e:	0d 90       	ld	r0, X+
    1da0:	00 20       	and	r0, r0
    1da2:	e9 f7       	brne	.-6      	; 0x1d9e <_ZplRK15StringSumHelperPKc+0x10>
    1da4:	ad 01       	movw	r20, r26
    1da6:	41 50       	subi	r20, 0x01	; 1
    1da8:	51 09       	sbc	r21, r1
    1daa:	46 1b       	sub	r20, r22
    1dac:	57 0b       	sbc	r21, r23
    1dae:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN6String6concatEPKcj>
    1db2:	81 11       	cpse	r24, r1
    1db4:	04 c0       	rjmp	.+8      	; 0x1dbe <_ZplRK15StringSumHelperPKc+0x30>
    1db6:	8d 2f       	mov	r24, r29
    1db8:	9c 2f       	mov	r25, r28
    1dba:	0e 94 a5 0b 	call	0x174a	; 0x174a <_ZN6String10invalidateEv>
    1dbe:	8d 2f       	mov	r24, r29
    1dc0:	9c 2f       	mov	r25, r28
    1dc2:	df 91       	pop	r29
    1dc4:	cf 91       	pop	r28
    1dc6:	08 95       	ret

00001dc8 <_ZplRK15StringSumHelperc>:
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	d8 2f       	mov	r29, r24
    1dce:	c9 2f       	mov	r28, r25
    1dd0:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN6String6concatEc>
    1dd4:	81 11       	cpse	r24, r1
    1dd6:	04 c0       	rjmp	.+8      	; 0x1de0 <_ZplRK15StringSumHelperc+0x18>
    1dd8:	8d 2f       	mov	r24, r29
    1dda:	9c 2f       	mov	r25, r28
    1ddc:	0e 94 a5 0b 	call	0x174a	; 0x174a <_ZN6String10invalidateEv>
    1de0:	8d 2f       	mov	r24, r29
    1de2:	9c 2f       	mov	r25, r28
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	08 95       	ret

00001dea <_ZplRK15StringSumHelperh>:
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	d8 2f       	mov	r29, r24
    1df0:	c9 2f       	mov	r28, r25
    1df2:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <_ZN6String6concatEh>
    1df6:	81 11       	cpse	r24, r1
    1df8:	04 c0       	rjmp	.+8      	; 0x1e02 <_ZplRK15StringSumHelperh+0x18>
    1dfa:	8d 2f       	mov	r24, r29
    1dfc:	9c 2f       	mov	r25, r28
    1dfe:	0e 94 a5 0b 	call	0x174a	; 0x174a <_ZN6String10invalidateEv>
    1e02:	8d 2f       	mov	r24, r29
    1e04:	9c 2f       	mov	r25, r28
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	08 95       	ret

00001e0c <_ZplRK15StringSumHelperi>:
    1e0c:	cf 93       	push	r28
    1e0e:	df 93       	push	r29
    1e10:	d8 2f       	mov	r29, r24
    1e12:	c9 2f       	mov	r28, r25
    1e14:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <_ZN6String6concatEi>
    1e18:	81 11       	cpse	r24, r1
    1e1a:	04 c0       	rjmp	.+8      	; 0x1e24 <_ZplRK15StringSumHelperi+0x18>
    1e1c:	8d 2f       	mov	r24, r29
    1e1e:	9c 2f       	mov	r25, r28
    1e20:	0e 94 a5 0b 	call	0x174a	; 0x174a <_ZN6String10invalidateEv>
    1e24:	8d 2f       	mov	r24, r29
    1e26:	9c 2f       	mov	r25, r28
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	08 95       	ret

00001e2e <_ZplRK15StringSumHelperj>:
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	d8 2f       	mov	r29, r24
    1e34:	c9 2f       	mov	r28, r25
    1e36:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_ZN6String6concatEj>
    1e3a:	81 11       	cpse	r24, r1
    1e3c:	04 c0       	rjmp	.+8      	; 0x1e46 <_ZplRK15StringSumHelperj+0x18>
    1e3e:	8d 2f       	mov	r24, r29
    1e40:	9c 2f       	mov	r25, r28
    1e42:	0e 94 a5 0b 	call	0x174a	; 0x174a <_ZN6String10invalidateEv>
    1e46:	8d 2f       	mov	r24, r29
    1e48:	9c 2f       	mov	r25, r28
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	08 95       	ret

00001e50 <_ZplRK15StringSumHelperl>:
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	d8 2f       	mov	r29, r24
    1e56:	c9 2f       	mov	r28, r25
    1e58:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <_ZN6String6concatEl>
    1e5c:	81 11       	cpse	r24, r1
    1e5e:	04 c0       	rjmp	.+8      	; 0x1e68 <_ZplRK15StringSumHelperl+0x18>
    1e60:	8d 2f       	mov	r24, r29
    1e62:	9c 2f       	mov	r25, r28
    1e64:	0e 94 a5 0b 	call	0x174a	; 0x174a <_ZN6String10invalidateEv>
    1e68:	8d 2f       	mov	r24, r29
    1e6a:	9c 2f       	mov	r25, r28
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	08 95       	ret

00001e72 <_ZplRK15StringSumHelperm>:
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	d8 2f       	mov	r29, r24
    1e78:	c9 2f       	mov	r28, r25
    1e7a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <_ZN6String6concatEm>
    1e7e:	81 11       	cpse	r24, r1
    1e80:	04 c0       	rjmp	.+8      	; 0x1e8a <_ZplRK15StringSumHelperm+0x18>
    1e82:	8d 2f       	mov	r24, r29
    1e84:	9c 2f       	mov	r25, r28
    1e86:	0e 94 a5 0b 	call	0x174a	; 0x174a <_ZN6String10invalidateEv>
    1e8a:	8d 2f       	mov	r24, r29
    1e8c:	9c 2f       	mov	r25, r28
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	08 95       	ret

00001e94 <_ZNK6String9compareToERKS_>:
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	dc 01       	movw	r26, r24
    1e9a:	ed 91       	ld	r30, X+
    1e9c:	fc 91       	ld	r31, X
    1e9e:	eb 01       	movw	r28, r22
    1ea0:	a8 81       	ld	r26, Y
    1ea2:	b9 81       	ldd	r27, Y+1	; 0x01
    1ea4:	30 97       	sbiw	r30, 0x00	; 0
    1ea6:	11 f0       	breq	.+4      	; 0x1eac <_ZNK6String9compareToERKS_+0x18>
    1ea8:	10 97       	sbiw	r26, 0x00	; 0
    1eaa:	c9 f4       	brne	.+50     	; 0x1ede <_ZNK6String9compareToERKS_+0x4a>
    1eac:	10 97       	sbiw	r26, 0x00	; 0
    1eae:	59 f0       	breq	.+22     	; 0x1ec6 <_ZNK6String9compareToERKS_+0x32>
    1eb0:	eb 01       	movw	r28, r22
    1eb2:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb4:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb6:	23 2b       	or	r18, r19
    1eb8:	31 f0       	breq	.+12     	; 0x1ec6 <_ZNK6String9compareToERKS_+0x32>
    1eba:	2c 91       	ld	r18, X
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	31 95       	neg	r19
    1ec0:	21 95       	neg	r18
    1ec2:	31 09       	sbc	r19, r1
    1ec4:	14 c0       	rjmp	.+40     	; 0x1eee <_ZNK6String9compareToERKS_+0x5a>
    1ec6:	30 97       	sbiw	r30, 0x00	; 0
    1ec8:	81 f0       	breq	.+32     	; 0x1eea <_ZNK6String9compareToERKS_+0x56>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	14 96       	adiw	r26, 0x04	; 4
    1ece:	8d 91       	ld	r24, X+
    1ed0:	9c 91       	ld	r25, X
    1ed2:	15 97       	sbiw	r26, 0x05	; 5
    1ed4:	89 2b       	or	r24, r25
    1ed6:	49 f0       	breq	.+18     	; 0x1eea <_ZNK6String9compareToERKS_+0x56>
    1ed8:	20 81       	ld	r18, Z
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	08 c0       	rjmp	.+16     	; 0x1eee <_ZNK6String9compareToERKS_+0x5a>
    1ede:	bd 01       	movw	r22, r26
    1ee0:	cf 01       	movw	r24, r30
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	0c 94 e9 40 	jmp	0x81d2	; 0x81d2 <strcmp>
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	c9 01       	movw	r24, r18
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	08 95       	ret

00001ef6 <_ZNK6String6equalsERKS_>:
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	44 81       	ldd	r20, Z+4	; 0x04
    1efa:	55 81       	ldd	r21, Z+5	; 0x05
    1efc:	fb 01       	movw	r30, r22
    1efe:	24 81       	ldd	r18, Z+4	; 0x04
    1f00:	35 81       	ldd	r19, Z+5	; 0x05
    1f02:	42 17       	cp	r20, r18
    1f04:	53 07       	cpc	r21, r19
    1f06:	29 f4       	brne	.+10     	; 0x1f12 <_ZNK6String6equalsERKS_+0x1c>
    1f08:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <_ZNK6String9compareToERKS_>
    1f0c:	21 e0       	ldi	r18, 0x01	; 1
    1f0e:	89 2b       	or	r24, r25
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <_ZNK6String6equalsERKS_+0x1e>
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	82 2f       	mov	r24, r18
    1f16:	08 95       	ret

00001f18 <_ZNK6String6equalsEPKc>:
    1f18:	dc 01       	movw	r26, r24
    1f1a:	14 96       	adiw	r26, 0x04	; 4
    1f1c:	2d 91       	ld	r18, X+
    1f1e:	3c 91       	ld	r19, X
    1f20:	15 97       	sbiw	r26, 0x05	; 5
    1f22:	23 2b       	or	r18, r19
    1f24:	39 f4       	brne	.+14     	; 0x1f34 <_ZNK6String6equalsEPKc+0x1c>
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	61 15       	cp	r22, r1
    1f2a:	71 05       	cpc	r23, r1
    1f2c:	11 f0       	breq	.+4      	; 0x1f32 <_ZNK6String6equalsEPKc+0x1a>
    1f2e:	fb 01       	movw	r30, r22
    1f30:	08 c0       	rjmp	.+16     	; 0x1f42 <_ZNK6String6equalsEPKc+0x2a>
    1f32:	08 95       	ret
    1f34:	dc 01       	movw	r26, r24
    1f36:	ed 91       	ld	r30, X+
    1f38:	fc 91       	ld	r31, X
    1f3a:	61 15       	cp	r22, r1
    1f3c:	71 05       	cpc	r23, r1
    1f3e:	29 f4       	brne	.+10     	; 0x1f4a <_ZNK6String6equalsEPKc+0x32>
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 81       	ld	r25, Z
    1f44:	99 23       	and	r25, r25
    1f46:	49 f0       	breq	.+18     	; 0x1f5a <_ZNK6String6equalsEPKc+0x42>
    1f48:	07 c0       	rjmp	.+14     	; 0x1f58 <_ZNK6String6equalsEPKc+0x40>
    1f4a:	cf 01       	movw	r24, r30
    1f4c:	0e 94 e9 40 	call	0x81d2	; 0x81d2 <strcmp>
    1f50:	9c 01       	movw	r18, r24
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	23 2b       	or	r18, r19
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <_ZNK6String6equalsEPKc+0x42>
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	08 95       	ret

00001f5c <_ZNK6StringltERKS_>:
    1f5c:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <_ZNK6String9compareToERKS_>
    1f60:	89 2f       	mov	r24, r25
    1f62:	88 1f       	adc	r24, r24
    1f64:	88 27       	eor	r24, r24
    1f66:	88 1f       	adc	r24, r24
    1f68:	08 95       	ret

00001f6a <_ZNK6StringgtERKS_>:
    1f6a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <_ZNK6String9compareToERKS_>
    1f6e:	21 e0       	ldi	r18, 0x01	; 1
    1f70:	18 16       	cp	r1, r24
    1f72:	19 06       	cpc	r1, r25
    1f74:	0c f0       	brlt	.+2      	; 0x1f78 <_ZNK6StringgtERKS_+0xe>
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	82 2f       	mov	r24, r18
    1f7a:	08 95       	ret

00001f7c <_ZNK6StringleERKS_>:
    1f7c:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <_ZNK6String9compareToERKS_>
    1f80:	21 e0       	ldi	r18, 0x01	; 1
    1f82:	18 16       	cp	r1, r24
    1f84:	19 06       	cpc	r1, r25
    1f86:	0c f4       	brge	.+2      	; 0x1f8a <_ZNK6StringleERKS_+0xe>
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	82 2f       	mov	r24, r18
    1f8c:	08 95       	ret

00001f8e <_ZNK6StringgeERKS_>:
    1f8e:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <_ZNK6String9compareToERKS_>
    1f92:	89 2f       	mov	r24, r25
    1f94:	80 95       	com	r24
    1f96:	88 1f       	adc	r24, r24
    1f98:	88 27       	eor	r24, r24
    1f9a:	88 1f       	adc	r24, r24
    1f9c:	08 95       	ret

00001f9e <_ZNK6String16equalsIgnoreCaseERKS_>:
    1f9e:	ef 92       	push	r14
    1fa0:	ff 92       	push	r15
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	86 17       	cp	r24, r22
    1fac:	97 07       	cpc	r25, r23
    1fae:	09 f1       	breq	.+66     	; 0x1ff2 <_ZNK6String16equalsIgnoreCaseERKS_+0x54>
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	24 81       	ldd	r18, Z+4	; 0x04
    1fb4:	35 81       	ldd	r19, Z+5	; 0x05
    1fb6:	fb 01       	movw	r30, r22
    1fb8:	44 81       	ldd	r20, Z+4	; 0x04
    1fba:	55 81       	ldd	r21, Z+5	; 0x05
    1fbc:	24 17       	cp	r18, r20
    1fbe:	35 07       	cpc	r19, r21
    1fc0:	d1 f4       	brne	.+52     	; 0x1ff6 <_ZNK6String16equalsIgnoreCaseERKS_+0x58>
    1fc2:	23 2b       	or	r18, r19
    1fc4:	b1 f0       	breq	.+44     	; 0x1ff2 <_ZNK6String16equalsIgnoreCaseERKS_+0x54>
    1fc6:	c0 81       	ld	r28, Z
    1fc8:	d1 81       	ldd	r29, Z+1	; 0x01
    1fca:	fc 01       	movw	r30, r24
    1fcc:	00 81       	ld	r16, Z
    1fce:	11 81       	ldd	r17, Z+1	; 0x01
    1fd0:	0b c0       	rjmp	.+22     	; 0x1fe8 <_ZNK6String16equalsIgnoreCaseERKS_+0x4a>
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	0e 94 af 40 	call	0x815e	; 0x815e <tolower>
    1fd8:	7c 01       	movw	r14, r24
    1fda:	89 91       	ld	r24, Y+
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	0e 94 af 40 	call	0x815e	; 0x815e <tolower>
    1fe2:	e8 16       	cp	r14, r24
    1fe4:	f9 06       	cpc	r15, r25
    1fe6:	39 f4       	brne	.+14     	; 0x1ff6 <_ZNK6String16equalsIgnoreCaseERKS_+0x58>
    1fe8:	f8 01       	movw	r30, r16
    1fea:	81 91       	ld	r24, Z+
    1fec:	8f 01       	movw	r16, r30
    1fee:	81 11       	cpse	r24, r1
    1ff0:	f0 cf       	rjmp	.-32     	; 0x1fd2 <_ZNK6String16equalsIgnoreCaseERKS_+0x34>
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	01 c0       	rjmp	.+2      	; 0x1ff8 <_ZNK6String16equalsIgnoreCaseERKS_+0x5a>
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	1f 91       	pop	r17
    1ffe:	0f 91       	pop	r16
    2000:	ff 90       	pop	r15
    2002:	ef 90       	pop	r14
    2004:	08 95       	ret

00002006 <_ZNK6String10startsWithERKS_j>:
    2006:	fa 01       	movw	r30, r20
    2008:	db 01       	movw	r26, r22
    200a:	14 96       	adiw	r26, 0x04	; 4
    200c:	4d 91       	ld	r20, X+
    200e:	5c 91       	ld	r21, X
    2010:	15 97       	sbiw	r26, 0x05	; 5
    2012:	dc 01       	movw	r26, r24
    2014:	14 96       	adiw	r26, 0x04	; 4
    2016:	2d 91       	ld	r18, X+
    2018:	3c 91       	ld	r19, X
    201a:	15 97       	sbiw	r26, 0x05	; 5
    201c:	24 1b       	sub	r18, r20
    201e:	35 0b       	sbc	r19, r21
    2020:	2e 17       	cp	r18, r30
    2022:	3f 07       	cpc	r19, r31
    2024:	90 f0       	brcs	.+36     	; 0x204a <_ZNK6String10startsWithERKS_j+0x44>
    2026:	8d 91       	ld	r24, X+
    2028:	9c 91       	ld	r25, X
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	71 f0       	breq	.+28     	; 0x204a <_ZNK6String10startsWithERKS_j+0x44>
    202e:	db 01       	movw	r26, r22
    2030:	6d 91       	ld	r22, X+
    2032:	7c 91       	ld	r23, X
    2034:	61 15       	cp	r22, r1
    2036:	71 05       	cpc	r23, r1
    2038:	41 f0       	breq	.+16     	; 0x204a <_ZNK6String10startsWithERKS_j+0x44>
    203a:	8e 0f       	add	r24, r30
    203c:	9f 1f       	adc	r25, r31
    203e:	0e 94 f9 40 	call	0x81f2	; 0x81f2 <strncmp>
    2042:	9c 01       	movw	r18, r24
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	23 2b       	or	r18, r19
    2048:	09 f0       	breq	.+2      	; 0x204c <_ZNK6String10startsWithERKS_j+0x46>
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	08 95       	ret

0000204e <_ZNK6String10startsWithERKS_>:
    204e:	fc 01       	movw	r30, r24
    2050:	44 81       	ldd	r20, Z+4	; 0x04
    2052:	55 81       	ldd	r21, Z+5	; 0x05
    2054:	fb 01       	movw	r30, r22
    2056:	24 81       	ldd	r18, Z+4	; 0x04
    2058:	35 81       	ldd	r19, Z+5	; 0x05
    205a:	42 17       	cp	r20, r18
    205c:	53 07       	cpc	r21, r19
    205e:	20 f0       	brcs	.+8      	; 0x2068 <_ZNK6String10startsWithERKS_+0x1a>
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	0c 94 03 10 	jmp	0x2006	; 0x2006 <_ZNK6String10startsWithERKS_j>
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	08 95       	ret

0000206c <_ZNK6String8endsWithERKS_>:
    206c:	fc 01       	movw	r30, r24
    206e:	84 81       	ldd	r24, Z+4	; 0x04
    2070:	95 81       	ldd	r25, Z+5	; 0x05
    2072:	db 01       	movw	r26, r22
    2074:	14 96       	adiw	r26, 0x04	; 4
    2076:	4d 91       	ld	r20, X+
    2078:	5c 91       	ld	r21, X
    207a:	15 97       	sbiw	r26, 0x05	; 5
    207c:	84 17       	cp	r24, r20
    207e:	95 07       	cpc	r25, r21
    2080:	a0 f0       	brcs	.+40     	; 0x20aa <_ZNK6String8endsWithERKS_+0x3e>
    2082:	20 81       	ld	r18, Z
    2084:	31 81       	ldd	r19, Z+1	; 0x01
    2086:	21 15       	cp	r18, r1
    2088:	31 05       	cpc	r19, r1
    208a:	79 f0       	breq	.+30     	; 0x20aa <_ZNK6String8endsWithERKS_+0x3e>
    208c:	6d 91       	ld	r22, X+
    208e:	7c 91       	ld	r23, X
    2090:	61 15       	cp	r22, r1
    2092:	71 05       	cpc	r23, r1
    2094:	51 f0       	breq	.+20     	; 0x20aa <_ZNK6String8endsWithERKS_+0x3e>
    2096:	84 1b       	sub	r24, r20
    2098:	95 0b       	sbc	r25, r21
    209a:	82 0f       	add	r24, r18
    209c:	93 1f       	adc	r25, r19
    209e:	0e 94 e9 40 	call	0x81d2	; 0x81d2 <strcmp>
    20a2:	9c 01       	movw	r18, r24
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	23 2b       	or	r18, r19
    20a8:	09 f0       	breq	.+2      	; 0x20ac <_ZNK6String8endsWithERKS_+0x40>
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	08 95       	ret

000020ae <_ZN6String9setCharAtEjc>:
    20ae:	dc 01       	movw	r26, r24
    20b0:	14 96       	adiw	r26, 0x04	; 4
    20b2:	2d 91       	ld	r18, X+
    20b4:	3c 91       	ld	r19, X
    20b6:	15 97       	sbiw	r26, 0x05	; 5
    20b8:	62 17       	cp	r22, r18
    20ba:	73 07       	cpc	r23, r19
    20bc:	28 f4       	brcc	.+10     	; 0x20c8 <_ZN6String9setCharAtEjc+0x1a>
    20be:	ed 91       	ld	r30, X+
    20c0:	fc 91       	ld	r31, X
    20c2:	e6 0f       	add	r30, r22
    20c4:	f7 1f       	adc	r31, r23
    20c6:	40 83       	st	Z, r20
    20c8:	08 95       	ret

000020ca <_ZN6StringixEj>:
    20ca:	fc 01       	movw	r30, r24
    20cc:	24 81       	ldd	r18, Z+4	; 0x04
    20ce:	35 81       	ldd	r19, Z+5	; 0x05
    20d0:	62 17       	cp	r22, r18
    20d2:	73 07       	cpc	r23, r19
    20d4:	20 f4       	brcc	.+8      	; 0x20de <_ZN6StringixEj+0x14>
    20d6:	80 81       	ld	r24, Z
    20d8:	91 81       	ldd	r25, Z+1	; 0x01
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	29 f4       	brne	.+10     	; 0x20e8 <_ZN6StringixEj+0x1e>
    20de:	10 92 b2 07 	sts	0x07B2, r1
    20e2:	62 eb       	ldi	r22, 0xB2	; 178
    20e4:	77 e0       	ldi	r23, 0x07	; 7
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <_ZN6StringixEj+0x22>
    20e8:	68 0f       	add	r22, r24
    20ea:	79 1f       	adc	r23, r25
    20ec:	cb 01       	movw	r24, r22
    20ee:	08 95       	ret

000020f0 <_ZNK6StringixEj>:
    20f0:	fc 01       	movw	r30, r24
    20f2:	24 81       	ldd	r18, Z+4	; 0x04
    20f4:	35 81       	ldd	r19, Z+5	; 0x05
    20f6:	62 17       	cp	r22, r18
    20f8:	73 07       	cpc	r23, r19
    20fa:	48 f4       	brcc	.+18     	; 0x210e <_ZNK6StringixEj+0x1e>
    20fc:	80 81       	ld	r24, Z
    20fe:	91 81       	ldd	r25, Z+1	; 0x01
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	29 f0       	breq	.+10     	; 0x210e <_ZNK6StringixEj+0x1e>
    2104:	fc 01       	movw	r30, r24
    2106:	e6 0f       	add	r30, r22
    2108:	f7 1f       	adc	r31, r23
    210a:	80 81       	ld	r24, Z
    210c:	08 95       	ret
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	08 95       	ret

00002112 <_ZNK6String6charAtEj>:
    2112:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <_ZNK6StringixEj>

00002116 <_ZNK6String8getBytesEPhjj>:
    2116:	0f 93       	push	r16
    2118:	1f 93       	push	r17
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	eb 01       	movw	r28, r22
    2120:	41 15       	cp	r20, r1
    2122:	51 05       	cpc	r21, r1
    2124:	e9 f0       	breq	.+58     	; 0x2160 <_ZNK6String8getBytesEPhjj+0x4a>
    2126:	20 97       	sbiw	r28, 0x00	; 0
    2128:	d9 f0       	breq	.+54     	; 0x2160 <_ZNK6String8getBytesEPhjj+0x4a>
    212a:	fc 01       	movw	r30, r24
    212c:	04 81       	ldd	r16, Z+4	; 0x04
    212e:	15 81       	ldd	r17, Z+5	; 0x05
    2130:	20 17       	cp	r18, r16
    2132:	31 07       	cpc	r19, r17
    2134:	08 f0       	brcs	.+2      	; 0x2138 <_ZNK6String8getBytesEPhjj+0x22>
    2136:	13 c0       	rjmp	.+38     	; 0x215e <_ZNK6String8getBytesEPhjj+0x48>
    2138:	41 50       	subi	r20, 0x01	; 1
    213a:	51 09       	sbc	r21, r1
    213c:	02 1b       	sub	r16, r18
    213e:	13 0b       	sbc	r17, r19
    2140:	40 17       	cp	r20, r16
    2142:	51 07       	cpc	r21, r17
    2144:	08 f4       	brcc	.+2      	; 0x2148 <_ZNK6String8getBytesEPhjj+0x32>
    2146:	8a 01       	movw	r16, r20
    2148:	fc 01       	movw	r30, r24
    214a:	60 81       	ld	r22, Z
    214c:	71 81       	ldd	r23, Z+1	; 0x01
    214e:	62 0f       	add	r22, r18
    2150:	73 1f       	adc	r23, r19
    2152:	a8 01       	movw	r20, r16
    2154:	ce 01       	movw	r24, r28
    2156:	0e 94 07 41 	call	0x820e	; 0x820e <strncpy>
    215a:	c0 0f       	add	r28, r16
    215c:	d1 1f       	adc	r29, r17
    215e:	18 82       	st	Y, r1
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	1f 91       	pop	r17
    2166:	0f 91       	pop	r16
    2168:	08 95       	ret

0000216a <_ZNK6String7indexOfEcj>:
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	fc 01       	movw	r30, r24
    2170:	84 81       	ldd	r24, Z+4	; 0x04
    2172:	95 81       	ldd	r25, Z+5	; 0x05
    2174:	48 17       	cp	r20, r24
    2176:	59 07       	cpc	r21, r25
    2178:	70 f4       	brcc	.+28     	; 0x2196 <_ZNK6String7indexOfEcj+0x2c>
    217a:	c0 81       	ld	r28, Z
    217c:	d1 81       	ldd	r29, Z+1	; 0x01
    217e:	70 e0       	ldi	r23, 0x00	; 0
    2180:	ce 01       	movw	r24, r28
    2182:	84 0f       	add	r24, r20
    2184:	95 1f       	adc	r25, r21
    2186:	0e 94 de 40 	call	0x81bc	; 0x81bc <strchr>
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	21 f0       	breq	.+8      	; 0x2196 <_ZNK6String7indexOfEcj+0x2c>
    218e:	9c 01       	movw	r18, r24
    2190:	2c 1b       	sub	r18, r28
    2192:	3d 0b       	sbc	r19, r29
    2194:	02 c0       	rjmp	.+4      	; 0x219a <_ZNK6String7indexOfEcj+0x30>
    2196:	2f ef       	ldi	r18, 0xFF	; 255
    2198:	3f ef       	ldi	r19, 0xFF	; 255
    219a:	c9 01       	movw	r24, r18
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	08 95       	ret

000021a2 <_ZNK6String7indexOfEc>:
    21a2:	40 e0       	ldi	r20, 0x00	; 0
    21a4:	50 e0       	ldi	r21, 0x00	; 0
    21a6:	0c 94 b5 10 	jmp	0x216a	; 0x216a <_ZNK6String7indexOfEcj>

000021aa <_ZNK6String7indexOfERKS_j>:
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	fc 01       	movw	r30, r24
    21b0:	84 81       	ldd	r24, Z+4	; 0x04
    21b2:	95 81       	ldd	r25, Z+5	; 0x05
    21b4:	48 17       	cp	r20, r24
    21b6:	59 07       	cpc	r21, r25
    21b8:	80 f4       	brcc	.+32     	; 0x21da <_ZNK6String7indexOfERKS_j+0x30>
    21ba:	c0 81       	ld	r28, Z
    21bc:	d1 81       	ldd	r29, Z+1	; 0x01
    21be:	fb 01       	movw	r30, r22
    21c0:	60 81       	ld	r22, Z
    21c2:	71 81       	ldd	r23, Z+1	; 0x01
    21c4:	ce 01       	movw	r24, r28
    21c6:	84 0f       	add	r24, r20
    21c8:	95 1f       	adc	r25, r21
    21ca:	0e 94 21 41 	call	0x8242	; 0x8242 <strstr>
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	21 f0       	breq	.+8      	; 0x21da <_ZNK6String7indexOfERKS_j+0x30>
    21d2:	9c 01       	movw	r18, r24
    21d4:	2c 1b       	sub	r18, r28
    21d6:	3d 0b       	sbc	r19, r29
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <_ZNK6String7indexOfERKS_j+0x34>
    21da:	2f ef       	ldi	r18, 0xFF	; 255
    21dc:	3f ef       	ldi	r19, 0xFF	; 255
    21de:	c9 01       	movw	r24, r18
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	08 95       	ret

000021e6 <_ZNK6String7indexOfERKS_>:
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	50 e0       	ldi	r21, 0x00	; 0
    21ea:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <_ZNK6String7indexOfERKS_j>

000021ee <_ZNK6String11lastIndexOfEcj>:
    21ee:	df 92       	push	r13
    21f0:	ef 92       	push	r14
    21f2:	ff 92       	push	r15
    21f4:	0f 93       	push	r16
    21f6:	1f 93       	push	r17
    21f8:	cf 93       	push	r28
    21fa:	df 93       	push	r29
    21fc:	ec 01       	movw	r28, r24
    21fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2200:	9d 81       	ldd	r25, Y+5	; 0x05
    2202:	48 17       	cp	r20, r24
    2204:	59 07       	cpc	r21, r25
    2206:	18 f0       	brcs	.+6      	; 0x220e <__stack+0xf>
    2208:	2f ef       	ldi	r18, 0xFF	; 255
    220a:	3f ef       	ldi	r19, 0xFF	; 255
    220c:	1b c0       	rjmp	.+54     	; 0x2244 <__stack+0x45>
    220e:	8a 01       	movw	r16, r20
    2210:	0f 5f       	subi	r16, 0xFF	; 255
    2212:	1f 4f       	sbci	r17, 0xFF	; 255
    2214:	e8 81       	ld	r30, Y
    2216:	f9 81       	ldd	r31, Y+1	; 0x01
    2218:	e0 0f       	add	r30, r16
    221a:	f1 1f       	adc	r31, r17
    221c:	d0 80       	ld	r13, Z
    221e:	10 82       	st	Z, r1
    2220:	e8 80       	ld	r14, Y
    2222:	f9 80       	ldd	r15, Y+1	; 0x01
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	c7 01       	movw	r24, r14
    2228:	0e 94 16 41 	call	0x822c	; 0x822c <strrchr>
    222c:	f7 01       	movw	r30, r14
    222e:	e0 0f       	add	r30, r16
    2230:	f1 1f       	adc	r31, r17
    2232:	d0 82       	st	Z, r13
    2234:	00 97       	sbiw	r24, 0x00	; 0
    2236:	41 f3       	breq	.-48     	; 0x2208 <__stack+0x9>
    2238:	28 81       	ld	r18, Y
    223a:	39 81       	ldd	r19, Y+1	; 0x01
    223c:	ac 01       	movw	r20, r24
    223e:	42 1b       	sub	r20, r18
    2240:	53 0b       	sbc	r21, r19
    2242:	9a 01       	movw	r18, r20
    2244:	c9 01       	movw	r24, r18
    2246:	df 91       	pop	r29
    2248:	cf 91       	pop	r28
    224a:	1f 91       	pop	r17
    224c:	0f 91       	pop	r16
    224e:	ff 90       	pop	r15
    2250:	ef 90       	pop	r14
    2252:	df 90       	pop	r13
    2254:	08 95       	ret

00002256 <_ZNK6String11lastIndexOfEc>:
    2256:	fc 01       	movw	r30, r24
    2258:	44 81       	ldd	r20, Z+4	; 0x04
    225a:	55 81       	ldd	r21, Z+5	; 0x05
    225c:	41 50       	subi	r20, 0x01	; 1
    225e:	51 09       	sbc	r21, r1
    2260:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <_ZNK6String11lastIndexOfEcj>

00002264 <_ZNK6String11lastIndexOfERKS_j>:
    2264:	af 92       	push	r10
    2266:	bf 92       	push	r11
    2268:	cf 92       	push	r12
    226a:	df 92       	push	r13
    226c:	ef 92       	push	r14
    226e:	ff 92       	push	r15
    2270:	0f 93       	push	r16
    2272:	1f 93       	push	r17
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
    2278:	6b 01       	movw	r12, r22
    227a:	8a 01       	movw	r16, r20
    227c:	fb 01       	movw	r30, r22
    227e:	44 81       	ldd	r20, Z+4	; 0x04
    2280:	55 81       	ldd	r21, Z+5	; 0x05
    2282:	41 15       	cp	r20, r1
    2284:	51 05       	cpc	r21, r1
    2286:	69 f1       	breq	.+90     	; 0x22e2 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    2288:	fc 01       	movw	r30, r24
    228a:	24 81       	ldd	r18, Z+4	; 0x04
    228c:	35 81       	ldd	r19, Z+5	; 0x05
    228e:	21 15       	cp	r18, r1
    2290:	31 05       	cpc	r19, r1
    2292:	39 f1       	breq	.+78     	; 0x22e2 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    2294:	24 17       	cp	r18, r20
    2296:	35 07       	cpc	r19, r21
    2298:	20 f1       	brcs	.+72     	; 0x22e2 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    229a:	02 17       	cp	r16, r18
    229c:	13 07       	cpc	r17, r19
    229e:	18 f0       	brcs	.+6      	; 0x22a6 <_ZNK6String11lastIndexOfERKS_j+0x42>
    22a0:	89 01       	movw	r16, r18
    22a2:	01 50       	subi	r16, 0x01	; 1
    22a4:	11 09       	sbc	r17, r1
    22a6:	fc 01       	movw	r30, r24
    22a8:	e0 80       	ld	r14, Z
    22aa:	f1 80       	ldd	r15, Z+1	; 0x01
    22ac:	c7 01       	movw	r24, r14
    22ae:	cf ef       	ldi	r28, 0xFF	; 255
    22b0:	df ef       	ldi	r29, 0xFF	; 255
    22b2:	57 01       	movw	r10, r14
    22b4:	a0 0e       	add	r10, r16
    22b6:	b1 1e       	adc	r11, r17
    22b8:	10 c0       	rjmp	.+32     	; 0x22da <_ZNK6String11lastIndexOfERKS_j+0x76>
    22ba:	f6 01       	movw	r30, r12
    22bc:	60 81       	ld	r22, Z
    22be:	71 81       	ldd	r23, Z+1	; 0x01
    22c0:	0e 94 21 41 	call	0x8242	; 0x8242 <strstr>
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	79 f0       	breq	.+30     	; 0x22e6 <_ZNK6String11lastIndexOfERKS_j+0x82>
    22c8:	9c 01       	movw	r18, r24
    22ca:	2e 19       	sub	r18, r14
    22cc:	3f 09       	sbc	r19, r15
    22ce:	02 17       	cp	r16, r18
    22d0:	13 07       	cpc	r17, r19
    22d2:	08 f4       	brcc	.+2      	; 0x22d6 <_ZNK6String11lastIndexOfERKS_j+0x72>
    22d4:	9e 01       	movw	r18, r28
    22d6:	01 96       	adiw	r24, 0x01	; 1
    22d8:	e9 01       	movw	r28, r18
    22da:	a8 16       	cp	r10, r24
    22dc:	b9 06       	cpc	r11, r25
    22de:	68 f7       	brcc	.-38     	; 0x22ba <_ZNK6String11lastIndexOfERKS_j+0x56>
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <_ZNK6String11lastIndexOfERKS_j+0x82>
    22e2:	cf ef       	ldi	r28, 0xFF	; 255
    22e4:	df ef       	ldi	r29, 0xFF	; 255
    22e6:	ce 01       	movw	r24, r28
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	1f 91       	pop	r17
    22ee:	0f 91       	pop	r16
    22f0:	ff 90       	pop	r15
    22f2:	ef 90       	pop	r14
    22f4:	df 90       	pop	r13
    22f6:	cf 90       	pop	r12
    22f8:	bf 90       	pop	r11
    22fa:	af 90       	pop	r10
    22fc:	08 95       	ret

000022fe <_ZNK6String11lastIndexOfERKS_>:
    22fe:	fc 01       	movw	r30, r24
    2300:	44 81       	ldd	r20, Z+4	; 0x04
    2302:	55 81       	ldd	r21, Z+5	; 0x05
    2304:	fb 01       	movw	r30, r22
    2306:	24 81       	ldd	r18, Z+4	; 0x04
    2308:	35 81       	ldd	r19, Z+5	; 0x05
    230a:	42 1b       	sub	r20, r18
    230c:	53 0b       	sbc	r21, r19
    230e:	0c 94 32 11 	jmp	0x2264	; 0x2264 <_ZNK6String11lastIndexOfERKS_j>

00002312 <_ZNK6String9substringEjj>:
    2312:	bf 92       	push	r11
    2314:	cf 92       	push	r12
    2316:	df 92       	push	r13
    2318:	ef 92       	push	r14
    231a:	ff 92       	push	r15
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	6c 01       	movw	r12, r24
    2326:	7b 01       	movw	r14, r22
    2328:	ea 01       	movw	r28, r20
    232a:	89 01       	movw	r16, r18
    232c:	24 17       	cp	r18, r20
    232e:	35 07       	cpc	r19, r21
    2330:	20 f4       	brcc	.+8      	; 0x233a <_ZNK6String9substringEjj+0x28>
    2332:	8d 2f       	mov	r24, r29
    2334:	e9 01       	movw	r28, r18
    2336:	04 2f       	mov	r16, r20
    2338:	18 2f       	mov	r17, r24
    233a:	68 e4       	ldi	r22, 0x48	; 72
    233c:	74 e0       	ldi	r23, 0x04	; 4
    233e:	c6 01       	movw	r24, r12
    2340:	0e 94 11 0c 	call	0x1822	; 0x1822 <_ZN6StringC1EPKc>
    2344:	d7 01       	movw	r26, r14
    2346:	14 96       	adiw	r26, 0x04	; 4
    2348:	8d 91       	ld	r24, X+
    234a:	9c 91       	ld	r25, X
    234c:	15 97       	sbiw	r26, 0x05	; 5
    234e:	8c 17       	cp	r24, r28
    2350:	9d 07       	cpc	r25, r29
    2352:	c8 f0       	brcs	.+50     	; 0x2386 <_ZNK6String9substringEjj+0x74>
    2354:	80 17       	cp	r24, r16
    2356:	91 07       	cpc	r25, r17
    2358:	08 f4       	brcc	.+2      	; 0x235c <_ZNK6String9substringEjj+0x4a>
    235a:	8c 01       	movw	r16, r24
    235c:	d7 01       	movw	r26, r14
    235e:	ed 91       	ld	r30, X+
    2360:	fc 91       	ld	r31, X
    2362:	11 97       	sbiw	r26, 0x01	; 1
    2364:	e0 0f       	add	r30, r16
    2366:	f1 1f       	adc	r31, r17
    2368:	b0 80       	ld	r11, Z
    236a:	10 82       	st	Z, r1
    236c:	6d 91       	ld	r22, X+
    236e:	7c 91       	ld	r23, X
    2370:	6c 0f       	add	r22, r28
    2372:	7d 1f       	adc	r23, r29
    2374:	c6 01       	movw	r24, r12
    2376:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6StringaSEPKc>
    237a:	d7 01       	movw	r26, r14
    237c:	ed 91       	ld	r30, X+
    237e:	fc 91       	ld	r31, X
    2380:	e0 0f       	add	r30, r16
    2382:	f1 1f       	adc	r31, r17
    2384:	b0 82       	st	Z, r11
    2386:	c6 01       	movw	r24, r12
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	1f 91       	pop	r17
    238e:	0f 91       	pop	r16
    2390:	ff 90       	pop	r15
    2392:	ef 90       	pop	r14
    2394:	df 90       	pop	r13
    2396:	cf 90       	pop	r12
    2398:	bf 90       	pop	r11
    239a:	08 95       	ret

0000239c <_ZNK6String9substringEj>:
    239c:	cf 93       	push	r28
    239e:	df 93       	push	r29
    23a0:	ec 01       	movw	r28, r24
    23a2:	fb 01       	movw	r30, r22
    23a4:	24 81       	ldd	r18, Z+4	; 0x04
    23a6:	35 81       	ldd	r19, Z+5	; 0x05
    23a8:	0e 94 89 11 	call	0x2312	; 0x2312 <_ZNK6String9substringEjj>
    23ac:	ce 01       	movw	r24, r28
    23ae:	df 91       	pop	r29
    23b0:	cf 91       	pop	r28
    23b2:	08 95       	ret

000023b4 <_ZN6String7replaceEcc>:
    23b4:	dc 01       	movw	r26, r24
    23b6:	ed 91       	ld	r30, X+
    23b8:	fc 91       	ld	r31, X
    23ba:	30 97       	sbiw	r30, 0x00	; 0
    23bc:	29 f4       	brne	.+10     	; 0x23c8 <_ZN6String7replaceEcc+0x14>
    23be:	08 95       	ret
    23c0:	86 13       	cpse	r24, r22
    23c2:	01 c0       	rjmp	.+2      	; 0x23c6 <_ZN6String7replaceEcc+0x12>
    23c4:	40 83       	st	Z, r20
    23c6:	31 96       	adiw	r30, 0x01	; 1
    23c8:	80 81       	ld	r24, Z
    23ca:	81 11       	cpse	r24, r1
    23cc:	f9 cf       	rjmp	.-14     	; 0x23c0 <_ZN6String7replaceEcc+0xc>
    23ce:	08 95       	ret

000023d0 <_ZN6String7replaceERKS_S1_>:
    23d0:	2f 92       	push	r2
    23d2:	3f 92       	push	r3
    23d4:	4f 92       	push	r4
    23d6:	5f 92       	push	r5
    23d8:	6f 92       	push	r6
    23da:	7f 92       	push	r7
    23dc:	8f 92       	push	r8
    23de:	9f 92       	push	r9
    23e0:	af 92       	push	r10
    23e2:	bf 92       	push	r11
    23e4:	cf 92       	push	r12
    23e6:	df 92       	push	r13
    23e8:	ef 92       	push	r14
    23ea:	ff 92       	push	r15
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
    23f4:	8c 01       	movw	r16, r24
    23f6:	5b 01       	movw	r10, r22
    23f8:	7a 01       	movw	r14, r20
    23fa:	dc 01       	movw	r26, r24
    23fc:	14 96       	adiw	r26, 0x04	; 4
    23fe:	6d 90       	ld	r6, X+
    2400:	7c 90       	ld	r7, X
    2402:	15 97       	sbiw	r26, 0x05	; 5
    2404:	61 14       	cp	r6, r1
    2406:	71 04       	cpc	r7, r1
    2408:	09 f4       	brne	.+2      	; 0x240c <_ZN6String7replaceERKS_S1_+0x3c>
    240a:	e1 c0       	rjmp	.+450    	; 0x25ce <_ZN6String7replaceERKS_S1_+0x1fe>
    240c:	fb 01       	movw	r30, r22
    240e:	44 80       	ldd	r4, Z+4	; 0x04
    2410:	55 80       	ldd	r5, Z+5	; 0x05
    2412:	41 14       	cp	r4, r1
    2414:	51 04       	cpc	r5, r1
    2416:	09 f4       	brne	.+2      	; 0x241a <_ZN6String7replaceERKS_S1_+0x4a>
    2418:	da c0       	rjmp	.+436    	; 0x25ce <_ZN6String7replaceERKS_S1_+0x1fe>
    241a:	da 01       	movw	r26, r20
    241c:	14 96       	adiw	r26, 0x04	; 4
    241e:	cd 90       	ld	r12, X+
    2420:	dc 90       	ld	r13, X
    2422:	15 97       	sbiw	r26, 0x05	; 5
    2424:	c4 18       	sub	r12, r4
    2426:	d5 08       	sbc	r13, r5
    2428:	fc 01       	movw	r30, r24
    242a:	c0 81       	ld	r28, Z
    242c:	d1 81       	ldd	r29, Z+1	; 0x01
    242e:	c1 14       	cp	r12, r1
    2430:	d1 04       	cpc	r13, r1
    2432:	e1 f4       	brne	.+56     	; 0x246c <_ZN6String7replaceERKS_S1_+0x9c>
    2434:	11 c0       	rjmp	.+34     	; 0x2458 <_ZN6String7replaceERKS_S1_+0x88>
    2436:	d7 01       	movw	r26, r14
    2438:	6c 91       	ld	r22, X
    243a:	11 96       	adiw	r26, 0x01	; 1
    243c:	7c 91       	ld	r23, X
    243e:	11 97       	sbiw	r26, 0x01	; 1
    2440:	14 96       	adiw	r26, 0x04	; 4
    2442:	4d 91       	ld	r20, X+
    2444:	5c 91       	ld	r21, X
    2446:	15 97       	sbiw	r26, 0x05	; 5
    2448:	c8 01       	movw	r24, r16
    244a:	0e 94 c3 40 	call	0x8186	; 0x8186 <memcpy>
    244e:	f7 01       	movw	r30, r14
    2450:	c4 81       	ldd	r28, Z+4	; 0x04
    2452:	d5 81       	ldd	r29, Z+5	; 0x05
    2454:	c0 0f       	add	r28, r16
    2456:	d1 1f       	adc	r29, r17
    2458:	d5 01       	movw	r26, r10
    245a:	6d 91       	ld	r22, X+
    245c:	7c 91       	ld	r23, X
    245e:	ce 01       	movw	r24, r28
    2460:	0e 94 21 41 	call	0x8242	; 0x8242 <strstr>
    2464:	8c 01       	movw	r16, r24
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	31 f7       	brne	.-52     	; 0x2436 <_ZN6String7replaceERKS_S1_+0x66>
    246a:	b1 c0       	rjmp	.+354    	; 0x25ce <_ZN6String7replaceERKS_S1_+0x1fe>
    246c:	d7 fe       	sbrs	r13, 7
    246e:	02 c0       	rjmp	.+4      	; 0x2474 <_ZN6String7replaceERKS_S1_+0xa4>
    2470:	4e 01       	movw	r8, r28
    2472:	2f c0       	rjmp	.+94     	; 0x24d2 <_ZN6String7replaceERKS_S1_+0x102>
    2474:	fb 01       	movw	r30, r22
    2476:	20 80       	ld	r2, Z
    2478:	31 80       	ldd	r3, Z+1	; 0x01
    247a:	43 01       	movw	r8, r6
    247c:	4e c0       	rjmp	.+156    	; 0x251a <_ZN6String7replaceERKS_S1_+0x14a>
    247e:	23 01       	movw	r4, r6
    2480:	4c 1a       	sub	r4, r28
    2482:	5d 0a       	sbc	r5, r29
    2484:	a2 01       	movw	r20, r4
    2486:	be 01       	movw	r22, r28
    2488:	c4 01       	movw	r24, r8
    248a:	0e 94 c3 40 	call	0x8186	; 0x8186 <memcpy>
    248e:	e4 01       	movw	r28, r8
    2490:	c4 0d       	add	r28, r4
    2492:	d5 1d       	adc	r29, r5
    2494:	d7 01       	movw	r26, r14
    2496:	6c 91       	ld	r22, X
    2498:	11 96       	adiw	r26, 0x01	; 1
    249a:	7c 91       	ld	r23, X
    249c:	11 97       	sbiw	r26, 0x01	; 1
    249e:	14 96       	adiw	r26, 0x04	; 4
    24a0:	4d 91       	ld	r20, X+
    24a2:	5c 91       	ld	r21, X
    24a4:	15 97       	sbiw	r26, 0x05	; 5
    24a6:	ce 01       	movw	r24, r28
    24a8:	0e 94 c3 40 	call	0x8186	; 0x8186 <memcpy>
    24ac:	f7 01       	movw	r30, r14
    24ae:	84 80       	ldd	r8, Z+4	; 0x04
    24b0:	95 80       	ldd	r9, Z+5	; 0x05
    24b2:	8c 0e       	add	r8, r28
    24b4:	9d 1e       	adc	r9, r29
    24b6:	d5 01       	movw	r26, r10
    24b8:	14 96       	adiw	r26, 0x04	; 4
    24ba:	cd 91       	ld	r28, X+
    24bc:	dc 91       	ld	r29, X
    24be:	15 97       	sbiw	r26, 0x05	; 5
    24c0:	c6 0d       	add	r28, r6
    24c2:	d7 1d       	adc	r29, r7
    24c4:	f8 01       	movw	r30, r16
    24c6:	84 81       	ldd	r24, Z+4	; 0x04
    24c8:	95 81       	ldd	r25, Z+5	; 0x05
    24ca:	8c 0d       	add	r24, r12
    24cc:	9d 1d       	adc	r25, r13
    24ce:	95 83       	std	Z+5, r25	; 0x05
    24d0:	84 83       	std	Z+4, r24	; 0x04
    24d2:	d5 01       	movw	r26, r10
    24d4:	6d 91       	ld	r22, X+
    24d6:	7c 91       	ld	r23, X
    24d8:	ce 01       	movw	r24, r28
    24da:	0e 94 21 41 	call	0x8242	; 0x8242 <strstr>
    24de:	3c 01       	movw	r6, r24
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	69 f6       	brne	.-102    	; 0x247e <_ZN6String7replaceERKS_S1_+0xae>
    24e4:	be 01       	movw	r22, r28
    24e6:	c4 01       	movw	r24, r8
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	1f 91       	pop	r17
    24ee:	0f 91       	pop	r16
    24f0:	ff 90       	pop	r15
    24f2:	ef 90       	pop	r14
    24f4:	df 90       	pop	r13
    24f6:	cf 90       	pop	r12
    24f8:	bf 90       	pop	r11
    24fa:	af 90       	pop	r10
    24fc:	9f 90       	pop	r9
    24fe:	8f 90       	pop	r8
    2500:	7f 90       	pop	r7
    2502:	6f 90       	pop	r6
    2504:	5f 90       	pop	r5
    2506:	4f 90       	pop	r4
    2508:	3f 90       	pop	r3
    250a:	2f 90       	pop	r2
    250c:	0c 94 f2 40 	jmp	0x81e4	; 0x81e4 <strcpy>
    2510:	ec 01       	movw	r28, r24
    2512:	c4 0d       	add	r28, r4
    2514:	d5 1d       	adc	r29, r5
    2516:	8c 0c       	add	r8, r12
    2518:	9d 1c       	adc	r9, r13
    251a:	b1 01       	movw	r22, r2
    251c:	ce 01       	movw	r24, r28
    251e:	0e 94 21 41 	call	0x8242	; 0x8242 <strstr>
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	a9 f7       	brne	.-22     	; 0x2510 <_ZN6String7replaceERKS_S1_+0x140>
    2526:	86 14       	cp	r8, r6
    2528:	97 04       	cpc	r9, r7
    252a:	09 f4       	brne	.+2      	; 0x252e <_ZN6String7replaceERKS_S1_+0x15e>
    252c:	50 c0       	rjmp	.+160    	; 0x25ce <_ZN6String7replaceERKS_S1_+0x1fe>
    252e:	f8 01       	movw	r30, r16
    2530:	82 81       	ldd	r24, Z+2	; 0x02
    2532:	93 81       	ldd	r25, Z+3	; 0x03
    2534:	88 15       	cp	r24, r8
    2536:	99 05       	cpc	r25, r9
    2538:	98 f4       	brcc	.+38     	; 0x2560 <_ZN6String7replaceERKS_S1_+0x190>
    253a:	b4 01       	movw	r22, r8
    253c:	c8 01       	movw	r24, r16
    253e:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN6String12changeBufferEj>
    2542:	88 23       	and	r24, r24
    2544:	09 f4       	brne	.+2      	; 0x2548 <_ZN6String7replaceERKS_S1_+0x178>
    2546:	43 c0       	rjmp	.+134    	; 0x25ce <_ZN6String7replaceERKS_S1_+0x1fe>
    2548:	0b c0       	rjmp	.+22     	; 0x2560 <_ZN6String7replaceERKS_S1_+0x190>
    254a:	d7 fd       	sbrc	r29, 7
    254c:	40 c0       	rjmp	.+128    	; 0x25ce <_ZN6String7replaceERKS_S1_+0x1fe>
    254e:	ae 01       	movw	r20, r28
    2550:	b5 01       	movw	r22, r10
    2552:	c8 01       	movw	r24, r16
    2554:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZNK6String11lastIndexOfERKS_j>
    2558:	ec 01       	movw	r28, r24
    255a:	97 ff       	sbrs	r25, 7
    255c:	07 c0       	rjmp	.+14     	; 0x256c <_ZN6String7replaceERKS_S1_+0x19c>
    255e:	37 c0       	rjmp	.+110    	; 0x25ce <_ZN6String7replaceERKS_S1_+0x1fe>
    2560:	d8 01       	movw	r26, r16
    2562:	14 96       	adiw	r26, 0x04	; 4
    2564:	cd 91       	ld	r28, X+
    2566:	dc 91       	ld	r29, X
    2568:	15 97       	sbiw	r26, 0x05	; 5
    256a:	2f c0       	rjmp	.+94     	; 0x25ca <_ZN6String7replaceERKS_S1_+0x1fa>
    256c:	f8 01       	movw	r30, r16
    256e:	80 81       	ld	r24, Z
    2570:	91 81       	ldd	r25, Z+1	; 0x01
    2572:	d5 01       	movw	r26, r10
    2574:	14 96       	adiw	r26, 0x04	; 4
    2576:	2d 91       	ld	r18, X+
    2578:	3c 91       	ld	r19, X
    257a:	15 97       	sbiw	r26, 0x05	; 5
    257c:	2c 0f       	add	r18, r28
    257e:	3d 1f       	adc	r19, r29
    2580:	82 0f       	add	r24, r18
    2582:	93 1f       	adc	r25, r19
    2584:	44 81       	ldd	r20, Z+4	; 0x04
    2586:	55 81       	ldd	r21, Z+5	; 0x05
    2588:	42 1b       	sub	r20, r18
    258a:	53 0b       	sbc	r21, r19
    258c:	bc 01       	movw	r22, r24
    258e:	8c 0d       	add	r24, r12
    2590:	9d 1d       	adc	r25, r13
    2592:	0e 94 cc 40 	call	0x8198	; 0x8198 <memmove>
    2596:	f8 01       	movw	r30, r16
    2598:	84 81       	ldd	r24, Z+4	; 0x04
    259a:	95 81       	ldd	r25, Z+5	; 0x05
    259c:	8c 0d       	add	r24, r12
    259e:	9d 1d       	adc	r25, r13
    25a0:	95 83       	std	Z+5, r25	; 0x05
    25a2:	84 83       	std	Z+4, r24	; 0x04
    25a4:	01 90       	ld	r0, Z+
    25a6:	f0 81       	ld	r31, Z
    25a8:	e0 2d       	mov	r30, r0
    25aa:	e8 0f       	add	r30, r24
    25ac:	f9 1f       	adc	r31, r25
    25ae:	10 82       	st	Z, r1
    25b0:	d8 01       	movw	r26, r16
    25b2:	2d 91       	ld	r18, X+
    25b4:	3c 91       	ld	r19, X
    25b6:	2c 0f       	add	r18, r28
    25b8:	3d 1f       	adc	r19, r29
    25ba:	f7 01       	movw	r30, r14
    25bc:	60 81       	ld	r22, Z
    25be:	71 81       	ldd	r23, Z+1	; 0x01
    25c0:	44 81       	ldd	r20, Z+4	; 0x04
    25c2:	55 81       	ldd	r21, Z+5	; 0x05
    25c4:	c9 01       	movw	r24, r18
    25c6:	0e 94 c3 40 	call	0x8186	; 0x8186 <memcpy>
    25ca:	21 97       	sbiw	r28, 0x01	; 1
    25cc:	be cf       	rjmp	.-132    	; 0x254a <_ZN6String7replaceERKS_S1_+0x17a>
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	1f 91       	pop	r17
    25d4:	0f 91       	pop	r16
    25d6:	ff 90       	pop	r15
    25d8:	ef 90       	pop	r14
    25da:	df 90       	pop	r13
    25dc:	cf 90       	pop	r12
    25de:	bf 90       	pop	r11
    25e0:	af 90       	pop	r10
    25e2:	9f 90       	pop	r9
    25e4:	8f 90       	pop	r8
    25e6:	7f 90       	pop	r7
    25e8:	6f 90       	pop	r6
    25ea:	5f 90       	pop	r5
    25ec:	4f 90       	pop	r4
    25ee:	3f 90       	pop	r3
    25f0:	2f 90       	pop	r2
    25f2:	08 95       	ret

000025f4 <_ZN6String11toLowerCaseEv>:
    25f4:	cf 93       	push	r28
    25f6:	df 93       	push	r29
    25f8:	fc 01       	movw	r30, r24
    25fa:	c0 81       	ld	r28, Z
    25fc:	d1 81       	ldd	r29, Z+1	; 0x01
    25fe:	20 97       	sbiw	r28, 0x00	; 0
    2600:	29 f4       	brne	.+10     	; 0x260c <_ZN6String11toLowerCaseEv+0x18>
    2602:	07 c0       	rjmp	.+14     	; 0x2612 <_ZN6String11toLowerCaseEv+0x1e>
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	0e 94 af 40 	call	0x815e	; 0x815e <tolower>
    260a:	89 93       	st	Y+, r24
    260c:	88 81       	ld	r24, Y
    260e:	81 11       	cpse	r24, r1
    2610:	f9 cf       	rjmp	.-14     	; 0x2604 <_ZN6String11toLowerCaseEv+0x10>
    2612:	df 91       	pop	r29
    2614:	cf 91       	pop	r28
    2616:	08 95       	ret

00002618 <_ZN6String11toUpperCaseEv>:
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	fc 01       	movw	r30, r24
    261e:	c0 81       	ld	r28, Z
    2620:	d1 81       	ldd	r29, Z+1	; 0x01
    2622:	20 97       	sbiw	r28, 0x00	; 0
    2624:	29 f4       	brne	.+10     	; 0x2630 <_ZN6String11toUpperCaseEv+0x18>
    2626:	07 c0       	rjmp	.+14     	; 0x2636 <_ZN6String11toUpperCaseEv+0x1e>
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	0e 94 b7 40 	call	0x816e	; 0x816e <toupper>
    262e:	89 93       	st	Y+, r24
    2630:	88 81       	ld	r24, Y
    2632:	81 11       	cpse	r24, r1
    2634:	f9 cf       	rjmp	.-14     	; 0x2628 <_ZN6String11toUpperCaseEv+0x10>
    2636:	df 91       	pop	r29
    2638:	cf 91       	pop	r28
    263a:	08 95       	ret

0000263c <_ZN6String4trimEv>:
    263c:	af 92       	push	r10
    263e:	bf 92       	push	r11
    2640:	cf 92       	push	r12
    2642:	df 92       	push	r13
    2644:	ef 92       	push	r14
    2646:	ff 92       	push	r15
    2648:	0f 93       	push	r16
    264a:	1f 93       	push	r17
    264c:	cf 93       	push	r28
    264e:	df 93       	push	r29
    2650:	6c 01       	movw	r12, r24
    2652:	dc 01       	movw	r26, r24
    2654:	ed 90       	ld	r14, X+
    2656:	fc 90       	ld	r15, X
    2658:	11 97       	sbiw	r26, 0x01	; 1
    265a:	e1 14       	cp	r14, r1
    265c:	f1 04       	cpc	r15, r1
    265e:	09 f4       	brne	.+2      	; 0x2662 <_ZN6String4trimEv+0x26>
    2660:	42 c0       	rjmp	.+132    	; 0x26e6 <_ZN6String4trimEv+0xaa>
    2662:	14 96       	adiw	r26, 0x04	; 4
    2664:	0d 91       	ld	r16, X+
    2666:	1c 91       	ld	r17, X
    2668:	15 97       	sbiw	r26, 0x05	; 5
    266a:	01 15       	cp	r16, r1
    266c:	11 05       	cpc	r17, r1
    266e:	d9 f1       	breq	.+118    	; 0x26e6 <_ZN6String4trimEv+0xaa>
    2670:	57 01       	movw	r10, r14
    2672:	e5 01       	movw	r28, r10
    2674:	bf ef       	ldi	r27, 0xFF	; 255
    2676:	ab 1a       	sub	r10, r27
    2678:	bb 0a       	sbc	r11, r27
    267a:	88 81       	ld	r24, Y
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	0e 94 a7 40 	call	0x814e	; 0x814e <isspace>
    2682:	89 2b       	or	r24, r25
    2684:	b1 f7       	brne	.-20     	; 0x2672 <_ZN6String4trimEv+0x36>
    2686:	01 50       	subi	r16, 0x01	; 1
    2688:	11 09       	sbc	r17, r1
    268a:	0e 0d       	add	r16, r14
    268c:	1f 1d       	adc	r17, r15
    268e:	f8 01       	movw	r30, r16
    2690:	80 81       	ld	r24, Z
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	0e 94 a7 40 	call	0x814e	; 0x814e <isspace>
    2698:	89 2b       	or	r24, r25
    269a:	69 f4       	brne	.+26     	; 0x26b6 <_ZN6String4trimEv+0x7a>
    269c:	0f 5f       	subi	r16, 0xFF	; 255
    269e:	1f 4f       	sbci	r17, 0xFF	; 255
    26a0:	0c 1b       	sub	r16, r28
    26a2:	1d 0b       	sbc	r17, r29
    26a4:	d6 01       	movw	r26, r12
    26a6:	15 96       	adiw	r26, 0x05	; 5
    26a8:	1c 93       	st	X, r17
    26aa:	0e 93       	st	-X, r16
    26ac:	14 97       	sbiw	r26, 0x04	; 4
    26ae:	ec 16       	cp	r14, r28
    26b0:	fd 06       	cpc	r15, r29
    26b2:	50 f4       	brcc	.+20     	; 0x26c8 <_ZN6String4trimEv+0x8c>
    26b4:	04 c0       	rjmp	.+8      	; 0x26be <_ZN6String4trimEv+0x82>
    26b6:	0c 17       	cp	r16, r28
    26b8:	1d 07       	cpc	r17, r29
    26ba:	90 f4       	brcc	.+36     	; 0x26e0 <_ZN6String4trimEv+0xa4>
    26bc:	ef cf       	rjmp	.-34     	; 0x269c <_ZN6String4trimEv+0x60>
    26be:	a8 01       	movw	r20, r16
    26c0:	be 01       	movw	r22, r28
    26c2:	c7 01       	movw	r24, r14
    26c4:	0e 94 c3 40 	call	0x8186	; 0x8186 <memcpy>
    26c8:	d6 01       	movw	r26, r12
    26ca:	ed 91       	ld	r30, X+
    26cc:	fc 91       	ld	r31, X
    26ce:	11 97       	sbiw	r26, 0x01	; 1
    26d0:	14 96       	adiw	r26, 0x04	; 4
    26d2:	8d 91       	ld	r24, X+
    26d4:	9c 91       	ld	r25, X
    26d6:	15 97       	sbiw	r26, 0x05	; 5
    26d8:	e8 0f       	add	r30, r24
    26da:	f9 1f       	adc	r31, r25
    26dc:	10 82       	st	Z, r1
    26de:	03 c0       	rjmp	.+6      	; 0x26e6 <_ZN6String4trimEv+0xaa>
    26e0:	01 50       	subi	r16, 0x01	; 1
    26e2:	11 09       	sbc	r17, r1
    26e4:	d4 cf       	rjmp	.-88     	; 0x268e <_ZN6String4trimEv+0x52>
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	1f 91       	pop	r17
    26ec:	0f 91       	pop	r16
    26ee:	ff 90       	pop	r15
    26f0:	ef 90       	pop	r14
    26f2:	df 90       	pop	r13
    26f4:	cf 90       	pop	r12
    26f6:	bf 90       	pop	r11
    26f8:	af 90       	pop	r10
    26fa:	08 95       	ret

000026fc <_ZNK6String5toIntEv>:
    26fc:	fc 01       	movw	r30, r24
    26fe:	80 81       	ld	r24, Z
    2700:	91 81       	ldd	r25, Z+1	; 0x01
    2702:	00 97       	sbiw	r24, 0x00	; 0
    2704:	11 f0       	breq	.+4      	; 0x270a <_ZNK6String5toIntEv+0xe>
    2706:	0c 94 80 40 	jmp	0x8100	; 0x8100 <atol>
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	70 e0       	ldi	r23, 0x00	; 0
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	08 95       	ret

00002714 <malloc>:
    2714:	0f 93       	push	r16
    2716:	1f 93       	push	r17
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	82 30       	cpi	r24, 0x02	; 2
    271e:	91 05       	cpc	r25, r1
    2720:	10 f4       	brcc	.+4      	; 0x2726 <malloc+0x12>
    2722:	82 e0       	ldi	r24, 0x02	; 2
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	e0 91 5f 10 	lds	r30, 0x105F
    272a:	f0 91 60 10 	lds	r31, 0x1060
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	c0 e0       	ldi	r28, 0x00	; 0
    2734:	d0 e0       	ldi	r29, 0x00	; 0
    2736:	23 c0       	rjmp	.+70     	; 0x277e <malloc+0x6a>
    2738:	40 81       	ld	r20, Z
    273a:	51 81       	ldd	r21, Z+1	; 0x01
    273c:	48 17       	cp	r20, r24
    273e:	59 07       	cpc	r21, r25
    2740:	a8 f0       	brcs	.+42     	; 0x276c <malloc+0x58>
    2742:	48 17       	cp	r20, r24
    2744:	59 07       	cpc	r21, r25
    2746:	61 f4       	brne	.+24     	; 0x2760 <malloc+0x4c>
    2748:	82 81       	ldd	r24, Z+2	; 0x02
    274a:	93 81       	ldd	r25, Z+3	; 0x03
    274c:	20 97       	sbiw	r28, 0x00	; 0
    274e:	19 f0       	breq	.+6      	; 0x2756 <malloc+0x42>
    2750:	9b 83       	std	Y+3, r25	; 0x03
    2752:	8a 83       	std	Y+2, r24	; 0x02
    2754:	2e c0       	rjmp	.+92     	; 0x27b2 <malloc+0x9e>
    2756:	90 93 60 10 	sts	0x1060, r25
    275a:	80 93 5f 10 	sts	0x105F, r24
    275e:	29 c0       	rjmp	.+82     	; 0x27b2 <malloc+0x9e>
    2760:	21 15       	cp	r18, r1
    2762:	31 05       	cpc	r19, r1
    2764:	29 f0       	breq	.+10     	; 0x2770 <malloc+0x5c>
    2766:	42 17       	cp	r20, r18
    2768:	53 07       	cpc	r21, r19
    276a:	10 f0       	brcs	.+4      	; 0x2770 <malloc+0x5c>
    276c:	a9 01       	movw	r20, r18
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <malloc+0x60>
    2770:	be 01       	movw	r22, r28
    2772:	df 01       	movw	r26, r30
    2774:	02 81       	ldd	r16, Z+2	; 0x02
    2776:	13 81       	ldd	r17, Z+3	; 0x03
    2778:	ef 01       	movw	r28, r30
    277a:	9a 01       	movw	r18, r20
    277c:	f8 01       	movw	r30, r16
    277e:	30 97       	sbiw	r30, 0x00	; 0
    2780:	d9 f6       	brne	.-74     	; 0x2738 <malloc+0x24>
    2782:	21 15       	cp	r18, r1
    2784:	31 05       	cpc	r19, r1
    2786:	09 f1       	breq	.+66     	; 0x27ca <malloc+0xb6>
    2788:	28 1b       	sub	r18, r24
    278a:	39 0b       	sbc	r19, r25
    278c:	24 30       	cpi	r18, 0x04	; 4
    278e:	31 05       	cpc	r19, r1
    2790:	90 f4       	brcc	.+36     	; 0x27b6 <malloc+0xa2>
    2792:	12 96       	adiw	r26, 0x02	; 2
    2794:	8d 91       	ld	r24, X+
    2796:	9c 91       	ld	r25, X
    2798:	13 97       	sbiw	r26, 0x03	; 3
    279a:	61 15       	cp	r22, r1
    279c:	71 05       	cpc	r23, r1
    279e:	21 f0       	breq	.+8      	; 0x27a8 <malloc+0x94>
    27a0:	fb 01       	movw	r30, r22
    27a2:	93 83       	std	Z+3, r25	; 0x03
    27a4:	82 83       	std	Z+2, r24	; 0x02
    27a6:	04 c0       	rjmp	.+8      	; 0x27b0 <malloc+0x9c>
    27a8:	90 93 60 10 	sts	0x1060, r25
    27ac:	80 93 5f 10 	sts	0x105F, r24
    27b0:	fd 01       	movw	r30, r26
    27b2:	32 96       	adiw	r30, 0x02	; 2
    27b4:	2f c0       	rjmp	.+94     	; 0x2814 <malloc+0x100>
    27b6:	fd 01       	movw	r30, r26
    27b8:	e2 0f       	add	r30, r18
    27ba:	f3 1f       	adc	r31, r19
    27bc:	81 93       	st	Z+, r24
    27be:	91 93       	st	Z+, r25
    27c0:	22 50       	subi	r18, 0x02	; 2
    27c2:	31 09       	sbc	r19, r1
    27c4:	2d 93       	st	X+, r18
    27c6:	3c 93       	st	X, r19
    27c8:	25 c0       	rjmp	.+74     	; 0x2814 <malloc+0x100>
    27ca:	4d b7       	in	r20, 0x3d	; 61
    27cc:	5e b7       	in	r21, 0x3e	; 62
    27ce:	48 57       	subi	r20, 0x78	; 120
    27d0:	51 09       	sbc	r21, r1
    27d2:	e0 91 02 02 	lds	r30, 0x0202
    27d6:	f0 91 03 02 	lds	r31, 0x0203
    27da:	e4 17       	cp	r30, r20
    27dc:	f5 07       	cpc	r31, r21
    27de:	c0 f4       	brcc	.+48     	; 0x2810 <malloc+0xfc>
    27e0:	4e 1b       	sub	r20, r30
    27e2:	5f 0b       	sbc	r21, r31
    27e4:	48 17       	cp	r20, r24
    27e6:	59 07       	cpc	r21, r25
    27e8:	98 f0       	brcs	.+38     	; 0x2810 <malloc+0xfc>
    27ea:	9c 01       	movw	r18, r24
    27ec:	2e 5f       	subi	r18, 0xFE	; 254
    27ee:	3f 4f       	sbci	r19, 0xFF	; 255
    27f0:	42 17       	cp	r20, r18
    27f2:	53 07       	cpc	r21, r19
    27f4:	68 f0       	brcs	.+26     	; 0x2810 <malloc+0xfc>
    27f6:	2e 0f       	add	r18, r30
    27f8:	3f 1f       	adc	r19, r31
    27fa:	30 93 03 02 	sts	0x0203, r19
    27fe:	20 93 02 02 	sts	0x0202, r18
    2802:	30 93 01 02 	sts	0x0201, r19
    2806:	20 93 00 02 	sts	0x0200, r18
    280a:	81 93       	st	Z+, r24
    280c:	91 93       	st	Z+, r25
    280e:	02 c0       	rjmp	.+4      	; 0x2814 <malloc+0x100>
    2810:	e0 e0       	ldi	r30, 0x00	; 0
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	cf 01       	movw	r24, r30
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	1f 91       	pop	r17
    281c:	0f 91       	pop	r16
    281e:	08 95       	ret

00002820 <free>:
    2820:	ef 92       	push	r14
    2822:	ff 92       	push	r15
    2824:	0f 93       	push	r16
    2826:	1f 93       	push	r17
    2828:	cf 93       	push	r28
    282a:	df 93       	push	r29
    282c:	00 97       	sbiw	r24, 0x00	; 0
    282e:	09 f4       	brne	.+2      	; 0x2832 <free+0x12>
    2830:	8e c0       	rjmp	.+284    	; 0x294e <free+0x12e>
    2832:	dc 01       	movw	r26, r24
    2834:	12 97       	sbiw	r26, 0x02	; 2
    2836:	13 96       	adiw	r26, 0x03	; 3
    2838:	1c 92       	st	X, r1
    283a:	1e 92       	st	-X, r1
    283c:	12 97       	sbiw	r26, 0x02	; 2
    283e:	e0 90 5f 10 	lds	r14, 0x105F
    2842:	f0 90 60 10 	lds	r15, 0x1060
    2846:	e1 14       	cp	r14, r1
    2848:	f1 04       	cpc	r15, r1
    284a:	89 f4       	brne	.+34     	; 0x286e <free+0x4e>
    284c:	2d 91       	ld	r18, X+
    284e:	3c 91       	ld	r19, X
    2850:	11 97       	sbiw	r26, 0x01	; 1
    2852:	28 0f       	add	r18, r24
    2854:	39 1f       	adc	r19, r25
    2856:	80 91 02 02 	lds	r24, 0x0202
    285a:	90 91 03 02 	lds	r25, 0x0203
    285e:	82 17       	cp	r24, r18
    2860:	93 07       	cpc	r25, r19
    2862:	89 f5       	brne	.+98     	; 0x28c6 <free+0xa6>
    2864:	b0 93 03 02 	sts	0x0203, r27
    2868:	a0 93 02 02 	sts	0x0202, r26
    286c:	70 c0       	rjmp	.+224    	; 0x294e <free+0x12e>
    286e:	e7 01       	movw	r28, r14
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	01 c0       	rjmp	.+2      	; 0x2878 <free+0x58>
    2876:	ea 01       	movw	r28, r20
    2878:	ca 17       	cp	r28, r26
    287a:	db 07       	cpc	r29, r27
    287c:	38 f4       	brcc	.+14     	; 0x288c <free+0x6c>
    287e:	4a 81       	ldd	r20, Y+2	; 0x02
    2880:	5b 81       	ldd	r21, Y+3	; 0x03
    2882:	9e 01       	movw	r18, r28
    2884:	41 15       	cp	r20, r1
    2886:	51 05       	cpc	r21, r1
    2888:	b1 f7       	brne	.-20     	; 0x2876 <free+0x56>
    288a:	22 c0       	rjmp	.+68     	; 0x28d0 <free+0xb0>
    288c:	ac 01       	movw	r20, r24
    288e:	42 50       	subi	r20, 0x02	; 2
    2890:	51 09       	sbc	r21, r1
    2892:	fa 01       	movw	r30, r20
    2894:	d3 83       	std	Z+3, r29	; 0x03
    2896:	c2 83       	std	Z+2, r28	; 0x02
    2898:	00 81       	ld	r16, Z
    289a:	11 81       	ldd	r17, Z+1	; 0x01
    289c:	bc 01       	movw	r22, r24
    289e:	60 0f       	add	r22, r16
    28a0:	71 1f       	adc	r23, r17
    28a2:	6c 17       	cp	r22, r28
    28a4:	7d 07       	cpc	r23, r29
    28a6:	61 f4       	brne	.+24     	; 0x28c0 <free+0xa0>
    28a8:	68 81       	ld	r22, Y
    28aa:	79 81       	ldd	r23, Y+1	; 0x01
    28ac:	60 0f       	add	r22, r16
    28ae:	71 1f       	adc	r23, r17
    28b0:	6e 5f       	subi	r22, 0xFE	; 254
    28b2:	7f 4f       	sbci	r23, 0xFF	; 255
    28b4:	71 83       	std	Z+1, r23	; 0x01
    28b6:	60 83       	st	Z, r22
    28b8:	6a 81       	ldd	r22, Y+2	; 0x02
    28ba:	7b 81       	ldd	r23, Y+3	; 0x03
    28bc:	73 83       	std	Z+3, r23	; 0x03
    28be:	62 83       	std	Z+2, r22	; 0x02
    28c0:	21 15       	cp	r18, r1
    28c2:	31 05       	cpc	r19, r1
    28c4:	29 f4       	brne	.+10     	; 0x28d0 <free+0xb0>
    28c6:	b0 93 60 10 	sts	0x1060, r27
    28ca:	a0 93 5f 10 	sts	0x105F, r26
    28ce:	3f c0       	rjmp	.+126    	; 0x294e <free+0x12e>
    28d0:	f9 01       	movw	r30, r18
    28d2:	b3 83       	std	Z+3, r27	; 0x03
    28d4:	a2 83       	std	Z+2, r26	; 0x02
    28d6:	e9 01       	movw	r28, r18
    28d8:	49 91       	ld	r20, Y+
    28da:	59 91       	ld	r21, Y+
    28dc:	c4 0f       	add	r28, r20
    28de:	d5 1f       	adc	r29, r21
    28e0:	ac 17       	cp	r26, r28
    28e2:	bd 07       	cpc	r27, r29
    28e4:	71 f4       	brne	.+28     	; 0x2902 <free+0xe2>
    28e6:	dc 01       	movw	r26, r24
    28e8:	9e 91       	ld	r25, -X
    28ea:	8e 91       	ld	r24, -X
    28ec:	84 0f       	add	r24, r20
    28ee:	95 1f       	adc	r25, r21
    28f0:	02 96       	adiw	r24, 0x02	; 2
    28f2:	91 83       	std	Z+1, r25	; 0x01
    28f4:	80 83       	st	Z, r24
    28f6:	12 96       	adiw	r26, 0x02	; 2
    28f8:	8d 91       	ld	r24, X+
    28fa:	9c 91       	ld	r25, X
    28fc:	13 97       	sbiw	r26, 0x03	; 3
    28fe:	93 83       	std	Z+3, r25	; 0x03
    2900:	82 83       	std	Z+2, r24	; 0x02
    2902:	a0 e0       	ldi	r26, 0x00	; 0
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	02 c0       	rjmp	.+4      	; 0x290c <free+0xec>
    2908:	d7 01       	movw	r26, r14
    290a:	7c 01       	movw	r14, r24
    290c:	f7 01       	movw	r30, r14
    290e:	82 81       	ldd	r24, Z+2	; 0x02
    2910:	93 81       	ldd	r25, Z+3	; 0x03
    2912:	00 97       	sbiw	r24, 0x00	; 0
    2914:	c9 f7       	brne	.-14     	; 0x2908 <free+0xe8>
    2916:	c7 01       	movw	r24, r14
    2918:	02 96       	adiw	r24, 0x02	; 2
    291a:	20 81       	ld	r18, Z
    291c:	31 81       	ldd	r19, Z+1	; 0x01
    291e:	82 0f       	add	r24, r18
    2920:	93 1f       	adc	r25, r19
    2922:	20 91 02 02 	lds	r18, 0x0202
    2926:	30 91 03 02 	lds	r19, 0x0203
    292a:	28 17       	cp	r18, r24
    292c:	39 07       	cpc	r19, r25
    292e:	79 f4       	brne	.+30     	; 0x294e <free+0x12e>
    2930:	10 97       	sbiw	r26, 0x00	; 0
    2932:	29 f4       	brne	.+10     	; 0x293e <free+0x11e>
    2934:	10 92 60 10 	sts	0x1060, r1
    2938:	10 92 5f 10 	sts	0x105F, r1
    293c:	04 c0       	rjmp	.+8      	; 0x2946 <free+0x126>
    293e:	13 96       	adiw	r26, 0x03	; 3
    2940:	1c 92       	st	X, r1
    2942:	1e 92       	st	-X, r1
    2944:	12 97       	sbiw	r26, 0x02	; 2
    2946:	f0 92 03 02 	sts	0x0203, r15
    294a:	e0 92 02 02 	sts	0x0202, r14
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	1f 91       	pop	r17
    2954:	0f 91       	pop	r16
    2956:	ff 90       	pop	r15
    2958:	ef 90       	pop	r14
    295a:	08 95       	ret

0000295c <realloc>:
    295c:	8f 92       	push	r8
    295e:	9f 92       	push	r9
    2960:	af 92       	push	r10
    2962:	bf 92       	push	r11
    2964:	cf 92       	push	r12
    2966:	df 92       	push	r13
    2968:	ef 92       	push	r14
    296a:	ff 92       	push	r15
    296c:	0f 93       	push	r16
    296e:	1f 93       	push	r17
    2970:	cf 93       	push	r28
    2972:	df 93       	push	r29
    2974:	ec 01       	movw	r28, r24
    2976:	00 97       	sbiw	r24, 0x00	; 0
    2978:	79 f4       	brne	.+30     	; 0x2998 <realloc+0x3c>
    297a:	cb 01       	movw	r24, r22
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	1f 91       	pop	r17
    2982:	0f 91       	pop	r16
    2984:	ff 90       	pop	r15
    2986:	ef 90       	pop	r14
    2988:	df 90       	pop	r13
    298a:	cf 90       	pop	r12
    298c:	bf 90       	pop	r11
    298e:	af 90       	pop	r10
    2990:	9f 90       	pop	r9
    2992:	8f 90       	pop	r8
    2994:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <malloc>
    2998:	dc 01       	movw	r26, r24
    299a:	a6 0f       	add	r26, r22
    299c:	b7 1f       	adc	r27, r23
    299e:	fc 01       	movw	r30, r24
    29a0:	32 97       	sbiw	r30, 0x02	; 2
    29a2:	ae 17       	cp	r26, r30
    29a4:	bf 07       	cpc	r27, r31
    29a6:	18 f4       	brcc	.+6      	; 0x29ae <realloc+0x52>
    29a8:	c0 e0       	ldi	r28, 0x00	; 0
    29aa:	d0 e0       	ldi	r29, 0x00	; 0
    29ac:	a3 c0       	rjmp	.+326    	; 0x2af4 <realloc+0x198>
    29ae:	00 81       	ld	r16, Z
    29b0:	11 81       	ldd	r17, Z+1	; 0x01
    29b2:	06 17       	cp	r16, r22
    29b4:	17 07       	cpc	r17, r23
    29b6:	b0 f0       	brcs	.+44     	; 0x29e4 <realloc+0x88>
    29b8:	05 30       	cpi	r16, 0x05	; 5
    29ba:	11 05       	cpc	r17, r1
    29bc:	08 f4       	brcc	.+2      	; 0x29c0 <realloc+0x64>
    29be:	9a c0       	rjmp	.+308    	; 0x2af4 <realloc+0x198>
    29c0:	c8 01       	movw	r24, r16
    29c2:	04 97       	sbiw	r24, 0x04	; 4
    29c4:	86 17       	cp	r24, r22
    29c6:	97 07       	cpc	r25, r23
    29c8:	08 f4       	brcc	.+2      	; 0x29cc <realloc+0x70>
    29ca:	94 c0       	rjmp	.+296    	; 0x2af4 <realloc+0x198>
    29cc:	02 50       	subi	r16, 0x02	; 2
    29ce:	11 09       	sbc	r17, r1
    29d0:	06 1b       	sub	r16, r22
    29d2:	17 0b       	sbc	r17, r23
    29d4:	0d 93       	st	X+, r16
    29d6:	1d 93       	st	X+, r17
    29d8:	71 83       	std	Z+1, r23	; 0x01
    29da:	60 83       	st	Z, r22
    29dc:	cd 01       	movw	r24, r26
    29de:	0e 94 10 14 	call	0x2820	; 0x2820 <free>
    29e2:	88 c0       	rjmp	.+272    	; 0x2af4 <realloc+0x198>
    29e4:	6b 01       	movw	r12, r22
    29e6:	c0 1a       	sub	r12, r16
    29e8:	d1 0a       	sbc	r13, r17
    29ea:	7c 01       	movw	r14, r24
    29ec:	e0 0e       	add	r14, r16
    29ee:	f1 1e       	adc	r15, r17
    29f0:	e0 91 5f 10 	lds	r30, 0x105F
    29f4:	f0 91 60 10 	lds	r31, 0x1060
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	48 c0       	rjmp	.+144    	; 0x2a92 <realloc+0x136>
    2a02:	ee 15       	cp	r30, r14
    2a04:	ff 05       	cpc	r31, r15
    2a06:	d1 f5       	brne	.+116    	; 0x2a7c <realloc+0x120>
    2a08:	80 80       	ld	r8, Z
    2a0a:	91 80       	ldd	r9, Z+1	; 0x01
    2a0c:	54 01       	movw	r10, r8
    2a0e:	42 e0       	ldi	r20, 0x02	; 2
    2a10:	a4 0e       	add	r10, r20
    2a12:	b1 1c       	adc	r11, r1
    2a14:	ac 14       	cp	r10, r12
    2a16:	bd 04       	cpc	r11, r13
    2a18:	88 f1       	brcs	.+98     	; 0x2a7c <realloc+0x120>
    2a1a:	74 01       	movw	r14, r8
    2a1c:	ec 18       	sub	r14, r12
    2a1e:	fd 08       	sbc	r15, r13
    2a20:	67 01       	movw	r12, r14
    2a22:	22 e0       	ldi	r18, 0x02	; 2
    2a24:	c2 0e       	add	r12, r18
    2a26:	d1 1c       	adc	r13, r1
    2a28:	9e 01       	movw	r18, r28
    2a2a:	22 50       	subi	r18, 0x02	; 2
    2a2c:	31 09       	sbc	r19, r1
    2a2e:	45 e0       	ldi	r20, 0x05	; 5
    2a30:	c4 16       	cp	r12, r20
    2a32:	d1 04       	cpc	r13, r1
    2a34:	78 f0       	brcs	.+30     	; 0x2a54 <realloc+0xf8>
    2a36:	42 81       	ldd	r20, Z+2	; 0x02
    2a38:	53 81       	ldd	r21, Z+3	; 0x03
    2a3a:	13 96       	adiw	r26, 0x03	; 3
    2a3c:	5c 93       	st	X, r21
    2a3e:	4e 93       	st	-X, r20
    2a40:	12 97       	sbiw	r26, 0x02	; 2
    2a42:	11 96       	adiw	r26, 0x01	; 1
    2a44:	fc 92       	st	X, r15
    2a46:	ee 92       	st	-X, r14
    2a48:	f9 01       	movw	r30, r18
    2a4a:	71 83       	std	Z+1, r23	; 0x01
    2a4c:	60 83       	st	Z, r22
    2a4e:	3a 2f       	mov	r19, r26
    2a50:	2b 2f       	mov	r18, r27
    2a52:	09 c0       	rjmp	.+18     	; 0x2a66 <realloc+0x10a>
    2a54:	0e 5f       	subi	r16, 0xFE	; 254
    2a56:	1f 4f       	sbci	r17, 0xFF	; 255
    2a58:	08 0d       	add	r16, r8
    2a5a:	19 1d       	adc	r17, r9
    2a5c:	d9 01       	movw	r26, r18
    2a5e:	0d 93       	st	X+, r16
    2a60:	1c 93       	st	X, r17
    2a62:	32 81       	ldd	r19, Z+2	; 0x02
    2a64:	23 81       	ldd	r18, Z+3	; 0x03
    2a66:	00 97       	sbiw	r24, 0x00	; 0
    2a68:	21 f0       	breq	.+8      	; 0x2a72 <realloc+0x116>
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	32 83       	std	Z+2, r19	; 0x02
    2a6e:	23 83       	std	Z+3, r18	; 0x03
    2a70:	41 c0       	rjmp	.+130    	; 0x2af4 <realloc+0x198>
    2a72:	30 93 5f 10 	sts	0x105F, r19
    2a76:	20 93 60 10 	sts	0x1060, r18
    2a7a:	3c c0       	rjmp	.+120    	; 0x2af4 <realloc+0x198>
    2a7c:	80 81       	ld	r24, Z
    2a7e:	91 81       	ldd	r25, Z+1	; 0x01
    2a80:	28 17       	cp	r18, r24
    2a82:	39 07       	cpc	r19, r25
    2a84:	08 f4       	brcc	.+2      	; 0x2a88 <realloc+0x12c>
    2a86:	9c 01       	movw	r18, r24
    2a88:	52 81       	ldd	r21, Z+2	; 0x02
    2a8a:	43 81       	ldd	r20, Z+3	; 0x03
    2a8c:	cf 01       	movw	r24, r30
    2a8e:	e5 2f       	mov	r30, r21
    2a90:	f4 2f       	mov	r31, r20
    2a92:	30 97       	sbiw	r30, 0x00	; 0
    2a94:	09 f0       	breq	.+2      	; 0x2a98 <realloc+0x13c>
    2a96:	b5 cf       	rjmp	.-150    	; 0x2a02 <realloc+0xa6>
    2a98:	80 91 02 02 	lds	r24, 0x0202
    2a9c:	90 91 03 02 	lds	r25, 0x0203
    2aa0:	8e 15       	cp	r24, r14
    2aa2:	9f 05       	cpc	r25, r15
    2aa4:	c1 f4       	brne	.+48     	; 0x2ad6 <realloc+0x17a>
    2aa6:	26 17       	cp	r18, r22
    2aa8:	37 07       	cpc	r19, r23
    2aaa:	a8 f4       	brcc	.+42     	; 0x2ad6 <realloc+0x17a>
    2aac:	8d b7       	in	r24, 0x3d	; 61
    2aae:	9e b7       	in	r25, 0x3e	; 62
    2ab0:	88 57       	subi	r24, 0x78	; 120
    2ab2:	91 09       	sbc	r25, r1
    2ab4:	a8 17       	cp	r26, r24
    2ab6:	b9 07       	cpc	r27, r25
    2ab8:	08 f0       	brcs	.+2      	; 0x2abc <realloc+0x160>
    2aba:	76 cf       	rjmp	.-276    	; 0x29a8 <realloc+0x4c>
    2abc:	b0 93 03 02 	sts	0x0203, r27
    2ac0:	a0 93 02 02 	sts	0x0202, r26
    2ac4:	b0 93 01 02 	sts	0x0201, r27
    2ac8:	a0 93 00 02 	sts	0x0200, r26
    2acc:	fe 01       	movw	r30, r28
    2ace:	32 97       	sbiw	r30, 0x02	; 2
    2ad0:	71 83       	std	Z+1, r23	; 0x01
    2ad2:	60 83       	st	Z, r22
    2ad4:	0f c0       	rjmp	.+30     	; 0x2af4 <realloc+0x198>
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	0e 94 8a 13 	call	0x2714	; 0x2714 <malloc>
    2adc:	7c 01       	movw	r14, r24
    2ade:	00 97       	sbiw	r24, 0x00	; 0
    2ae0:	09 f4       	brne	.+2      	; 0x2ae4 <realloc+0x188>
    2ae2:	62 cf       	rjmp	.-316    	; 0x29a8 <realloc+0x4c>
    2ae4:	a8 01       	movw	r20, r16
    2ae6:	be 01       	movw	r22, r28
    2ae8:	0e 94 c3 40 	call	0x8186	; 0x8186 <memcpy>
    2aec:	ce 01       	movw	r24, r28
    2aee:	0e 94 10 14 	call	0x2820	; 0x2820 <free>
    2af2:	e7 01       	movw	r28, r14
    2af4:	ce 01       	movw	r24, r28
    2af6:	df 91       	pop	r29
    2af8:	cf 91       	pop	r28
    2afa:	1f 91       	pop	r17
    2afc:	0f 91       	pop	r16
    2afe:	ff 90       	pop	r15
    2b00:	ef 90       	pop	r14
    2b02:	df 90       	pop	r13
    2b04:	cf 90       	pop	r12
    2b06:	bf 90       	pop	r11
    2b08:	af 90       	pop	r10
    2b0a:	9f 90       	pop	r9
    2b0c:	8f 90       	pop	r8
    2b0e:	08 95       	ret

00002b10 <_Znwj>:
    2b10:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <malloc>

00002b14 <_Znaj>:
    2b14:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <malloc>

00002b18 <_ZdlPv>:
    2b18:	0c 94 10 14 	jmp	0x2820	; 0x2820 <free>

00002b1c <_ZdaPv>:
    2b1c:	0c 94 10 14 	jmp	0x2820	; 0x2820 <free>

00002b20 <__cxa_guard_acquire>:
    2b20:	21 e0       	ldi	r18, 0x01	; 1
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	fc 01       	movw	r30, r24
    2b26:	80 81       	ld	r24, Z
    2b28:	88 23       	and	r24, r24
    2b2a:	11 f0       	breq	.+4      	; 0x2b30 <__cxa_guard_acquire+0x10>
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	c9 01       	movw	r24, r18
    2b32:	08 95       	ret

00002b34 <__cxa_guard_release>:
    2b34:	21 e0       	ldi	r18, 0x01	; 1
    2b36:	fc 01       	movw	r30, r24
    2b38:	20 83       	st	Z, r18
    2b3a:	08 95       	ret

00002b3c <__cxa_guard_abort>:
    2b3c:	08 95       	ret

00002b3e <__cxa_pure_virtual>:
    2b3e:	08 95       	ret

00002b40 <__vector_23>:
    2b40:	1f 92       	push	r1
    2b42:	0f 92       	push	r0
    2b44:	0f b6       	in	r0, 0x3f	; 63
    2b46:	0f 92       	push	r0
    2b48:	11 24       	eor	r1, r1
    2b4a:	2f 93       	push	r18
    2b4c:	3f 93       	push	r19
    2b4e:	8f 93       	push	r24
    2b50:	9f 93       	push	r25
    2b52:	af 93       	push	r26
    2b54:	bf 93       	push	r27
    2b56:	80 91 b3 07 	lds	r24, 0x07B3
    2b5a:	90 91 b4 07 	lds	r25, 0x07B4
    2b5e:	a0 91 b5 07 	lds	r26, 0x07B5
    2b62:	b0 91 b6 07 	lds	r27, 0x07B6
    2b66:	30 91 bb 07 	lds	r19, 0x07BB
    2b6a:	23 2f       	mov	r18, r19
    2b6c:	2d 5f       	subi	r18, 0xFD	; 253
    2b6e:	2d 37       	cpi	r18, 0x7D	; 125
    2b70:	20 f4       	brcc	.+8      	; 0x2b7a <__vector_23+0x3a>
    2b72:	01 96       	adiw	r24, 0x01	; 1
    2b74:	a1 1d       	adc	r26, r1
    2b76:	b1 1d       	adc	r27, r1
    2b78:	05 c0       	rjmp	.+10     	; 0x2b84 <__vector_23+0x44>
    2b7a:	23 2f       	mov	r18, r19
    2b7c:	2a 57       	subi	r18, 0x7A	; 122
    2b7e:	02 96       	adiw	r24, 0x02	; 2
    2b80:	a1 1d       	adc	r26, r1
    2b82:	b1 1d       	adc	r27, r1
    2b84:	20 93 bb 07 	sts	0x07BB, r18
    2b88:	80 93 b3 07 	sts	0x07B3, r24
    2b8c:	90 93 b4 07 	sts	0x07B4, r25
    2b90:	a0 93 b5 07 	sts	0x07B5, r26
    2b94:	b0 93 b6 07 	sts	0x07B6, r27
    2b98:	80 91 b7 07 	lds	r24, 0x07B7
    2b9c:	90 91 b8 07 	lds	r25, 0x07B8
    2ba0:	a0 91 b9 07 	lds	r26, 0x07B9
    2ba4:	b0 91 ba 07 	lds	r27, 0x07BA
    2ba8:	01 96       	adiw	r24, 0x01	; 1
    2baa:	a1 1d       	adc	r26, r1
    2bac:	b1 1d       	adc	r27, r1
    2bae:	80 93 b7 07 	sts	0x07B7, r24
    2bb2:	90 93 b8 07 	sts	0x07B8, r25
    2bb6:	a0 93 b9 07 	sts	0x07B9, r26
    2bba:	b0 93 ba 07 	sts	0x07BA, r27
    2bbe:	bf 91       	pop	r27
    2bc0:	af 91       	pop	r26
    2bc2:	9f 91       	pop	r25
    2bc4:	8f 91       	pop	r24
    2bc6:	3f 91       	pop	r19
    2bc8:	2f 91       	pop	r18
    2bca:	0f 90       	pop	r0
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	0f 90       	pop	r0
    2bd0:	1f 90       	pop	r1
    2bd2:	18 95       	reti

00002bd4 <millis>:
    2bd4:	0f 93       	push	r16
    2bd6:	1f 93       	push	r17
    2bd8:	8f b7       	in	r24, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	00 91 b3 07 	lds	r16, 0x07B3
    2be0:	10 91 b4 07 	lds	r17, 0x07B4
    2be4:	20 91 b5 07 	lds	r18, 0x07B5
    2be8:	30 91 b6 07 	lds	r19, 0x07B6
    2bec:	8f bf       	out	0x3f, r24	; 63
    2bee:	b8 01       	movw	r22, r16
    2bf0:	c9 01       	movw	r24, r18
    2bf2:	1f 91       	pop	r17
    2bf4:	0f 91       	pop	r16
    2bf6:	08 95       	ret

00002bf8 <micros>:
    2bf8:	0f 93       	push	r16
    2bfa:	1f 93       	push	r17
    2bfc:	9f b7       	in	r25, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	00 91 b7 07 	lds	r16, 0x07B7
    2c04:	10 91 b8 07 	lds	r17, 0x07B8
    2c08:	20 91 b9 07 	lds	r18, 0x07B9
    2c0c:	30 91 ba 07 	lds	r19, 0x07BA
    2c10:	86 b5       	in	r24, 0x26	; 38
    2c12:	a8 9b       	sbis	0x15, 0	; 21
    2c14:	06 c0       	rjmp	.+12     	; 0x2c22 <micros+0x2a>
    2c16:	8f 3f       	cpi	r24, 0xFF	; 255
    2c18:	21 f0       	breq	.+8      	; 0x2c22 <micros+0x2a>
    2c1a:	0f 5f       	subi	r16, 0xFF	; 255
    2c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c1e:	2f 4f       	sbci	r18, 0xFF	; 255
    2c20:	3f 4f       	sbci	r19, 0xFF	; 255
    2c22:	9f bf       	out	0x3f, r25	; 63
    2c24:	32 2f       	mov	r19, r18
    2c26:	21 2f       	mov	r18, r17
    2c28:	10 2f       	mov	r17, r16
    2c2a:	00 27       	eor	r16, r16
    2c2c:	08 0f       	add	r16, r24
    2c2e:	11 1d       	adc	r17, r1
    2c30:	21 1d       	adc	r18, r1
    2c32:	31 1d       	adc	r19, r1
    2c34:	42 e0       	ldi	r20, 0x02	; 2
    2c36:	00 0f       	add	r16, r16
    2c38:	11 1f       	adc	r17, r17
    2c3a:	22 1f       	adc	r18, r18
    2c3c:	33 1f       	adc	r19, r19
    2c3e:	4a 95       	dec	r20
    2c40:	d1 f7       	brne	.-12     	; 0x2c36 <micros+0x3e>
    2c42:	b8 01       	movw	r22, r16
    2c44:	c9 01       	movw	r24, r18
    2c46:	1f 91       	pop	r17
    2c48:	0f 91       	pop	r16
    2c4a:	08 95       	ret

00002c4c <delay>:
    2c4c:	cf 92       	push	r12
    2c4e:	df 92       	push	r13
    2c50:	ef 92       	push	r14
    2c52:	ff 92       	push	r15
    2c54:	cf 93       	push	r28
    2c56:	df 93       	push	r29
    2c58:	6b 01       	movw	r12, r22
    2c5a:	7c 01       	movw	r14, r24
    2c5c:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <micros>
    2c60:	eb 01       	movw	r28, r22
    2c62:	10 c0       	rjmp	.+32     	; 0x2c84 <delay+0x38>
    2c64:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <yield>
    2c68:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <micros>
    2c6c:	6c 1b       	sub	r22, r28
    2c6e:	7d 0b       	sbc	r23, r29
    2c70:	68 3e       	cpi	r22, 0xE8	; 232
    2c72:	73 40       	sbci	r23, 0x03	; 3
    2c74:	38 f0       	brcs	.+14     	; 0x2c84 <delay+0x38>
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	c8 1a       	sub	r12, r24
    2c7a:	d1 08       	sbc	r13, r1
    2c7c:	e1 08       	sbc	r14, r1
    2c7e:	f1 08       	sbc	r15, r1
    2c80:	c8 51       	subi	r28, 0x18	; 24
    2c82:	dc 4f       	sbci	r29, 0xFC	; 252
    2c84:	c1 14       	cp	r12, r1
    2c86:	d1 04       	cpc	r13, r1
    2c88:	e1 04       	cpc	r14, r1
    2c8a:	f1 04       	cpc	r15, r1
    2c8c:	59 f7       	brne	.-42     	; 0x2c64 <delay+0x18>
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	ff 90       	pop	r15
    2c94:	ef 90       	pop	r14
    2c96:	df 90       	pop	r13
    2c98:	cf 90       	pop	r12
    2c9a:	08 95       	ret

00002c9c <delayMicroseconds>:
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	39 f0       	breq	.+14     	; 0x2cae <delayMicroseconds+0x12>
    2ca0:	88 0f       	add	r24, r24
    2ca2:	99 1f       	adc	r25, r25
    2ca4:	88 0f       	add	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	02 97       	sbiw	r24, 0x02	; 2
    2caa:	01 97       	sbiw	r24, 0x01	; 1
    2cac:	f1 f7       	brne	.-4      	; 0x2caa <delayMicroseconds+0xe>
    2cae:	08 95       	ret

00002cb0 <init>:
    2cb0:	78 94       	sei
    2cb2:	84 b5       	in	r24, 0x24	; 36
    2cb4:	82 60       	ori	r24, 0x02	; 2
    2cb6:	84 bd       	out	0x24, r24	; 36
    2cb8:	84 b5       	in	r24, 0x24	; 36
    2cba:	81 60       	ori	r24, 0x01	; 1
    2cbc:	84 bd       	out	0x24, r24	; 36
    2cbe:	85 b5       	in	r24, 0x25	; 37
    2cc0:	82 60       	ori	r24, 0x02	; 2
    2cc2:	85 bd       	out	0x25, r24	; 37
    2cc4:	85 b5       	in	r24, 0x25	; 37
    2cc6:	81 60       	ori	r24, 0x01	; 1
    2cc8:	85 bd       	out	0x25, r24	; 37
    2cca:	ee e6       	ldi	r30, 0x6E	; 110
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	81 60       	ori	r24, 0x01	; 1
    2cd2:	80 83       	st	Z, r24
    2cd4:	e1 e8       	ldi	r30, 0x81	; 129
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	10 82       	st	Z, r1
    2cda:	80 81       	ld	r24, Z
    2cdc:	82 60       	ori	r24, 0x02	; 2
    2cde:	80 83       	st	Z, r24
    2ce0:	80 81       	ld	r24, Z
    2ce2:	81 60       	ori	r24, 0x01	; 1
    2ce4:	80 83       	st	Z, r24
    2ce6:	e0 e8       	ldi	r30, 0x80	; 128
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	81 60       	ori	r24, 0x01	; 1
    2cee:	80 83       	st	Z, r24
    2cf0:	e1 eb       	ldi	r30, 0xB1	; 177
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	84 60       	ori	r24, 0x04	; 4
    2cf8:	80 83       	st	Z, r24
    2cfa:	e0 eb       	ldi	r30, 0xB0	; 176
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	81 60       	ori	r24, 0x01	; 1
    2d02:	80 83       	st	Z, r24
    2d04:	e1 e9       	ldi	r30, 0x91	; 145
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	82 60       	ori	r24, 0x02	; 2
    2d0c:	80 83       	st	Z, r24
    2d0e:	80 81       	ld	r24, Z
    2d10:	81 60       	ori	r24, 0x01	; 1
    2d12:	80 83       	st	Z, r24
    2d14:	e0 e9       	ldi	r30, 0x90	; 144
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	81 60       	ori	r24, 0x01	; 1
    2d1c:	80 83       	st	Z, r24
    2d1e:	e1 ea       	ldi	r30, 0xA1	; 161
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	82 60       	ori	r24, 0x02	; 2
    2d26:	80 83       	st	Z, r24
    2d28:	80 81       	ld	r24, Z
    2d2a:	81 60       	ori	r24, 0x01	; 1
    2d2c:	80 83       	st	Z, r24
    2d2e:	e0 ea       	ldi	r30, 0xA0	; 160
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	81 60       	ori	r24, 0x01	; 1
    2d36:	80 83       	st	Z, r24
    2d38:	e1 e2       	ldi	r30, 0x21	; 33
    2d3a:	f1 e0       	ldi	r31, 0x01	; 1
    2d3c:	80 81       	ld	r24, Z
    2d3e:	82 60       	ori	r24, 0x02	; 2
    2d40:	80 83       	st	Z, r24
    2d42:	80 81       	ld	r24, Z
    2d44:	81 60       	ori	r24, 0x01	; 1
    2d46:	80 83       	st	Z, r24
    2d48:	e0 e2       	ldi	r30, 0x20	; 32
    2d4a:	f1 e0       	ldi	r31, 0x01	; 1
    2d4c:	80 81       	ld	r24, Z
    2d4e:	81 60       	ori	r24, 0x01	; 1
    2d50:	80 83       	st	Z, r24
    2d52:	ea e7       	ldi	r30, 0x7A	; 122
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	84 60       	ori	r24, 0x04	; 4
    2d5a:	80 83       	st	Z, r24
    2d5c:	80 81       	ld	r24, Z
    2d5e:	82 60       	ori	r24, 0x02	; 2
    2d60:	80 83       	st	Z, r24
    2d62:	80 81       	ld	r24, Z
    2d64:	81 60       	ori	r24, 0x01	; 1
    2d66:	80 83       	st	Z, r24
    2d68:	80 81       	ld	r24, Z
    2d6a:	80 68       	ori	r24, 0x80	; 128
    2d6c:	80 83       	st	Z, r24
    2d6e:	10 92 c1 00 	sts	0x00C1, r1
    2d72:	08 95       	ret

00002d74 <turnOffPWM>:
    2d74:	89 30       	cpi	r24, 0x09	; 9
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <turnOffPWM+0x6>
    2d78:	43 c0       	rjmp	.+134    	; 0x2e00 <turnOffPWM+0x8c>
    2d7a:	88 f4       	brcc	.+34     	; 0x2d9e <turnOffPWM+0x2a>
    2d7c:	84 30       	cpi	r24, 0x04	; 4
    2d7e:	29 f1       	breq	.+74     	; 0x2dca <turnOffPWM+0x56>
    2d80:	38 f4       	brcc	.+14     	; 0x2d90 <turnOffPWM+0x1c>
    2d82:	82 30       	cpi	r24, 0x02	; 2
    2d84:	59 f1       	breq	.+86     	; 0x2ddc <turnOffPWM+0x68>
    2d86:	e8 f4       	brcc	.+58     	; 0x2dc2 <turnOffPWM+0x4e>
    2d88:	81 30       	cpi	r24, 0x01	; 1
    2d8a:	09 f0       	breq	.+2      	; 0x2d8e <turnOffPWM+0x1a>
    2d8c:	5e c0       	rjmp	.+188    	; 0x2e4a <turnOffPWM+0xd6>
    2d8e:	23 c0       	rjmp	.+70     	; 0x2dd6 <turnOffPWM+0x62>
    2d90:	87 30       	cpi	r24, 0x07	; 7
    2d92:	61 f1       	breq	.+88     	; 0x2dec <turnOffPWM+0x78>
    2d94:	88 f5       	brcc	.+98     	; 0x2df8 <turnOffPWM+0x84>
    2d96:	86 30       	cpi	r24, 0x06	; 6
    2d98:	09 f0       	breq	.+2      	; 0x2d9c <turnOffPWM+0x28>
    2d9a:	57 c0       	rjmp	.+174    	; 0x2e4a <turnOffPWM+0xd6>
    2d9c:	23 c0       	rjmp	.+70     	; 0x2de4 <turnOffPWM+0x70>
    2d9e:	8d 30       	cpi	r24, 0x0D	; 13
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <turnOffPWM+0x30>
    2da2:	40 c0       	rjmp	.+128    	; 0x2e24 <turnOffPWM+0xb0>
    2da4:	20 f4       	brcc	.+8      	; 0x2dae <turnOffPWM+0x3a>
    2da6:	8b 30       	cpi	r24, 0x0B	; 11
    2da8:	a9 f1       	breq	.+106    	; 0x2e14 <turnOffPWM+0xa0>
    2daa:	c0 f5       	brcc	.+112    	; 0x2e1c <turnOffPWM+0xa8>
    2dac:	2d c0       	rjmp	.+90     	; 0x2e08 <turnOffPWM+0x94>
    2dae:	80 31       	cpi	r24, 0x10	; 16
    2db0:	09 f4       	brne	.+2      	; 0x2db4 <turnOffPWM+0x40>
    2db2:	42 c0       	rjmp	.+132    	; 0x2e38 <turnOffPWM+0xc4>
    2db4:	81 31       	cpi	r24, 0x11	; 17
    2db6:	09 f4       	brne	.+2      	; 0x2dba <turnOffPWM+0x46>
    2db8:	43 c0       	rjmp	.+134    	; 0x2e40 <turnOffPWM+0xcc>
    2dba:	8f 30       	cpi	r24, 0x0F	; 15
    2dbc:	09 f0       	breq	.+2      	; 0x2dc0 <turnOffPWM+0x4c>
    2dbe:	45 c0       	rjmp	.+138    	; 0x2e4a <turnOffPWM+0xd6>
    2dc0:	37 c0       	rjmp	.+110    	; 0x2e30 <turnOffPWM+0xbc>
    2dc2:	80 91 80 00 	lds	r24, 0x0080
    2dc6:	8f 77       	andi	r24, 0x7F	; 127
    2dc8:	03 c0       	rjmp	.+6      	; 0x2dd0 <turnOffPWM+0x5c>
    2dca:	80 91 80 00 	lds	r24, 0x0080
    2dce:	8f 7d       	andi	r24, 0xDF	; 223
    2dd0:	80 93 80 00 	sts	0x0080, r24
    2dd4:	08 95       	ret
    2dd6:	84 b5       	in	r24, 0x24	; 36
    2dd8:	8f 77       	andi	r24, 0x7F	; 127
    2dda:	02 c0       	rjmp	.+4      	; 0x2de0 <turnOffPWM+0x6c>
    2ddc:	84 b5       	in	r24, 0x24	; 36
    2dde:	8f 7d       	andi	r24, 0xDF	; 223
    2de0:	84 bd       	out	0x24, r24	; 36
    2de2:	08 95       	ret
    2de4:	80 91 b0 00 	lds	r24, 0x00B0
    2de8:	8f 77       	andi	r24, 0x7F	; 127
    2dea:	03 c0       	rjmp	.+6      	; 0x2df2 <turnOffPWM+0x7e>
    2dec:	80 91 b0 00 	lds	r24, 0x00B0
    2df0:	8f 7d       	andi	r24, 0xDF	; 223
    2df2:	80 93 b0 00 	sts	0x00B0, r24
    2df6:	08 95       	ret
    2df8:	80 91 90 00 	lds	r24, 0x0090
    2dfc:	8f 77       	andi	r24, 0x7F	; 127
    2dfe:	07 c0       	rjmp	.+14     	; 0x2e0e <turnOffPWM+0x9a>
    2e00:	80 91 90 00 	lds	r24, 0x0090
    2e04:	8f 7d       	andi	r24, 0xDF	; 223
    2e06:	03 c0       	rjmp	.+6      	; 0x2e0e <turnOffPWM+0x9a>
    2e08:	80 91 90 00 	lds	r24, 0x0090
    2e0c:	87 7f       	andi	r24, 0xF7	; 247
    2e0e:	80 93 90 00 	sts	0x0090, r24
    2e12:	08 95       	ret
    2e14:	80 91 a0 00 	lds	r24, 0x00A0
    2e18:	8f 77       	andi	r24, 0x7F	; 127
    2e1a:	07 c0       	rjmp	.+14     	; 0x2e2a <turnOffPWM+0xb6>
    2e1c:	80 91 a0 00 	lds	r24, 0x00A0
    2e20:	8f 7d       	andi	r24, 0xDF	; 223
    2e22:	03 c0       	rjmp	.+6      	; 0x2e2a <turnOffPWM+0xb6>
    2e24:	80 91 a0 00 	lds	r24, 0x00A0
    2e28:	87 7f       	andi	r24, 0xF7	; 247
    2e2a:	80 93 a0 00 	sts	0x00A0, r24
    2e2e:	08 95       	ret
    2e30:	80 91 20 01 	lds	r24, 0x0120
    2e34:	8f 77       	andi	r24, 0x7F	; 127
    2e36:	07 c0       	rjmp	.+14     	; 0x2e46 <turnOffPWM+0xd2>
    2e38:	80 91 20 01 	lds	r24, 0x0120
    2e3c:	8f 7d       	andi	r24, 0xDF	; 223
    2e3e:	03 c0       	rjmp	.+6      	; 0x2e46 <turnOffPWM+0xd2>
    2e40:	80 91 20 01 	lds	r24, 0x0120
    2e44:	87 7f       	andi	r24, 0xF7	; 247
    2e46:	80 93 20 01 	sts	0x0120, r24
    2e4a:	08 95       	ret

00002e4c <pinMode>:
    2e4c:	cf 93       	push	r28
    2e4e:	df 93       	push	r29
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	fc 01       	movw	r30, r24
    2e54:	eb 58       	subi	r30, 0x8B	; 139
    2e56:	fe 4f       	sbci	r31, 0xFE	; 254
    2e58:	44 91       	lpm	r20, Z+
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	e5 54       	subi	r30, 0x45	; 69
    2e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e60:	84 91       	lpm	r24, Z+
    2e62:	88 23       	and	r24, r24
    2e64:	41 f1       	breq	.+80     	; 0x2eb6 <pinMode+0x6a>
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	88 0f       	add	r24, r24
    2e6a:	99 1f       	adc	r25, r25
    2e6c:	fc 01       	movw	r30, r24
    2e6e:	eb 5c       	subi	r30, 0xCB	; 203
    2e70:	fd 4f       	sbci	r31, 0xFD	; 253
    2e72:	25 91       	lpm	r18, Z+
    2e74:	34 91       	lpm	r19, Z+
    2e76:	d9 01       	movw	r26, r18
    2e78:	85 5e       	subi	r24, 0xE5	; 229
    2e7a:	9d 4f       	sbci	r25, 0xFD	; 253
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	85 91       	lpm	r24, Z+
    2e80:	94 91       	lpm	r25, Z+
    2e82:	c8 2f       	mov	r28, r24
    2e84:	d9 2f       	mov	r29, r25
    2e86:	9f b7       	in	r25, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	8c 91       	ld	r24, X
    2e8c:	61 11       	cpse	r22, r1
    2e8e:	06 c0       	rjmp	.+12     	; 0x2e9c <pinMode+0x50>
    2e90:	40 95       	com	r20
    2e92:	84 23       	and	r24, r20
    2e94:	8c 93       	st	X, r24
    2e96:	88 81       	ld	r24, Y
    2e98:	84 23       	and	r24, r20
    2e9a:	08 c0       	rjmp	.+16     	; 0x2eac <pinMode+0x60>
    2e9c:	62 30       	cpi	r22, 0x02	; 2
    2e9e:	41 f4       	brne	.+16     	; 0x2eb0 <pinMode+0x64>
    2ea0:	24 2f       	mov	r18, r20
    2ea2:	20 95       	com	r18
    2ea4:	82 23       	and	r24, r18
    2ea6:	8c 93       	st	X, r24
    2ea8:	88 81       	ld	r24, Y
    2eaa:	84 2b       	or	r24, r20
    2eac:	88 83       	st	Y, r24
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <pinMode+0x68>
    2eb0:	84 2b       	or	r24, r20
    2eb2:	8c 93       	st	X, r24
    2eb4:	9f bf       	out	0x3f, r25	; 63
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	08 95       	ret

00002ebc <digitalWrite>:
    2ebc:	0f 93       	push	r16
    2ebe:	1f 93       	push	r17
    2ec0:	cf 93       	push	r28
    2ec2:	df 93       	push	r29
    2ec4:	1f 92       	push	r1
    2ec6:	cd b7       	in	r28, 0x3d	; 61
    2ec8:	de b7       	in	r29, 0x3e	; 62
    2eca:	28 2f       	mov	r18, r24
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	f9 01       	movw	r30, r18
    2ed0:	e1 5d       	subi	r30, 0xD1	; 209
    2ed2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed4:	84 91       	lpm	r24, Z+
    2ed6:	f9 01       	movw	r30, r18
    2ed8:	eb 58       	subi	r30, 0x8B	; 139
    2eda:	fe 4f       	sbci	r31, 0xFE	; 254
    2edc:	14 91       	lpm	r17, Z+
    2ede:	f9 01       	movw	r30, r18
    2ee0:	e5 54       	subi	r30, 0x45	; 69
    2ee2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee4:	04 91       	lpm	r16, Z+
    2ee6:	00 23       	and	r16, r16
    2ee8:	d1 f0       	breq	.+52     	; 0x2f1e <digitalWrite+0x62>
    2eea:	88 23       	and	r24, r24
    2eec:	21 f0       	breq	.+8      	; 0x2ef6 <digitalWrite+0x3a>
    2eee:	69 83       	std	Y+1, r22	; 0x01
    2ef0:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <turnOffPWM>
    2ef4:	69 81       	ldd	r22, Y+1	; 0x01
    2ef6:	e0 2f       	mov	r30, r16
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	ee 0f       	add	r30, r30
    2efc:	ff 1f       	adc	r31, r31
    2efe:	e5 5e       	subi	r30, 0xE5	; 229
    2f00:	fd 4f       	sbci	r31, 0xFD	; 253
    2f02:	85 91       	lpm	r24, Z+
    2f04:	94 91       	lpm	r25, Z+
    2f06:	dc 01       	movw	r26, r24
    2f08:	9f b7       	in	r25, 0x3f	; 63
    2f0a:	f8 94       	cli
    2f0c:	8c 91       	ld	r24, X
    2f0e:	61 11       	cpse	r22, r1
    2f10:	03 c0       	rjmp	.+6      	; 0x2f18 <digitalWrite+0x5c>
    2f12:	10 95       	com	r17
    2f14:	81 23       	and	r24, r17
    2f16:	01 c0       	rjmp	.+2      	; 0x2f1a <digitalWrite+0x5e>
    2f18:	81 2b       	or	r24, r17
    2f1a:	8c 93       	st	X, r24
    2f1c:	9f bf       	out	0x3f, r25	; 63
    2f1e:	0f 90       	pop	r0
    2f20:	df 91       	pop	r29
    2f22:	cf 91       	pop	r28
    2f24:	1f 91       	pop	r17
    2f26:	0f 91       	pop	r16
    2f28:	08 95       	ret

00002f2a <digitalRead>:
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	28 2f       	mov	r18, r24
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	f9 01       	movw	r30, r18
    2f34:	e1 5d       	subi	r30, 0xD1	; 209
    2f36:	fe 4f       	sbci	r31, 0xFE	; 254
    2f38:	84 91       	lpm	r24, Z+
    2f3a:	f9 01       	movw	r30, r18
    2f3c:	eb 58       	subi	r30, 0x8B	; 139
    2f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f40:	d4 91       	lpm	r29, Z+
    2f42:	f9 01       	movw	r30, r18
    2f44:	e5 54       	subi	r30, 0x45	; 69
    2f46:	fe 4f       	sbci	r31, 0xFE	; 254
    2f48:	c4 91       	lpm	r28, Z+
    2f4a:	cc 23       	and	r28, r28
    2f4c:	89 f0       	breq	.+34     	; 0x2f70 <digitalRead+0x46>
    2f4e:	81 11       	cpse	r24, r1
    2f50:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <turnOffPWM>
    2f54:	ec 2f       	mov	r30, r28
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	ee 0f       	add	r30, r30
    2f5a:	ff 1f       	adc	r31, r31
    2f5c:	ef 5f       	subi	r30, 0xFF	; 255
    2f5e:	fd 4f       	sbci	r31, 0xFD	; 253
    2f60:	85 91       	lpm	r24, Z+
    2f62:	94 91       	lpm	r25, Z+
    2f64:	dc 01       	movw	r26, r24
    2f66:	8c 91       	ld	r24, X
    2f68:	8d 23       	and	r24, r29
    2f6a:	21 e0       	ldi	r18, 0x01	; 1
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	11 f4       	brne	.+4      	; 0x2f74 <digitalRead+0x4a>
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	c9 01       	movw	r24, r18
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	08 95       	ret

00002f7c <yield>:
    2f7c:	08 95       	ret

00002f7e <_ZN15PinCatcher_implC1Ev>:

#include <Arduino.h>

//--- cosntructors/destructor ------------------------------------------------------------------------------------------

PinCatcher_impl::PinCatcher_impl() :
    2f7e:	cf 93       	push	r28
    2f80:	df 93       	push	r29
    2f82:	dc 01       	movw	r26, r24
		pins0_(*portInputRegister(0)), pins1_(*portInputRegister(9)), pins2_(
    2f84:	e1 e0       	ldi	r30, 0x01	; 1
    2f86:	f2 e0       	ldi	r31, 0x02	; 2
    2f88:	25 91       	lpm	r18, Z+
    2f8a:	34 91       	lpm	r19, Z+
				*portInputRegister(11)), last0_(
				pins0_), last1_(pins1_), last2_(pins2_),  mask0_(
				0), mask1_(0), mask2_(0) {
    2f8c:	c9 01       	movw	r24, r18
    2f8e:	91 96       	adiw	r26, 0x21	; 33
    2f90:	3c 93       	st	X, r19
    2f92:	2e 93       	st	-X, r18
    2f94:	90 97       	sbiw	r26, 0x20	; 32
#include <Arduino.h>

//--- cosntructors/destructor ------------------------------------------------------------------------------------------

PinCatcher_impl::PinCatcher_impl() :
		pins0_(*portInputRegister(0)), pins1_(*portInputRegister(9)), pins2_(
    2f96:	e3 e1       	ldi	r30, 0x13	; 19
    2f98:	f2 e0       	ldi	r31, 0x02	; 2
    2f9a:	25 91       	lpm	r18, Z+
    2f9c:	34 91       	lpm	r19, Z+
				*portInputRegister(11)), last0_(
				pins0_), last1_(pins1_), last2_(pins2_),  mask0_(
				0), mask1_(0), mask2_(0) {
    2f9e:	c2 2f       	mov	r28, r18
    2fa0:	d3 2f       	mov	r29, r19
    2fa2:	93 96       	adiw	r26, 0x23	; 35
    2fa4:	dc 93       	st	X, r29
    2fa6:	ce 93       	st	-X, r28
    2fa8:	92 97       	sbiw	r26, 0x22	; 34

//--- cosntructors/destructor ------------------------------------------------------------------------------------------

PinCatcher_impl::PinCatcher_impl() :
		pins0_(*portInputRegister(0)), pins1_(*portInputRegister(9)), pins2_(
				*portInputRegister(11)), last0_(
    2faa:	e7 e1       	ldi	r30, 0x17	; 23
    2fac:	f2 e0       	ldi	r31, 0x02	; 2
    2fae:	25 91       	lpm	r18, Z+
    2fb0:	34 91       	lpm	r19, Z+
				pins0_), last1_(pins1_), last2_(pins2_),  mask0_(
				0), mask1_(0), mask2_(0) {
    2fb2:	95 96       	adiw	r26, 0x25	; 37
    2fb4:	3c 93       	st	X, r19
    2fb6:	2e 93       	st	-X, r18
    2fb8:	94 97       	sbiw	r26, 0x24	; 36
    2fba:	fc 01       	movw	r30, r24
    2fbc:	80 81       	ld	r24, Z
    2fbe:	96 96       	adiw	r26, 0x26	; 38
    2fc0:	8c 93       	st	X, r24
    2fc2:	96 97       	sbiw	r26, 0x26	; 38
    2fc4:	88 81       	ld	r24, Y
    2fc6:	97 96       	adiw	r26, 0x27	; 39
    2fc8:	8c 93       	st	X, r24
    2fca:	97 97       	sbiw	r26, 0x27	; 39
    2fcc:	f9 01       	movw	r30, r18
    2fce:	80 81       	ld	r24, Z
    2fd0:	98 96       	adiw	r26, 0x28	; 40
    2fd2:	8c 93       	st	X, r24
    2fd4:	98 97       	sbiw	r26, 0x28	; 40
    2fd6:	99 96       	adiw	r26, 0x29	; 41
    2fd8:	1c 92       	st	X, r1
    2fda:	99 97       	sbiw	r26, 0x29	; 41
    2fdc:	9a 96       	adiw	r26, 0x2a	; 42
    2fde:	1c 92       	st	X, r1
    2fe0:	9a 97       	sbiw	r26, 0x2a	; 42
    2fe2:	9b 96       	adiw	r26, 0x2b	; 43
    2fe4:	1c 92       	st	X, r1
    2fe6:	9b 97       	sbiw	r26, 0x2b	; 43
	// need to clear the who slots.
	memset(who_, 0, (sizeof(PinCatcher*) * 8));
    2fe8:	80 e1       	ldi	r24, 0x10	; 16
    2fea:	1d 92       	st	X+, r1
    2fec:	8a 95       	dec	r24
    2fee:	e9 f7       	brne	.-6      	; 0x2fea <_ZN15PinCatcher_implC1Ev+0x6c>
}
    2ff0:	df 91       	pop	r29
    2ff2:	cf 91       	pop	r28
    2ff4:	08 95       	ret

00002ff6 <_ZN15PinCatcher_implD1Ev>:

PinCatcher_impl::~PinCatcher_impl() {
	PCICR = 0;
    2ff6:	10 92 68 00 	sts	0x0068, r1
	PCMSK0 = 0;
    2ffa:	10 92 6b 00 	sts	0x006B, r1
	PCMSK1 = 0;
    2ffe:	10 92 6c 00 	sts	0x006C, r1
	PCMSK2 = 0;
    3002:	10 92 6d 00 	sts	0x006D, r1
    3006:	08 95       	ret

00003008 <_ZN15PinCatcher_impl11handlePins2Ev>:
	}
}



void PinCatcher_impl::handlePins2() {
    3008:	ff 92       	push	r15
    300a:	0f 93       	push	r16
    300c:	1f 93       	push	r17
    300e:	cf 93       	push	r28
    3010:	df 93       	push	r29
    3012:	ec 01       	movw	r28, r24
	// see handlePins0_ for comments
	//Serial.print("ISR fired");
	uint8_t curr = pins2_;
    3014:	ec a1       	ldd	r30, Y+36	; 0x24
    3016:	fd a1       	ldd	r31, Y+37	; 0x25
    3018:	00 81       	ld	r16, Z
//	Serial.print(", pins2_=");
//	Serial.print(pins2_, BIN);
//	Serial.print(", last2_=");
//	Serial.print(last2_, BIN);
	uint8_t changed = mask2_ & (curr ^ last2_);
    301a:	18 a5       	ldd	r17, Y+40	; 0x28
    301c:	10 27       	eor	r17, r16
    301e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3020:	18 23       	and	r17, r24
	last2_ = curr;
    3022:	08 a7       	std	Y+40, r16	; 0x28
//	Serial.print(", mask2_=");
//	Serial.print(mask2_, BIN);
//
//	Serial.print(", changed mask=");
//	Serial.println(changed, BIN);
	uint8_t count = 62; //pins 62-69
    3024:	ee e3       	ldi	r30, 0x3E	; 62
    3026:	fe 2e       	mov	r15, r30
	while (changed) {
    3028:	19 c0       	rjmp	.+50     	; 0x305c <_ZN15PinCatcher_impl11handlePins2Ev+0x54>
		if (changed & 0x01)
    302a:	10 ff       	sbrs	r17, 0
    302c:	14 c0       	rjmp	.+40     	; 0x3056 <_ZN15PinCatcher_impl11handlePins2Ev+0x4e>
			who_[count-54]->handle(count, (curr & 0x01));
    302e:	ef 2d       	mov	r30, r15
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	f6 97       	sbiw	r30, 0x36	; 54
    3034:	ee 0f       	add	r30, r30
    3036:	ff 1f       	adc	r31, r31
    3038:	ec 0f       	add	r30, r28
    303a:	fd 1f       	adc	r31, r29
    303c:	80 81       	ld	r24, Z
    303e:	91 81       	ldd	r25, Z+1	; 0x01
    3040:	dc 01       	movw	r26, r24
    3042:	ed 91       	ld	r30, X+
    3044:	fc 91       	ld	r31, X
    3046:	40 2f       	mov	r20, r16
    3048:	41 70       	andi	r20, 0x01	; 1
    304a:	01 90       	ld	r0, Z+
    304c:	f0 81       	ld	r31, Z
    304e:	e0 2d       	mov	r30, r0
    3050:	6f 2d       	mov	r22, r15
    3052:	70 e0       	ldi	r23, 0x00	; 0
    3054:	19 95       	eicall
		changed >>= 1;
    3056:	16 95       	lsr	r17
		curr >>= 1;
    3058:	06 95       	lsr	r16
		++count;
    305a:	f3 94       	inc	r15
//	Serial.print(mask2_, BIN);
//
//	Serial.print(", changed mask=");
//	Serial.println(changed, BIN);
	uint8_t count = 62; //pins 62-69
	while (changed) {
    305c:	11 11       	cpse	r17, r1
    305e:	e5 cf       	rjmp	.-54     	; 0x302a <_ZN15PinCatcher_impl11handlePins2Ev+0x22>
			who_[count-54]->handle(count, (curr & 0x01));
		changed >>= 1;
		curr >>= 1;
		++count;
	}
}
    3060:	df 91       	pop	r29
    3062:	cf 91       	pop	r28
    3064:	1f 91       	pop	r17
    3066:	0f 91       	pop	r16
    3068:	ff 90       	pop	r15
    306a:	08 95       	ret

0000306c <_Z15handlePins2_isrv>:
void handlePins1_isr() {
	pc_i.handlePins1();
}

void handlePins2_isr() {
	pc_i.handlePins2();
    306c:	8e eb       	ldi	r24, 0xBE	; 190
    306e:	97 e0       	ldi	r25, 0x07	; 7
    3070:	0c 94 04 18 	jmp	0x3008	; 0x3008 <_ZN15PinCatcher_impl11handlePins2Ev>

00003074 <__vector_11>:
//{
//   handlePins2_isr();
//}

ISR(PCINT2_vect)
{
    3074:	1f 92       	push	r1
    3076:	0f 92       	push	r0
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	0f 92       	push	r0
    307c:	11 24       	eor	r1, r1
    307e:	0b b6       	in	r0, 0x3b	; 59
    3080:	0f 92       	push	r0
    3082:	1b be       	out	0x3b, r1	; 59
    3084:	2f 93       	push	r18
    3086:	3f 93       	push	r19
    3088:	4f 93       	push	r20
    308a:	5f 93       	push	r21
    308c:	6f 93       	push	r22
    308e:	7f 93       	push	r23
    3090:	8f 93       	push	r24
    3092:	9f 93       	push	r25
    3094:	af 93       	push	r26
    3096:	bf 93       	push	r27
    3098:	ef 93       	push	r30
    309a:	ff 93       	push	r31
	handlePins2_isr();
    309c:	0e 94 36 18 	call	0x306c	; 0x306c <_Z15handlePins2_isrv>
}
    30a0:	ff 91       	pop	r31
    30a2:	ef 91       	pop	r30
    30a4:	bf 91       	pop	r27
    30a6:	af 91       	pop	r26
    30a8:	9f 91       	pop	r25
    30aa:	8f 91       	pop	r24
    30ac:	7f 91       	pop	r23
    30ae:	6f 91       	pop	r22
    30b0:	5f 91       	pop	r21
    30b2:	4f 91       	pop	r20
    30b4:	3f 91       	pop	r19
    30b6:	2f 91       	pop	r18
    30b8:	0f 90       	pop	r0
    30ba:	0b be       	out	0x3b, r0	; 59
    30bc:	0f 90       	pop	r0
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	0f 90       	pop	r0
    30c2:	1f 90       	pop	r1
    30c4:	18 95       	reti

000030c6 <_GLOBAL__sub_I__ZN15PinCatcher_implC2Ev>:
//--- implementation details ----------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------------
// this is THE pin catcher implementation
PinCatcher_impl pc_i;
    30c6:	8e eb       	ldi	r24, 0xBE	; 190
    30c8:	97 e0       	ldi	r25, 0x07	; 7
    30ca:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <_ZN15PinCatcher_implC1Ev>

000030ce <_GLOBAL__sub_D__ZN15PinCatcher_implC2Ev>:
    30ce:	8e eb       	ldi	r24, 0xBE	; 190
    30d0:	97 e0       	ldi	r25, 0x07	; 7
    30d2:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <_ZN15PinCatcher_implD1Ev>

000030d6 <_ZN7PString5writeEh>:
#if defined(ARDUINO) && ARDUINO >= 100
size_t PString::write(uint8_t b)
#else
void PString::write(uint8_t b)
#endif
{
    30d6:	fc 01       	movw	r30, r24
  if (_cur + 1 < _buf + _size)
    30d8:	a6 81       	ldd	r26, Z+6	; 0x06
    30da:	b7 81       	ldd	r27, Z+7	; 0x07
    30dc:	9d 01       	movw	r18, r26
    30de:	2f 5f       	subi	r18, 0xFF	; 255
    30e0:	3f 4f       	sbci	r19, 0xFF	; 255
    30e2:	84 81       	ldd	r24, Z+4	; 0x04
    30e4:	95 81       	ldd	r25, Z+5	; 0x05
    30e6:	40 85       	ldd	r20, Z+8	; 0x08
    30e8:	51 85       	ldd	r21, Z+9	; 0x09
    30ea:	84 0f       	add	r24, r20
    30ec:	95 1f       	adc	r25, r21
    30ee:	28 17       	cp	r18, r24
    30f0:	39 07       	cpc	r19, r25
    30f2:	40 f4       	brcc	.+16     	; 0x3104 <_ZN7PString5writeEh+0x2e>
  {
    *_cur++ = (char)b;
    30f4:	6c 93       	st	X, r22
    30f6:	37 83       	std	Z+7, r19	; 0x07
    30f8:	26 83       	std	Z+6, r18	; 0x06
    *_cur = '\0';
    30fa:	11 96       	adiw	r26, 0x01	; 1
    30fc:	1c 92       	st	X, r1
#if defined(ARDUINO) && ARDUINO >= 100
		return 1;
    30fe:	21 e0       	ldi	r18, 0x01	; 1
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	02 c0       	rjmp	.+4      	; 0x3108 <_ZN7PString5writeEh+0x32>
#endif
	}

#if defined(ARDUINO) && ARDUINO >= 100
	return 0;
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
#endif
}
    3108:	c9 01       	movw	r24, r18
    310a:	08 95       	ret

0000310c <_ZN7PString5beginEv>:
*/

#include "PString.h"

void PString::begin()
{
    310c:	fc 01       	movw	r30, r24
  _cur = _buf;
    310e:	a4 81       	ldd	r26, Z+4	; 0x04
    3110:	b5 81       	ldd	r27, Z+5	; 0x05
    3112:	b7 83       	std	Z+7, r27	; 0x07
    3114:	a6 83       	std	Z+6, r26	; 0x06
  if (_size > 0)
    3116:	80 85       	ldd	r24, Z+8	; 0x08
    3118:	91 85       	ldd	r25, Z+9	; 0x09
    311a:	89 2b       	or	r24, r25
    311c:	09 f0       	breq	.+2      	; 0x3120 <_ZN7PString5beginEv+0x14>
    _buf[0] = '\0';
    311e:	1c 92       	st	X, r1
    3120:	08 95       	ret

00003122 <_ZN3PIDC1Ev>:
  #include "WProgram.h"
#endif

#include <PID_v1/PID_v1.h>

PID::PID(){};
    3122:	08 95       	ret

00003124 <_ZN3PID7ComputeEv>:
 *     This, as they say, is where the magic happens.  this function should be called
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed
 **********************************************************************************/ 
void PID::Compute()
{
    3124:	2f 92       	push	r2
    3126:	3f 92       	push	r3
    3128:	4f 92       	push	r4
    312a:	5f 92       	push	r5
    312c:	6f 92       	push	r6
    312e:	7f 92       	push	r7
    3130:	8f 92       	push	r8
    3132:	9f 92       	push	r9
    3134:	af 92       	push	r10
    3136:	bf 92       	push	r11
    3138:	cf 92       	push	r12
    313a:	df 92       	push	r13
    313c:	ef 92       	push	r14
    313e:	ff 92       	push	r15
    3140:	0f 93       	push	r16
    3142:	1f 93       	push	r17
    3144:	cf 93       	push	r28
    3146:	df 93       	push	r29
    3148:	cd b7       	in	r28, 0x3d	; 61
    314a:	de b7       	in	r29, 0x3e	; 62
    314c:	2a 97       	sbiw	r28, 0x0a	; 10
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	f8 94       	cli
    3152:	de bf       	out	0x3e, r29	; 62
    3154:	0f be       	out	0x3f, r0	; 63
    3156:	cd bf       	out	0x3d, r28	; 61
    3158:	9a 87       	std	Y+10, r25	; 0x0a
    315a:	89 87       	std	Y+9, r24	; 0x09
   if(!inAuto) return;
    315c:	dc 01       	movw	r26, r24
    315e:	d6 96       	adiw	r26, 0x36	; 54
    3160:	8c 91       	ld	r24, X
    3162:	88 23       	and	r24, r24
    3164:	09 f4       	brne	.+2      	; 0x3168 <_ZN3PID7ComputeEv+0x44>
    3166:	fa c0       	rjmp	.+500    	; 0x335c <_ZN3PID7ComputeEv+0x238>
   unsigned long now = millis();
    3168:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <millis>
    316c:	69 83       	std	Y+1, r22	; 0x01
    316e:	7a 83       	std	Y+2, r23	; 0x02
    3170:	8b 83       	std	Y+3, r24	; 0x03
    3172:	9c 83       	std	Y+4, r25	; 0x04
   int timeChange = (now - lastTime);
    3174:	e9 85       	ldd	r30, Y+9	; 0x09
    3176:	fa 85       	ldd	r31, Y+10	; 0x0a
    3178:	80 a1       	ldd	r24, Z+32	; 0x20
    317a:	91 a1       	ldd	r25, Z+33	; 0x21
    317c:	29 81       	ldd	r18, Y+1	; 0x01
    317e:	3a 81       	ldd	r19, Y+2	; 0x02
    3180:	28 1b       	sub	r18, r24
    3182:	39 0b       	sbc	r19, r25
   if(timeChange>=SampleTime)
    3184:	84 a5       	ldd	r24, Z+44	; 0x2c
    3186:	95 a5       	ldd	r25, Z+45	; 0x2d
    3188:	28 17       	cp	r18, r24
    318a:	39 07       	cpc	r19, r25
    318c:	0c f4       	brge	.+2      	; 0x3190 <_ZN3PID7ComputeEv+0x6c>
    318e:	e6 c0       	rjmp	.+460    	; 0x335c <_ZN3PID7ComputeEv+0x238>
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
    3190:	02 8c       	ldd	r0, Z+26	; 0x1a
    3192:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3194:	e0 2d       	mov	r30, r0
    3196:	c0 80       	ld	r12, Z
    3198:	d1 80       	ldd	r13, Z+1	; 0x01
    319a:	e2 80       	ldd	r14, Z+2	; 0x02
    319c:	f3 80       	ldd	r15, Z+3	; 0x03
      double error = *mySetpoint - input;
    319e:	a9 85       	ldd	r26, Y+9	; 0x09
    31a0:	ba 85       	ldd	r27, Y+10	; 0x0a
    31a2:	5e 96       	adiw	r26, 0x1e	; 30
    31a4:	ed 91       	ld	r30, X+
    31a6:	fc 91       	ld	r31, X
    31a8:	5f 97       	sbiw	r26, 0x1f	; 31
    31aa:	a7 01       	movw	r20, r14
    31ac:	96 01       	movw	r18, r12
    31ae:	60 81       	ld	r22, Z
    31b0:	71 81       	ldd	r23, Z+1	; 0x01
    31b2:	82 81       	ldd	r24, Z+2	; 0x02
    31b4:	93 81       	ldd	r25, Z+3	; 0x03
    31b6:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    31ba:	6d 83       	std	Y+5, r22	; 0x05
    31bc:	7e 83       	std	Y+6, r23	; 0x06
    31be:	8f 83       	std	Y+7, r24	; 0x07
    31c0:	98 87       	std	Y+8, r25	; 0x08
      ITerm+= (ki * error);
    31c2:	e9 85       	ldd	r30, Y+9	; 0x09
    31c4:	fa 85       	ldd	r31, Y+10	; 0x0a
    31c6:	20 89       	ldd	r18, Z+16	; 0x10
    31c8:	31 89       	ldd	r19, Z+17	; 0x11
    31ca:	42 89       	ldd	r20, Z+18	; 0x12
    31cc:	53 89       	ldd	r21, Z+19	; 0x13
    31ce:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    31d2:	a9 85       	ldd	r26, Y+9	; 0x09
    31d4:	ba 85       	ldd	r27, Y+10	; 0x0a
    31d6:	94 96       	adiw	r26, 0x24	; 36
    31d8:	2d 91       	ld	r18, X+
    31da:	3d 91       	ld	r19, X+
    31dc:	4d 91       	ld	r20, X+
    31de:	5c 91       	ld	r21, X
    31e0:	97 97       	sbiw	r26, 0x27	; 39
    31e2:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    31e6:	56 2e       	mov	r5, r22
    31e8:	67 2e       	mov	r6, r23
    31ea:	78 2e       	mov	r7, r24
    31ec:	09 2f       	mov	r16, r25
    31ee:	98 2f       	mov	r25, r24
    31f0:	45 2d       	mov	r20, r5
    31f2:	56 2d       	mov	r21, r6
    31f4:	69 2f       	mov	r22, r25
    31f6:	70 2f       	mov	r23, r16
    31f8:	e9 85       	ldd	r30, Y+9	; 0x09
    31fa:	fa 85       	ldd	r31, Y+10	; 0x0a
    31fc:	44 a3       	std	Z+36, r20	; 0x24
    31fe:	55 a3       	std	Z+37, r21	; 0x25
    3200:	66 a3       	std	Z+38, r22	; 0x26
    3202:	77 a3       	std	Z+39, r23	; 0x27
      if(ITerm > outMax) ITerm= outMax;
    3204:	22 a8       	ldd	r2, Z+50	; 0x32
    3206:	13 a9       	ldd	r17, Z+51	; 0x33
    3208:	34 a8       	ldd	r3, Z+52	; 0x34
    320a:	45 a8       	ldd	r4, Z+53	; 0x35
    320c:	22 2d       	mov	r18, r2
    320e:	31 2f       	mov	r19, r17
    3210:	43 2d       	mov	r20, r3
    3212:	54 2d       	mov	r21, r4
    3214:	65 2d       	mov	r22, r5
    3216:	76 2d       	mov	r23, r6
    3218:	87 2d       	mov	r24, r7
    321a:	90 2f       	mov	r25, r16
    321c:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    3220:	18 16       	cp	r1, r24
    3222:	6c f4       	brge	.+26     	; 0x323e <_ZN3PID7ComputeEv+0x11a>
    3224:	42 2d       	mov	r20, r2
    3226:	51 2f       	mov	r21, r17
    3228:	63 2d       	mov	r22, r3
    322a:	74 2d       	mov	r23, r4
    322c:	a9 85       	ldd	r26, Y+9	; 0x09
    322e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3230:	94 96       	adiw	r26, 0x24	; 36
    3232:	4d 93       	st	X+, r20
    3234:	5d 93       	st	X+, r21
    3236:	6d 93       	st	X+, r22
    3238:	7c 93       	st	X, r23
    323a:	97 97       	sbiw	r26, 0x27	; 39
    323c:	18 c0       	rjmp	.+48     	; 0x326e <_ZN3PID7ComputeEv+0x14a>
      else if(ITerm < outMin) ITerm= outMin;
    323e:	e9 85       	ldd	r30, Y+9	; 0x09
    3240:	fa 85       	ldd	r31, Y+10	; 0x0a
    3242:	86 a4       	ldd	r8, Z+46	; 0x2e
    3244:	97 a4       	ldd	r9, Z+47	; 0x2f
    3246:	a0 a8       	ldd	r10, Z+48	; 0x30
    3248:	b1 a8       	ldd	r11, Z+49	; 0x31
    324a:	a5 01       	movw	r20, r10
    324c:	94 01       	movw	r18, r8
    324e:	65 2d       	mov	r22, r5
    3250:	76 2d       	mov	r23, r6
    3252:	87 2d       	mov	r24, r7
    3254:	90 2f       	mov	r25, r16
    3256:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    325a:	87 ff       	sbrs	r24, 7
    325c:	08 c0       	rjmp	.+16     	; 0x326e <_ZN3PID7ComputeEv+0x14a>
    325e:	a9 85       	ldd	r26, Y+9	; 0x09
    3260:	ba 85       	ldd	r27, Y+10	; 0x0a
    3262:	94 96       	adiw	r26, 0x24	; 36
    3264:	8d 92       	st	X+, r8
    3266:	9d 92       	st	X+, r9
    3268:	ad 92       	st	X+, r10
    326a:	bc 92       	st	X, r11
    326c:	97 97       	sbiw	r26, 0x27	; 39
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    326e:	e9 85       	ldd	r30, Y+9	; 0x09
    3270:	fa 85       	ldd	r31, Y+10	; 0x0a
    3272:	24 85       	ldd	r18, Z+12	; 0x0c
    3274:	35 85       	ldd	r19, Z+13	; 0x0d
    3276:	46 85       	ldd	r20, Z+14	; 0x0e
    3278:	57 85       	ldd	r21, Z+15	; 0x0f
    327a:	bd 81       	ldd	r27, Y+5	; 0x05
    327c:	ae 81       	ldd	r26, Y+6	; 0x06
    327e:	0f 81       	ldd	r16, Y+7	; 0x07
    3280:	b8 84       	ldd	r11, Y+8	; 0x08
    3282:	6b 2f       	mov	r22, r27
    3284:	7a 2f       	mov	r23, r26
    3286:	80 2f       	mov	r24, r16
    3288:	9b 2d       	mov	r25, r11
    328a:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    328e:	a9 85       	ldd	r26, Y+9	; 0x09
    3290:	ba 85       	ldd	r27, Y+10	; 0x0a
    3292:	94 96       	adiw	r26, 0x24	; 36
    3294:	2d 91       	ld	r18, X+
    3296:	3d 91       	ld	r19, X+
    3298:	4d 91       	ld	r20, X+
    329a:	5c 91       	ld	r21, X
    329c:	97 97       	sbiw	r26, 0x27	; 39
    329e:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    32a2:	4b 01       	movw	r8, r22
    32a4:	5c 01       	movw	r10, r24
	  double input = *myInput;
      double error = *mySetpoint - input;
      ITerm+= (ki * error);
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
    32a6:	e9 85       	ldd	r30, Y+9	; 0x09
    32a8:	fa 85       	ldd	r31, Y+10	; 0x0a
    32aa:	20 a5       	ldd	r18, Z+40	; 0x28
    32ac:	31 a5       	ldd	r19, Z+41	; 0x29
    32ae:	42 a5       	ldd	r20, Z+42	; 0x2a
    32b0:	53 a5       	ldd	r21, Z+43	; 0x2b
    32b2:	c7 01       	movw	r24, r14
    32b4:	b6 01       	movw	r22, r12
    32b6:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    32ba:	a9 85       	ldd	r26, Y+9	; 0x09
    32bc:	ba 85       	ldd	r27, Y+10	; 0x0a
    32be:	54 96       	adiw	r26, 0x14	; 20
    32c0:	2d 91       	ld	r18, X+
    32c2:	3d 91       	ld	r19, X+
    32c4:	4d 91       	ld	r20, X+
    32c6:	5c 91       	ld	r21, X
    32c8:	57 97       	sbiw	r26, 0x17	; 23
    32ca:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    32ce:	9b 01       	movw	r18, r22
    32d0:	ac 01       	movw	r20, r24
    32d2:	c5 01       	movw	r24, r10
    32d4:	b4 01       	movw	r22, r8
    32d6:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    32da:	96 2e       	mov	r9, r22
    32dc:	a7 2e       	mov	r10, r23
    32de:	b8 2e       	mov	r11, r24
    32e0:	09 2f       	mov	r16, r25
      
	  if(output > outMax) output = outMax;
    32e2:	22 2d       	mov	r18, r2
    32e4:	31 2f       	mov	r19, r17
    32e6:	43 2d       	mov	r20, r3
    32e8:	54 2d       	mov	r21, r4
    32ea:	69 2d       	mov	r22, r9
    32ec:	7a 2d       	mov	r23, r10
    32ee:	8b 2d       	mov	r24, r11
    32f0:	90 2f       	mov	r25, r16
    32f2:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    32f6:	18 16       	cp	r1, r24
    32f8:	b4 f0       	brlt	.+44     	; 0x3326 <_ZN3PID7ComputeEv+0x202>
      else if(output < outMin) output = outMin;
    32fa:	e9 85       	ldd	r30, Y+9	; 0x09
    32fc:	fa 85       	ldd	r31, Y+10	; 0x0a
    32fe:	26 a4       	ldd	r2, Z+46	; 0x2e
    3300:	17 a5       	ldd	r17, Z+47	; 0x2f
    3302:	30 a8       	ldd	r3, Z+48	; 0x30
    3304:	41 a8       	ldd	r4, Z+49	; 0x31
    3306:	22 2d       	mov	r18, r2
    3308:	31 2f       	mov	r19, r17
    330a:	43 2d       	mov	r20, r3
    330c:	54 2d       	mov	r21, r4
    330e:	69 2d       	mov	r22, r9
    3310:	7a 2d       	mov	r23, r10
    3312:	8b 2d       	mov	r24, r11
    3314:	90 2f       	mov	r25, r16
    3316:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    331a:	87 fd       	sbrc	r24, 7
    331c:	04 c0       	rjmp	.+8      	; 0x3326 <_ZN3PID7ComputeEv+0x202>
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    331e:	29 2c       	mov	r2, r9
    3320:	1a 2d       	mov	r17, r10
    3322:	3b 2c       	mov	r3, r11
    3324:	40 2e       	mov	r4, r16
      
	  if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	  *myOutput = output;
    3326:	a9 85       	ldd	r26, Y+9	; 0x09
    3328:	ba 85       	ldd	r27, Y+10	; 0x0a
    332a:	5c 96       	adiw	r26, 0x1c	; 28
    332c:	ed 91       	ld	r30, X+
    332e:	fc 91       	ld	r31, X
    3330:	5d 97       	sbiw	r26, 0x1d	; 29
    3332:	42 2d       	mov	r20, r2
    3334:	51 2f       	mov	r21, r17
    3336:	63 2d       	mov	r22, r3
    3338:	74 2d       	mov	r23, r4
    333a:	40 83       	st	Z, r20
    333c:	51 83       	std	Z+1, r21	; 0x01
    333e:	62 83       	std	Z+2, r22	; 0x02
    3340:	73 83       	std	Z+3, r23	; 0x03
	  
      /*Remember some variables for next time*/
      lastInput = input;
    3342:	fd 01       	movw	r30, r26
    3344:	c0 a6       	std	Z+40, r12	; 0x28
    3346:	d1 a6       	std	Z+41, r13	; 0x29
    3348:	e2 a6       	std	Z+42, r14	; 0x2a
    334a:	f3 a6       	std	Z+43, r15	; 0x2b
      lastTime = now;
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	9a 81       	ldd	r25, Y+2	; 0x02
    3350:	ab 81       	ldd	r26, Y+3	; 0x03
    3352:	bc 81       	ldd	r27, Y+4	; 0x04
    3354:	80 a3       	std	Z+32, r24	; 0x20
    3356:	91 a3       	std	Z+33, r25	; 0x21
    3358:	a2 a3       	std	Z+34, r26	; 0x22
    335a:	b3 a3       	std	Z+35, r27	; 0x23
   }
}
    335c:	2a 96       	adiw	r28, 0x0a	; 10
    335e:	0f b6       	in	r0, 0x3f	; 63
    3360:	f8 94       	cli
    3362:	de bf       	out	0x3e, r29	; 62
    3364:	0f be       	out	0x3f, r0	; 63
    3366:	cd bf       	out	0x3d, r28	; 61
    3368:	df 91       	pop	r29
    336a:	cf 91       	pop	r28
    336c:	1f 91       	pop	r17
    336e:	0f 91       	pop	r16
    3370:	ff 90       	pop	r15
    3372:	ef 90       	pop	r14
    3374:	df 90       	pop	r13
    3376:	cf 90       	pop	r12
    3378:	bf 90       	pop	r11
    337a:	af 90       	pop	r10
    337c:	9f 90       	pop	r9
    337e:	8f 90       	pop	r8
    3380:	7f 90       	pop	r7
    3382:	6f 90       	pop	r6
    3384:	5f 90       	pop	r5
    3386:	4f 90       	pop	r4
    3388:	3f 90       	pop	r3
    338a:	2f 90       	pop	r2
    338c:	08 95       	ret

0000338e <_ZN3PID10SetTuningsEddd>:
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
    338e:	2f 92       	push	r2
    3390:	3f 92       	push	r3
    3392:	4f 92       	push	r4
    3394:	5f 92       	push	r5
    3396:	6f 92       	push	r6
    3398:	7f 92       	push	r7
    339a:	8f 92       	push	r8
    339c:	9f 92       	push	r9
    339e:	af 92       	push	r10
    33a0:	bf 92       	push	r11
    33a2:	cf 92       	push	r12
    33a4:	df 92       	push	r13
    33a6:	ef 92       	push	r14
    33a8:	ff 92       	push	r15
    33aa:	0f 93       	push	r16
    33ac:	1f 93       	push	r17
    33ae:	cf 93       	push	r28
    33b0:	df 93       	push	r29
    33b2:	1c 01       	movw	r2, r24
    33b4:	4a 01       	movw	r8, r20
    33b6:	5b 01       	movw	r10, r22
    33b8:	28 01       	movw	r4, r16
    33ba:	39 01       	movw	r6, r18
   if (Kp<0 || Ki<0 || Kd<0) return;
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	a9 01       	movw	r20, r18
    33c2:	c5 01       	movw	r24, r10
    33c4:	b4 01       	movw	r22, r8
    33c6:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    33ca:	87 fd       	sbrc	r24, 7
    33cc:	8e c0       	rjmp	.+284    	; 0x34ea <_ZN3PID10SetTuningsEddd+0x15c>
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	a9 01       	movw	r20, r18
    33d4:	c3 01       	movw	r24, r6
    33d6:	b2 01       	movw	r22, r4
    33d8:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    33dc:	87 fd       	sbrc	r24, 7
    33de:	85 c0       	rjmp	.+266    	; 0x34ea <_ZN3PID10SetTuningsEddd+0x15c>
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	a9 01       	movw	r20, r18
    33e6:	c7 01       	movw	r24, r14
    33e8:	b6 01       	movw	r22, r12
    33ea:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    33ee:	87 fd       	sbrc	r24, 7
    33f0:	7c c0       	rjmp	.+248    	; 0x34ea <_ZN3PID10SetTuningsEddd+0x15c>
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    33f2:	f1 01       	movw	r30, r2
    33f4:	80 82       	st	Z, r8
    33f6:	91 82       	std	Z+1, r9	; 0x01
    33f8:	a2 82       	std	Z+2, r10	; 0x02
    33fa:	b3 82       	std	Z+3, r11	; 0x03
    33fc:	44 82       	std	Z+4, r4	; 0x04
    33fe:	55 82       	std	Z+5, r5	; 0x05
    3400:	66 82       	std	Z+6, r6	; 0x06
    3402:	77 82       	std	Z+7, r7	; 0x07
    3404:	c0 86       	std	Z+8, r12	; 0x08
    3406:	d1 86       	std	Z+9, r13	; 0x09
    3408:	e2 86       	std	Z+10, r14	; 0x0a
    340a:	f3 86       	std	Z+11, r15	; 0x0b
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
    340c:	64 a5       	ldd	r22, Z+44	; 0x2c
    340e:	75 a5       	ldd	r23, Z+45	; 0x2d
    3410:	88 27       	eor	r24, r24
    3412:	77 fd       	sbrc	r23, 7
    3414:	80 95       	com	r24
    3416:	98 2f       	mov	r25, r24
    3418:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__floatsisf>
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	4a e7       	ldi	r20, 0x7A	; 122
    3422:	54 e4       	ldi	r21, 0x44	; 68
    3424:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <__divsf3>
    3428:	d6 2f       	mov	r29, r22
    342a:	c7 2f       	mov	r28, r23
    342c:	8c 01       	movw	r16, r24
   kp = Kp;
    342e:	f1 01       	movw	r30, r2
    3430:	84 86       	std	Z+12, r8	; 0x0c
    3432:	95 86       	std	Z+13, r9	; 0x0d
    3434:	a6 86       	std	Z+14, r10	; 0x0e
    3436:	b7 86       	std	Z+15, r11	; 0x0f
   ki = Ki * SampleTimeInSec;
    3438:	be 01       	movw	r22, r28
    343a:	98 2f       	mov	r25, r24
    343c:	27 2f       	mov	r18, r23
    343e:	36 2f       	mov	r19, r22
    3440:	49 2f       	mov	r20, r25
    3442:	51 2f       	mov	r21, r17
    3444:	c3 01       	movw	r24, r6
    3446:	b2 01       	movw	r22, r4
    3448:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    344c:	2b 01       	movw	r4, r22
    344e:	3c 01       	movw	r6, r24
    3450:	98 2f       	mov	r25, r24
    3452:	44 2d       	mov	r20, r4
    3454:	55 2d       	mov	r21, r5
    3456:	69 2f       	mov	r22, r25
    3458:	77 2d       	mov	r23, r7
    345a:	f1 01       	movw	r30, r2
    345c:	40 8b       	std	Z+16, r20	; 0x10
    345e:	51 8b       	std	Z+17, r21	; 0x11
    3460:	62 8b       	std	Z+18, r22	; 0x12
    3462:	73 8b       	std	Z+19, r23	; 0x13
   kd = Kd / SampleTimeInSec;
    3464:	be 01       	movw	r22, r28
    3466:	27 2f       	mov	r18, r23
    3468:	36 2f       	mov	r19, r22
    346a:	40 2f       	mov	r20, r16
    346c:	51 2f       	mov	r21, r17
    346e:	c7 01       	movw	r24, r14
    3470:	b6 01       	movw	r22, r12
    3472:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <__divsf3>
    3476:	7b 01       	movw	r14, r22
    3478:	d8 2f       	mov	r29, r24
    347a:	c9 2f       	mov	r28, r25
    347c:	ce 01       	movw	r24, r28
    347e:	0e 2d       	mov	r16, r14
    3480:	1f 2d       	mov	r17, r15
    3482:	29 2f       	mov	r18, r25
    3484:	38 2f       	mov	r19, r24
    3486:	f1 01       	movw	r30, r2
    3488:	04 8b       	std	Z+20, r16	; 0x14
    348a:	15 8b       	std	Z+21, r17	; 0x15
    348c:	26 8b       	std	Z+22, r18	; 0x16
    348e:	37 8b       	std	Z+23, r19	; 0x17
 
  if(controllerDirection ==REVERSE)
    3490:	80 8d       	ldd	r24, Z+24	; 0x18
    3492:	91 8d       	ldd	r25, Z+25	; 0x19
    3494:	01 97       	sbiw	r24, 0x01	; 1
    3496:	49 f5       	brne	.+82     	; 0x34ea <_ZN3PID10SetTuningsEddd+0x15c>
   {
      kp = (0 - kp);
    3498:	a5 01       	movw	r20, r10
    349a:	94 01       	movw	r18, r8
    349c:	60 e0       	ldi	r22, 0x00	; 0
    349e:	70 e0       	ldi	r23, 0x00	; 0
    34a0:	cb 01       	movw	r24, r22
    34a2:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    34a6:	f1 01       	movw	r30, r2
    34a8:	64 87       	std	Z+12, r22	; 0x0c
    34aa:	75 87       	std	Z+13, r23	; 0x0d
    34ac:	86 87       	std	Z+14, r24	; 0x0e
    34ae:	97 87       	std	Z+15, r25	; 0x0f
      ki = (0 - ki);
    34b0:	24 2d       	mov	r18, r4
    34b2:	35 2d       	mov	r19, r5
    34b4:	46 2d       	mov	r20, r6
    34b6:	57 2d       	mov	r21, r7
    34b8:	60 e0       	ldi	r22, 0x00	; 0
    34ba:	70 e0       	ldi	r23, 0x00	; 0
    34bc:	cb 01       	movw	r24, r22
    34be:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    34c2:	f1 01       	movw	r30, r2
    34c4:	60 8b       	std	Z+16, r22	; 0x10
    34c6:	71 8b       	std	Z+17, r23	; 0x11
    34c8:	82 8b       	std	Z+18, r24	; 0x12
    34ca:	93 8b       	std	Z+19, r25	; 0x13
      kd = (0 - kd);
    34cc:	ce 01       	movw	r24, r28
    34ce:	20 2f       	mov	r18, r16
    34d0:	31 2f       	mov	r19, r17
    34d2:	49 2f       	mov	r20, r25
    34d4:	58 2f       	mov	r21, r24
    34d6:	60 e0       	ldi	r22, 0x00	; 0
    34d8:	70 e0       	ldi	r23, 0x00	; 0
    34da:	cb 01       	movw	r24, r22
    34dc:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    34e0:	f1 01       	movw	r30, r2
    34e2:	64 8b       	std	Z+20, r22	; 0x14
    34e4:	75 8b       	std	Z+21, r23	; 0x15
    34e6:	86 8b       	std	Z+22, r24	; 0x16
    34e8:	97 8b       	std	Z+23, r25	; 0x17
   }
}
    34ea:	df 91       	pop	r29
    34ec:	cf 91       	pop	r28
    34ee:	1f 91       	pop	r17
    34f0:	0f 91       	pop	r16
    34f2:	ff 90       	pop	r15
    34f4:	ef 90       	pop	r14
    34f6:	df 90       	pop	r13
    34f8:	cf 90       	pop	r12
    34fa:	bf 90       	pop	r11
    34fc:	af 90       	pop	r10
    34fe:	9f 90       	pop	r9
    3500:	8f 90       	pop	r8
    3502:	7f 90       	pop	r7
    3504:	6f 90       	pop	r6
    3506:	5f 90       	pop	r5
    3508:	4f 90       	pop	r4
    350a:	3f 90       	pop	r3
    350c:	2f 90       	pop	r2
    350e:	08 95       	ret

00003510 <_ZN3PID13SetSampleTimeEi>:
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
    3510:	cf 92       	push	r12
    3512:	df 92       	push	r13
    3514:	ef 92       	push	r14
    3516:	ff 92       	push	r15
    3518:	0f 93       	push	r16
    351a:	1f 93       	push	r17
    351c:	cf 93       	push	r28
    351e:	df 93       	push	r29
    3520:	ec 01       	movw	r28, r24
    3522:	8b 01       	movw	r16, r22
   if (NewSampleTime > 0)
    3524:	16 16       	cp	r1, r22
    3526:	17 06       	cpc	r1, r23
    3528:	bc f5       	brge	.+110    	; 0x3598 <_ZN3PID13SetSampleTimeEi+0x88>
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
    352a:	88 27       	eor	r24, r24
    352c:	77 fd       	sbrc	r23, 7
    352e:	80 95       	com	r24
    3530:	98 2f       	mov	r25, r24
    3532:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__floatsisf>
    3536:	6b 01       	movw	r12, r22
    3538:	7c 01       	movw	r14, r24
    353a:	6c a5       	ldd	r22, Y+44	; 0x2c
    353c:	7d a5       	ldd	r23, Y+45	; 0x2d
    353e:	88 27       	eor	r24, r24
    3540:	77 fd       	sbrc	r23, 7
    3542:	80 95       	com	r24
    3544:	98 2f       	mov	r25, r24
    3546:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__floatsisf>
    354a:	9b 01       	movw	r18, r22
    354c:	ac 01       	movw	r20, r24
    354e:	c7 01       	movw	r24, r14
    3550:	b6 01       	movw	r22, r12
    3552:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <__divsf3>
    3556:	6b 01       	movw	r12, r22
    3558:	7c 01       	movw	r14, r24
      ki *= ratio;
    355a:	76 2f       	mov	r23, r22
    355c:	27 2f       	mov	r18, r23
    355e:	3d 2d       	mov	r19, r13
    3560:	4e 2d       	mov	r20, r14
    3562:	5f 2d       	mov	r21, r15
    3564:	68 89       	ldd	r22, Y+16	; 0x10
    3566:	79 89       	ldd	r23, Y+17	; 0x11
    3568:	8a 89       	ldd	r24, Y+18	; 0x12
    356a:	9b 89       	ldd	r25, Y+19	; 0x13
    356c:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    3570:	68 8b       	std	Y+16, r22	; 0x10
    3572:	79 8b       	std	Y+17, r23	; 0x11
    3574:	8a 8b       	std	Y+18, r24	; 0x12
    3576:	9b 8b       	std	Y+19, r25	; 0x13
      kd /= ratio;
    3578:	2c 2d       	mov	r18, r12
    357a:	3d 2d       	mov	r19, r13
    357c:	4e 2d       	mov	r20, r14
    357e:	5f 2d       	mov	r21, r15
    3580:	6c 89       	ldd	r22, Y+20	; 0x14
    3582:	7d 89       	ldd	r23, Y+21	; 0x15
    3584:	8e 89       	ldd	r24, Y+22	; 0x16
    3586:	9f 89       	ldd	r25, Y+23	; 0x17
    3588:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <__divsf3>
    358c:	6c 8b       	std	Y+20, r22	; 0x14
    358e:	7d 8b       	std	Y+21, r23	; 0x15
    3590:	8e 8b       	std	Y+22, r24	; 0x16
    3592:	9f 8b       	std	Y+23, r25	; 0x17
      SampleTime = (unsigned long)NewSampleTime;
    3594:	1d a7       	std	Y+45, r17	; 0x2d
    3596:	0c a7       	std	Y+44, r16	; 0x2c
   }
}
    3598:	df 91       	pop	r29
    359a:	cf 91       	pop	r28
    359c:	1f 91       	pop	r17
    359e:	0f 91       	pop	r16
    35a0:	ff 90       	pop	r15
    35a2:	ef 90       	pop	r14
    35a4:	df 90       	pop	r13
    35a6:	cf 90       	pop	r12
    35a8:	08 95       	ret

000035aa <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
    35aa:	4f 92       	push	r4
    35ac:	5f 92       	push	r5
    35ae:	6f 92       	push	r6
    35b0:	7f 92       	push	r7
    35b2:	8f 92       	push	r8
    35b4:	9f 92       	push	r9
    35b6:	af 92       	push	r10
    35b8:	bf 92       	push	r11
    35ba:	cf 92       	push	r12
    35bc:	df 92       	push	r13
    35be:	ef 92       	push	r14
    35c0:	ff 92       	push	r15
    35c2:	0f 93       	push	r16
    35c4:	1f 93       	push	r17
    35c6:	cf 93       	push	r28
    35c8:	df 93       	push	r29
    35ca:	ec 01       	movw	r28, r24
    35cc:	6a 01       	movw	r12, r20
    35ce:	7b 01       	movw	r14, r22
    35d0:	48 01       	movw	r8, r16
    35d2:	59 01       	movw	r10, r18
   if(Min >= Max) return;
    35d4:	a9 01       	movw	r20, r18
    35d6:	98 01       	movw	r18, r16
    35d8:	c7 01       	movw	r24, r14
    35da:	b6 01       	movw	r22, r12
    35dc:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    35e0:	87 ff       	sbrs	r24, 7
    35e2:	4f c0       	rjmp	.+158    	; 0x3682 <_ZN3PID15SetOutputLimitsEdd+0xd8>
   outMin = Min;
    35e4:	ce a6       	std	Y+46, r12	; 0x2e
    35e6:	df a6       	std	Y+47, r13	; 0x2f
    35e8:	e8 aa       	std	Y+48, r14	; 0x30
    35ea:	f9 aa       	std	Y+49, r15	; 0x31
   outMax = Max;
    35ec:	8a aa       	std	Y+50, r8	; 0x32
    35ee:	9b aa       	std	Y+51, r9	; 0x33
    35f0:	ac aa       	std	Y+52, r10	; 0x34
    35f2:	bd aa       	std	Y+53, r11	; 0x35
 
   if(inAuto)
    35f4:	8e a9       	ldd	r24, Y+54	; 0x36
    35f6:	88 23       	and	r24, r24
    35f8:	09 f4       	brne	.+2      	; 0x35fc <_ZN3PID15SetOutputLimitsEdd+0x52>
    35fa:	43 c0       	rjmp	.+134    	; 0x3682 <_ZN3PID15SetOutputLimitsEdd+0xd8>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    35fc:	0c 8d       	ldd	r16, Y+28	; 0x1c
    35fe:	1d 8d       	ldd	r17, Y+29	; 0x1d
    3600:	f8 01       	movw	r30, r16
    3602:	40 80       	ld	r4, Z
    3604:	51 80       	ldd	r5, Z+1	; 0x01
    3606:	62 80       	ldd	r6, Z+2	; 0x02
    3608:	73 80       	ldd	r7, Z+3	; 0x03
    360a:	a5 01       	movw	r20, r10
    360c:	94 01       	movw	r18, r8
    360e:	c3 01       	movw	r24, r6
    3610:	b2 01       	movw	r22, r4
    3612:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    3616:	18 16       	cp	r1, r24
    3618:	34 f4       	brge	.+12     	; 0x3626 <_ZN3PID15SetOutputLimitsEdd+0x7c>
    361a:	f8 01       	movw	r30, r16
    361c:	80 82       	st	Z, r8
    361e:	91 82       	std	Z+1, r9	; 0x01
    3620:	a2 82       	std	Z+2, r10	; 0x02
    3622:	b3 82       	std	Z+3, r11	; 0x03
    3624:	0d c0       	rjmp	.+26     	; 0x3640 <_ZN3PID15SetOutputLimitsEdd+0x96>
	   else if(*myOutput < outMin) *myOutput = outMin;
    3626:	a7 01       	movw	r20, r14
    3628:	96 01       	movw	r18, r12
    362a:	c3 01       	movw	r24, r6
    362c:	b2 01       	movw	r22, r4
    362e:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    3632:	87 ff       	sbrs	r24, 7
    3634:	05 c0       	rjmp	.+10     	; 0x3640 <_ZN3PID15SetOutputLimitsEdd+0x96>
    3636:	f8 01       	movw	r30, r16
    3638:	c0 82       	st	Z, r12
    363a:	d1 82       	std	Z+1, r13	; 0x01
    363c:	e2 82       	std	Z+2, r14	; 0x02
    363e:	f3 82       	std	Z+3, r15	; 0x03
	 
	   if(ITerm > outMax) ITerm= outMax;
    3640:	8c a0       	ldd	r8, Y+36	; 0x24
    3642:	9d a0       	ldd	r9, Y+37	; 0x25
    3644:	ae a0       	ldd	r10, Y+38	; 0x26
    3646:	bf a0       	ldd	r11, Y+39	; 0x27
    3648:	ca a8       	ldd	r12, Y+50	; 0x32
    364a:	db a8       	ldd	r13, Y+51	; 0x33
    364c:	ec a8       	ldd	r14, Y+52	; 0x34
    364e:	fd a8       	ldd	r15, Y+53	; 0x35
    3650:	a7 01       	movw	r20, r14
    3652:	96 01       	movw	r18, r12
    3654:	c5 01       	movw	r24, r10
    3656:	b4 01       	movw	r22, r8
    3658:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    365c:	18 16       	cp	r1, r24
    365e:	0c f4       	brge	.+2      	; 0x3662 <_ZN3PID15SetOutputLimitsEdd+0xb8>
    3660:	0c c0       	rjmp	.+24     	; 0x367a <_ZN3PID15SetOutputLimitsEdd+0xd0>
	   else if(ITerm < outMin) ITerm= outMin;
    3662:	ce a4       	ldd	r12, Y+46	; 0x2e
    3664:	df a4       	ldd	r13, Y+47	; 0x2f
    3666:	e8 a8       	ldd	r14, Y+48	; 0x30
    3668:	f9 a8       	ldd	r15, Y+49	; 0x31
    366a:	a7 01       	movw	r20, r14
    366c:	96 01       	movw	r18, r12
    366e:	c5 01       	movw	r24, r10
    3670:	b4 01       	movw	r22, r8
    3672:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    3676:	87 ff       	sbrs	r24, 7
    3678:	04 c0       	rjmp	.+8      	; 0x3682 <_ZN3PID15SetOutputLimitsEdd+0xd8>
    367a:	cc a2       	std	Y+36, r12	; 0x24
    367c:	dd a2       	std	Y+37, r13	; 0x25
    367e:	ee a2       	std	Y+38, r14	; 0x26
    3680:	ff a2       	std	Y+39, r15	; 0x27
   }
}
    3682:	df 91       	pop	r29
    3684:	cf 91       	pop	r28
    3686:	1f 91       	pop	r17
    3688:	0f 91       	pop	r16
    368a:	ff 90       	pop	r15
    368c:	ef 90       	pop	r14
    368e:	df 90       	pop	r13
    3690:	cf 90       	pop	r12
    3692:	bf 90       	pop	r11
    3694:	af 90       	pop	r10
    3696:	9f 90       	pop	r9
    3698:	8f 90       	pop	r8
    369a:	7f 90       	pop	r7
    369c:	6f 90       	pop	r6
    369e:	5f 90       	pop	r5
    36a0:	4f 90       	pop	r4
    36a2:	08 95       	ret

000036a4 <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
    36a4:	8f 92       	push	r8
    36a6:	9f 92       	push	r9
    36a8:	af 92       	push	r10
    36aa:	bf 92       	push	r11
    36ac:	cf 92       	push	r12
    36ae:	df 92       	push	r13
    36b0:	ef 92       	push	r14
    36b2:	ff 92       	push	r15
    36b4:	cf 93       	push	r28
    36b6:	df 93       	push	r29
    36b8:	ec 01       	movw	r28, r24
   ITerm = *myOutput;
    36ba:	ec 8d       	ldd	r30, Y+28	; 0x1c
    36bc:	fd 8d       	ldd	r31, Y+29	; 0x1d
    36be:	c0 80       	ld	r12, Z
    36c0:	d1 80       	ldd	r13, Z+1	; 0x01
    36c2:	e2 80       	ldd	r14, Z+2	; 0x02
    36c4:	f3 80       	ldd	r15, Z+3	; 0x03
    36c6:	cc a2       	std	Y+36, r12	; 0x24
    36c8:	dd a2       	std	Y+37, r13	; 0x25
    36ca:	ee a2       	std	Y+38, r14	; 0x26
    36cc:	ff a2       	std	Y+39, r15	; 0x27
   lastInput = *myInput;
    36ce:	ea 8d       	ldd	r30, Y+26	; 0x1a
    36d0:	fb 8d       	ldd	r31, Y+27	; 0x1b
    36d2:	40 81       	ld	r20, Z
    36d4:	51 81       	ldd	r21, Z+1	; 0x01
    36d6:	62 81       	ldd	r22, Z+2	; 0x02
    36d8:	73 81       	ldd	r23, Z+3	; 0x03
    36da:	48 a7       	std	Y+40, r20	; 0x28
    36dc:	59 a7       	std	Y+41, r21	; 0x29
    36de:	6a a7       	std	Y+42, r22	; 0x2a
    36e0:	7b a7       	std	Y+43, r23	; 0x2b
   if(ITerm > outMax) ITerm = outMax;
    36e2:	8a a8       	ldd	r8, Y+50	; 0x32
    36e4:	9b a8       	ldd	r9, Y+51	; 0x33
    36e6:	ac a8       	ldd	r10, Y+52	; 0x34
    36e8:	bd a8       	ldd	r11, Y+53	; 0x35
    36ea:	a5 01       	movw	r20, r10
    36ec:	94 01       	movw	r18, r8
    36ee:	c7 01       	movw	r24, r14
    36f0:	b6 01       	movw	r22, r12
    36f2:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    36f6:	18 16       	cp	r1, r24
    36f8:	0c f4       	brge	.+2      	; 0x36fc <_ZN3PID10InitializeEv+0x58>
    36fa:	0c c0       	rjmp	.+24     	; 0x3714 <_ZN3PID10InitializeEv+0x70>
   else if(ITerm < outMin) ITerm = outMin;
    36fc:	8e a4       	ldd	r8, Y+46	; 0x2e
    36fe:	9f a4       	ldd	r9, Y+47	; 0x2f
    3700:	a8 a8       	ldd	r10, Y+48	; 0x30
    3702:	b9 a8       	ldd	r11, Y+49	; 0x31
    3704:	a5 01       	movw	r20, r10
    3706:	94 01       	movw	r18, r8
    3708:	c7 01       	movw	r24, r14
    370a:	b6 01       	movw	r22, r12
    370c:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    3710:	87 ff       	sbrs	r24, 7
    3712:	04 c0       	rjmp	.+8      	; 0x371c <_ZN3PID10InitializeEv+0x78>
    3714:	8c a2       	std	Y+36, r8	; 0x24
    3716:	9d a2       	std	Y+37, r9	; 0x25
    3718:	ae a2       	std	Y+38, r10	; 0x26
    371a:	bf a2       	std	Y+39, r11	; 0x27
}
    371c:	df 91       	pop	r29
    371e:	cf 91       	pop	r28
    3720:	ff 90       	pop	r15
    3722:	ef 90       	pop	r14
    3724:	df 90       	pop	r13
    3726:	cf 90       	pop	r12
    3728:	bf 90       	pop	r11
    372a:	af 90       	pop	r10
    372c:	9f 90       	pop	r9
    372e:	8f 90       	pop	r8
    3730:	08 95       	ret

00003732 <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/ 
void PID::SetMode(int Mode)
{
    3732:	1f 93       	push	r17
    3734:	cf 93       	push	r28
    3736:	df 93       	push	r29
    3738:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    373a:	11 e0       	ldi	r17, 0x01	; 1
    373c:	61 30       	cpi	r22, 0x01	; 1
    373e:	71 05       	cpc	r23, r1
    3740:	09 f0       	breq	.+2      	; 0x3744 <_ZN3PID7SetModeEi+0x12>
    3742:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto == !inAuto)
    3744:	8e a9       	ldd	r24, Y+54	; 0x36
    3746:	91 e0       	ldi	r25, 0x01	; 1
    3748:	89 27       	eor	r24, r25
    374a:	18 13       	cpse	r17, r24
    374c:	03 c0       	rjmp	.+6      	; 0x3754 <_ZN3PID7SetModeEi+0x22>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    374e:	ce 01       	movw	r24, r28
    3750:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    3754:	1e ab       	std	Y+54, r17	; 0x36
}
    3756:	df 91       	pop	r29
    3758:	cf 91       	pop	r28
    375a:	1f 91       	pop	r17
    375c:	08 95       	ret

0000375e <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    375e:	0f 93       	push	r16
    3760:	1f 93       	push	r17
    3762:	cf 93       	push	r28
    3764:	df 93       	push	r29
    3766:	ec 01       	movw	r28, r24
    3768:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    376a:	8e a9       	ldd	r24, Y+54	; 0x36
    376c:	88 23       	and	r24, r24
    376e:	61 f1       	breq	.+88     	; 0x37c8 <_ZN3PID22SetControllerDirectionEi+0x6a>
    3770:	88 8d       	ldd	r24, Y+24	; 0x18
    3772:	99 8d       	ldd	r25, Y+25	; 0x19
    3774:	68 17       	cp	r22, r24
    3776:	79 07       	cpc	r23, r25
    3778:	39 f1       	breq	.+78     	; 0x37c8 <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	  kp = (0 - kp);
    377a:	2c 85       	ldd	r18, Y+12	; 0x0c
    377c:	3d 85       	ldd	r19, Y+13	; 0x0d
    377e:	4e 85       	ldd	r20, Y+14	; 0x0e
    3780:	5f 85       	ldd	r21, Y+15	; 0x0f
    3782:	60 e0       	ldi	r22, 0x00	; 0
    3784:	70 e0       	ldi	r23, 0x00	; 0
    3786:	cb 01       	movw	r24, r22
    3788:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    378c:	6c 87       	std	Y+12, r22	; 0x0c
    378e:	7d 87       	std	Y+13, r23	; 0x0d
    3790:	8e 87       	std	Y+14, r24	; 0x0e
    3792:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    3794:	28 89       	ldd	r18, Y+16	; 0x10
    3796:	39 89       	ldd	r19, Y+17	; 0x11
    3798:	4a 89       	ldd	r20, Y+18	; 0x12
    379a:	5b 89       	ldd	r21, Y+19	; 0x13
    379c:	60 e0       	ldi	r22, 0x00	; 0
    379e:	70 e0       	ldi	r23, 0x00	; 0
    37a0:	cb 01       	movw	r24, r22
    37a2:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    37a6:	68 8b       	std	Y+16, r22	; 0x10
    37a8:	79 8b       	std	Y+17, r23	; 0x11
    37aa:	8a 8b       	std	Y+18, r24	; 0x12
    37ac:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    37ae:	2c 89       	ldd	r18, Y+20	; 0x14
    37b0:	3d 89       	ldd	r19, Y+21	; 0x15
    37b2:	4e 89       	ldd	r20, Y+22	; 0x16
    37b4:	5f 89       	ldd	r21, Y+23	; 0x17
    37b6:	60 e0       	ldi	r22, 0x00	; 0
    37b8:	70 e0       	ldi	r23, 0x00	; 0
    37ba:	cb 01       	movw	r24, r22
    37bc:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    37c0:	6c 8b       	std	Y+20, r22	; 0x14
    37c2:	7d 8b       	std	Y+21, r23	; 0x15
    37c4:	8e 8b       	std	Y+22, r24	; 0x16
    37c6:	9f 8b       	std	Y+23, r25	; 0x17
   }   
   controllerDirection = Direction;
    37c8:	19 8f       	std	Y+25, r17	; 0x19
    37ca:	08 8f       	std	Y+24, r16	; 0x18
}
    37cc:	df 91       	pop	r29
    37ce:	cf 91       	pop	r28
    37d0:	1f 91       	pop	r17
    37d2:	0f 91       	pop	r16
    37d4:	08 95       	ret

000037d6 <_ZN3PIDC1EPdS0_S0_dddi>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    37d6:	2f 92       	push	r2
    37d8:	3f 92       	push	r3
    37da:	4f 92       	push	r4
    37dc:	5f 92       	push	r5
    37de:	6f 92       	push	r6
    37e0:	7f 92       	push	r7
    37e2:	8f 92       	push	r8
    37e4:	9f 92       	push	r9
    37e6:	af 92       	push	r10
    37e8:	bf 92       	push	r11
    37ea:	cf 92       	push	r12
    37ec:	df 92       	push	r13
    37ee:	ef 92       	push	r14
    37f0:	ff 92       	push	r15
    37f2:	0f 93       	push	r16
    37f4:	1f 93       	push	r17
    37f6:	cf 93       	push	r28
    37f8:	df 93       	push	r29
    37fa:	00 d0       	rcall	.+0      	; 0x37fc <_ZN3PIDC1EPdS0_S0_dddi+0x26>
    37fc:	00 d0       	rcall	.+0      	; 0x37fe <_ZN3PIDC1EPdS0_S0_dddi+0x28>
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62
    3802:	1c 01       	movw	r2, r24
    3804:	7a 83       	std	Y+2, r23	; 0x02
    3806:	69 83       	std	Y+1, r22	; 0x01
    3808:	5c 83       	std	Y+4, r21	; 0x04
    380a:	4b 83       	std	Y+3, r20	; 0x03
    380c:	3e 83       	std	Y+6, r19	; 0x06
    380e:	2d 83       	std	Y+5, r18	; 0x05
    3810:	27 01       	movw	r4, r14
    3812:	38 01       	movw	r6, r16
    3814:	45 01       	movw	r8, r10
    3816:	56 01       	movw	r10, r12
        double Kp, double Ki, double Kd, int ControllerDirection)
{
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
    3818:	00 e0       	ldi	r16, 0x00	; 0
    381a:	10 e0       	ldi	r17, 0x00	; 0
    381c:	2f e7       	ldi	r18, 0x7F	; 127
    381e:	33 e4       	ldi	r19, 0x43	; 67
    3820:	40 e0       	ldi	r20, 0x00	; 0
    3822:	50 e0       	ldi	r21, 0x00	; 0
    3824:	ba 01       	movw	r22, r20
    3826:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZN3PID15SetOutputLimitsEdd>
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    382a:	84 e6       	ldi	r24, 0x64	; 100
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	f1 01       	movw	r30, r2
    3830:	95 a7       	std	Z+45, r25	; 0x2d
    3832:	84 a7       	std	Z+44, r24	; 0x2c

    PID::SetControllerDirection(ControllerDirection);
    3834:	68 a1       	ldd	r22, Y+32	; 0x20
    3836:	79 a1       	ldd	r23, Y+33	; 0x21
    3838:	c1 01       	movw	r24, r2
    383a:	0e 94 af 1b 	call	0x375e	; 0x375e <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd);
    383e:	cc 8c       	ldd	r12, Y+28	; 0x1c
    3840:	dd 8c       	ldd	r13, Y+29	; 0x1d
    3842:	ee 8c       	ldd	r14, Y+30	; 0x1e
    3844:	ff 8c       	ldd	r15, Y+31	; 0x1f
    3846:	95 01       	movw	r18, r10
    3848:	84 01       	movw	r16, r8
    384a:	b3 01       	movw	r22, r6
    384c:	a2 01       	movw	r20, r4
    384e:	c1 01       	movw	r24, r2
    3850:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN3PID10SetTuningsEddd>

    lastTime = millis()-SampleTime;				
    3854:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <millis>
    3858:	f1 01       	movw	r30, r2
    385a:	84 a4       	ldd	r8, Z+44	; 0x2c
    385c:	95 a4       	ldd	r9, Z+45	; 0x2d
    385e:	aa 24       	eor	r10, r10
    3860:	97 fc       	sbrc	r9, 7
    3862:	a0 94       	com	r10
    3864:	ba 2c       	mov	r11, r10
    3866:	68 19       	sub	r22, r8
    3868:	79 09       	sbc	r23, r9
    386a:	8a 09       	sbc	r24, r10
    386c:	9b 09       	sbc	r25, r11
    386e:	60 a3       	std	Z+32, r22	; 0x20
    3870:	71 a3       	std	Z+33, r23	; 0x21
    3872:	82 a3       	std	Z+34, r24	; 0x22
    3874:	93 a3       	std	Z+35, r25	; 0x23
    inAuto = false;
    3876:	16 aa       	std	Z+54, r1	; 0x36
    myOutput = Output;
    3878:	8b 81       	ldd	r24, Y+3	; 0x03
    387a:	9c 81       	ldd	r25, Y+4	; 0x04
    387c:	95 8f       	std	Z+29, r25	; 0x1d
    387e:	84 8f       	std	Z+28, r24	; 0x1c
    myInput = Input;
    3880:	89 81       	ldd	r24, Y+1	; 0x01
    3882:	9a 81       	ldd	r25, Y+2	; 0x02
    3884:	93 8f       	std	Z+27, r25	; 0x1b
    3886:	82 8f       	std	Z+26, r24	; 0x1a
    mySetpoint = Setpoint;
    3888:	8d 81       	ldd	r24, Y+5	; 0x05
    388a:	9e 81       	ldd	r25, Y+6	; 0x06
    388c:	97 8f       	std	Z+31, r25	; 0x1f
    388e:	86 8f       	std	Z+30, r24	; 0x1e
		
}
    3890:	26 96       	adiw	r28, 0x06	; 6
    3892:	0f b6       	in	r0, 0x3f	; 63
    3894:	f8 94       	cli
    3896:	de bf       	out	0x3e, r29	; 62
    3898:	0f be       	out	0x3f, r0	; 63
    389a:	cd bf       	out	0x3d, r28	; 61
    389c:	df 91       	pop	r29
    389e:	cf 91       	pop	r28
    38a0:	1f 91       	pop	r17
    38a2:	0f 91       	pop	r16
    38a4:	ff 90       	pop	r15
    38a6:	ef 90       	pop	r14
    38a8:	df 90       	pop	r13
    38aa:	cf 90       	pop	r12
    38ac:	bf 90       	pop	r11
    38ae:	af 90       	pop	r10
    38b0:	9f 90       	pop	r9
    38b2:	8f 90       	pop	r8
    38b4:	7f 90       	pop	r7
    38b6:	6f 90       	pop	r6
    38b8:	5f 90       	pop	r5
    38ba:	4f 90       	pop	r4
    38bc:	3f 90       	pop	r3
    38be:	2f 90       	pop	r2
    38c0:	08 95       	ret

000038c2 <_ZN4NMEAC1Ei>:

//
// constructor method
//

NMEA::NMEA(int connect)
    38c2:	0f 93       	push	r16
    38c4:	1f 93       	push	r17
    38c6:	cf 93       	push	r28
    38c8:	df 93       	push	r29
    38ca:	fc 01       	movw	r30, r24
{
	// private properties
	_gprmc_only = connect;
    38cc:	71 83       	std	Z+1, r23	; 0x01
    38ce:	60 83       	st	Z, r22
	_gprmc_utc = 0.0;
    38d0:	12 82       	std	Z+2, r1	; 0x02
    38d2:	13 82       	std	Z+3, r1	; 0x03
    38d4:	14 82       	std	Z+4, r1	; 0x04
    38d6:	15 82       	std	Z+5, r1	; 0x05
	_gprmc_status = 'V';
    38d8:	86 e5       	ldi	r24, 0x56	; 86
    38da:	86 83       	std	Z+6, r24	; 0x06
	_gprmc_lat = 0.0;
    38dc:	17 82       	std	Z+7, r1	; 0x07
    38de:	10 86       	std	Z+8, r1	; 0x08
    38e0:	11 86       	std	Z+9, r1	; 0x09
    38e2:	12 86       	std	Z+10, r1	; 0x0a
	_gprmc_long = 0.0;
    38e4:	13 86       	std	Z+11, r1	; 0x0b
    38e6:	14 86       	std	Z+12, r1	; 0x0c
    38e8:	15 86       	std	Z+13, r1	; 0x0d
    38ea:	16 86       	std	Z+14, r1	; 0x0e
	_gprmc_speed = 0.0;
    38ec:	17 86       	std	Z+15, r1	; 0x0f
    38ee:	10 8a       	std	Z+16, r1	; 0x10
    38f0:	11 8a       	std	Z+17, r1	; 0x11
    38f2:	12 8a       	std	Z+18, r1	; 0x12
	_gprmc_angle = 0.0;
    38f4:	13 8a       	std	Z+19, r1	; 0x13
    38f6:	14 8a       	std	Z+20, r1	; 0x14
    38f8:	15 8a       	std	Z+21, r1	; 0x15
    38fa:	16 8a       	std	Z+22, r1	; 0x16
	_terms = 0;
    38fc:	df 01       	movw	r26, r30
    38fe:	a7 54       	subi	r26, 0x47	; 71
    3900:	bf 4f       	sbci	r27, 0xFF	; 255
    3902:	1d 92       	st	X+, r1
    3904:	1c 92       	st	X, r1
	n = 0;
    3906:	df 01       	movw	r26, r30
    3908:	a5 5a       	subi	r26, 0xA5	; 165
    390a:	be 4f       	sbci	r27, 0xFE	; 254
    390c:	1d 92       	st	X+, r1
    390e:	1c 92       	st	X, r1
	_state = 0;
    3910:	df 01       	movw	r26, r30
    3912:	a1 5a       	subi	r26, 0xA1	; 161
    3914:	be 4f       	sbci	r27, 0xFE	; 254
    3916:	1d 92       	st	X+, r1
    3918:	1c 92       	st	X, r1
	_parity = 0;
    391a:	df 01       	movw	r26, r30
    391c:	af 59       	subi	r26, 0x9F	; 159
    391e:	be 4f       	sbci	r27, 0xFE	; 254
    3920:	1d 92       	st	X+, r1
    3922:	1c 92       	st	X, r1
	_nt = 0;
    3924:	df 01       	movw	r26, r30
    3926:	ad 59       	subi	r26, 0x9D	; 157
    3928:	be 4f       	sbci	r27, 0xFE	; 254
    392a:	1d 92       	st	X+, r1
    392c:	1c 92       	st	X, r1

	f_sentence[0] = 0;
    392e:	17 8a       	std	Z+23, r1	; 0x17
	f_terms = 0;
    3930:	df 01       	movw	r26, r30
    3932:	a9 54       	subi	r26, 0x49	; 73
    3934:	bf 4f       	sbci	r27, 0xFF	; 255
    3936:	1d 92       	st	X+, r1
    3938:	1c 92       	st	X, r1
    393a:	ef 01       	movw	r28, r30
    393c:	0e e1       	ldi	r16, 0x1E	; 30
    393e:	10 e0       	ldi	r17, 0x00	; 0
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
    3940:	8f e0       	ldi	r24, 0x0F	; 15
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	0e 94 8a 13 	call	0x2714	; 0x2714 <malloc>

//
// constructor method
//

NMEA::NMEA(int connect)
    3948:	fe 01       	movw	r30, r28
    394a:	e1 5e       	subi	r30, 0xE1	; 225
    394c:	fe 4f       	sbci	r31, 0xFE	; 254

	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
    394e:	80 83       	st	Z, r24
    3950:	91 83       	std	Z+1, r25	; 0x01
    f_term[t] = (char*) malloc (15 * sizeof(char));
    3952:	8f e0       	ldi	r24, 0x0F	; 15
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	0e 94 8a 13 	call	0x2714	; 0x2714 <malloc>
    395a:	fc 01       	movw	r30, r24

//
// constructor method
//

NMEA::NMEA(int connect)
    395c:	de 01       	movw	r26, r28
    395e:	a5 58       	subi	r26, 0x85	; 133
    3960:	bf 4f       	sbci	r27, 0xFF	; 255
	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
    f_term[t] = (char*) malloc (15 * sizeof(char));
    3962:	8d 93       	st	X+, r24
    3964:	9c 93       	st	X, r25
    (f_term[t])[0] = 0;
    3966:	10 82       	st	Z, r1
    3968:	01 50       	subi	r16, 0x01	; 1
    396a:	11 09       	sbc	r17, r1
    396c:	22 96       	adiw	r28, 0x02	; 2
	_nt = 0;

	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    396e:	01 15       	cp	r16, r1
    3970:	11 05       	cpc	r17, r1
    3972:	31 f7       	brne	.-52     	; 0x3940 <_ZN4NMEAC1Ei+0x7e>
    _term[t] = (char*) malloc (15 * sizeof(char));
    f_term[t] = (char*) malloc (15 * sizeof(char));
    (f_term[t])[0] = 0;
  }
}
    3974:	df 91       	pop	r29
    3976:	cf 91       	pop	r28
    3978:	1f 91       	pop	r17
    397a:	0f 91       	pop	r16
    397c:	08 95       	ret

0000397e <_ZN4NMEA9gprmc_utcEv>:
    break;
  }
  return 0;
}

float NMEA::gprmc_utc() {
    397e:	fc 01       	movw	r30, r24
	// returns decimal value of UTC term of last-known GPRMC sentence
	return _gprmc_utc;
}
    3980:	52 81       	ldd	r21, Z+2	; 0x02
    3982:	43 81       	ldd	r20, Z+3	; 0x03
    3984:	34 81       	ldd	r19, Z+4	; 0x04
    3986:	25 81       	ldd	r18, Z+5	; 0x05
    3988:	65 2f       	mov	r22, r21
    398a:	74 2f       	mov	r23, r20
    398c:	83 2f       	mov	r24, r19
    398e:	92 2f       	mov	r25, r18
    3990:	08 95       	ret

00003992 <_ZN4NMEA12gprmc_statusEv>:

char NMEA::gprmc_status() {
	// returns status character of last-known GPRMC sentence ('A' or 'V')
	return _gprmc_status;
}
    3992:	fc 01       	movw	r30, r24
    3994:	86 81       	ldd	r24, Z+6	; 0x06
    3996:	08 95       	ret

00003998 <_ZN4NMEA14gprmc_latitudeEv>:

float NMEA::gprmc_latitude() {
    3998:	fc 01       	movw	r30, r24
	// returns signed degree-decimal latitude value of last-known GPRMC position
	return _gprmc_lat;
}
    399a:	57 81       	ldd	r21, Z+7	; 0x07
    399c:	40 85       	ldd	r20, Z+8	; 0x08
    399e:	31 85       	ldd	r19, Z+9	; 0x09
    39a0:	22 85       	ldd	r18, Z+10	; 0x0a
    39a2:	65 2f       	mov	r22, r21
    39a4:	74 2f       	mov	r23, r20
    39a6:	83 2f       	mov	r24, r19
    39a8:	92 2f       	mov	r25, r18
    39aa:	08 95       	ret

000039ac <_ZN4NMEA15gprmc_longitudeEv>:

float NMEA::gprmc_longitude() {
    39ac:	fc 01       	movw	r30, r24
	// returns signed degree-decimal longitude value of last-known GPRMC position
	return _gprmc_long;
}
    39ae:	53 85       	ldd	r21, Z+11	; 0x0b
    39b0:	44 85       	ldd	r20, Z+12	; 0x0c
    39b2:	35 85       	ldd	r19, Z+13	; 0x0d
    39b4:	26 85       	ldd	r18, Z+14	; 0x0e
    39b6:	65 2f       	mov	r22, r21
    39b8:	74 2f       	mov	r23, r20
    39ba:	83 2f       	mov	r24, r19
    39bc:	92 2f       	mov	r25, r18
    39be:	08 95       	ret

000039c0 <_ZN4NMEA11gprmc_speedEf>:

float NMEA::gprmc_speed(float unit) {
    39c0:	cf 92       	push	r12
    39c2:	df 92       	push	r13
    39c4:	ef 92       	push	r14
    39c6:	ff 92       	push	r15
    39c8:	6a 01       	movw	r12, r20
    39ca:	7b 01       	movw	r14, r22
	// returns speed-over-ground from last-known GPRMC sentence
	return (_gprmc_speed * unit);
    39cc:	fc 01       	movw	r30, r24
    39ce:	27 85       	ldd	r18, Z+15	; 0x0f
    39d0:	30 89       	ldd	r19, Z+16	; 0x10
    39d2:	41 89       	ldd	r20, Z+17	; 0x11
    39d4:	52 89       	ldd	r21, Z+18	; 0x12
    39d6:	c7 01       	movw	r24, r14
    39d8:	b6 01       	movw	r22, r12
    39da:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
}
    39de:	ff 90       	pop	r15
    39e0:	ef 90       	pop	r14
    39e2:	df 90       	pop	r13
    39e4:	cf 90       	pop	r12
    39e6:	08 95       	ret

000039e8 <_ZN4NMEA12gprmc_courseEv>:

float NMEA::gprmc_course() {
    39e8:	fc 01       	movw	r30, r24
	// returns decimal value of track-angle-made-good term in last-known GPRMC sentence - 0-360 deg
	return _gprmc_angle;
}
    39ea:	53 89       	ldd	r21, Z+19	; 0x13
    39ec:	44 89       	ldd	r20, Z+20	; 0x14
    39ee:	35 89       	ldd	r19, Z+21	; 0x15
    39f0:	26 89       	ldd	r18, Z+22	; 0x16
    39f2:	65 2f       	mov	r22, r21
    39f4:	74 2f       	mov	r23, r20
    39f6:	83 2f       	mov	r24, r19
    39f8:	92 2f       	mov	r25, r18
    39fa:	08 95       	ret

000039fc <_ZN4NMEA8sentenceEv>:
//	return rc;
//}

char* NMEA::sentence() {
	// returns last received full sentence as zero terminated string
  return f_sentence;
    39fc:	9c 01       	movw	r18, r24
    39fe:	29 5e       	subi	r18, 0xE9	; 233
    3a00:	3f 4f       	sbci	r19, 0xFF	; 255
}
    3a02:	c9 01       	movw	r24, r18
    3a04:	08 95       	ret

00003a06 <_ZN4NMEA4termEi>:
  return f_terms;
}

char* NMEA::term(int t) {
	// returns term t of last received full sentence as zero terminated string
  return f_term[t];
    3a06:	66 0f       	add	r22, r22
    3a08:	77 1f       	adc	r23, r23
    3a0a:	68 0f       	add	r22, r24
    3a0c:	79 1f       	adc	r23, r25
    3a0e:	fb 01       	movw	r30, r22
    3a10:	e5 58       	subi	r30, 0x85	; 133
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
}
    3a14:	80 81       	ld	r24, Z
    3a16:	91 81       	ldd	r25, Z+1	; 0x01
    3a18:	08 95       	ret

00003a1a <_ZN4NMEA8_decimalEPc>:
  else {
    return int(a)-48;
  }
}

float NMEA::_decimal(char* s) {
    3a1a:	4f 92       	push	r4
    3a1c:	5f 92       	push	r5
    3a1e:	6f 92       	push	r6
    3a20:	7f 92       	push	r7
    3a22:	8f 92       	push	r8
    3a24:	9f 92       	push	r9
    3a26:	af 92       	push	r10
    3a28:	bf 92       	push	r11
    3a2a:	cf 92       	push	r12
    3a2c:	df 92       	push	r13
    3a2e:	ef 92       	push	r14
    3a30:	ff 92       	push	r15
    3a32:	0f 93       	push	r16
    3a34:	1f 93       	push	r17
    3a36:	cf 93       	push	r28
    3a38:	df 93       	push	r29
  float rr = 0.0;
  float rb = 0.1;
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
    3a3a:	db 01       	movw	r26, r22
    3a3c:	cc 91       	ld	r28, X
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	cd 32       	cpi	r28, 0x2D	; 45
    3a44:	21 f0       	breq	.+8      	; 0x3a4e <_ZN4NMEA8_decimalEPc+0x34>
    3a46:	cb 32       	cpi	r28, 0x2B	; 43
    3a48:	11 f0       	breq	.+4      	; 0x3a4e <_ZN4NMEA8_decimalEPc+0x34>
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
  else {
    return int(a)-48;
  }
}

float NMEA::_decimal(char* s) {
    3a4e:	2b 01       	movw	r4, r22
    3a50:	48 0e       	add	r4, r24
    3a52:	59 1e       	adc	r5, r25
    3a54:	61 2c       	mov	r6, r1
    3a56:	3d ec       	ldi	r19, 0xCD	; 205
    3a58:	a3 2e       	mov	r10, r19
    3a5a:	4c ec       	ldi	r20, 0xCC	; 204
    3a5c:	94 2e       	mov	r9, r20
    3a5e:	5c ec       	ldi	r21, 0xCC	; 204
    3a60:	85 2e       	mov	r8, r21
    3a62:	6d e3       	ldi	r22, 0x3D	; 61
    3a64:	76 2e       	mov	r7, r22
    3a66:	b1 2c       	mov	r11, r1
    3a68:	00 e0       	ldi	r16, 0x00	; 0
    3a6a:	10 e0       	ldi	r17, 0x00	; 0
    3a6c:	d0 e0       	ldi	r29, 0x00	; 0
    3a6e:	c1 2c       	mov	r12, r1
    3a70:	d1 2c       	mov	r13, r1
    3a72:	76 01       	movw	r14, r12
    3a74:	4a c0       	rjmp	.+148    	; 0x3b0a <_ZN4NMEA8_decimalEPc+0xf0>
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    if (s[i] == '.') {
    3a76:	ee 32       	cpi	r30, 0x2E	; 46
    3a78:	09 f4       	brne	.+2      	; 0x3a7c <_ZN4NMEA8_decimalEPc+0x62>
    3a7a:	45 c0       	rjmp	.+138    	; 0x3b06 <_ZN4NMEA8_decimalEPc+0xec>
    3a7c:	ff 27       	eor	r31, r31
    3a7e:	e7 fd       	sbrc	r30, 7
    3a80:	f0 95       	com	r31
      dec = true;
    }
    else{
      if (!dec) {
    3a82:	61 10       	cpse	r6, r1
    3a84:	15 c0       	rjmp	.+42     	; 0x3ab0 <_ZN4NMEA8_decimalEPc+0x96>
        rl = (10 * rl) + (s[i] - 48);
    3a86:	aa e0       	ldi	r26, 0x0A	; 10
    3a88:	b0 e0       	ldi	r27, 0x00	; 0
    3a8a:	a7 01       	movw	r20, r14
    3a8c:	96 01       	movw	r18, r12
    3a8e:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__muluhisi3>
    3a92:	6b 01       	movw	r12, r22
    3a94:	7c 01       	movw	r14, r24
    3a96:	bf 01       	movw	r22, r30
    3a98:	60 53       	subi	r22, 0x30	; 48
    3a9a:	71 09       	sbc	r23, r1
    3a9c:	cb 01       	movw	r24, r22
    3a9e:	aa 27       	eor	r26, r26
    3aa0:	97 fd       	sbrc	r25, 7
    3aa2:	a0 95       	com	r26
    3aa4:	ba 2f       	mov	r27, r26
    3aa6:	c8 0e       	add	r12, r24
    3aa8:	d9 1e       	adc	r13, r25
    3aaa:	ea 1e       	adc	r14, r26
    3aac:	fb 1e       	adc	r15, r27
    3aae:	2d c0       	rjmp	.+90     	; 0x3b0a <_ZN4NMEA8_decimalEPc+0xf0>
      }
      else {
        rr += rb * (float)(s[i] - 48);
    3ab0:	bf 01       	movw	r22, r30
    3ab2:	60 53       	subi	r22, 0x30	; 48
    3ab4:	71 09       	sbc	r23, r1
    3ab6:	88 27       	eor	r24, r24
    3ab8:	77 fd       	sbrc	r23, 7
    3aba:	80 95       	com	r24
    3abc:	98 2f       	mov	r25, r24
    3abe:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__floatsisf>
    3ac2:	9b 01       	movw	r18, r22
    3ac4:	ac 01       	movw	r20, r24
    3ac6:	6a 2d       	mov	r22, r10
    3ac8:	79 2d       	mov	r23, r9
    3aca:	88 2d       	mov	r24, r8
    3acc:	97 2d       	mov	r25, r7
    3ace:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    3ad2:	9b 01       	movw	r18, r22
    3ad4:	ac 01       	movw	r20, r24
    3ad6:	6b 2d       	mov	r22, r11
    3ad8:	70 2f       	mov	r23, r16
    3ada:	81 2f       	mov	r24, r17
    3adc:	9d 2f       	mov	r25, r29
    3ade:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    3ae2:	b6 2e       	mov	r11, r22
    3ae4:	07 2f       	mov	r16, r23
    3ae6:	18 2f       	mov	r17, r24
    3ae8:	d9 2f       	mov	r29, r25
        rb /= 10.0;
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	40 e2       	ldi	r20, 0x20	; 32
    3af0:	51 e4       	ldi	r21, 0x41	; 65
    3af2:	6a 2d       	mov	r22, r10
    3af4:	79 2d       	mov	r23, r9
    3af6:	88 2d       	mov	r24, r8
    3af8:	97 2d       	mov	r25, r7
    3afa:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <__divsf3>
    3afe:	a6 2e       	mov	r10, r22
    3b00:	97 2e       	mov	r9, r23
    3b02:	88 2e       	mov	r8, r24
    3b04:	79 2e       	mov	r7, r25
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    if (s[i] == '.') {
      dec = true;
    3b06:	66 24       	eor	r6, r6
    3b08:	63 94       	inc	r6
  float rb = 0.1;
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    3b0a:	d2 01       	movw	r26, r4
    3b0c:	ed 91       	ld	r30, X+
    3b0e:	2d 01       	movw	r4, r26
    3b10:	e1 11       	cpse	r30, r1
    3b12:	b1 cf       	rjmp	.-158    	; 0x3a76 <_ZN4NMEA8_decimalEPc+0x5c>
        rb /= 10.0;
      }
    }
    i++;
  }
  rr += (float)rl;
    3b14:	c7 01       	movw	r24, r14
    3b16:	b6 01       	movw	r22, r12
    3b18:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__floatsisf>
    3b1c:	9b 01       	movw	r18, r22
    3b1e:	ac 01       	movw	r20, r24
    3b20:	6b 2d       	mov	r22, r11
    3b22:	70 2f       	mov	r23, r16
    3b24:	81 2f       	mov	r24, r17
    3b26:	9d 2f       	mov	r25, r29
    3b28:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
  if (s[0] == '-') {
    3b2c:	cd 32       	cpi	r28, 0x2D	; 45
    3b2e:	49 f4       	brne	.+18     	; 0x3b42 <_ZN4NMEA8_decimalEPc+0x128>
    rr = 0.0 - rr;
    3b30:	26 2f       	mov	r18, r22
    3b32:	37 2f       	mov	r19, r23
    3b34:	48 2f       	mov	r20, r24
    3b36:	59 2f       	mov	r21, r25
    3b38:	60 e0       	ldi	r22, 0x00	; 0
    3b3a:	70 e0       	ldi	r23, 0x00	; 0
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
  }
  return rr;
}
    3b42:	df 91       	pop	r29
    3b44:	cf 91       	pop	r28
    3b46:	1f 91       	pop	r17
    3b48:	0f 91       	pop	r16
    3b4a:	ff 90       	pop	r15
    3b4c:	ef 90       	pop	r14
    3b4e:	df 90       	pop	r13
    3b50:	cf 90       	pop	r12
    3b52:	bf 90       	pop	r11
    3b54:	af 90       	pop	r10
    3b56:	9f 90       	pop	r9
    3b58:	8f 90       	pop	r8
    3b5a:	7f 90       	pop	r7
    3b5c:	6f 90       	pop	r6
    3b5e:	5f 90       	pop	r5
    3b60:	4f 90       	pop	r4
    3b62:	08 95       	ret

00003b64 <_ZN4NMEA6decodeEc>:

//
// public methods
//

int NMEA::decode(char c) {
    3b64:	8f 92       	push	r8
    3b66:	9f 92       	push	r9
    3b68:	af 92       	push	r10
    3b6a:	bf 92       	push	r11
    3b6c:	ef 92       	push	r14
    3b6e:	ff 92       	push	r15
    3b70:	0f 93       	push	r16
    3b72:	1f 93       	push	r17
    3b74:	cf 93       	push	r28
    3b76:	df 93       	push	r29
    3b78:	ec 01       	movw	r28, r24
  // avoid runaway sentences (>99 chars or >29 terms) and terms (>14 chars)
  if ((n >= 100) || (_terms >= 30) || (_nt >= 15)) { _state = 0; }
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	e5 5a       	subi	r30, 0xA5	; 165
    3b7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b80:	80 81       	ld	r24, Z
    3b82:	91 81       	ldd	r25, Z+1	; 0x01
    3b84:	84 36       	cpi	r24, 0x64	; 100
    3b86:	91 05       	cpc	r25, r1
    3b88:	84 f4       	brge	.+32     	; 0x3baa <_ZN4NMEA6decodeEc+0x46>
    3b8a:	fe 01       	movw	r30, r28
    3b8c:	e7 54       	subi	r30, 0x47	; 71
    3b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b90:	20 81       	ld	r18, Z
    3b92:	31 81       	ldd	r19, Z+1	; 0x01
    3b94:	2e 31       	cpi	r18, 0x1E	; 30
    3b96:	31 05       	cpc	r19, r1
    3b98:	44 f4       	brge	.+16     	; 0x3baa <_ZN4NMEA6decodeEc+0x46>
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	ed 59       	subi	r30, 0x9D	; 157
    3b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    3ba0:	20 81       	ld	r18, Z
    3ba2:	31 81       	ldd	r19, Z+1	; 0x01
    3ba4:	2f 30       	cpi	r18, 0x0F	; 15
    3ba6:	31 05       	cpc	r19, r1
    3ba8:	2c f0       	brlt	.+10     	; 0x3bb4 <_ZN4NMEA6decodeEc+0x50>
    3baa:	fe 01       	movw	r30, r28
    3bac:	e1 5a       	subi	r30, 0xA1	; 161
    3bae:	fe 4f       	sbci	r31, 0xFE	; 254
    3bb0:	11 82       	std	Z+1, r1	; 0x01
    3bb2:	10 82       	st	Z, r1
    3bb4:	8e 01       	movw	r16, r28
    3bb6:	01 5a       	subi	r16, 0xA1	; 161
    3bb8:	1e 4f       	sbci	r17, 0xFE	; 254
  // LF and CR always reset parser
  if ((c == 0x0A) || (c == 0x0D)) { _state = 0; }
    3bba:	6a 30       	cpi	r22, 0x0A	; 10
    3bbc:	11 f0       	breq	.+4      	; 0x3bc2 <_ZN4NMEA6decodeEc+0x5e>
    3bbe:	6d 30       	cpi	r22, 0x0D	; 13
    3bc0:	19 f4       	brne	.+6      	; 0x3bc8 <_ZN4NMEA6decodeEc+0x64>
    3bc2:	d8 01       	movw	r26, r16
    3bc4:	1d 92       	st	X+, r1
    3bc6:	1c 92       	st	X, r1
  // '$' always starts a new sentence
  if (c == '$') {
    3bc8:	64 32       	cpi	r22, 0x24	; 36
    3bca:	11 f5       	brne	.+68     	; 0x3c10 <_ZN4NMEA6decodeEc+0xac>
    _gprmc_tag = 0;
    3bcc:	fe 01       	movw	r30, r28
    3bce:	e3 5a       	subi	r30, 0xA3	; 163
    3bd0:	fe 4f       	sbci	r31, 0xFE	; 254
    3bd2:	11 82       	std	Z+1, r1	; 0x01
    3bd4:	10 82       	st	Z, r1
    _parity = 0;
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	ef 59       	subi	r30, 0x9F	; 159
    3bda:	fe 4f       	sbci	r31, 0xFE	; 254
    3bdc:	11 82       	std	Z+1, r1	; 0x01
    3bde:	10 82       	st	Z, r1
    _terms = 0;
    3be0:	fe 01       	movw	r30, r28
    3be2:	e7 54       	subi	r30, 0x47	; 71
    3be4:	ff 4f       	sbci	r31, 0xFF	; 255
    3be6:	11 82       	std	Z+1, r1	; 0x01
    3be8:	10 82       	st	Z, r1
    _nt = 0;
    3bea:	fe 01       	movw	r30, r28
    3bec:	ed 59       	subi	r30, 0x9D	; 157
    3bee:	fe 4f       	sbci	r31, 0xFE	; 254
    3bf0:	11 82       	std	Z+1, r1	; 0x01
    3bf2:	10 82       	st	Z, r1
    _sentence[0] = c;
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	e5 54       	subi	r30, 0x45	; 69
    3bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfa:	60 83       	st	Z, r22
    n = 1;
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	e5 5a       	subi	r30, 0xA5	; 165
    3c00:	fe 4f       	sbci	r31, 0xFE	; 254
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	91 83       	std	Z+1, r25	; 0x01
    3c08:	80 83       	st	Z, r24
    _state = 1;
    3c0a:	c1 5a       	subi	r28, 0xA1	; 161
    3c0c:	de 4f       	sbci	r29, 0xFE	; 254
    3c0e:	e0 c0       	rjmp	.+448    	; 0x3dd0 <_ZN4NMEA6decodeEc+0x26c>
    return 0;
  }
  // parse other chars according to parser state
  switch(_state) {
    3c10:	f8 01       	movw	r30, r16
    3c12:	20 81       	ld	r18, Z
    3c14:	31 81       	ldd	r19, Z+1	; 0x01
    3c16:	21 30       	cpi	r18, 0x01	; 1
    3c18:	31 05       	cpc	r19, r1
    3c1a:	71 f0       	breq	.+28     	; 0x3c38 <_ZN4NMEA6decodeEc+0xd4>
    3c1c:	24 f4       	brge	.+8      	; 0x3c26 <_ZN4NMEA6decodeEc+0xc2>
    3c1e:	23 2b       	or	r18, r19
    3c20:	09 f4       	brne	.+2      	; 0x3c24 <_ZN4NMEA6decodeEc+0xc0>
    3c22:	8d c2       	rjmp	.+1306   	; 0x413e <_ZN4NMEA6decodeEc+0x5da>
    3c24:	88 c2       	rjmp	.+1296   	; 0x4136 <_ZN4NMEA6decodeEc+0x5d2>
    3c26:	22 30       	cpi	r18, 0x02	; 2
    3c28:	31 05       	cpc	r19, r1
    3c2a:	09 f4       	brne	.+2      	; 0x3c2e <_ZN4NMEA6decodeEc+0xca>
    3c2c:	8b c0       	rjmp	.+278    	; 0x3d44 <_ZN4NMEA6decodeEc+0x1e0>
    3c2e:	23 30       	cpi	r18, 0x03	; 3
    3c30:	31 05       	cpc	r19, r1
    3c32:	09 f0       	breq	.+2      	; 0x3c36 <_ZN4NMEA6decodeEc+0xd2>
    3c34:	80 c2       	rjmp	.+1280   	; 0x4136 <_ZN4NMEA6decodeEc+0x5d2>
    3c36:	cf c0       	rjmp	.+414    	; 0x3dd6 <_ZN4NMEA6decodeEc+0x272>
  case 0:
    // waiting for '$', do nothing
    break;
  case 1:
  	// decode chars after '$' and before '*' found
    if (n < 7) {
    3c38:	87 30       	cpi	r24, 0x07	; 7
    3c3a:	91 05       	cpc	r25, r1
    3c3c:	7c f4       	brge	.+30     	; 0x3c5c <_ZN4NMEA6decodeEc+0xf8>
    	// see if first seven chars match "$GPRMC,"
    	if (c == _GPRMC_TERM[n]) { _gprmc_tag++; }
    3c3e:	fc 01       	movw	r30, r24
    3c40:	e4 5f       	subi	r30, 0xF4	; 244
    3c42:	fd 4f       	sbci	r31, 0xFD	; 253
    3c44:	20 81       	ld	r18, Z
    3c46:	62 13       	cpse	r22, r18
    3c48:	09 c0       	rjmp	.+18     	; 0x3c5c <_ZN4NMEA6decodeEc+0xf8>
    3c4a:	fe 01       	movw	r30, r28
    3c4c:	e3 5a       	subi	r30, 0xA3	; 163
    3c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c50:	20 81       	ld	r18, Z
    3c52:	31 81       	ldd	r19, Z+1	; 0x01
    3c54:	2f 5f       	subi	r18, 0xFF	; 255
    3c56:	3f 4f       	sbci	r19, 0xFF	; 255
    3c58:	31 83       	std	Z+1, r19	; 0x01
    3c5a:	20 83       	st	Z, r18
    }
    // add received char to sentence
    _sentence[n++] = c;
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	e8 0f       	add	r30, r24
    3c60:	f9 1f       	adc	r31, r25
    3c62:	e5 54       	subi	r30, 0x45	; 69
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	60 83       	st	Z, r22
    3c68:	fe 01       	movw	r30, r28
    3c6a:	e5 5a       	subi	r30, 0xA5	; 165
    3c6c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c6e:	01 96       	adiw	r24, 0x01	; 1
    3c70:	91 83       	std	Z+1, r25	; 0x01
    3c72:	80 83       	st	Z, r24
    3c74:	8e 01       	movw	r16, r28
    3c76:	07 54       	subi	r16, 0x47	; 71
    3c78:	1f 4f       	sbci	r17, 0xFF	; 255
    3c7a:	fe 01       	movw	r30, r28
    3c7c:	ed 59       	subi	r30, 0x9D	; 157
    3c7e:	fe 4f       	sbci	r31, 0xFE	; 254
    switch (c) {
    3c80:	6a 32       	cpi	r22, 0x2A	; 42
    3c82:	19 f1       	breq	.+70     	; 0x3cca <_ZN4NMEA6decodeEc+0x166>
    3c84:	6c 32       	cpi	r22, 0x2C	; 44
    3c86:	e1 f5       	brne	.+120    	; 0x3d00 <_ZN4NMEA6decodeEc+0x19c>
    case ',':
    	// ',' delimits the individual terms
      (_term[_terms++])[_nt] = 0;
    3c88:	d8 01       	movw	r26, r16
    3c8a:	2d 91       	ld	r18, X+
    3c8c:	3c 91       	ld	r19, X
    3c8e:	c9 01       	movw	r24, r18
    3c90:	88 0f       	add	r24, r24
    3c92:	99 1f       	adc	r25, r25
    3c94:	8c 0f       	add	r24, r28
    3c96:	9d 1f       	adc	r25, r29
    3c98:	81 5e       	subi	r24, 0xE1	; 225
    3c9a:	9e 4f       	sbci	r25, 0xFE	; 254
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	8d 91       	ld	r24, X+
    3ca0:	9c 91       	ld	r25, X
    3ca2:	40 81       	ld	r20, Z
    3ca4:	51 81       	ldd	r21, Z+1	; 0x01
    3ca6:	84 0f       	add	r24, r20
    3ca8:	95 1f       	adc	r25, r21
    3caa:	dc 01       	movw	r26, r24
    3cac:	1c 92       	st	X, r1
    3cae:	2f 5f       	subi	r18, 0xFF	; 255
    3cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cb2:	d8 01       	movw	r26, r16
    3cb4:	2d 93       	st	X+, r18
    3cb6:	3c 93       	st	X, r19
      _nt = 0;
    3cb8:	11 82       	std	Z+1, r1	; 0x01
    3cba:	10 82       	st	Z, r1
      _parity = _parity ^ c;
    3cbc:	cf 59       	subi	r28, 0x9F	; 159
    3cbe:	de 4f       	sbci	r29, 0xFE	; 254
    3cc0:	88 81       	ld	r24, Y
    3cc2:	99 81       	ldd	r25, Y+1	; 0x01
    3cc4:	bc e2       	ldi	r27, 0x2C	; 44
    3cc6:	8b 27       	eor	r24, r27
    3cc8:	83 c0       	rjmp	.+262    	; 0x3dd0 <_ZN4NMEA6decodeEc+0x26c>
      break;
    case '*':
    	// '*' delimits term and precedes checksum term
      (_term[_terms++])[_nt] = 0;
    3cca:	d8 01       	movw	r26, r16
    3ccc:	2d 91       	ld	r18, X+
    3cce:	3c 91       	ld	r19, X
    3cd0:	c9 01       	movw	r24, r18
    3cd2:	88 0f       	add	r24, r24
    3cd4:	99 1f       	adc	r25, r25
    3cd6:	8c 0f       	add	r24, r28
    3cd8:	9d 1f       	adc	r25, r29
    3cda:	81 5e       	subi	r24, 0xE1	; 225
    3cdc:	9e 4f       	sbci	r25, 0xFE	; 254
    3cde:	dc 01       	movw	r26, r24
    3ce0:	8d 91       	ld	r24, X+
    3ce2:	9c 91       	ld	r25, X
    3ce4:	40 81       	ld	r20, Z
    3ce6:	51 81       	ldd	r21, Z+1	; 0x01
    3ce8:	84 0f       	add	r24, r20
    3cea:	95 1f       	adc	r25, r21
    3cec:	dc 01       	movw	r26, r24
    3cee:	1c 92       	st	X, r1
    3cf0:	2f 5f       	subi	r18, 0xFF	; 255
    3cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf4:	d8 01       	movw	r26, r16
    3cf6:	2d 93       	st	X+, r18
    3cf8:	3c 93       	st	X, r19
      _nt = 0;
    3cfa:	11 82       	std	Z+1, r1	; 0x01
    3cfc:	10 82       	st	Z, r1
    3cfe:	63 c0       	rjmp	.+198    	; 0x3dc6 <_ZN4NMEA6decodeEc+0x262>
      _state++;
      break;
    default:
    	// all other chars between '$' and '*' are part of a term
      (_term[_terms])[_nt++] = c;
    3d00:	20 81       	ld	r18, Z
    3d02:	31 81       	ldd	r19, Z+1	; 0x01
    3d04:	d8 01       	movw	r26, r16
    3d06:	8d 91       	ld	r24, X+
    3d08:	9c 91       	ld	r25, X
    3d0a:	88 0f       	add	r24, r24
    3d0c:	99 1f       	adc	r25, r25
    3d0e:	8c 0f       	add	r24, r28
    3d10:	9d 1f       	adc	r25, r29
    3d12:	dc 01       	movw	r26, r24
    3d14:	a1 5e       	subi	r26, 0xE1	; 225
    3d16:	be 4f       	sbci	r27, 0xFE	; 254
    3d18:	0d 90       	ld	r0, X+
    3d1a:	bc 91       	ld	r27, X
    3d1c:	a0 2d       	mov	r26, r0
    3d1e:	a2 0f       	add	r26, r18
    3d20:	b3 1f       	adc	r27, r19
    3d22:	6c 93       	st	X, r22
    3d24:	2f 5f       	subi	r18, 0xFF	; 255
    3d26:	3f 4f       	sbci	r19, 0xFF	; 255
    3d28:	31 83       	std	Z+1, r19	; 0x01
    3d2a:	20 83       	st	Z, r18
      _parity = _parity ^ c;
    3d2c:	cf 59       	subi	r28, 0x9F	; 159
    3d2e:	de 4f       	sbci	r29, 0xFE	; 254
    3d30:	77 27       	eor	r23, r23
    3d32:	67 fd       	sbrc	r22, 7
    3d34:	70 95       	com	r23
    3d36:	88 81       	ld	r24, Y
    3d38:	99 81       	ldd	r25, Y+1	; 0x01
    3d3a:	68 27       	eor	r22, r24
    3d3c:	79 27       	eor	r23, r25
    3d3e:	79 83       	std	Y+1, r23	; 0x01
    3d40:	68 83       	st	Y, r22
    3d42:	fd c1       	rjmp	.+1018   	; 0x413e <_ZN4NMEA6decodeEc+0x5da>
      break;
    }
    break;
  case 2:
  	// first char following '*' is checksum MSB
    _sentence[n++] = c;
    3d44:	fe 01       	movw	r30, r28
    3d46:	e8 0f       	add	r30, r24
    3d48:	f9 1f       	adc	r31, r25
    3d4a:	e5 54       	subi	r30, 0x45	; 69
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	60 83       	st	Z, r22
    3d50:	fe 01       	movw	r30, r28
    3d52:	e5 5a       	subi	r30, 0xA5	; 165
    3d54:	fe 4f       	sbci	r31, 0xFE	; 254
    3d56:	01 96       	adiw	r24, 0x01	; 1
    3d58:	91 83       	std	Z+1, r25	; 0x01
    3d5a:	80 83       	st	Z, r24
    (_term[_terms])[_nt++] = c;
    3d5c:	de 01       	movw	r26, r28
    3d5e:	ad 59       	subi	r26, 0x9D	; 157
    3d60:	be 4f       	sbci	r27, 0xFE	; 254
    3d62:	2d 91       	ld	r18, X+
    3d64:	3c 91       	ld	r19, X
    3d66:	11 97       	sbiw	r26, 0x01	; 1
    3d68:	fe 01       	movw	r30, r28
    3d6a:	e7 54       	subi	r30, 0x47	; 71
    3d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6e:	80 81       	ld	r24, Z
    3d70:	91 81       	ldd	r25, Z+1	; 0x01
    3d72:	88 0f       	add	r24, r24
    3d74:	99 1f       	adc	r25, r25
    3d76:	8c 0f       	add	r24, r28
    3d78:	9d 1f       	adc	r25, r29
    3d7a:	fc 01       	movw	r30, r24
    3d7c:	e1 5e       	subi	r30, 0xE1	; 225
    3d7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d80:	01 90       	ld	r0, Z+
    3d82:	f0 81       	ld	r31, Z
    3d84:	e0 2d       	mov	r30, r0
    3d86:	e2 0f       	add	r30, r18
    3d88:	f3 1f       	adc	r31, r19
    3d8a:	60 83       	st	Z, r22
    3d8c:	2f 5f       	subi	r18, 0xFF	; 255
    3d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d90:	2d 93       	st	X+, r18
    3d92:	3c 93       	st	X, r19
    _parity = _parity - (16 * _dehex(c));		// replace with bitshift?
    3d94:	fe 01       	movw	r30, r28
    3d96:	ef 59       	subi	r30, 0x9F	; 159
    3d98:	fe 4f       	sbci	r31, 0xFE	; 254
    3d9a:	40 81       	ld	r20, Z
    3d9c:	51 81       	ldd	r21, Z+1	; 0x01
    3d9e:	86 2f       	mov	r24, r22
    3da0:	99 27       	eor	r25, r25
    3da2:	87 fd       	sbrc	r24, 7
    3da4:	90 95       	com	r25
}

int NMEA::_dehex(char a) {
	// returns base-16 value of chars '0'-'9' and 'A'-'F';
	// does not trap invalid chars!
  if (int(a) >= 65) {
    3da6:	61 34       	cpi	r22, 0x41	; 65
    3da8:	14 f0       	brlt	.+4      	; 0x3dae <_ZN4NMEA6decodeEc+0x24a>
    return int(a)-55;
    3daa:	c7 97       	sbiw	r24, 0x37	; 55
    3dac:	01 c0       	rjmp	.+2      	; 0x3db0 <_ZN4NMEA6decodeEc+0x24c>
  }
  else {
    return int(a)-48;
    3dae:	c0 97       	sbiw	r24, 0x30	; 48
    break;
  case 2:
  	// first char following '*' is checksum MSB
    _sentence[n++] = c;
    (_term[_terms])[_nt++] = c;
    _parity = _parity - (16 * _dehex(c));		// replace with bitshift?
    3db0:	9c 01       	movw	r18, r24
    3db2:	a4 e0       	ldi	r26, 0x04	; 4
    3db4:	22 0f       	add	r18, r18
    3db6:	33 1f       	adc	r19, r19
    3db8:	aa 95       	dec	r26
    3dba:	e1 f7       	brne	.-8      	; 0x3db4 <_ZN4NMEA6decodeEc+0x250>
    3dbc:	ca 01       	movw	r24, r20
    3dbe:	82 1b       	sub	r24, r18
    3dc0:	93 0b       	sbc	r25, r19
    3dc2:	91 83       	std	Z+1, r25	; 0x01
    3dc4:	80 83       	st	Z, r24
    _state++;
    3dc6:	c1 5a       	subi	r28, 0xA1	; 161
    3dc8:	de 4f       	sbci	r29, 0xFE	; 254
    3dca:	88 81       	ld	r24, Y
    3dcc:	99 81       	ldd	r25, Y+1	; 0x01
    3dce:	01 96       	adiw	r24, 0x01	; 1
    3dd0:	99 83       	std	Y+1, r25	; 0x01
    3dd2:	88 83       	st	Y, r24
    3dd4:	b4 c1       	rjmp	.+872    	; 0x413e <_ZN4NMEA6decodeEc+0x5da>
    break;
  case 3:
  	// second char after '*' completes the checksum (LSB)
    _sentence[n++] = c;
    3dd6:	9e 01       	movw	r18, r28
    3dd8:	28 0f       	add	r18, r24
    3dda:	39 1f       	adc	r19, r25
    3ddc:	d9 01       	movw	r26, r18
    3dde:	a5 54       	subi	r26, 0x45	; 69
    3de0:	bf 4f       	sbci	r27, 0xFF	; 255
    3de2:	6c 93       	st	X, r22
    _sentence[n++] = 0;
    3de4:	d9 01       	movw	r26, r18
    3de6:	a4 54       	subi	r26, 0x44	; 68
    3de8:	bf 4f       	sbci	r27, 0xFF	; 255
    3dea:	1c 92       	st	X, r1
    3dec:	de 01       	movw	r26, r28
    3dee:	a5 5a       	subi	r26, 0xA5	; 165
    3df0:	be 4f       	sbci	r27, 0xFE	; 254
    3df2:	02 96       	adiw	r24, 0x02	; 2
    3df4:	8d 93       	st	X+, r24
    3df6:	9c 93       	st	X, r25
    (_term[_terms])[_nt++] = c;
    3df8:	9e 01       	movw	r18, r28
    3dfa:	2d 59       	subi	r18, 0x9D	; 157
    3dfc:	3e 4f       	sbci	r19, 0xFE	; 254
    3dfe:	f9 01       	movw	r30, r18
    3e00:	40 81       	ld	r20, Z
    3e02:	51 81       	ldd	r21, Z+1	; 0x01
    3e04:	de 01       	movw	r26, r28
    3e06:	a7 54       	subi	r26, 0x47	; 71
    3e08:	bf 4f       	sbci	r27, 0xFF	; 255
    3e0a:	8d 91       	ld	r24, X+
    3e0c:	9c 91       	ld	r25, X
    3e0e:	11 97       	sbiw	r26, 0x01	; 1
    3e10:	88 0f       	add	r24, r24
    3e12:	99 1f       	adc	r25, r25
    3e14:	8c 0f       	add	r24, r28
    3e16:	9d 1f       	adc	r25, r29
    3e18:	81 5e       	subi	r24, 0xE1	; 225
    3e1a:	9e 4f       	sbci	r25, 0xFE	; 254
    3e1c:	fc 01       	movw	r30, r24
    3e1e:	80 81       	ld	r24, Z
    3e20:	91 81       	ldd	r25, Z+1	; 0x01
    3e22:	84 0f       	add	r24, r20
    3e24:	95 1f       	adc	r25, r21
    3e26:	fc 01       	movw	r30, r24
    3e28:	60 83       	st	Z, r22
    3e2a:	4f 5f       	subi	r20, 0xFF	; 255
    3e2c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e2e:	f9 01       	movw	r30, r18
    3e30:	51 83       	std	Z+1, r21	; 0x01
    3e32:	40 83       	st	Z, r20
    (_term[_terms++])[_nt] = 0;
    3e34:	2d 91       	ld	r18, X+
    3e36:	3c 91       	ld	r19, X
    3e38:	11 97       	sbiw	r26, 0x01	; 1
    3e3a:	c9 01       	movw	r24, r18
    3e3c:	88 0f       	add	r24, r24
    3e3e:	99 1f       	adc	r25, r25
    3e40:	8c 0f       	add	r24, r28
    3e42:	9d 1f       	adc	r25, r29
    3e44:	81 5e       	subi	r24, 0xE1	; 225
    3e46:	9e 4f       	sbci	r25, 0xFE	; 254
    3e48:	fc 01       	movw	r30, r24
    3e4a:	80 81       	ld	r24, Z
    3e4c:	91 81       	ldd	r25, Z+1	; 0x01
    3e4e:	84 0f       	add	r24, r20
    3e50:	95 1f       	adc	r25, r21
    3e52:	fc 01       	movw	r30, r24
    3e54:	10 82       	st	Z, r1
    3e56:	2f 5f       	subi	r18, 0xFF	; 255
    3e58:	3f 4f       	sbci	r19, 0xFF	; 255
    3e5a:	2d 93       	st	X+, r18
    3e5c:	3c 93       	st	X, r19
    _state = 0;
    3e5e:	d8 01       	movw	r26, r16
    3e60:	1d 92       	st	X+, r1
    3e62:	1c 92       	st	X, r1
    _parity = _parity - _dehex(c);
    3e64:	fe 01       	movw	r30, r28
    3e66:	ef 59       	subi	r30, 0x9F	; 159
    3e68:	fe 4f       	sbci	r31, 0xFE	; 254
    3e6a:	80 81       	ld	r24, Z
    3e6c:	91 81       	ldd	r25, Z+1	; 0x01
    3e6e:	26 2f       	mov	r18, r22
    3e70:	33 27       	eor	r19, r19
    3e72:	27 fd       	sbrc	r18, 7
    3e74:	30 95       	com	r19
}

int NMEA::_dehex(char a) {
	// returns base-16 value of chars '0'-'9' and 'A'-'F';
	// does not trap invalid chars!
  if (int(a) >= 65) {
    3e76:	61 34       	cpi	r22, 0x41	; 65
    3e78:	1c f0       	brlt	.+6      	; 0x3e80 <_ZN4NMEA6decodeEc+0x31c>
    return int(a)-55;
    3e7a:	27 53       	subi	r18, 0x37	; 55
    3e7c:	31 09       	sbc	r19, r1
    3e7e:	02 c0       	rjmp	.+4      	; 0x3e84 <_ZN4NMEA6decodeEc+0x320>
  }
  else {
    return int(a)-48;
    3e80:	20 53       	subi	r18, 0x30	; 48
    3e82:	31 09       	sbc	r19, r1
    _sentence[n++] = c;
    _sentence[n++] = 0;
    (_term[_terms])[_nt++] = c;
    (_term[_terms++])[_nt] = 0;
    _state = 0;
    _parity = _parity - _dehex(c);
    3e84:	82 1b       	sub	r24, r18
    3e86:	93 0b       	sbc	r25, r19
    3e88:	91 83       	std	Z+1, r25	; 0x01
    3e8a:	80 83       	st	Z, r24
    // when parity is zero, checksum was correct!
    if (_parity == 0) {
    3e8c:	89 2b       	or	r24, r25
    3e8e:	09 f0       	breq	.+2      	; 0x3e92 <_ZN4NMEA6decodeEc+0x32e>
    3e90:	56 c1       	rjmp	.+684    	; 0x413e <_ZN4NMEA6decodeEc+0x5da>
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
    3e92:	88 81       	ld	r24, Y
    3e94:	99 81       	ldd	r25, Y+1	; 0x01
    3e96:	89 2b       	or	r24, r25
    3e98:	39 f4       	brne	.+14     	; 0x3ea8 <_ZN4NMEA6decodeEc+0x344>
    3e9a:	fe 01       	movw	r30, r28
    3e9c:	e5 5a       	subi	r30, 0xA5	; 165
    3e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    3ea0:	20 81       	ld	r18, Z
    3ea2:	31 81       	ldd	r19, Z+1	; 0x01
    3ea4:	c9 01       	movw	r24, r18
    3ea6:	10 c0       	rjmp	.+32     	; 0x3ec8 <_ZN4NMEA6decodeEc+0x364>
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	e3 5a       	subi	r30, 0xA3	; 163
    3eac:	fe 4f       	sbci	r31, 0xFE	; 254
    3eae:	80 81       	ld	r24, Z
    3eb0:	91 81       	ldd	r25, Z+1	; 0x01
    3eb2:	06 97       	sbiw	r24, 0x06	; 6
    3eb4:	91 f3       	breq	.-28     	; 0x3e9a <_ZN4NMEA6decodeEc+0x336>
    3eb6:	43 c1       	rjmp	.+646    	; 0x413e <_ZN4NMEA6decodeEc+0x5da>

//
// public methods
//

int NMEA::decode(char c) {
    3eb8:	fe 01       	movw	r30, r28
    3eba:	e8 0f       	add	r30, r24
    3ebc:	f9 1f       	adc	r31, r25
    3ebe:	df 01       	movw	r26, r30
    3ec0:	a5 54       	subi	r26, 0x45	; 69
    3ec2:	bf 4f       	sbci	r27, 0xFF	; 255
    // when parity is zero, checksum was correct!
    if (_parity == 0) {
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
    3ec4:	4c 91       	ld	r20, X
    3ec6:	47 8b       	std	Z+23, r20	; 0x17
    3ec8:	01 97       	sbiw	r24, 0x01	; 1
    3eca:	97 ff       	sbrs	r25, 7
    3ecc:	f5 cf       	rjmp	.-22     	; 0x3eb8 <_ZN4NMEA6decodeEc+0x354>

//
// public methods
//

int NMEA::decode(char c) {
    3ece:	a9 01       	movw	r20, r18
    3ed0:	41 50       	subi	r20, 0x01	; 1
    3ed2:	51 09       	sbc	r21, r1
    3ed4:	c9 01       	movw	r24, r18
    3ed6:	37 ff       	sbrs	r19, 7
    3ed8:	02 c0       	rjmp	.+4      	; 0x3ede <_ZN4NMEA6decodeEc+0x37a>
    3eda:	80 e0       	ldi	r24, 0x00	; 0
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	fe 01       	movw	r30, r28
    3ee0:	e5 5a       	subi	r30, 0xA5	; 165
    3ee2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ee4:	9a 01       	movw	r18, r20
    3ee6:	28 1b       	sub	r18, r24
    3ee8:	39 0b       	sbc	r19, r25
    3eea:	31 83       	std	Z+1, r19	; 0x01
    3eec:	20 83       	st	Z, r18
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    3eee:	7e 01       	movw	r14, r28
    3ef0:	37 eb       	ldi	r19, 0xB7	; 183
    3ef2:	e3 0e       	add	r14, r19
    3ef4:	f1 1c       	adc	r15, r1
    3ef6:	d7 01       	movw	r26, r14
    3ef8:	1d 92       	st	X+, r1
    3efa:	1c 92       	st	X, r1
    3efc:	b7 01       	movw	r22, r14
    3efe:	8e 01       	movw	r16, r28
    3f00:	07 54       	subi	r16, 0x47	; 71
    3f02:	1f 4f       	sbci	r17, 0xFF	; 255
	      	_nt = 0;
    3f04:	de 01       	movw	r26, r28
    3f06:	ad 59       	subi	r26, 0x9D	; 157
    3f08:	be 4f       	sbci	r27, 0xFE	; 254
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    3f0a:	31 c0       	rjmp	.+98     	; 0x3f6e <_ZN4NMEA6decodeEc+0x40a>
	      	_nt = 0;
    3f0c:	11 96       	adiw	r26, 0x01	; 1
    3f0e:	1c 92       	st	X, r1
    3f10:	1e 92       	st	-X, r1
	      	while ((_term[f_terms])[_nt]) {
    3f12:	08 c0       	rjmp	.+16     	; 0x3f24 <_ZN4NMEA6decodeEc+0x3c0>
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
    3f14:	40 83       	st	Z, r20
	        	_nt++;
    3f16:	8d 91       	ld	r24, X+
    3f18:	9c 91       	ld	r25, X
    3f1a:	11 97       	sbiw	r26, 0x01	; 1
    3f1c:	01 96       	adiw	r24, 0x01	; 1
    3f1e:	11 96       	adiw	r26, 0x01	; 1
    3f20:	9c 93       	st	X, r25
    3f22:	8e 93       	st	-X, r24
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
	      	_nt = 0;
	      	while ((_term[f_terms])[_nt]) {
    3f24:	fb 01       	movw	r30, r22
    3f26:	80 81       	ld	r24, Z
    3f28:	91 81       	ldd	r25, Z+1	; 0x01
    3f2a:	2d 91       	ld	r18, X+
    3f2c:	3c 91       	ld	r19, X
    3f2e:	11 97       	sbiw	r26, 0x01	; 1
    3f30:	88 0f       	add	r24, r24
    3f32:	99 1f       	adc	r25, r25
    3f34:	8c 0f       	add	r24, r28
    3f36:	9d 1f       	adc	r25, r29
    3f38:	ac 01       	movw	r20, r24
    3f3a:	41 5e       	subi	r20, 0xE1	; 225
    3f3c:	5e 4f       	sbci	r21, 0xFE	; 254
    3f3e:	fa 01       	movw	r30, r20
    3f40:	40 81       	ld	r20, Z
    3f42:	51 81       	ldd	r21, Z+1	; 0x01
    3f44:	42 0f       	add	r20, r18
    3f46:	53 1f       	adc	r21, r19
    3f48:	fa 01       	movw	r30, r20
    3f4a:	40 81       	ld	r20, Z
    3f4c:	85 58       	subi	r24, 0x85	; 133
    3f4e:	9f 4f       	sbci	r25, 0xFF	; 255
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
    3f50:	fc 01       	movw	r30, r24
    3f52:	80 81       	ld	r24, Z
    3f54:	91 81       	ldd	r25, Z+1	; 0x01
    3f56:	82 0f       	add	r24, r18
    3f58:	93 1f       	adc	r25, r19
    3f5a:	fc 01       	movw	r30, r24
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
	      	_nt = 0;
	      	while ((_term[f_terms])[_nt]) {
    3f5c:	41 11       	cpse	r20, r1
    3f5e:	da cf       	rjmp	.-76     	; 0x3f14 <_ZN4NMEA6decodeEc+0x3b0>
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
	        	_nt++;
	        }
	        (f_term[f_terms])[_nt] = 0;
    3f60:	10 82       	st	Z, r1
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    3f62:	f7 01       	movw	r30, r14
    3f64:	80 81       	ld	r24, Z
    3f66:	91 81       	ldd	r25, Z+1	; 0x01
    3f68:	01 96       	adiw	r24, 0x01	; 1
    3f6a:	91 83       	std	Z+1, r25	; 0x01
    3f6c:	80 83       	st	Z, r24
    3f6e:	fb 01       	movw	r30, r22
    3f70:	20 81       	ld	r18, Z
    3f72:	31 81       	ldd	r19, Z+1	; 0x01
    3f74:	f8 01       	movw	r30, r16
    3f76:	80 81       	ld	r24, Z
    3f78:	91 81       	ldd	r25, Z+1	; 0x01
    3f7a:	28 17       	cp	r18, r24
    3f7c:	39 07       	cpc	r19, r25
    3f7e:	34 f2       	brlt	.-116    	; 0x3f0c <_ZN4NMEA6decodeEc+0x3a8>
	        	_nt++;
	        }
	        (f_term[f_terms])[_nt] = 0;
	      }
	      // when sentence is of datatype GPRMC
	      if (_gprmc_tag == 6) {
    3f80:	fe 01       	movw	r30, r28
    3f82:	e3 5a       	subi	r30, 0xA3	; 163
    3f84:	fe 4f       	sbci	r31, 0xFE	; 254
    3f86:	80 81       	ld	r24, Z
    3f88:	91 81       	ldd	r25, Z+1	; 0x01
    3f8a:	06 97       	sbiw	r24, 0x06	; 6
    3f8c:	09 f0       	breq	.+2      	; 0x3f90 <_ZN4NMEA6decodeEc+0x42c>
    3f8e:	da c0       	rjmp	.+436    	; 0x4144 <_ZN4NMEA6decodeEc+0x5e0>
	      	// store values of relevant GPRMC terms
	      	_gprmc_utc = _decimal(_term[1]);
    3f90:	fe 01       	movw	r30, r28
    3f92:	ef 5d       	subi	r30, 0xDF	; 223
    3f94:	fe 4f       	sbci	r31, 0xFE	; 254
    3f96:	60 81       	ld	r22, Z
    3f98:	71 81       	ldd	r23, Z+1	; 0x01
    3f9a:	ce 01       	movw	r24, r28
    3f9c:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <_ZN4NMEA8_decimalEPc>
    3fa0:	6a 83       	std	Y+2, r22	; 0x02
    3fa2:	7b 83       	std	Y+3, r23	; 0x03
    3fa4:	8c 83       	std	Y+4, r24	; 0x04
    3fa6:	9d 83       	std	Y+5, r25	; 0x05
	      	_gprmc_status = (_term[2])[0];
    3fa8:	fe 01       	movw	r30, r28
    3faa:	ed 5d       	subi	r30, 0xDD	; 221
    3fac:	fe 4f       	sbci	r31, 0xFE	; 254
    3fae:	01 90       	ld	r0, Z+
    3fb0:	f0 81       	ld	r31, Z
    3fb2:	e0 2d       	mov	r30, r0
    3fb4:	80 81       	ld	r24, Z
    3fb6:	8e 83       	std	Y+6, r24	; 0x06
	        // calculate signed degree-decimal value of latitude term
	        _gprmc_lat = _decimal(_term[3]) / 100.0;
    3fb8:	fe 01       	movw	r30, r28
    3fba:	eb 5d       	subi	r30, 0xDB	; 219
    3fbc:	fe 4f       	sbci	r31, 0xFE	; 254
    3fbe:	60 81       	ld	r22, Z
    3fc0:	71 81       	ldd	r23, Z+1	; 0x01
    3fc2:	ce 01       	movw	r24, r28
    3fc4:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <_ZN4NMEA8_decimalEPc>
    3fc8:	20 e0       	ldi	r18, 0x00	; 0
    3fca:	30 e0       	ldi	r19, 0x00	; 0
    3fcc:	48 ec       	ldi	r20, 0xC8	; 200
    3fce:	52 e4       	ldi	r21, 0x42	; 66
    3fd0:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <__divsf3>
    3fd4:	7b 01       	movw	r14, r22
    3fd6:	8c 01       	movw	r16, r24
	        _degs = floor(_gprmc_lat);
    3fd8:	7f 2d       	mov	r23, r15
    3fda:	80 2f       	mov	r24, r16
    3fdc:	91 2f       	mov	r25, r17
    3fde:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <floor>
    3fe2:	4b 01       	movw	r8, r22
    3fe4:	5c 01       	movw	r10, r24
    3fe6:	fe 01       	movw	r30, r28
    3fe8:	eb 59       	subi	r30, 0x9B	; 155
    3fea:	fe 4f       	sbci	r31, 0xFE	; 254
    3fec:	60 83       	st	Z, r22
    3fee:	71 83       	std	Z+1, r23	; 0x01
    3ff0:	82 83       	std	Z+2, r24	; 0x02
    3ff2:	93 83       	std	Z+3, r25	; 0x03
	        _gprmc_lat = (100.0 * (_gprmc_lat - _degs)) / 60.0;
    3ff4:	9b 01       	movw	r18, r22
    3ff6:	ac 01       	movw	r20, r24
    3ff8:	6e 2d       	mov	r22, r14
    3ffa:	7f 2d       	mov	r23, r15
    3ffc:	80 2f       	mov	r24, r16
    3ffe:	91 2f       	mov	r25, r17
    4000:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	48 ec       	ldi	r20, 0xC8	; 200
    400a:	52 e4       	ldi	r21, 0x42	; 66
    400c:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	40 e7       	ldi	r20, 0x70	; 112
    4016:	52 e4       	ldi	r21, 0x42	; 66
    4018:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <__divsf3>
	        _gprmc_lat += _degs;
    401c:	a5 01       	movw	r20, r10
    401e:	94 01       	movw	r18, r8
    4020:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    4024:	9b 01       	movw	r18, r22
    4026:	46 2f       	mov	r20, r22
    4028:	53 2f       	mov	r21, r19
    402a:	68 2f       	mov	r22, r24
    402c:	79 2f       	mov	r23, r25
    402e:	4f 83       	std	Y+7, r20	; 0x07
    4030:	58 87       	std	Y+8, r21	; 0x08
    4032:	69 87       	std	Y+9, r22	; 0x09
    4034:	7a 87       	std	Y+10, r23	; 0x0a
	        // southern hemisphere is negative-valued
	        if ((_term[4])[0] == 'S') {
    4036:	fe 01       	movw	r30, r28
    4038:	e9 5d       	subi	r30, 0xD9	; 217
    403a:	fe 4f       	sbci	r31, 0xFE	; 254
    403c:	01 90       	ld	r0, Z+
    403e:	f0 81       	ld	r31, Z
    4040:	e0 2d       	mov	r30, r0
    4042:	40 81       	ld	r20, Z
    4044:	43 35       	cpi	r20, 0x53	; 83
    4046:	59 f4       	brne	.+22     	; 0x405e <_ZN4NMEA6decodeEc+0x4fa>
	          _gprmc_lat = 0.0 - _gprmc_lat;
    4048:	48 2f       	mov	r20, r24
    404a:	59 2f       	mov	r21, r25
    404c:	60 e0       	ldi	r22, 0x00	; 0
    404e:	70 e0       	ldi	r23, 0x00	; 0
    4050:	cb 01       	movw	r24, r22
    4052:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    4056:	6f 83       	std	Y+7, r22	; 0x07
    4058:	78 87       	std	Y+8, r23	; 0x08
    405a:	89 87       	std	Y+9, r24	; 0x09
    405c:	9a 87       	std	Y+10, r25	; 0x0a
	        }
	        // calculate signed degree-decimal value of longitude term
	        _gprmc_long = _decimal(_term[5]) / 100.0;
    405e:	fe 01       	movw	r30, r28
    4060:	e7 5d       	subi	r30, 0xD7	; 215
    4062:	fe 4f       	sbci	r31, 0xFE	; 254
    4064:	60 81       	ld	r22, Z
    4066:	71 81       	ldd	r23, Z+1	; 0x01
    4068:	ce 01       	movw	r24, r28
    406a:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <_ZN4NMEA8_decimalEPc>
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	48 ec       	ldi	r20, 0xC8	; 200
    4074:	52 e4       	ldi	r21, 0x42	; 66
    4076:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <__divsf3>
    407a:	7b 01       	movw	r14, r22
    407c:	8c 01       	movw	r16, r24
	        _degs = floor(_gprmc_long);
    407e:	7f 2d       	mov	r23, r15
    4080:	80 2f       	mov	r24, r16
    4082:	91 2f       	mov	r25, r17
    4084:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <floor>
    4088:	4b 01       	movw	r8, r22
    408a:	5c 01       	movw	r10, r24
    408c:	fe 01       	movw	r30, r28
    408e:	eb 59       	subi	r30, 0x9B	; 155
    4090:	fe 4f       	sbci	r31, 0xFE	; 254
    4092:	60 83       	st	Z, r22
    4094:	71 83       	std	Z+1, r23	; 0x01
    4096:	82 83       	std	Z+2, r24	; 0x02
    4098:	93 83       	std	Z+3, r25	; 0x03
	        _gprmc_long = (100.0 * (_gprmc_long - _degs)) / 60.0;
    409a:	9b 01       	movw	r18, r22
    409c:	ac 01       	movw	r20, r24
    409e:	6e 2d       	mov	r22, r14
    40a0:	7f 2d       	mov	r23, r15
    40a2:	80 2f       	mov	r24, r16
    40a4:	91 2f       	mov	r25, r17
    40a6:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    40aa:	20 e0       	ldi	r18, 0x00	; 0
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	48 ec       	ldi	r20, 0xC8	; 200
    40b0:	52 e4       	ldi	r21, 0x42	; 66
    40b2:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    40b6:	20 e0       	ldi	r18, 0x00	; 0
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	40 e7       	ldi	r20, 0x70	; 112
    40bc:	52 e4       	ldi	r21, 0x42	; 66
    40be:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <__divsf3>
	        _gprmc_long += _degs;
    40c2:	a5 01       	movw	r20, r10
    40c4:	94 01       	movw	r18, r8
    40c6:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    40ca:	9b 01       	movw	r18, r22
    40cc:	46 2f       	mov	r20, r22
    40ce:	53 2f       	mov	r21, r19
    40d0:	68 2f       	mov	r22, r24
    40d2:	79 2f       	mov	r23, r25
    40d4:	4b 87       	std	Y+11, r20	; 0x0b
    40d6:	5c 87       	std	Y+12, r21	; 0x0c
    40d8:	6d 87       	std	Y+13, r22	; 0x0d
    40da:	7e 87       	std	Y+14, r23	; 0x0e
	        // western hemisphere is negative-valued
	        if ((_term[6])[0] == 'W') {
    40dc:	fe 01       	movw	r30, r28
    40de:	e5 5d       	subi	r30, 0xD5	; 213
    40e0:	fe 4f       	sbci	r31, 0xFE	; 254
    40e2:	01 90       	ld	r0, Z+
    40e4:	f0 81       	ld	r31, Z
    40e6:	e0 2d       	mov	r30, r0
    40e8:	40 81       	ld	r20, Z
    40ea:	47 35       	cpi	r20, 0x57	; 87
    40ec:	59 f4       	brne	.+22     	; 0x4104 <_ZN4NMEA6decodeEc+0x5a0>
	          _gprmc_long = 0.0 - _gprmc_long;
    40ee:	48 2f       	mov	r20, r24
    40f0:	59 2f       	mov	r21, r25
    40f2:	60 e0       	ldi	r22, 0x00	; 0
    40f4:	70 e0       	ldi	r23, 0x00	; 0
    40f6:	cb 01       	movw	r24, r22
    40f8:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    40fc:	6b 87       	std	Y+11, r22	; 0x0b
    40fe:	7c 87       	std	Y+12, r23	; 0x0c
    4100:	8d 87       	std	Y+13, r24	; 0x0d
    4102:	9e 87       	std	Y+14, r25	; 0x0e
	        }
	        _gprmc_speed = _decimal(_term[7]);
    4104:	fe 01       	movw	r30, r28
    4106:	e3 5d       	subi	r30, 0xD3	; 211
    4108:	fe 4f       	sbci	r31, 0xFE	; 254
    410a:	60 81       	ld	r22, Z
    410c:	71 81       	ldd	r23, Z+1	; 0x01
    410e:	ce 01       	movw	r24, r28
    4110:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <_ZN4NMEA8_decimalEPc>
    4114:	6f 87       	std	Y+15, r22	; 0x0f
    4116:	78 8b       	std	Y+16, r23	; 0x10
    4118:	89 8b       	std	Y+17, r24	; 0x11
    411a:	9a 8b       	std	Y+18, r25	; 0x12
	        _gprmc_angle = _decimal(_term[8]);
    411c:	fe 01       	movw	r30, r28
    411e:	e1 5d       	subi	r30, 0xD1	; 209
    4120:	fe 4f       	sbci	r31, 0xFE	; 254
    4122:	60 81       	ld	r22, Z
    4124:	71 81       	ldd	r23, Z+1	; 0x01
    4126:	ce 01       	movw	r24, r28
    4128:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <_ZN4NMEA8_decimalEPc>
    412c:	6b 8b       	std	Y+19, r22	; 0x13
    412e:	7c 8b       	std	Y+20, r23	; 0x14
    4130:	8d 8b       	std	Y+21, r24	; 0x15
    4132:	9e 8b       	std	Y+22, r25	; 0x16
    4134:	07 c0       	rjmp	.+14     	; 0x4144 <_ZN4NMEA6decodeEc+0x5e0>
      	return 1;
      }
    }
    break;
  default:
    _state = 0;
    4136:	c1 5a       	subi	r28, 0xA1	; 161
    4138:	de 4f       	sbci	r29, 0xFE	; 254
    413a:	19 82       	std	Y+1, r1	; 0x01
    413c:	18 82       	st	Y, r1
    break;
  }
  return 0;
    413e:	20 e0       	ldi	r18, 0x00	; 0
    4140:	30 e0       	ldi	r19, 0x00	; 0
    4142:	02 c0       	rjmp	.+4      	; 0x4148 <_ZN4NMEA6decodeEc+0x5e4>
	        }
	        _gprmc_speed = _decimal(_term[7]);
	        _gprmc_angle = _decimal(_term[8]);
	      }
      	// sentence accepted!
      	return 1;
    4144:	21 e0       	ldi	r18, 0x01	; 1
    4146:	30 e0       	ldi	r19, 0x00	; 0
  default:
    _state = 0;
    break;
  }
  return 0;
}
    4148:	c9 01       	movw	r24, r18
    414a:	df 91       	pop	r29
    414c:	cf 91       	pop	r28
    414e:	1f 91       	pop	r17
    4150:	0f 91       	pop	r16
    4152:	ff 90       	pop	r15
    4154:	ef 90       	pop	r14
    4156:	bf 90       	pop	r11
    4158:	af 90       	pop	r10
    415a:	9f 90       	pop	r9
    415c:	8f 90       	pop	r8
    415e:	08 95       	ret

00004160 <_ZN11FlexiTimer23setEmdPFvvE>:
/**
 * @param resolution
 *   0.001 implies a 1 ms (1/1000s = 0.001s = 1ms) resolution. Therefore,
 *   0.0005 implies a 0.5 ms (1/2000s) resolution. And so on.
 */
void FlexiTimer2::set(unsigned long units, double resolution, void (*f)()) {
    4160:	cf 92       	push	r12
    4162:	df 92       	push	r13
    4164:	ef 92       	push	r14
    4166:	ff 92       	push	r15
    4168:	0f 93       	push	r16
    416a:	1f 93       	push	r17
    416c:	6b 01       	movw	r12, r22
    416e:	7c 01       	movw	r14, r24
    4170:	ca 01       	movw	r24, r20
    4172:	b9 01       	movw	r22, r18
		TCCR2 &= ~((1<<CS21) | (1<<CS20));
		prescaler = 256.0;
	}
#endif
	
	tcnt2 = 256 - (int)((float)F_CPU * resolution / prescaler);
    4174:	20 e0       	ldi	r18, 0x00	; 0
    4176:	34 e2       	ldi	r19, 0x24	; 36
    4178:	44 e7       	ldi	r20, 0x74	; 116
    417a:	5b e4       	ldi	r21, 0x4B	; 75
    417c:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    4180:	20 e0       	ldi	r18, 0x00	; 0
    4182:	30 e0       	ldi	r19, 0x00	; 0
    4184:	a9 01       	movw	r20, r18
    4186:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <__divsf3>
    418a:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__fixsfsi>
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	91 e0       	ldi	r25, 0x01	; 1
    4192:	86 1b       	sub	r24, r22
    4194:	97 0b       	sbc	r25, r23
    4196:	90 93 eb 07 	sts	0x07EB, r25
    419a:	80 93 ea 07 	sts	0x07EA, r24
	
	if (units == 0)
    419e:	c1 14       	cp	r12, r1
    41a0:	d1 04       	cpc	r13, r1
    41a2:	e1 04       	cpc	r14, r1
    41a4:	f1 04       	cpc	r15, r1
    41a6:	69 f4       	brne	.+26     	; 0x41c2 <_ZN11FlexiTimer23setEmdPFvvE+0x62>
		time_units = 1;
    41a8:	81 e0       	ldi	r24, 0x01	; 1
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	a0 e0       	ldi	r26, 0x00	; 0
    41ae:	b0 e0       	ldi	r27, 0x00	; 0
    41b0:	80 93 f3 07 	sts	0x07F3, r24
    41b4:	90 93 f4 07 	sts	0x07F4, r25
    41b8:	a0 93 f5 07 	sts	0x07F5, r26
    41bc:	b0 93 f6 07 	sts	0x07F6, r27
    41c0:	08 c0       	rjmp	.+16     	; 0x41d2 <_ZN11FlexiTimer23setEmdPFvvE+0x72>
	else
		time_units = units;
    41c2:	c0 92 f3 07 	sts	0x07F3, r12
    41c6:	d0 92 f4 07 	sts	0x07F4, r13
    41ca:	e0 92 f5 07 	sts	0x07F5, r14
    41ce:	f0 92 f6 07 	sts	0x07F6, r15
		
	func = f;
    41d2:	10 93 f2 07 	sts	0x07F2, r17
    41d6:	00 93 f1 07 	sts	0x07F1, r16
}
    41da:	1f 91       	pop	r17
    41dc:	0f 91       	pop	r16
    41de:	ff 90       	pop	r15
    41e0:	ef 90       	pop	r14
    41e2:	df 90       	pop	r13
    41e4:	cf 90       	pop	r12
    41e6:	08 95       	ret

000041e8 <_ZN11FlexiTimer23setEmPFvvE>:
void (*FlexiTimer2::func)();
volatile unsigned long FlexiTimer2::count;
volatile char FlexiTimer2::overflowing;
volatile unsigned int FlexiTimer2::tcnt2;

void FlexiTimer2::set(unsigned long ms, void (*f)()) {
    41e8:	0f 93       	push	r16
    41ea:	1f 93       	push	r17
    FlexiTimer2::set(ms, 0.001, f);
    41ec:	8a 01       	movw	r16, r20
    41ee:	2f e6       	ldi	r18, 0x6F	; 111
    41f0:	32 e1       	ldi	r19, 0x12	; 18
    41f2:	43 e8       	ldi	r20, 0x83	; 131
    41f4:	5a e3       	ldi	r21, 0x3A	; 58
    41f6:	0e 94 b0 20 	call	0x4160	; 0x4160 <_ZN11FlexiTimer23setEmdPFvvE>
}
    41fa:	1f 91       	pop	r17
    41fc:	0f 91       	pop	r16
    41fe:	08 95       	ret

00004200 <_ZN11FlexiTimer25startEv>:
		
	func = f;
}

void FlexiTimer2::start() {
	count = 0;
    4200:	10 92 ed 07 	sts	0x07ED, r1
    4204:	10 92 ee 07 	sts	0x07EE, r1
    4208:	10 92 ef 07 	sts	0x07EF, r1
    420c:	10 92 f0 07 	sts	0x07F0, r1
	overflowing = 0;
    4210:	10 92 ec 07 	sts	0x07EC, r1
    4214:	08 95       	ret

00004216 <_ZN11FlexiTimer29_overflowEv>:
	TIMSK &= ~(1<<TOIE2);
#endif
}

void FlexiTimer2::_overflow() {
	count += 1;
    4216:	80 91 ed 07 	lds	r24, 0x07ED
    421a:	90 91 ee 07 	lds	r25, 0x07EE
    421e:	a0 91 ef 07 	lds	r26, 0x07EF
    4222:	b0 91 f0 07 	lds	r27, 0x07F0
    4226:	01 96       	adiw	r24, 0x01	; 1
    4228:	a1 1d       	adc	r26, r1
    422a:	b1 1d       	adc	r27, r1
    422c:	80 93 ed 07 	sts	0x07ED, r24
    4230:	90 93 ee 07 	sts	0x07EE, r25
    4234:	a0 93 ef 07 	sts	0x07EF, r26
    4238:	b0 93 f0 07 	sts	0x07F0, r27
	
	if (count >= time_units && !overflowing) {
    423c:	40 91 ed 07 	lds	r20, 0x07ED
    4240:	50 91 ee 07 	lds	r21, 0x07EE
    4244:	60 91 ef 07 	lds	r22, 0x07EF
    4248:	70 91 f0 07 	lds	r23, 0x07F0
    424c:	80 91 f3 07 	lds	r24, 0x07F3
    4250:	90 91 f4 07 	lds	r25, 0x07F4
    4254:	a0 91 f5 07 	lds	r26, 0x07F5
    4258:	b0 91 f6 07 	lds	r27, 0x07F6
    425c:	48 17       	cp	r20, r24
    425e:	59 07       	cpc	r21, r25
    4260:	6a 07       	cpc	r22, r26
    4262:	7b 07       	cpc	r23, r27
    4264:	b0 f0       	brcs	.+44     	; 0x4292 <_ZN11FlexiTimer29_overflowEv+0x7c>
    4266:	80 91 ec 07 	lds	r24, 0x07EC
    426a:	81 11       	cpse	r24, r1
    426c:	12 c0       	rjmp	.+36     	; 0x4292 <_ZN11FlexiTimer29_overflowEv+0x7c>
		overflowing = 1;
    426e:	81 e0       	ldi	r24, 0x01	; 1
    4270:	80 93 ec 07 	sts	0x07EC, r24
		count = 0;
    4274:	10 92 ed 07 	sts	0x07ED, r1
    4278:	10 92 ee 07 	sts	0x07EE, r1
    427c:	10 92 ef 07 	sts	0x07EF, r1
    4280:	10 92 f0 07 	sts	0x07F0, r1
		(*func)();
    4284:	e0 91 f1 07 	lds	r30, 0x07F1
    4288:	f0 91 f2 07 	lds	r31, 0x07F2
    428c:	19 95       	eicall
		overflowing = 0;
    428e:	10 92 ec 07 	sts	0x07EC, r1
    4292:	08 95       	ret

00004294 <__vector_15>:
	}
}

ISR(TIMER2_OVF_vect) {
    4294:	1f 92       	push	r1
    4296:	0f 92       	push	r0
    4298:	0f b6       	in	r0, 0x3f	; 63
    429a:	0f 92       	push	r0
    429c:	11 24       	eor	r1, r1
    429e:	0b b6       	in	r0, 0x3b	; 59
    42a0:	0f 92       	push	r0
    42a2:	1b be       	out	0x3b, r1	; 59
    42a4:	2f 93       	push	r18
    42a6:	3f 93       	push	r19
    42a8:	4f 93       	push	r20
    42aa:	5f 93       	push	r21
    42ac:	6f 93       	push	r22
    42ae:	7f 93       	push	r23
    42b0:	8f 93       	push	r24
    42b2:	9f 93       	push	r25
    42b4:	af 93       	push	r26
    42b6:	bf 93       	push	r27
    42b8:	ef 93       	push	r30
    42ba:	ff 93       	push	r31
#elif defined (__AVR_ATmega128__)
	TCNT2 = FlexiTimer2::tcnt2;
#elif defined (__AVR_ATmega8__)
	TCNT2 = FlexiTimer2::tcnt2;
#endif
	FlexiTimer2::_overflow();
    42bc:	0e 94 0b 21 	call	0x4216	; 0x4216 <_ZN11FlexiTimer29_overflowEv>
}
    42c0:	ff 91       	pop	r31
    42c2:	ef 91       	pop	r30
    42c4:	bf 91       	pop	r27
    42c6:	af 91       	pop	r26
    42c8:	9f 91       	pop	r25
    42ca:	8f 91       	pop	r24
    42cc:	7f 91       	pop	r23
    42ce:	6f 91       	pop	r22
    42d0:	5f 91       	pop	r21
    42d2:	4f 91       	pop	r20
    42d4:	3f 91       	pop	r19
    42d6:	2f 91       	pop	r18
    42d8:	0f 90       	pop	r0
    42da:	0b be       	out	0x3b, r0	; 59
    42dc:	0f 90       	pop	r0
    42de:	0f be       	out	0x3f, r0	; 63
    42e0:	0f 90       	pop	r0
    42e2:	1f 90       	pop	r1
    42e4:	18 95       	reti

000042e6 <_ZN12FirmataClass11systemResetEv>:



// resets the system state upon a SYSTEM_RESET message from the host software
void FirmataClass::systemReset(void)
{
    42e6:	fc 01       	movw	r30, r24
  byte i;

  waitForData = 0; // this flag says the next serial input will be data
    42e8:	15 82       	std	Z+5, r1	; 0x05
  executeMultiByteCommand = 0; // execute this after getting multi-byte data
    42ea:	16 82       	std	Z+6, r1	; 0x06
  multiByteChannel = 0; // channel data for multiByteCommands
    42ec:	17 82       	std	Z+7, r1	; 0x07
    42ee:	80 e0       	ldi	r24, 0x00	; 0
    42f0:	90 e0       	ldi	r25, 0x00	; 0
//******************************************************************************



// resets the system state upon a SYSTEM_RESET message from the host software
void FirmataClass::systemReset(void)
    42f2:	df 01       	movw	r26, r30
    42f4:	a8 0f       	add	r26, r24
    42f6:	b9 1f       	adc	r27, r25
  executeMultiByteCommand = 0; // execute this after getting multi-byte data
  multiByteChannel = 0; // channel data for multiByteCommands


  for(i=0; i<MAX_DATA_BYTES; i++) {
    storedInputData[i] = 0;
    42f8:	18 96       	adiw	r26, 0x08	; 8
    42fa:	1c 92       	st	X, r1
    42fc:	01 96       	adiw	r24, 0x01	; 1
  waitForData = 0; // this flag says the next serial input will be data
  executeMultiByteCommand = 0; // execute this after getting multi-byte data
  multiByteChannel = 0; // channel data for multiByteCommands


  for(i=0; i<MAX_DATA_BYTES; i++) {
    42fe:	80 32       	cpi	r24, 0x20	; 32
    4300:	91 05       	cpc	r25, r1
    4302:	b9 f7       	brne	.-18     	; 0x42f2 <_ZN12FirmataClass11systemResetEv+0xc>
    storedInputData[i] = 0;
  }

  parsingSysex = false;
    4304:	10 a6       	std	Z+40, r1	; 0x28
  sysexBytesRead = 0;
    4306:	12 a6       	std	Z+42, r1	; 0x2a
    4308:	11 a6       	std	Z+41, r1	; 0x29

  if(currentSystemResetCallback)
    430a:	05 a8       	ldd	r0, Z+53	; 0x35
    430c:	f6 a9       	ldd	r31, Z+54	; 0x36
    430e:	e0 2d       	mov	r30, r0
    4310:	30 97       	sbiw	r30, 0x00	; 0
    4312:	09 f0       	breq	.+2      	; 0x4316 <_ZN12FirmataClass11systemResetEv+0x30>
    (*currentSystemResetCallback)();
    4314:	19 94       	eijmp
    4316:	08 95       	ret

00004318 <_GLOBAL__sub_I__ZN12FirmataClass23sendValueAsTwo7bitBytesEi>:

//******************************************************************************
//* Constructors
//******************************************************************************

FirmataClass::FirmataClass(Stream &s) : FirmataSerial(s)
    4318:	80 e6       	ldi	r24, 0x60	; 96
    431a:	95 e0       	ldi	r25, 0x05	; 5
    431c:	90 93 f8 07 	sts	0x07F8, r25
    4320:	80 93 f7 07 	sts	0x07F7, r24
{
  firmwareVersionCount = 0;
    4324:	10 92 f9 07 	sts	0x07F9, r1
  systemReset();
    4328:	87 ef       	ldi	r24, 0xF7	; 247
    432a:	97 e0       	ldi	r25, 0x07	; 7
    432c:	0c 94 73 21 	jmp	0x42e6	; 0x42e6 <_ZN12FirmataClass11systemResetEv>

00004330 <_ZN13AltSoftSerial4readEv>:

int AltSoftSerial::read(void)
{
	uint8_t head, tail, out;

	head = rx_buffer_head;
    4330:	90 91 d6 08 	lds	r25, 0x08D6
	tail = rx_buffer_tail;
    4334:	80 91 d5 08 	lds	r24, 0x08D5
	if (head == tail) return -1;
    4338:	98 17       	cp	r25, r24
    433a:	69 f0       	breq	.+26     	; 0x4356 <_ZN13AltSoftSerial4readEv+0x26>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    433c:	8f 5f       	subi	r24, 0xFF	; 255
    433e:	80 35       	cpi	r24, 0x50	; 80
    4340:	08 f0       	brcs	.+2      	; 0x4344 <_ZN13AltSoftSerial4readEv+0x14>
    4342:	80 e0       	ldi	r24, 0x00	; 0
	out = rx_buffer[tail];
    4344:	e8 2f       	mov	r30, r24
    4346:	f0 e0       	ldi	r31, 0x00	; 0
    4348:	eb 57       	subi	r30, 0x7B	; 123
    434a:	f7 4f       	sbci	r31, 0xF7	; 247
    434c:	20 81       	ld	r18, Z
	rx_buffer_tail = tail;
    434e:	80 93 d5 08 	sts	0x08D5, r24
	return out;
    4352:	30 e0       	ldi	r19, 0x00	; 0
    4354:	02 c0       	rjmp	.+4      	; 0x435a <_ZN13AltSoftSerial4readEv+0x2a>
{
	uint8_t head, tail, out;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    4356:	2f ef       	ldi	r18, 0xFF	; 255
    4358:	3f ef       	ldi	r19, 0xFF	; 255
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	out = rx_buffer[tail];
	rx_buffer_tail = tail;
	return out;
}
    435a:	c9 01       	movw	r24, r18
    435c:	08 95       	ret

0000435e <_ZN13AltSoftSerial4peekEv>:

int AltSoftSerial::peek(void)
{
	uint8_t head, tail;

	head = rx_buffer_head;
    435e:	80 91 d6 08 	lds	r24, 0x08D6
	tail = rx_buffer_tail;
    4362:	e0 91 d5 08 	lds	r30, 0x08D5
	if (head == tail) return -1;
    4366:	8e 17       	cp	r24, r30
    4368:	31 f0       	breq	.+12     	; 0x4376 <_ZN13AltSoftSerial4peekEv+0x18>
	return rx_buffer[tail];
    436a:	f0 e0       	ldi	r31, 0x00	; 0
    436c:	eb 57       	subi	r30, 0x7B	; 123
    436e:	f7 4f       	sbci	r31, 0xF7	; 247
    4370:	20 81       	ld	r18, Z
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	02 c0       	rjmp	.+4      	; 0x437a <_ZN13AltSoftSerial4peekEv+0x1c>
{
	uint8_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    4376:	2f ef       	ldi	r18, 0xFF	; 255
    4378:	3f ef       	ldi	r19, 0xFF	; 255
	return rx_buffer[tail];
}
    437a:	c9 01       	movw	r24, r18
    437c:	08 95       	ret

0000437e <_ZN13AltSoftSerial9availableEv>:

int AltSoftSerial::available(void)
{
	uint8_t head, tail;

	head = rx_buffer_head;
    437e:	50 91 d6 08 	lds	r21, 0x08D6
	tail = rx_buffer_tail;
    4382:	40 91 d5 08 	lds	r20, 0x08D5
    4386:	25 2f       	mov	r18, r21
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	84 2f       	mov	r24, r20
    438c:	90 e0       	ldi	r25, 0x00	; 0
	if (head >= tail) return head - tail;
    438e:	54 17       	cp	r21, r20
    4390:	08 f0       	brcs	.+2      	; 0x4394 <_ZN13AltSoftSerial9availableEv+0x16>
    4392:	02 c0       	rjmp	.+4      	; 0x4398 <_ZN13AltSoftSerial9availableEv+0x1a>
	return RX_BUFFER_SIZE + head - tail;
    4394:	20 5b       	subi	r18, 0xB0	; 176
    4396:	3f 4f       	sbci	r19, 0xFF	; 255
    4398:	28 1b       	sub	r18, r24
    439a:	39 0b       	sbc	r19, r25
}
    439c:	c9 01       	movw	r24, r18
    439e:	08 95       	ret

000043a0 <_ZN13AltSoftSerial4initEm>:
#ifndef INPUT_PULLUP
#define INPUT_PULLUP INPUT
#endif

void AltSoftSerial::init(uint32_t cycles_per_bit)
{
    43a0:	9b 01       	movw	r18, r22
    43a2:	ac 01       	movw	r20, r24
	if (cycles_per_bit < 7085) {
    43a4:	2d 3a       	cpi	r18, 0xAD	; 173
    43a6:	8b e1       	ldi	r24, 0x1B	; 27
    43a8:	38 07       	cpc	r19, r24
    43aa:	41 05       	cpc	r20, r1
    43ac:	51 05       	cpc	r21, r1
    43ae:	30 f4       	brcc	.+12     	; 0x43bc <_ZN13AltSoftSerial4initEm+0x1c>
		CONFIG_TIMER_NOPRESCALE();
    43b0:	10 92 73 00 	sts	0x0073, r1
    43b4:	10 92 20 01 	sts	0x0120, r1
    43b8:	81 e8       	ldi	r24, 0x81	; 129
    43ba:	12 c0       	rjmp	.+36     	; 0x43e0 <_ZN13AltSoftSerial4initEm+0x40>
	} else {
		cycles_per_bit /= 8;
    43bc:	63 e0       	ldi	r22, 0x03	; 3
    43be:	56 95       	lsr	r21
    43c0:	47 95       	ror	r20
    43c2:	37 95       	ror	r19
    43c4:	27 95       	ror	r18
    43c6:	6a 95       	dec	r22
    43c8:	d1 f7       	brne	.-12     	; 0x43be <_ZN13AltSoftSerial4initEm+0x1e>
		if (cycles_per_bit < 7085) {
    43ca:	2d 3a       	cpi	r18, 0xAD	; 173
    43cc:	8b e1       	ldi	r24, 0x1B	; 27
    43ce:	38 07       	cpc	r19, r24
    43d0:	41 05       	cpc	r20, r1
    43d2:	51 05       	cpc	r21, r1
    43d4:	b0 f5       	brcc	.+108    	; 0x4442 <_ZN13AltSoftSerial4initEm+0xa2>
			CONFIG_TIMER_PRESCALE_8();
    43d6:	10 92 73 00 	sts	0x0073, r1
    43da:	10 92 20 01 	sts	0x0120, r1
    43de:	82 e8       	ldi	r24, 0x82	; 130
    43e0:	80 93 21 01 	sts	0x0121, r24
		} else {
			return; // minimum 283 baud at 16 MHz clock
		}
	}
	ticks_per_bit = cycles_per_bit;
    43e4:	30 93 da 08 	sts	0x08DA, r19
    43e8:	20 93 d9 08 	sts	0x08D9, r18
	rx_stop_ticks = cycles_per_bit * 37 / 4;
    43ec:	a5 e2       	ldi	r26, 0x25	; 37
    43ee:	b0 e0       	ldi	r27, 0x00	; 0
    43f0:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__muluhisi3>
    43f4:	22 e0       	ldi	r18, 0x02	; 2
    43f6:	96 95       	lsr	r25
    43f8:	87 95       	ror	r24
    43fa:	77 95       	ror	r23
    43fc:	67 95       	ror	r22
    43fe:	2a 95       	dec	r18
    4400:	d1 f7       	brne	.-12     	; 0x43f6 <_ZN13AltSoftSerial4initEm+0x56>
    4402:	70 93 dc 08 	sts	0x08DC, r23
    4406:	60 93 db 08 	sts	0x08DB, r22
	pinMode(INPUT_CAPTURE_PIN, INPUT_PULLUP);
    440a:	62 e0       	ldi	r22, 0x02	; 2
    440c:	80 e3       	ldi	r24, 0x30	; 48
    440e:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <pinMode>
	digitalWrite(OUTPUT_COMPARE_A_PIN, HIGH);
    4412:	61 e0       	ldi	r22, 0x01	; 1
    4414:	8e e2       	ldi	r24, 0x2E	; 46
    4416:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <digitalWrite>
	pinMode(OUTPUT_COMPARE_A_PIN, OUTPUT);
    441a:	61 e0       	ldi	r22, 0x01	; 1
    441c:	8e e2       	ldi	r24, 0x2E	; 46
    441e:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <pinMode>
	rx_count = 0;
    4422:	10 92 d7 08 	sts	0x08D7, r1
	rx_buffer_head = 0;
    4426:	10 92 d6 08 	sts	0x08D6, r1
	rx_buffer_tail = 0;
    442a:	10 92 d5 08 	sts	0x08D5, r1
	tx_state = 0;
    442e:	10 92 84 08 	sts	0x0884, r1
	tx_buffer_head = 0;
    4432:	10 92 83 08 	sts	0x0883, r1
	tx_buffer_tail = 0;
    4436:	10 92 82 08 	sts	0x0882, r1
	ENABLE_INT_INPUT_CAPTURE();
    443a:	80 e2       	ldi	r24, 0x20	; 32
    443c:	8a bb       	out	0x1a, r24	; 26
    443e:	80 93 73 00 	sts	0x0073, r24
    4442:	08 95       	ret

00004444 <_ZN13AltSoftSerial9writeByteEh>:

void AltSoftSerial::writeByte(uint8_t b)
{
	uint8_t intr_state, head;

	head = tx_buffer_head + 1;
    4444:	90 91 83 08 	lds	r25, 0x0883
    4448:	9f 5f       	subi	r25, 0xFF	; 255
	if (head >= TX_BUFFER_SIZE) head = 0;
    444a:	94 34       	cpi	r25, 0x44	; 68
    444c:	08 f0       	brcs	.+2      	; 0x4450 <_ZN13AltSoftSerial9writeByteEh+0xc>
    444e:	90 e0       	ldi	r25, 0x00	; 0
	while (tx_buffer_tail == head) ; // wait until space in buffer
    4450:	20 91 82 08 	lds	r18, 0x0882
    4454:	29 17       	cp	r18, r25
    4456:	e1 f3       	breq	.-8      	; 0x4450 <_ZN13AltSoftSerial9writeByteEh+0xc>
	intr_state = SREG;
    4458:	2f b7       	in	r18, 0x3f	; 63
	cli();
    445a:	f8 94       	cli
	if (tx_state) {
    445c:	30 91 84 08 	lds	r19, 0x0884
    4460:	33 23       	and	r19, r19
    4462:	41 f0       	breq	.+16     	; 0x4474 <_ZN13AltSoftSerial9writeByteEh+0x30>
		tx_buffer[head] = b;
    4464:	e9 2f       	mov	r30, r25
    4466:	f0 e0       	ldi	r31, 0x00	; 0
    4468:	ee 5c       	subi	r30, 0xCE	; 206
    446a:	f7 4f       	sbci	r31, 0xF7	; 247
    446c:	80 83       	st	Z, r24
		tx_buffer_head = head;
    446e:	90 93 83 08 	sts	0x0883, r25
    4472:	1d c0       	rjmp	.+58     	; 0x44ae <_ZN13AltSoftSerial9writeByteEh+0x6a>
	} else {
		tx_state = 1;
    4474:	91 e0       	ldi	r25, 0x01	; 1
    4476:	90 93 84 08 	sts	0x0884, r25
		tx_byte = b;
    447a:	80 93 dd 08 	sts	0x08DD, r24
		tx_bit = 0;
    447e:	10 92 de 08 	sts	0x08DE, r1
		ENABLE_INT_COMPARE_A();
    4482:	82 e0       	ldi	r24, 0x02	; 2
    4484:	8a bb       	out	0x1a, r24	; 26
    4486:	80 91 73 00 	lds	r24, 0x0073
    448a:	82 60       	ori	r24, 0x02	; 2
    448c:	80 93 73 00 	sts	0x0073, r24
		CONFIG_MATCH_CLEAR();
    4490:	80 91 20 01 	lds	r24, 0x0120
    4494:	8f 73       	andi	r24, 0x3F	; 63
    4496:	80 68       	ori	r24, 0x80	; 128
    4498:	80 93 20 01 	sts	0x0120, r24
		SET_COMPARE_A(GET_TIMER_COUNT() + 16);
    449c:	80 91 24 01 	lds	r24, 0x0124
    44a0:	90 91 25 01 	lds	r25, 0x0125
    44a4:	40 96       	adiw	r24, 0x10	; 16
    44a6:	90 93 29 01 	sts	0x0129, r25
    44aa:	80 93 28 01 	sts	0x0128, r24
	}
	SREG = intr_state;
    44ae:	2f bf       	out	0x3f, r18	; 63
    44b0:	08 95       	ret

000044b2 <_ZN13AltSoftSerial5writeEh>:
    44b2:	86 2f       	mov	r24, r22
    44b4:	0e 94 22 22 	call	0x4444	; 0x4444 <_ZN13AltSoftSerial9writeByteEh>
    44b8:	81 e0       	ldi	r24, 0x01	; 1
    44ba:	90 e0       	ldi	r25, 0x00	; 0
    44bc:	08 95       	ret

000044be <__vector_47>:
}


ISR(COMPARE_A_INTERRUPT)
{
    44be:	1f 92       	push	r1
    44c0:	0f 92       	push	r0
    44c2:	0f b6       	in	r0, 0x3f	; 63
    44c4:	0f 92       	push	r0
    44c6:	11 24       	eor	r1, r1
    44c8:	0b b6       	in	r0, 0x3b	; 59
    44ca:	0f 92       	push	r0
    44cc:	1b be       	out	0x3b, r1	; 59
    44ce:	2f 93       	push	r18
    44d0:	3f 93       	push	r19
    44d2:	4f 93       	push	r20
    44d4:	5f 93       	push	r21
    44d6:	6f 93       	push	r22
    44d8:	7f 93       	push	r23
    44da:	8f 93       	push	r24
    44dc:	9f 93       	push	r25
    44de:	ef 93       	push	r30
    44e0:	ff 93       	push	r31
	uint8_t state, byte, bit, head, tail;
	uint16_t target;

	state = tx_state;
    44e2:	40 91 84 08 	lds	r20, 0x0884
	byte = tx_byte;
    44e6:	50 91 dd 08 	lds	r21, 0x08DD
	target = GET_COMPARE_A();
    44ea:	80 91 28 01 	lds	r24, 0x0128
    44ee:	90 91 29 01 	lds	r25, 0x0129
	while (state < 9) {
		target += ticks_per_bit;
    44f2:	20 91 d9 08 	lds	r18, 0x08D9
    44f6:	30 91 da 08 	lds	r19, 0x08DA
		bit = byte & 1;
		byte >>= 1;
		state++;
		if (bit != tx_bit) {
    44fa:	70 91 de 08 	lds	r23, 0x08DE
	uint16_t target;

	state = tx_state;
	byte = tx_byte;
	target = GET_COMPARE_A();
	while (state < 9) {
    44fe:	1d c0       	rjmp	.+58     	; 0x453a <__vector_47+0x7c>
		target += ticks_per_bit;
    4500:	82 0f       	add	r24, r18
    4502:	93 1f       	adc	r25, r19
		bit = byte & 1;
    4504:	65 2f       	mov	r22, r21
    4506:	61 70       	andi	r22, 0x01	; 1
		byte >>= 1;
    4508:	56 95       	lsr	r21
		state++;
    450a:	4f 5f       	subi	r20, 0xFF	; 255
		if (bit != tx_bit) {
    450c:	67 17       	cp	r22, r23
    450e:	a9 f0       	breq	.+42     	; 0x453a <__vector_47+0x7c>
			if (bit) {
				CONFIG_MATCH_SET();
    4510:	20 91 20 01 	lds	r18, 0x0120
		target += ticks_per_bit;
		bit = byte & 1;
		byte >>= 1;
		state++;
		if (bit != tx_bit) {
			if (bit) {
    4514:	66 23       	and	r22, r22
    4516:	11 f0       	breq	.+4      	; 0x451c <__vector_47+0x5e>
				CONFIG_MATCH_SET();
    4518:	20 6c       	ori	r18, 0xC0	; 192
    451a:	02 c0       	rjmp	.+4      	; 0x4520 <__vector_47+0x62>
			} else {
				CONFIG_MATCH_CLEAR();
    451c:	2f 73       	andi	r18, 0x3F	; 63
    451e:	20 68       	ori	r18, 0x80	; 128
    4520:	20 93 20 01 	sts	0x0120, r18
			}
			SET_COMPARE_A(target);
    4524:	90 93 29 01 	sts	0x0129, r25
    4528:	80 93 28 01 	sts	0x0128, r24
			tx_bit = bit;
    452c:	60 93 de 08 	sts	0x08DE, r22
			tx_byte = byte;
    4530:	50 93 dd 08 	sts	0x08DD, r21
			tx_state = state;
    4534:	40 93 84 08 	sts	0x0884, r20
			// TODO: how to detect timing_error?
			return;
    4538:	3f c0       	rjmp	.+126    	; 0x45b8 <__vector_47+0xfa>
	uint16_t target;

	state = tx_state;
	byte = tx_byte;
	target = GET_COMPARE_A();
	while (state < 9) {
    453a:	49 30       	cpi	r20, 0x09	; 9
    453c:	08 f3       	brcs	.-62     	; 0x4500 <__vector_47+0x42>
			tx_state = state;
			// TODO: how to detect timing_error?
			return;
		}
	}
	if (state == 9) {
    453e:	49 30       	cpi	r20, 0x09	; 9
    4540:	39 f4       	brne	.+14     	; 0x4550 <__vector_47+0x92>
		tx_state = 10;
    4542:	2a e0       	ldi	r18, 0x0A	; 10
    4544:	20 93 84 08 	sts	0x0884, r18
		CONFIG_MATCH_SET();
    4548:	20 91 20 01 	lds	r18, 0x0120
    454c:	20 6c       	ori	r18, 0xC0	; 192
    454e:	28 c0       	rjmp	.+80     	; 0x45a0 <__vector_47+0xe2>
		SET_COMPARE_A(target + ticks_per_bit);
		return;
	}
	head = tx_buffer_head;
    4550:	20 91 83 08 	lds	r18, 0x0883
	tail = tx_buffer_tail;
    4554:	e0 91 82 08 	lds	r30, 0x0882
	if (head == tail) {
    4558:	2e 13       	cpse	r18, r30
    455a:	0d c0       	rjmp	.+26     	; 0x4576 <__vector_47+0xb8>
		tx_state = 0;
    455c:	10 92 84 08 	sts	0x0884, r1
		CONFIG_MATCH_NORMAL();
    4560:	80 91 20 01 	lds	r24, 0x0120
    4564:	8f 73       	andi	r24, 0x3F	; 63
    4566:	80 93 20 01 	sts	0x0120, r24
		DISABLE_INT_COMPARE_A();
    456a:	80 91 73 00 	lds	r24, 0x0073
    456e:	8d 7f       	andi	r24, 0xFD	; 253
    4570:	80 93 73 00 	sts	0x0073, r24
    4574:	21 c0       	rjmp	.+66     	; 0x45b8 <__vector_47+0xfa>
	} else {
		tx_state = 1;
    4576:	21 e0       	ldi	r18, 0x01	; 1
    4578:	20 93 84 08 	sts	0x0884, r18
		if (++tail >= TX_BUFFER_SIZE) tail = 0;
    457c:	ef 5f       	subi	r30, 0xFF	; 255
    457e:	e4 34       	cpi	r30, 0x44	; 68
    4580:	08 f0       	brcs	.+2      	; 0x4584 <__vector_47+0xc6>
    4582:	e0 e0       	ldi	r30, 0x00	; 0
		tx_buffer_tail = tail;
    4584:	e0 93 82 08 	sts	0x0882, r30
		tx_byte = tx_buffer[tail];
    4588:	f0 e0       	ldi	r31, 0x00	; 0
    458a:	ee 5c       	subi	r30, 0xCE	; 206
    458c:	f7 4f       	sbci	r31, 0xF7	; 247
    458e:	20 81       	ld	r18, Z
    4590:	20 93 dd 08 	sts	0x08DD, r18
		tx_bit = 0;
    4594:	10 92 de 08 	sts	0x08DE, r1
		CONFIG_MATCH_CLEAR();
    4598:	20 91 20 01 	lds	r18, 0x0120
    459c:	2f 73       	andi	r18, 0x3F	; 63
    459e:	20 68       	ori	r18, 0x80	; 128
    45a0:	20 93 20 01 	sts	0x0120, r18
		SET_COMPARE_A(target + ticks_per_bit);
    45a4:	20 91 d9 08 	lds	r18, 0x08D9
    45a8:	30 91 da 08 	lds	r19, 0x08DA
    45ac:	28 0f       	add	r18, r24
    45ae:	39 1f       	adc	r19, r25
    45b0:	30 93 29 01 	sts	0x0129, r19
    45b4:	20 93 28 01 	sts	0x0128, r18
		// TODO: how to detect timing_error?
	}
}
    45b8:	ff 91       	pop	r31
    45ba:	ef 91       	pop	r30
    45bc:	9f 91       	pop	r25
    45be:	8f 91       	pop	r24
    45c0:	7f 91       	pop	r23
    45c2:	6f 91       	pop	r22
    45c4:	5f 91       	pop	r21
    45c6:	4f 91       	pop	r20
    45c8:	3f 91       	pop	r19
    45ca:	2f 91       	pop	r18
    45cc:	0f 90       	pop	r0
    45ce:	0b be       	out	0x3b, r0	; 59
    45d0:	0f 90       	pop	r0
    45d2:	0f be       	out	0x3f, r0	; 63
    45d4:	0f 90       	pop	r0
    45d6:	1f 90       	pop	r1
    45d8:	18 95       	reti

000045da <_ZN13AltSoftSerial11flushOutputEv>:

void AltSoftSerial::flushOutput(void)
{
	while (tx_state) /* wait */ ;
    45da:	80 91 84 08 	lds	r24, 0x0884
    45de:	81 11       	cpse	r24, r1
    45e0:	fc cf       	rjmp	.-8      	; 0x45da <_ZN13AltSoftSerial11flushOutputEv>
}
    45e2:	08 95       	ret

000045e4 <_ZN13AltSoftSerial5flushEv>:
    45e4:	0c 94 ed 22 	jmp	0x45da	; 0x45da <_ZN13AltSoftSerial11flushOutputEv>

000045e8 <__vector_46>:
/****************************************/
/**            Reception               **/
/****************************************/

ISR(CAPTURE_INTERRUPT)
{
    45e8:	1f 92       	push	r1
    45ea:	0f 92       	push	r0
    45ec:	0f b6       	in	r0, 0x3f	; 63
    45ee:	0f 92       	push	r0
    45f0:	11 24       	eor	r1, r1
    45f2:	0b b6       	in	r0, 0x3b	; 59
    45f4:	0f 92       	push	r0
    45f6:	1b be       	out	0x3b, r1	; 59
    45f8:	2f 93       	push	r18
    45fa:	3f 93       	push	r19
    45fc:	4f 93       	push	r20
    45fe:	8f 93       	push	r24
    4600:	9f 93       	push	r25
    4602:	ef 93       	push	r30
    4604:	ff 93       	push	r31
	uint8_t count;
	uint16_t capture, current;

	capture = GET_INPUT_CAPTURE();
    4606:	80 91 26 01 	lds	r24, 0x0126
    460a:	90 91 27 01 	lds	r25, 0x0127
	count = rx_count;
    460e:	40 91 d7 08 	lds	r20, 0x08D7
	if (count & 1) {
		CONFIG_CAPTURE_FALLING_EDGE();
    4612:	20 91 21 01 	lds	r18, 0x0121
	uint8_t count;
	uint16_t capture, current;

	capture = GET_INPUT_CAPTURE();
	count = rx_count;
	if (count & 1) {
    4616:	40 ff       	sbrs	r20, 0
    4618:	04 c0       	rjmp	.+8      	; 0x4622 <__vector_46+0x3a>
		CONFIG_CAPTURE_FALLING_EDGE();
    461a:	2f 7b       	andi	r18, 0xBF	; 191
    461c:	20 93 21 01 	sts	0x0121, r18
    4620:	1b c0       	rjmp	.+54     	; 0x4658 <__vector_46+0x70>
	} else {
		CONFIG_CAPTURE_RISING_EDGE();
    4622:	20 64       	ori	r18, 0x40	; 64
    4624:	20 93 21 01 	sts	0x0121, r18
	}
	if (count == 0) {
    4628:	41 11       	cpse	r20, r1
    462a:	16 c0       	rjmp	.+44     	; 0x4658 <__vector_46+0x70>
		SET_COMPARE_B(capture + rx_stop_ticks);
    462c:	20 91 db 08 	lds	r18, 0x08DB
    4630:	30 91 dc 08 	lds	r19, 0x08DC
    4634:	28 0f       	add	r18, r24
    4636:	39 1f       	adc	r19, r25
    4638:	30 93 2b 01 	sts	0x012B, r19
    463c:	20 93 2a 01 	sts	0x012A, r18
		ENABLE_INT_COMPARE_B();
    4640:	24 e0       	ldi	r18, 0x04	; 4
    4642:	2a bb       	out	0x1a, r18	; 26
    4644:	20 91 73 00 	lds	r18, 0x0073
    4648:	24 60       	ori	r18, 0x04	; 4
    464a:	20 93 73 00 	sts	0x0073, r18
		rx_event[0] = capture;
    464e:	90 93 e0 08 	sts	0x08E0, r25
    4652:	80 93 df 08 	sts	0x08DF, r24
    4656:	0a c0       	rjmp	.+20     	; 0x466c <__vector_46+0x84>
	} else if (count < MAX_RX_EVENTS) {
    4658:	4a 30       	cpi	r20, 0x0A	; 10
    465a:	40 f4       	brcc	.+16     	; 0x466c <__vector_46+0x84>
		rx_event[count] = capture;
    465c:	e4 2f       	mov	r30, r20
    465e:	f0 e0       	ldi	r31, 0x00	; 0
    4660:	ee 0f       	add	r30, r30
    4662:	ff 1f       	adc	r31, r31
    4664:	e1 52       	subi	r30, 0x21	; 33
    4666:	f7 4f       	sbci	r31, 0xF7	; 247
    4668:	91 83       	std	Z+1, r25	; 0x01
    466a:	80 83       	st	Z, r24
	}
	rx_count = count + 1;
    466c:	4f 5f       	subi	r20, 0xFF	; 255
    466e:	40 93 d7 08 	sts	0x08D7, r20
	if (GET_TIMER_COUNT() - capture > ticks_per_bit) {
    4672:	20 91 24 01 	lds	r18, 0x0124
    4676:	30 91 25 01 	lds	r19, 0x0125
    467a:	28 1b       	sub	r18, r24
    467c:	39 0b       	sbc	r19, r25
    467e:	80 91 d9 08 	lds	r24, 0x08D9
    4682:	90 91 da 08 	lds	r25, 0x08DA
    4686:	82 17       	cp	r24, r18
    4688:	93 07       	cpc	r25, r19
    468a:	18 f4       	brcc	.+6      	; 0x4692 <__vector_46+0xaa>
		AltSoftSerial::timing_error = true;
    468c:	81 e0       	ldi	r24, 0x01	; 1
    468e:	80 93 d8 08 	sts	0x08D8, r24
	}
}
    4692:	ff 91       	pop	r31
    4694:	ef 91       	pop	r30
    4696:	9f 91       	pop	r25
    4698:	8f 91       	pop	r24
    469a:	4f 91       	pop	r20
    469c:	3f 91       	pop	r19
    469e:	2f 91       	pop	r18
    46a0:	0f 90       	pop	r0
    46a2:	0b be       	out	0x3b, r0	; 59
    46a4:	0f 90       	pop	r0
    46a6:	0f be       	out	0x3f, r0	; 63
    46a8:	0f 90       	pop	r0
    46aa:	1f 90       	pop	r1
    46ac:	18 95       	reti

000046ae <__vector_48>:
	}
	return out;
}

ISR(COMPARE_B_INTERRUPT)
{
    46ae:	1f 92       	push	r1
    46b0:	0f 92       	push	r0
    46b2:	0f b6       	in	r0, 0x3f	; 63
    46b4:	0f 92       	push	r0
    46b6:	11 24       	eor	r1, r1
    46b8:	0b b6       	in	r0, 0x3b	; 59
    46ba:	0f 92       	push	r0
    46bc:	1b be       	out	0x3b, r1	; 59
    46be:	af 92       	push	r10
    46c0:	bf 92       	push	r11
    46c2:	cf 92       	push	r12
    46c4:	df 92       	push	r13
    46c6:	ef 92       	push	r14
    46c8:	ff 92       	push	r15
    46ca:	0f 93       	push	r16
    46cc:	1f 93       	push	r17
    46ce:	2f 93       	push	r18
    46d0:	3f 93       	push	r19
    46d2:	4f 93       	push	r20
    46d4:	5f 93       	push	r21
    46d6:	6f 93       	push	r22
    46d8:	7f 93       	push	r23
    46da:	8f 93       	push	r24
    46dc:	9f 93       	push	r25
    46de:	af 93       	push	r26
    46e0:	bf 93       	push	r27
    46e2:	cf 93       	push	r28
    46e4:	df 93       	push	r29
    46e6:	ef 93       	push	r30
    46e8:	ff 93       	push	r31
	uint8_t head;

	DISABLE_INT_COMPARE_B();
    46ea:	80 91 73 00 	lds	r24, 0x0073
    46ee:	8b 7f       	andi	r24, 0xFB	; 251
    46f0:	80 93 73 00 	sts	0x0073, r24
	CONFIG_CAPTURE_FALLING_EDGE();
    46f4:	80 91 21 01 	lds	r24, 0x0121
    46f8:	8f 7b       	andi	r24, 0xBF	; 191
    46fa:	80 93 21 01 	sts	0x0121, r24
	head = rx_buffer_head + 1;
    46fe:	10 91 d6 08 	lds	r17, 0x08D6
    4702:	1f 5f       	subi	r17, 0xFF	; 255
	if (head >= RX_BUFFER_SIZE) head = 0;
    4704:	10 35       	cpi	r17, 0x50	; 80
    4706:	08 f0       	brcs	.+2      	; 0x470a <__vector_48+0x5c>
    4708:	10 e0       	ldi	r17, 0x00	; 0
	if (head != rx_buffer_tail) {
    470a:	80 91 d5 08 	lds	r24, 0x08D5
    470e:	18 17       	cp	r17, r24
    4710:	e9 f1       	breq	.+122    	; 0x478c <__vector_48+0xde>
		rx_buffer[head] = analyze(rx_count);
    4712:	c1 2f       	mov	r28, r17
    4714:	d0 e0       	ldi	r29, 0x00	; 0
    4716:	00 91 d7 08 	lds	r16, 0x08D7
    471a:	0b 30       	cpi	r16, 0x0B	; 11
    471c:	08 f0       	brcs	.+2      	; 0x4720 <__vector_48+0x72>
    471e:	0a e0       	ldi	r16, 0x0A	; 10
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
    4720:	60 91 df 08 	lds	r22, 0x08DF
    4724:	70 91 e0 08 	lds	r23, 0x08E0
	target = ticks_per_bit + ticks_per_bit / 2;
    4728:	20 91 d9 08 	lds	r18, 0x08D9
    472c:	30 91 da 08 	lds	r19, 0x08DA
    4730:	c9 01       	movw	r24, r18
    4732:	96 95       	lsr	r25
    4734:	87 95       	ror	r24
    4736:	82 0f       	add	r24, r18
    4738:	93 1f       	adc	r25, r19

static inline uint8_t analyze(uint8_t count)
{
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
	uint16_t begin, tmp, target, now=0;
    473a:	40 e0       	ldi	r20, 0x00	; 0
    473c:	50 e0       	ldi	r21, 0x00	; 0
}

static inline uint8_t analyze(uint8_t count)
{
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
    473e:	e1 2c       	mov	r14, r1
    4740:	dd 24       	eor	r13, r13
    4742:	d3 94       	inc	r13
    4744:	ff 24       	eor	r15, r15
    4746:	fa 94       	dec	r15
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
    4748:	e1 ee       	ldi	r30, 0xE1	; 225
    474a:	f8 e0       	ldi	r31, 0x08	; 8
		while (now >= target) {
			if (state == 0) out &= ~mask;
			mask <<= 1;
			target += ticks_per_bit;
		}
		state ^= 1;
    474c:	cc 24       	eor	r12, r12
    474e:	c3 94       	inc	r12
    4750:	15 c0       	rjmp	.+42     	; 0x477c <__vector_48+0xce>

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
    4752:	a1 91       	ld	r26, Z+
    4754:	b1 91       	ld	r27, Z+
		now += tmp - begin;
    4756:	5d 01       	movw	r10, r26
    4758:	a6 1a       	sub	r10, r22
    475a:	b7 0a       	sbc	r11, r23
    475c:	4a 0d       	add	r20, r10
    475e:	5b 1d       	adc	r21, r11
    4760:	08 c0       	rjmp	.+16     	; 0x4772 <__vector_48+0xc4>
		begin = tmp;
		while (now >= target) {
			if (state == 0) out &= ~mask;
    4762:	e1 10       	cpse	r14, r1
    4764:	03 c0       	rjmp	.+6      	; 0x476c <__vector_48+0xbe>
    4766:	6d 2d       	mov	r22, r13
    4768:	60 95       	com	r22
    476a:	f6 22       	and	r15, r22
			mask <<= 1;
    476c:	dd 0c       	add	r13, r13
			target += ticks_per_bit;
    476e:	82 0f       	add	r24, r18
    4770:	93 1f       	adc	r25, r19
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
		now += tmp - begin;
		begin = tmp;
		while (now >= target) {
    4772:	48 17       	cp	r20, r24
    4774:	59 07       	cpc	r21, r25
    4776:	a8 f7       	brcc	.-22     	; 0x4762 <__vector_48+0xb4>
			if (state == 0) out &= ~mask;
			mask <<= 1;
			target += ticks_per_bit;
		}
		state ^= 1;
    4778:	ec 24       	eor	r14, r12
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
		now += tmp - begin;
		begin = tmp;
    477a:	bd 01       	movw	r22, r26
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
    477c:	01 50       	subi	r16, 0x01	; 1
    477e:	49 f7       	brne	.-46     	; 0x4752 <__vector_48+0xa4>
	DISABLE_INT_COMPARE_B();
	CONFIG_CAPTURE_FALLING_EDGE();
	head = rx_buffer_head + 1;
	if (head >= RX_BUFFER_SIZE) head = 0;
	if (head != rx_buffer_tail) {
		rx_buffer[head] = analyze(rx_count);
    4780:	fe 01       	movw	r30, r28
    4782:	eb 57       	subi	r30, 0x7B	; 123
    4784:	f7 4f       	sbci	r31, 0xF7	; 247
    4786:	f0 82       	st	Z, r15
		rx_buffer_head = head;
    4788:	10 93 d6 08 	sts	0x08D6, r17
	}
	rx_count = 0;
    478c:	10 92 d7 08 	sts	0x08D7, r1
}
    4790:	ff 91       	pop	r31
    4792:	ef 91       	pop	r30
    4794:	df 91       	pop	r29
    4796:	cf 91       	pop	r28
    4798:	bf 91       	pop	r27
    479a:	af 91       	pop	r26
    479c:	9f 91       	pop	r25
    479e:	8f 91       	pop	r24
    47a0:	7f 91       	pop	r23
    47a2:	6f 91       	pop	r22
    47a4:	5f 91       	pop	r21
    47a6:	4f 91       	pop	r20
    47a8:	3f 91       	pop	r19
    47aa:	2f 91       	pop	r18
    47ac:	1f 91       	pop	r17
    47ae:	0f 91       	pop	r16
    47b0:	ff 90       	pop	r15
    47b2:	ef 90       	pop	r14
    47b4:	df 90       	pop	r13
    47b6:	cf 90       	pop	r12
    47b8:	bf 90       	pop	r11
    47ba:	af 90       	pop	r10
    47bc:	0f 90       	pop	r0
    47be:	0b be       	out	0x3b, r0	; 59
    47c0:	0f 90       	pop	r0
    47c2:	0f be       	out	0x3f, r0	; 63
    47c4:	0f 90       	pop	r0
    47c6:	1f 90       	pop	r1
    47c8:	18 95       	reti

000047ca <_ZN13AltSoftSerial10flushInputEv>:
	return RX_BUFFER_SIZE + head - tail;
}

void AltSoftSerial::flushInput(void)
{
	rx_buffer_head = rx_buffer_tail;
    47ca:	80 91 d5 08 	lds	r24, 0x08D5
    47ce:	80 93 d6 08 	sts	0x08D6, r24
    47d2:	08 95       	ret

000047d4 <_ZN13AltSoftSerial3endEv>:
	tx_buffer_tail = 0;
	ENABLE_INT_INPUT_CAPTURE();
}

void AltSoftSerial::end(void)
{
    47d4:	cf 93       	push	r28
    47d6:	df 93       	push	r29
	DISABLE_INT_COMPARE_B();
    47d8:	c3 e7       	ldi	r28, 0x73	; 115
    47da:	d0 e0       	ldi	r29, 0x00	; 0
    47dc:	88 81       	ld	r24, Y
    47de:	8b 7f       	andi	r24, 0xFB	; 251
    47e0:	88 83       	st	Y, r24
	DISABLE_INT_INPUT_CAPTURE();
    47e2:	88 81       	ld	r24, Y
    47e4:	8f 7d       	andi	r24, 0xDF	; 223
    47e6:	88 83       	st	Y, r24
	flushInput();
    47e8:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_ZN13AltSoftSerial10flushInputEv>
	flushOutput();
    47ec:	0e 94 ed 22 	call	0x45da	; 0x45da <_ZN13AltSoftSerial11flushOutputEv>
	DISABLE_INT_COMPARE_A();
    47f0:	88 81       	ld	r24, Y
    47f2:	8d 7f       	andi	r24, 0xFD	; 253
    47f4:	88 83       	st	Y, r24
	// TODO: restore timer to original settings?
}
    47f6:	df 91       	pop	r29
    47f8:	cf 91       	pop	r28
    47fa:	08 95       	ret

000047fc <_ZN5AlarmD1Ev>:
	pinMode(alarmPin1, OUTPUT);
	pinMode(alarmPin2, OUTPUT);
	pinMode(alarmPin3, OUTPUT);
}

Alarm::~Alarm() {
    47fc:	28 e2       	ldi	r18, 0x28	; 40
    47fe:	32 e0       	ldi	r19, 0x02	; 2
    4800:	fc 01       	movw	r30, r24
    4802:	31 83       	std	Z+1, r19	; 0x01
    4804:	20 83       	st	Z, r18
    4806:	08 95       	ret

00004808 <_ZN5AlarmD0Ev>:
    4808:	28 e2       	ldi	r18, 0x28	; 40
    480a:	32 e0       	ldi	r19, 0x02	; 2
    480c:	fc 01       	movw	r30, r24
    480e:	31 83       	std	Z+1, r19	; 0x01
    4810:	20 83       	st	Z, r18

}
    4812:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <_ZdlPv>

00004816 <_ZN5AlarmC1EP14FreeBoardModel>:
 *      Author: robert
 */

#include "Alarm.h"

Alarm::Alarm(FreeBoardModel* model) {
    4816:	fc 01       	movw	r30, r24
    4818:	cb 01       	movw	r24, r22
    481a:	28 e2       	ldi	r18, 0x28	; 40
    481c:	32 e0       	ldi	r19, 0x02	; 2
    481e:	31 83       	std	Z+1, r19	; 0x01
    4820:	20 83       	st	Z, r18
	this->model=model;
    4822:	73 83       	std	Z+3, r23	; 0x03
    4824:	62 83       	std	Z+2, r22	; 0x02
	alarmBeepState=false;
    4826:	14 82       	std	Z+4, r1	; 0x04
	model->setAlarmLast(0);
    4828:	40 e0       	ldi	r20, 0x00	; 0
    482a:	50 e0       	ldi	r21, 0x00	; 0
    482c:	ba 01       	movw	r22, r20
    482e:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <_ZN14FreeBoardModel12setAlarmLastEm>
	pinMode(alarmPin0, OUTPUT);
    4832:	61 e0       	ldi	r22, 0x01	; 1
    4834:	86 e1       	ldi	r24, 0x16	; 22
    4836:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <pinMode>
	pinMode(alarmPin1, OUTPUT);
    483a:	61 e0       	ldi	r22, 0x01	; 1
    483c:	87 e1       	ldi	r24, 0x17	; 23
    483e:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <pinMode>
	pinMode(alarmPin2, OUTPUT);
    4842:	61 e0       	ldi	r22, 0x01	; 1
    4844:	88 e1       	ldi	r24, 0x18	; 24
    4846:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <pinMode>
	pinMode(alarmPin3, OUTPUT);
    484a:	61 e0       	ldi	r22, 0x01	; 1
    484c:	89 e1       	ldi	r24, 0x19	; 25
    484e:	0c 94 26 17 	jmp	0x2e4c	; 0x2e4c <pinMode>

00004852 <_ZN5Alarm14checkWindAlarmEv>:
		digitalWrite(alarmPin2, LOW);
		digitalWrite(alarmPin3, LOW);
	}
}

void Alarm::checkWindAlarm(){
    4852:	cf 92       	push	r12
    4854:	df 92       	push	r13
    4856:	ef 92       	push	r14
    4858:	ff 92       	push	r15
    485a:	cf 93       	push	r28
    485c:	df 93       	push	r29
    485e:	ec 01       	movw	r28, r24
	//check alarm val
		if (model->isWindAlarmOn() && model->getWindAlarmSpeed() > 0
    4860:	8a 81       	ldd	r24, Y+2	; 0x02
    4862:	9b 81       	ldd	r25, Y+3	; 0x03
    4864:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN14FreeBoardModel13isWindAlarmOnEv>
    4868:	88 23       	and	r24, r24
    486a:	11 f1       	breq	.+68     	; 0x48b0 <_ZN5Alarm14checkWindAlarmEv+0x5e>
    486c:	8a 81       	ldd	r24, Y+2	; 0x02
    486e:	9b 81       	ldd	r25, Y+3	; 0x03
    4870:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <_ZN14FreeBoardModel17getWindAlarmSpeedEv>
    4874:	18 16       	cp	r1, r24
    4876:	19 06       	cpc	r1, r25
    4878:	dc f4       	brge	.+54     	; 0x48b0 <_ZN5Alarm14checkWindAlarmEv+0x5e>
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
    487a:	8a 81       	ldd	r24, Y+2	; 0x02
    487c:	9b 81       	ldd	r25, Y+3	; 0x03
    487e:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <_ZN14FreeBoardModel14getWindAverageEv>
    4882:	6b 01       	movw	r12, r22
    4884:	7c 01       	movw	r14, r24
    4886:	8a 81       	ldd	r24, Y+2	; 0x02
    4888:	9b 81       	ldd	r25, Y+3	; 0x03
    488a:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <_ZN14FreeBoardModel17getWindAlarmSpeedEv>
	}
}

void Alarm::checkWindAlarm(){
	//check alarm val
		if (model->isWindAlarmOn() && model->getWindAlarmSpeed() > 0
    488e:	bc 01       	movw	r22, r24
    4890:	88 27       	eor	r24, r24
    4892:	77 fd       	sbrc	r23, 7
    4894:	80 95       	com	r24
    4896:	98 2f       	mov	r25, r24
    4898:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__floatsisf>
    489c:	9b 01       	movw	r18, r22
    489e:	ac 01       	movw	r20, r24
    48a0:	c7 01       	movw	r24, r14
    48a2:	b6 01       	movw	r22, r12
    48a4:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    48a8:	18 16       	cp	r1, r24
    48aa:	14 f4       	brge	.+4      	; 0x48b0 <_ZN5Alarm14checkWindAlarmEv+0x5e>
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
			//TODO: Alarm snooze, better handling of this
			//setSnoozeAlarm(0);
			model->setWindAlarmTriggered(true);
    48ac:	61 e0       	ldi	r22, 0x01	; 1
    48ae:	01 c0       	rjmp	.+2      	; 0x48b2 <_ZN5Alarm14checkWindAlarmEv+0x60>
		} else {
			model->setWindAlarmTriggered(false);
    48b0:	60 e0       	ldi	r22, 0x00	; 0
    48b2:	8a 81       	ldd	r24, Y+2	; 0x02
    48b4:	9b 81       	ldd	r25, Y+3	; 0x03
		}
}
    48b6:	df 91       	pop	r29
    48b8:	cf 91       	pop	r28
    48ba:	ff 90       	pop	r15
    48bc:	ef 90       	pop	r14
    48be:	df 90       	pop	r13
    48c0:	cf 90       	pop	r12
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
			//TODO: Alarm snooze, better handling of this
			//setSnoozeAlarm(0);
			model->setWindAlarmTriggered(true);
		} else {
			model->setWindAlarmTriggered(false);
    48c2:	0c 94 f3 2e 	jmp	0x5de6	; 0x5de6 <_ZN14FreeBoardModel21setWindAlarmTriggeredEb>

000048c6 <_ZN6AnchorD1Ev>:

	this->model=model;
	resetAnchorBox(model->getAnchorLat(), model->getAnchorLon());
}

Anchor::~Anchor(){
    48c6:	20 e3       	ldi	r18, 0x30	; 48
    48c8:	32 e0       	ldi	r19, 0x02	; 2
    48ca:	fc 01       	movw	r30, r24
    48cc:	31 83       	std	Z+1, r19	; 0x01
    48ce:	20 83       	st	Z, r18
    48d0:	08 95       	ret

000048d2 <_ZN6AnchorD0Ev>:
    48d2:	20 e3       	ldi	r18, 0x30	; 48
    48d4:	32 e0       	ldi	r19, 0x02	; 2
    48d6:	fc 01       	movw	r30, r24
    48d8:	31 83       	std	Z+1, r19	; 0x01
    48da:	20 83       	st	Z, r18

}
    48dc:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <_ZdlPv>

000048e0 <_ZN6Anchor15updateAnchorBoxEff>:


/* Adjust the size of the anchor box. Will not go smaller than MINMTRS */
void Anchor::updateAnchorBox(float laty, float lonx) {
    48e0:	2f 92       	push	r2
    48e2:	3f 92       	push	r3
    48e4:	4f 92       	push	r4
    48e6:	5f 92       	push	r5
    48e8:	6f 92       	push	r6
    48ea:	7f 92       	push	r7
    48ec:	8f 92       	push	r8
    48ee:	9f 92       	push	r9
    48f0:	af 92       	push	r10
    48f2:	bf 92       	push	r11
    48f4:	cf 92       	push	r12
    48f6:	df 92       	push	r13
    48f8:	ef 92       	push	r14
    48fa:	ff 92       	push	r15
    48fc:	0f 93       	push	r16
    48fe:	1f 93       	push	r17
    4900:	cf 93       	push	r28
    4902:	df 93       	push	r29
    4904:	00 d0       	rcall	.+0      	; 0x4906 <_ZN6Anchor15updateAnchorBoxEff+0x26>
    4906:	00 d0       	rcall	.+0      	; 0x4908 <_ZN6Anchor15updateAnchorBoxEff+0x28>
    4908:	cd b7       	in	r28, 0x3d	; 61
    490a:	de b7       	in	r29, 0x3e	; 62
    490c:	9e 83       	std	Y+6, r25	; 0x06
    490e:	8d 83       	std	Y+5, r24	; 0x05
    4910:	4a 01       	movw	r8, r20
    4912:	5b 01       	movw	r10, r22
    4914:	68 01       	movw	r12, r16
    4916:	79 01       	movw	r14, r18
	//TODO: error testing around 0, 90, 180deg

	float n = laty + model->getAnchorRadiusDeg();
    4918:	fc 01       	movw	r30, r24
    491a:	82 81       	ldd	r24, Z+2	; 0x02
    491c:	93 81       	ldd	r25, Z+3	; 0x03
    491e:	0e 94 19 2b 	call	0x5632	; 0x5632 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    4922:	9b 01       	movw	r18, r22
    4924:	ac 01       	movw	r20, r24
    4926:	c5 01       	movw	r24, r10
    4928:	b4 01       	movw	r22, r8
    492a:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    492e:	69 83       	std	Y+1, r22	; 0x01
    4930:	7a 83       	std	Y+2, r23	; 0x02
    4932:	1c 01       	movw	r2, r24
	float s = laty - model->getAnchorRadiusDeg();
    4934:	ed 81       	ldd	r30, Y+5	; 0x05
    4936:	fe 81       	ldd	r31, Y+6	; 0x06
    4938:	82 81       	ldd	r24, Z+2	; 0x02
    493a:	93 81       	ldd	r25, Z+3	; 0x03
    493c:	0e 94 19 2b 	call	0x5632	; 0x5632 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    4940:	9b 01       	movw	r18, r22
    4942:	ac 01       	movw	r20, r24
    4944:	c5 01       	movw	r24, r10
    4946:	b4 01       	movw	r22, r8
    4948:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    494c:	2b 01       	movw	r4, r22
    494e:	3c 01       	movw	r6, r24
	float e = lonx + model->getAnchorRadiusDeg();
    4950:	ed 81       	ldd	r30, Y+5	; 0x05
    4952:	fe 81       	ldd	r31, Y+6	; 0x06
    4954:	82 81       	ldd	r24, Z+2	; 0x02
    4956:	93 81       	ldd	r25, Z+3	; 0x03
    4958:	0e 94 19 2b 	call	0x5632	; 0x5632 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    495c:	9b 01       	movw	r18, r22
    495e:	ac 01       	movw	r20, r24
    4960:	c7 01       	movw	r24, r14
    4962:	b6 01       	movw	r22, r12
    4964:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    4968:	4b 01       	movw	r8, r22
    496a:	5c 01       	movw	r10, r24
	float w = lonx - model->getAnchorRadiusDeg();
    496c:	ed 81       	ldd	r30, Y+5	; 0x05
    496e:	fe 81       	ldd	r31, Y+6	; 0x06
    4970:	82 81       	ldd	r24, Z+2	; 0x02
    4972:	93 81       	ldd	r25, Z+3	; 0x03
    4974:	0e 94 19 2b 	call	0x5632	; 0x5632 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    4978:	9b 01       	movw	r18, r22
    497a:	ac 01       	movw	r20, r24
    497c:	c7 01       	movw	r24, r14
    497e:	b6 01       	movw	r22, r12
    4980:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    4984:	16 2f       	mov	r17, r22
    4986:	7b 83       	std	Y+3, r23	; 0x03
    4988:	8c 83       	std	Y+4, r24	; 0x04
    498a:	09 2f       	mov	r16, r25
	//shrink anchor box if we can
	if ((n - MINMTRS) > model->getAnchorS() && n < model->getAnchorN())
    498c:	ed 81       	ldd	r30, Y+5	; 0x05
    498e:	fe 81       	ldd	r31, Y+6	; 0x06
    4990:	82 81       	ldd	r24, Z+2	; 0x02
    4992:	93 81       	ldd	r25, Z+3	; 0x03
    4994:	0e 94 23 2b 	call	0x5646	; 0x5646 <_ZN14FreeBoardModel10getAnchorSEv>
    4998:	6b 01       	movw	r12, r22
    499a:	7c 01       	movw	r14, r24
    499c:	24 e8       	ldi	r18, 0x84	; 132
    499e:	3a eb       	ldi	r19, 0xBA	; 186
    49a0:	4c e3       	ldi	r20, 0x3C	; 60
    49a2:	58 e3       	ldi	r21, 0x38	; 56
    49a4:	b9 81       	ldd	r27, Y+1	; 0x01
    49a6:	aa 81       	ldd	r26, Y+2	; 0x02
    49a8:	6b 2f       	mov	r22, r27
    49aa:	7a 2f       	mov	r23, r26
    49ac:	82 2d       	mov	r24, r2
    49ae:	93 2d       	mov	r25, r3
    49b0:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    49b4:	a7 01       	movw	r20, r14
    49b6:	96 01       	movw	r18, r12
    49b8:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    49bc:	18 16       	cp	r1, r24
    49be:	94 f4       	brge	.+36     	; 0x49e4 <_ZN6Anchor15updateAnchorBoxEff+0x104>
    49c0:	ed 81       	ldd	r30, Y+5	; 0x05
    49c2:	fe 81       	ldd	r31, Y+6	; 0x06
    49c4:	82 81       	ldd	r24, Z+2	; 0x02
    49c6:	93 81       	ldd	r25, Z+3	; 0x03
    49c8:	0e 94 03 2b 	call	0x5606	; 0x5606 <_ZN14FreeBoardModel10getAnchorNEv>
    49cc:	9b 01       	movw	r18, r22
    49ce:	ac 01       	movw	r20, r24
    49d0:	b9 81       	ldd	r27, Y+1	; 0x01
    49d2:	aa 81       	ldd	r26, Y+2	; 0x02
    49d4:	6b 2f       	mov	r22, r27
    49d6:	7a 2f       	mov	r23, r26
    49d8:	82 2d       	mov	r24, r2
    49da:	93 2d       	mov	r25, r3
    49dc:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    49e0:	87 fd       	sbrc	r24, 7
    49e2:	7e c0       	rjmp	.+252    	; 0x4ae0 <_ZN6Anchor15updateAnchorBoxEff+0x200>
		model->setAnchorN(n);
	if ((s + MINMTRS) < model->getAnchorN() && s > model->getAnchorS())
    49e4:	ed 81       	ldd	r30, Y+5	; 0x05
    49e6:	fe 81       	ldd	r31, Y+6	; 0x06
    49e8:	82 81       	ldd	r24, Z+2	; 0x02
    49ea:	93 81       	ldd	r25, Z+3	; 0x03
    49ec:	0e 94 03 2b 	call	0x5606	; 0x5606 <_ZN14FreeBoardModel10getAnchorNEv>
    49f0:	6b 01       	movw	r12, r22
    49f2:	7c 01       	movw	r14, r24
    49f4:	24 e8       	ldi	r18, 0x84	; 132
    49f6:	3a eb       	ldi	r19, 0xBA	; 186
    49f8:	4c e3       	ldi	r20, 0x3C	; 60
    49fa:	58 e3       	ldi	r21, 0x38	; 56
    49fc:	64 2d       	mov	r22, r4
    49fe:	75 2d       	mov	r23, r5
    4a00:	86 2d       	mov	r24, r6
    4a02:	97 2d       	mov	r25, r7
    4a04:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    4a08:	a7 01       	movw	r20, r14
    4a0a:	96 01       	movw	r18, r12
    4a0c:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    4a10:	87 ff       	sbrs	r24, 7
    4a12:	11 c0       	rjmp	.+34     	; 0x4a36 <_ZN6Anchor15updateAnchorBoxEff+0x156>
    4a14:	ed 81       	ldd	r30, Y+5	; 0x05
    4a16:	fe 81       	ldd	r31, Y+6	; 0x06
    4a18:	82 81       	ldd	r24, Z+2	; 0x02
    4a1a:	93 81       	ldd	r25, Z+3	; 0x03
    4a1c:	0e 94 23 2b 	call	0x5646	; 0x5646 <_ZN14FreeBoardModel10getAnchorSEv>
    4a20:	9b 01       	movw	r18, r22
    4a22:	ac 01       	movw	r20, r24
    4a24:	64 2d       	mov	r22, r4
    4a26:	75 2d       	mov	r23, r5
    4a28:	86 2d       	mov	r24, r6
    4a2a:	97 2d       	mov	r25, r7
    4a2c:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    4a30:	18 16       	cp	r1, r24
    4a32:	0c f4       	brge	.+2      	; 0x4a36 <_ZN6Anchor15updateAnchorBoxEff+0x156>
    4a34:	62 c0       	rjmp	.+196    	; 0x4afa <_ZN6Anchor15updateAnchorBoxEff+0x21a>
		model->setAnchorS(s);
	if ((e - MINMTRS) > model->getAnchorW() && e < model->getAnchorE())
    4a36:	ed 81       	ldd	r30, Y+5	; 0x05
    4a38:	fe 81       	ldd	r31, Y+6	; 0x06
    4a3a:	82 81       	ldd	r24, Z+2	; 0x02
    4a3c:	93 81       	ldd	r25, Z+3	; 0x03
    4a3e:	0e 94 2d 2b 	call	0x565a	; 0x565a <_ZN14FreeBoardModel10getAnchorWEv>
    4a42:	2b 01       	movw	r4, r22
    4a44:	3c 01       	movw	r6, r24
    4a46:	24 e8       	ldi	r18, 0x84	; 132
    4a48:	3a eb       	ldi	r19, 0xBA	; 186
    4a4a:	4c e3       	ldi	r20, 0x3C	; 60
    4a4c:	58 e3       	ldi	r21, 0x38	; 56
    4a4e:	68 2d       	mov	r22, r8
    4a50:	79 2d       	mov	r23, r9
    4a52:	8a 2d       	mov	r24, r10
    4a54:	9b 2d       	mov	r25, r11
    4a56:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    4a5a:	a3 01       	movw	r20, r6
    4a5c:	92 01       	movw	r18, r4
    4a5e:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    4a62:	18 16       	cp	r1, r24
    4a64:	84 f4       	brge	.+32     	; 0x4a86 <_ZN6Anchor15updateAnchorBoxEff+0x1a6>
    4a66:	ed 81       	ldd	r30, Y+5	; 0x05
    4a68:	fe 81       	ldd	r31, Y+6	; 0x06
    4a6a:	82 81       	ldd	r24, Z+2	; 0x02
    4a6c:	93 81       	ldd	r25, Z+3	; 0x03
    4a6e:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <_ZN14FreeBoardModel10getAnchorEEv>
    4a72:	9b 01       	movw	r18, r22
    4a74:	ac 01       	movw	r20, r24
    4a76:	68 2d       	mov	r22, r8
    4a78:	79 2d       	mov	r23, r9
    4a7a:	8a 2d       	mov	r24, r10
    4a7c:	9b 2d       	mov	r25, r11
    4a7e:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    4a82:	87 fd       	sbrc	r24, 7
    4a84:	45 c0       	rjmp	.+138    	; 0x4b10 <_ZN6Anchor15updateAnchorBoxEff+0x230>
		model->setAnchorE(e);
	if ((w + MINMTRS) < model->getAnchorE() && w > model->getAnchorW())
    4a86:	ed 81       	ldd	r30, Y+5	; 0x05
    4a88:	fe 81       	ldd	r31, Y+6	; 0x06
    4a8a:	82 81       	ldd	r24, Z+2	; 0x02
    4a8c:	93 81       	ldd	r25, Z+3	; 0x03
    4a8e:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <_ZN14FreeBoardModel10getAnchorEEv>
    4a92:	4b 01       	movw	r8, r22
    4a94:	5c 01       	movw	r10, r24
    4a96:	24 e8       	ldi	r18, 0x84	; 132
    4a98:	3a eb       	ldi	r19, 0xBA	; 186
    4a9a:	4c e3       	ldi	r20, 0x3C	; 60
    4a9c:	58 e3       	ldi	r21, 0x38	; 56
    4a9e:	ab 81       	ldd	r26, Y+3	; 0x03
    4aa0:	fc 80       	ldd	r15, Y+4	; 0x04
    4aa2:	61 2f       	mov	r22, r17
    4aa4:	7a 2f       	mov	r23, r26
    4aa6:	8f 2d       	mov	r24, r15
    4aa8:	90 2f       	mov	r25, r16
    4aaa:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    4aae:	a5 01       	movw	r20, r10
    4ab0:	94 01       	movw	r18, r8
    4ab2:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    4ab6:	87 ff       	sbrs	r24, 7
    4ab8:	5a c0       	rjmp	.+180    	; 0x4b6e <_ZN6Anchor15updateAnchorBoxEff+0x28e>
    4aba:	ed 81       	ldd	r30, Y+5	; 0x05
    4abc:	fe 81       	ldd	r31, Y+6	; 0x06
    4abe:	82 81       	ldd	r24, Z+2	; 0x02
    4ac0:	93 81       	ldd	r25, Z+3	; 0x03
    4ac2:	0e 94 2d 2b 	call	0x565a	; 0x565a <_ZN14FreeBoardModel10getAnchorWEv>
    4ac6:	9b 01       	movw	r18, r22
    4ac8:	ac 01       	movw	r20, r24
    4aca:	ab 81       	ldd	r26, Y+3	; 0x03
    4acc:	fc 80       	ldd	r15, Y+4	; 0x04
    4ace:	61 2f       	mov	r22, r17
    4ad0:	7a 2f       	mov	r23, r26
    4ad2:	8f 2d       	mov	r24, r15
    4ad4:	90 2f       	mov	r25, r16
    4ad6:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    4ada:	18 16       	cp	r1, r24
    4adc:	24 f1       	brlt	.+72     	; 0x4b26 <_ZN6Anchor15updateAnchorBoxEff+0x246>
    4ade:	47 c0       	rjmp	.+142    	; 0x4b6e <_ZN6Anchor15updateAnchorBoxEff+0x28e>
	float s = laty - model->getAnchorRadiusDeg();
	float e = lonx + model->getAnchorRadiusDeg();
	float w = lonx - model->getAnchorRadiusDeg();
	//shrink anchor box if we can
	if ((n - MINMTRS) > model->getAnchorS() && n < model->getAnchorN())
		model->setAnchorN(n);
    4ae0:	39 81       	ldd	r19, Y+1	; 0x01
    4ae2:	2a 81       	ldd	r18, Y+2	; 0x02
    4ae4:	43 2f       	mov	r20, r19
    4ae6:	52 2f       	mov	r21, r18
    4ae8:	62 2d       	mov	r22, r2
    4aea:	73 2d       	mov	r23, r3
    4aec:	ed 81       	ldd	r30, Y+5	; 0x05
    4aee:	fe 81       	ldd	r31, Y+6	; 0x06
    4af0:	82 81       	ldd	r24, Z+2	; 0x02
    4af2:	93 81       	ldd	r25, Z+3	; 0x03
    4af4:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <_ZN14FreeBoardModel10setAnchorNEf>
    4af8:	75 cf       	rjmp	.-278    	; 0x49e4 <_ZN6Anchor15updateAnchorBoxEff+0x104>
	if ((s + MINMTRS) < model->getAnchorN() && s > model->getAnchorS())
		model->setAnchorS(s);
    4afa:	44 2d       	mov	r20, r4
    4afc:	55 2d       	mov	r21, r5
    4afe:	66 2d       	mov	r22, r6
    4b00:	77 2d       	mov	r23, r7
    4b02:	ed 81       	ldd	r30, Y+5	; 0x05
    4b04:	fe 81       	ldd	r31, Y+6	; 0x06
    4b06:	82 81       	ldd	r24, Z+2	; 0x02
    4b08:	93 81       	ldd	r25, Z+3	; 0x03
    4b0a:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <_ZN14FreeBoardModel10setAnchorSEf>
    4b0e:	93 cf       	rjmp	.-218    	; 0x4a36 <_ZN6Anchor15updateAnchorBoxEff+0x156>
	if ((e - MINMTRS) > model->getAnchorW() && e < model->getAnchorE())
		model->setAnchorE(e);
    4b10:	48 2d       	mov	r20, r8
    4b12:	59 2d       	mov	r21, r9
    4b14:	6a 2d       	mov	r22, r10
    4b16:	7b 2d       	mov	r23, r11
    4b18:	ed 81       	ldd	r30, Y+5	; 0x05
    4b1a:	fe 81       	ldd	r31, Y+6	; 0x06
    4b1c:	82 81       	ldd	r24, Z+2	; 0x02
    4b1e:	93 81       	ldd	r25, Z+3	; 0x03
    4b20:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <_ZN14FreeBoardModel10setAnchorEEf>
    4b24:	b0 cf       	rjmp	.-160    	; 0x4a86 <_ZN6Anchor15updateAnchorBoxEff+0x1a6>
	if ((w + MINMTRS) < model->getAnchorE() && w > model->getAnchorW())
		model->setAnchorW(w);
    4b26:	2b 81       	ldd	r18, Y+3	; 0x03
    4b28:	9c 81       	ldd	r25, Y+4	; 0x04
    4b2a:	41 2f       	mov	r20, r17
    4b2c:	52 2f       	mov	r21, r18
    4b2e:	69 2f       	mov	r22, r25
    4b30:	70 2f       	mov	r23, r16
    4b32:	ed 81       	ldd	r30, Y+5	; 0x05
    4b34:	fe 81       	ldd	r31, Y+6	; 0x06
    4b36:	82 81       	ldd	r24, Z+2	; 0x02
    4b38:	93 81       	ldd	r25, Z+3	; 0x03

}
    4b3a:	26 96       	adiw	r28, 0x06	; 6
    4b3c:	0f b6       	in	r0, 0x3f	; 63
    4b3e:	f8 94       	cli
    4b40:	de bf       	out	0x3e, r29	; 62
    4b42:	0f be       	out	0x3f, r0	; 63
    4b44:	cd bf       	out	0x3d, r28	; 61
    4b46:	df 91       	pop	r29
    4b48:	cf 91       	pop	r28
    4b4a:	1f 91       	pop	r17
    4b4c:	0f 91       	pop	r16
    4b4e:	ff 90       	pop	r15
    4b50:	ef 90       	pop	r14
    4b52:	df 90       	pop	r13
    4b54:	cf 90       	pop	r12
    4b56:	bf 90       	pop	r11
    4b58:	af 90       	pop	r10
    4b5a:	9f 90       	pop	r9
    4b5c:	8f 90       	pop	r8
    4b5e:	7f 90       	pop	r7
    4b60:	6f 90       	pop	r6
    4b62:	5f 90       	pop	r5
    4b64:	4f 90       	pop	r4
    4b66:	3f 90       	pop	r3
    4b68:	2f 90       	pop	r2
	if ((s + MINMTRS) < model->getAnchorN() && s > model->getAnchorS())
		model->setAnchorS(s);
	if ((e - MINMTRS) > model->getAnchorW() && e < model->getAnchorE())
		model->setAnchorE(e);
	if ((w + MINMTRS) < model->getAnchorE() && w > model->getAnchorW())
		model->setAnchorW(w);
    4b6a:	0c 94 13 2e 	jmp	0x5c26	; 0x5c26 <_ZN14FreeBoardModel10setAnchorWEf>

}
    4b6e:	26 96       	adiw	r28, 0x06	; 6
    4b70:	0f b6       	in	r0, 0x3f	; 63
    4b72:	f8 94       	cli
    4b74:	de bf       	out	0x3e, r29	; 62
    4b76:	0f be       	out	0x3f, r0	; 63
    4b78:	cd bf       	out	0x3d, r28	; 61
    4b7a:	df 91       	pop	r29
    4b7c:	cf 91       	pop	r28
    4b7e:	1f 91       	pop	r17
    4b80:	0f 91       	pop	r16
    4b82:	ff 90       	pop	r15
    4b84:	ef 90       	pop	r14
    4b86:	df 90       	pop	r13
    4b88:	cf 90       	pop	r12
    4b8a:	bf 90       	pop	r11
    4b8c:	af 90       	pop	r10
    4b8e:	9f 90       	pop	r9
    4b90:	8f 90       	pop	r8
    4b92:	7f 90       	pop	r7
    4b94:	6f 90       	pop	r6
    4b96:	5f 90       	pop	r5
    4b98:	4f 90       	pop	r4
    4b9a:	3f 90       	pop	r3
    4b9c:	2f 90       	pop	r2
    4b9e:	08 95       	ret

00004ba0 <_ZN6Anchor14resetAnchorBoxEff>:

void Anchor::resetAnchorBox(float laty, float lonx) {
    4ba0:	8f 92       	push	r8
    4ba2:	9f 92       	push	r9
    4ba4:	af 92       	push	r10
    4ba6:	bf 92       	push	r11
    4ba8:	cf 92       	push	r12
    4baa:	df 92       	push	r13
    4bac:	ef 92       	push	r14
    4bae:	ff 92       	push	r15
    4bb0:	0f 93       	push	r16
    4bb2:	1f 93       	push	r17
    4bb4:	cf 93       	push	r28
    4bb6:	df 93       	push	r29
    4bb8:	ec 01       	movw	r28, r24
    4bba:	6a 01       	movw	r12, r20
    4bbc:	7b 01       	movw	r14, r22
    4bbe:	48 01       	movw	r8, r16
    4bc0:	59 01       	movw	r10, r18
	model->setAnchorN(90.0);
    4bc2:	40 e0       	ldi	r20, 0x00	; 0
    4bc4:	50 e0       	ldi	r21, 0x00	; 0
    4bc6:	64 eb       	ldi	r22, 0xB4	; 180
    4bc8:	72 e4       	ldi	r23, 0x42	; 66
    4bca:	8a 81       	ldd	r24, Y+2	; 0x02
    4bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    4bce:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <_ZN14FreeBoardModel10setAnchorNEf>
	model->setAnchorS(-90.0);
    4bd2:	40 e0       	ldi	r20, 0x00	; 0
    4bd4:	50 e0       	ldi	r21, 0x00	; 0
    4bd6:	64 eb       	ldi	r22, 0xB4	; 180
    4bd8:	72 ec       	ldi	r23, 0xC2	; 194
    4bda:	8a 81       	ldd	r24, Y+2	; 0x02
    4bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    4bde:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <_ZN14FreeBoardModel10setAnchorSEf>
	model->setAnchorE(180.0);
    4be2:	40 e0       	ldi	r20, 0x00	; 0
    4be4:	50 e0       	ldi	r21, 0x00	; 0
    4be6:	64 e3       	ldi	r22, 0x34	; 52
    4be8:	73 e4       	ldi	r23, 0x43	; 67
    4bea:	8a 81       	ldd	r24, Y+2	; 0x02
    4bec:	9b 81       	ldd	r25, Y+3	; 0x03
    4bee:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <_ZN14FreeBoardModel10setAnchorEEf>
	model->setAnchorW(-180.0);
    4bf2:	40 e0       	ldi	r20, 0x00	; 0
    4bf4:	50 e0       	ldi	r21, 0x00	; 0
    4bf6:	64 e3       	ldi	r22, 0x34	; 52
    4bf8:	73 ec       	ldi	r23, 0xC3	; 195
    4bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    4bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    4bfe:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <_ZN14FreeBoardModel10setAnchorWEf>
	model->setAnchorRadiusDeg(model->getAnchorRadius() * LLMTRS);
    4c02:	8a 81       	ldd	r24, Y+2	; 0x02
    4c04:	9b 81       	ldd	r25, Y+3	; 0x03
    4c06:	0e 94 0d 2b 	call	0x561a	; 0x561a <_ZN14FreeBoardModel15getAnchorRadiusEv>
    4c0a:	2d e9       	ldi	r18, 0x9D	; 157
    4c0c:	3b ef       	ldi	r19, 0xFB	; 251
    4c0e:	46 e1       	ldi	r20, 0x16	; 22
    4c10:	57 e3       	ldi	r21, 0x37	; 55
    4c12:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    4c16:	ab 01       	movw	r20, r22
    4c18:	bc 01       	movw	r22, r24
    4c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    4c1e:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <_ZN14FreeBoardModel18setAnchorRadiusDegEf>
	updateAnchorBox(laty, lonx);
    4c22:	95 01       	movw	r18, r10
    4c24:	84 01       	movw	r16, r8
    4c26:	b7 01       	movw	r22, r14
    4c28:	a6 01       	movw	r20, r12
    4c2a:	ce 01       	movw	r24, r28
    4c2c:	0e 94 70 24 	call	0x48e0	; 0x48e0 <_ZN6Anchor15updateAnchorBoxEff>
}
    4c30:	df 91       	pop	r29
    4c32:	cf 91       	pop	r28
    4c34:	1f 91       	pop	r17
    4c36:	0f 91       	pop	r16
    4c38:	ff 90       	pop	r15
    4c3a:	ef 90       	pop	r14
    4c3c:	df 90       	pop	r13
    4c3e:	cf 90       	pop	r12
    4c40:	bf 90       	pop	r11
    4c42:	af 90       	pop	r10
    4c44:	9f 90       	pop	r9
    4c46:	8f 90       	pop	r8
    4c48:	08 95       	ret

00004c4a <_ZN6AnchorC1EP14FreeBoardModel>:

#include "Anchor.h"



Anchor::Anchor(FreeBoardModel* model) {
    4c4a:	cf 92       	push	r12
    4c4c:	df 92       	push	r13
    4c4e:	ef 92       	push	r14
    4c50:	ff 92       	push	r15
    4c52:	0f 93       	push	r16
    4c54:	1f 93       	push	r17
    4c56:	cf 93       	push	r28
    4c58:	df 93       	push	r29
    4c5a:	1f 92       	push	r1
    4c5c:	1f 92       	push	r1
    4c5e:	cd b7       	in	r28, 0x3d	; 61
    4c60:	de b7       	in	r29, 0x3e	; 62
    4c62:	6c 01       	movw	r12, r24
    4c64:	7b 01       	movw	r14, r22
    4c66:	80 e3       	ldi	r24, 0x30	; 48
    4c68:	92 e0       	ldi	r25, 0x02	; 2
    4c6a:	f6 01       	movw	r30, r12
    4c6c:	91 83       	std	Z+1, r25	; 0x01
    4c6e:	80 83       	st	Z, r24


	this->model=model;
    4c70:	73 83       	std	Z+3, r23	; 0x03
    4c72:	62 83       	std	Z+2, r22	; 0x02
	resetAnchorBox(model->getAnchorLat(), model->getAnchorLon());
    4c74:	cb 01       	movw	r24, r22
    4c76:	0e 94 ed 2a 	call	0x55da	; 0x55da <_ZN14FreeBoardModel12getAnchorLonEv>
    4c7a:	8b 01       	movw	r16, r22
    4c7c:	9c 01       	movw	r18, r24
    4c7e:	c7 01       	movw	r24, r14
    4c80:	29 83       	std	Y+1, r18	; 0x01
    4c82:	3a 83       	std	Y+2, r19	; 0x02
    4c84:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <_ZN14FreeBoardModel12getAnchorLatEv>
    4c88:	ab 01       	movw	r20, r22
    4c8a:	bc 01       	movw	r22, r24
    4c8c:	29 81       	ldd	r18, Y+1	; 0x01
    4c8e:	3a 81       	ldd	r19, Y+2	; 0x02
    4c90:	c6 01       	movw	r24, r12
    4c92:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <_ZN6Anchor14resetAnchorBoxEff>
}
    4c96:	0f 90       	pop	r0
    4c98:	0f 90       	pop	r0
    4c9a:	df 91       	pop	r29
    4c9c:	cf 91       	pop	r28
    4c9e:	1f 91       	pop	r17
    4ca0:	0f 91       	pop	r16
    4ca2:	ff 90       	pop	r15
    4ca4:	ef 90       	pop	r14
    4ca6:	df 90       	pop	r13
    4ca8:	cf 90       	pop	r12
    4caa:	08 95       	ret

00004cac <_ZN6Anchor11checkAnchorEv>:
		model->setAnchorW(model->getAnchorW() - change);

	}
}
/*calc all params, and set alarm buzzer state*/
void Anchor::checkAnchor() {
    4cac:	8f 92       	push	r8
    4cae:	9f 92       	push	r9
    4cb0:	af 92       	push	r10
    4cb2:	bf 92       	push	r11
    4cb4:	cf 92       	push	r12
    4cb6:	df 92       	push	r13
    4cb8:	ef 92       	push	r14
    4cba:	ff 92       	push	r15
    4cbc:	0f 93       	push	r16
    4cbe:	1f 93       	push	r17
    4cc0:	cf 93       	push	r28
    4cc2:	df 93       	push	r29
    4cc4:	00 d0       	rcall	.+0      	; 0x4cc6 <_ZN6Anchor11checkAnchorEv+0x1a>
    4cc6:	1f 92       	push	r1
    4cc8:	cd b7       	in	r28, 0x3d	; 61
    4cca:	de b7       	in	r29, 0x3e	; 62
    4ccc:	4c 01       	movw	r8, r24

	//we dont need to do this if the anchor alarm is off
	if(model->isAnchorAlarmOn()){
    4cce:	fc 01       	movw	r30, r24
    4cd0:	82 81       	ldd	r24, Z+2	; 0x02
    4cd2:	93 81       	ldd	r25, Z+3	; 0x03
    4cd4:	0e 94 b4 2d 	call	0x5b68	; 0x5b68 <_ZN14FreeBoardModel15isAnchorAlarmOnEv>
    4cd8:	88 23       	and	r24, r24
    4cda:	09 f4       	brne	.+2      	; 0x4cde <_ZN6Anchor11checkAnchorEv+0x32>
    4cdc:	cf c0       	rjmp	.+414    	; 0x4e7c <_ZN6Anchor11checkAnchorEv+0x1d0>
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
    4cde:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <millis>
    4ce2:	6b 01       	movw	r12, r22
    4ce4:	7c 01       	movw	r14, r24
    4ce6:	f4 01       	movw	r30, r8
    4ce8:	82 81       	ldd	r24, Z+2	; 0x02
    4cea:	93 81       	ldd	r25, Z+3	; 0x03
    4cec:	0e 94 53 2d 	call	0x5aa6	; 0x5aa6 <_ZN14FreeBoardModel13getGpsLastFixEv>
    4cf0:	c6 1a       	sub	r12, r22
    4cf2:	d7 0a       	sbc	r13, r23
    4cf4:	e8 0a       	sbc	r14, r24
    4cf6:	f9 0a       	sbc	r15, r25
    4cf8:	f1 ee       	ldi	r31, 0xE1	; 225
    4cfa:	cf 16       	cp	r12, r31
    4cfc:	f3 e9       	ldi	r31, 0x93	; 147
    4cfe:	df 06       	cpc	r13, r31
    4d00:	f4 e0       	ldi	r31, 0x04	; 4
    4d02:	ef 06       	cpc	r14, r31
    4d04:	f1 04       	cpc	r15, r1
    4d06:	38 f0       	brcs	.+14     	; 0x4d16 <_ZN6Anchor11checkAnchorEv+0x6a>
				&& model->isAnchorAlarmOn()) {
    4d08:	f4 01       	movw	r30, r8
    4d0a:	82 81       	ldd	r24, Z+2	; 0x02
    4d0c:	93 81       	ldd	r25, Z+3	; 0x03
    4d0e:	0e 94 b4 2d 	call	0x5b68	; 0x5b68 <_ZN14FreeBoardModel15isAnchorAlarmOnEv>

	//we dont need to do this if the anchor alarm is off
	if(model->isAnchorAlarmOn()){
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
    4d12:	81 11       	cpse	r24, r1
    4d14:	84 c0       	rjmp	.+264    	; 0x4e1e <_ZN6Anchor11checkAnchorEv+0x172>
				&& model->isAnchorAlarmOn()) {
			model->setAlarmSnooze(0);
			model->setAnchorAlarmTriggered(true);
		}
		//now check position
		if (model->getGpsStatus()) {
    4d16:	f4 01       	movw	r30, r8
    4d18:	82 81       	ldd	r24, Z+2	; 0x02
    4d1a:	93 81       	ldd	r25, Z+3	; 0x03
    4d1c:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <_ZN14FreeBoardModel12getGpsStatusEv>
    4d20:	88 23       	and	r24, r24
    4d22:	09 f4       	brne	.+2      	; 0x4d26 <_ZN6Anchor11checkAnchorEv+0x7a>
    4d24:	ab c0       	rjmp	.+342    	; 0x4e7c <_ZN6Anchor11checkAnchorEv+0x1d0>
			model->setAnchorDistance(Gps::getMetersTo(model->getAnchorLat(), model->getAnchorLon(),model->getGpsLatitude(),model->getGpsLongitude()));
    4d26:	f4 01       	movw	r30, r8
    4d28:	82 81       	ldd	r24, Z+2	; 0x02
    4d2a:	93 81       	ldd	r25, Z+3	; 0x03
    4d2c:	0e 94 67 2d 	call	0x5ace	; 0x5ace <_ZN14FreeBoardModel15getGpsLongitudeEv>
    4d30:	5b 01       	movw	r10, r22
    4d32:	6c 01       	movw	r12, r24
    4d34:	f4 01       	movw	r30, r8
    4d36:	82 81       	ldd	r24, Z+2	; 0x02
    4d38:	93 81       	ldd	r25, Z+3	; 0x03
    4d3a:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN14FreeBoardModel14getGpsLatitudeEv>
    4d3e:	7b 01       	movw	r14, r22
    4d40:	8c 01       	movw	r16, r24
    4d42:	f4 01       	movw	r30, r8
    4d44:	82 81       	ldd	r24, Z+2	; 0x02
    4d46:	93 81       	ldd	r25, Z+3	; 0x03
    4d48:	0e 94 ed 2a 	call	0x55da	; 0x55da <_ZN14FreeBoardModel12getAnchorLonEv>
    4d4c:	9b 01       	movw	r18, r22
    4d4e:	ac 01       	movw	r20, r24
    4d50:	f4 01       	movw	r30, r8
    4d52:	82 81       	ldd	r24, Z+2	; 0x02
    4d54:	93 81       	ldd	r25, Z+3	; 0x03
    4d56:	2b 83       	std	Y+3, r18	; 0x03
    4d58:	3c 83       	std	Y+4, r19	; 0x04
    4d5a:	49 83       	std	Y+1, r20	; 0x01
    4d5c:	5a 83       	std	Y+2, r21	; 0x02
    4d5e:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <_ZN14FreeBoardModel12getAnchorLatEv>
    4d62:	2b 81       	ldd	r18, Y+3	; 0x03
    4d64:	3c 81       	ldd	r19, Y+4	; 0x04
    4d66:	49 81       	ldd	r20, Y+1	; 0x01
    4d68:	5a 81       	ldd	r21, Y+2	; 0x02
    4d6a:	0e 94 04 34 	call	0x6808	; 0x6808 <_ZN3Gps11getMetersToEffff>
    4d6e:	ab 01       	movw	r20, r22
    4d70:	bc 01       	movw	r22, r24
    4d72:	f4 01       	movw	r30, r8
    4d74:	82 81       	ldd	r24, Z+2	; 0x02
    4d76:	93 81       	ldd	r25, Z+3	; 0x03
    4d78:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <_ZN14FreeBoardModel17setAnchorDistanceEf>
			if (model->getAnchorDistance() > model->getAnchorMaxDistance())
    4d7c:	f4 01       	movw	r30, r8
    4d7e:	82 81       	ldd	r24, Z+2	; 0x02
    4d80:	93 81       	ldd	r25, Z+3	; 0x03
    4d82:	0e 94 cd 2a 	call	0x559a	; 0x559a <_ZN14FreeBoardModel17getAnchorDistanceEv>
    4d86:	6b 01       	movw	r12, r22
    4d88:	7c 01       	movw	r14, r24
    4d8a:	f4 01       	movw	r30, r8
    4d8c:	82 81       	ldd	r24, Z+2	; 0x02
    4d8e:	93 81       	ldd	r25, Z+3	; 0x03
    4d90:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <_ZN14FreeBoardModel20getAnchorMaxDistanceEv>
    4d94:	9b 01       	movw	r18, r22
    4d96:	ac 01       	movw	r20, r24
    4d98:	c7 01       	movw	r24, r14
    4d9a:	b6 01       	movw	r22, r12
    4d9c:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    4da0:	18 16       	cp	r1, r24
    4da2:	64 f4       	brge	.+24     	; 0x4dbc <_ZN6Anchor11checkAnchorEv+0x110>
				model->setAnchorMaxDistance(model->getAnchorDistance());
    4da4:	f4 01       	movw	r30, r8
    4da6:	82 81       	ldd	r24, Z+2	; 0x02
    4da8:	93 81       	ldd	r25, Z+3	; 0x03
    4daa:	0e 94 cd 2a 	call	0x559a	; 0x559a <_ZN14FreeBoardModel17getAnchorDistanceEv>
    4dae:	ab 01       	movw	r20, r22
    4db0:	bc 01       	movw	r22, r24
    4db2:	f4 01       	movw	r30, r8
    4db4:	82 81       	ldd	r24, Z+2	; 0x02
    4db6:	93 81       	ldd	r25, Z+3	; 0x03
    4db8:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>

			//update the anchor box
			updateAnchorBox(model->getGpsLatitude(), model->getGpsLongitude());
    4dbc:	f4 01       	movw	r30, r8
    4dbe:	82 81       	ldd	r24, Z+2	; 0x02
    4dc0:	93 81       	ldd	r25, Z+3	; 0x03
    4dc2:	0e 94 67 2d 	call	0x5ace	; 0x5ace <_ZN14FreeBoardModel15getGpsLongitudeEv>
    4dc6:	8b 01       	movw	r16, r22
    4dc8:	9c 01       	movw	r18, r24
    4dca:	f4 01       	movw	r30, r8
    4dcc:	82 81       	ldd	r24, Z+2	; 0x02
    4dce:	93 81       	ldd	r25, Z+3	; 0x03
    4dd0:	2b 83       	std	Y+3, r18	; 0x03
    4dd2:	3c 83       	std	Y+4, r19	; 0x04
    4dd4:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN14FreeBoardModel14getGpsLatitudeEv>
    4dd8:	ab 01       	movw	r20, r22
    4dda:	bc 01       	movw	r22, r24
    4ddc:	2b 81       	ldd	r18, Y+3	; 0x03
    4dde:	3c 81       	ldd	r19, Y+4	; 0x04
    4de0:	c4 01       	movw	r24, r8
    4de2:	0e 94 70 24 	call	0x48e0	; 0x48e0 <_ZN6Anchor15updateAnchorBoxEff>

			// read distance to anchorPoint in meters and set anchorAlarm accordingly
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (model->isAnchorAlarmOn() && model->getAnchorDistance() > model->getAnchorRadius()) {
    4de6:	f4 01       	movw	r30, r8
    4de8:	82 81       	ldd	r24, Z+2	; 0x02
    4dea:	93 81       	ldd	r25, Z+3	; 0x03
    4dec:	0e 94 b4 2d 	call	0x5b68	; 0x5b68 <_ZN14FreeBoardModel15isAnchorAlarmOnEv>
    4df0:	88 23       	and	r24, r24
    4df2:	71 f1       	breq	.+92     	; 0x4e50 <_ZN6Anchor11checkAnchorEv+0x1a4>
    4df4:	f4 01       	movw	r30, r8
    4df6:	82 81       	ldd	r24, Z+2	; 0x02
    4df8:	93 81       	ldd	r25, Z+3	; 0x03
    4dfa:	0e 94 cd 2a 	call	0x559a	; 0x559a <_ZN14FreeBoardModel17getAnchorDistanceEv>
    4dfe:	6b 01       	movw	r12, r22
    4e00:	7c 01       	movw	r14, r24
    4e02:	f4 01       	movw	r30, r8
    4e04:	82 81       	ldd	r24, Z+2	; 0x02
    4e06:	93 81       	ldd	r25, Z+3	; 0x03
    4e08:	0e 94 0d 2b 	call	0x561a	; 0x561a <_ZN14FreeBoardModel15getAnchorRadiusEv>
    4e0c:	9b 01       	movw	r18, r22
    4e0e:	ac 01       	movw	r20, r24
    4e10:	c7 01       	movw	r24, r14
    4e12:	b6 01       	movw	r22, r12
    4e14:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    4e18:	18 16       	cp	r1, r24
    4e1a:	84 f0       	brlt	.+32     	; 0x4e3c <_ZN6Anchor11checkAnchorEv+0x190>
    4e1c:	19 c0       	rjmp	.+50     	; 0x4e50 <_ZN6Anchor11checkAnchorEv+0x1a4>
	if(model->isAnchorAlarmOn()){
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
				&& model->isAnchorAlarmOn()) {
			model->setAlarmSnooze(0);
    4e1e:	40 e0       	ldi	r20, 0x00	; 0
    4e20:	50 e0       	ldi	r21, 0x00	; 0
    4e22:	ba 01       	movw	r22, r20
    4e24:	f4 01       	movw	r30, r8
    4e26:	82 81       	ldd	r24, Z+2	; 0x02
    4e28:	93 81       	ldd	r25, Z+3	; 0x03
    4e2a:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <_ZN14FreeBoardModel14setAlarmSnoozeEm>
			model->setAnchorAlarmTriggered(true);
    4e2e:	61 e0       	ldi	r22, 0x01	; 1
    4e30:	f4 01       	movw	r30, r8
    4e32:	82 81       	ldd	r24, Z+2	; 0x02
    4e34:	93 81       	ldd	r25, Z+3	; 0x03
    4e36:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>
    4e3a:	6d cf       	rjmp	.-294    	; 0x4d16 <_ZN6Anchor11checkAnchorEv+0x6a>
			updateAnchorBox(model->getGpsLatitude(), model->getGpsLongitude());

			// read distance to anchorPoint in meters and set anchorAlarm accordingly
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (model->isAnchorAlarmOn() && model->getAnchorDistance() > model->getAnchorRadius()) {
				model->setAlarmSnooze(0);
    4e3c:	40 e0       	ldi	r20, 0x00	; 0
    4e3e:	50 e0       	ldi	r21, 0x00	; 0
    4e40:	ba 01       	movw	r22, r20
    4e42:	f4 01       	movw	r30, r8
    4e44:	82 81       	ldd	r24, Z+2	; 0x02
    4e46:	93 81       	ldd	r25, Z+3	; 0x03
    4e48:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <_ZN14FreeBoardModel14setAlarmSnoozeEm>
				model->setAnchorAlarmTriggered(true);
    4e4c:	61 e0       	ldi	r22, 0x01	; 1
    4e4e:	01 c0       	rjmp	.+2      	; 0x4e52 <_ZN6Anchor11checkAnchorEv+0x1a6>
			} else {
				model->setAnchorAlarmTriggered(false);
    4e50:	60 e0       	ldi	r22, 0x00	; 0
    4e52:	f4 01       	movw	r30, r8
    4e54:	82 81       	ldd	r24, Z+2	; 0x02
    4e56:	93 81       	ldd	r25, Z+3	; 0x03
			}
		}
	}

}
    4e58:	0f 90       	pop	r0
    4e5a:	0f 90       	pop	r0
    4e5c:	0f 90       	pop	r0
    4e5e:	0f 90       	pop	r0
    4e60:	df 91       	pop	r29
    4e62:	cf 91       	pop	r28
    4e64:	1f 91       	pop	r17
    4e66:	0f 91       	pop	r16
    4e68:	ff 90       	pop	r15
    4e6a:	ef 90       	pop	r14
    4e6c:	df 90       	pop	r13
    4e6e:	cf 90       	pop	r12
    4e70:	bf 90       	pop	r11
    4e72:	af 90       	pop	r10
    4e74:	9f 90       	pop	r9
    4e76:	8f 90       	pop	r8
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (model->isAnchorAlarmOn() && model->getAnchorDistance() > model->getAnchorRadius()) {
				model->setAlarmSnooze(0);
				model->setAnchorAlarmTriggered(true);
			} else {
				model->setAnchorAlarmTriggered(false);
    4e78:	0c 94 d4 2d 	jmp	0x5ba8	; 0x5ba8 <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>
			}
		}
	}

}
    4e7c:	0f 90       	pop	r0
    4e7e:	0f 90       	pop	r0
    4e80:	0f 90       	pop	r0
    4e82:	0f 90       	pop	r0
    4e84:	df 91       	pop	r29
    4e86:	cf 91       	pop	r28
    4e88:	1f 91       	pop	r17
    4e8a:	0f 91       	pop	r16
    4e8c:	ff 90       	pop	r15
    4e8e:	ef 90       	pop	r14
    4e90:	df 90       	pop	r13
    4e92:	cf 90       	pop	r12
    4e94:	bf 90       	pop	r11
    4e96:	af 90       	pop	r10
    4e98:	9f 90       	pop	r9
    4e9a:	8f 90       	pop	r8
    4e9c:	08 95       	ret

00004e9e <_ZN6Anchor14setAnchorPointEv>:

/*Set anchor position*/
void Anchor::setAnchorPoint() {
    4e9e:	cf 93       	push	r28
    4ea0:	df 93       	push	r29
    4ea2:	ec 01       	movw	r28, r24
	model->setAnchorLat(model->getGpsLatitude());
    4ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ea6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ea8:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN14FreeBoardModel14getGpsLatitudeEv>
    4eac:	ab 01       	movw	r20, r22
    4eae:	bc 01       	movw	r22, r24
    4eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    4eb4:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <_ZN14FreeBoardModel12setAnchorLatEf>
	model->setAnchorLon(model->getGpsLongitude());
    4eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    4eba:	9b 81       	ldd	r25, Y+3	; 0x03
    4ebc:	0e 94 67 2d 	call	0x5ace	; 0x5ace <_ZN14FreeBoardModel15getGpsLongitudeEv>
    4ec0:	ab 01       	movw	r20, r22
    4ec2:	bc 01       	movw	r22, r24
    4ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ec8:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <_ZN14FreeBoardModel12setAnchorLonEf>
	model->setAnchorMaxDistance(0);
    4ecc:	40 e0       	ldi	r20, 0x00	; 0
    4ece:	50 e0       	ldi	r21, 0x00	; 0
    4ed0:	ba 01       	movw	r22, r20
    4ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ed4:	9b 81       	ldd	r25, Y+3	; 0x03

}
    4ed6:	df 91       	pop	r29
    4ed8:	cf 91       	pop	r28

/*Set anchor position*/
void Anchor::setAnchorPoint() {
	model->setAnchorLat(model->getGpsLatitude());
	model->setAnchorLon(model->getGpsLongitude());
	model->setAnchorMaxDistance(0);
    4eda:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>

00004ede <_ZN9AutopilotC1EP14FreeBoardModel>:
 * And lastly, if the second you enable the controller the output goes in the wrong direction and pegs at 0 or 100%, you've got the sign of the P_Param wrong.
 * That is, if you've got a 3 in there, make it -3.
 */
#include "Autopilot.h"

Autopilot::Autopilot(FreeBoardModel* model) {
    4ede:	6f 92       	push	r6
    4ee0:	7f 92       	push	r7
    4ee2:	8f 92       	push	r8
    4ee4:	9f 92       	push	r9
    4ee6:	af 92       	push	r10
    4ee8:	bf 92       	push	r11
    4eea:	cf 92       	push	r12
    4eec:	df 92       	push	r13
    4eee:	ef 92       	push	r14
    4ef0:	ff 92       	push	r15
    4ef2:	0f 93       	push	r16
    4ef4:	1f 93       	push	r17
    4ef6:	cf 93       	push	r28
    4ef8:	df 93       	push	r29
    4efa:	cd b7       	in	r28, 0x3d	; 61
    4efc:	de b7       	in	r29, 0x3e	; 62
    4efe:	e7 97       	sbiw	r28, 0x37	; 55
    4f00:	0f b6       	in	r0, 0x3f	; 63
    4f02:	f8 94       	cli
    4f04:	de bf       	out	0x3e, r29	; 62
    4f06:	0f be       	out	0x3f, r0	; 63
    4f08:	cd bf       	out	0x3d, r28	; 61
    4f0a:	4c 01       	movw	r8, r24
    4f0c:	8b 01       	movw	r16, r22
    4f0e:	3c 01       	movw	r6, r24
    4f10:	83 e1       	ldi	r24, 0x13	; 19
    4f12:	68 0e       	add	r6, r24
    4f14:	71 1c       	adc	r7, r1
    4f16:	c3 01       	movw	r24, r6
    4f18:	0e 94 91 18 	call	0x3122	; 0x3122 <_ZN3PIDC1Ev>
	this->model = model;
    4f1c:	f4 01       	movw	r30, r8
    4f1e:	12 8b       	std	Z+18, r17	; 0x12
    4f20:	01 8b       	std	Z+17, r16	; 0x11
	autopilotTargetHeading = model->getAutopilotTargetHeading() + 720;
    4f22:	c8 01       	movw	r24, r16
    4f24:	0e 94 41 2b 	call	0x5682	; 0x5682 <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    4f28:	20 e0       	ldi	r18, 0x00	; 0
    4f2a:	30 e0       	ldi	r19, 0x00	; 0
    4f2c:	44 e3       	ldi	r20, 0x34	; 52
    4f2e:	54 e4       	ldi	r21, 0x44	; 68
    4f30:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    4f34:	6b 01       	movw	r12, r22
    4f36:	7c 01       	movw	r14, r24
    4f38:	98 2f       	mov	r25, r24
    4f3a:	4c 2d       	mov	r20, r12
    4f3c:	5d 2d       	mov	r21, r13
    4f3e:	69 2f       	mov	r22, r25
    4f40:	7f 2d       	mov	r23, r15
    4f42:	f4 01       	movw	r30, r8
    4f44:	40 83       	st	Z, r20
    4f46:	51 83       	std	Z+1, r21	; 0x01
    4f48:	62 83       	std	Z+2, r22	; 0x02
    4f4a:	73 83       	std	Z+3, r23	; 0x03
	autopilotCurrentHeading = autopilotTargetHeading + model->getAutopilotOffCourse();
    4f4c:	c8 01       	movw	r24, r16
    4f4e:	0e 94 5f 2b 	call	0x56be	; 0x56be <_ZN14FreeBoardModel21getAutopilotOffCourseEv>
    4f52:	9b 01       	movw	r18, r22
    4f54:	ac 01       	movw	r20, r24
    4f56:	6c 2d       	mov	r22, r12
    4f58:	7d 2d       	mov	r23, r13
    4f5a:	8e 2d       	mov	r24, r14
    4f5c:	9f 2d       	mov	r25, r15
    4f5e:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    4f62:	f4 01       	movw	r30, r8
    4f64:	64 83       	std	Z+4, r22	; 0x04
    4f66:	75 83       	std	Z+5, r23	; 0x05
    4f68:	86 83       	std	Z+6, r24	; 0x06
    4f6a:	97 83       	std	Z+7, r25	; 0x07
	autopilotRudderCommand = model->getAutopilotRudderCommand();
    4f6c:	c8 01       	movw	r24, r16
    4f6e:	0e 94 37 2b 	call	0x566e	; 0x566e <_ZN14FreeBoardModel25getAutopilotRudderCommandEv>
    4f72:	f4 01       	movw	r30, r8
    4f74:	60 87       	std	Z+8, r22	; 0x08
    4f76:	71 87       	std	Z+9, r23	; 0x09
    4f78:	82 87       	std	Z+10, r24	; 0x0a
    4f7a:	93 87       	std	Z+11, r25	; 0x0b
	lastDirection=true;
    4f7c:	81 e0       	ldi	r24, 0x01	; 1
    4f7e:	80 8b       	std	Z+16, r24	; 0x10
	this->headingPid = PID(&autopilotCurrentHeading, &autopilotRudderCommand, &autopilotTargetHeading, P_Param, I_Param, D_Param, REVERSE);
    4f80:	a4 01       	movw	r20, r8
    4f82:	48 5f       	subi	r20, 0xF8	; 248
    4f84:	5f 4f       	sbci	r21, 0xFF	; 255
    4f86:	b4 01       	movw	r22, r8
    4f88:	6c 5f       	subi	r22, 0xFC	; 252
    4f8a:	7f 4f       	sbci	r23, 0xFF	; 255
    4f8c:	1f 92       	push	r1
    4f8e:	8f 93       	push	r24
    4f90:	8f e3       	ldi	r24, 0x3F	; 63
    4f92:	8f 93       	push	r24
    4f94:	85 e0       	ldi	r24, 0x05	; 5
    4f96:	8f 93       	push	r24
    4f98:	8e e1       	ldi	r24, 0x1E	; 30
    4f9a:	8f 93       	push	r24
    4f9c:	88 eb       	ldi	r24, 0xB8	; 184
    4f9e:	8f 93       	push	r24
    4fa0:	8a e0       	ldi	r24, 0x0A	; 10
    4fa2:	a8 2e       	mov	r10, r24
    4fa4:	87 ed       	ldi	r24, 0xD7	; 215
    4fa6:	b8 2e       	mov	r11, r24
    4fa8:	83 ea       	ldi	r24, 0xA3	; 163
    4faa:	c8 2e       	mov	r12, r24
    4fac:	8d e3       	ldi	r24, 0x3D	; 61
    4fae:	d8 2e       	mov	r13, r24
    4fb0:	16 e6       	ldi	r17, 0x66	; 102
    4fb2:	e1 2e       	mov	r14, r17
    4fb4:	fe 2c       	mov	r15, r14
    4fb6:	06 ee       	ldi	r16, 0xE6	; 230
    4fb8:	1e e3       	ldi	r17, 0x3E	; 62
    4fba:	94 01       	movw	r18, r8
    4fbc:	ce 01       	movw	r24, r28
    4fbe:	01 96       	adiw	r24, 0x01	; 1
    4fc0:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <_ZN3PIDC1EPdS0_S0_dddi>
    4fc4:	87 e3       	ldi	r24, 0x37	; 55
    4fc6:	fe 01       	movw	r30, r28
    4fc8:	31 96       	adiw	r30, 0x01	; 1
    4fca:	d3 01       	movw	r26, r6
    4fcc:	01 90       	ld	r0, Z+
    4fce:	0d 92       	st	X+, r0
    4fd0:	8a 95       	dec	r24
    4fd2:	e1 f7       	brne	.-8      	; 0x4fcc <_ZN9AutopilotC1EP14FreeBoardModel+0xee>

	headingPid.SetOutputLimits(0.0, 66.0); //output limits
    4fd4:	00 e0       	ldi	r16, 0x00	; 0
    4fd6:	10 e0       	ldi	r17, 0x00	; 0
    4fd8:	24 e8       	ldi	r18, 0x84	; 132
    4fda:	32 e4       	ldi	r19, 0x42	; 66
    4fdc:	40 e0       	ldi	r20, 0x00	; 0
    4fde:	50 e0       	ldi	r21, 0x00	; 0
    4fe0:	ba 01       	movw	r22, r20
    4fe2:	c3 01       	movw	r24, r6
    4fe4:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZN3PID15SetOutputLimitsEdd>
	headingPid.SetSampleTime(100);
    4fe8:	64 e6       	ldi	r22, 0x64	; 100
    4fea:	70 e0       	ldi	r23, 0x00	; 0
    4fec:	c3 01       	movw	r24, r6
    4fee:	0e 94 88 1a 	call	0x3510	; 0x3510 <_ZN3PID13SetSampleTimeEi>
    4ff2:	0f 90       	pop	r0
    4ff4:	0f 90       	pop	r0
    4ff6:	0f 90       	pop	r0
    4ff8:	0f 90       	pop	r0
    4ffa:	0f 90       	pop	r0
    4ffc:	0f 90       	pop	r0

}
    4ffe:	e7 96       	adiw	r28, 0x37	; 55
    5000:	0f b6       	in	r0, 0x3f	; 63
    5002:	f8 94       	cli
    5004:	de bf       	out	0x3e, r29	; 62
    5006:	0f be       	out	0x3f, r0	; 63
    5008:	cd bf       	out	0x3d, r28	; 61
    500a:	df 91       	pop	r29
    500c:	cf 91       	pop	r28
    500e:	1f 91       	pop	r17
    5010:	0f 91       	pop	r16
    5012:	ff 90       	pop	r15
    5014:	ef 90       	pop	r14
    5016:	df 90       	pop	r13
    5018:	cf 90       	pop	r12
    501a:	bf 90       	pop	r11
    501c:	af 90       	pop	r10
    501e:	9f 90       	pop	r9
    5020:	8f 90       	pop	r8
    5022:	7f 90       	pop	r7
    5024:	6f 90       	pop	r6
    5026:	08 95       	ret

00005028 <_ZN9AutopilotD1Ev>:
Autopilot::~Autopilot() {
    5028:	08 95       	ret

0000502a <_ZN9Autopilot13calcAutoPilotEv>:

}

void Autopilot::calcAutoPilot() {
    502a:	8f 92       	push	r8
    502c:	9f 92       	push	r9
    502e:	af 92       	push	r10
    5030:	bf 92       	push	r11
    5032:	cf 92       	push	r12
    5034:	df 92       	push	r13
    5036:	ef 92       	push	r14
    5038:	ff 92       	push	r15
    503a:	0f 93       	push	r16
    503c:	1f 93       	push	r17
    503e:	cf 93       	push	r28
    5040:	df 93       	push	r29
    5042:	ec 01       	movw	r28, r24
	//we dont do this if the autopilot is MANUAL
	if (model->isAutopilotOn()) {
    5044:	89 89       	ldd	r24, Y+17	; 0x11
    5046:	9a 89       	ldd	r25, Y+18	; 0x12
    5048:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <_ZN14FreeBoardModel13isAutopilotOnEv>
    504c:	8e 01       	movw	r16, r28
    504e:	0d 5e       	subi	r16, 0xED	; 237
    5050:	1f 4f       	sbci	r17, 0xFF	; 255
    5052:	88 23       	and	r24, r24
    5054:	09 f4       	brne	.+2      	; 0x5058 <_ZN9Autopilot13calcAutoPilotEv+0x2e>
    5056:	cd c0       	rjmp	.+410    	; 0x51f2 <_ZN9Autopilot13calcAutoPilotEv+0x1c8>
		//does nothing if its already on, inits if off
		headingPid.SetMode(AUTOMATIC);
    5058:	61 e0       	ldi	r22, 0x01	; 1
    505a:	70 e0       	ldi	r23, 0x00	; 0
    505c:	c8 01       	movw	r24, r16
    505e:	0e 94 99 1b 	call	0x3732	; 0x3732 <_ZN3PID7SetModeEi>
		autopilotTargetHeading = model->getAutopilotTargetHeading() + 720;
    5062:	89 89       	ldd	r24, Y+17	; 0x11
    5064:	9a 89       	ldd	r25, Y+18	; 0x12
    5066:	0e 94 41 2b 	call	0x5682	; 0x5682 <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    506a:	20 e0       	ldi	r18, 0x00	; 0
    506c:	30 e0       	ldi	r19, 0x00	; 0
    506e:	44 e3       	ldi	r20, 0x34	; 52
    5070:	54 e4       	ldi	r21, 0x44	; 68
    5072:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    5076:	6b 01       	movw	r12, r22
    5078:	7c 01       	movw	r14, r24
    507a:	98 2f       	mov	r25, r24
    507c:	4c 2d       	mov	r20, r12
    507e:	5d 2d       	mov	r21, r13
    5080:	69 2f       	mov	r22, r25
    5082:	7f 2d       	mov	r23, r15
    5084:	48 83       	st	Y, r20
    5086:	59 83       	std	Y+1, r21	; 0x01
    5088:	6a 83       	std	Y+2, r22	; 0x02
    508a:	7b 83       	std	Y+3, r23	; 0x03
		autopilotCurrentHeading = autopilotTargetHeading + model->getAutopilotOffCourse();
    508c:	89 89       	ldd	r24, Y+17	; 0x11
    508e:	9a 89       	ldd	r25, Y+18	; 0x12
    5090:	0e 94 5f 2b 	call	0x56be	; 0x56be <_ZN14FreeBoardModel21getAutopilotOffCourseEv>
    5094:	9b 01       	movw	r18, r22
    5096:	ac 01       	movw	r20, r24
    5098:	6c 2d       	mov	r22, r12
    509a:	7d 2d       	mov	r23, r13
    509c:	8e 2d       	mov	r24, r14
    509e:	9f 2d       	mov	r25, r15
    50a0:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    50a4:	6c 83       	std	Y+4, r22	; 0x04
    50a6:	7d 83       	std	Y+5, r23	; 0x05
    50a8:	8e 83       	std	Y+6, r24	; 0x06
    50aa:	9f 83       	std	Y+7, r25	; 0x07
		headingPid.Compute();
    50ac:	c8 01       	movw	r24, r16
    50ae:	0e 94 92 18 	call	0x3124	; 0x3124 <_ZN3PID7ComputeEv>
		//check deadzone
		if (abs(autopilotRudderCommand - lastRudderCommand) > model->getAutopilotDeadZone()) {
    50b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    50b4:	3d 85       	ldd	r19, Y+13	; 0x0d
    50b6:	4e 85       	ldd	r20, Y+14	; 0x0e
    50b8:	5f 85       	ldd	r21, Y+15	; 0x0f
    50ba:	68 85       	ldd	r22, Y+8	; 0x08
    50bc:	79 85       	ldd	r23, Y+9	; 0x09
    50be:	8a 85       	ldd	r24, Y+10	; 0x0a
    50c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    50c2:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    50c6:	b6 2f       	mov	r27, r22
    50c8:	a7 2f       	mov	r26, r23
    50ca:	46 2f       	mov	r20, r22
    50cc:	57 2f       	mov	r21, r23
    50ce:	68 2f       	mov	r22, r24
    50d0:	79 2f       	mov	r23, r25
    50d2:	4a 01       	movw	r8, r20
    50d4:	5b 01       	movw	r10, r22
    50d6:	20 e0       	ldi	r18, 0x00	; 0
    50d8:	30 e0       	ldi	r19, 0x00	; 0
    50da:	a9 01       	movw	r20, r18
    50dc:	6b 2f       	mov	r22, r27
    50de:	7a 2f       	mov	r23, r26
    50e0:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    50e4:	18 16       	cp	r1, r24
    50e6:	24 f0       	brlt	.+8      	; 0x50f0 <_ZN9Autopilot13calcAutoPilotEv+0xc6>
    50e8:	b7 fa       	bst	r11, 7
    50ea:	b0 94       	com	r11
    50ec:	b7 f8       	bld	r11, 7
    50ee:	b0 94       	com	r11
    50f0:	89 89       	ldd	r24, Y+17	; 0x11
    50f2:	9a 89       	ldd	r25, Y+18	; 0x12
    50f4:	0e 94 47 2d 	call	0x5a8e	; 0x5a8e <_ZN14FreeBoardModel20getAutopilotDeadZoneEv>
    50f8:	bc 01       	movw	r22, r24
    50fa:	88 27       	eor	r24, r24
    50fc:	77 fd       	sbrc	r23, 7
    50fe:	80 95       	com	r24
    5100:	98 2f       	mov	r25, r24
    5102:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__floatsisf>
    5106:	9b 01       	movw	r18, r22
    5108:	ac 01       	movw	r20, r24
    510a:	c5 01       	movw	r24, r10
    510c:	b4 01       	movw	r22, r8
    510e:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    5112:	18 16       	cp	r1, r24
    5114:	0c f0       	brlt	.+2      	; 0x5118 <_ZN9Autopilot13calcAutoPilotEv+0xee>
    5116:	7e c0       	rjmp	.+252    	; 0x5214 <_ZN9Autopilot13calcAutoPilotEv+0x1ea>
			//then we move the rudder.
			//is it changing movement direction, we need to compensate for slack
			if (lastDirection && autopilotRudderCommand > lastRudderCommand) {
    5118:	88 89       	ldd	r24, Y+16	; 0x10
    511a:	c8 84       	ldd	r12, Y+8	; 0x08
    511c:	d9 84       	ldd	r13, Y+9	; 0x09
    511e:	ea 84       	ldd	r14, Y+10	; 0x0a
    5120:	fb 84       	ldd	r15, Y+11	; 0x0b
    5122:	8c 84       	ldd	r8, Y+12	; 0x0c
    5124:	9d 84       	ldd	r9, Y+13	; 0x0d
    5126:	ae 84       	ldd	r10, Y+14	; 0x0e
    5128:	bf 84       	ldd	r11, Y+15	; 0x0f
    512a:	a5 01       	movw	r20, r10
    512c:	94 01       	movw	r18, r8
    512e:	88 23       	and	r24, r24
    5130:	11 f1       	breq	.+68     	; 0x5176 <_ZN9Autopilot13calcAutoPilotEv+0x14c>
    5132:	c7 01       	movw	r24, r14
    5134:	b6 01       	movw	r22, r12
    5136:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    513a:	18 16       	cp	r1, r24
    513c:	0c f4       	brge	.+2      	; 0x5140 <_ZN9Autopilot13calcAutoPilotEv+0x116>
    513e:	21 c0       	rjmp	.+66     	; 0x5182 <_ZN9Autopilot13calcAutoPilotEv+0x158>
				//same direction to stbd, no slack
				lastRudderCommand = autopilotRudderCommand;
			}else if (lastDirection && autopilotRudderCommand < lastRudderCommand) {
    5140:	a5 01       	movw	r20, r10
    5142:	94 01       	movw	r18, r8
    5144:	c7 01       	movw	r24, r14
    5146:	b6 01       	movw	r22, r12
    5148:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    514c:	87 ff       	sbrs	r24, 7
    514e:	3d c0       	rjmp	.+122    	; 0x51ca <_ZN9Autopilot13calcAutoPilotEv+0x1a0>
				//changed direction to port, subtract slack
				lastDirection = false;
    5150:	18 8a       	std	Y+16, r1	; 0x10
				lastRudderCommand = autopilotRudderCommand - model->getAutopilotSlack();
    5152:	89 89       	ldd	r24, Y+17	; 0x11
    5154:	9a 89       	ldd	r25, Y+18	; 0x12
    5156:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <_ZN14FreeBoardModel17getAutopilotSlackEv>
    515a:	bc 01       	movw	r22, r24
    515c:	88 27       	eor	r24, r24
    515e:	77 fd       	sbrc	r23, 7
    5160:	80 95       	com	r24
    5162:	98 2f       	mov	r25, r24
    5164:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__floatsisf>
    5168:	9b 01       	movw	r18, r22
    516a:	ac 01       	movw	r20, r24
    516c:	c7 01       	movw	r24, r14
    516e:	b6 01       	movw	r22, r12
    5170:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    5174:	26 c0       	rjmp	.+76     	; 0x51c2 <_ZN9Autopilot13calcAutoPilotEv+0x198>
			}else if (!lastDirection && autopilotRudderCommand < lastRudderCommand) {
    5176:	c7 01       	movw	r24, r14
    5178:	b6 01       	movw	r22, r12
    517a:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    517e:	87 ff       	sbrs	r24, 7
    5180:	05 c0       	rjmp	.+10     	; 0x518c <_ZN9Autopilot13calcAutoPilotEv+0x162>
				//same direction to port
				lastRudderCommand = autopilotRudderCommand;
    5182:	cc 86       	std	Y+12, r12	; 0x0c
    5184:	dd 86       	std	Y+13, r13	; 0x0d
    5186:	ee 86       	std	Y+14, r14	; 0x0e
    5188:	ff 86       	std	Y+15, r15	; 0x0f
    518a:	1f c0       	rjmp	.+62     	; 0x51ca <_ZN9Autopilot13calcAutoPilotEv+0x1a0>
			}else if (!lastDirection && autopilotRudderCommand > lastRudderCommand) {
    518c:	a5 01       	movw	r20, r10
    518e:	94 01       	movw	r18, r8
    5190:	c7 01       	movw	r24, r14
    5192:	b6 01       	movw	r22, r12
    5194:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    5198:	18 16       	cp	r1, r24
    519a:	bc f4       	brge	.+46     	; 0x51ca <_ZN9Autopilot13calcAutoPilotEv+0x1a0>
				//changed direction to stbd, add slack
				lastDirection = true;
    519c:	81 e0       	ldi	r24, 0x01	; 1
    519e:	88 8b       	std	Y+16, r24	; 0x10
				lastRudderCommand = autopilotRudderCommand + model->getAutopilotSlack();
    51a0:	89 89       	ldd	r24, Y+17	; 0x11
    51a2:	9a 89       	ldd	r25, Y+18	; 0x12
    51a4:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <_ZN14FreeBoardModel17getAutopilotSlackEv>
    51a8:	bc 01       	movw	r22, r24
    51aa:	88 27       	eor	r24, r24
    51ac:	77 fd       	sbrc	r23, 7
    51ae:	80 95       	com	r24
    51b0:	98 2f       	mov	r25, r24
    51b2:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__floatsisf>
    51b6:	9b 01       	movw	r18, r22
    51b8:	ac 01       	movw	r20, r24
    51ba:	c7 01       	movw	r24, r14
    51bc:	b6 01       	movw	r22, r12
    51be:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    51c2:	6c 87       	std	Y+12, r22	; 0x0c
    51c4:	7d 87       	std	Y+13, r23	; 0x0d
    51c6:	8e 87       	std	Y+14, r24	; 0x0e
    51c8:	9f 87       	std	Y+15, r25	; 0x0f
			}
			//constrain(lastRudderCommand,0.0,66.0);
			//update model
			model->setAutopilotRudderCommand(lastRudderCommand);
    51ca:	4c 85       	ldd	r20, Y+12	; 0x0c
    51cc:	5d 85       	ldd	r21, Y+13	; 0x0d
    51ce:	6e 85       	ldd	r22, Y+14	; 0x0e
    51d0:	7f 85       	ldd	r23, Y+15	; 0x0f
    51d2:	89 89       	ldd	r24, Y+17	; 0x11
    51d4:	9a 89       	ldd	r25, Y+18	; 0x12
		}

	} else {
		headingPid.SetMode(MANUAL);
	}
}
    51d6:	df 91       	pop	r29
    51d8:	cf 91       	pop	r28
    51da:	1f 91       	pop	r17
    51dc:	0f 91       	pop	r16
    51de:	ff 90       	pop	r15
    51e0:	ef 90       	pop	r14
    51e2:	df 90       	pop	r13
    51e4:	cf 90       	pop	r12
    51e6:	bf 90       	pop	r11
    51e8:	af 90       	pop	r10
    51ea:	9f 90       	pop	r9
    51ec:	8f 90       	pop	r8
				lastDirection = true;
				lastRudderCommand = autopilotRudderCommand + model->getAutopilotSlack();
			}
			//constrain(lastRudderCommand,0.0,66.0);
			//update model
			model->setAutopilotRudderCommand(lastRudderCommand);
    51ee:	0c 94 48 2e 	jmp	0x5c90	; 0x5c90 <_ZN14FreeBoardModel25setAutopilotRudderCommandEd>
		}

	} else {
		headingPid.SetMode(MANUAL);
    51f2:	60 e0       	ldi	r22, 0x00	; 0
    51f4:	70 e0       	ldi	r23, 0x00	; 0
    51f6:	c8 01       	movw	r24, r16
	}
}
    51f8:	df 91       	pop	r29
    51fa:	cf 91       	pop	r28
    51fc:	1f 91       	pop	r17
    51fe:	0f 91       	pop	r16
    5200:	ff 90       	pop	r15
    5202:	ef 90       	pop	r14
    5204:	df 90       	pop	r13
    5206:	cf 90       	pop	r12
    5208:	bf 90       	pop	r11
    520a:	af 90       	pop	r10
    520c:	9f 90       	pop	r9
    520e:	8f 90       	pop	r8
			//update model
			model->setAutopilotRudderCommand(lastRudderCommand);
		}

	} else {
		headingPid.SetMode(MANUAL);
    5210:	0c 94 99 1b 	jmp	0x3732	; 0x3732 <_ZN3PID7SetModeEi>
	}
}
    5214:	df 91       	pop	r29
    5216:	cf 91       	pop	r28
    5218:	1f 91       	pop	r17
    521a:	0f 91       	pop	r16
    521c:	ff 90       	pop	r15
    521e:	ef 90       	pop	r14
    5220:	df 90       	pop	r13
    5222:	cf 90       	pop	r12
    5224:	bf 90       	pop	r11
    5226:	af 90       	pop	r10
    5228:	9f 90       	pop	r9
    522a:	8f 90       	pop	r8
    522c:	08 95       	ret

0000522e <_ZN14HardwareSerial5writeEi>:
    //support 9 bit seatalk
    virtual size_t write9(uint8_t c, bool p);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    522e:	dc 01       	movw	r26, r24
    5230:	ed 91       	ld	r30, X+
    5232:	fc 91       	ld	r31, X
    5234:	01 90       	ld	r0, Z+
    5236:	f0 81       	ld	r31, Z
    5238:	e0 2d       	mov	r30, r0
    523a:	19 94       	eijmp

0000523c <_ZN14FreeBoardModelC1Ev>:
 *      Author: robert
 */

#include "FreeBoardModel.h"

FreeBoardModel::FreeBoardModel() {
    523c:	0f 93       	push	r16
    523e:	1f 93       	push	r17
    5240:	fc 01       	movw	r30, r24
	alarmLast = 0; //millis time of last beep state change
    5242:	10 82       	st	Z, r1
    5244:	11 82       	std	Z+1, r1	; 0x01
    5246:	12 82       	std	Z+2, r1	; 0x02
    5248:	13 82       	std	Z+3, r1	; 0x03
	alarmSnooze = 0; //5 minute alarm snooze
    524a:	14 82       	std	Z+4, r1	; 0x04
    524c:	15 82       	std	Z+5, r1	; 0x05
    524e:	16 82       	std	Z+6, r1	; 0x06
    5250:	17 82       	std	Z+7, r1	; 0x07
	//unsigned long alarmTriggered ; //true if any alarm is triggered - derived

	//anchor
	//float anchorRadius; //anchor alarm radius in meters
	anchorState.anchorRadiusDeg = 0.0; //anchor alarm radius in decimal degrees, eg 1deg = 60NM.
    5252:	10 8a       	std	Z+16, r1	; 0x10
    5254:	11 8a       	std	Z+17, r1	; 0x11
    5256:	12 8a       	std	Z+18, r1	; 0x12
    5258:	13 8a       	std	Z+19, r1	; 0x13

	//anchor alarm data
	//float anchorLat; // variable for reading the anchor latitude
	//float anchorLon; // variable for reading the anchor longitude
	anchorState.anchorDistance = 0.0;
    525a:	14 8a       	std	Z+20, r1	; 0x14
    525c:	15 8a       	std	Z+21, r1	; 0x15
    525e:	16 8a       	std	Z+22, r1	; 0x16
    5260:	17 8a       	std	Z+23, r1	; 0x17
	anchorState.anchorMaxDistance = 0.0;
    5262:	10 8e       	std	Z+24, r1	; 0x18
    5264:	11 8e       	std	Z+25, r1	; 0x19
    5266:	12 8e       	std	Z+26, r1	; 0x1a
    5268:	13 8e       	std	Z+27, r1	; 0x1b
	//bool anchorAlarmOn; //flag to turn anchor alarm on/off toggle
	anchorState.anchorAlarmTriggered = false; //set to true to trigger anchor alarm
    526a:	14 8e       	std	Z+28, r1	; 0x1c

	//a box around the anchor, shrinks with every GPS reading to home in on the anchor itself
	anchorState.anchorN = 90.0;
    526c:	40 e0       	ldi	r20, 0x00	; 0
    526e:	50 e0       	ldi	r21, 0x00	; 0
    5270:	64 eb       	ldi	r22, 0xB4	; 180
    5272:	72 e4       	ldi	r23, 0x42	; 66
    5274:	45 8f       	std	Z+29, r20	; 0x1d
    5276:	56 8f       	std	Z+30, r21	; 0x1e
    5278:	67 8f       	std	Z+31, r22	; 0x1f
    527a:	70 a3       	std	Z+32, r23	; 0x20
	anchorState.anchorS = -90.0;
    527c:	40 e0       	ldi	r20, 0x00	; 0
    527e:	50 e0       	ldi	r21, 0x00	; 0
    5280:	64 eb       	ldi	r22, 0xB4	; 180
    5282:	72 ec       	ldi	r23, 0xC2	; 194
    5284:	41 a3       	std	Z+33, r20	; 0x21
    5286:	52 a3       	std	Z+34, r21	; 0x22
    5288:	63 a3       	std	Z+35, r22	; 0x23
    528a:	74 a3       	std	Z+36, r23	; 0x24
	anchorState.anchorE = 180.0;
    528c:	40 e0       	ldi	r20, 0x00	; 0
    528e:	50 e0       	ldi	r21, 0x00	; 0
    5290:	64 e3       	ldi	r22, 0x34	; 52
    5292:	73 e4       	ldi	r23, 0x43	; 67
    5294:	45 a3       	std	Z+37, r20	; 0x25
    5296:	56 a3       	std	Z+38, r21	; 0x26
    5298:	67 a3       	std	Z+39, r22	; 0x27
    529a:	70 a7       	std	Z+40, r23	; 0x28
	anchorState.anchorW = -180.0;
    529c:	40 e0       	ldi	r20, 0x00	; 0
    529e:	50 e0       	ldi	r21, 0x00	; 0
    52a0:	64 e3       	ldi	r22, 0x34	; 52
    52a2:	73 ec       	ldi	r23, 0xC3	; 195
    52a4:	41 a7       	std	Z+41, r20	; 0x29
    52a6:	52 a7       	std	Z+42, r21	; 0x2a
    52a8:	63 a7       	std	Z+43, r22	; 0x2b
    52aa:	74 a7       	std	Z+44, r23	; 0x2c

	//autopilot
	autopilotState.autopilotOn=false;
    52ac:	15 a6       	std	Z+45, r1	; 0x2d
	//disengage the autopilot if we reboot!!
	//Dont want to go screaming off on wrong course.
	autopilotState.autopilotReference = AUTOPILOT_COMPASS;
    52ae:	83 e4       	ldi	r24, 0x43	; 67
    52b0:	82 ab       	std	Z+50, r24	; 0x32
	autopilotState.autopilotTargetHeading = 0; //Setpoint
    52b2:	13 aa       	std	Z+51, r1	; 0x33
    52b4:	14 aa       	std	Z+52, r1	; 0x34
    52b6:	15 aa       	std	Z+53, r1	; 0x35
    52b8:	16 aa       	std	Z+54, r1	; 0x36
	autopilotState.autopilotRudderCommand = 33; //Output (rudder central)
    52ba:	40 e0       	ldi	r20, 0x00	; 0
    52bc:	50 e0       	ldi	r21, 0x00	; 0
    52be:	64 e0       	ldi	r22, 0x04	; 4
    52c0:	72 e4       	ldi	r23, 0x42	; 66
    52c2:	47 ab       	std	Z+55, r20	; 0x37
    52c4:	50 af       	std	Z+56, r21	; 0x38
    52c6:	61 af       	std	Z+57, r22	; 0x39
    52c8:	72 af       	std	Z+58, r23	; 0x3a
	//bool autopilotAlarmOn;
	autopilotState.autopilotAlarmTriggered = false;
    52ca:	13 ae       	std	Z+59, r1	; 0x3b
	autopilotState.autopilotAlarmMaxXTError = 100; // +/- meters cross track error
    52cc:	40 e0       	ldi	r20, 0x00	; 0
    52ce:	50 e0       	ldi	r21, 0x00	; 0
    52d0:	68 ec       	ldi	r22, 0xC8	; 200
    52d2:	72 e4       	ldi	r23, 0x42	; 66
    52d4:	44 af       	std	Z+60, r20	; 0x3c
    52d6:	55 af       	std	Z+61, r21	; 0x3d
    52d8:	66 af       	std	Z+62, r22	; 0x3e
    52da:	77 af       	std	Z+63, r23	; 0x3f
	autopilotState.autopilotAlarmMaxWindError = 10; // +/- wind angle change, for over 1 minute
    52dc:	df 01       	movw	r26, r30
    52de:	a0 5c       	subi	r26, 0xC0	; 192
    52e0:	bf 4f       	sbci	r27, 0xFF	; 255
    52e2:	40 e0       	ldi	r20, 0x00	; 0
    52e4:	50 e0       	ldi	r21, 0x00	; 0
    52e6:	60 e2       	ldi	r22, 0x20	; 32
    52e8:	71 e4       	ldi	r23, 0x41	; 65
    52ea:	4d 93       	st	X+, r20
    52ec:	5d 93       	st	X+, r21
    52ee:	6d 93       	st	X+, r22
    52f0:	7c 93       	st	X, r23
    52f2:	13 97       	sbiw	r26, 0x03	; 3
	autopilotState.autopilotAlarmMaxCourseError = 10; // +/- course error, for over 1 minute
    52f4:	df 01       	movw	r26, r30
    52f6:	ac 5b       	subi	r26, 0xBC	; 188
    52f8:	bf 4f       	sbci	r27, 0xFF	; 255
    52fa:	4d 93       	st	X+, r20
    52fc:	5d 93       	st	X+, r21
    52fe:	6d 93       	st	X+, r22
    5300:	7c 93       	st	X, r23
    5302:	13 97       	sbiw	r26, 0x03	; 3

	//compass
	magneticHeading=0;
    5304:	10 86       	std	Z+8, r1	; 0x08
    5306:	11 86       	std	Z+9, r1	; 0x09
    5308:	12 86       	std	Z+10, r1	; 0x0a
    530a:	13 86       	std	Z+11, r1	; 0x0b
	declination=0;
    530c:	14 86       	std	Z+12, r1	; 0x0c
    530e:	15 86       	std	Z+13, r1	; 0x0d
    5310:	16 86       	std	Z+14, r1	; 0x0e
    5312:	17 86       	std	Z+15, r1	; 0x0f
	//gps
	gpsState.gpsDecode = false; //flag to indicate a new sentence was decoded.
    5314:	df 01       	movw	r26, r30
    5316:	a8 5b       	subi	r26, 0xB8	; 184
    5318:	bf 4f       	sbci	r27, 0xFF	; 255
    531a:	1c 92       	st	X, r1
	gpsState.gpsLastFix = 0; //time of last good gps fix.
    531c:	df 01       	movw	r26, r30
    531e:	a7 5b       	subi	r26, 0xB7	; 183
    5320:	bf 4f       	sbci	r27, 0xFF	; 255
    5322:	1d 92       	st	X+, r1
    5324:	1d 92       	st	X+, r1
    5326:	1d 92       	st	X+, r1
    5328:	1c 92       	st	X, r1
    532a:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsUtc = 0; // decimal value of UTC term in last full GPRMC sentence
    532c:	df 01       	movw	r26, r30
    532e:	a3 5b       	subi	r26, 0xB3	; 179
    5330:	bf 4f       	sbci	r27, 0xFF	; 255
    5332:	1d 92       	st	X+, r1
    5334:	1d 92       	st	X+, r1
    5336:	1d 92       	st	X+, r1
    5338:	1c 92       	st	X, r1
    533a:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsStatus = 'V'; //  status character in last full GPRMC sentence ('A' or 'V')
    533c:	df 01       	movw	r26, r30
    533e:	af 5a       	subi	r26, 0xAF	; 175
    5340:	bf 4f       	sbci	r27, 0xFF	; 255
    5342:	86 e5       	ldi	r24, 0x56	; 86
    5344:	8c 93       	st	X, r24
	gpsState.gpsLatitude = 0.0; // signed degree-decimal value of latitude terms in last full GPRMC sentence
    5346:	df 01       	movw	r26, r30
    5348:	ae 5a       	subi	r26, 0xAE	; 174
    534a:	bf 4f       	sbci	r27, 0xFF	; 255
    534c:	1d 92       	st	X+, r1
    534e:	1d 92       	st	X+, r1
    5350:	1d 92       	st	X+, r1
    5352:	1c 92       	st	X, r1
    5354:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsLongitude = 0.0; // signed degree-decimal value of longitude terms in last full GPRMC sentence
    5356:	df 01       	movw	r26, r30
    5358:	aa 5a       	subi	r26, 0xAA	; 170
    535a:	bf 4f       	sbci	r27, 0xFF	; 255
    535c:	1d 92       	st	X+, r1
    535e:	1d 92       	st	X+, r1
    5360:	1d 92       	st	X+, r1
    5362:	1c 92       	st	X, r1
    5364:	13 97       	sbiw	r26, 0x03	; 3
	//float gpsSpeedUnit; //unit multiplier for gpsSpeed. 1.0 = KNT,1.1507794	=MPH, see nmea.h
	gpsState.gpsSpeed = 0.0; // speed-on-ground term in last full GPRMC sentence
    5366:	df 01       	movw	r26, r30
    5368:	a6 5a       	subi	r26, 0xA6	; 166
    536a:	bf 4f       	sbci	r27, 0xFF	; 255
    536c:	1d 92       	st	X+, r1
    536e:	1d 92       	st	X+, r1
    5370:	1d 92       	st	X+, r1
    5372:	1c 92       	st	X, r1
    5374:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsCourse = 0.0; // track-angle-made-good term in last full GPRMC sentence
    5376:	df 01       	movw	r26, r30
    5378:	a2 5a       	subi	r26, 0xA2	; 162
    537a:	bf 4f       	sbci	r27, 0xFF	; 255
    537c:	1d 92       	st	X+, r1
    537e:	1d 92       	st	X+, r1
    5380:	1d 92       	st	X+, r1
    5382:	1c 92       	st	X, r1
    5384:	13 97       	sbiw	r26, 0x03	; 3
	//bool gpsAlarmOn; //true to engage alarm
	gpsState.gpsAlarmTriggered = false; //set to true to trigger gps alarm
    5386:	df 01       	movw	r26, r30
    5388:	ae 59       	subi	r26, 0x9E	; 158
    538a:	bf 4f       	sbci	r27, 0xFF	; 255
    538c:	1c 92       	st	X, r1
	//double gpsAlarmFixTime; //max time in millis without fix

	//seatalk
	//volatile bool radarAlarmOn; //set to true to enable radar alarm
	radarAlarmTriggered = false; //set to true to trigger radar alarm
    538e:	df 01       	movw	r26, r30
    5390:	ad 59       	subi	r26, 0x9D	; 157
    5392:	bf 4f       	sbci	r27, 0xFF	; 255
    5394:	1c 92       	st	X, r1
	//volatile bool mobAlarmOn; //set to true to enable mob alarm
	mobAlarmTriggered = false; //set to true to trigger MOB alarm
    5396:	df 01       	movw	r26, r30
    5398:	ac 59       	subi	r26, 0x9C	; 156
    539a:	bf 4f       	sbci	r27, 0xFF	; 255
    539c:	1c 92       	st	X, r1

	//wind
	windState.windLastUpdate = 0;
    539e:	df 01       	movw	r26, r30
    53a0:	ab 59       	subi	r26, 0x9B	; 155
    53a2:	bf 4f       	sbci	r27, 0xFF	; 255
    53a4:	1d 92       	st	X+, r1
    53a6:	1d 92       	st	X+, r1
    53a8:	1d 92       	st	X+, r1
    53aa:	1c 92       	st	X, r1
    53ac:	13 97       	sbiw	r26, 0x03	; 3
	windState.windAverage = 0.0;
    53ae:	df 01       	movw	r26, r30
    53b0:	a7 59       	subi	r26, 0x97	; 151
    53b2:	bf 4f       	sbci	r27, 0xFF	; 255
    53b4:	1d 92       	st	X+, r1
    53b6:	1d 92       	st	X+, r1
    53b8:	1d 92       	st	X+, r1
    53ba:	1c 92       	st	X, r1
    53bc:	13 97       	sbiw	r26, 0x03	; 3
	//windState.windFactor=0;
	windState.windMax = 0;
    53be:	df 01       	movw	r26, r30
    53c0:	a3 59       	subi	r26, 0x93	; 147
    53c2:	bf 4f       	sbci	r27, 0xFF	; 255
    53c4:	1d 92       	st	X+, r1
    53c6:	1c 92       	st	X, r1
	windState.windApparentDir = 0;
    53c8:	df 01       	movw	r26, r30
    53ca:	a1 59       	subi	r26, 0x91	; 145
    53cc:	bf 4f       	sbci	r27, 0xFF	; 255
    53ce:	1d 92       	st	X+, r1
    53d0:	1c 92       	st	X, r1
	windState.windTrueDir=0;
    53d2:	df 01       	movw	r26, r30
    53d4:	af 58       	subi	r26, 0x8F	; 143
    53d6:	bf 4f       	sbci	r27, 0xFF	; 255
    53d8:	1d 92       	st	X+, r1
    53da:	1c 92       	st	X, r1
	//int windAlarmSpeed;
	//bool windAlarmOn;
	windState.windAlarmTriggered = false;
    53dc:	df 01       	movw	r26, r30
    53de:	ad 58       	subi	r26, 0x8D	; 141
    53e0:	bf 4f       	sbci	r27, 0xFF	; 255
    53e2:	1c 92       	st	X, r1

	//struct Configuration{
	config.anchorLat = 0.0;
    53e4:	df 01       	movw	r26, r30
    53e6:	ac 58       	subi	r26, 0x8C	; 140
    53e8:	bf 4f       	sbci	r27, 0xFF	; 255
    53ea:	1d 92       	st	X+, r1
    53ec:	1d 92       	st	X+, r1
    53ee:	1d 92       	st	X+, r1
    53f0:	1c 92       	st	X, r1
    53f2:	13 97       	sbiw	r26, 0x03	; 3
	config.anchorLon = 0.0;
    53f4:	df 01       	movw	r26, r30
    53f6:	a8 58       	subi	r26, 0x88	; 136
    53f8:	bf 4f       	sbci	r27, 0xFF	; 255
    53fa:	1d 92       	st	X+, r1
    53fc:	1d 92       	st	X+, r1
    53fe:	1d 92       	st	X+, r1
    5400:	1c 92       	st	X, r1
    5402:	13 97       	sbiw	r26, 0x03	; 3
	config.anchorRadius = 40.0;
    5404:	df 01       	movw	r26, r30
    5406:	a4 58       	subi	r26, 0x84	; 132
    5408:	bf 4f       	sbci	r27, 0xFF	; 255
    540a:	40 e0       	ldi	r20, 0x00	; 0
    540c:	50 e0       	ldi	r21, 0x00	; 0
    540e:	60 e2       	ldi	r22, 0x20	; 32
    5410:	72 e4       	ldi	r23, 0x42	; 66
    5412:	4d 93       	st	X+, r20
    5414:	5d 93       	st	X+, r21
    5416:	6d 93       	st	X+, r22
    5418:	7c 93       	st	X, r23
    541a:	13 97       	sbiw	r26, 0x03	; 3
	config.anchorAlarmOn = false;
    541c:	df 01       	movw	r26, r30
    541e:	a0 58       	subi	r26, 0x80	; 128
    5420:	bf 4f       	sbci	r27, 0xFF	; 255
    5422:	1c 92       	st	X, r1
	config.autopilotAlarmOn = false;
    5424:	df 01       	movw	r26, r30
    5426:	af 57       	subi	r26, 0x7F	; 127
    5428:	bf 4f       	sbci	r27, 0xFF	; 255
    542a:	1c 92       	st	X, r1
	config.autopilotDeadZone = 0;
    542c:	df 01       	movw	r26, r30
    542e:	ae 57       	subi	r26, 0x7E	; 126
    5430:	bf 4f       	sbci	r27, 0xFF	; 255
    5432:	1d 92       	st	X+, r1
    5434:	1c 92       	st	X, r1
	config.autopilotSlack = 0;
    5436:	df 01       	movw	r26, r30
    5438:	ac 57       	subi	r26, 0x7C	; 124
    543a:	bf 4f       	sbci	r27, 0xFF	; 255
    543c:	1d 92       	st	X+, r1
    543e:	1c 92       	st	X, r1
	config.gpsSpeedUnit = KTS;
    5440:	df 01       	movw	r26, r30
    5442:	aa 57       	subi	r26, 0x7A	; 122
    5444:	bf 4f       	sbci	r27, 0xFF	; 255
    5446:	40 e0       	ldi	r20, 0x00	; 0
    5448:	50 e0       	ldi	r21, 0x00	; 0
    544a:	60 e8       	ldi	r22, 0x80	; 128
    544c:	7f e3       	ldi	r23, 0x3F	; 63
    544e:	4d 93       	st	X+, r20
    5450:	5d 93       	st	X+, r21
    5452:	6d 93       	st	X+, r22
    5454:	7c 93       	st	X, r23
    5456:	13 97       	sbiw	r26, 0x03	; 3
	config.gpsAlarmOn = false;
    5458:	df 01       	movw	r26, r30
    545a:	a6 57       	subi	r26, 0x76	; 118
    545c:	bf 4f       	sbci	r27, 0xFF	; 255
    545e:	1c 92       	st	X, r1
	config.gpsAlarmFixTime = 1000l * 60 * 5; //5 min
    5460:	df 01       	movw	r26, r30
    5462:	a5 57       	subi	r26, 0x75	; 117
    5464:	bf 4f       	sbci	r27, 0xFF	; 255
    5466:	00 ee       	ldi	r16, 0xE0	; 224
    5468:	13 e9       	ldi	r17, 0x93	; 147
    546a:	24 e0       	ldi	r18, 0x04	; 4
    546c:	30 e0       	ldi	r19, 0x00	; 0
    546e:	0d 93       	st	X+, r16
    5470:	1d 93       	st	X+, r17
    5472:	2d 93       	st	X+, r18
    5474:	3c 93       	st	X, r19
    5476:	13 97       	sbiw	r26, 0x03	; 3
	config.radarAlarmOn = false;
    5478:	df 01       	movw	r26, r30
    547a:	a1 57       	subi	r26, 0x71	; 113
    547c:	bf 4f       	sbci	r27, 0xFF	; 255
    547e:	1c 92       	st	X, r1
	config.mobAlarmOn = false;
    5480:	df 01       	movw	r26, r30
    5482:	a0 57       	subi	r26, 0x70	; 112
    5484:	bf 4f       	sbci	r27, 0xFF	; 255
    5486:	1c 92       	st	X, r1
	config.windAlarmSpeed = 99;
    5488:	df 01       	movw	r26, r30
    548a:	af 56       	subi	r26, 0x6F	; 111
    548c:	bf 4f       	sbci	r27, 0xFF	; 255
    548e:	83 e6       	ldi	r24, 0x63	; 99
    5490:	90 e0       	ldi	r25, 0x00	; 0
    5492:	8d 93       	st	X+, r24
    5494:	9c 93       	st	X, r25
	config.windAlarmOn = false;
    5496:	df 01       	movw	r26, r30
    5498:	ad 56       	subi	r26, 0x6D	; 109
    549a:	bf 4f       	sbci	r27, 0xFF	; 255
    549c:	1c 92       	st	X, r1
	config.windFactor = 1.0;
    549e:	df 01       	movw	r26, r30
    54a0:	ac 56       	subi	r26, 0x6C	; 108
    54a2:	bf 4f       	sbci	r27, 0xFF	; 255
    54a4:	4d 93       	st	X+, r20
    54a6:	5d 93       	st	X+, r21
    54a8:	6d 93       	st	X+, r22
    54aa:	7c 93       	st	X, r23
    54ac:	13 97       	sbiw	r26, 0x03	; 3
	config.windZeroOffset = 0;
    54ae:	df 01       	movw	r26, r30
    54b0:	a8 56       	subi	r26, 0x68	; 104
    54b2:	bf 4f       	sbci	r27, 0xFF	; 255
    54b4:	1d 92       	st	X+, r1
    54b6:	1c 92       	st	X, r1
	//}config;

//we change this if we change the struct so we can tell before reloading incompatible versions
	version = EEPROM_VER;
    54b8:	e6 56       	subi	r30, 0x66	; 102
    54ba:	ff 4f       	sbci	r31, 0xFF	; 255
    54bc:	85 e0       	ldi	r24, 0x05	; 5
    54be:	90 e0       	ldi	r25, 0x00	; 0
    54c0:	91 83       	std	Z+1, r25	; 0x01
    54c2:	80 83       	st	Z, r24
}
    54c4:	1f 91       	pop	r17
    54c6:	0f 91       	pop	r16
    54c8:	08 95       	ret

000054ca <_ZN14HardwareSerialC1ERKS_>:
    54ca:	fc 01       	movw	r30, r24
    54cc:	db 01       	movw	r26, r22
    54ce:	12 96       	adiw	r26, 0x02	; 2
    54d0:	8d 91       	ld	r24, X+
    54d2:	9c 91       	ld	r25, X
    54d4:	13 97       	sbiw	r26, 0x03	; 3
    54d6:	93 83       	std	Z+3, r25	; 0x03
    54d8:	82 83       	std	Z+2, r24	; 0x02
    54da:	14 96       	adiw	r26, 0x04	; 4
    54dc:	4d 91       	ld	r20, X+
    54de:	5d 91       	ld	r21, X+
    54e0:	6d 91       	ld	r22, X+
    54e2:	7c 91       	ld	r23, X
    54e4:	17 97       	sbiw	r26, 0x07	; 7
    54e6:	44 83       	std	Z+4, r20	; 0x04
    54e8:	55 83       	std	Z+5, r21	; 0x05
    54ea:	66 83       	std	Z+6, r22	; 0x06
    54ec:	77 83       	std	Z+7, r23	; 0x07
    54ee:	18 96       	adiw	r26, 0x08	; 8
    54f0:	4d 91       	ld	r20, X+
    54f2:	5d 91       	ld	r21, X+
    54f4:	6d 91       	ld	r22, X+
    54f6:	7c 91       	ld	r23, X
    54f8:	1b 97       	sbiw	r26, 0x0b	; 11
    54fa:	40 87       	std	Z+8, r20	; 0x08
    54fc:	51 87       	std	Z+9, r21	; 0x09
    54fe:	62 87       	std	Z+10, r22	; 0x0a
    5500:	73 87       	std	Z+11, r23	; 0x0b
    5502:	80 ee       	ldi	r24, 0xE0	; 224
    5504:	94 e0       	ldi	r25, 0x04	; 4
    5506:	91 83       	std	Z+1, r25	; 0x01
    5508:	80 83       	st	Z, r24
    550a:	1c 96       	adiw	r26, 0x0c	; 12
    550c:	8d 91       	ld	r24, X+
    550e:	9c 91       	ld	r25, X
    5510:	1d 97       	sbiw	r26, 0x0d	; 13
    5512:	95 87       	std	Z+13, r25	; 0x0d
    5514:	84 87       	std	Z+12, r24	; 0x0c
    5516:	1e 96       	adiw	r26, 0x0e	; 14
    5518:	8d 91       	ld	r24, X+
    551a:	9c 91       	ld	r25, X
    551c:	1f 97       	sbiw	r26, 0x0f	; 15
    551e:	97 87       	std	Z+15, r25	; 0x0f
    5520:	86 87       	std	Z+14, r24	; 0x0e
    5522:	50 96       	adiw	r26, 0x10	; 16
    5524:	8d 91       	ld	r24, X+
    5526:	9c 91       	ld	r25, X
    5528:	51 97       	sbiw	r26, 0x11	; 17
    552a:	91 8b       	std	Z+17, r25	; 0x11
    552c:	80 8b       	std	Z+16, r24	; 0x10
    552e:	52 96       	adiw	r26, 0x12	; 18
    5530:	8d 91       	ld	r24, X+
    5532:	9c 91       	ld	r25, X
    5534:	53 97       	sbiw	r26, 0x13	; 19
    5536:	93 8b       	std	Z+19, r25	; 0x13
    5538:	82 8b       	std	Z+18, r24	; 0x12
    553a:	54 96       	adiw	r26, 0x14	; 20
    553c:	8d 91       	ld	r24, X+
    553e:	9c 91       	ld	r25, X
    5540:	55 97       	sbiw	r26, 0x15	; 21
    5542:	95 8b       	std	Z+21, r25	; 0x15
    5544:	84 8b       	std	Z+20, r24	; 0x14
    5546:	56 96       	adiw	r26, 0x16	; 22
    5548:	8d 91       	ld	r24, X+
    554a:	9c 91       	ld	r25, X
    554c:	57 97       	sbiw	r26, 0x17	; 23
    554e:	97 8b       	std	Z+23, r25	; 0x17
    5550:	86 8b       	std	Z+22, r24	; 0x16
    5552:	58 96       	adiw	r26, 0x18	; 24
    5554:	8d 91       	ld	r24, X+
    5556:	9c 91       	ld	r25, X
    5558:	59 97       	sbiw	r26, 0x19	; 25
    555a:	91 8f       	std	Z+25, r25	; 0x19
    555c:	80 8f       	std	Z+24, r24	; 0x18
    555e:	5a 96       	adiw	r26, 0x1a	; 26
    5560:	8d 91       	ld	r24, X+
    5562:	9c 91       	ld	r25, X
    5564:	5b 97       	sbiw	r26, 0x1b	; 27
    5566:	93 8f       	std	Z+27, r25	; 0x1b
    5568:	82 8f       	std	Z+26, r24	; 0x1a
    556a:	5c 96       	adiw	r26, 0x1c	; 28
    556c:	8c 91       	ld	r24, X
    556e:	5c 97       	sbiw	r26, 0x1c	; 28
    5570:	84 8f       	std	Z+28, r24	; 0x1c
    5572:	5d 96       	adiw	r26, 0x1d	; 29
    5574:	8c 91       	ld	r24, X
    5576:	5d 97       	sbiw	r26, 0x1d	; 29
    5578:	85 8f       	std	Z+29, r24	; 0x1d
    557a:	5e 96       	adiw	r26, 0x1e	; 30
    557c:	8c 91       	ld	r24, X
    557e:	5e 97       	sbiw	r26, 0x1e	; 30
    5580:	86 8f       	std	Z+30, r24	; 0x1e
    5582:	5f 96       	adiw	r26, 0x1f	; 31
    5584:	8c 91       	ld	r24, X
    5586:	5f 97       	sbiw	r26, 0x1f	; 31
    5588:	87 8f       	std	Z+31, r24	; 0x1f
    558a:	90 96       	adiw	r26, 0x20	; 32
    558c:	8c 91       	ld	r24, X
    558e:	90 97       	sbiw	r26, 0x20	; 32
    5590:	80 a3       	std	Z+32, r24	; 0x20
    5592:	91 96       	adiw	r26, 0x21	; 33
    5594:	8c 91       	ld	r24, X
    5596:	81 a3       	std	Z+33, r24	; 0x21
    5598:	08 95       	ret

0000559a <_ZN14FreeBoardModel17getAnchorDistanceEv>:
    559a:	fc 01       	movw	r30, r24
    559c:	54 89       	ldd	r21, Z+20	; 0x14
    559e:	45 89       	ldd	r20, Z+21	; 0x15
    55a0:	36 89       	ldd	r19, Z+22	; 0x16
    55a2:	27 89       	ldd	r18, Z+23	; 0x17
    55a4:	65 2f       	mov	r22, r21
    55a6:	74 2f       	mov	r23, r20
    55a8:	83 2f       	mov	r24, r19
    55aa:	92 2f       	mov	r25, r18
    55ac:	08 95       	ret

000055ae <_ZN14FreeBoardModel10getAnchorEEv>:
    55ae:	fc 01       	movw	r30, r24
    55b0:	55 a1       	ldd	r21, Z+37	; 0x25
    55b2:	46 a1       	ldd	r20, Z+38	; 0x26
    55b4:	37 a1       	ldd	r19, Z+39	; 0x27
    55b6:	20 a5       	ldd	r18, Z+40	; 0x28
    55b8:	65 2f       	mov	r22, r21
    55ba:	74 2f       	mov	r23, r20
    55bc:	83 2f       	mov	r24, r19
    55be:	92 2f       	mov	r25, r18
    55c0:	08 95       	ret

000055c2 <_ZN14FreeBoardModel12getAnchorLatEv>:
    55c2:	fc 01       	movw	r30, r24
    55c4:	ec 58       	subi	r30, 0x8C	; 140
    55c6:	ff 4f       	sbci	r31, 0xFF	; 255
    55c8:	50 81       	ld	r21, Z
    55ca:	41 81       	ldd	r20, Z+1	; 0x01
    55cc:	32 81       	ldd	r19, Z+2	; 0x02
    55ce:	23 81       	ldd	r18, Z+3	; 0x03
    55d0:	65 2f       	mov	r22, r21
    55d2:	74 2f       	mov	r23, r20
    55d4:	83 2f       	mov	r24, r19
    55d6:	92 2f       	mov	r25, r18
    55d8:	08 95       	ret

000055da <_ZN14FreeBoardModel12getAnchorLonEv>:
    55da:	fc 01       	movw	r30, r24
    55dc:	e8 58       	subi	r30, 0x88	; 136
    55de:	ff 4f       	sbci	r31, 0xFF	; 255
    55e0:	50 81       	ld	r21, Z
    55e2:	41 81       	ldd	r20, Z+1	; 0x01
    55e4:	32 81       	ldd	r19, Z+2	; 0x02
    55e6:	23 81       	ldd	r18, Z+3	; 0x03
    55e8:	65 2f       	mov	r22, r21
    55ea:	74 2f       	mov	r23, r20
    55ec:	83 2f       	mov	r24, r19
    55ee:	92 2f       	mov	r25, r18
    55f0:	08 95       	ret

000055f2 <_ZN14FreeBoardModel20getAnchorMaxDistanceEv>:
    55f2:	fc 01       	movw	r30, r24
    55f4:	50 8d       	ldd	r21, Z+24	; 0x18
    55f6:	41 8d       	ldd	r20, Z+25	; 0x19
    55f8:	32 8d       	ldd	r19, Z+26	; 0x1a
    55fa:	23 8d       	ldd	r18, Z+27	; 0x1b
    55fc:	65 2f       	mov	r22, r21
    55fe:	74 2f       	mov	r23, r20
    5600:	83 2f       	mov	r24, r19
    5602:	92 2f       	mov	r25, r18
    5604:	08 95       	ret

00005606 <_ZN14FreeBoardModel10getAnchorNEv>:
    5606:	fc 01       	movw	r30, r24
    5608:	55 8d       	ldd	r21, Z+29	; 0x1d
    560a:	46 8d       	ldd	r20, Z+30	; 0x1e
    560c:	37 8d       	ldd	r19, Z+31	; 0x1f
    560e:	20 a1       	ldd	r18, Z+32	; 0x20
    5610:	65 2f       	mov	r22, r21
    5612:	74 2f       	mov	r23, r20
    5614:	83 2f       	mov	r24, r19
    5616:	92 2f       	mov	r25, r18
    5618:	08 95       	ret

0000561a <_ZN14FreeBoardModel15getAnchorRadiusEv>:
    561a:	fc 01       	movw	r30, r24
    561c:	e4 58       	subi	r30, 0x84	; 132
    561e:	ff 4f       	sbci	r31, 0xFF	; 255
    5620:	50 81       	ld	r21, Z
    5622:	41 81       	ldd	r20, Z+1	; 0x01
    5624:	32 81       	ldd	r19, Z+2	; 0x02
    5626:	23 81       	ldd	r18, Z+3	; 0x03
    5628:	65 2f       	mov	r22, r21
    562a:	74 2f       	mov	r23, r20
    562c:	83 2f       	mov	r24, r19
    562e:	92 2f       	mov	r25, r18
    5630:	08 95       	ret

00005632 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>:
    5632:	fc 01       	movw	r30, r24
    5634:	50 89       	ldd	r21, Z+16	; 0x10
    5636:	41 89       	ldd	r20, Z+17	; 0x11
    5638:	32 89       	ldd	r19, Z+18	; 0x12
    563a:	23 89       	ldd	r18, Z+19	; 0x13
    563c:	65 2f       	mov	r22, r21
    563e:	74 2f       	mov	r23, r20
    5640:	83 2f       	mov	r24, r19
    5642:	92 2f       	mov	r25, r18
    5644:	08 95       	ret

00005646 <_ZN14FreeBoardModel10getAnchorSEv>:
    5646:	fc 01       	movw	r30, r24
    5648:	51 a1       	ldd	r21, Z+33	; 0x21
    564a:	42 a1       	ldd	r20, Z+34	; 0x22
    564c:	33 a1       	ldd	r19, Z+35	; 0x23
    564e:	24 a1       	ldd	r18, Z+36	; 0x24
    5650:	65 2f       	mov	r22, r21
    5652:	74 2f       	mov	r23, r20
    5654:	83 2f       	mov	r24, r19
    5656:	92 2f       	mov	r25, r18
    5658:	08 95       	ret

0000565a <_ZN14FreeBoardModel10getAnchorWEv>:
    565a:	fc 01       	movw	r30, r24
    565c:	51 a5       	ldd	r21, Z+41	; 0x29
    565e:	42 a5       	ldd	r20, Z+42	; 0x2a
    5660:	33 a5       	ldd	r19, Z+43	; 0x2b
    5662:	24 a5       	ldd	r18, Z+44	; 0x2c
    5664:	65 2f       	mov	r22, r21
    5666:	74 2f       	mov	r23, r20
    5668:	83 2f       	mov	r24, r19
    566a:	92 2f       	mov	r25, r18
    566c:	08 95       	ret

0000566e <_ZN14FreeBoardModel25getAutopilotRudderCommandEv>:
    566e:	fc 01       	movw	r30, r24
    5670:	57 a9       	ldd	r21, Z+55	; 0x37
    5672:	40 ad       	ldd	r20, Z+56	; 0x38
    5674:	31 ad       	ldd	r19, Z+57	; 0x39
    5676:	22 ad       	ldd	r18, Z+58	; 0x3a
    5678:	65 2f       	mov	r22, r21
    567a:	74 2f       	mov	r23, r20
    567c:	83 2f       	mov	r24, r19
    567e:	92 2f       	mov	r25, r18
    5680:	08 95       	ret

00005682 <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>:
    5682:	fc 01       	movw	r30, r24
    5684:	53 a9       	ldd	r21, Z+51	; 0x33
    5686:	44 a9       	ldd	r20, Z+52	; 0x34
    5688:	35 a9       	ldd	r19, Z+53	; 0x35
    568a:	26 a9       	ldd	r18, Z+54	; 0x36
    568c:	65 2f       	mov	r22, r21
    568e:	74 2f       	mov	r23, r20
    5690:	83 2f       	mov	r24, r19
    5692:	92 2f       	mov	r25, r18
    5694:	08 95       	ret

00005696 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>:
    5696:	fc 01       	movw	r30, r24
    5698:	82 a9       	ldd	r24, Z+50	; 0x32
    569a:	87 35       	cpi	r24, 0x57	; 87
    569c:	59 f4       	brne	.+22     	; 0x56b4 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv+0x1e>
    569e:	e1 59       	subi	r30, 0x91	; 145
    56a0:	ff 4f       	sbci	r31, 0xFF	; 255
    56a2:	60 81       	ld	r22, Z
    56a4:	71 81       	ldd	r23, Z+1	; 0x01
    56a6:	88 27       	eor	r24, r24
    56a8:	77 fd       	sbrc	r23, 7
    56aa:	80 95       	com	r24
    56ac:	98 2f       	mov	r25, r24
    56ae:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__floatsisf>
    56b2:	04 c0       	rjmp	.+8      	; 0x56bc <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv+0x26>
    56b4:	60 85       	ldd	r22, Z+8	; 0x08
    56b6:	71 85       	ldd	r23, Z+9	; 0x09
    56b8:	82 85       	ldd	r24, Z+10	; 0x0a
    56ba:	93 85       	ldd	r25, Z+11	; 0x0b
    56bc:	08 95       	ret

000056be <_ZN14FreeBoardModel21getAutopilotOffCourseEv>:
    56be:	ef 92       	push	r14
    56c0:	ff 92       	push	r15
    56c2:	0f 93       	push	r16
    56c4:	1f 93       	push	r17
    56c6:	cf 93       	push	r28
    56c8:	df 93       	push	r29
    56ca:	ec 01       	movw	r28, r24
    56cc:	0e 94 4b 2b 	call	0x5696	; 0x5696 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>
    56d0:	9b 01       	movw	r18, r22
    56d2:	ac 01       	movw	r20, r24
    56d4:	6b a9       	ldd	r22, Y+51	; 0x33
    56d6:	7c a9       	ldd	r23, Y+52	; 0x34
    56d8:	8d a9       	ldd	r24, Y+53	; 0x35
    56da:	9e a9       	ldd	r25, Y+54	; 0x36
    56dc:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    56e0:	7b 01       	movw	r14, r22
    56e2:	8c 01       	movw	r16, r24
    56e4:	20 e0       	ldi	r18, 0x00	; 0
    56e6:	30 e0       	ldi	r19, 0x00	; 0
    56e8:	44 e3       	ldi	r20, 0x34	; 52
    56ea:	53 e4       	ldi	r21, 0x43	; 67
    56ec:	7f 2d       	mov	r23, r15
    56ee:	91 2f       	mov	r25, r17
    56f0:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    56f4:	18 16       	cp	r1, r24
    56f6:	8c f0       	brlt	.+34     	; 0x571a <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x5c>
    56f8:	20 e0       	ldi	r18, 0x00	; 0
    56fa:	30 e0       	ldi	r19, 0x00	; 0
    56fc:	44 e3       	ldi	r20, 0x34	; 52
    56fe:	53 ec       	ldi	r21, 0xC3	; 195
    5700:	6e 2d       	mov	r22, r14
    5702:	7f 2d       	mov	r23, r15
    5704:	80 2f       	mov	r24, r16
    5706:	91 2f       	mov	r25, r17
    5708:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    570c:	87 ff       	sbrs	r24, 7
    570e:	0a c0       	rjmp	.+20     	; 0x5724 <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x66>
    5710:	20 e0       	ldi	r18, 0x00	; 0
    5712:	30 e0       	ldi	r19, 0x00	; 0
    5714:	44 eb       	ldi	r20, 0xB4	; 180
    5716:	53 e4       	ldi	r21, 0x43	; 67
    5718:	08 c0       	rjmp	.+16     	; 0x572a <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x6c>
    571a:	20 e0       	ldi	r18, 0x00	; 0
    571c:	30 e0       	ldi	r19, 0x00	; 0
    571e:	44 eb       	ldi	r20, 0xB4	; 180
    5720:	53 ec       	ldi	r21, 0xC3	; 195
    5722:	03 c0       	rjmp	.+6      	; 0x572a <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x6c>
    5724:	20 e0       	ldi	r18, 0x00	; 0
    5726:	30 e0       	ldi	r19, 0x00	; 0
    5728:	a9 01       	movw	r20, r18
    572a:	6e 2d       	mov	r22, r14
    572c:	7f 2d       	mov	r23, r15
    572e:	80 2f       	mov	r24, r16
    5730:	91 2f       	mov	r25, r17
    5732:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    5736:	9b 01       	movw	r18, r22
    5738:	46 2f       	mov	r20, r22
    573a:	53 2f       	mov	r21, r19
    573c:	68 2f       	mov	r22, r24
    573e:	79 2f       	mov	r23, r25
    5740:	4e a7       	std	Y+46, r20	; 0x2e
    5742:	5f a7       	std	Y+47, r21	; 0x2f
    5744:	68 ab       	std	Y+48, r22	; 0x30
    5746:	79 ab       	std	Y+49, r23	; 0x31
    5748:	62 2f       	mov	r22, r18
    574a:	73 2f       	mov	r23, r19
    574c:	df 91       	pop	r29
    574e:	cf 91       	pop	r28
    5750:	1f 91       	pop	r17
    5752:	0f 91       	pop	r16
    5754:	ff 90       	pop	r15
    5756:	ef 90       	pop	r14
    5758:	08 95       	ret

0000575a <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial>:
    575a:	ef 92       	push	r14
    575c:	ff 92       	push	r15
    575e:	0f 93       	push	r16
    5760:	1f 93       	push	r17
    5762:	cf 93       	push	r28
    5764:	df 93       	push	r29
    5766:	8c 01       	movw	r16, r24
    5768:	d6 2f       	mov	r29, r22
    576a:	c7 2f       	mov	r28, r23
    576c:	64 e5       	ldi	r22, 0x54	; 84
    576e:	72 e0       	ldi	r23, 0x02	; 2
    5770:	8d 2f       	mov	r24, r29
    5772:	9c 2f       	mov	r25, r28
    5774:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
    5778:	6f e5       	ldi	r22, 0x5F	; 95
    577a:	72 e0       	ldi	r23, 0x02	; 2
    577c:	8d 2f       	mov	r24, r29
    577e:	9c 2f       	mov	r25, r28
    5780:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
    5784:	f8 01       	movw	r30, r16
    5786:	65 a5       	ldd	r22, Z+45	; 0x2d
    5788:	4a e0       	ldi	r20, 0x0A	; 10
    578a:	50 e0       	ldi	r21, 0x00	; 0
    578c:	70 e0       	ldi	r23, 0x00	; 0
    578e:	8d 2f       	mov	r24, r29
    5790:	9c 2f       	mov	r25, r28
    5792:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN5Print5printEii>
    5796:	6d e6       	ldi	r22, 0x6D	; 109
    5798:	72 e0       	ldi	r23, 0x02	; 2
    579a:	8d 2f       	mov	r24, r29
    579c:	9c 2f       	mov	r25, r28
    579e:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
    57a2:	f8 01       	movw	r30, r16
    57a4:	62 a9       	ldd	r22, Z+50	; 0x32
    57a6:	8d 2f       	mov	r24, r29
    57a8:	9c 2f       	mov	r25, r28
    57aa:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_ZN5Print5printEc>
    57ae:	f8 01       	movw	r30, r16
    57b0:	85 a5       	ldd	r24, Z+45	; 0x2d
    57b2:	88 23       	and	r24, r24
    57b4:	d9 f1       	breq	.+118    	; 0x582c <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial+0xd2>
    57b6:	63 e7       	ldi	r22, 0x73	; 115
    57b8:	72 e0       	ldi	r23, 0x02	; 2
    57ba:	8d 2f       	mov	r24, r29
    57bc:	9c 2f       	mov	r25, r28
    57be:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
    57c2:	f8 01       	movw	r30, r16
    57c4:	43 a9       	ldd	r20, Z+51	; 0x33
    57c6:	54 a9       	ldd	r21, Z+52	; 0x34
    57c8:	65 a9       	ldd	r22, Z+53	; 0x35
    57ca:	76 a9       	ldd	r23, Z+54	; 0x36
    57cc:	22 e0       	ldi	r18, 0x02	; 2
    57ce:	30 e0       	ldi	r19, 0x00	; 0
    57d0:	8d 2f       	mov	r24, r29
    57d2:	9c 2f       	mov	r25, r28
    57d4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN5Print5printEdi>
    57d8:	69 e7       	ldi	r22, 0x79	; 121
    57da:	72 e0       	ldi	r23, 0x02	; 2
    57dc:	8d 2f       	mov	r24, r29
    57de:	9c 2f       	mov	r25, r28
    57e0:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
    57e4:	c8 01       	movw	r24, r16
    57e6:	0e 94 4b 2b 	call	0x5696	; 0x5696 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>
    57ea:	ab 01       	movw	r20, r22
    57ec:	bc 01       	movw	r22, r24
    57ee:	22 e0       	ldi	r18, 0x02	; 2
    57f0:	30 e0       	ldi	r19, 0x00	; 0
    57f2:	8d 2f       	mov	r24, r29
    57f4:	9c 2f       	mov	r25, r28
    57f6:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN5Print5printEdi>
    57fa:	6f e7       	ldi	r22, 0x7F	; 127
    57fc:	72 e0       	ldi	r23, 0x02	; 2
    57fe:	8d 2f       	mov	r24, r29
    5800:	9c 2f       	mov	r25, r28
    5802:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
    5806:	20 e0       	ldi	r18, 0x00	; 0
    5808:	30 e0       	ldi	r19, 0x00	; 0
    580a:	44 e0       	ldi	r20, 0x04	; 4
    580c:	52 e4       	ldi	r21, 0x42	; 66
    580e:	f8 01       	movw	r30, r16
    5810:	67 a9       	ldd	r22, Z+55	; 0x37
    5812:	70 ad       	ldd	r23, Z+56	; 0x38
    5814:	81 ad       	ldd	r24, Z+57	; 0x39
    5816:	92 ad       	ldd	r25, Z+58	; 0x3a
    5818:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    581c:	ab 01       	movw	r20, r22
    581e:	bc 01       	movw	r22, r24
    5820:	22 e0       	ldi	r18, 0x02	; 2
    5822:	30 e0       	ldi	r19, 0x00	; 0
    5824:	8d 2f       	mov	r24, r29
    5826:	9c 2f       	mov	r25, r28
    5828:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN5Print5printEdi>
    582c:	65 e8       	ldi	r22, 0x85	; 133
    582e:	72 e0       	ldi	r23, 0x02	; 2
    5830:	8d 2f       	mov	r24, r29
    5832:	9c 2f       	mov	r25, r28
    5834:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
    5838:	78 01       	movw	r14, r16
    583a:	f0 e8       	ldi	r31, 0x80	; 128
    583c:	ef 0e       	add	r14, r31
    583e:	f1 1c       	adc	r15, r1
    5840:	f7 01       	movw	r30, r14
    5842:	60 81       	ld	r22, Z
    5844:	4a e0       	ldi	r20, 0x0A	; 10
    5846:	50 e0       	ldi	r21, 0x00	; 0
    5848:	70 e0       	ldi	r23, 0x00	; 0
    584a:	8d 2f       	mov	r24, r29
    584c:	9c 2f       	mov	r25, r28
    584e:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN5Print5printEii>
    5852:	6b e8       	ldi	r22, 0x8B	; 139
    5854:	72 e0       	ldi	r23, 0x02	; 2
    5856:	8d 2f       	mov	r24, r29
    5858:	9c 2f       	mov	r25, r28
    585a:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
    585e:	f8 01       	movw	r30, r16
    5860:	e4 58       	subi	r30, 0x84	; 132
    5862:	ff 4f       	sbci	r31, 0xFF	; 255
    5864:	40 81       	ld	r20, Z
    5866:	51 81       	ldd	r21, Z+1	; 0x01
    5868:	62 81       	ldd	r22, Z+2	; 0x02
    586a:	73 81       	ldd	r23, Z+3	; 0x03
    586c:	22 e0       	ldi	r18, 0x02	; 2
    586e:	30 e0       	ldi	r19, 0x00	; 0
    5870:	8d 2f       	mov	r24, r29
    5872:	9c 2f       	mov	r25, r28
    5874:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN5Print5printEdi>
    5878:	f7 01       	movw	r30, r14
    587a:	80 81       	ld	r24, Z
    587c:	88 23       	and	r24, r24
    587e:	b9 f1       	breq	.+110    	; 0x58ee <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial+0x194>
    5880:	61 e9       	ldi	r22, 0x91	; 145
    5882:	72 e0       	ldi	r23, 0x02	; 2
    5884:	8d 2f       	mov	r24, r29
    5886:	9c 2f       	mov	r25, r28
    5888:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
    588c:	f8 01       	movw	r30, r16
    588e:	ec 58       	subi	r30, 0x8C	; 140
    5890:	ff 4f       	sbci	r31, 0xFF	; 255
    5892:	40 81       	ld	r20, Z
    5894:	51 81       	ldd	r21, Z+1	; 0x01
    5896:	62 81       	ldd	r22, Z+2	; 0x02
    5898:	73 81       	ldd	r23, Z+3	; 0x03
    589a:	22 e0       	ldi	r18, 0x02	; 2
    589c:	30 e0       	ldi	r19, 0x00	; 0
    589e:	8d 2f       	mov	r24, r29
    58a0:	9c 2f       	mov	r25, r28
    58a2:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN5Print5printEdi>
    58a6:	67 e9       	ldi	r22, 0x97	; 151
    58a8:	72 e0       	ldi	r23, 0x02	; 2
    58aa:	8d 2f       	mov	r24, r29
    58ac:	9c 2f       	mov	r25, r28
    58ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
    58b2:	f8 01       	movw	r30, r16
    58b4:	e8 58       	subi	r30, 0x88	; 136
    58b6:	ff 4f       	sbci	r31, 0xFF	; 255
    58b8:	40 81       	ld	r20, Z
    58ba:	51 81       	ldd	r21, Z+1	; 0x01
    58bc:	62 81       	ldd	r22, Z+2	; 0x02
    58be:	73 81       	ldd	r23, Z+3	; 0x03
    58c0:	22 e0       	ldi	r18, 0x02	; 2
    58c2:	30 e0       	ldi	r19, 0x00	; 0
    58c4:	8d 2f       	mov	r24, r29
    58c6:	9c 2f       	mov	r25, r28
    58c8:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN5Print5printEdi>
    58cc:	6d e9       	ldi	r22, 0x9D	; 157
    58ce:	72 e0       	ldi	r23, 0x02	; 2
    58d0:	8d 2f       	mov	r24, r29
    58d2:	9c 2f       	mov	r25, r28
    58d4:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
    58d8:	f8 01       	movw	r30, r16
    58da:	44 89       	ldd	r20, Z+20	; 0x14
    58dc:	55 89       	ldd	r21, Z+21	; 0x15
    58de:	66 89       	ldd	r22, Z+22	; 0x16
    58e0:	77 89       	ldd	r23, Z+23	; 0x17
    58e2:	22 e0       	ldi	r18, 0x02	; 2
    58e4:	30 e0       	ldi	r19, 0x00	; 0
    58e6:	8d 2f       	mov	r24, r29
    58e8:	9c 2f       	mov	r25, r28
    58ea:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN5Print5printEdi>
    58ee:	63 ea       	ldi	r22, 0xA3	; 163
    58f0:	72 e0       	ldi	r23, 0x02	; 2
    58f2:	8d 2f       	mov	r24, r29
    58f4:	9c 2f       	mov	r25, r28
    58f6:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
    58fa:	f8 01       	movw	r30, r16
    58fc:	ed 56       	subi	r30, 0x6D	; 109
    58fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5900:	60 81       	ld	r22, Z
    5902:	4a e0       	ldi	r20, 0x0A	; 10
    5904:	50 e0       	ldi	r21, 0x00	; 0
    5906:	70 e0       	ldi	r23, 0x00	; 0
    5908:	8d 2f       	mov	r24, r29
    590a:	9c 2f       	mov	r25, r28
    590c:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN5Print5printEii>
    5910:	69 ea       	ldi	r22, 0xA9	; 169
    5912:	72 e0       	ldi	r23, 0x02	; 2
    5914:	8d 2f       	mov	r24, r29
    5916:	9c 2f       	mov	r25, r28
    5918:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
    591c:	f8 01       	movw	r30, r16
    591e:	ef 56       	subi	r30, 0x6F	; 111
    5920:	ff 4f       	sbci	r31, 0xFF	; 255
    5922:	60 81       	ld	r22, Z
    5924:	71 81       	ldd	r23, Z+1	; 0x01
    5926:	4a e0       	ldi	r20, 0x0A	; 10
    5928:	50 e0       	ldi	r21, 0x00	; 0
    592a:	8d 2f       	mov	r24, r29
    592c:	9c 2f       	mov	r25, r28
    592e:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN5Print5printEii>
    5932:	6d e5       	ldi	r22, 0x5D	; 93
    5934:	72 e0       	ldi	r23, 0x02	; 2
    5936:	8d 2f       	mov	r24, r29
    5938:	9c 2f       	mov	r25, r28
    593a:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
    593e:	80 e0       	ldi	r24, 0x00	; 0
    5940:	90 e0       	ldi	r25, 0x00	; 0
    5942:	df 91       	pop	r29
    5944:	cf 91       	pop	r28
    5946:	1f 91       	pop	r17
    5948:	0f 91       	pop	r16
    594a:	ff 90       	pop	r15
    594c:	ef 90       	pop	r14
    594e:	08 95       	ret

00005950 <_ZN14FreeBoardModel8sendDataE14HardwareSerialc>:
    5950:	bf 92       	push	r11
    5952:	cf 92       	push	r12
    5954:	df 92       	push	r13
    5956:	ef 92       	push	r14
    5958:	ff 92       	push	r15
    595a:	0f 93       	push	r16
    595c:	1f 93       	push	r17
    595e:	cf 93       	push	r28
    5960:	df 93       	push	r29
    5962:	cd b7       	in	r28, 0x3d	; 61
    5964:	de b7       	in	r29, 0x3e	; 62
    5966:	a2 97       	sbiw	r28, 0x22	; 34
    5968:	0f b6       	in	r0, 0x3f	; 63
    596a:	f8 94       	cli
    596c:	de bf       	out	0x3e, r29	; 62
    596e:	0f be       	out	0x3f, r0	; 63
    5970:	cd bf       	out	0x3d, r28	; 61
    5972:	7c 01       	movw	r14, r24
    5974:	43 34       	cpi	r20, 0x43	; 67
    5976:	a1 f5       	brne	.+104    	; 0x59e0 <_ZN14FreeBoardModel8sendDataE14HardwareSerialc+0x90>
    5978:	6c 01       	movw	r12, r24
    597a:	84 e7       	ldi	r24, 0x74	; 116
    597c:	c8 0e       	add	r12, r24
    597e:	d1 1c       	adc	r13, r1
    5980:	8e 01       	movw	r16, r28
    5982:	0f 5f       	subi	r16, 0xFF	; 255
    5984:	1f 4f       	sbci	r17, 0xFF	; 255
    5986:	c8 01       	movw	r24, r16
    5988:	0e 94 65 2a 	call	0x54ca	; 0x54ca <_ZN14HardwareSerialC1ERKS_>

#endif
    598c:	60 e4       	ldi	r22, 0x40	; 64
    598e:	70 e0       	ldi	r23, 0x00	; 0
    5990:	c8 01       	movw	r24, r16
    5992:	0e 94 17 29 	call	0x522e	; 0x522e <_ZN14HardwareSerial5writeEi>
    5996:	63 e4       	ldi	r22, 0x43	; 67
    5998:	70 e0       	ldi	r23, 0x00	; 0
    599a:	c8 01       	movw	r24, r16
    599c:	0e 94 17 29 	call	0x522e	; 0x522e <_ZN14HardwareSerial5writeEi>
    59a0:	ea e9       	ldi	r30, 0x9A	; 154
    59a2:	ee 0e       	add	r14, r30
    59a4:	f1 1c       	adc	r15, r1
extern void serialEventRun(void) __attribute__((weak));

#endif
    59a6:	30 e3       	ldi	r19, 0x30	; 48
    59a8:	b3 2e       	mov	r11, r19
    59aa:	f6 01       	movw	r30, r12
    59ac:	61 91       	ld	r22, Z+
    59ae:	6f 01       	movw	r12, r30
    59b0:	c8 01       	movw	r24, r16
    59b2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_ZN14HardwareSerial5writeEh>
    59b6:	f6 01       	movw	r30, r12
    59b8:	80 81       	ld	r24, Z
    59ba:	b8 26       	eor	r11, r24
    59bc:	ce 14       	cp	r12, r14
    59be:	df 04       	cpc	r13, r15
    59c0:	a1 f7       	brne	.-24     	; 0x59aa <_ZN14FreeBoardModel8sendDataE14HardwareSerialc+0x5a>
    59c2:	6b 2d       	mov	r22, r11
    59c4:	77 27       	eor	r23, r23
    59c6:	67 fd       	sbrc	r22, 7
    59c8:	70 95       	com	r23
    59ca:	c8 01       	movw	r24, r16
    59cc:	0e 94 17 29 	call	0x522e	; 0x522e <_ZN14HardwareSerial5writeEi>
    59d0:	6a e0       	ldi	r22, 0x0A	; 10
    59d2:	70 e0       	ldi	r23, 0x00	; 0
    59d4:	c8 01       	movw	r24, r16
    59d6:	0e 94 17 29 	call	0x522e	; 0x522e <_ZN14HardwareSerial5writeEi>
    59da:	26 e2       	ldi	r18, 0x26	; 38
    59dc:	30 e0       	ldi	r19, 0x00	; 0
    59de:	46 c0       	rjmp	.+140    	; 0x5a6c <_ZN14FreeBoardModel8sendDataE14HardwareSerialc+0x11c>
    59e0:	44 34       	cpi	r20, 0x44	; 68
    59e2:	a1 f5       	brne	.+104    	; 0x5a4c <_ZN14FreeBoardModel8sendDataE14HardwareSerialc+0xfc>
    59e4:	6c 01       	movw	r12, r24
    59e6:	f8 e4       	ldi	r31, 0x48	; 72
    59e8:	cf 0e       	add	r12, r31
    59ea:	d1 1c       	adc	r13, r1
    59ec:	8e 01       	movw	r16, r28
    59ee:	0f 5f       	subi	r16, 0xFF	; 255
    59f0:	1f 4f       	sbci	r17, 0xFF	; 255
    59f2:	c8 01       	movw	r24, r16
    59f4:	0e 94 65 2a 	call	0x54ca	; 0x54ca <_ZN14HardwareSerialC1ERKS_>

#endif
    59f8:	60 e4       	ldi	r22, 0x40	; 64
    59fa:	70 e0       	ldi	r23, 0x00	; 0
    59fc:	c8 01       	movw	r24, r16
    59fe:	0e 94 17 29 	call	0x522e	; 0x522e <_ZN14HardwareSerial5writeEi>
    5a02:	64 e4       	ldi	r22, 0x44	; 68
    5a04:	70 e0       	ldi	r23, 0x00	; 0
    5a06:	c8 01       	movw	r24, r16
    5a08:	0e 94 17 29 	call	0x522e	; 0x522e <_ZN14HardwareSerial5writeEi>
    5a0c:	83 e6       	ldi	r24, 0x63	; 99
    5a0e:	e8 0e       	add	r14, r24
    5a10:	f1 1c       	adc	r15, r1
extern void serialEventRun(void) __attribute__((weak));

#endif
    5a12:	20 e3       	ldi	r18, 0x30	; 48
    5a14:	b2 2e       	mov	r11, r18
    5a16:	f6 01       	movw	r30, r12
    5a18:	61 91       	ld	r22, Z+
    5a1a:	6f 01       	movw	r12, r30
    5a1c:	c8 01       	movw	r24, r16
    5a1e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_ZN14HardwareSerial5writeEh>
    5a22:	f6 01       	movw	r30, r12
    5a24:	80 81       	ld	r24, Z
    5a26:	b8 26       	eor	r11, r24
    5a28:	ce 14       	cp	r12, r14
    5a2a:	df 04       	cpc	r13, r15
    5a2c:	a1 f7       	brne	.-24     	; 0x5a16 <_ZN14FreeBoardModel8sendDataE14HardwareSerialc+0xc6>
    5a2e:	6b 2d       	mov	r22, r11
    5a30:	77 27       	eor	r23, r23
    5a32:	67 fd       	sbrc	r22, 7
    5a34:	70 95       	com	r23
    5a36:	c8 01       	movw	r24, r16
    5a38:	0e 94 17 29 	call	0x522e	; 0x522e <_ZN14HardwareSerial5writeEi>
    5a3c:	6a e0       	ldi	r22, 0x0A	; 10
    5a3e:	70 e0       	ldi	r23, 0x00	; 0
    5a40:	c8 01       	movw	r24, r16
    5a42:	0e 94 17 29 	call	0x522e	; 0x522e <_ZN14HardwareSerial5writeEi>
    5a46:	2b e1       	ldi	r18, 0x1B	; 27
    5a48:	30 e0       	ldi	r19, 0x00	; 0
    5a4a:	10 c0       	rjmp	.+32     	; 0x5a6c <_ZN14FreeBoardModel8sendDataE14HardwareSerialc+0x11c>
    5a4c:	43 35       	cpi	r20, 0x53	; 83
    5a4e:	61 f4       	brne	.+24     	; 0x5a68 <_ZN14FreeBoardModel8sendDataE14HardwareSerialc+0x118>
    5a50:	ce 01       	movw	r24, r28
    5a52:	01 96       	adiw	r24, 0x01	; 1
    5a54:	0e 94 65 2a 	call	0x54ca	; 0x54ca <_ZN14HardwareSerialC1ERKS_>
    5a58:	be 01       	movw	r22, r28
    5a5a:	6f 5f       	subi	r22, 0xFF	; 255
    5a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    5a5e:	c7 01       	movw	r24, r14
    5a60:	0e 94 ad 2b 	call	0x575a	; 0x575a <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial>
    5a64:	9c 01       	movw	r18, r24
    5a66:	02 c0       	rjmp	.+4      	; 0x5a6c <_ZN14FreeBoardModel8sendDataE14HardwareSerialc+0x11c>
    5a68:	2f ef       	ldi	r18, 0xFF	; 255
    5a6a:	3f ef       	ldi	r19, 0xFF	; 255
    5a6c:	c9 01       	movw	r24, r18
    5a6e:	a2 96       	adiw	r28, 0x22	; 34
    5a70:	0f b6       	in	r0, 0x3f	; 63
    5a72:	f8 94       	cli
    5a74:	de bf       	out	0x3e, r29	; 62
    5a76:	0f be       	out	0x3f, r0	; 63
    5a78:	cd bf       	out	0x3d, r28	; 61
    5a7a:	df 91       	pop	r29
    5a7c:	cf 91       	pop	r28
    5a7e:	1f 91       	pop	r17
    5a80:	0f 91       	pop	r16
    5a82:	ff 90       	pop	r15
    5a84:	ef 90       	pop	r14
    5a86:	df 90       	pop	r13
    5a88:	cf 90       	pop	r12
    5a8a:	bf 90       	pop	r11
    5a8c:	08 95       	ret

00005a8e <_ZN14FreeBoardModel20getAutopilotDeadZoneEv>:
    5a8e:	fc 01       	movw	r30, r24
    5a90:	ee 57       	subi	r30, 0x7E	; 126
    5a92:	ff 4f       	sbci	r31, 0xFF	; 255
    5a94:	80 81       	ld	r24, Z
    5a96:	91 81       	ldd	r25, Z+1	; 0x01
    5a98:	08 95       	ret

00005a9a <_ZN14FreeBoardModel17getAutopilotSlackEv>:
    5a9a:	fc 01       	movw	r30, r24
    5a9c:	ec 57       	subi	r30, 0x7C	; 124
    5a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa0:	80 81       	ld	r24, Z
    5aa2:	91 81       	ldd	r25, Z+1	; 0x01
    5aa4:	08 95       	ret

00005aa6 <_ZN14FreeBoardModel13getGpsLastFixEv>:
    5aa6:	fc 01       	movw	r30, r24
    5aa8:	e7 5b       	subi	r30, 0xB7	; 183
    5aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    5aac:	60 81       	ld	r22, Z
    5aae:	71 81       	ldd	r23, Z+1	; 0x01
    5ab0:	82 81       	ldd	r24, Z+2	; 0x02
    5ab2:	93 81       	ldd	r25, Z+3	; 0x03
    5ab4:	08 95       	ret

00005ab6 <_ZN14FreeBoardModel14getGpsLatitudeEv>:
    5ab6:	fc 01       	movw	r30, r24
    5ab8:	ee 5a       	subi	r30, 0xAE	; 174
    5aba:	ff 4f       	sbci	r31, 0xFF	; 255
    5abc:	50 81       	ld	r21, Z
    5abe:	41 81       	ldd	r20, Z+1	; 0x01
    5ac0:	32 81       	ldd	r19, Z+2	; 0x02
    5ac2:	23 81       	ldd	r18, Z+3	; 0x03
    5ac4:	65 2f       	mov	r22, r21
    5ac6:	74 2f       	mov	r23, r20
    5ac8:	83 2f       	mov	r24, r19
    5aca:	92 2f       	mov	r25, r18
    5acc:	08 95       	ret

00005ace <_ZN14FreeBoardModel15getGpsLongitudeEv>:
    5ace:	fc 01       	movw	r30, r24
    5ad0:	ea 5a       	subi	r30, 0xAA	; 170
    5ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ad4:	50 81       	ld	r21, Z
    5ad6:	41 81       	ldd	r20, Z+1	; 0x01
    5ad8:	32 81       	ldd	r19, Z+2	; 0x02
    5ada:	23 81       	ldd	r18, Z+3	; 0x03
    5adc:	65 2f       	mov	r22, r21
    5ade:	74 2f       	mov	r23, r20
    5ae0:	83 2f       	mov	r24, r19
    5ae2:	92 2f       	mov	r25, r18
    5ae4:	08 95       	ret

00005ae6 <_ZN14FreeBoardModel15getGpsSpeedUnitEv>:
    5ae6:	fc 01       	movw	r30, r24
    5ae8:	ea 57       	subi	r30, 0x7A	; 122
    5aea:	ff 4f       	sbci	r31, 0xFF	; 255
    5aec:	50 81       	ld	r21, Z
    5aee:	41 81       	ldd	r20, Z+1	; 0x01
    5af0:	32 81       	ldd	r19, Z+2	; 0x02
    5af2:	23 81       	ldd	r18, Z+3	; 0x03
    5af4:	65 2f       	mov	r22, r21
    5af6:	74 2f       	mov	r23, r20
    5af8:	83 2f       	mov	r24, r19
    5afa:	92 2f       	mov	r25, r18
    5afc:	08 95       	ret

00005afe <_ZN14FreeBoardModel12getGpsStatusEv>:
    5afe:	8f 5a       	subi	r24, 0xAF	; 175
    5b00:	9f 4f       	sbci	r25, 0xFF	; 255
    5b02:	fc 01       	movw	r30, r24
    5b04:	80 81       	ld	r24, Z
    5b06:	08 95       	ret

00005b08 <_ZN14FreeBoardModel17getWindZeroOffsetEv>:
    5b08:	fc 01       	movw	r30, r24
    5b0a:	e8 56       	subi	r30, 0x68	; 104
    5b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b0e:	80 81       	ld	r24, Z
    5b10:	91 81       	ldd	r25, Z+1	; 0x01
    5b12:	08 95       	ret

00005b14 <_ZN14FreeBoardModel17getWindAlarmSpeedEv>:
    5b14:	fc 01       	movw	r30, r24
    5b16:	ef 56       	subi	r30, 0x6F	; 111
    5b18:	ff 4f       	sbci	r31, 0xFF	; 255
    5b1a:	80 81       	ld	r24, Z
    5b1c:	91 81       	ldd	r25, Z+1	; 0x01
    5b1e:	08 95       	ret

00005b20 <_ZN14FreeBoardModel18getWindApparentDirEv>:
    5b20:	fc 01       	movw	r30, r24
    5b22:	e1 59       	subi	r30, 0x91	; 145
    5b24:	ff 4f       	sbci	r31, 0xFF	; 255
    5b26:	80 81       	ld	r24, Z
    5b28:	91 81       	ldd	r25, Z+1	; 0x01
    5b2a:	08 95       	ret

00005b2c <_ZN14FreeBoardModel14getWindAverageEv>:
    5b2c:	fc 01       	movw	r30, r24
    5b2e:	e7 59       	subi	r30, 0x97	; 151
    5b30:	ff 4f       	sbci	r31, 0xFF	; 255
    5b32:	50 81       	ld	r21, Z
    5b34:	41 81       	ldd	r20, Z+1	; 0x01
    5b36:	32 81       	ldd	r19, Z+2	; 0x02
    5b38:	23 81       	ldd	r18, Z+3	; 0x03
    5b3a:	65 2f       	mov	r22, r21
    5b3c:	74 2f       	mov	r23, r20
    5b3e:	83 2f       	mov	r24, r19
    5b40:	92 2f       	mov	r25, r18
    5b42:	08 95       	ret

00005b44 <_ZN14FreeBoardModel13getWindFactorEv>:
    5b44:	fc 01       	movw	r30, r24
    5b46:	ec 56       	subi	r30, 0x6C	; 108
    5b48:	ff 4f       	sbci	r31, 0xFF	; 255
    5b4a:	50 81       	ld	r21, Z
    5b4c:	41 81       	ldd	r20, Z+1	; 0x01
    5b4e:	32 81       	ldd	r19, Z+2	; 0x02
    5b50:	23 81       	ldd	r18, Z+3	; 0x03
    5b52:	65 2f       	mov	r22, r21
    5b54:	74 2f       	mov	r23, r20
    5b56:	83 2f       	mov	r24, r19
    5b58:	92 2f       	mov	r25, r18
    5b5a:	08 95       	ret

00005b5c <_ZN14FreeBoardModel10getWindMaxEv>:
    5b5c:	fc 01       	movw	r30, r24
    5b5e:	e3 59       	subi	r30, 0x93	; 147
    5b60:	ff 4f       	sbci	r31, 0xFF	; 255
    5b62:	80 81       	ld	r24, Z
    5b64:	91 81       	ldd	r25, Z+1	; 0x01
    5b66:	08 95       	ret

00005b68 <_ZN14FreeBoardModel15isAnchorAlarmOnEv>:
    5b68:	80 58       	subi	r24, 0x80	; 128
    5b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b6c:	fc 01       	movw	r30, r24
    5b6e:	80 81       	ld	r24, Z
    5b70:	08 95       	ret

00005b72 <_ZN14FreeBoardModel11isGpsDecodeEv>:
    5b72:	88 5b       	subi	r24, 0xB8	; 184
    5b74:	9f 4f       	sbci	r25, 0xFF	; 255
    5b76:	fc 01       	movw	r30, r24
    5b78:	80 81       	ld	r24, Z
    5b7a:	08 95       	ret

00005b7c <_ZN14FreeBoardModel13isWindAlarmOnEv>:
    5b7c:	8d 56       	subi	r24, 0x6D	; 109
    5b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b80:	fc 01       	movw	r30, r24
    5b82:	80 81       	ld	r24, Z
    5b84:	08 95       	ret

00005b86 <_ZN14FreeBoardModel12setAlarmLastEm>:
    5b86:	fc 01       	movw	r30, r24
    5b88:	40 83       	st	Z, r20
    5b8a:	51 83       	std	Z+1, r21	; 0x01
    5b8c:	62 83       	std	Z+2, r22	; 0x02
    5b8e:	73 83       	std	Z+3, r23	; 0x03
    5b90:	08 95       	ret

00005b92 <_ZN14FreeBoardModel14setAlarmSnoozeEm>:
    5b92:	fc 01       	movw	r30, r24
    5b94:	44 83       	std	Z+4, r20	; 0x04
    5b96:	55 83       	std	Z+5, r21	; 0x05
    5b98:	66 83       	std	Z+6, r22	; 0x06
    5b9a:	77 83       	std	Z+7, r23	; 0x07
    5b9c:	08 95       	ret

00005b9e <_ZN14FreeBoardModel16setAnchorAlarmOnEb>:
    5b9e:	80 58       	subi	r24, 0x80	; 128
    5ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ba2:	fc 01       	movw	r30, r24
    5ba4:	60 83       	st	Z, r22
    5ba6:	08 95       	ret

00005ba8 <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>:
    5ba8:	fc 01       	movw	r30, r24
    5baa:	64 8f       	std	Z+28, r22	; 0x1c
    5bac:	08 95       	ret

00005bae <_ZN14FreeBoardModel17setAnchorDistanceEf>:
    5bae:	fc 01       	movw	r30, r24
    5bb0:	44 8b       	std	Z+20, r20	; 0x14
    5bb2:	55 8b       	std	Z+21, r21	; 0x15
    5bb4:	66 8b       	std	Z+22, r22	; 0x16
    5bb6:	77 8b       	std	Z+23, r23	; 0x17
    5bb8:	08 95       	ret

00005bba <_ZN14FreeBoardModel10setAnchorEEf>:
    5bba:	fc 01       	movw	r30, r24
    5bbc:	45 a3       	std	Z+37, r20	; 0x25
    5bbe:	56 a3       	std	Z+38, r21	; 0x26
    5bc0:	67 a3       	std	Z+39, r22	; 0x27
    5bc2:	70 a7       	std	Z+40, r23	; 0x28
    5bc4:	08 95       	ret

00005bc6 <_ZN14FreeBoardModel12setAnchorLatEf>:
    5bc6:	8c 58       	subi	r24, 0x8C	; 140
    5bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    5bca:	fc 01       	movw	r30, r24
    5bcc:	40 83       	st	Z, r20
    5bce:	51 83       	std	Z+1, r21	; 0x01
    5bd0:	62 83       	std	Z+2, r22	; 0x02
    5bd2:	73 83       	std	Z+3, r23	; 0x03
    5bd4:	08 95       	ret

00005bd6 <_ZN14FreeBoardModel12setAnchorLonEf>:
    5bd6:	88 58       	subi	r24, 0x88	; 136
    5bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    5bda:	fc 01       	movw	r30, r24
    5bdc:	40 83       	st	Z, r20
    5bde:	51 83       	std	Z+1, r21	; 0x01
    5be0:	62 83       	std	Z+2, r22	; 0x02
    5be2:	73 83       	std	Z+3, r23	; 0x03
    5be4:	08 95       	ret

00005be6 <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>:
    5be6:	fc 01       	movw	r30, r24
    5be8:	40 8f       	std	Z+24, r20	; 0x18
    5bea:	51 8f       	std	Z+25, r21	; 0x19
    5bec:	62 8f       	std	Z+26, r22	; 0x1a
    5bee:	73 8f       	std	Z+27, r23	; 0x1b
    5bf0:	08 95       	ret

00005bf2 <_ZN14FreeBoardModel10setAnchorNEf>:
    5bf2:	fc 01       	movw	r30, r24
    5bf4:	45 8f       	std	Z+29, r20	; 0x1d
    5bf6:	56 8f       	std	Z+30, r21	; 0x1e
    5bf8:	67 8f       	std	Z+31, r22	; 0x1f
    5bfa:	70 a3       	std	Z+32, r23	; 0x20
    5bfc:	08 95       	ret

00005bfe <_ZN14FreeBoardModel15setAnchorRadiusEf>:
    5bfe:	84 58       	subi	r24, 0x84	; 132
    5c00:	9f 4f       	sbci	r25, 0xFF	; 255
    5c02:	fc 01       	movw	r30, r24
    5c04:	40 83       	st	Z, r20
    5c06:	51 83       	std	Z+1, r21	; 0x01
    5c08:	62 83       	std	Z+2, r22	; 0x02
    5c0a:	73 83       	std	Z+3, r23	; 0x03
    5c0c:	08 95       	ret

00005c0e <_ZN14FreeBoardModel18setAnchorRadiusDegEf>:
    5c0e:	fc 01       	movw	r30, r24
    5c10:	40 8b       	std	Z+16, r20	; 0x10
    5c12:	51 8b       	std	Z+17, r21	; 0x11
    5c14:	62 8b       	std	Z+18, r22	; 0x12
    5c16:	73 8b       	std	Z+19, r23	; 0x13
    5c18:	08 95       	ret

00005c1a <_ZN14FreeBoardModel10setAnchorSEf>:
    5c1a:	fc 01       	movw	r30, r24
    5c1c:	41 a3       	std	Z+33, r20	; 0x21
    5c1e:	52 a3       	std	Z+34, r21	; 0x22
    5c20:	63 a3       	std	Z+35, r22	; 0x23
    5c22:	74 a3       	std	Z+36, r23	; 0x24
    5c24:	08 95       	ret

00005c26 <_ZN14FreeBoardModel10setAnchorWEf>:
    5c26:	fc 01       	movw	r30, r24
    5c28:	41 a7       	std	Z+41, r20	; 0x29
    5c2a:	52 a7       	std	Z+42, r21	; 0x2a
    5c2c:	63 a7       	std	Z+43, r22	; 0x2b
    5c2e:	74 a7       	std	Z+44, r23	; 0x2c
    5c30:	08 95       	ret

00005c32 <_ZN14FreeBoardModel21setAutopilotReferenceEc>:
    5c32:	cf 93       	push	r28
    5c34:	df 93       	push	r29
    5c36:	ec 01       	movw	r28, r24
    5c38:	67 35       	cpi	r22, 0x57	; 87
    5c3a:	11 f0       	breq	.+4      	; 0x5c40 <_ZN14FreeBoardModel21setAutopilotReferenceEc+0xe>
    5c3c:	63 34       	cpi	r22, 0x43	; 67
    5c3e:	29 f5       	brne	.+74     	; 0x5c8a <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x58>
    5c40:	6a ab       	std	Y+50, r22	; 0x32
    5c42:	67 35       	cpi	r22, 0x57	; 87
    5c44:	81 f4       	brne	.+32     	; 0x5c66 <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x34>
    5c46:	fe 01       	movw	r30, r28
    5c48:	e1 59       	subi	r30, 0x91	; 145
    5c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c4c:	60 81       	ld	r22, Z
    5c4e:	71 81       	ldd	r23, Z+1	; 0x01
    5c50:	88 27       	eor	r24, r24
    5c52:	77 fd       	sbrc	r23, 7
    5c54:	80 95       	com	r24
    5c56:	98 2f       	mov	r25, r24
    5c58:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__floatsisf>
    5c5c:	6b ab       	std	Y+51, r22	; 0x33
    5c5e:	7c ab       	std	Y+52, r23	; 0x34
    5c60:	8d ab       	std	Y+53, r24	; 0x35
    5c62:	9e ab       	std	Y+54, r25	; 0x36
    5c64:	0a c0       	rjmp	.+20     	; 0x5c7a <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x48>
    5c66:	63 34       	cpi	r22, 0x43	; 67
    5c68:	41 f4       	brne	.+16     	; 0x5c7a <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x48>
    5c6a:	48 85       	ldd	r20, Y+8	; 0x08
    5c6c:	59 85       	ldd	r21, Y+9	; 0x09
    5c6e:	6a 85       	ldd	r22, Y+10	; 0x0a
    5c70:	7b 85       	ldd	r23, Y+11	; 0x0b
    5c72:	4b ab       	std	Y+51, r20	; 0x33
    5c74:	5c ab       	std	Y+52, r21	; 0x34
    5c76:	6d ab       	std	Y+53, r22	; 0x35
    5c78:	7e ab       	std	Y+54, r23	; 0x36
    5c7a:	40 e0       	ldi	r20, 0x00	; 0
    5c7c:	50 e0       	ldi	r21, 0x00	; 0
    5c7e:	64 e0       	ldi	r22, 0x04	; 4
    5c80:	72 e4       	ldi	r23, 0x42	; 66
    5c82:	4f ab       	std	Y+55, r20	; 0x37
    5c84:	58 af       	std	Y+56, r21	; 0x38
    5c86:	69 af       	std	Y+57, r22	; 0x39
    5c88:	7a af       	std	Y+58, r23	; 0x3a
    5c8a:	df 91       	pop	r29
    5c8c:	cf 91       	pop	r28
    5c8e:	08 95       	ret

00005c90 <_ZN14FreeBoardModel25setAutopilotRudderCommandEd>:
    5c90:	fc 01       	movw	r30, r24
    5c92:	47 ab       	std	Z+55, r20	; 0x37
    5c94:	50 af       	std	Z+56, r21	; 0x38
    5c96:	61 af       	std	Z+57, r22	; 0x39
    5c98:	72 af       	std	Z+58, r23	; 0x3a
    5c9a:	08 95       	ret

00005c9c <_ZN14FreeBoardModel25setAutopilotTargetHeadingEd>:
    5c9c:	cf 93       	push	r28
    5c9e:	df 93       	push	r29
    5ca0:	ec 01       	movw	r28, r24
    5ca2:	cb 01       	movw	r24, r22
    5ca4:	ba 01       	movw	r22, r20
    5ca6:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__fixsfsi>
    5caa:	cb 01       	movw	r24, r22
    5cac:	88 59       	subi	r24, 0x98	; 152
    5cae:	9e 4f       	sbci	r25, 0xFE	; 254
    5cb0:	68 e6       	ldi	r22, 0x68	; 104
    5cb2:	71 e0       	ldi	r23, 0x01	; 1
    5cb4:	0e 94 e8 3f 	call	0x7fd0	; 0x7fd0 <__divmodhi4>
    5cb8:	bc 01       	movw	r22, r24
    5cba:	88 27       	eor	r24, r24
    5cbc:	77 fd       	sbrc	r23, 7
    5cbe:	80 95       	com	r24
    5cc0:	98 2f       	mov	r25, r24
    5cc2:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__floatsisf>
    5cc6:	6b ab       	std	Y+51, r22	; 0x33
    5cc8:	7c ab       	std	Y+52, r23	; 0x34
    5cca:	8d ab       	std	Y+53, r24	; 0x35
    5ccc:	9e ab       	std	Y+54, r25	; 0x36
    5cce:	df 91       	pop	r29
    5cd0:	cf 91       	pop	r28
    5cd2:	08 95       	ret

00005cd4 <_ZN14FreeBoardModel12setGpsCourseEf>:
    5cd4:	82 5a       	subi	r24, 0xA2	; 162
    5cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    5cd8:	fc 01       	movw	r30, r24
    5cda:	40 83       	st	Z, r20
    5cdc:	51 83       	std	Z+1, r21	; 0x01
    5cde:	62 83       	std	Z+2, r22	; 0x02
    5ce0:	73 83       	std	Z+3, r23	; 0x03
    5ce2:	08 95       	ret

00005ce4 <_ZN14FreeBoardModel12setGpsDecodeEb>:
    5ce4:	88 5b       	subi	r24, 0xB8	; 184
    5ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce8:	fc 01       	movw	r30, r24
    5cea:	60 83       	st	Z, r22
    5cec:	08 95       	ret

00005cee <_ZN14FreeBoardModel13setGpsLastFixEm>:
    5cee:	87 5b       	subi	r24, 0xB7	; 183
    5cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    5cf2:	fc 01       	movw	r30, r24
    5cf4:	40 83       	st	Z, r20
    5cf6:	51 83       	std	Z+1, r21	; 0x01
    5cf8:	62 83       	std	Z+2, r22	; 0x02
    5cfa:	73 83       	std	Z+3, r23	; 0x03
    5cfc:	08 95       	ret

00005cfe <_ZN14FreeBoardModel14setGpsLatitudeEf>:
    5cfe:	8e 5a       	subi	r24, 0xAE	; 174
    5d00:	9f 4f       	sbci	r25, 0xFF	; 255
    5d02:	fc 01       	movw	r30, r24
    5d04:	40 83       	st	Z, r20
    5d06:	51 83       	std	Z+1, r21	; 0x01
    5d08:	62 83       	std	Z+2, r22	; 0x02
    5d0a:	73 83       	std	Z+3, r23	; 0x03
    5d0c:	08 95       	ret

00005d0e <_ZN14FreeBoardModel15setGpsLongitudeEf>:
    5d0e:	8a 5a       	subi	r24, 0xAA	; 170
    5d10:	9f 4f       	sbci	r25, 0xFF	; 255
    5d12:	fc 01       	movw	r30, r24
    5d14:	40 83       	st	Z, r20
    5d16:	51 83       	std	Z+1, r21	; 0x01
    5d18:	62 83       	std	Z+2, r22	; 0x02
    5d1a:	73 83       	std	Z+3, r23	; 0x03
    5d1c:	08 95       	ret

00005d1e <_ZN14FreeBoardModel11setGpsSpeedEf>:
    5d1e:	86 5a       	subi	r24, 0xA6	; 166
    5d20:	9f 4f       	sbci	r25, 0xFF	; 255
    5d22:	fc 01       	movw	r30, r24
    5d24:	40 83       	st	Z, r20
    5d26:	51 83       	std	Z+1, r21	; 0x01
    5d28:	62 83       	std	Z+2, r22	; 0x02
    5d2a:	73 83       	std	Z+3, r23	; 0x03
    5d2c:	08 95       	ret

00005d2e <_ZN14FreeBoardModel12setGpsStatusEc>:
    5d2e:	8f 5a       	subi	r24, 0xAF	; 175
    5d30:	9f 4f       	sbci	r25, 0xFF	; 255
    5d32:	fc 01       	movw	r30, r24
    5d34:	60 83       	st	Z, r22
    5d36:	08 95       	ret

00005d38 <_ZN14FreeBoardModel9setGpsUtcEf>:
    5d38:	83 5b       	subi	r24, 0xB3	; 179
    5d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d3c:	fc 01       	movw	r30, r24
    5d3e:	40 83       	st	Z, r20
    5d40:	51 83       	std	Z+1, r21	; 0x01
    5d42:	62 83       	std	Z+2, r22	; 0x02
    5d44:	73 83       	std	Z+3, r23	; 0x03
    5d46:	08 95       	ret

00005d48 <_ZN14FreeBoardModel18setMagneticHeadingEf>:
    5d48:	fc 01       	movw	r30, r24
    5d4a:	40 87       	std	Z+8, r20	; 0x08
    5d4c:	51 87       	std	Z+9, r21	; 0x09
    5d4e:	62 87       	std	Z+10, r22	; 0x0a
    5d50:	73 87       	std	Z+11, r23	; 0x0b
    5d52:	08 95       	ret

00005d54 <_ZN14FreeBoardModel14setDeclinationEf>:
    5d54:	fc 01       	movw	r30, r24
    5d56:	44 87       	std	Z+12, r20	; 0x0c
    5d58:	55 87       	std	Z+13, r21	; 0x0d
    5d5a:	66 87       	std	Z+14, r22	; 0x0e
    5d5c:	77 87       	std	Z+15, r23	; 0x0f
    5d5e:	08 95       	ret

00005d60 <_ZN14FreeBoardModel17setWindZeroOffsetEi>:
    5d60:	88 56       	subi	r24, 0x68	; 104
    5d62:	9f 4f       	sbci	r25, 0xFF	; 255
    5d64:	fc 01       	movw	r30, r24
    5d66:	71 83       	std	Z+1, r23	; 0x01
    5d68:	60 83       	st	Z, r22
    5d6a:	08 95       	ret

00005d6c <_ZN14FreeBoardModel14setWindAlarmOnEb>:
    5d6c:	8d 56       	subi	r24, 0x6D	; 109
    5d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d70:	fc 01       	movw	r30, r24
    5d72:	60 83       	st	Z, r22
    5d74:	08 95       	ret

00005d76 <_ZN14FreeBoardModel17setWindAlarmSpeedEi>:
    5d76:	8f 56       	subi	r24, 0x6F	; 111
    5d78:	9f 4f       	sbci	r25, 0xFF	; 255
    5d7a:	fc 01       	movw	r30, r24
    5d7c:	71 83       	std	Z+1, r23	; 0x01
    5d7e:	60 83       	st	Z, r22
    5d80:	08 95       	ret

00005d82 <_ZN14FreeBoardModel18setWindApparentDirEi>:
    5d82:	81 59       	subi	r24, 0x91	; 145
    5d84:	9f 4f       	sbci	r25, 0xFF	; 255
    5d86:	fc 01       	movw	r30, r24
    5d88:	71 83       	std	Z+1, r23	; 0x01
    5d8a:	60 83       	st	Z, r22
    5d8c:	08 95       	ret

00005d8e <_ZN14FreeBoardModel14setWindTrueDirEi>:
    5d8e:	8f 58       	subi	r24, 0x8F	; 143
    5d90:	9f 4f       	sbci	r25, 0xFF	; 255
    5d92:	fc 01       	movw	r30, r24
    5d94:	71 83       	std	Z+1, r23	; 0x01
    5d96:	60 83       	st	Z, r22
    5d98:	08 95       	ret

00005d9a <_ZN14FreeBoardModel14setWindAverageEf>:
    5d9a:	87 59       	subi	r24, 0x97	; 151
    5d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d9e:	fc 01       	movw	r30, r24
    5da0:	40 83       	st	Z, r20
    5da2:	51 83       	std	Z+1, r21	; 0x01
    5da4:	62 83       	std	Z+2, r22	; 0x02
    5da6:	73 83       	std	Z+3, r23	; 0x03
    5da8:	08 95       	ret

00005daa <_ZN14FreeBoardModel17setWindLastUpdateEm>:
    5daa:	8b 59       	subi	r24, 0x9B	; 155
    5dac:	9f 4f       	sbci	r25, 0xFF	; 255
    5dae:	fc 01       	movw	r30, r24
    5db0:	40 83       	st	Z, r20
    5db2:	51 83       	std	Z+1, r21	; 0x01
    5db4:	62 83       	std	Z+2, r22	; 0x02
    5db6:	73 83       	std	Z+3, r23	; 0x03
    5db8:	08 95       	ret

00005dba <_ZN14FreeBoardModel13isAutopilotOnEv>:
    5dba:	fc 01       	movw	r30, r24
    5dbc:	85 a5       	ldd	r24, Z+45	; 0x2d
    5dbe:	08 95       	ret

00005dc0 <_ZN14FreeBoardModel14setAutopilotOnEb>:
    5dc0:	1f 93       	push	r17
    5dc2:	cf 93       	push	r28
    5dc4:	df 93       	push	r29
    5dc6:	ec 01       	movw	r28, r24
    5dc8:	16 2f       	mov	r17, r22
    5dca:	6a a9       	ldd	r22, Y+50	; 0x32
    5dcc:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <_ZN14FreeBoardModel21setAutopilotReferenceEc>
    5dd0:	1d a7       	std	Y+45, r17	; 0x2d
    5dd2:	df 91       	pop	r29
    5dd4:	cf 91       	pop	r28
    5dd6:	1f 91       	pop	r17
    5dd8:	08 95       	ret

00005dda <_ZN14FreeBoardModel10setWindMaxEi>:
    5dda:	83 59       	subi	r24, 0x93	; 147
    5ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    5dde:	fc 01       	movw	r30, r24
    5de0:	71 83       	std	Z+1, r23	; 0x01
    5de2:	60 83       	st	Z, r22
    5de4:	08 95       	ret

00005de6 <_ZN14FreeBoardModel21setWindAlarmTriggeredEb>:
    5de6:	8d 58       	subi	r24, 0x8D	; 141
    5de8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dea:	fc 01       	movw	r30, r24
    5dec:	60 83       	st	Z, r22
    5dee:	08 95       	ret

00005df0 <_Z9calculatev>:
 * Timer interrupt driven method to do time sensitive calculations
 * The calc flag causes the main loop to execute other less sensitive calls.
 */
void calculate() {
	//we create 100ms pings here
	execute = true;
    5df0:	81 e0       	ldi	r24, 0x01	; 1
    5df2:	80 93 f4 0f 	sts	0x0FF4, r24
	//we record the ping count out to 2 secs
	interval++;
    5df6:	80 91 f2 0f 	lds	r24, 0x0FF2
    5dfa:	90 91 f3 0f 	lds	r25, 0x0FF3
    5dfe:	01 96       	adiw	r24, 0x01	; 1
    5e00:	90 93 f3 0f 	sts	0x0FF3, r25
    5e04:	80 93 f2 0f 	sts	0x0FF2, r24
	interval = interval % 20;
    5e08:	80 91 f2 0f 	lds	r24, 0x0FF2
    5e0c:	90 91 f3 0f 	lds	r25, 0x0FF3
    5e10:	64 e1       	ldi	r22, 0x14	; 20
    5e12:	70 e0       	ldi	r23, 0x00	; 0
    5e14:	0e 94 e8 3f 	call	0x7fd0	; 0x7fd0 <__divmodhi4>
    5e18:	90 93 f3 0f 	sts	0x0FF3, r25
    5e1c:	80 93 f2 0f 	sts	0x0FF2, r24
    5e20:	08 95       	ret

00005e22 <_Z7readWDDv>:
	wind.readWindDataSpeed();
}

void readWDD() {
	//intCnt++;
	wind.readWindDataDir();
    5e22:	8a e6       	ldi	r24, 0x6A	; 106
    5e24:	99 e0       	ldi	r25, 0x09	; 9
    5e26:	0c 94 32 37 	jmp	0x6e64	; 0x6e64 <_ZN4Wind15readWindDataDirEv>

00005e2a <_Z7readWDSv>:
	interval = interval % 20;
}

void readWDS() {
	//intCnt++;
	wind.readWindDataSpeed();
    5e2a:	8a e6       	ldi	r24, 0x6A	; 106
    5e2c:	99 e0       	ldi	r25, 0x09	; 9
    5e2e:	0c 94 b2 36 	jmp	0x6d64	; 0x6d64 <_ZN4Wind17readWindDataSpeedEv>

00005e32 <setup>:
//boolean inputSerialComplete = false; // whether the string is complete
boolean inputSerial1Complete = false; // whether the GPS string is complete
boolean inputSerial2Complete = false; // whether the string is complete
boolean inputSerial3Complete = false; // whether the string is complete

void setup() {
    5e32:	cf 93       	push	r28
    5e34:	df 93       	push	r29
    5e36:	cd b7       	in	r28, 0x3d	; 61
    5e38:	de b7       	in	r29, 0x3e	; 62
    5e3a:	a2 97       	sbiw	r28, 0x22	; 34
    5e3c:	0f b6       	in	r0, 0x3f	; 63
    5e3e:	f8 94       	cli
    5e40:	de bf       	out	0x3e, r29	; 62
    5e42:	0f be       	out	0x3f, r0	; 63
    5e44:	cd bf       	out	0x3d, r28	; 61

	//model.readConfig();
	inputSerial.reserve(40);
    5e46:	68 e2       	ldi	r22, 0x28	; 40
    5e48:	70 e0       	ldi	r23, 0x00	; 0
    5e4a:	85 ef       	ldi	r24, 0xF5	; 245
    5e4c:	98 e0       	ldi	r25, 0x08	; 8
    5e4e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_ZN6String7reserveEj>
	// initialize  serial ports:
	Serial.begin(38400, SERIAL_8N1);
    5e52:	26 e0       	ldi	r18, 0x06	; 6
    5e54:	40 e0       	ldi	r20, 0x00	; 0
    5e56:	56 e9       	ldi	r21, 0x96	; 150
    5e58:	60 e0       	ldi	r22, 0x00	; 0
    5e5a:	70 e0       	ldi	r23, 0x00	; 0
    5e5c:	80 e6       	ldi	r24, 0x60	; 96
    5e5e:	95 e0       	ldi	r25, 0x05	; 5
    5e60:	0e 94 2c 05 	call	0xa58	; 0xa58 <_ZN14HardwareSerial5beginEmh>
	if (DEBUG) Serial.println("Initializing..");
    5e64:	6f ea       	ldi	r22, 0xAF	; 175
    5e66:	72 e0       	ldi	r23, 0x02	; 2
    5e68:	80 e6       	ldi	r24, 0x60	; 96
    5e6a:	95 e0       	ldi	r25, 0x05	; 5
    5e6c:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>

	//start gps on serial1, autobaud
	if (DEBUG) Serial.println("Start gps..");
    5e70:	6e eb       	ldi	r22, 0xBE	; 190
    5e72:	72 e0       	ldi	r23, 0x02	; 2
    5e74:	80 e6       	ldi	r24, 0x60	; 96
    5e76:	95 e0       	ldi	r25, 0x05	; 5
    5e78:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
	gps.setupGps();
    5e7c:	84 e6       	ldi	r24, 0x64	; 100
    5e7e:	99 e0       	ldi	r25, 0x09	; 9
    5e80:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <_ZN3Gps8setupGpsEv>
	Serial1.begin(38400);
    5e84:	40 e0       	ldi	r20, 0x00	; 0
    5e86:	56 e9       	ldi	r21, 0x96	; 150
    5e88:	60 e0       	ldi	r22, 0x00	; 0
    5e8a:	70 e0       	ldi	r23, 0x00	; 0
    5e8c:	8e e3       	ldi	r24, 0x3E	; 62
    5e8e:	95 e0       	ldi	r25, 0x05	; 5
    5e90:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN14HardwareSerial5beginEm>

	if (DEBUG) Serial.println("Start seatalk - serial2..");
    5e94:	6a ec       	ldi	r22, 0xCA	; 202
    5e96:	72 e0       	ldi	r23, 0x02	; 2
    5e98:	80 e6       	ldi	r24, 0x60	; 96
    5e9a:	95 e0       	ldi	r25, 0x05	; 5
    5e9c:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
	Serial2.begin(4800, SERIAL_9N1); //Seatalk interface
    5ea0:	27 e0       	ldi	r18, 0x07	; 7
    5ea2:	40 ec       	ldi	r20, 0xC0	; 192
    5ea4:	52 e1       	ldi	r21, 0x12	; 18
    5ea6:	60 e0       	ldi	r22, 0x00	; 0
    5ea8:	70 e0       	ldi	r23, 0x00	; 0
    5eaa:	8c e1       	ldi	r24, 0x1C	; 28
    5eac:	95 e0       	ldi	r25, 0x05	; 5
    5eae:	0e 94 2c 05 	call	0xa58	; 0xa58 <_ZN14HardwareSerial5beginEmh>

	if (DEBUG) Serial.println("Start nmea Rx - serial3..");
    5eb2:	64 ee       	ldi	r22, 0xE4	; 228
    5eb4:	72 e0       	ldi	r23, 0x02	; 2
    5eb6:	80 e6       	ldi	r24, 0x60	; 96
    5eb8:	95 e0       	ldi	r25, 0x05	; 5
    5eba:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
	Serial3.begin(38400, SERIAL_8N1); //talker2
    5ebe:	26 e0       	ldi	r18, 0x06	; 6
    5ec0:	40 e0       	ldi	r20, 0x00	; 0
    5ec2:	56 e9       	ldi	r21, 0x96	; 150
    5ec4:	60 e0       	ldi	r22, 0x00	; 0
    5ec6:	70 e0       	ldi	r23, 0x00	; 0
    5ec8:	8a ef       	ldi	r24, 0xFA	; 250
    5eca:	94 e0       	ldi	r25, 0x04	; 4
    5ecc:	0e 94 2c 05 	call	0xa58	; 0xa58 <_ZN14HardwareSerial5beginEmh>

	if (DEBUG) Serial.println("Start nmea Tx..");
    5ed0:	6e ef       	ldi	r22, 0xFE	; 254
    5ed2:	72 e0       	ldi	r23, 0x02	; 2
    5ed4:	80 e6       	ldi	r24, 0x60	; 96
    5ed6:	95 e0       	ldi	r25, 0x05	; 5
    5ed8:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
	pinMode(nmeaRxPin, INPUT);
    5edc:	60 e0       	ldi	r22, 0x00	; 0
    5ede:	84 e3       	ldi	r24, 0x34	; 52
    5ee0:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <pinMode>
	pinMode(nmeaTxPin, OUTPUT);
    5ee4:	61 e0       	ldi	r22, 0x01	; 1
    5ee6:	85 e3       	ldi	r24, 0x35	; 53
    5ee8:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <pinMode>
	nmea.begin(4800);
    5eec:	40 ec       	ldi	r20, 0xC0	; 192
    5eee:	52 e1       	ldi	r21, 0x12	; 18
    5ef0:	60 e0       	ldi	r22, 0x00	; 0
    5ef2:	70 e0       	ldi	r23, 0x00	; 0
    5ef4:	85 e1       	ldi	r24, 0x15	; 21
    5ef6:	9f e0       	ldi	r25, 0x0F	; 15
    5ef8:	0e 94 f2 35 	call	0x6be4	; 0x6be4 <_ZN10NmeaSerial5beginEl>

	//setup interrupts to windPins
	if (DEBUG) Serial.println("Start wind..");
    5efc:	6e e0       	ldi	r22, 0x0E	; 14
    5efe:	73 e0       	ldi	r23, 0x03	; 3
    5f00:	80 e6       	ldi	r24, 0x60	; 96
    5f02:	95 e0       	ldi	r25, 0x05	; 5
    5f04:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
	pinMode(windSpeedPin, INPUT);
    5f08:	60 e0       	ldi	r22, 0x00	; 0
    5f0a:	83 e0       	ldi	r24, 0x03	; 3
    5f0c:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <pinMode>
	attachInterrupt(windSpeedInterrupt, readWDS, FALLING);
    5f10:	42 e0       	ldi	r20, 0x02	; 2
    5f12:	50 e0       	ldi	r21, 0x00	; 0
    5f14:	65 e1       	ldi	r22, 0x15	; 21
    5f16:	7f e2       	ldi	r23, 0x2F	; 47
    5f18:	81 e0       	ldi	r24, 0x01	; 1
    5f1a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <attachInterrupt>
	pinMode(windDirPin, INPUT);
    5f1e:	60 e0       	ldi	r22, 0x00	; 0
    5f20:	82 e0       	ldi	r24, 0x02	; 2
    5f22:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <pinMode>
	attachInterrupt(windDirInterrupt, readWDD, FALLING);
    5f26:	42 e0       	ldi	r20, 0x02	; 2
    5f28:	50 e0       	ldi	r21, 0x00	; 0
    5f2a:	61 e1       	ldi	r22, 0x11	; 17
    5f2c:	7f e2       	ldi	r23, 0x2F	; 47
    5f2e:	80 e0       	ldi	r24, 0x00	; 0
    5f30:	0e 94 70 09 	call	0x12e0	; 0x12e0 <attachInterrupt>

//	//setup timers
	if (DEBUG) Serial.println("Start timer..");
    5f34:	6b e1       	ldi	r22, 0x1B	; 27
    5f36:	73 e0       	ldi	r23, 0x03	; 3
    5f38:	80 e6       	ldi	r24, 0x60	; 96
    5f3a:	95 e0       	ldi	r25, 0x05	; 5
    5f3c:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
	FlexiTimer2::set(100, calculate); // 100ms period
    5f40:	48 ef       	ldi	r20, 0xF8	; 248
    5f42:	5e e2       	ldi	r21, 0x2E	; 46
    5f44:	64 e6       	ldi	r22, 0x64	; 100
    5f46:	70 e0       	ldi	r23, 0x00	; 0
    5f48:	80 e0       	ldi	r24, 0x00	; 0
    5f4a:	90 e0       	ldi	r25, 0x00	; 0
    5f4c:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <_ZN11FlexiTimer23setEmPFvvE>
	FlexiTimer2::start();
    5f50:	0e 94 00 21 	call	0x4200	; 0x4200 <_ZN11FlexiTimer25startEv>
	//lcd.clearLcd();

	if (DEBUG) Serial.println("Setup complete..");
    5f54:	69 e2       	ldi	r22, 0x29	; 41
    5f56:	73 e0       	ldi	r23, 0x03	; 3
    5f58:	80 e6       	ldi	r24, 0x60	; 96
    5f5a:	95 e0       	ldi	r25, 0x05	; 5
    5f5c:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
	//print out the config
	model.sendData(Serial, CONFIG_T);
    5f60:	60 e6       	ldi	r22, 0x60	; 96
    5f62:	75 e0       	ldi	r23, 0x05	; 5
    5f64:	ce 01       	movw	r24, r28
    5f66:	01 96       	adiw	r24, 0x01	; 1
    5f68:	0e 94 65 2a 	call	0x54ca	; 0x54ca <_ZN14HardwareSerialC1ERKS_>
    5f6c:	43 e4       	ldi	r20, 0x43	; 67
    5f6e:	be 01       	movw	r22, r28
    5f70:	6f 5f       	subi	r22, 0xFF	; 255
    5f72:	7f 4f       	sbci	r23, 0xFF	; 255
    5f74:	86 e5       	ldi	r24, 0x56	; 86
    5f76:	9f e0       	ldi	r25, 0x0F	; 15
    5f78:	0e 94 a8 2c 	call	0x5950	; 0x5950 <_ZN14FreeBoardModel8sendDataE14HardwareSerialc>
}
    5f7c:	a2 96       	adiw	r28, 0x22	; 34
    5f7e:	0f b6       	in	r0, 0x3f	; 63
    5f80:	f8 94       	cli
    5f82:	de bf       	out	0x3e, r29	; 62
    5f84:	0f be       	out	0x3f, r0	; 63
    5f86:	cd bf       	out	0x3d, r28	; 61
    5f88:	df 91       	pop	r29
    5f8a:	cf 91       	pop	r28
    5f8c:	08 95       	ret

00005f8e <_Z12serialEvent1v>:

	}
}

void serialEvent1() {
	while (Serial1.available()) {
    5f8e:	1f c0       	rjmp	.+62     	; 0x5fce <_Z12serialEvent1v+0x40>
		inputSerial1Complete = gps.decode(Serial1.read());
    5f90:	8e e3       	ldi	r24, 0x3E	; 62
    5f92:	95 e0       	ldi	r25, 0x05	; 5
    5f94:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN14HardwareSerial4readEv>
    5f98:	68 2f       	mov	r22, r24
    5f9a:	84 e6       	ldi	r24, 0x64	; 100
    5f9c:	99 e0       	ldi	r25, 0x09	; 9
    5f9e:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <_ZN3Gps6decodeEh>
    5fa2:	80 93 f4 08 	sts	0x08F4, r24
		// read from port 1 (GPS), send to port 0:
		if (inputSerial1Complete) {
    5fa6:	88 23       	and	r24, r24
    5fa8:	91 f0       	breq	.+36     	; 0x5fce <_Z12serialEvent1v+0x40>
			if (MUX) nmea.printNmea(gpsSource.sentence());
    5faa:	8c ea       	ldi	r24, 0xAC	; 172
    5fac:	9d e0       	ldi	r25, 0x0D	; 13
    5fae:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <_ZN4NMEA8sentenceEv>
    5fb2:	bc 01       	movw	r22, r24
    5fb4:	85 e1       	ldi	r24, 0x15	; 21
    5fb6:	9f e0       	ldi	r25, 0x0F	; 15
    5fb8:	0e 94 03 36 	call	0x6c06	; 0x6c06 <_ZN10NmeaSerial9printNmeaEPc>
			Serial.println(gpsSource.sentence());
    5fbc:	8c ea       	ldi	r24, 0xAC	; 172
    5fbe:	9d e0       	ldi	r25, 0x0D	; 13
    5fc0:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <_ZN4NMEA8sentenceEv>
    5fc4:	bc 01       	movw	r22, r24
    5fc6:	80 e6       	ldi	r24, 0x60	; 96
    5fc8:	95 e0       	ldi	r25, 0x05	; 5
    5fca:	0c 94 ed 06 	jmp	0xdda	; 0xdda <_ZN5Print7printlnEPKc>

	}
}

void serialEvent1() {
	while (Serial1.available()) {
    5fce:	8e e3       	ldi	r24, 0x3E	; 62
    5fd0:	95 e0       	ldi	r25, 0x05	; 5
    5fd2:	0e 94 80 01 	call	0x300	; 0x300 <_ZN14HardwareSerial9availableEv>
    5fd6:	89 2b       	or	r24, r25
    5fd8:	d9 f6       	brne	.-74     	; 0x5f90 <_Z12serialEvent1v+0x2>
			Serial.println(gpsSource.sentence());
			//loop every sentence
			break;
		}
	}
}
    5fda:	08 95       	ret

00005fdc <_Z12serialEvent2v>:

void serialEvent2() {
	while (Serial2.available()) {
    5fdc:	09 c0       	rjmp	.+18     	; 0x5ff0 <_Z12serialEvent2v+0x14>
		seatalk.processSeaTalkByte(Serial2.read());
    5fde:	8c e1       	ldi	r24, 0x1C	; 28
    5fe0:	95 e0       	ldi	r25, 0x05	; 5
    5fe2:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN14HardwareSerial4readEv>
    5fe6:	68 2f       	mov	r22, r24
    5fe8:	8c ef       	ldi	r24, 0xFC	; 252
    5fea:	98 e0       	ldi	r25, 0x08	; 8
    5fec:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <_ZN7Seatalk18processSeaTalkByteEh>
		}
	}
}

void serialEvent2() {
	while (Serial2.available()) {
    5ff0:	8c e1       	ldi	r24, 0x1C	; 28
    5ff2:	95 e0       	ldi	r25, 0x05	; 5
    5ff4:	0e 94 80 01 	call	0x300	; 0x300 <_ZN14HardwareSerial9availableEv>
    5ff8:	89 2b       	or	r24, r25
    5ffa:	89 f7       	brne	.-30     	; 0x5fde <_Z12serialEvent2v+0x2>
		seatalk.processSeaTalkByte(Serial2.read());
	}
}
    5ffc:	08 95       	ret

00005ffe <_Z12serialEvent3v>:

void serialEvent3() {
	while (Serial3.available()) {
    5ffe:	1f c0       	rjmp	.+62     	; 0x603e <_Z12serialEvent3v+0x40>
		inputSerial3Complete = talker3.decode(Serial3.read());
    6000:	8a ef       	ldi	r24, 0xFA	; 250
    6002:	94 e0       	ldi	r25, 0x04	; 4
    6004:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN14HardwareSerial4readEv>
    6008:	68 2f       	mov	r22, r24
    600a:	81 e7       	ldi	r24, 0x71	; 113
    600c:	99 e0       	ldi	r25, 0x09	; 9
    600e:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <_ZN4NMEA6decodeEc>
    6012:	80 93 f3 08 	sts	0x08F3, r24
		if (inputSerial3Complete) {
    6016:	88 23       	and	r24, r24
    6018:	91 f0       	breq	.+36     	; 0x603e <_Z12serialEvent3v+0x40>
			if (MUX) nmea.printNmea(talker3.sentence());
    601a:	81 e7       	ldi	r24, 0x71	; 113
    601c:	99 e0       	ldi	r25, 0x09	; 9
    601e:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <_ZN4NMEA8sentenceEv>
    6022:	bc 01       	movw	r22, r24
    6024:	85 e1       	ldi	r24, 0x15	; 21
    6026:	9f e0       	ldi	r25, 0x0F	; 15
    6028:	0e 94 03 36 	call	0x6c06	; 0x6c06 <_ZN10NmeaSerial9printNmeaEPc>
			Serial.println(talker3.sentence());
    602c:	81 e7       	ldi	r24, 0x71	; 113
    602e:	99 e0       	ldi	r25, 0x09	; 9
    6030:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <_ZN4NMEA8sentenceEv>
    6034:	bc 01       	movw	r22, r24
    6036:	80 e6       	ldi	r24, 0x60	; 96
    6038:	95 e0       	ldi	r25, 0x05	; 5
    603a:	0c 94 ed 06 	jmp	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
		seatalk.processSeaTalkByte(Serial2.read());
	}
}

void serialEvent3() {
	while (Serial3.available()) {
    603e:	8a ef       	ldi	r24, 0xFA	; 250
    6040:	94 e0       	ldi	r25, 0x04	; 4
    6042:	0e 94 80 01 	call	0x300	; 0x300 <_ZN14HardwareSerial9availableEv>
    6046:	89 2b       	or	r24, r25
    6048:	d9 f6       	brne	.-74     	; 0x6000 <_Z12serialEvent3v+0x2>
			Serial.println(talker3.sentence());
			//loop every sentence
			break;
		}
	}
}
    604a:	08 95       	ret

0000604c <loop>:

void loop() {
    604c:	cf 93       	push	r28
    604e:	df 93       	push	r29
    6050:	cd b7       	in	r28, 0x3d	; 61
    6052:	de b7       	in	r29, 0x3e	; 62
    6054:	a2 97       	sbiw	r28, 0x22	; 34
    6056:	0f b6       	in	r0, 0x3f	; 63
    6058:	f8 94       	cli
    605a:	de bf       	out	0x3e, r29	; 62
    605c:	0f be       	out	0x3f, r0	; 63
    605e:	cd bf       	out	0x3d, r28	; 61

	//if (DEBUG)
	//Serial.println("Looping..");

	if (execute) {
    6060:	80 91 f4 0f 	lds	r24, 0x0FF4
    6064:	88 23       	and	r24, r24
    6066:	b9 f1       	breq	.+110    	; 0x60d6 <loop+0x8a>
		//timer ping
		//do these every 100ms
		autopilot.calcAutoPilot();
    6068:	8a e1       	ldi	r24, 0x1A	; 26
    606a:	99 e0       	ldi	r25, 0x09	; 9
    606c:	0e 94 15 28 	call	0x502a	; 0x502a <_ZN9Autopilot13calcAutoPilotEv>

//		if (interval % 2 == 0) {
//			//do every 200ms
		wind.calcWindData();
    6070:	8a e6       	ldi	r24, 0x6A	; 106
    6072:	99 e0       	ldi	r25, 0x09	; 9
    6074:	0e 94 a0 38 	call	0x7140	; 0x7140 <_ZN4Wind12calcWindDataEv>
//		}
		if (interval % 5 == 0) {
    6078:	80 91 f2 0f 	lds	r24, 0x0FF2
    607c:	90 91 f3 0f 	lds	r25, 0x0FF3
    6080:	65 e0       	ldi	r22, 0x05	; 5
    6082:	70 e0       	ldi	r23, 0x00	; 0
    6084:	0e 94 e8 3f 	call	0x7fd0	; 0x7fd0 <__divmodhi4>
    6088:	89 2b       	or	r24, r25
    608a:	69 f4       	brne	.+26     	; 0x60a6 <loop+0x5a>
			//do every 500ms

			//fire any alarms
			//alarm.checkAlarms();
			model.writeSimple(Serial);
    608c:	60 e6       	ldi	r22, 0x60	; 96
    608e:	75 e0       	ldi	r23, 0x05	; 5
    6090:	ce 01       	movw	r24, r28
    6092:	01 96       	adiw	r24, 0x01	; 1
    6094:	0e 94 65 2a 	call	0x54ca	; 0x54ca <_ZN14HardwareSerialC1ERKS_>
    6098:	be 01       	movw	r22, r28
    609a:	6f 5f       	subi	r22, 0xFF	; 255
    609c:	7f 4f       	sbci	r23, 0xFF	; 255
    609e:	86 e5       	ldi	r24, 0x56	; 86
    60a0:	9f e0       	ldi	r25, 0x0F	; 15
    60a2:	0e 94 ad 2b 	call	0x575a	; 0x575a <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial>
		}
		if (interval % 10 == 0) {
    60a6:	80 91 f2 0f 	lds	r24, 0x0FF2
    60aa:	90 91 f3 0f 	lds	r25, 0x0FF3
    60ae:	6a e0       	ldi	r22, 0x0A	; 10
    60b0:	70 e0       	ldi	r23, 0x00	; 0
    60b2:	0e 94 e8 3f 	call	0x7fd0	; 0x7fd0 <__divmodhi4>
    60b6:	89 2b       	or	r24, r25
    60b8:	61 f4       	brne	.+24     	; 0x60d2 <loop+0x86>
			//do every 1000ms
			anchor.checkAnchor();
    60ba:	86 e1       	ldi	r24, 0x16	; 22
    60bc:	99 e0       	ldi	r25, 0x09	; 9
    60be:	0e 94 56 26 	call	0x4cac	; 0x4cac <_ZN6Anchor11checkAnchorEv>
			alarm.checkWindAlarm();
    60c2:	8c e6       	ldi	r24, 0x6C	; 108
    60c4:	99 e0       	ldi	r25, 0x09	; 9
    60c6:	0e 94 29 24 	call	0x4852	; 0x4852 <_ZN5Alarm14checkWindAlarmEv>
			nmea.printWindNmea();
    60ca:	85 e1       	ldi	r24, 0x15	; 21
    60cc:	9f e0       	ldi	r25, 0x0F	; 15
    60ce:	0e 94 05 36 	call	0x6c0a	; 0x6c0a <_ZN10NmeaSerial13printWindNmeaEv>
		}
		//if (interval % 20 == 0) {
		//do every 2000ms
		//}

		execute = false;
    60d2:	10 92 f4 0f 	sts	0x0FF4, r1
	 s.append(", stack: ");
	 s.append((int)stackptr);
	 if(DEBUG)Serial.println(s);
	 */

}
    60d6:	a2 96       	adiw	r28, 0x22	; 34
    60d8:	0f b6       	in	r0, 0x3f	; 63
    60da:	f8 94       	cli
    60dc:	de bf       	out	0x3e, r29	; 62
    60de:	0f be       	out	0x3f, r0	; 63
    60e0:	cd bf       	out	0x3d, r28	; 61
    60e2:	df 91       	pop	r29
    60e4:	cf 91       	pop	r28
    60e6:	08 95       	ret

000060e8 <_Z7processPcc>:

void process(char * s, char parser) {
    60e8:	4f 92       	push	r4
    60ea:	5f 92       	push	r5
    60ec:	6f 92       	push	r6
    60ee:	7f 92       	push	r7
    60f0:	8f 92       	push	r8
    60f2:	9f 92       	push	r9
    60f4:	af 92       	push	r10
    60f6:	bf 92       	push	r11
    60f8:	cf 92       	push	r12
    60fa:	df 92       	push	r13
    60fc:	ef 92       	push	r14
    60fe:	ff 92       	push	r15
    6100:	0f 93       	push	r16
    6102:	1f 93       	push	r17
    6104:	cf 93       	push	r28
    6106:	df 93       	push	r29
    6108:	00 d0       	rcall	.+0      	; 0x610a <_Z7processPcc+0x22>
    610a:	1f 92       	push	r1
    610c:	1f 92       	push	r1
    610e:	cd b7       	in	r28, 0x3d	; 61
    6110:	de b7       	in	r29, 0x3e	; 62
		}
		//next token
		cmd = strtok(NULL, ",");
	}
	//if (DEBUG) Serial.println("Process str exit");
}
    6112:	6d b6       	in	r6, 0x3d	; 61
    6114:	7e b6       	in	r7, 0x3e	; 62
}

void process(char * s, char parser) {
	//if (DEBUG) Serial.print("Process str:");
	//if (DEBUG) Serial.println(s);
	char *cmd = strtok(s, ",");
    6116:	6d e5       	ldi	r22, 0x5D	; 93
    6118:	72 e0       	ldi	r23, 0x02	; 2
    611a:	73 c1       	rjmp	.+742    	; 0x6402 <_Z7processPcc+0x31a>
    611c:	4d b6       	in	r4, 0x3d	; 61
    611e:	5e b6       	in	r5, 0x3e	; 62
		char key[5];
		int l = strlen(cmd);

		if (cmd[0] == '#') {
			//
			strncpy(key, cmd, 4);
    6120:	44 e0       	ldi	r20, 0x04	; 4
    6122:	50 e0       	ldi	r21, 0x00	; 0
    6124:	b7 01       	movw	r22, r14
    6126:	ce 01       	movw	r24, r28
    6128:	01 96       	adiw	r24, 0x01	; 1
    612a:	0e 94 07 41 	call	0x820e	; 0x820e <strncpy>
			key[4] = '\0';
    612e:	1d 82       	std	Y+5, r1	; 0x05
			char val[l - 4];
    6130:	48 01       	movw	r8, r16
    6132:	85 e0       	ldi	r24, 0x05	; 5
    6134:	88 1a       	sub	r8, r24
    6136:	91 08       	sbc	r9, r1
    6138:	68 01       	movw	r12, r16
    613a:	94 e0       	ldi	r25, 0x04	; 4
    613c:	c9 1a       	sub	r12, r25
    613e:	d1 08       	sbc	r13, r1
    6140:	ad b7       	in	r26, 0x3d	; 61
    6142:	be b7       	in	r27, 0x3e	; 62
    6144:	ac 19       	sub	r26, r12
    6146:	bd 09       	sbc	r27, r13
    6148:	0f b6       	in	r0, 0x3f	; 63
    614a:	f8 94       	cli
    614c:	be bf       	out	0x3e, r27	; 62
    614e:	0f be       	out	0x3f, r0	; 63
    6150:	ad bf       	out	0x3d, r26	; 61
    6152:	ad b6       	in	r10, 0x3d	; 61
    6154:	be b6       	in	r11, 0x3e	; 62
    6156:	ef ef       	ldi	r30, 0xFF	; 255
    6158:	ae 1a       	sub	r10, r30
    615a:	be 0a       	sbc	r11, r30
			memcpy(val, &cmd[5], l - 5);
    615c:	65 01       	movw	r12, r10
    615e:	f5 e0       	ldi	r31, 0x05	; 5
    6160:	ef 0e       	add	r14, r31
    6162:	f1 1c       	adc	r15, r1
    6164:	a4 01       	movw	r20, r8
    6166:	b7 01       	movw	r22, r14
    6168:	c5 01       	movw	r24, r10
    616a:	0e 94 c3 40 	call	0x8186	; 0x8186 <memcpy>
			val[l - 5] = '\0';
    616e:	f5 01       	movw	r30, r10
    6170:	e8 0d       	add	r30, r8
    6172:	f9 1d       	adc	r31, r9
    6174:	10 82       	st	Z, r1
			//if (DEBUG) Serial.print(key);
			//if (DEBUG) Serial.print(" = ");
			//if (DEBUG) Serial.println(val);

			//anchor
			if (strcmp(key, ANCHOR_ALARM_STATE) == 0) {
    6176:	6a e3       	ldi	r22, 0x3A	; 58
    6178:	73 e0       	ldi	r23, 0x03	; 3
    617a:	ce 01       	movw	r24, r28
    617c:	01 96       	adiw	r24, 0x01	; 1
    617e:	0e 94 e9 40 	call	0x81d2	; 0x81d2 <strcmp>
    6182:	00 97       	sbiw	r24, 0x00	; 0
    6184:	b1 f4       	brne	.+44     	; 0x61b2 <_Z7processPcc+0xca>
				//if (DEBUG) Serial.print("AA Entered..");
				model.setAnchorAlarmOn(atoi(val));
    6186:	c5 01       	movw	r24, r10
    6188:	0e 94 62 40 	call	0x80c4	; 0x80c4 <atoi>
    618c:	61 e0       	ldi	r22, 0x01	; 1
    618e:	89 2b       	or	r24, r25
    6190:	09 f4       	brne	.+2      	; 0x6194 <_Z7processPcc+0xac>
    6192:	60 e0       	ldi	r22, 0x00	; 0
    6194:	86 e5       	ldi	r24, 0x56	; 86
    6196:	9f e0       	ldi	r25, 0x0F	; 15
    6198:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <_ZN14FreeBoardModel16setAnchorAlarmOnEb>
				if (atoi(val) == 1) {
    619c:	c6 01       	movw	r24, r12
    619e:	0e 94 62 40 	call	0x80c4	; 0x80c4 <atoi>
    61a2:	01 97       	sbiw	r24, 0x01	; 1
    61a4:	09 f0       	breq	.+2      	; 0x61a8 <_Z7processPcc+0xc0>
    61a6:	bf c0       	rjmp	.+382    	; 0x6326 <_Z7processPcc+0x23e>
					anchor.setAnchorPoint();
    61a8:	86 e1       	ldi	r24, 0x16	; 22
    61aa:	99 e0       	ldi	r25, 0x09	; 9
    61ac:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <_ZN6Anchor14setAnchorPointEv>
    61b0:	ba c0       	rjmp	.+372    	; 0x6326 <_Z7processPcc+0x23e>
				}
			} else if (strcmp(key, ANCHOR_ALARM_ADJUST) == 0) {
    61b2:	6f e3       	ldi	r22, 0x3F	; 63
    61b4:	73 e0       	ldi	r23, 0x03	; 3
    61b6:	ce 01       	movw	r24, r28
    61b8:	01 96       	adiw	r24, 0x01	; 1
    61ba:	0e 94 e9 40 	call	0x81d2	; 0x81d2 <strcmp>
    61be:	00 97       	sbiw	r24, 0x00	; 0
    61c0:	b1 f4       	brne	.+44     	; 0x61ee <_Z7processPcc+0x106>
				model.setAnchorRadius(model.getAnchorRadius() + atof(val));
    61c2:	86 e5       	ldi	r24, 0x56	; 86
    61c4:	9f e0       	ldi	r25, 0x0F	; 15
    61c6:	0e 94 0d 2b 	call	0x561a	; 0x561a <_ZN14FreeBoardModel15getAnchorRadiusEv>
    61ca:	6b 01       	movw	r12, r22
    61cc:	7c 01       	movw	r14, r24
    61ce:	c5 01       	movw	r24, r10
    61d0:	0e 94 5e 40 	call	0x80bc	; 0x80bc <atof>
    61d4:	9b 01       	movw	r18, r22
    61d6:	ac 01       	movw	r20, r24
    61d8:	c7 01       	movw	r24, r14
    61da:	b6 01       	movw	r22, r12
    61dc:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    61e0:	ab 01       	movw	r20, r22
    61e2:	bc 01       	movw	r22, r24
    61e4:	86 e5       	ldi	r24, 0x56	; 86
    61e6:	9f e0       	ldi	r25, 0x0F	; 15
    61e8:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <_ZN14FreeBoardModel15setAnchorRadiusEf>
    61ec:	9c c0       	rjmp	.+312    	; 0x6326 <_Z7processPcc+0x23e>
			} else if (strcmp(key, ANCHOR_ALARM_LAT) == 0) {
    61ee:	64 e4       	ldi	r22, 0x44	; 68
    61f0:	73 e0       	ldi	r23, 0x03	; 3
    61f2:	ce 01       	movw	r24, r28
    61f4:	01 96       	adiw	r24, 0x01	; 1
    61f6:	0e 94 e9 40 	call	0x81d2	; 0x81d2 <strcmp>
    61fa:	00 97       	sbiw	r24, 0x00	; 0
    61fc:	51 f4       	brne	.+20     	; 0x6212 <_Z7processPcc+0x12a>
				model.setAnchorLat(atof(val));
    61fe:	c5 01       	movw	r24, r10
    6200:	0e 94 5e 40 	call	0x80bc	; 0x80bc <atof>
    6204:	ab 01       	movw	r20, r22
    6206:	bc 01       	movw	r22, r24
    6208:	86 e5       	ldi	r24, 0x56	; 86
    620a:	9f e0       	ldi	r25, 0x0F	; 15
    620c:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <_ZN14FreeBoardModel12setAnchorLatEf>
    6210:	8a c0       	rjmp	.+276    	; 0x6326 <_Z7processPcc+0x23e>
			} else if (strcmp(key, ANCHOR_ALARM_LON) == 0) {
    6212:	69 e4       	ldi	r22, 0x49	; 73
    6214:	73 e0       	ldi	r23, 0x03	; 3
    6216:	ce 01       	movw	r24, r28
    6218:	01 96       	adiw	r24, 0x01	; 1
    621a:	0e 94 e9 40 	call	0x81d2	; 0x81d2 <strcmp>
    621e:	00 97       	sbiw	r24, 0x00	; 0
    6220:	51 f4       	brne	.+20     	; 0x6236 <_Z7processPcc+0x14e>
				model.setAnchorLon(atof(val));
    6222:	c5 01       	movw	r24, r10
    6224:	0e 94 5e 40 	call	0x80bc	; 0x80bc <atof>
    6228:	ab 01       	movw	r20, r22
    622a:	bc 01       	movw	r22, r24
    622c:	86 e5       	ldi	r24, 0x56	; 86
    622e:	9f e0       	ldi	r25, 0x0F	; 15
    6230:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <_ZN14FreeBoardModel12setAnchorLonEf>
    6234:	78 c0       	rjmp	.+240    	; 0x6326 <_Z7processPcc+0x23e>
			}
			//autopliot
			else if (strcmp(key, AUTOPILOT_STATE) == 0) {
    6236:	6e e4       	ldi	r22, 0x4E	; 78
    6238:	73 e0       	ldi	r23, 0x03	; 3
    623a:	ce 01       	movw	r24, r28
    623c:	01 96       	adiw	r24, 0x01	; 1
    623e:	0e 94 e9 40 	call	0x81d2	; 0x81d2 <strcmp>
    6242:	00 97       	sbiw	r24, 0x00	; 0
    6244:	61 f4       	brne	.+24     	; 0x625e <_Z7processPcc+0x176>
				//if (DEBUG) Serial.print("AP Entered..");
				//if (DEBUG) Serial.println(val);
				//this is potentailly dangerous, since we dont want the boat diving off on an old target heading.
				//in model we ALWAYS reset to current magnetic or wind heading at this point
				model.setAutopilotOn(atoi(val));
    6246:	c5 01       	movw	r24, r10
    6248:	0e 94 62 40 	call	0x80c4	; 0x80c4 <atoi>
    624c:	61 e0       	ldi	r22, 0x01	; 1
    624e:	89 2b       	or	r24, r25
    6250:	09 f4       	brne	.+2      	; 0x6254 <_Z7processPcc+0x16c>
    6252:	60 e0       	ldi	r22, 0x00	; 0
    6254:	86 e5       	ldi	r24, 0x56	; 86
    6256:	9f e0       	ldi	r25, 0x0F	; 15
    6258:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <_ZN14FreeBoardModel14setAutopilotOnEb>
    625c:	64 c0       	rjmp	.+200    	; 0x6326 <_Z7processPcc+0x23e>
			} else if (strcmp(key, AUTOPILOT_ADJUST) == 0) {
    625e:	63 e5       	ldi	r22, 0x53	; 83
    6260:	73 e0       	ldi	r23, 0x03	; 3
    6262:	ce 01       	movw	r24, r28
    6264:	01 96       	adiw	r24, 0x01	; 1
    6266:	0e 94 e9 40 	call	0x81d2	; 0x81d2 <strcmp>
    626a:	00 97       	sbiw	r24, 0x00	; 0
    626c:	c1 f4       	brne	.+48     	; 0x629e <_Z7processPcc+0x1b6>
				model.setAutopilotTargetHeading(model.getAutopilotTargetHeading() + atol(val));
    626e:	86 e5       	ldi	r24, 0x56	; 86
    6270:	9f e0       	ldi	r25, 0x0F	; 15
    6272:	0e 94 41 2b 	call	0x5682	; 0x5682 <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    6276:	6b 01       	movw	r12, r22
    6278:	7c 01       	movw	r14, r24
    627a:	c5 01       	movw	r24, r10
    627c:	0e 94 80 40 	call	0x8100	; 0x8100 <atol>
    6280:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__floatsisf>
    6284:	9b 01       	movw	r18, r22
    6286:	ac 01       	movw	r20, r24
    6288:	c7 01       	movw	r24, r14
    628a:	b6 01       	movw	r22, r12
    628c:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    6290:	ab 01       	movw	r20, r22
    6292:	bc 01       	movw	r22, r24
    6294:	86 e5       	ldi	r24, 0x56	; 86
    6296:	9f e0       	ldi	r25, 0x0F	; 15
    6298:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <_ZN14FreeBoardModel25setAutopilotTargetHeadingEd>
    629c:	44 c0       	rjmp	.+136    	; 0x6326 <_Z7processPcc+0x23e>
			} else if (strcmp(key, AUTOPILOT_SOURCE) == 0) {
    629e:	68 e5       	ldi	r22, 0x58	; 88
    62a0:	73 e0       	ldi	r23, 0x03	; 3
    62a2:	ce 01       	movw	r24, r28
    62a4:	01 96       	adiw	r24, 0x01	; 1
    62a6:	0e 94 e9 40 	call	0x81d2	; 0x81d2 <strcmp>
    62aa:	00 97       	sbiw	r24, 0x00	; 0
    62ac:	39 f4       	brne	.+14     	; 0x62bc <_Z7processPcc+0x1d4>
				model.setAutopilotReference(val[0]);
    62ae:	d5 01       	movw	r26, r10
    62b0:	6c 91       	ld	r22, X
    62b2:	86 e5       	ldi	r24, 0x56	; 86
    62b4:	9f e0       	ldi	r25, 0x0F	; 15
    62b6:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <_ZN14FreeBoardModel21setAutopilotReferenceEc>
    62ba:	35 c0       	rjmp	.+106    	; 0x6326 <_Z7processPcc+0x23e>
			}
			//wind
			else if (strcmp(key, WIND_SPEED_ALARM_STATE) == 0) {
    62bc:	6d e5       	ldi	r22, 0x5D	; 93
    62be:	73 e0       	ldi	r23, 0x03	; 3
    62c0:	ce 01       	movw	r24, r28
    62c2:	01 96       	adiw	r24, 0x01	; 1
    62c4:	0e 94 e9 40 	call	0x81d2	; 0x81d2 <strcmp>
    62c8:	00 97       	sbiw	r24, 0x00	; 0
    62ca:	61 f4       	brne	.+24     	; 0x62e4 <_Z7processPcc+0x1fc>
				model.setWindAlarmOn(atoi(val));
    62cc:	c5 01       	movw	r24, r10
    62ce:	0e 94 62 40 	call	0x80c4	; 0x80c4 <atoi>
    62d2:	61 e0       	ldi	r22, 0x01	; 1
    62d4:	89 2b       	or	r24, r25
    62d6:	09 f4       	brne	.+2      	; 0x62da <_Z7processPcc+0x1f2>
    62d8:	60 e0       	ldi	r22, 0x00	; 0
    62da:	86 e5       	ldi	r24, 0x56	; 86
    62dc:	9f e0       	ldi	r25, 0x0F	; 15
    62de:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <_ZN14FreeBoardModel14setWindAlarmOnEb>
    62e2:	21 c0       	rjmp	.+66     	; 0x6326 <_Z7processPcc+0x23e>
			} else if (strcpy(key, WIND_ALARM_KNOTS) == 0) {
    62e4:	62 e6       	ldi	r22, 0x62	; 98
    62e6:	73 e0       	ldi	r23, 0x03	; 3
    62e8:	ce 01       	movw	r24, r28
    62ea:	01 96       	adiw	r24, 0x01	; 1
    62ec:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <strcpy>
    62f0:	00 97       	sbiw	r24, 0x00	; 0
    62f2:	49 f4       	brne	.+18     	; 0x6306 <_Z7processPcc+0x21e>
				model.setWindAlarmSpeed(atoi(val));
    62f4:	c5 01       	movw	r24, r10
    62f6:	0e 94 62 40 	call	0x80c4	; 0x80c4 <atoi>
    62fa:	bc 01       	movw	r22, r24
    62fc:	86 e5       	ldi	r24, 0x56	; 86
    62fe:	9f e0       	ldi	r25, 0x0F	; 15
    6300:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <_ZN14FreeBoardModel17setWindAlarmSpeedEi>
    6304:	10 c0       	rjmp	.+32     	; 0x6326 <_Z7processPcc+0x23e>
			} else if (strcpy(key, WIND_ZERO_ADJUST) == 0) {
    6306:	67 e6       	ldi	r22, 0x67	; 103
    6308:	73 e0       	ldi	r23, 0x03	; 3
    630a:	ce 01       	movw	r24, r28
    630c:	01 96       	adiw	r24, 0x01	; 1
    630e:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <strcpy>
    6312:	00 97       	sbiw	r24, 0x00	; 0
    6314:	41 f4       	brne	.+16     	; 0x6326 <_Z7processPcc+0x23e>
				model.setWindZeroOffset(atoi(val));
    6316:	c5 01       	movw	r24, r10
    6318:	0e 94 62 40 	call	0x80c4	; 0x80c4 <atoi>
    631c:	bc 01       	movw	r22, r24
    631e:	86 e5       	ldi	r24, 0x56	; 86
    6320:	9f e0       	ldi	r25, 0x0F	; 15
    6322:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <_ZN14FreeBoardModel17setWindZeroOffsetEi>
    6326:	34 2d       	mov	r19, r4
    6328:	25 2d       	mov	r18, r5
    632a:	60 c0       	rjmp	.+192    	; 0x63ec <_Z7processPcc+0x304>
    632c:	8d b6       	in	r8, 0x3d	; 61
    632e:	9e b6       	in	r9, 0x3e	; 62
			}
		} else {
			strncpy(key, cmd, 3);
    6330:	43 e0       	ldi	r20, 0x03	; 3
    6332:	50 e0       	ldi	r21, 0x00	; 0
    6334:	b7 01       	movw	r22, r14
    6336:	ce 01       	movw	r24, r28
    6338:	01 96       	adiw	r24, 0x01	; 1
    633a:	0e 94 07 41 	call	0x820e	; 0x820e <strncpy>
			key[3] = '\0';
    633e:	1c 82       	std	Y+4, r1	; 0x04
			char val[l - 3];
    6340:	58 01       	movw	r10, r16
    6342:	b4 e0       	ldi	r27, 0x04	; 4
    6344:	ab 1a       	sub	r10, r27
    6346:	b1 08       	sbc	r11, r1
    6348:	68 01       	movw	r12, r16
    634a:	e3 e0       	ldi	r30, 0x03	; 3
    634c:	ce 1a       	sub	r12, r30
    634e:	d1 08       	sbc	r13, r1
    6350:	8d b7       	in	r24, 0x3d	; 61
    6352:	9e b7       	in	r25, 0x3e	; 62
    6354:	8c 19       	sub	r24, r12
    6356:	9d 09       	sbc	r25, r13
    6358:	0f b6       	in	r0, 0x3f	; 63
    635a:	f8 94       	cli
    635c:	9e bf       	out	0x3e, r25	; 62
    635e:	0f be       	out	0x3f, r0	; 63
    6360:	8d bf       	out	0x3d, r24	; 61
    6362:	0d b7       	in	r16, 0x3d	; 61
    6364:	1e b7       	in	r17, 0x3e	; 62
    6366:	0f 5f       	subi	r16, 0xFF	; 255
    6368:	1f 4f       	sbci	r17, 0xFF	; 255
			memcpy(val, &cmd[4], l - 4);
    636a:	68 01       	movw	r12, r16
    636c:	94 e0       	ldi	r25, 0x04	; 4
    636e:	e9 0e       	add	r14, r25
    6370:	f1 1c       	adc	r15, r1
    6372:	a5 01       	movw	r20, r10
    6374:	b7 01       	movw	r22, r14
    6376:	c8 01       	movw	r24, r16
    6378:	0e 94 c3 40 	call	0x8186	; 0x8186 <memcpy>
			val[l - 4] = '\0';
    637c:	f8 01       	movw	r30, r16
    637e:	ea 0d       	add	r30, r10
    6380:	fb 1d       	adc	r31, r11
    6382:	10 82       	st	Z, r1
			//if (DEBUG) Serial.print(key);
			//if (DEBUG) Serial.print(" = ");
			//if (DEBUG) Serial.println(val);
			// incoming data = WST,WSA,WDT,WDA,WSU,LAT,LON,COG,MGH,SOG,YAW
			if (strcmp(key, MGH) == 0) {
    6384:	6c e6       	ldi	r22, 0x6C	; 108
    6386:	73 e0       	ldi	r23, 0x03	; 3
    6388:	ce 01       	movw	r24, r28
    638a:	01 96       	adiw	r24, 0x01	; 1
    638c:	0e 94 e9 40 	call	0x81d2	; 0x81d2 <strcmp>
    6390:	00 97       	sbiw	r24, 0x00	; 0
    6392:	49 f4       	brne	.+18     	; 0x63a6 <_Z7processPcc+0x2be>
				model.setMagneticHeading(atof(val));
    6394:	c8 01       	movw	r24, r16
    6396:	0e 94 5e 40 	call	0x80bc	; 0x80bc <atof>
    639a:	ab 01       	movw	r20, r22
    639c:	bc 01       	movw	r22, r24
    639e:	86 e5       	ldi	r24, 0x56	; 86
    63a0:	9f e0       	ldi	r25, 0x0F	; 15
    63a2:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <_ZN14FreeBoardModel18setMagneticHeadingEf>
			}
			if (strcmp(key, DECL) == 0) {
    63a6:	60 e7       	ldi	r22, 0x70	; 112
    63a8:	73 e0       	ldi	r23, 0x03	; 3
    63aa:	ce 01       	movw	r24, r28
    63ac:	01 96       	adiw	r24, 0x01	; 1
    63ae:	0e 94 e9 40 	call	0x81d2	; 0x81d2 <strcmp>
    63b2:	00 97       	sbiw	r24, 0x00	; 0
    63b4:	49 f4       	brne	.+18     	; 0x63c8 <_Z7processPcc+0x2e0>
				model.setDeclination(atof(val));
    63b6:	c6 01       	movw	r24, r12
    63b8:	0e 94 5e 40 	call	0x80bc	; 0x80bc <atof>
    63bc:	ab 01       	movw	r20, r22
    63be:	bc 01       	movw	r22, r24
    63c0:	86 e5       	ldi	r24, 0x56	; 86
    63c2:	9f e0       	ldi	r25, 0x0F	; 15
    63c4:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <_ZN14FreeBoardModel14setDeclinationEf>
			}
			if (strcmp(key, WDT) == 0) {
    63c8:	64 e7       	ldi	r22, 0x74	; 116
    63ca:	73 e0       	ldi	r23, 0x03	; 3
    63cc:	ce 01       	movw	r24, r28
    63ce:	01 96       	adiw	r24, 0x01	; 1
    63d0:	0e 94 e9 40 	call	0x81d2	; 0x81d2 <strcmp>
    63d4:	00 97       	sbiw	r24, 0x00	; 0
    63d6:	41 f4       	brne	.+16     	; 0x63e8 <_Z7processPcc+0x300>
				model.setWindTrueDir(atoi(val));
    63d8:	c6 01       	movw	r24, r12
    63da:	0e 94 62 40 	call	0x80c4	; 0x80c4 <atoi>
    63de:	bc 01       	movw	r22, r24
    63e0:	86 e5       	ldi	r24, 0x56	; 86
    63e2:	9f e0       	ldi	r25, 0x0F	; 15
    63e4:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <_ZN14FreeBoardModel14setWindTrueDirEi>
    63e8:	38 2d       	mov	r19, r8
    63ea:	29 2d       	mov	r18, r9
    63ec:	83 2f       	mov	r24, r19
    63ee:	92 2f       	mov	r25, r18
    63f0:	0f b6       	in	r0, 0x3f	; 63
    63f2:	f8 94       	cli
    63f4:	9e bf       	out	0x3e, r25	; 62
    63f6:	0f be       	out	0x3f, r0	; 63
    63f8:	8d bf       	out	0x3d, r24	; 61
			}

		}
		//next token
		cmd = strtok(NULL, ",");
    63fa:	6d e5       	ldi	r22, 0x5D	; 93
    63fc:	72 e0       	ldi	r23, 0x02	; 2
    63fe:	80 e0       	ldi	r24, 0x00	; 0
    6400:	90 e0       	ldi	r25, 0x00	; 0
    6402:	0e 94 bf 40 	call	0x817e	; 0x817e <strtok>
    6406:	7c 01       	movw	r14, r24

void process(char * s, char parser) {
	//if (DEBUG) Serial.print("Process str:");
	//if (DEBUG) Serial.println(s);
	char *cmd = strtok(s, ",");
	while (cmd != NULL && strlen(cmd) > 3) {
    6408:	00 97       	sbiw	r24, 0x00	; 0
    640a:	91 f0       	breq	.+36     	; 0x6430 <_Z7processPcc+0x348>
    640c:	dc 01       	movw	r26, r24
    640e:	0d 90       	ld	r0, X+
    6410:	00 20       	and	r0, r0
    6412:	e9 f7       	brne	.-6      	; 0x640e <_Z7processPcc+0x326>
    6414:	8d 01       	movw	r16, r26
    6416:	01 50       	subi	r16, 0x01	; 1
    6418:	11 09       	sbc	r17, r1
    641a:	08 1b       	sub	r16, r24
    641c:	19 0b       	sbc	r17, r25
    641e:	04 30       	cpi	r16, 0x04	; 4
    6420:	11 05       	cpc	r17, r1
    6422:	30 f0       	brcs	.+12     	; 0x6430 <_Z7processPcc+0x348>
		//if (DEBUG) Serial.println(cmd);

		char key[5];
		int l = strlen(cmd);

		if (cmd[0] == '#') {
    6424:	fc 01       	movw	r30, r24
    6426:	80 81       	ld	r24, Z
    6428:	83 32       	cpi	r24, 0x23	; 35
    642a:	09 f0       	breq	.+2      	; 0x642e <_Z7processPcc+0x346>
    642c:	7f cf       	rjmp	.-258    	; 0x632c <_Z7processPcc+0x244>
    642e:	76 ce       	rjmp	.-788    	; 0x611c <_Z7processPcc+0x34>
		}
		//next token
		cmd = strtok(NULL, ",");
	}
	//if (DEBUG) Serial.println("Process str exit");
}
    6430:	0f b6       	in	r0, 0x3f	; 63
    6432:	f8 94       	cli
    6434:	7e be       	out	0x3e, r7	; 62
    6436:	0f be       	out	0x3f, r0	; 63
    6438:	6d be       	out	0x3d, r6	; 61
    643a:	0f 90       	pop	r0
    643c:	0f 90       	pop	r0
    643e:	0f 90       	pop	r0
    6440:	0f 90       	pop	r0
    6442:	0f 90       	pop	r0
    6444:	df 91       	pop	r29
    6446:	cf 91       	pop	r28
    6448:	1f 91       	pop	r17
    644a:	0f 91       	pop	r16
    644c:	ff 90       	pop	r15
    644e:	ef 90       	pop	r14
    6450:	df 90       	pop	r13
    6452:	cf 90       	pop	r12
    6454:	bf 90       	pop	r11
    6456:	af 90       	pop	r10
    6458:	9f 90       	pop	r9
    645a:	8f 90       	pop	r8
    645c:	7f 90       	pop	r7
    645e:	6f 90       	pop	r6
    6460:	5f 90       	pop	r5
    6462:	4f 90       	pop	r4
    6464:	08 95       	ret

00006466 <_Z11serialEventv>:
 SerialEvent occurs whenever a new data comes in the
 hardware serial RX.  This routine is run between each
 time loop() runs, so using delay inside loop can delay
 response.  Multiple bytes of data may be available.
 */
void serialEvent() {
    6466:	cf 92       	push	r12
    6468:	df 92       	push	r13
    646a:	ef 92       	push	r14
    646c:	ff 92       	push	r15
    646e:	0f 93       	push	r16
    6470:	1f 93       	push	r17
    6472:	cf 93       	push	r28
    6474:	df 93       	push	r29
    6476:	cd b7       	in	r28, 0x3d	; 61
    6478:	de b7       	in	r29, 0x3e	; 62
			inputSerial = "";
			//inputSerialComplete = false;
		}

	}
}
    647a:	ed b6       	in	r14, 0x3d	; 61
    647c:	fe b6       	in	r15, 0x3e	; 62
 hardware serial RX.  This routine is run between each
 time loop() runs, so using delay inside loop can delay
 response.  Multiple bytes of data may be available.
 */
void serialEvent() {
	while (Serial.available()) {
    647e:	39 c0       	rjmp	.+114    	; 0x64f2 <_Z11serialEventv+0x8c>
		// get the new byte:
		char inChar = (char) Serial.read();
    6480:	80 e6       	ldi	r24, 0x60	; 96
    6482:	95 e0       	ldi	r25, 0x05	; 5
    6484:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN14HardwareSerial4readEv>
    6488:	18 2f       	mov	r17, r24
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    648a:	68 2f       	mov	r22, r24
    648c:	85 ef       	ldi	r24, 0xF5	; 245
    648e:	98 e0       	ldi	r25, 0x08	; 8
    6490:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN6String6concatEc>
		// add it to the inputString:
		inputSerial += inChar;
		if (inChar == '\n') {
    6494:	1a 30       	cpi	r17, 0x0A	; 10
    6496:	69 f5       	brne	.+90     	; 0x64f2 <_Z11serialEventv+0x8c>
    6498:	cd b6       	in	r12, 0x3d	; 61
    649a:	de b6       	in	r13, 0x3e	; 62
			//inputSerialComplete = true;
			char carray[inputSerial.length() + 1]; //determine size of the array
    649c:	40 91 f9 08 	lds	r20, 0x08F9
    64a0:	50 91 fa 08 	lds	r21, 0x08FA
    64a4:	4f 5f       	subi	r20, 0xFF	; 255
    64a6:	5f 4f       	sbci	r21, 0xFF	; 255
    64a8:	8d b7       	in	r24, 0x3d	; 61
    64aa:	9e b7       	in	r25, 0x3e	; 62
    64ac:	84 1b       	sub	r24, r20
    64ae:	95 0b       	sbc	r25, r21
    64b0:	0f b6       	in	r0, 0x3f	; 63
    64b2:	f8 94       	cli
    64b4:	9e bf       	out	0x3e, r25	; 62
    64b6:	0f be       	out	0x3f, r0	; 63
    64b8:	8d bf       	out	0x3d, r24	; 61
    64ba:	0d b7       	in	r16, 0x3d	; 61
    64bc:	1e b7       	in	r17, 0x3e	; 62
    64be:	0f 5f       	subi	r16, 0xFF	; 255
    64c0:	1f 4f       	sbci	r17, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    64c2:	20 e0       	ldi	r18, 0x00	; 0
    64c4:	30 e0       	ldi	r19, 0x00	; 0
    64c6:	b8 01       	movw	r22, r16
    64c8:	85 ef       	ldi	r24, 0xF5	; 245
    64ca:	98 e0       	ldi	r25, 0x08	; 8
    64cc:	0e 94 8b 10 	call	0x2116	; 0x2116 <_ZNK6String8getBytesEPhjj>
			inputSerial.toCharArray(carray, sizeof(carray));
			process(carray, ',');
    64d0:	6c e2       	ldi	r22, 0x2C	; 44
    64d2:	c8 01       	movw	r24, r16
    64d4:	0e 94 74 30 	call	0x60e8	; 0x60e8 <_Z7processPcc>
			inputSerial = "";
    64d8:	68 e4       	ldi	r22, 0x48	; 72
    64da:	74 e0       	ldi	r23, 0x04	; 4
    64dc:	85 ef       	ldi	r24, 0xF5	; 245
    64de:	98 e0       	ldi	r25, 0x08	; 8
    64e0:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6StringaSEPKc>
    64e4:	8c 2d       	mov	r24, r12
    64e6:	9d 2d       	mov	r25, r13
    64e8:	0f b6       	in	r0, 0x3f	; 63
    64ea:	f8 94       	cli
    64ec:	9e bf       	out	0x3e, r25	; 62
    64ee:	0f be       	out	0x3f, r0	; 63
    64f0:	8d bf       	out	0x3d, r24	; 61
 hardware serial RX.  This routine is run between each
 time loop() runs, so using delay inside loop can delay
 response.  Multiple bytes of data may be available.
 */
void serialEvent() {
	while (Serial.available()) {
    64f2:	80 e6       	ldi	r24, 0x60	; 96
    64f4:	95 e0       	ldi	r25, 0x05	; 5
    64f6:	0e 94 80 01 	call	0x300	; 0x300 <_ZN14HardwareSerial9availableEv>
    64fa:	89 2b       	or	r24, r25
    64fc:	09 f6       	brne	.-126    	; 0x6480 <_Z11serialEventv+0x1a>
			inputSerial = "";
			//inputSerialComplete = false;
		}

	}
}
    64fe:	0f b6       	in	r0, 0x3f	; 63
    6500:	f8 94       	cli
    6502:	fe be       	out	0x3e, r15	; 62
    6504:	0f be       	out	0x3f, r0	; 63
    6506:	ed be       	out	0x3d, r14	; 61
    6508:	df 91       	pop	r29
    650a:	cf 91       	pop	r28
    650c:	1f 91       	pop	r17
    650e:	0f 91       	pop	r16
    6510:	ff 90       	pop	r15
    6512:	ef 90       	pop	r14
    6514:	df 90       	pop	r13
    6516:	cf 90       	pop	r12
    6518:	08 95       	ret

0000651a <_GLOBAL__sub_I_execute>:
int inByteSerial3;
char input;
//volatile int intCnt = 0;

//freeboard model
FreeBoardModel model;
    651a:	86 e5       	ldi	r24, 0x56	; 86
    651c:	9f e0       	ldi	r25, 0x0F	; 15
    651e:	0e 94 1e 29 	call	0x523c	; 0x523c <_ZN14FreeBoardModelC1Ev>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    6522:	10 92 18 0f 	sts	0x0F18, r1
    6526:	10 92 17 0f 	sts	0x0F17, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    652a:	88 ee       	ldi	r24, 0xE8	; 232
    652c:	93 e0       	ldi	r25, 0x03	; 3
    652e:	a0 e0       	ldi	r26, 0x00	; 0
    6530:	b0 e0       	ldi	r27, 0x00	; 0
    6532:	80 93 19 0f 	sts	0x0F19, r24
    6536:	90 93 1a 0f 	sts	0x0F1A, r25
    653a:	a0 93 1b 0f 	sts	0x0F1B, r26
    653e:	b0 93 1c 0f 	sts	0x0F1C, r27
#include "FreeBoardConstants.h"
#include "FreeBoardModel.h"

class NmeaSerial: AltSoftSerial {
public:
	NmeaSerial(FreeBoardModel* model):model(model){};
    6542:	8c ec       	ldi	r24, 0xCC	; 204
    6544:	94 e0       	ldi	r25, 0x04	; 4
    6546:	90 93 16 0f 	sts	0x0F16, r25
    654a:	80 93 15 0f 	sts	0x0F15, r24
    654e:	86 e5       	ldi	r24, 0x56	; 86
    6550:	9f e0       	ldi	r25, 0x0F	; 15
    6552:	90 93 22 0f 	sts	0x0F22, r25
    6556:	80 93 21 0f 	sts	0x0F21, r24
// See http://forums.parallax.com/forums/default.aspx?f=19&m=50925
// See http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=63469&start=0
NmeaSerial nmea(&model);

//NMEA ports
NMEA gpsSource(ALL);
    655a:	60 e0       	ldi	r22, 0x00	; 0
    655c:	70 e0       	ldi	r23, 0x00	; 0
    655e:	8c ea       	ldi	r24, 0xAC	; 172
    6560:	9d e0       	ldi	r25, 0x0D	; 13
    6562:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <_ZN4NMEAC1Ei>
NMEA talker0(ALL);
    6566:	60 e0       	ldi	r22, 0x00	; 0
    6568:	70 e0       	ldi	r23, 0x00	; 0
    656a:	83 e4       	ldi	r24, 0x43	; 67
    656c:	9c e0       	ldi	r25, 0x0C	; 12
    656e:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <_ZN4NMEAC1Ei>
NMEA talker2(ALL);
    6572:	60 e0       	ldi	r22, 0x00	; 0
    6574:	70 e0       	ldi	r23, 0x00	; 0
    6576:	8a ed       	ldi	r24, 0xDA	; 218
    6578:	9a e0       	ldi	r25, 0x0A	; 10
    657a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <_ZN4NMEAC1Ei>
NMEA talker3(ALL);
    657e:	60 e0       	ldi	r22, 0x00	; 0
    6580:	70 e0       	ldi	r23, 0x00	; 0
    6582:	81 e7       	ldi	r24, 0x71	; 113
    6584:	99 e0       	ldi	r25, 0x09	; 9
    6586:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <_ZN4NMEAC1Ei>

//alarm
Alarm alarm(&model);
    658a:	66 e5       	ldi	r22, 0x56	; 86
    658c:	7f e0       	ldi	r23, 0x0F	; 15
    658e:	8c e6       	ldi	r24, 0x6C	; 108
    6590:	99 e0       	ldi	r25, 0x09	; 9
    6592:	0e 94 0b 24 	call	0x4816	; 0x4816 <_ZN5AlarmC1EP14FreeBoardModel>

//wind
Wind wind(&model);
    6596:	66 e5       	ldi	r22, 0x56	; 86
    6598:	7f e0       	ldi	r23, 0x0F	; 15
    659a:	8a e6       	ldi	r24, 0x6A	; 106
    659c:	99 e0       	ldi	r25, 0x09	; 9
    659e:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <_ZN4WindC1EP14FreeBoardModel>

//Gps
Gps gps(&gpsSource, &model);
    65a2:	46 e5       	ldi	r20, 0x56	; 86
    65a4:	5f e0       	ldi	r21, 0x0F	; 15
    65a6:	6c ea       	ldi	r22, 0xAC	; 172
    65a8:	7d e0       	ldi	r23, 0x0D	; 13
    65aa:	84 e6       	ldi	r24, 0x64	; 100
    65ac:	99 e0       	ldi	r25, 0x09	; 9
    65ae:	0e 94 18 33 	call	0x6630	; 0x6630 <_ZN3GpsC1EP4NMEAP14FreeBoardModel>

//Autopilot
Autopilot autopilot(&model);
    65b2:	66 e5       	ldi	r22, 0x56	; 86
    65b4:	7f e0       	ldi	r23, 0x0F	; 15
    65b6:	8a e1       	ldi	r24, 0x1A	; 26
    65b8:	99 e0       	ldi	r25, 0x09	; 9
    65ba:	0e 94 6f 27 	call	0x4ede	; 0x4ede <_ZN9AutopilotC1EP14FreeBoardModel>

//Anchor
Anchor anchor(&model);
    65be:	66 e5       	ldi	r22, 0x56	; 86
    65c0:	7f e0       	ldi	r23, 0x0F	; 15
    65c2:	86 e1       	ldi	r24, 0x16	; 22
    65c4:	99 e0       	ldi	r25, 0x09	; 9
    65c6:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <_ZN6AnchorC1EP14FreeBoardModel>

Seatalk seatalk(&Serial2, &model);
    65ca:	46 e5       	ldi	r20, 0x56	; 86
    65cc:	5f e0       	ldi	r21, 0x0F	; 15
    65ce:	6c e1       	ldi	r22, 0x1C	; 28
    65d0:	75 e0       	ldi	r23, 0x05	; 5
    65d2:	8c ef       	ldi	r24, 0xFC	; 252
    65d4:	98 e0       	ldi	r25, 0x08	; 8
    65d6:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_ZN7SeatalkC1EP14HardwareSerialP14FreeBoardModel>

String inputSerial = ""; // a string to hold incoming data
    65da:	68 e4       	ldi	r22, 0x48	; 72
    65dc:	74 e0       	ldi	r23, 0x04	; 4
    65de:	85 ef       	ldi	r24, 0xF5	; 245
    65e0:	98 e0       	ldi	r25, 0x08	; 8
    65e2:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <_ZN6StringC1EPKc>

000065e6 <_GLOBAL__sub_D_execute>:
    65e6:	85 ef       	ldi	r24, 0xF5	; 245
    65e8:	98 e0       	ldi	r25, 0x08	; 8
    65ea:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6StringD1Ev>

//Autopilot
Autopilot autopilot(&model);

//Anchor
Anchor anchor(&model);
    65ee:	86 e1       	ldi	r24, 0x16	; 22
    65f0:	99 e0       	ldi	r25, 0x09	; 9
    65f2:	0e 94 63 24 	call	0x48c6	; 0x48c6 <_ZN6AnchorD1Ev>

//Gps
Gps gps(&gpsSource, &model);

//Autopilot
Autopilot autopilot(&model);
    65f6:	8a e1       	ldi	r24, 0x1A	; 26
    65f8:	99 e0       	ldi	r25, 0x09	; 9
    65fa:	0e 94 14 28 	call	0x5028	; 0x5028 <_ZN9AutopilotD1Ev>

//wind
Wind wind(&model);

//Gps
Gps gps(&gpsSource, &model);
    65fe:	84 e6       	ldi	r24, 0x64	; 100
    6600:	99 e0       	ldi	r25, 0x09	; 9
    6602:	0e 94 0b 33 	call	0x6616	; 0x6616 <_ZN3GpsD1Ev>
NMEA talker0(ALL);
NMEA talker2(ALL);
NMEA talker3(ALL);

//alarm
Alarm alarm(&model);
    6606:	8c e6       	ldi	r24, 0x6C	; 108
    6608:	99 e0       	ldi	r25, 0x09	; 9
    660a:	0e 94 fe 23 	call	0x47fc	; 0x47fc <_ZN5AlarmD1Ev>

//NMEA output - The arduino puts out TTL, NMEA is RS232. They are different V and amps. The +-5V levels may need inverting or you get
// garbage.
// See http://forums.parallax.com/forums/default.aspx?f=19&m=50925
// See http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=63469&start=0
NmeaSerial nmea(&model);
    660e:	85 e1       	ldi	r24, 0x15	; 21
    6610:	9f e0       	ldi	r25, 0x0F	; 15
    6612:	0c 94 dd 35 	jmp	0x6bba	; 0x6bba <_ZN10NmeaSerialD1Ev>

00006616 <_ZN3GpsD1Ev>:
 */
#include "Gps.h"
char gpsBuffer[40];
PString gpsStr(gpsBuffer, sizeof(gpsBuffer));

Gps::~Gps() {
    6616:	24 ea       	ldi	r18, 0xA4	; 164
    6618:	34 e0       	ldi	r19, 0x04	; 4
    661a:	fc 01       	movw	r30, r24
    661c:	31 83       	std	Z+1, r19	; 0x01
    661e:	20 83       	st	Z, r18
    6620:	08 95       	ret

00006622 <_ZN3GpsD0Ev>:
    6622:	24 ea       	ldi	r18, 0xA4	; 164
    6624:	34 e0       	ldi	r19, 0x04	; 4
    6626:	fc 01       	movw	r30, r24
    6628:	31 83       	std	Z+1, r19	; 0x01
    662a:	20 83       	st	Z, r18
}
    662c:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <_ZdlPv>

00006630 <_ZN3GpsC1EP4NMEAP14FreeBoardModel>:
Gps::Gps(NMEA* gpsSource, FreeBoardModel* model) {
    6630:	fc 01       	movw	r30, r24
    6632:	84 ea       	ldi	r24, 0xA4	; 164
    6634:	94 e0       	ldi	r25, 0x04	; 4
    6636:	91 83       	std	Z+1, r25	; 0x01
    6638:	80 83       	st	Z, r24

	this->model = model;
    663a:	55 83       	std	Z+5, r21	; 0x05
    663c:	44 83       	std	Z+4, r20	; 0x04
	this->gpsSource = gpsSource;
    663e:	73 83       	std	Z+3, r23	; 0x03
    6640:	62 83       	std	Z+2, r22	; 0x02
    6642:	08 95       	ret

00006644 <_ZN3Gps7testMsgEv>:
	//setupGps();
}

bool Gps::testMsg() {
    6644:	cf 92       	push	r12
    6646:	df 92       	push	r13
    6648:	ef 92       	push	r14
    664a:	ff 92       	push	r15
    664c:	cf 93       	push	r28
    664e:	df 93       	push	r29
	//clear buffer of rubbish
	int x = 0;
	while (x < 100) {
    6650:	c5 e6       	ldi	r28, 0x65	; 101
    6652:	d0 e0       	ldi	r29, 0x00	; 0
    6654:	0a c0       	rjmp	.+20     	; 0x666a <_ZN3Gps7testMsgEv+0x26>
		if (Serial1.available()) {
    6656:	8e e3       	ldi	r24, 0x3E	; 62
    6658:	95 e0       	ldi	r25, 0x05	; 5
    665a:	0e 94 80 01 	call	0x300	; 0x300 <_ZN14HardwareSerial9availableEv>
    665e:	89 2b       	or	r24, r25
    6660:	d1 f3       	breq	.-12     	; 0x6656 <_ZN3Gps7testMsgEv+0x12>
			Serial1.read();
    6662:	8e e3       	ldi	r24, 0x3E	; 62
    6664:	95 e0       	ldi	r25, 0x05	; 5
    6666:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN14HardwareSerial4readEv>
    666a:	21 97       	sbiw	r28, 0x01	; 1
}

bool Gps::testMsg() {
	//clear buffer of rubbish
	int x = 0;
	while (x < 100) {
    666c:	a1 f7       	brne	.-24     	; 0x6656 <_ZN3Gps7testMsgEv+0x12>
			Serial1.read();
			x++;
		}
	}
	//5 secs
	unsigned long now = millis();
    666e:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <millis>
    6672:	6b 01       	movw	r12, r22
    6674:	7c 01       	movw	r14, r24
	bool valid = true;
    6676:	c1 e0       	ldi	r28, 0x01	; 1
	while (now + 5000 > millis() && valid) {
    6678:	88 e8       	ldi	r24, 0x88	; 136
    667a:	c8 0e       	add	r12, r24
    667c:	83 e1       	ldi	r24, 0x13	; 19
    667e:	d8 1e       	adc	r13, r24
    6680:	e1 1c       	adc	r14, r1
    6682:	f1 1c       	adc	r15, r1
    6684:	09 c0       	rjmp	.+18     	; 0x6698 <_ZN3Gps7testMsgEv+0x54>
		if (Serial1.available()) {
			int c = Serial1.read();
    6686:	8e e3       	ldi	r24, 0x3E	; 62
    6688:	95 e0       	ldi	r25, 0x05	; 5
    668a:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN14HardwareSerial4readEv>
			//Serial.print(c);
			//Serial.print(",");
			//not Cntrl-n or printable so invalid
			if (c > 128) valid = false;
    668e:	c1 e0       	ldi	r28, 0x01	; 1
    6690:	81 38       	cpi	r24, 0x81	; 129
    6692:	91 05       	cpc	r25, r1
    6694:	0c f0       	brlt	.+2      	; 0x6698 <_ZN3Gps7testMsgEv+0x54>
    6696:	c0 e0       	ldi	r28, 0x00	; 0
		}
	}
	//5 secs
	unsigned long now = millis();
	bool valid = true;
	while (now + 5000 > millis() && valid) {
    6698:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <millis>
    669c:	6c 15       	cp	r22, r12
    669e:	7d 05       	cpc	r23, r13
    66a0:	8e 05       	cpc	r24, r14
    66a2:	9f 05       	cpc	r25, r15
    66a4:	18 f4       	brcc	.+6      	; 0x66ac <_ZN3Gps7testMsgEv+0x68>
    66a6:	c1 11       	cpse	r28, r1
    66a8:	12 c0       	rjmp	.+36     	; 0x66ce <_ZN3Gps7testMsgEv+0x8a>
    66aa:	09 c0       	rjmp	.+18     	; 0x66be <_ZN3Gps7testMsgEv+0x7a>
			//not Cntrl-n or printable so invalid
			if (c > 128) valid = false;
		}
	}
	if (DEBUG) {
		if (valid)
    66ac:	cc 23       	and	r28, r28
    66ae:	39 f0       	breq	.+14     	; 0x66be <_ZN3Gps7testMsgEv+0x7a>
			Serial.println("OK");
    66b0:	68 e7       	ldi	r22, 0x78	; 120
    66b2:	73 e0       	ldi	r23, 0x03	; 3
    66b4:	80 e6       	ldi	r24, 0x60	; 96
    66b6:	95 e0       	ldi	r25, 0x05	; 5
    66b8:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
    66bc:	0f c0       	rjmp	.+30     	; 0x66dc <_ZN3Gps7testMsgEv+0x98>
		else
			Serial.println("FAIL");
    66be:	6b e7       	ldi	r22, 0x7B	; 123
    66c0:	73 e0       	ldi	r23, 0x03	; 3
    66c2:	80 e6       	ldi	r24, 0x60	; 96
    66c4:	95 e0       	ldi	r25, 0x05	; 5
    66c6:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
    66ca:	c0 e0       	ldi	r28, 0x00	; 0
    66cc:	07 c0       	rjmp	.+14     	; 0x66dc <_ZN3Gps7testMsgEv+0x98>
	}
	//5 secs
	unsigned long now = millis();
	bool valid = true;
	while (now + 5000 > millis() && valid) {
		if (Serial1.available()) {
    66ce:	8e e3       	ldi	r24, 0x3E	; 62
    66d0:	95 e0       	ldi	r25, 0x05	; 5
    66d2:	0e 94 80 01 	call	0x300	; 0x300 <_ZN14HardwareSerial9availableEv>
    66d6:	89 2b       	or	r24, r25
    66d8:	f9 f2       	breq	.-66     	; 0x6698 <_ZN3Gps7testMsgEv+0x54>
    66da:	d5 cf       	rjmp	.-86     	; 0x6686 <_ZN3Gps7testMsgEv+0x42>
			Serial.println("OK");
		else
			Serial.println("FAIL");
	}
	return valid;
}
    66dc:	8c 2f       	mov	r24, r28
    66de:	df 91       	pop	r29
    66e0:	cf 91       	pop	r28
    66e2:	ff 90       	pop	r15
    66e4:	ef 90       	pop	r14
    66e6:	df 90       	pop	r13
    66e8:	cf 90       	pop	r12
    66ea:	08 95       	ret

000066ec <_ZN3Gps8autoBaudEv>:


int Gps::autoBaud() {
    66ec:	cf 93       	push	r28
    66ee:	df 93       	push	r29
    66f0:	ec 01       	movw	r28, r24
	//try the various baud rates until one makes sense
	//should only output simple NMEA [$A-Z0-9*\r\c]

	if (DEBUG) Serial.println("   try autobaud 4800..");
    66f2:	60 e8       	ldi	r22, 0x80	; 128
    66f4:	73 e0       	ldi	r23, 0x03	; 3
    66f6:	80 e6       	ldi	r24, 0x60	; 96
    66f8:	95 e0       	ldi	r25, 0x05	; 5
    66fa:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
	Serial1.begin(4800);
    66fe:	40 ec       	ldi	r20, 0xC0	; 192
    6700:	52 e1       	ldi	r21, 0x12	; 18
    6702:	60 e0       	ldi	r22, 0x00	; 0
    6704:	70 e0       	ldi	r23, 0x00	; 0
    6706:	8e e3       	ldi	r24, 0x3E	; 62
    6708:	95 e0       	ldi	r25, 0x05	; 5
    670a:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 4800;
    670e:	ce 01       	movw	r24, r28
    6710:	0e 94 22 33 	call	0x6644	; 0x6644 <_ZN3Gps7testMsgEv>
    6714:	81 11       	cpse	r24, r1
    6716:	66 c0       	rjmp	.+204    	; 0x67e4 <_ZN3Gps8autoBaudEv+0xf8>
	Serial1.end();
    6718:	8e e3       	ldi	r24, 0x3E	; 62
    671a:	95 e0       	ldi	r25, 0x05	; 5
    671c:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 9600..");
    6720:	67 e9       	ldi	r22, 0x97	; 151
    6722:	73 e0       	ldi	r23, 0x03	; 3
    6724:	80 e6       	ldi	r24, 0x60	; 96
    6726:	95 e0       	ldi	r25, 0x05	; 5
    6728:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
	Serial1.begin(9600);
    672c:	40 e8       	ldi	r20, 0x80	; 128
    672e:	55 e2       	ldi	r21, 0x25	; 37
    6730:	60 e0       	ldi	r22, 0x00	; 0
    6732:	70 e0       	ldi	r23, 0x00	; 0
    6734:	8e e3       	ldi	r24, 0x3E	; 62
    6736:	95 e0       	ldi	r25, 0x05	; 5
    6738:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 9600;
    673c:	ce 01       	movw	r24, r28
    673e:	0e 94 22 33 	call	0x6644	; 0x6644 <_ZN3Gps7testMsgEv>
    6742:	81 11       	cpse	r24, r1
    6744:	52 c0       	rjmp	.+164    	; 0x67ea <_ZN3Gps8autoBaudEv+0xfe>
	Serial1.end();
    6746:	8e e3       	ldi	r24, 0x3E	; 62
    6748:	95 e0       	ldi	r25, 0x05	; 5
    674a:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 19200..");
    674e:	6e ea       	ldi	r22, 0xAE	; 174
    6750:	73 e0       	ldi	r23, 0x03	; 3
    6752:	80 e6       	ldi	r24, 0x60	; 96
    6754:	95 e0       	ldi	r25, 0x05	; 5
    6756:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
	Serial1.begin(19200);
    675a:	40 e0       	ldi	r20, 0x00	; 0
    675c:	5b e4       	ldi	r21, 0x4B	; 75
    675e:	60 e0       	ldi	r22, 0x00	; 0
    6760:	70 e0       	ldi	r23, 0x00	; 0
    6762:	8e e3       	ldi	r24, 0x3E	; 62
    6764:	95 e0       	ldi	r25, 0x05	; 5
    6766:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 19200;
    676a:	ce 01       	movw	r24, r28
    676c:	0e 94 22 33 	call	0x6644	; 0x6644 <_ZN3Gps7testMsgEv>
    6770:	81 11       	cpse	r24, r1
    6772:	3e c0       	rjmp	.+124    	; 0x67f0 <_ZN3Gps8autoBaudEv+0x104>
	Serial1.end();
    6774:	8e e3       	ldi	r24, 0x3E	; 62
    6776:	95 e0       	ldi	r25, 0x05	; 5
    6778:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 38400..");
    677c:	66 ec       	ldi	r22, 0xC6	; 198
    677e:	73 e0       	ldi	r23, 0x03	; 3
    6780:	80 e6       	ldi	r24, 0x60	; 96
    6782:	95 e0       	ldi	r25, 0x05	; 5
    6784:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
	Serial1.begin(38400);
    6788:	40 e0       	ldi	r20, 0x00	; 0
    678a:	56 e9       	ldi	r21, 0x96	; 150
    678c:	60 e0       	ldi	r22, 0x00	; 0
    678e:	70 e0       	ldi	r23, 0x00	; 0
    6790:	8e e3       	ldi	r24, 0x3E	; 62
    6792:	95 e0       	ldi	r25, 0x05	; 5
    6794:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 38400;
    6798:	ce 01       	movw	r24, r28
    679a:	0e 94 22 33 	call	0x6644	; 0x6644 <_ZN3Gps7testMsgEv>
    679e:	81 11       	cpse	r24, r1
    67a0:	2a c0       	rjmp	.+84     	; 0x67f6 <_ZN3Gps8autoBaudEv+0x10a>
	Serial1.end();
    67a2:	8e e3       	ldi	r24, 0x3E	; 62
    67a4:	95 e0       	ldi	r25, 0x05	; 5
    67a6:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 57600..");
    67aa:	6e ed       	ldi	r22, 0xDE	; 222
    67ac:	73 e0       	ldi	r23, 0x03	; 3
    67ae:	80 e6       	ldi	r24, 0x60	; 96
    67b0:	95 e0       	ldi	r25, 0x05	; 5
    67b2:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
	Serial1.begin(57600);
    67b6:	40 e0       	ldi	r20, 0x00	; 0
    67b8:	51 ee       	ldi	r21, 0xE1	; 225
    67ba:	60 e0       	ldi	r22, 0x00	; 0
    67bc:	70 e0       	ldi	r23, 0x00	; 0
    67be:	8e e3       	ldi	r24, 0x3E	; 62
    67c0:	95 e0       	ldi	r25, 0x05	; 5
    67c2:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 57600;
    67c6:	ce 01       	movw	r24, r28
    67c8:	0e 94 22 33 	call	0x6644	; 0x6644 <_ZN3Gps7testMsgEv>
    67cc:	81 11       	cpse	r24, r1
    67ce:	16 c0       	rjmp	.+44     	; 0x67fc <_ZN3Gps8autoBaudEv+0x110>
	Serial1.end();
    67d0:	8e e3       	ldi	r24, 0x3E	; 62
    67d2:	95 e0       	ldi	r25, 0x05	; 5
    67d4:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   default to 4800..");
    67d8:	66 ef       	ldi	r22, 0xF6	; 246
    67da:	73 e0       	ldi	r23, 0x03	; 3
    67dc:	80 e6       	ldi	r24, 0x60	; 96
    67de:	95 e0       	ldi	r25, 0x05	; 5
    67e0:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
	//try the various baud rates until one makes sense
	//should only output simple NMEA [$A-Z0-9*\r\c]

	if (DEBUG) Serial.println("   try autobaud 4800..");
	Serial1.begin(4800);
	if (testMsg()) return 4800;
    67e4:	20 ec       	ldi	r18, 0xC0	; 192
    67e6:	32 e1       	ldi	r19, 0x12	; 18
    67e8:	0b c0       	rjmp	.+22     	; 0x6800 <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 9600..");
	Serial1.begin(9600);
	if (testMsg()) return 9600;
    67ea:	20 e8       	ldi	r18, 0x80	; 128
    67ec:	35 e2       	ldi	r19, 0x25	; 37
    67ee:	08 c0       	rjmp	.+16     	; 0x6800 <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 19200..");
	Serial1.begin(19200);
	if (testMsg()) return 19200;
    67f0:	20 e0       	ldi	r18, 0x00	; 0
    67f2:	3b e4       	ldi	r19, 0x4B	; 75
    67f4:	05 c0       	rjmp	.+10     	; 0x6800 <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 38400..");
	Serial1.begin(38400);
	if (testMsg()) return 38400;
    67f6:	20 e0       	ldi	r18, 0x00	; 0
    67f8:	36 e9       	ldi	r19, 0x96	; 150
    67fa:	02 c0       	rjmp	.+4      	; 0x6800 <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 57600..");
	Serial1.begin(57600);
	if (testMsg()) return 57600;
    67fc:	20 e0       	ldi	r18, 0x00	; 0
    67fe:	31 ee       	ldi	r19, 0xE1	; 225
	Serial1.end();
	if (DEBUG) Serial.println("   default to 4800..");
	return 4800;
}
    6800:	c9 01       	movw	r24, r18
    6802:	df 91       	pop	r29
    6804:	cf 91       	pop	r28
    6806:	08 95       	ret

00006808 <_ZN3Gps11getMetersToEffff>:
	Serial1.flush();
	Serial1.end();
	Serial1.begin(38400);
}

float Gps::getMetersTo(float targetLat, float targetLon, float currentLat, float currentLon) {
    6808:	2f 92       	push	r2
    680a:	3f 92       	push	r3
    680c:	4f 92       	push	r4
    680e:	5f 92       	push	r5
    6810:	6f 92       	push	r6
    6812:	7f 92       	push	r7
    6814:	8f 92       	push	r8
    6816:	9f 92       	push	r9
    6818:	af 92       	push	r10
    681a:	bf 92       	push	r11
    681c:	cf 92       	push	r12
    681e:	df 92       	push	r13
    6820:	ef 92       	push	r14
    6822:	ff 92       	push	r15
    6824:	0f 93       	push	r16
    6826:	1f 93       	push	r17
    6828:	cf 93       	push	r28
    682a:	df 93       	push	r29
    682c:	cd b7       	in	r28, 0x3d	; 61
    682e:	de b7       	in	r29, 0x3e	; 62
    6830:	60 97       	sbiw	r28, 0x10	; 16
    6832:	0f b6       	in	r0, 0x3f	; 63
    6834:	f8 94       	cli
    6836:	de bf       	out	0x3e, r29	; 62
    6838:	0f be       	out	0x3f, r0	; 63
    683a:	cd bf       	out	0x3d, r28	; 61
    683c:	69 83       	std	Y+1, r22	; 0x01
    683e:	7a 83       	std	Y+2, r23	; 0x02
    6840:	8b 83       	std	Y+3, r24	; 0x03
    6842:	9c 83       	std	Y+4, r25	; 0x04
    6844:	ca 01       	movw	r24, r20
    6846:	b9 01       	movw	r22, r18
    6848:	a6 01       	movw	r20, r12
    684a:	95 01       	movw	r18, r10
	// returns distance in meters between two positions, both specified
	// as signed decimal-degrees latitude and longitude. Uses great-circle
	// distance computation for hypothised sphere of radius 6372795 meters.
	// Because Earth is no exact sphere, rounding errors may be upto 0.5%.
	float delta = radians(targetLon - currentLon);
    684c:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    6850:	25 e3       	ldi	r18, 0x35	; 53
    6852:	3a ef       	ldi	r19, 0xFA	; 250
    6854:	4e e8       	ldi	r20, 0x8E	; 142
    6856:	5c e3       	ldi	r21, 0x3C	; 60
    6858:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    685c:	6b 01       	movw	r12, r22
    685e:	5c 01       	movw	r10, r24
	float sdlong = sin(delta);
    6860:	7d 2d       	mov	r23, r13
    6862:	9b 2d       	mov	r25, r11
    6864:	0e 94 6a 3f 	call	0x7ed4	; 0x7ed4 <sin>
    6868:	2b 01       	movw	r4, r22
    686a:	3c 01       	movw	r6, r24
	float cdlong = cos(delta);
    686c:	6c 2d       	mov	r22, r12
    686e:	7d 2d       	mov	r23, r13
    6870:	8a 2d       	mov	r24, r10
    6872:	9b 2d       	mov	r25, r11
    6874:	0e 94 fd 3c 	call	0x79fa	; 0x79fa <cos>
    6878:	6d 83       	std	Y+5, r22	; 0x05
    687a:	7e 83       	std	Y+6, r23	; 0x06
    687c:	8f 83       	std	Y+7, r24	; 0x07
    687e:	98 87       	std	Y+8, r25	; 0x08
	targetLat = radians(targetLat);
    6880:	25 e3       	ldi	r18, 0x35	; 53
    6882:	3a ef       	ldi	r19, 0xFA	; 250
    6884:	4e e8       	ldi	r20, 0x8E	; 142
    6886:	5c e3       	ldi	r21, 0x3C	; 60
    6888:	69 81       	ldd	r22, Y+1	; 0x01
    688a:	7a 81       	ldd	r23, Y+2	; 0x02
    688c:	8b 81       	ldd	r24, Y+3	; 0x03
    688e:	9c 81       	ldd	r25, Y+4	; 0x04
    6890:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    6894:	6b 01       	movw	r12, r22
    6896:	89 83       	std	Y+1, r24	; 0x01
    6898:	99 87       	std	Y+9, r25	; 0x09
	currentLat = radians(currentLat);
    689a:	25 e3       	ldi	r18, 0x35	; 53
    689c:	3a ef       	ldi	r19, 0xFA	; 250
    689e:	4e e8       	ldi	r20, 0x8E	; 142
    68a0:	5c e3       	ldi	r21, 0x3C	; 60
    68a2:	c8 01       	movw	r24, r16
    68a4:	b7 01       	movw	r22, r14
    68a6:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    68aa:	16 2f       	mov	r17, r22
    68ac:	07 2f       	mov	r16, r23
    68ae:	38 2e       	mov	r3, r24
    68b0:	29 2e       	mov	r2, r25
	float slat1 = sin(targetLat);
    68b2:	39 81       	ldd	r19, Y+1	; 0x01
    68b4:	29 85       	ldd	r18, Y+9	; 0x09
    68b6:	6c 2d       	mov	r22, r12
    68b8:	7d 2d       	mov	r23, r13
    68ba:	83 2f       	mov	r24, r19
    68bc:	92 2f       	mov	r25, r18
    68be:	0e 94 6a 3f 	call	0x7ed4	; 0x7ed4 <sin>
    68c2:	4b 01       	movw	r8, r22
    68c4:	5c 01       	movw	r10, r24
	float clat1 = cos(targetLat);
    68c6:	39 81       	ldd	r19, Y+1	; 0x01
    68c8:	29 85       	ldd	r18, Y+9	; 0x09
    68ca:	6c 2d       	mov	r22, r12
    68cc:	7d 2d       	mov	r23, r13
    68ce:	83 2f       	mov	r24, r19
    68d0:	92 2f       	mov	r25, r18
    68d2:	0e 94 fd 3c 	call	0x79fa	; 0x79fa <cos>
    68d6:	69 83       	std	Y+1, r22	; 0x01
    68d8:	7a 83       	std	Y+2, r23	; 0x02
    68da:	8b 83       	std	Y+3, r24	; 0x03
    68dc:	9c 83       	std	Y+4, r25	; 0x04
	float slat2 = sin(currentLat);
    68de:	a8 01       	movw	r20, r16
    68e0:	91 01       	movw	r18, r2
    68e2:	65 2f       	mov	r22, r21
    68e4:	74 2f       	mov	r23, r20
    68e6:	83 2f       	mov	r24, r19
    68e8:	92 2f       	mov	r25, r18
    68ea:	0e 94 6a 3f 	call	0x7ed4	; 0x7ed4 <sin>
    68ee:	69 87       	std	Y+9, r22	; 0x09
    68f0:	7a 87       	std	Y+10, r23	; 0x0a
    68f2:	8b 87       	std	Y+11, r24	; 0x0b
    68f4:	9c 87       	std	Y+12, r25	; 0x0c
	float clat2 = cos(currentLat);
    68f6:	a8 01       	movw	r20, r16
    68f8:	91 01       	movw	r18, r2
    68fa:	65 2f       	mov	r22, r21
    68fc:	74 2f       	mov	r23, r20
    68fe:	83 2f       	mov	r24, r19
    6900:	92 2f       	mov	r25, r18
    6902:	0e 94 fd 3c 	call	0x79fa	; 0x79fa <cos>
    6906:	6b 01       	movw	r12, r22
    6908:	7c 01       	movw	r14, r24
	delta = (clat1 * slat2) - (slat1 * clat2 * cdlong);
    690a:	29 85       	ldd	r18, Y+9	; 0x09
    690c:	3a 85       	ldd	r19, Y+10	; 0x0a
    690e:	4b 85       	ldd	r20, Y+11	; 0x0b
    6910:	5c 85       	ldd	r21, Y+12	; 0x0c
    6912:	69 81       	ldd	r22, Y+1	; 0x01
    6914:	7a 81       	ldd	r23, Y+2	; 0x02
    6916:	8b 81       	ldd	r24, Y+3	; 0x03
    6918:	9c 81       	ldd	r25, Y+4	; 0x04
    691a:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    691e:	6d 87       	std	Y+13, r22	; 0x0d
    6920:	7e 87       	std	Y+14, r23	; 0x0e
    6922:	8f 87       	std	Y+15, r24	; 0x0f
    6924:	98 8b       	std	Y+16, r25	; 0x10
    6926:	a7 01       	movw	r20, r14
    6928:	96 01       	movw	r18, r12
    692a:	c5 01       	movw	r24, r10
    692c:	b4 01       	movw	r22, r8
    692e:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    6932:	2d 81       	ldd	r18, Y+5	; 0x05
    6934:	3e 81       	ldd	r19, Y+6	; 0x06
    6936:	4f 81       	ldd	r20, Y+7	; 0x07
    6938:	58 85       	ldd	r21, Y+8	; 0x08
    693a:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    693e:	9b 01       	movw	r18, r22
    6940:	ac 01       	movw	r20, r24
    6942:	6d 85       	ldd	r22, Y+13	; 0x0d
    6944:	7e 85       	ldd	r23, Y+14	; 0x0e
    6946:	8f 85       	ldd	r24, Y+15	; 0x0f
    6948:	98 89       	ldd	r25, Y+16	; 0x10
    694a:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
	delta = sq(delta);
    694e:	26 2f       	mov	r18, r22
    6950:	37 2f       	mov	r19, r23
    6952:	48 2f       	mov	r20, r24
    6954:	59 2f       	mov	r21, r25
    6956:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    695a:	36 2e       	mov	r3, r22
    695c:	27 2e       	mov	r2, r23
    695e:	18 2f       	mov	r17, r24
    6960:	09 2f       	mov	r16, r25
	delta += sq(clat2 * sdlong);
    6962:	a3 01       	movw	r20, r6
    6964:	92 01       	movw	r18, r4
    6966:	c7 01       	movw	r24, r14
    6968:	b6 01       	movw	r22, r12
    696a:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    696e:	26 2f       	mov	r18, r22
    6970:	37 2f       	mov	r19, r23
    6972:	48 2f       	mov	r20, r24
    6974:	59 2f       	mov	r21, r25
    6976:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    697a:	9b 01       	movw	r18, r22
    697c:	ac 01       	movw	r20, r24
    697e:	d1 01       	movw	r26, r2
    6980:	f8 01       	movw	r30, r16
    6982:	6b 2f       	mov	r22, r27
    6984:	7a 2f       	mov	r23, r26
    6986:	8f 2f       	mov	r24, r31
    6988:	9e 2f       	mov	r25, r30
    698a:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
	delta = sqrt(delta);
    698e:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <sqrt>
    6992:	2b 01       	movw	r4, r22
    6994:	3c 01       	movw	r6, r24
	float denom = (slat1 * slat2) + (clat1 * clat2 * cdlong);
    6996:	29 85       	ldd	r18, Y+9	; 0x09
    6998:	3a 85       	ldd	r19, Y+10	; 0x0a
    699a:	4b 85       	ldd	r20, Y+11	; 0x0b
    699c:	5c 85       	ldd	r21, Y+12	; 0x0c
    699e:	c5 01       	movw	r24, r10
    69a0:	b4 01       	movw	r22, r8
    69a2:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    69a6:	4b 01       	movw	r8, r22
    69a8:	5c 01       	movw	r10, r24
    69aa:	a7 01       	movw	r20, r14
    69ac:	96 01       	movw	r18, r12
    69ae:	69 81       	ldd	r22, Y+1	; 0x01
    69b0:	7a 81       	ldd	r23, Y+2	; 0x02
    69b2:	8b 81       	ldd	r24, Y+3	; 0x03
    69b4:	9c 81       	ldd	r25, Y+4	; 0x04
    69b6:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    69ba:	2d 81       	ldd	r18, Y+5	; 0x05
    69bc:	3e 81       	ldd	r19, Y+6	; 0x06
    69be:	4f 81       	ldd	r20, Y+7	; 0x07
    69c0:	58 85       	ldd	r21, Y+8	; 0x08
    69c2:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    69c6:	9b 01       	movw	r18, r22
    69c8:	ac 01       	movw	r20, r24
    69ca:	c5 01       	movw	r24, r10
    69cc:	b4 01       	movw	r22, r8
    69ce:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    69d2:	9b 01       	movw	r18, r22
    69d4:	ac 01       	movw	r20, r24
	delta = atan2(delta, denom);
    69d6:	c3 01       	movw	r24, r6
    69d8:	b2 01       	movw	r22, r4
    69da:	0e 94 a6 3c 	call	0x794c	; 0x794c <atan2>
	return delta * 6372795 * MTR;
    69de:	26 e7       	ldi	r18, 0x76	; 118
    69e0:	3b e7       	ldi	r19, 0x7B	; 123
    69e2:	42 ec       	ldi	r20, 0xC2	; 194
    69e4:	5a e4       	ldi	r21, 0x4A	; 74
    69e6:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
}
    69ea:	60 96       	adiw	r28, 0x10	; 16
    69ec:	0f b6       	in	r0, 0x3f	; 63
    69ee:	f8 94       	cli
    69f0:	de bf       	out	0x3e, r29	; 62
    69f2:	0f be       	out	0x3f, r0	; 63
    69f4:	cd bf       	out	0x3d, r28	; 61
    69f6:	df 91       	pop	r29
    69f8:	cf 91       	pop	r28
    69fa:	1f 91       	pop	r17
    69fc:	0f 91       	pop	r16
    69fe:	ff 90       	pop	r15
    6a00:	ef 90       	pop	r14
    6a02:	df 90       	pop	r13
    6a04:	cf 90       	pop	r12
    6a06:	bf 90       	pop	r11
    6a08:	af 90       	pop	r10
    6a0a:	9f 90       	pop	r9
    6a0c:	8f 90       	pop	r8
    6a0e:	7f 90       	pop	r7
    6a10:	6f 90       	pop	r6
    6a12:	5f 90       	pop	r5
    6a14:	4f 90       	pop	r4
    6a16:	3f 90       	pop	r3
    6a18:	2f 90       	pop	r2
    6a1a:	08 95       	ret

00006a1c <_ZN3Gps6decodeEh>:

bool Gps::decode(byte inByte) {
    6a1c:	cf 93       	push	r28
    6a1e:	df 93       	push	r29
    6a20:	ec 01       	movw	r28, r24
	// check if the character completes a valid GPS sentence
	model->setGpsDecode(gpsSource->decode(inByte));
    6a22:	8a 81       	ldd	r24, Y+2	; 0x02
    6a24:	9b 81       	ldd	r25, Y+3	; 0x03
    6a26:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <_ZN4NMEA6decodeEc>
    6a2a:	61 e0       	ldi	r22, 0x01	; 1
    6a2c:	89 2b       	or	r24, r25
    6a2e:	09 f4       	brne	.+2      	; 0x6a32 <_ZN3Gps6decodeEh+0x16>
    6a30:	60 e0       	ldi	r22, 0x00	; 0
    6a32:	8c 81       	ldd	r24, Y+4	; 0x04
    6a34:	9d 81       	ldd	r25, Y+5	; 0x05
    6a36:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <_ZN14FreeBoardModel12setGpsDecodeEb>
	//if(DEBUG)Serial.print(inByte,BYTE);
	if (model->isGpsDecode()) {
    6a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    6a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    6a3e:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <_ZN14FreeBoardModel11isGpsDecodeEv>
    6a42:	88 23       	and	r24, r24
    6a44:	69 f1       	breq	.+90     	; 0x6aa0 <_ZN3Gps6decodeEh+0x84>
		model->setGpsStatus(gpsSource->gprmc_status());
    6a46:	8a 81       	ldd	r24, Y+2	; 0x02
    6a48:	9b 81       	ldd	r25, Y+3	; 0x03
    6a4a:	0e 94 c9 1c 	call	0x3992	; 0x3992 <_ZN4NMEA12gprmc_statusEv>
    6a4e:	68 2f       	mov	r22, r24
    6a50:	8c 81       	ldd	r24, Y+4	; 0x04
    6a52:	9d 81       	ldd	r25, Y+5	; 0x05
    6a54:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <_ZN14FreeBoardModel12setGpsStatusEc>
		if (gpsSource->gprmc_status() == 'A' && gpsSource->term(0)[2] != 'R' && gpsSource->term(0)[3] != 'M' && gpsSource->term(0)[4] != 'C') {
    6a58:	8a 81       	ldd	r24, Y+2	; 0x02
    6a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    6a5c:	0e 94 c9 1c 	call	0x3992	; 0x3992 <_ZN4NMEA12gprmc_statusEv>
    6a60:	81 34       	cpi	r24, 0x41	; 65
    6a62:	f1 f4       	brne	.+60     	; 0x6aa0 <_ZN3Gps6decodeEh+0x84>
    6a64:	60 e0       	ldi	r22, 0x00	; 0
    6a66:	70 e0       	ldi	r23, 0x00	; 0
    6a68:	8a 81       	ldd	r24, Y+2	; 0x02
    6a6a:	9b 81       	ldd	r25, Y+3	; 0x03
    6a6c:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <_ZN4NMEA4termEi>
    6a70:	fc 01       	movw	r30, r24
    6a72:	82 81       	ldd	r24, Z+2	; 0x02
    6a74:	82 35       	cpi	r24, 0x52	; 82
    6a76:	a1 f0       	breq	.+40     	; 0x6aa0 <_ZN3Gps6decodeEh+0x84>
    6a78:	60 e0       	ldi	r22, 0x00	; 0
    6a7a:	70 e0       	ldi	r23, 0x00	; 0
    6a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    6a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    6a80:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <_ZN4NMEA4termEi>
    6a84:	fc 01       	movw	r30, r24
    6a86:	83 81       	ldd	r24, Z+3	; 0x03
    6a88:	8d 34       	cpi	r24, 0x4D	; 77
    6a8a:	51 f0       	breq	.+20     	; 0x6aa0 <_ZN3Gps6decodeEh+0x84>
    6a8c:	60 e0       	ldi	r22, 0x00	; 0
    6a8e:	70 e0       	ldi	r23, 0x00	; 0
    6a90:	8a 81       	ldd	r24, Y+2	; 0x02
    6a92:	9b 81       	ldd	r25, Y+3	; 0x03
    6a94:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <_ZN4NMEA4termEi>
    6a98:	fc 01       	movw	r30, r24
    6a9a:	84 81       	ldd	r24, Z+4	; 0x04
    6a9c:	83 34       	cpi	r24, 0x43	; 67
    6a9e:	31 f4       	brne	.+12     	; 0x6aac <_ZN3Gps6decodeEh+0x90>
			model->setGpsLongitude(gpsSource->gprmc_longitude());
			model->setGpsSpeed(gpsSource->gprmc_speed(model->getGpsSpeedUnit()));
			model->setGpsUtc(gpsSource->gprmc_utc());
		}
	}
	return model->isGpsDecode();
    6aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    6aa2:	9d 81       	ldd	r25, Y+5	; 0x05
}
    6aa4:	df 91       	pop	r29
    6aa6:	cf 91       	pop	r28
			model->setGpsLongitude(gpsSource->gprmc_longitude());
			model->setGpsSpeed(gpsSource->gprmc_speed(model->getGpsSpeedUnit()));
			model->setGpsUtc(gpsSource->gprmc_utc());
		}
	}
	return model->isGpsDecode();
    6aa8:	0c 94 b9 2d 	jmp	0x5b72	; 0x5b72 <_ZN14FreeBoardModel11isGpsDecodeEv>
	model->setGpsDecode(gpsSource->decode(inByte));
	//if(DEBUG)Serial.print(inByte,BYTE);
	if (model->isGpsDecode()) {
		model->setGpsStatus(gpsSource->gprmc_status());
		if (gpsSource->gprmc_status() == 'A' && gpsSource->term(0)[2] != 'R' && gpsSource->term(0)[3] != 'M' && gpsSource->term(0)[4] != 'C') {
			model->setGpsLastFix(millis());
    6aac:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <millis>
    6ab0:	ab 01       	movw	r20, r22
    6ab2:	bc 01       	movw	r22, r24
    6ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    6ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    6ab8:	0e 94 77 2e 	call	0x5cee	; 0x5cee <_ZN14FreeBoardModel13setGpsLastFixEm>
			model->setGpsCourse(gpsSource->gprmc_course());
    6abc:	8a 81       	ldd	r24, Y+2	; 0x02
    6abe:	9b 81       	ldd	r25, Y+3	; 0x03
    6ac0:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <_ZN4NMEA12gprmc_courseEv>
    6ac4:	ab 01       	movw	r20, r22
    6ac6:	bc 01       	movw	r22, r24
    6ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    6aca:	9d 81       	ldd	r25, Y+5	; 0x05
    6acc:	0e 94 6a 2e 	call	0x5cd4	; 0x5cd4 <_ZN14FreeBoardModel12setGpsCourseEf>
			model->setGpsLatitude(gpsSource->gprmc_latitude());
    6ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    6ad4:	0e 94 cc 1c 	call	0x3998	; 0x3998 <_ZN4NMEA14gprmc_latitudeEv>
    6ad8:	ab 01       	movw	r20, r22
    6ada:	bc 01       	movw	r22, r24
    6adc:	8c 81       	ldd	r24, Y+4	; 0x04
    6ade:	9d 81       	ldd	r25, Y+5	; 0x05
    6ae0:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <_ZN14FreeBoardModel14setGpsLatitudeEf>
			model->setGpsLongitude(gpsSource->gprmc_longitude());
    6ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    6ae6:	9b 81       	ldd	r25, Y+3	; 0x03
    6ae8:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <_ZN4NMEA15gprmc_longitudeEv>
    6aec:	ab 01       	movw	r20, r22
    6aee:	bc 01       	movw	r22, r24
    6af0:	8c 81       	ldd	r24, Y+4	; 0x04
    6af2:	9d 81       	ldd	r25, Y+5	; 0x05
    6af4:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <_ZN14FreeBoardModel15setGpsLongitudeEf>
			model->setGpsSpeed(gpsSource->gprmc_speed(model->getGpsSpeedUnit()));
    6af8:	8c 81       	ldd	r24, Y+4	; 0x04
    6afa:	9d 81       	ldd	r25, Y+5	; 0x05
    6afc:	0e 94 73 2d 	call	0x5ae6	; 0x5ae6 <_ZN14FreeBoardModel15getGpsSpeedUnitEv>
    6b00:	ab 01       	movw	r20, r22
    6b02:	bc 01       	movw	r22, r24
    6b04:	8a 81       	ldd	r24, Y+2	; 0x02
    6b06:	9b 81       	ldd	r25, Y+3	; 0x03
    6b08:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <_ZN4NMEA11gprmc_speedEf>
    6b0c:	ab 01       	movw	r20, r22
    6b0e:	bc 01       	movw	r22, r24
    6b10:	8c 81       	ldd	r24, Y+4	; 0x04
    6b12:	9d 81       	ldd	r25, Y+5	; 0x05
    6b14:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <_ZN14FreeBoardModel11setGpsSpeedEf>
			model->setGpsUtc(gpsSource->gprmc_utc());
    6b18:	8a 81       	ldd	r24, Y+2	; 0x02
    6b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    6b1c:	0e 94 bf 1c 	call	0x397e	; 0x397e <_ZN4NMEA9gprmc_utcEv>
    6b20:	ab 01       	movw	r20, r22
    6b22:	bc 01       	movw	r22, r24
    6b24:	8c 81       	ldd	r24, Y+4	; 0x04
    6b26:	9d 81       	ldd	r25, Y+5	; 0x05
    6b28:	0e 94 9c 2e 	call	0x5d38	; 0x5d38 <_ZN14FreeBoardModel9setGpsUtcEf>
    6b2c:	b9 cf       	rjmp	.-142    	; 0x6aa0 <_ZN3Gps6decodeEh+0x84>

00006b2e <_ZN3Gps12setupGpsImplEv>:
		$PMTK251,19200*22
		$PMTK251,38400*27
		You can also set the GPS to any desired baud rate speed by changing the value inside the string and generate a new checksum here: http://www.hhhh.org/wiml/proj/nmeaxor.html
		 */
		//set to 38400
		Serial1.println("$PMTK251,38400*27");
    6b2e:	6b e4       	ldi	r22, 0x4B	; 75
    6b30:	74 e0       	ldi	r23, 0x04	; 4
    6b32:	8e e3       	ldi	r24, 0x3E	; 62
    6b34:	95 e0       	ldi	r25, 0x05	; 5
    6b36:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
		//setting update rate to 1Hz
		Serial1.println("$PMTK220,1000*1F");
    6b3a:	6d e5       	ldi	r22, 0x5D	; 93
    6b3c:	74 e0       	ldi	r23, 0x04	; 4
    6b3e:	8e e3       	ldi	r24, 0x3E	; 62
    6b40:	95 e0       	ldi	r25, 0x05	; 5
    6b42:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
		//setting the NMEA Output to get RMC, GGA, GSA & GSV.
		Serial1.println("$PMTK314,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0*28");
    6b46:	6e e6       	ldi	r22, 0x6E	; 110
    6b48:	74 e0       	ldi	r23, 0x04	; 4
    6b4a:	8e e3       	ldi	r24, 0x3E	; 62
    6b4c:	95 e0       	ldi	r25, 0x05	; 5
    6b4e:	0c 94 ed 06 	jmp	0xdda	; 0xdda <_ZN5Print7printlnEPKc>

00006b52 <_ZN3Gps8setupGpsEv>:
//	return gpsDecode;
//}
/*
 Set baud rate and various message frequencies.
 */
void Gps::setupGps() {
    6b52:	cf 93       	push	r28
    6b54:	df 93       	push	r29
    6b56:	ec 01       	movw	r28, r24
	 6 MSS (If internal beacon is supported)
	 7 Not defined
	 8 ZDA (if 1PPS output is supported)
	 9 Not defined
	 */
	autoBaud();
    6b58:	0e 94 76 33 	call	0x66ec	; 0x66ec <_ZN3Gps8autoBaudEv>

	setupGpsImpl();
    6b5c:	ce 01       	movw	r24, r28
    6b5e:	0e 94 97 35 	call	0x6b2e	; 0x6b2e <_ZN3Gps12setupGpsImplEv>
	//now flush and restart
	Serial1.flush();
    6b62:	8e e3       	ldi	r24, 0x3E	; 62
    6b64:	95 e0       	ldi	r25, 0x05	; 5
    6b66:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_ZN14HardwareSerial5flushEv>
	Serial1.end();
    6b6a:	8e e3       	ldi	r24, 0x3E	; 62
    6b6c:	95 e0       	ldi	r25, 0x05	; 5
    6b6e:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN14HardwareSerial3endEv>
	Serial1.begin(38400);
    6b72:	40 e0       	ldi	r20, 0x00	; 0
    6b74:	56 e9       	ldi	r21, 0x96	; 150
    6b76:	60 e0       	ldi	r22, 0x00	; 0
    6b78:	70 e0       	ldi	r23, 0x00	; 0
    6b7a:	8e e3       	ldi	r24, 0x3E	; 62
    6b7c:	95 e0       	ldi	r25, 0x05	; 5
}
    6b7e:	df 91       	pop	r29
    6b80:	cf 91       	pop	r28

	setupGpsImpl();
	//now flush and restart
	Serial1.flush();
	Serial1.end();
	Serial1.begin(38400);
    6b82:	0c 94 ab 04 	jmp	0x956	; 0x956 <_ZN14HardwareSerial5beginEm>

00006b86 <_GLOBAL__sub_I_gpsBuffer>:
    6b86:	10 92 f8 0f 	sts	0x0FF8, r1
    6b8a:	10 92 f7 0f 	sts	0x0FF7, r1
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    6b8e:	88 e0       	ldi	r24, 0x08	; 8
    6b90:	92 e0       	ldi	r25, 0x02	; 2
    6b92:	90 93 f6 0f 	sts	0x0FF6, r25
    6b96:	80 93 f5 0f 	sts	0x0FF5, r24
    6b9a:	8f ef       	ldi	r24, 0xFF	; 255
    6b9c:	9f e0       	ldi	r25, 0x0F	; 15
    6b9e:	90 93 fa 0f 	sts	0x0FFA, r25
    6ba2:	80 93 f9 0f 	sts	0x0FF9, r24
    6ba6:	88 e2       	ldi	r24, 0x28	; 40
    6ba8:	90 e0       	ldi	r25, 0x00	; 0
    6baa:	90 93 fe 0f 	sts	0x0FFE, r25
    6bae:	80 93 fd 0f 	sts	0x0FFD, r24
  { begin(); }
    6bb2:	85 ef       	ldi	r24, 0xF5	; 245
    6bb4:	9f e0       	ldi	r25, 0x0F	; 15
    6bb6:	0c 94 86 18 	jmp	0x310c	; 0x310c <_ZN7PString5beginEv>

00006bba <_ZN10NmeaSerialD1Ev>:

class AltSoftSerial : public Stream
{
public:
	AltSoftSerial() { }
	~AltSoftSerial() { end(); }
    6bba:	28 e1       	ldi	r18, 0x18	; 24
    6bbc:	32 e0       	ldi	r19, 0x02	; 2
    6bbe:	fc 01       	movw	r30, r24
    6bc0:	31 83       	std	Z+1, r19	; 0x01
    6bc2:	20 83       	st	Z, r18
    6bc4:	0c 94 ea 23 	jmp	0x47d4	; 0x47d4 <_ZN13AltSoftSerial3endEv>

00006bc8 <_ZN10NmeaSerialD0Ev>:
 *      Author: robert
 */

#include "NmeaSerial.h"

NmeaSerial::~NmeaSerial() {
    6bc8:	cf 93       	push	r28
    6bca:	df 93       	push	r29
    6bcc:	ec 01       	movw	r28, r24
    6bce:	88 e1       	ldi	r24, 0x18	; 24
    6bd0:	92 e0       	ldi	r25, 0x02	; 2
    6bd2:	99 83       	std	Y+1, r25	; 0x01
    6bd4:	88 83       	st	Y, r24
    6bd6:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <_ZN13AltSoftSerial3endEv>

}
    6bda:	ce 01       	movw	r24, r28
    6bdc:	df 91       	pop	r29
    6bde:	cf 91       	pop	r28
    6be0:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <_ZdlPv>

00006be4 <_ZN10NmeaSerial5beginEl>:
void NmeaSerial::begin(long speed) {
	//initialise the nmea output
	//pinMode(nmeaRxPin, INPUT);
	//pinMode(nmeaTxPin, OUTPUT);
	AltSoftSerial::begin(speed);
    6be4:	9a 01       	movw	r18, r20
    6be6:	ab 01       	movw	r20, r22
	static void begin(uint32_t baud) { init((F_CPU + baud / 2) / baud); }
    6be8:	ca 01       	movw	r24, r20
    6bea:	b9 01       	movw	r22, r18
    6bec:	96 95       	lsr	r25
    6bee:	87 95       	ror	r24
    6bf0:	77 95       	ror	r23
    6bf2:	67 95       	ror	r22
    6bf4:	7c 5d       	subi	r23, 0xDC	; 220
    6bf6:	8b 40       	sbci	r24, 0x0B	; 11
    6bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    6bfa:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__udivmodsi4>
    6bfe:	ca 01       	movw	r24, r20
    6c00:	b9 01       	movw	r22, r18
    6c02:	0c 94 d0 21 	jmp	0x43a0	; 0x43a0 <_ZN13AltSoftSerial4initEm>

00006c06 <_ZN10NmeaSerial9printNmeaEPc>:

void NmeaSerial::printNmea(char* sentence) {
	//sentence can be up to 80 chars
	//make it as perfect as possible, as the Raymarine C70 is very touchy
	// noInterrupts();
	println(sentence);
    6c06:	0c 94 ed 06 	jmp	0xdda	; 0xdda <_ZN5Print7printlnEPKc>

00006c0a <_ZN10NmeaSerial13printWindNmeaEv>:
 * 4. Wind Speed Units, K/M/N
 * 5. Status, A = Data Valid
 * 6. Checksum
 *
 */
void NmeaSerial::printWindNmea() {
    6c0a:	cf 92       	push	r12
    6c0c:	df 92       	push	r13
    6c0e:	ef 92       	push	r14
    6c10:	ff 92       	push	r15
    6c12:	0f 93       	push	r16
    6c14:	1f 93       	push	r17
    6c16:	cf 93       	push	r28
    6c18:	df 93       	push	r29
    6c1a:	cd b7       	in	r28, 0x3d	; 61
    6c1c:	de b7       	in	r29, 0x3e	; 62
    6c1e:	2a 97       	sbiw	r28, 0x0a	; 10
    6c20:	0f b6       	in	r0, 0x3f	; 63
    6c22:	f8 94       	cli
    6c24:	de bf       	out	0x3e, r29	; 62
    6c26:	0f be       	out	0x3f, r0	; 63
    6c28:	cd bf       	out	0x3d, r28	; 61
    6c2a:	8c 01       	movw	r16, r24
	//Assemble a sentence of the various parts so that we can calculate the proper checksum

	PString str(windSentence, sizeof(windSentence));
    6c2c:	7c 01       	movw	r14, r24
    6c2e:	8e e0       	ldi	r24, 0x0E	; 14
    6c30:	e8 0e       	add	r14, r24
    6c32:	f1 1c       	adc	r15, r1
    6c34:	1c 82       	std	Y+4, r1	; 0x04
    6c36:	1b 82       	std	Y+3, r1	; 0x03
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    6c38:	88 e0       	ldi	r24, 0x08	; 8
    6c3a:	92 e0       	ldi	r25, 0x02	; 2
    6c3c:	9a 83       	std	Y+2, r25	; 0x02
    6c3e:	89 83       	std	Y+1, r24	; 0x01
    6c40:	fe 82       	std	Y+6, r15	; 0x06
    6c42:	ed 82       	std	Y+5, r14	; 0x05
    6c44:	8e e1       	ldi	r24, 0x1E	; 30
    6c46:	90 e0       	ldi	r25, 0x00	; 0
    6c48:	9a 87       	std	Y+10, r25	; 0x0a
    6c4a:	89 87       	std	Y+9, r24	; 0x09
  { begin(); }
    6c4c:	ce 01       	movw	r24, r28
    6c4e:	01 96       	adiw	r24, 0x01	; 1
    6c50:	0e 94 86 18 	call	0x310c	; 0x310c <_ZN7PString5beginEv>
	str.print("$FBMWV,");
    6c54:	68 ea       	ldi	r22, 0xA8	; 168
    6c56:	74 e0       	ldi	r23, 0x04	; 4
    6c58:	ce 01       	movw	r24, r28
    6c5a:	01 96       	adiw	r24, 0x01	; 1
    6c5c:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
	str.print(model->getWindApparentDir());
    6c60:	f8 01       	movw	r30, r16
    6c62:	84 85       	ldd	r24, Z+12	; 0x0c
    6c64:	95 85       	ldd	r25, Z+13	; 0x0d
    6c66:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <_ZN14FreeBoardModel18getWindApparentDirEv>
    6c6a:	4a e0       	ldi	r20, 0x0A	; 10
    6c6c:	50 e0       	ldi	r21, 0x00	; 0
    6c6e:	bc 01       	movw	r22, r24
    6c70:	ce 01       	movw	r24, r28
    6c72:	01 96       	adiw	r24, 0x01	; 1
    6c74:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN5Print5printEii>
	str.print(".0,R,");
    6c78:	60 eb       	ldi	r22, 0xB0	; 176
    6c7a:	74 e0       	ldi	r23, 0x04	; 4
    6c7c:	ce 01       	movw	r24, r28
    6c7e:	01 96       	adiw	r24, 0x01	; 1
    6c80:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
	str.print(model->getWindAverage());
    6c84:	f8 01       	movw	r30, r16
    6c86:	84 85       	ldd	r24, Z+12	; 0x0c
    6c88:	95 85       	ldd	r25, Z+13	; 0x0d
    6c8a:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <_ZN14FreeBoardModel14getWindAverageEv>
    6c8e:	ab 01       	movw	r20, r22
    6c90:	bc 01       	movw	r22, r24
    6c92:	22 e0       	ldi	r18, 0x02	; 2
    6c94:	30 e0       	ldi	r19, 0x00	; 0
    6c96:	ce 01       	movw	r24, r28
    6c98:	01 96       	adiw	r24, 0x01	; 1
    6c9a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN5Print5printEdi>
	str.print(",N,A*");
    6c9e:	66 eb       	ldi	r22, 0xB6	; 182
    6ca0:	74 e0       	ldi	r23, 0x04	; 4
    6ca2:	ce 01       	movw	r24, r28
    6ca4:	01 96       	adiw	r24, 0x01	; 1
    6ca6:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
	//calculate the checksum

	cs = 0; //clear any old checksum
    6caa:	f8 01       	movw	r30, r16
    6cac:	e0 5c       	subi	r30, 0xC0	; 192
    6cae:	ff 4f       	sbci	r31, 0xFF	; 255
    6cb0:	10 82       	st	Z, r1
	for (unsigned int n = 1; n < strlen(windSentence) - 1; n++) {
    6cb2:	81 e0       	ldi	r24, 0x01	; 1
    6cb4:	90 e0       	ldi	r25, 0x00	; 0
    6cb6:	6f 01       	movw	r12, r30
    6cb8:	09 c0       	rjmp	.+18     	; 0x6ccc <_ZN10NmeaSerial13printWindNmeaEv+0xc2>
 * 4. Wind Speed Units, K/M/N
 * 5. Status, A = Data Valid
 * 6. Checksum
 *
 */
void NmeaSerial::printWindNmea() {
    6cba:	f8 01       	movw	r30, r16
    6cbc:	e8 0f       	add	r30, r24
    6cbe:	f9 1f       	adc	r31, r25
	str.print(",N,A*");
	//calculate the checksum

	cs = 0; //clear any old checksum
	for (unsigned int n = 1; n < strlen(windSentence) - 1; n++) {
		cs ^= windSentence[n]; //calculates the checksum
    6cc0:	26 85       	ldd	r18, Z+14	; 0x0e
    6cc2:	f6 01       	movw	r30, r12
    6cc4:	30 81       	ld	r19, Z
    6cc6:	23 27       	eor	r18, r19
    6cc8:	20 83       	st	Z, r18
	str.print(model->getWindAverage());
	str.print(",N,A*");
	//calculate the checksum

	cs = 0; //clear any old checksum
	for (unsigned int n = 1; n < strlen(windSentence) - 1; n++) {
    6cca:	01 96       	adiw	r24, 0x01	; 1
    6ccc:	f7 01       	movw	r30, r14
    6cce:	01 90       	ld	r0, Z+
    6cd0:	00 20       	and	r0, r0
    6cd2:	e9 f7       	brne	.-6      	; 0x6cce <_ZN10NmeaSerial13printWindNmeaEv+0xc4>
    6cd4:	ee 19       	sub	r30, r14
    6cd6:	ff 09       	sbc	r31, r15
    6cd8:	32 97       	sbiw	r30, 0x02	; 2
    6cda:	8e 17       	cp	r24, r30
    6cdc:	9f 07       	cpc	r25, r31
    6cde:	68 f3       	brcs	.-38     	; 0x6cba <_ZN10NmeaSerial13printWindNmeaEv+0xb0>
		cs ^= windSentence[n]; //calculates the checksum
	}
	//bug - arduino prints 0x007 as 7, 0x02B as 2B, so we add it now
	if (cs < 0x10) str.print('0');
    6ce0:	f6 01       	movw	r30, r12
    6ce2:	80 81       	ld	r24, Z
    6ce4:	80 31       	cpi	r24, 0x10	; 16
    6ce6:	28 f4       	brcc	.+10     	; 0x6cf2 <_ZN10NmeaSerial13printWindNmeaEv+0xe8>
    6ce8:	60 e3       	ldi	r22, 0x30	; 48
    6cea:	ce 01       	movw	r24, r28
    6cec:	01 96       	adiw	r24, 0x01	; 1
    6cee:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_ZN5Print5printEc>
	str.print(cs, HEX); // Assemble the final message and send it out the serial port
    6cf2:	40 e1       	ldi	r20, 0x10	; 16
    6cf4:	50 e0       	ldi	r21, 0x00	; 0
    6cf6:	f6 01       	movw	r30, r12
    6cf8:	60 81       	ld	r22, Z
    6cfa:	ce 01       	movw	r24, r28
    6cfc:	01 96       	adiw	r24, 0x01	; 1
    6cfe:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZN5Print5printEhi>
	Serial.println(windSentence);
    6d02:	b7 01       	movw	r22, r14
    6d04:	80 e6       	ldi	r24, 0x60	; 96
    6d06:	95 e0       	ldi	r25, 0x05	; 5
    6d08:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print7printlnEPKc>
	printNmea(windSentence);
    6d0c:	b7 01       	movw	r22, r14
    6d0e:	c8 01       	movw	r24, r16
    6d10:	0e 94 03 36 	call	0x6c06	; 0x6c06 <_ZN10NmeaSerial9printNmeaEPc>

}
    6d14:	2a 96       	adiw	r28, 0x0a	; 10
    6d16:	0f b6       	in	r0, 0x3f	; 63
    6d18:	f8 94       	cli
    6d1a:	de bf       	out	0x3e, r29	; 62
    6d1c:	0f be       	out	0x3f, r0	; 63
    6d1e:	cd bf       	out	0x3d, r28	; 61
    6d20:	df 91       	pop	r29
    6d22:	cf 91       	pop	r28
    6d24:	1f 91       	pop	r17
    6d26:	0f 91       	pop	r16
    6d28:	ff 90       	pop	r15
    6d2a:	ef 90       	pop	r14
    6d2c:	df 90       	pop	r13
    6d2e:	cf 90       	pop	r12
    6d30:	08 95       	ret

00006d32 <_ZN7SeatalkC1EP14HardwareSerialP14FreeBoardModel>:

 */

#include "Seatalk.h"

	Seatalk::Seatalk( HardwareSerial* serial, FreeBoardModel* model) {
    6d32:	fc 01       	movw	r30, r24
	this->model=model;
    6d34:	57 8b       	std	Z+23, r21	; 0x17
    6d36:	46 8b       	std	Z+22, r20	; 0x16
	this->serial=serial;
    6d38:	71 8f       	std	Z+25, r23	; 0x19
    6d3a:	60 8f       	std	Z+24, r22	; 0x18
	seaTalkPos = 0;
    6d3c:	11 82       	std	Z+1, r1	; 0x01
    6d3e:	10 82       	st	Z, r1
    6d40:	08 95       	ret

00006d42 <_ZN7Seatalk18processSeaTalkByteEh>:
	// Send 36  00  01      Cancel MOB (Man Over Board) condition
	serial->write9(0x36, true);
	serial->write9(0x00, false);
	serial->write9(0x01, false);
}
void Seatalk::processSeaTalkByte(byte inByte) {
    6d42:	fc 01       	movw	r30, r24
		processSeatalk(seatalkStream);
		seaTalkPos = 0;
		// Serial.print("Command:");
		inByte = inByte - 256;
	}
	seatalkStream[seaTalkPos] = inByte;
    6d44:	a0 81       	ld	r26, Z
    6d46:	b1 81       	ldd	r27, Z+1	; 0x01
    6d48:	a8 0f       	add	r26, r24
    6d4a:	b9 1f       	adc	r27, r25
    6d4c:	12 96       	adiw	r26, 0x02	; 2
    6d4e:	6c 93       	st	X, r22
	if (seaTalkPos < 19)
    6d50:	80 81       	ld	r24, Z
    6d52:	91 81       	ldd	r25, Z+1	; 0x01
    6d54:	43 97       	sbiw	r24, 0x13	; 19
    6d56:	2c f4       	brge	.+10     	; 0x6d62 <_ZN7Seatalk18processSeaTalkByteEh+0x20>
		seaTalkPos++;
    6d58:	80 81       	ld	r24, Z
    6d5a:	91 81       	ldd	r25, Z+1	; 0x01
    6d5c:	01 96       	adiw	r24, 0x01	; 1
    6d5e:	91 83       	std	Z+1, r25	; 0x01
    6d60:	80 83       	st	Z, r24
    6d62:	08 95       	ret

00006d64 <_ZN4Wind17readWindDataSpeedEv>:



/* NMEA Wind routines and alarm
 */
void Wind::readWindDataSpeed() {
    6d64:	0f 93       	push	r16
    6d66:	1f 93       	push	r17
	if(windSpeedFlag){
    6d68:	80 91 4a 10 	lds	r24, 0x104A
    6d6c:	88 23       	and	r24, r24
    6d6e:	09 f4       	brne	.+2      	; 0x6d72 <_ZN4Wind17readWindDataSpeedEv+0xe>
    6d70:	76 c0       	rjmp	.+236    	; 0x6e5e <_ZN4Wind17readWindDataSpeedEv+0xfa>
		windSpeedFlag=false;
    6d72:	10 92 4a 10 	sts	0x104A, r1
		//therefore about 50/ms = 100knts = 150 rps = 1000000/150 = 6500 us per pulse
		//at 100 knts about 20us per degree of rotation
		//ULTIMETER:
		// 66RPS = 136MPH == 118 KNTS
		// so 1000000/66=15151/360=42us/degree at 118knts
		lastPulse=millis();
    6d76:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <millis>
    6d7a:	60 93 5b 10 	sts	0x105B, r22
    6d7e:	70 93 5c 10 	sts	0x105C, r23
    6d82:	80 93 5d 10 	sts	0x105D, r24
    6d86:	90 93 5e 10 	sts	0x105E, r25
		windSpeedDur=micros()-windSpeedMicros;
    6d8a:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <micros>
    6d8e:	00 91 4f 10 	lds	r16, 0x104F
    6d92:	10 91 50 10 	lds	r17, 0x1050
    6d96:	20 91 51 10 	lds	r18, 0x1051
    6d9a:	30 91 52 10 	lds	r19, 0x1052
    6d9e:	60 1b       	sub	r22, r16
    6da0:	71 0b       	sbc	r23, r17
    6da2:	82 0b       	sbc	r24, r18
    6da4:	93 0b       	sbc	r25, r19
    6da6:	60 93 57 10 	sts	0x1057, r22
    6daa:	70 93 58 10 	sts	0x1058, r23
    6dae:	80 93 59 10 	sts	0x1059, r24
    6db2:	90 93 5a 10 	sts	0x105A, r25
		if(windSpeedDur>0){
    6db6:	80 91 57 10 	lds	r24, 0x1057
    6dba:	90 91 58 10 	lds	r25, 0x1058
    6dbe:	a0 91 59 10 	lds	r26, 0x1059
    6dc2:	b0 91 5a 10 	lds	r27, 0x105A
    6dc6:	89 2b       	or	r24, r25
    6dc8:	8a 2b       	or	r24, r26
    6dca:	8b 2b       	or	r24, r27
    6dcc:	f1 f1       	breq	.+124    	; 0x6e4a <_ZN4Wind17readWindDataSpeedEv+0xe6>
			speedList.addValue(windSpeedDur);
    6dce:	00 91 57 10 	lds	r16, 0x1057
    6dd2:	10 91 58 10 	lds	r17, 0x1058
    6dd6:	20 91 59 10 	lds	r18, 0x1059
    6dda:	30 91 5a 10 	lds	r19, 0x105A
			currentIndex = 0; 
		}
		
		//add a value to the AverageList at the next index, if out of bounds, return false, else return true
		void addValue(datatype value){ 
			currentIndex=currentIndex+1;
    6dde:	80 91 30 10 	lds	r24, 0x1030
    6de2:	8f 5f       	subi	r24, 0xFF	; 255
    6de4:	80 93 30 10 	sts	0x1030, r24
			if (currentSize<size){
    6de8:	70 91 2f 10 	lds	r23, 0x102F
    6dec:	60 91 2e 10 	lds	r22, 0x102E
    6df0:	40 91 2c 10 	lds	r20, 0x102C
    6df4:	50 91 2d 10 	lds	r21, 0x102D
    6df8:	76 17       	cp	r23, r22
    6dfa:	b8 f4       	brcc	.+46     	; 0x6e2a <_ZN4Wind17readWindDataSpeedEv+0xc6>
				values[currentSize++] = value;
    6dfc:	fa 01       	movw	r30, r20
    6dfe:	84 e0       	ldi	r24, 0x04	; 4
    6e00:	78 9f       	mul	r23, r24
    6e02:	e0 0d       	add	r30, r0
    6e04:	f1 1d       	adc	r31, r1
    6e06:	11 24       	eor	r1, r1
    6e08:	c8 01       	movw	r24, r16
    6e0a:	d9 01       	movw	r26, r18
    6e0c:	80 83       	st	Z, r24
    6e0e:	91 83       	std	Z+1, r25	; 0x01
    6e10:	a2 83       	std	Z+2, r26	; 0x02
    6e12:	b3 83       	std	Z+3, r27	; 0x03
    6e14:	67 2f       	mov	r22, r23
    6e16:	6f 5f       	subi	r22, 0xFF	; 255
    6e18:	60 93 2f 10 	sts	0x102F, r22
				currentIndex = currentIndex % currentSize;
    6e1c:	80 91 30 10 	lds	r24, 0x1030
    6e20:	0e 94 dc 3f 	call	0x7fb8	; 0x7fb8 <__udivmodqi4>
    6e24:	90 93 30 10 	sts	0x1030, r25
    6e28:	10 c0       	rjmp	.+32     	; 0x6e4a <_ZN4Wind17readWindDataSpeedEv+0xe6>
			}else{
				currentIndex = currentIndex % size;
    6e2a:	0e 94 dc 3f 	call	0x7fb8	; 0x7fb8 <__udivmodqi4>
    6e2e:	90 93 30 10 	sts	0x1030, r25
				values[currentIndex] = value; 
    6e32:	fa 01       	movw	r30, r20
    6e34:	84 e0       	ldi	r24, 0x04	; 4
    6e36:	98 9f       	mul	r25, r24
    6e38:	e0 0d       	add	r30, r0
    6e3a:	f1 1d       	adc	r31, r1
    6e3c:	11 24       	eor	r1, r1
    6e3e:	c8 01       	movw	r24, r16
    6e40:	d9 01       	movw	r26, r18
    6e42:	80 83       	st	Z, r24
    6e44:	91 83       	std	Z+1, r25	; 0x01
    6e46:	a2 83       	std	Z+2, r26	; 0x02
    6e48:	b3 83       	std	Z+3, r27	; 0x03
		}
		windSpeedMicros=micros();
    6e4a:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <micros>
    6e4e:	60 93 4f 10 	sts	0x104F, r22
    6e52:	70 93 50 10 	sts	0x1050, r23
    6e56:	80 93 51 10 	sts	0x1051, r24
    6e5a:	90 93 52 10 	sts	0x1052, r25
	}

}
    6e5e:	1f 91       	pop	r17
    6e60:	0f 91       	pop	r16
    6e62:	08 95       	ret

00006e64 <_ZN4Wind15readWindDataDirEv>:
void Wind::readWindDataDir() {
    6e64:	8f 92       	push	r8
    6e66:	9f 92       	push	r9
    6e68:	af 92       	push	r10
    6e6a:	bf 92       	push	r11
    6e6c:	cf 92       	push	r12
    6e6e:	df 92       	push	r13
    6e70:	ef 92       	push	r14
    6e72:	ff 92       	push	r15
    6e74:	cf 93       	push	r28
    6e76:	df 93       	push	r29
	if(!windSpeedFlag){
    6e78:	80 91 4a 10 	lds	r24, 0x104A
    6e7c:	81 11       	cpse	r24, r1
    6e7e:	9b c0       	rjmp	.+310    	; 0x6fb6 <_ZN4Wind15readWindDataDirEv+0x152>
		windSpeedFlag=true;
    6e80:	81 e0       	ldi	r24, 0x01	; 1
    6e82:	80 93 4a 10 	sts	0x104A, r24
		//called by dir pin interrupt
		//micros resets every 50 min, reset if that happens
		//debounce 5ms
		windDirDur=micros()-windSpeedMicros;
    6e86:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <micros>
    6e8a:	c0 90 4f 10 	lds	r12, 0x104F
    6e8e:	d0 90 50 10 	lds	r13, 0x1050
    6e92:	e0 90 51 10 	lds	r14, 0x1051
    6e96:	f0 90 52 10 	lds	r15, 0x1052
    6e9a:	6c 19       	sub	r22, r12
    6e9c:	7d 09       	sbc	r23, r13
    6e9e:	8e 09       	sbc	r24, r14
    6ea0:	9f 09       	sbc	r25, r15
    6ea2:	60 93 4b 10 	sts	0x104B, r22
    6ea6:	70 93 4c 10 	sts	0x104C, r23
    6eaa:	80 93 4d 10 	sts	0x104D, r24
    6eae:	90 93 4e 10 	sts	0x104E, r25
		if(windDirDur>0 && windSpeedDur>windDirDur)
    6eb2:	80 91 4b 10 	lds	r24, 0x104B
    6eb6:	90 91 4c 10 	lds	r25, 0x104C
    6eba:	a0 91 4d 10 	lds	r26, 0x104D
    6ebe:	b0 91 4e 10 	lds	r27, 0x104E
    6ec2:	89 2b       	or	r24, r25
    6ec4:	8a 2b       	or	r24, r26
    6ec6:	8b 2b       	or	r24, r27
    6ec8:	09 f4       	brne	.+2      	; 0x6ecc <_ZN4Wind15readWindDataDirEv+0x68>
    6eca:	75 c0       	rjmp	.+234    	; 0x6fb6 <_ZN4Wind15readWindDataDirEv+0x152>
    6ecc:	40 91 57 10 	lds	r20, 0x1057
    6ed0:	50 91 58 10 	lds	r21, 0x1058
    6ed4:	60 91 59 10 	lds	r22, 0x1059
    6ed8:	70 91 5a 10 	lds	r23, 0x105A
    6edc:	80 91 4b 10 	lds	r24, 0x104B
    6ee0:	90 91 4c 10 	lds	r25, 0x104C
    6ee4:	a0 91 4d 10 	lds	r26, 0x104D
    6ee8:	b0 91 4e 10 	lds	r27, 0x104E
    6eec:	84 17       	cp	r24, r20
    6eee:	95 07       	cpc	r25, r21
    6ef0:	a6 07       	cpc	r26, r22
    6ef2:	b7 07       	cpc	r27, r23
    6ef4:	68 f1       	brcs	.+90     	; 0x6f50 <_ZN4Wind15readWindDataDirEv+0xec>
    6ef6:	5f c0       	rjmp	.+190    	; 0x6fb6 <_ZN4Wind15readWindDataDirEv+0x152>
		
		//add a value to the AverageList at the next index, if out of bounds, return false, else return true
		void addValue(datatype value){ 
			currentIndex=currentIndex+1;
			if (currentSize<size){
				values[currentSize++] = value;
    6ef8:	e9 01       	movw	r28, r18
    6efa:	84 e0       	ldi	r24, 0x04	; 4
    6efc:	e8 9f       	mul	r30, r24
    6efe:	c0 0d       	add	r28, r0
    6f00:	d1 1d       	adc	r29, r1
    6f02:	11 24       	eor	r1, r1
    6f04:	4f 2f       	mov	r20, r31
    6f06:	5a 2f       	mov	r21, r26
    6f08:	6b 2f       	mov	r22, r27
    6f0a:	7f 2d       	mov	r23, r15
    6f0c:	48 83       	st	Y, r20
    6f0e:	59 83       	std	Y+1, r21	; 0x01
    6f10:	6a 83       	std	Y+2, r22	; 0x02
    6f12:	7b 83       	std	Y+3, r23	; 0x03
    6f14:	6e 2f       	mov	r22, r30
    6f16:	6f 5f       	subi	r22, 0xFF	; 255
    6f18:	60 93 2a 10 	sts	0x102A, r22
				currentIndex = currentIndex % currentSize;
    6f1c:	80 91 2b 10 	lds	r24, 0x102B
    6f20:	0e 94 dc 3f 	call	0x7fb8	; 0x7fb8 <__udivmodqi4>
    6f24:	90 93 2b 10 	sts	0x102B, r25
    6f28:	46 c0       	rjmp	.+140    	; 0x6fb6 <_ZN4Wind15readWindDataDirEv+0x152>
			}else{
				currentIndex = currentIndex % size;
    6f2a:	0e 94 dc 3f 	call	0x7fb8	; 0x7fb8 <__udivmodqi4>
    6f2e:	90 93 2b 10 	sts	0x102B, r25
				values[currentIndex] = value; 
    6f32:	e9 01       	movw	r28, r18
    6f34:	84 e0       	ldi	r24, 0x04	; 4
    6f36:	98 9f       	mul	r25, r24
    6f38:	c0 0d       	add	r28, r0
    6f3a:	d1 1d       	adc	r29, r1
    6f3c:	11 24       	eor	r1, r1
    6f3e:	4f 2f       	mov	r20, r31
    6f40:	5a 2f       	mov	r21, r26
    6f42:	6b 2f       	mov	r22, r27
    6f44:	7f 2d       	mov	r23, r15
    6f46:	48 83       	st	Y, r20
    6f48:	59 83       	std	Y+1, r21	; 0x01
    6f4a:	6a 83       	std	Y+2, r22	; 0x02
    6f4c:	7b 83       	std	Y+3, r23	; 0x03
    6f4e:	33 c0       	rjmp	.+102    	; 0x6fb6 <_ZN4Wind15readWindDataDirEv+0x152>
			dirList.addValue(((float)windDirDur/(float)windSpeedDur));
    6f50:	60 91 4b 10 	lds	r22, 0x104B
    6f54:	70 91 4c 10 	lds	r23, 0x104C
    6f58:	80 91 4d 10 	lds	r24, 0x104D
    6f5c:	90 91 4e 10 	lds	r25, 0x104E
    6f60:	80 90 57 10 	lds	r8, 0x1057
    6f64:	90 90 58 10 	lds	r9, 0x1058
    6f68:	a0 90 59 10 	lds	r10, 0x1059
    6f6c:	b0 90 5a 10 	lds	r11, 0x105A
    6f70:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <__floatunsisf>
    6f74:	6b 01       	movw	r12, r22
    6f76:	7c 01       	movw	r14, r24
    6f78:	c5 01       	movw	r24, r10
    6f7a:	b4 01       	movw	r22, r8
    6f7c:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <__floatunsisf>
    6f80:	9b 01       	movw	r18, r22
    6f82:	ac 01       	movw	r20, r24
    6f84:	c7 01       	movw	r24, r14
    6f86:	b6 01       	movw	r22, r12
    6f88:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <__divsf3>
    6f8c:	f6 2f       	mov	r31, r22
    6f8e:	a7 2f       	mov	r26, r23
    6f90:	b8 2f       	mov	r27, r24
    6f92:	f9 2e       	mov	r15, r25
			currentIndex = 0; 
		}
		
		//add a value to the AverageList at the next index, if out of bounds, return false, else return true
		void addValue(datatype value){ 
			currentIndex=currentIndex+1;
    6f94:	80 91 2b 10 	lds	r24, 0x102B
    6f98:	8f 5f       	subi	r24, 0xFF	; 255
    6f9a:	80 93 2b 10 	sts	0x102B, r24
			if (currentSize<size){
    6f9e:	e0 91 2a 10 	lds	r30, 0x102A
    6fa2:	60 91 29 10 	lds	r22, 0x1029
    6fa6:	20 91 27 10 	lds	r18, 0x1027
    6faa:	30 91 28 10 	lds	r19, 0x1028
    6fae:	e6 17       	cp	r30, r22
    6fb0:	08 f0       	brcs	.+2      	; 0x6fb4 <_ZN4Wind15readWindDataDirEv+0x150>
    6fb2:	bb cf       	rjmp	.-138    	; 0x6f2a <_ZN4Wind15readWindDataDirEv+0xc6>
    6fb4:	a1 cf       	rjmp	.-190    	; 0x6ef8 <_ZN4Wind15readWindDataDirEv+0x94>

	}
}
    6fb6:	df 91       	pop	r29
    6fb8:	cf 91       	pop	r28
    6fba:	ff 90       	pop	r15
    6fbc:	ef 90       	pop	r14
    6fbe:	df 90       	pop	r13
    6fc0:	cf 90       	pop	r12
    6fc2:	bf 90       	pop	r11
    6fc4:	af 90       	pop	r10
    6fc6:	9f 90       	pop	r9
    6fc8:	8f 90       	pop	r8
    6fca:	08 95       	ret

00006fcc <_ZN11AverageListIVlE5resetEv>:
			}
			return min;
		}
		
		//reset the AverageList
		void reset(){ 
    6fcc:	fc 01       	movw	r30, r24
			currentSize = 0; 
    6fce:	13 82       	std	Z+3, r1	; 0x03
			currentIndex = 0;
    6fd0:	14 82       	std	Z+4, r1	; 0x04
			for (byte i=0; i<size; i++){ values[i]=0; }
    6fd2:	80 e0       	ldi	r24, 0x00	; 0
    6fd4:	0d c0       	rjmp	.+26     	; 0x6ff0 <_ZN11AverageListIVlE5resetEv+0x24>
    6fd6:	a0 81       	ld	r26, Z
    6fd8:	b1 81       	ldd	r27, Z+1	; 0x01
    6fda:	94 e0       	ldi	r25, 0x04	; 4
    6fdc:	89 9f       	mul	r24, r25
    6fde:	a0 0d       	add	r26, r0
    6fe0:	b1 1d       	adc	r27, r1
    6fe2:	11 24       	eor	r1, r1
    6fe4:	1d 92       	st	X+, r1
    6fe6:	1d 92       	st	X+, r1
    6fe8:	1d 92       	st	X+, r1
    6fea:	1c 92       	st	X, r1
    6fec:	13 97       	sbiw	r26, 0x03	; 3
    6fee:	8f 5f       	subi	r24, 0xFF	; 255
    6ff0:	92 81       	ldd	r25, Z+2	; 0x02
    6ff2:	89 17       	cp	r24, r25
    6ff4:	80 f3       	brcs	.-32     	; 0x6fd6 <_ZN11AverageListIVlE5resetEv+0xa>
		}
    6ff6:	08 95       	ret

00006ff8 <_ZN4WindC1EP14FreeBoardModel>:
rval dirStorage[MAX_NUMBER_OF_READINGS] = {0.0};

AverageList<val> speedList = AverageList<val>( speedStorage, MAX_NUMBER_OF_READINGS );
AverageList<rval> dirList = AverageList<rval>( dirStorage, MAX_NUMBER_OF_READINGS );

Wind::Wind( FreeBoardModel* model) {
    6ff8:	cf 93       	push	r28
    6ffa:	df 93       	push	r29
    6ffc:	eb 01       	movw	r28, r22
	this->model=model;
    6ffe:	fc 01       	movw	r30, r24
    7000:	71 83       	std	Z+1, r23	; 0x01
    7002:	60 83       	st	Z, r22
	//initialise the wind interrupt
	//analogReference(INTERNAL); //ref to about 1.1V
	windSpeedDur=0;
    7004:	10 92 57 10 	sts	0x1057, r1
    7008:	10 92 58 10 	sts	0x1058, r1
    700c:	10 92 59 10 	sts	0x1059, r1
    7010:	10 92 5a 10 	sts	0x105A, r1
	windSpeedMicros=micros();
    7014:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <micros>
    7018:	60 93 4f 10 	sts	0x104F, r22
    701c:	70 93 50 10 	sts	0x1050, r23
    7020:	80 93 51 10 	sts	0x1051, r24
    7024:	90 93 52 10 	sts	0x1052, r25
	windDirDur=0;
    7028:	10 92 4b 10 	sts	0x104B, r1
    702c:	10 92 4c 10 	sts	0x104C, r1
    7030:	10 92 4d 10 	sts	0x104D, r1
    7034:	10 92 4e 10 	sts	0x104E, r1
	windSpeedFlag=true;
    7038:	81 e0       	ldi	r24, 0x01	; 1
    703a:	80 93 4a 10 	sts	0x104A, r24
	windDirFlag=false;
    703e:	10 92 49 10 	sts	0x1049, r1
	speedList.reset();
    7042:	8c e2       	ldi	r24, 0x2C	; 44
    7044:	90 e1       	ldi	r25, 0x10	; 16
    7046:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <_ZN11AverageListIVlE5resetEv>
			return min;
		}
		
		//reset the AverageList
		void reset(){ 
			currentSize = 0; 
    704a:	10 92 2a 10 	sts	0x102A, r1
			currentIndex = 0;
    704e:	10 92 2b 10 	sts	0x102B, r1
			for (byte i=0; i<size; i++){ values[i]=0; }
    7052:	80 91 27 10 	lds	r24, 0x1027
    7056:	90 91 28 10 	lds	r25, 0x1028
    705a:	20 e0       	ldi	r18, 0x00	; 0
    705c:	0b c0       	rjmp	.+22     	; 0x7074 <_ZN4WindC1EP14FreeBoardModel+0x7c>
    705e:	fc 01       	movw	r30, r24
    7060:	34 e0       	ldi	r19, 0x04	; 4
    7062:	23 9f       	mul	r18, r19
    7064:	e0 0d       	add	r30, r0
    7066:	f1 1d       	adc	r31, r1
    7068:	11 24       	eor	r1, r1
    706a:	10 82       	st	Z, r1
    706c:	11 82       	std	Z+1, r1	; 0x01
    706e:	12 82       	std	Z+2, r1	; 0x02
    7070:	13 82       	std	Z+3, r1	; 0x03
    7072:	2f 5f       	subi	r18, 0xFF	; 255
    7074:	30 91 29 10 	lds	r19, 0x1029
    7078:	23 17       	cp	r18, r19
    707a:	88 f3       	brcs	.-30     	; 0x705e <_ZN4WindC1EP14FreeBoardModel+0x66>
	dirList.reset();

	// read the last wind alarm values
	if (model->getWindAlarmSpeed() > 99) {
    707c:	ce 01       	movw	r24, r28
    707e:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <_ZN14FreeBoardModel17getWindAlarmSpeedEv>
    7082:	84 36       	cpi	r24, 0x64	; 100
    7084:	91 05       	cpc	r25, r1
    7086:	3c f0       	brlt	.+14     	; 0x7096 <_ZN4WindC1EP14FreeBoardModel+0x9e>
		model->setWindAlarmSpeed(99);
    7088:	63 e6       	ldi	r22, 0x63	; 99
    708a:	70 e0       	ldi	r23, 0x00	; 0
    708c:	ce 01       	movw	r24, r28
	}

}
    708e:	df 91       	pop	r29
    7090:	cf 91       	pop	r28
	speedList.reset();
	dirList.reset();

	// read the last wind alarm values
	if (model->getWindAlarmSpeed() > 99) {
		model->setWindAlarmSpeed(99);
    7092:	0c 94 bb 2e 	jmp	0x5d76	; 0x5d76 <_ZN14FreeBoardModel17setWindAlarmSpeedEi>
	}

}
    7096:	df 91       	pop	r29
    7098:	cf 91       	pop	r28
    709a:	08 95       	ret

0000709c <_ZN11AverageListIVlE15getTotalAverageEv>:
			return degrees(atan2(y, x));

		}

		//return the average of the entire AverageList, even though all values might not be initialized
		datatype getTotalAverage(){
    709c:	cf 92       	push	r12
    709e:	df 92       	push	r13
    70a0:	ef 92       	push	r14
    70a2:	ff 92       	push	r15
    70a4:	0f 93       	push	r16
    70a6:	1f 93       	push	r17
    70a8:	cf 93       	push	r28
    70aa:	df 93       	push	r29
    70ac:	00 d0       	rcall	.+0      	; 0x70ae <_ZN11AverageListIVlE15getTotalAverageEv+0x12>
    70ae:	1f 92       	push	r1
    70b0:	cd b7       	in	r28, 0x3d	; 61
    70b2:	de b7       	in	r29, 0x3e	; 62
			datatype buffer = 0;
    70b4:	19 82       	std	Y+1, r1	; 0x01
    70b6:	1a 82       	std	Y+2, r1	; 0x02
    70b8:	1b 82       	std	Y+3, r1	; 0x03
    70ba:	1c 82       	std	Y+4, r1	; 0x04
			for (byte i=0; i<size; i++){ buffer += values[i]; }
    70bc:	dc 01       	movw	r26, r24
    70be:	12 96       	adiw	r26, 0x02	; 2
    70c0:	5c 91       	ld	r21, X
    70c2:	60 e0       	ldi	r22, 0x00	; 0
    70c4:	70 e0       	ldi	r23, 0x00	; 0
    70c6:	40 e0       	ldi	r20, 0x00	; 0
    70c8:	18 c0       	rjmp	.+48     	; 0x70fa <_ZN11AverageListIVlE15getTotalAverageEv+0x5e>
    70ca:	dc 01       	movw	r26, r24
    70cc:	ed 91       	ld	r30, X+
    70ce:	fc 91       	ld	r31, X
    70d0:	e6 0f       	add	r30, r22
    70d2:	f7 1f       	adc	r31, r23
    70d4:	c0 80       	ld	r12, Z
    70d6:	d1 80       	ldd	r13, Z+1	; 0x01
    70d8:	e2 80       	ldd	r14, Z+2	; 0x02
    70da:	f3 80       	ldd	r15, Z+3	; 0x03
    70dc:	09 81       	ldd	r16, Y+1	; 0x01
    70de:	1a 81       	ldd	r17, Y+2	; 0x02
    70e0:	2b 81       	ldd	r18, Y+3	; 0x03
    70e2:	3c 81       	ldd	r19, Y+4	; 0x04
    70e4:	0c 0d       	add	r16, r12
    70e6:	1d 1d       	adc	r17, r13
    70e8:	2e 1d       	adc	r18, r14
    70ea:	3f 1d       	adc	r19, r15
    70ec:	09 83       	std	Y+1, r16	; 0x01
    70ee:	1a 83       	std	Y+2, r17	; 0x02
    70f0:	2b 83       	std	Y+3, r18	; 0x03
    70f2:	3c 83       	std	Y+4, r19	; 0x04
    70f4:	4f 5f       	subi	r20, 0xFF	; 255
    70f6:	6c 5f       	subi	r22, 0xFC	; 252
    70f8:	7f 4f       	sbci	r23, 0xFF	; 255
    70fa:	45 13       	cpse	r20, r21
    70fc:	e6 cf       	rjmp	.-52     	; 0x70ca <_ZN11AverageListIVlE15getTotalAverageEv+0x2e>
			buffer /= size;
    70fe:	69 81       	ldd	r22, Y+1	; 0x01
    7100:	7a 81       	ldd	r23, Y+2	; 0x02
    7102:	8b 81       	ldd	r24, Y+3	; 0x03
    7104:	9c 81       	ldd	r25, Y+4	; 0x04
    7106:	24 2f       	mov	r18, r20
    7108:	30 e0       	ldi	r19, 0x00	; 0
    710a:	40 e0       	ldi	r20, 0x00	; 0
    710c:	50 e0       	ldi	r21, 0x00	; 0
    710e:	0e 94 1e 40 	call	0x803c	; 0x803c <__divmodsi4>
    7112:	29 83       	std	Y+1, r18	; 0x01
    7114:	3a 83       	std	Y+2, r19	; 0x02
    7116:	4b 83       	std	Y+3, r20	; 0x03
    7118:	5c 83       	std	Y+4, r21	; 0x04
			return buffer;
    711a:	09 81       	ldd	r16, Y+1	; 0x01
    711c:	1a 81       	ldd	r17, Y+2	; 0x02
    711e:	2b 81       	ldd	r18, Y+3	; 0x03
    7120:	3c 81       	ldd	r19, Y+4	; 0x04
		}
    7122:	b8 01       	movw	r22, r16
    7124:	c9 01       	movw	r24, r18
    7126:	0f 90       	pop	r0
    7128:	0f 90       	pop	r0
    712a:	0f 90       	pop	r0
    712c:	0f 90       	pop	r0
    712e:	df 91       	pop	r29
    7130:	cf 91       	pop	r28
    7132:	1f 91       	pop	r17
    7134:	0f 91       	pop	r16
    7136:	ff 90       	pop	r15
    7138:	ef 90       	pop	r14
    713a:	df 90       	pop	r13
    713c:	cf 90       	pop	r12
    713e:	08 95       	ret

00007140 <_ZN4Wind12calcWindDataEv>:
}

/*
 * Calculates wind data. Direction is apparent, 0-360 deg off the bow, clockwise, in degrees.
 */
void Wind::calcWindData() {
    7140:	2f 92       	push	r2
    7142:	3f 92       	push	r3
    7144:	4f 92       	push	r4
    7146:	5f 92       	push	r5
    7148:	6f 92       	push	r6
    714a:	7f 92       	push	r7
    714c:	8f 92       	push	r8
    714e:	9f 92       	push	r9
    7150:	af 92       	push	r10
    7152:	bf 92       	push	r11
    7154:	cf 92       	push	r12
    7156:	df 92       	push	r13
    7158:	ef 92       	push	r14
    715a:	ff 92       	push	r15
    715c:	0f 93       	push	r16
    715e:	1f 93       	push	r17
    7160:	cf 93       	push	r28
    7162:	df 93       	push	r29
    7164:	1c 01       	movw	r2, r24
		//Serial.print(dirList.getTotalAverage());
		//Serial.print(", WindDirDur:");
		//Serial.println(windSpeedMicros);


		model->setWindLastUpdate(millis());
    7166:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <millis>
    716a:	ab 01       	movw	r20, r22
    716c:	bc 01       	movw	r22, r24
    716e:	f1 01       	movw	r30, r2
    7170:	80 81       	ld	r24, Z
    7172:	91 81       	ldd	r25, Z+1	; 0x01
    7174:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <_ZN14FreeBoardModel17setWindLastUpdateEm>
						Serial.print(dirList.getTotalAverage());
						Serial.print(", Wind speed:");
						Serial.println(speedList.getTotalAverage());
					}*/
		//convert to windAverage
		if(millis()-lastPulse>3000){
    7178:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <millis>
    717c:	00 91 5b 10 	lds	r16, 0x105B
    7180:	10 91 5c 10 	lds	r17, 0x105C
    7184:	20 91 5d 10 	lds	r18, 0x105D
    7188:	30 91 5e 10 	lds	r19, 0x105E
    718c:	60 1b       	sub	r22, r16
    718e:	71 0b       	sbc	r23, r17
    7190:	82 0b       	sbc	r24, r18
    7192:	93 0b       	sbc	r25, r19
    7194:	69 3b       	cpi	r22, 0xB9	; 185
    7196:	7b 40       	sbci	r23, 0x0B	; 11
    7198:	81 05       	cpc	r24, r1
    719a:	91 05       	cpc	r25, r1
    719c:	68 f0       	brcs	.+26     	; 0x71b8 <_ZN4Wind12calcWindDataEv+0x78>
			//no rotation, no wind
			model->setWindAverage(0);
    719e:	40 e0       	ldi	r20, 0x00	; 0
    71a0:	50 e0       	ldi	r21, 0x00	; 0
    71a2:	ba 01       	movw	r22, r20
    71a4:	f1 01       	movw	r30, r2
    71a6:	80 81       	ld	r24, Z
    71a8:	91 81       	ldd	r25, Z+1	; 0x01
    71aa:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <_ZN14FreeBoardModel14setWindAverageEf>
			//Serial.println("Wind speed reset");
			speedList.reset();
    71ae:	8c e2       	ldi	r24, 0x2C	; 44
    71b0:	90 e1       	ldi	r25, 0x10	; 16
    71b2:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <_ZN11AverageListIVlE5resetEv>
    71b6:	b7 c1       	rjmp	.+878    	; 0x7526 <_ZN4Wind12calcWindDataEv+0x3e6>
		}else{
			if(speedList.getTotalAverage()>0){
    71b8:	8c e2       	ldi	r24, 0x2C	; 44
    71ba:	90 e1       	ldi	r25, 0x10	; 16
    71bc:	0e 94 4e 38 	call	0x709c	; 0x709c <_ZN11AverageListIVlE15getTotalAverageEv>
    71c0:	16 16       	cp	r1, r22
    71c2:	17 06       	cpc	r1, r23
    71c4:	18 06       	cpc	r1, r24
    71c6:	19 06       	cpc	r1, r25
    71c8:	0c f0       	brlt	.+2      	; 0x71cc <_ZN4Wind12calcWindDataEv+0x8c>
    71ca:	f9 c0       	rjmp	.+498    	; 0x73be <_ZN4Wind12calcWindDataEv+0x27e>
				windSpeedRpm=1000000.0/speedList.getTotalAverage();
    71cc:	8c e2       	ldi	r24, 0x2C	; 44
    71ce:	90 e1       	ldi	r25, 0x10	; 16
    71d0:	0e 94 4e 38 	call	0x709c	; 0x709c <_ZN11AverageListIVlE15getTotalAverageEv>
    71d4:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__floatsisf>
    71d8:	9b 01       	movw	r18, r22
    71da:	ac 01       	movw	r20, r24
    71dc:	60 e0       	ldi	r22, 0x00	; 0
    71de:	74 e2       	ldi	r23, 0x24	; 36
    71e0:	84 e7       	ldi	r24, 0x74	; 116
    71e2:	99 e4       	ldi	r25, 0x49	; 73
    71e4:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <__divsf3>
    71e8:	ab 01       	movw	r20, r22
    71ea:	bc 01       	movw	r22, r24
    71ec:	40 93 53 10 	sts	0x1053, r20
    71f0:	50 93 54 10 	sts	0x1054, r21
    71f4:	60 93 55 10 	sts	0x1055, r22
    71f8:	70 93 56 10 	sts	0x1056, r23
				//convert to KNTS
				if(windSpeedRpm<3.229){
    71fc:	60 91 53 10 	lds	r22, 0x1053
    7200:	70 91 54 10 	lds	r23, 0x1054
    7204:	80 91 55 10 	lds	r24, 0x1055
    7208:	90 91 56 10 	lds	r25, 0x1056
    720c:	20 ef       	ldi	r18, 0xF0	; 240
    720e:	37 ea       	ldi	r19, 0xA7	; 167
    7210:	4e e4       	ldi	r20, 0x4E	; 78
    7212:	50 e4       	ldi	r21, 0x40	; 64
    7214:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    7218:	f1 01       	movw	r30, r2
    721a:	c0 81       	ld	r28, Z
    721c:	d1 81       	ldd	r29, Z+1	; 0x01
    721e:	87 ff       	sbrs	r24, 7
    7220:	3c c0       	rjmp	.+120    	; 0x729a <_ZN4Wind12calcWindDataEv+0x15a>
					model->setWindAverage(model->getWindFactor() *( -0.09515*(windSpeedRpm*windSpeedRpm) + 2.5476*(windSpeedRpm) - 0.1226));
    7222:	ce 01       	movw	r24, r28
    7224:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <_ZN14FreeBoardModel13getWindFactorEv>
    7228:	6b 01       	movw	r12, r22
    722a:	7c 01       	movw	r14, r24
    722c:	60 91 53 10 	lds	r22, 0x1053
    7230:	70 91 54 10 	lds	r23, 0x1054
    7234:	80 91 55 10 	lds	r24, 0x1055
    7238:	90 91 56 10 	lds	r25, 0x1056
    723c:	20 91 53 10 	lds	r18, 0x1053
    7240:	30 91 54 10 	lds	r19, 0x1054
    7244:	40 91 55 10 	lds	r20, 0x1055
    7248:	50 91 56 10 	lds	r21, 0x1056
    724c:	40 90 53 10 	lds	r4, 0x1053
    7250:	50 90 54 10 	lds	r5, 0x1054
    7254:	60 90 55 10 	lds	r6, 0x1055
    7258:	70 90 56 10 	lds	r7, 0x1056
    725c:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    7260:	21 e0       	ldi	r18, 0x01	; 1
    7262:	3e ed       	ldi	r19, 0xDE	; 222
    7264:	42 ec       	ldi	r20, 0xC2	; 194
    7266:	5d eb       	ldi	r21, 0xBD	; 189
    7268:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    726c:	4b 01       	movw	r8, r22
    726e:	5c 01       	movw	r10, r24
    7270:	21 ee       	ldi	r18, 0xE1	; 225
    7272:	3b e0       	ldi	r19, 0x0B	; 11
    7274:	43 e2       	ldi	r20, 0x23	; 35
    7276:	50 e4       	ldi	r21, 0x40	; 64
    7278:	c3 01       	movw	r24, r6
    727a:	b2 01       	movw	r22, r4
    727c:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    7280:	9b 01       	movw	r18, r22
    7282:	ac 01       	movw	r20, r24
    7284:	c5 01       	movw	r24, r10
    7286:	b4 01       	movw	r22, r8
    7288:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    728c:	25 eb       	ldi	r18, 0xB5	; 181
    728e:	35 e1       	ldi	r19, 0x15	; 21
    7290:	4b ef       	ldi	r20, 0xFB	; 251
    7292:	5d e3       	ldi	r21, 0x3D	; 61
    7294:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    7298:	85 c0       	rjmp	.+266    	; 0x73a4 <_ZN4Wind12calcWindDataEv+0x264>
				}else if(windSpeedRpm < 54.362){
    729a:	60 91 53 10 	lds	r22, 0x1053
    729e:	70 91 54 10 	lds	r23, 0x1054
    72a2:	80 91 55 10 	lds	r24, 0x1055
    72a6:	90 91 56 10 	lds	r25, 0x1056
    72aa:	20 eb       	ldi	r18, 0xB0	; 176
    72ac:	32 e7       	ldi	r19, 0x72	; 114
    72ae:	49 e5       	ldi	r20, 0x59	; 89
    72b0:	52 e4       	ldi	r21, 0x42	; 66
    72b2:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    72b6:	87 ff       	sbrs	r24, 7
    72b8:	3a c0       	rjmp	.+116    	; 0x732e <_ZN4Wind12calcWindDataEv+0x1ee>
					model->setWindAverage(model->getWindFactor() *(0.0045*(windSpeedRpm*windSpeedRpm) + 1.9099*(windSpeedRpm) + 0.9638));
    72ba:	ce 01       	movw	r24, r28
    72bc:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <_ZN14FreeBoardModel13getWindFactorEv>
    72c0:	6b 01       	movw	r12, r22
    72c2:	7c 01       	movw	r14, r24
    72c4:	60 91 53 10 	lds	r22, 0x1053
    72c8:	70 91 54 10 	lds	r23, 0x1054
    72cc:	80 91 55 10 	lds	r24, 0x1055
    72d0:	90 91 56 10 	lds	r25, 0x1056
    72d4:	20 91 53 10 	lds	r18, 0x1053
    72d8:	30 91 54 10 	lds	r19, 0x1054
    72dc:	40 91 55 10 	lds	r20, 0x1055
    72e0:	50 91 56 10 	lds	r21, 0x1056
    72e4:	40 90 53 10 	lds	r4, 0x1053
    72e8:	50 90 54 10 	lds	r5, 0x1054
    72ec:	60 90 55 10 	lds	r6, 0x1055
    72f0:	70 90 56 10 	lds	r7, 0x1056
    72f4:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    72f8:	2c eb       	ldi	r18, 0xBC	; 188
    72fa:	34 e7       	ldi	r19, 0x74	; 116
    72fc:	43 e9       	ldi	r20, 0x93	; 147
    72fe:	5b e3       	ldi	r21, 0x3B	; 59
    7300:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    7304:	4b 01       	movw	r8, r22
    7306:	5c 01       	movw	r10, r24
    7308:	2a e9       	ldi	r18, 0x9A	; 154
    730a:	37 e7       	ldi	r19, 0x77	; 119
    730c:	44 ef       	ldi	r20, 0xF4	; 244
    730e:	5f e3       	ldi	r21, 0x3F	; 63
    7310:	c3 01       	movw	r24, r6
    7312:	b2 01       	movw	r22, r4
    7314:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    7318:	9b 01       	movw	r18, r22
    731a:	ac 01       	movw	r20, r24
    731c:	c5 01       	movw	r24, r10
    731e:	b4 01       	movw	r22, r8
    7320:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    7324:	29 e9       	ldi	r18, 0x99	; 153
    7326:	3b eb       	ldi	r19, 0xBB	; 187
    7328:	46 e7       	ldi	r20, 0x76	; 118
    732a:	5f e3       	ldi	r21, 0x3F	; 63
    732c:	39 c0       	rjmp	.+114    	; 0x73a0 <_ZN4Wind12calcWindDataEv+0x260>
				}else{
					model->setWindAverage(model->getWindFactor() *(0.09593*(windSpeedRpm*windSpeedRpm) - 8.3147*(windSpeedRpm) + 286.65));
    732e:	ce 01       	movw	r24, r28
    7330:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <_ZN14FreeBoardModel13getWindFactorEv>
    7334:	6b 01       	movw	r12, r22
    7336:	7c 01       	movw	r14, r24
    7338:	60 91 53 10 	lds	r22, 0x1053
    733c:	70 91 54 10 	lds	r23, 0x1054
    7340:	80 91 55 10 	lds	r24, 0x1055
    7344:	90 91 56 10 	lds	r25, 0x1056
    7348:	20 91 53 10 	lds	r18, 0x1053
    734c:	30 91 54 10 	lds	r19, 0x1054
    7350:	40 91 55 10 	lds	r20, 0x1055
    7354:	50 91 56 10 	lds	r21, 0x1056
    7358:	40 90 53 10 	lds	r4, 0x1053
    735c:	50 90 54 10 	lds	r5, 0x1054
    7360:	60 90 55 10 	lds	r6, 0x1055
    7364:	70 90 56 10 	lds	r7, 0x1056
    7368:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    736c:	23 ef       	ldi	r18, 0xF3	; 243
    736e:	36 e7       	ldi	r19, 0x76	; 118
    7370:	44 ec       	ldi	r20, 0xC4	; 196
    7372:	5d e3       	ldi	r21, 0x3D	; 61
    7374:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    7378:	4b 01       	movw	r8, r22
    737a:	5c 01       	movw	r10, r24
    737c:	23 e0       	ldi	r18, 0x03	; 3
    737e:	39 e0       	ldi	r19, 0x09	; 9
    7380:	45 e0       	ldi	r20, 0x05	; 5
    7382:	51 e4       	ldi	r21, 0x41	; 65
    7384:	c3 01       	movw	r24, r6
    7386:	b2 01       	movw	r22, r4
    7388:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    738c:	9b 01       	movw	r18, r22
    738e:	ac 01       	movw	r20, r24
    7390:	c5 01       	movw	r24, r10
    7392:	b4 01       	movw	r22, r8
    7394:	0e 94 32 3c 	call	0x7864	; 0x7864 <__subsf3>
    7398:	23 e3       	ldi	r18, 0x33	; 51
    739a:	33 e5       	ldi	r19, 0x53	; 83
    739c:	4f e8       	ldi	r20, 0x8F	; 143
    739e:	53 e4       	ldi	r21, 0x43	; 67
    73a0:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    73a4:	9b 01       	movw	r18, r22
    73a6:	ac 01       	movw	r20, r24
    73a8:	c7 01       	movw	r24, r14
    73aa:	b6 01       	movw	r22, r12
    73ac:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    73b0:	ab 01       	movw	r20, r22
    73b2:	bc 01       	movw	r22, r24
    73b4:	f1 01       	movw	r30, r2
    73b6:	80 81       	ld	r24, Z
    73b8:	91 81       	ldd	r25, Z+1	; 0x01
    73ba:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <_ZN14FreeBoardModel14setWindAverageEf>
				}
				//Serial.print(", WindAvg:");
				//		Serial.println(( -0.09515*(windSpeedRpm*windSpeedRpm) + 2.5476*(windSpeedRpm) - 0.1226));
			}
			//update gusts
			if (model->getWindAverage() > model->getWindMax())
    73be:	f1 01       	movw	r30, r2
    73c0:	80 81       	ld	r24, Z
    73c2:	91 81       	ldd	r25, Z+1	; 0x01
    73c4:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <_ZN14FreeBoardModel14getWindAverageEv>
    73c8:	6b 01       	movw	r12, r22
    73ca:	7c 01       	movw	r14, r24
    73cc:	f1 01       	movw	r30, r2
    73ce:	80 81       	ld	r24, Z
    73d0:	91 81       	ldd	r25, Z+1	; 0x01
    73d2:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <_ZN14FreeBoardModel10getWindMaxEv>
    73d6:	bc 01       	movw	r22, r24
    73d8:	88 27       	eor	r24, r24
    73da:	77 fd       	sbrc	r23, 7
    73dc:	80 95       	com	r24
    73de:	98 2f       	mov	r25, r24
    73e0:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__floatsisf>
    73e4:	9b 01       	movw	r18, r22
    73e6:	ac 01       	movw	r20, r24
    73e8:	c7 01       	movw	r24, r14
    73ea:	b6 01       	movw	r22, r12
    73ec:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__gesf2>
    73f0:	18 16       	cp	r1, r24
    73f2:	64 f4       	brge	.+24     	; 0x740c <_ZN4Wind12calcWindDataEv+0x2cc>
				model->setWindMax(model->getWindAverage());
    73f4:	f1 01       	movw	r30, r2
    73f6:	80 81       	ld	r24, Z
    73f8:	91 81       	ldd	r25, Z+1	; 0x01
    73fa:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <_ZN14FreeBoardModel14getWindAverageEv>
    73fe:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__fixsfsi>
    7402:	f1 01       	movw	r30, r2
    7404:	80 81       	ld	r24, Z
    7406:	91 81       	ldd	r25, Z+1	; 0x01
    7408:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <_ZN14FreeBoardModel10setWindMaxEi>
		 */
		datatype getRotationalAverage(){
			float x = 0;
			float y = 0;
			float angle=0;
			for (byte i=0; i<currentSize; i++){
    740c:	a0 90 2a 10 	lds	r10, 0x102A
    7410:	40 90 27 10 	lds	r4, 0x1027
    7414:	50 90 28 10 	lds	r5, 0x1028
    7418:	b1 2c       	mov	r11, r1
		 * return the average of all circular (0-360) values in DEGREES added with an addRotationalValue call
		 * Range is 0-360 DEGREES
		 */
		datatype getRotationalAverage(){
			float x = 0;
			float y = 0;
    741a:	00 e0       	ldi	r16, 0x00	; 0
    741c:	10 e0       	ldi	r17, 0x00	; 0
    741e:	d0 e0       	ldi	r29, 0x00	; 0
    7420:	c0 e0       	ldi	r28, 0x00	; 0
		/*
		 * return the average of all circular (0-360) values in DEGREES added with an addRotationalValue call
		 * Range is 0-360 DEGREES
		 */
		datatype getRotationalAverage(){
			float x = 0;
    7422:	c1 2c       	mov	r12, r1
    7424:	d1 2c       	mov	r13, r1
    7426:	e1 2c       	mov	r14, r1
    7428:	f1 2c       	mov	r15, r1
    742a:	2f c0       	rjmp	.+94     	; 0x748a <_ZN4Wind12calcWindDataEv+0x34a>
			float y = 0;
			float angle=0;
			for (byte i=0; i<currentSize; i++){
				angle=2*PI*values[i];
    742c:	f2 01       	movw	r30, r4
    742e:	61 91       	ld	r22, Z+
    7430:	71 91       	ld	r23, Z+
    7432:	81 91       	ld	r24, Z+
    7434:	91 91       	ld	r25, Z+
    7436:	2f 01       	movw	r4, r30
    7438:	2b ed       	ldi	r18, 0xDB	; 219
    743a:	3f e0       	ldi	r19, 0x0F	; 15
    743c:	49 ec       	ldi	r20, 0xC9	; 201
    743e:	50 e4       	ldi	r21, 0x40	; 64
    7440:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    7444:	3b 01       	movw	r6, r22
    7446:	4c 01       	movw	r8, r24
			    x += cos(angle);
    7448:	77 2d       	mov	r23, r7
    744a:	99 2d       	mov	r25, r9
    744c:	0e 94 fd 3c 	call	0x79fa	; 0x79fa <cos>
    7450:	9b 01       	movw	r18, r22
    7452:	ac 01       	movw	r20, r24
    7454:	6c 2d       	mov	r22, r12
    7456:	7d 2d       	mov	r23, r13
    7458:	8e 2d       	mov	r24, r14
    745a:	9f 2d       	mov	r25, r15
    745c:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    7460:	6b 01       	movw	r12, r22
    7462:	7c 01       	movw	r14, r24
			    y += sin(angle);
    7464:	66 2d       	mov	r22, r6
    7466:	77 2d       	mov	r23, r7
    7468:	88 2d       	mov	r24, r8
    746a:	99 2d       	mov	r25, r9
    746c:	0e 94 6a 3f 	call	0x7ed4	; 0x7ed4 <sin>
    7470:	9b 01       	movw	r18, r22
    7472:	ac 01       	movw	r20, r24
    7474:	fe 01       	movw	r30, r28
    7476:	60 2f       	mov	r22, r16
    7478:	71 2f       	mov	r23, r17
    747a:	8f 2f       	mov	r24, r31
    747c:	9c 2f       	mov	r25, r28
    747e:	0e 94 33 3c 	call	0x7866	; 0x7866 <__addsf3>
    7482:	8b 01       	movw	r16, r22
    7484:	d8 2f       	mov	r29, r24
    7486:	c9 2f       	mov	r28, r25
		 */
		datatype getRotationalAverage(){
			float x = 0;
			float y = 0;
			float angle=0;
			for (byte i=0; i<currentSize; i++){
    7488:	b3 94       	inc	r11
    748a:	ba 10       	cpse	r11, r10
    748c:	cf cf       	rjmp	.-98     	; 0x742c <_ZN4Wind12calcWindDataEv+0x2ec>
				angle=2*PI*values[i];
			    x += cos(angle);
			    y += sin(angle);
			}
			//TODO:watch out for zeros
			if(x==0.0f && y==0.0f){
    748e:	20 e0       	ldi	r18, 0x00	; 0
    7490:	30 e0       	ldi	r19, 0x00	; 0
    7492:	a9 01       	movw	r20, r18
    7494:	6c 2d       	mov	r22, r12
    7496:	7d 2d       	mov	r23, r13
    7498:	8e 2d       	mov	r24, r14
    749a:	9f 2d       	mov	r25, r15
    749c:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    74a0:	81 11       	cpse	r24, r1
    74a2:	0c c0       	rjmp	.+24     	; 0x74bc <_ZN4Wind12calcWindDataEv+0x37c>
    74a4:	20 e0       	ldi	r18, 0x00	; 0
    74a6:	30 e0       	ldi	r19, 0x00	; 0
    74a8:	a9 01       	movw	r20, r18
    74aa:	fe 01       	movw	r30, r28
    74ac:	60 2f       	mov	r22, r16
    74ae:	71 2f       	mov	r23, r17
    74b0:	8f 2f       	mov	r24, r31
    74b2:	9c 2f       	mov	r25, r28
    74b4:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    74b8:	88 23       	and	r24, r24
    74ba:	a1 f0       	breq	.+40     	; 0x74e4 <_ZN4Wind12calcWindDataEv+0x3a4>
				return 0.0f;
			}
			return degrees(atan2(y, x));
    74bc:	2c 2d       	mov	r18, r12
    74be:	3d 2d       	mov	r19, r13
    74c0:	4e 2d       	mov	r20, r14
    74c2:	5f 2d       	mov	r21, r15
    74c4:	fe 01       	movw	r30, r28
    74c6:	60 2f       	mov	r22, r16
    74c8:	71 2f       	mov	r23, r17
    74ca:	8f 2f       	mov	r24, r31
    74cc:	9c 2f       	mov	r25, r28
    74ce:	0e 94 a6 3c 	call	0x794c	; 0x794c <atan2>
    74d2:	21 ee       	ldi	r18, 0xE1	; 225
    74d4:	3e e2       	ldi	r19, 0x2E	; 46
    74d6:	45 e6       	ldi	r20, 0x65	; 101
    74d8:	52 e4       	ldi	r21, 0x42	; 66
    74da:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    74de:	7b 01       	movw	r14, r22
    74e0:	8c 01       	movw	r16, r24
    74e2:	04 c0       	rjmp	.+8      	; 0x74ec <_ZN4Wind12calcWindDataEv+0x3ac>
			    x += cos(angle);
			    y += sin(angle);
			}
			//TODO:watch out for zeros
			if(x==0.0f && y==0.0f){
				return 0.0f;
    74e4:	e1 2c       	mov	r14, r1
    74e6:	f1 2c       	mov	r15, r1
    74e8:	00 e0       	ldi	r16, 0x00	; 0
    74ea:	10 e0       	ldi	r17, 0x00	; 0

			// calc direction, degrees clockwise
			//should round to int, min 1
			int dir = (int)dirList.getRotationalAverage();
			//limit to +-360, after adjust zero
			dir = (dir + model->getWindZeroOffset()) %360;
    74ec:	f1 01       	movw	r30, r2
    74ee:	80 81       	ld	r24, Z
    74f0:	91 81       	ldd	r25, Z+1	; 0x01
    74f2:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <_ZN14FreeBoardModel17getWindZeroOffsetEv>
    74f6:	ec 01       	movw	r28, r24
				model->setWindMax(model->getWindAverage());


			// calc direction, degrees clockwise
			//should round to int, min 1
			int dir = (int)dirList.getRotationalAverage();
    74f8:	6e 2d       	mov	r22, r14
    74fa:	7f 2d       	mov	r23, r15
    74fc:	80 2f       	mov	r24, r16
    74fe:	91 2f       	mov	r25, r17
    7500:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__fixsfsi>
    7504:	cb 01       	movw	r24, r22
			//limit to +-360, after adjust zero
			dir = (dir + model->getWindZeroOffset()) %360;
    7506:	8c 0f       	add	r24, r28
    7508:	9d 1f       	adc	r25, r29
    750a:	68 e6       	ldi	r22, 0x68	; 104
    750c:	71 e0       	ldi	r23, 0x01	; 1
    750e:	0e 94 e8 3f 	call	0x7fd0	; 0x7fd0 <__divmodhi4>
			//if minus, then reverse to +ve
			if (dir<0){
    7512:	97 ff       	sbrs	r25, 7
    7514:	02 c0       	rjmp	.+4      	; 0x751a <_ZN4Wind12calcWindDataEv+0x3da>
				dir = 360+dir;
    7516:	88 59       	subi	r24, 0x98	; 152
    7518:	9e 4f       	sbci	r25, 0xFE	; 254
			}
			model->setWindApparentDir(dir);
    751a:	bc 01       	movw	r22, r24
    751c:	f1 01       	movw	r30, r2
    751e:	80 81       	ld	r24, Z
    7520:	91 81       	ldd	r25, Z+1	; 0x01
    7522:	0e 94 c1 2e 	call	0x5d82	; 0x5d82 <_ZN14FreeBoardModel18setWindApparentDirEi>
		}
}
    7526:	df 91       	pop	r29
    7528:	cf 91       	pop	r28
    752a:	1f 91       	pop	r17
    752c:	0f 91       	pop	r16
    752e:	ff 90       	pop	r15
    7530:	ef 90       	pop	r14
    7532:	df 90       	pop	r13
    7534:	cf 90       	pop	r12
    7536:	bf 90       	pop	r11
    7538:	af 90       	pop	r10
    753a:	9f 90       	pop	r9
    753c:	8f 90       	pop	r8
    753e:	7f 90       	pop	r7
    7540:	6f 90       	pop	r6
    7542:	5f 90       	pop	r5
    7544:	4f 90       	pop	r4
    7546:	3f 90       	pop	r3
    7548:	2f 90       	pop	r2
    754a:	08 95       	ret

0000754c <_GLOBAL__sub_I_lastPulse>:

template<typename datatype>
class AverageList {
	public:
		//<<constructor>>
		AverageList(datatype* storage, byte storageSize) : values(storage) , size(storageSize) { 
    754c:	8d e3       	ldi	r24, 0x3D	; 61
    754e:	90 e1       	ldi	r25, 0x10	; 16
    7550:	90 93 2d 10 	sts	0x102D, r25
    7554:	80 93 2c 10 	sts	0x102C, r24
    7558:	23 e0       	ldi	r18, 0x03	; 3
    755a:	20 93 2e 10 	sts	0x102E, r18
			currentSize = 0; 
    755e:	10 92 2f 10 	sts	0x102F, r1
			currentIndex = 0; 
    7562:	10 92 30 10 	sts	0x1030, r1

template<typename datatype>
class AverageList {
	public:
		//<<constructor>>
		AverageList(datatype* storage, byte storageSize) : values(storage) , size(storageSize) { 
    7566:	81 e3       	ldi	r24, 0x31	; 49
    7568:	90 e1       	ldi	r25, 0x10	; 16
    756a:	90 93 28 10 	sts	0x1028, r25
    756e:	80 93 27 10 	sts	0x1027, r24
    7572:	20 93 29 10 	sts	0x1029, r18
			currentSize = 0; 
    7576:	10 92 2a 10 	sts	0x102A, r1
			currentIndex = 0; 
    757a:	10 92 2b 10 	sts	0x102B, r1
    757e:	08 95       	ret

00007580 <_Z10store_charhP11ring_buffer>:
    7580:	fb 01       	movw	r30, r22
    7582:	e0 5c       	subi	r30, 0xC0	; 192
    7584:	ff 4f       	sbci	r31, 0xFF	; 255
    7586:	20 81       	ld	r18, Z
    7588:	31 81       	ldd	r19, Z+1	; 0x01
    758a:	2f 5f       	subi	r18, 0xFF	; 255
    758c:	3f 4f       	sbci	r19, 0xFF	; 255
    758e:	2f 73       	andi	r18, 0x3F	; 63
    7590:	33 27       	eor	r19, r19
    7592:	db 01       	movw	r26, r22
    7594:	ae 5b       	subi	r26, 0xBE	; 190
    7596:	bf 4f       	sbci	r27, 0xFF	; 255
    7598:	4d 91       	ld	r20, X+
    759a:	5c 91       	ld	r21, X
    759c:	24 17       	cp	r18, r20
    759e:	35 07       	cpc	r19, r21
    75a0:	39 f0       	breq	.+14     	; 0x75b0 <_Z10store_charhP11ring_buffer+0x30>
    75a2:	a0 81       	ld	r26, Z
    75a4:	b1 81       	ldd	r27, Z+1	; 0x01
    75a6:	a6 0f       	add	r26, r22
    75a8:	b7 1f       	adc	r27, r23
    75aa:	8c 93       	st	X, r24
    75ac:	31 83       	std	Z+1, r19	; 0x01
    75ae:	20 83       	st	Z, r18
    75b0:	08 95       	ret

000075b2 <_GLOBAL__sub_I_rx_buffer>:
    75b2:	cf 93       	push	r28
    75b4:	10 92 63 05 	sts	0x0563, r1
    75b8:	10 92 62 05 	sts	0x0562, r1
    75bc:	88 ee       	ldi	r24, 0xE8	; 232
    75be:	93 e0       	ldi	r25, 0x03	; 3
    75c0:	a0 e0       	ldi	r26, 0x00	; 0
    75c2:	b0 e0       	ldi	r27, 0x00	; 0
    75c4:	80 93 64 05 	sts	0x0564, r24
    75c8:	90 93 65 05 	sts	0x0565, r25
    75cc:	a0 93 66 05 	sts	0x0566, r26
    75d0:	b0 93 67 05 	sts	0x0567, r27
    75d4:	20 ee       	ldi	r18, 0xE0	; 224
    75d6:	34 e0       	ldi	r19, 0x04	; 4
    75d8:	30 93 61 05 	sts	0x0561, r19
    75dc:	20 93 60 05 	sts	0x0560, r18
    75e0:	4e e5       	ldi	r20, 0x5E	; 94
    75e2:	57 e0       	ldi	r21, 0x07	; 7
    75e4:	50 93 6d 05 	sts	0x056D, r21
    75e8:	40 93 6c 05 	sts	0x056C, r20
    75ec:	4a e1       	ldi	r20, 0x1A	; 26
    75ee:	57 e0       	ldi	r21, 0x07	; 7
    75f0:	50 93 6f 05 	sts	0x056F, r21
    75f4:	40 93 6e 05 	sts	0x056E, r20
    75f8:	45 ec       	ldi	r20, 0xC5	; 197
    75fa:	50 e0       	ldi	r21, 0x00	; 0
    75fc:	50 93 71 05 	sts	0x0571, r21
    7600:	40 93 70 05 	sts	0x0570, r20
    7604:	44 ec       	ldi	r20, 0xC4	; 196
    7606:	50 e0       	ldi	r21, 0x00	; 0
    7608:	50 93 73 05 	sts	0x0573, r21
    760c:	40 93 72 05 	sts	0x0572, r20
    7610:	40 ec       	ldi	r20, 0xC0	; 192
    7612:	50 e0       	ldi	r21, 0x00	; 0
    7614:	50 93 75 05 	sts	0x0575, r21
    7618:	40 93 74 05 	sts	0x0574, r20
    761c:	41 ec       	ldi	r20, 0xC1	; 193
    761e:	50 e0       	ldi	r21, 0x00	; 0
    7620:	50 93 77 05 	sts	0x0577, r21
    7624:	40 93 76 05 	sts	0x0576, r20
    7628:	42 ec       	ldi	r20, 0xC2	; 194
    762a:	50 e0       	ldi	r21, 0x00	; 0
    762c:	50 93 79 05 	sts	0x0579, r21
    7630:	40 93 78 05 	sts	0x0578, r20
    7634:	46 ec       	ldi	r20, 0xC6	; 198
    7636:	50 e0       	ldi	r21, 0x00	; 0
    7638:	50 93 7b 05 	sts	0x057B, r21
    763c:	40 93 7a 05 	sts	0x057A, r20
    7640:	c4 e0       	ldi	r28, 0x04	; 4
    7642:	c0 93 7c 05 	sts	0x057C, r28
    7646:	f3 e0       	ldi	r31, 0x03	; 3
    7648:	f0 93 7d 05 	sts	0x057D, r31
    764c:	e7 e0       	ldi	r30, 0x07	; 7
    764e:	e0 93 7e 05 	sts	0x057E, r30
    7652:	75 e0       	ldi	r23, 0x05	; 5
    7654:	70 93 7f 05 	sts	0x057F, r23
    7658:	61 e0       	ldi	r22, 0x01	; 1
    765a:	60 93 80 05 	sts	0x0580, r22
    765e:	10 92 41 05 	sts	0x0541, r1
    7662:	10 92 40 05 	sts	0x0540, r1
    7666:	80 93 42 05 	sts	0x0542, r24
    766a:	90 93 43 05 	sts	0x0543, r25
    766e:	a0 93 44 05 	sts	0x0544, r26
    7672:	b0 93 45 05 	sts	0x0545, r27
    7676:	30 93 3f 05 	sts	0x053F, r19
    767a:	20 93 3e 05 	sts	0x053E, r18
    767e:	46 ed       	ldi	r20, 0xD6	; 214
    7680:	56 e0       	ldi	r21, 0x06	; 6
    7682:	50 93 4b 05 	sts	0x054B, r21
    7686:	40 93 4a 05 	sts	0x054A, r20
    768a:	42 e9       	ldi	r20, 0x92	; 146
    768c:	56 e0       	ldi	r21, 0x06	; 6
    768e:	50 93 4d 05 	sts	0x054D, r21
    7692:	40 93 4c 05 	sts	0x054C, r20
    7696:	4d ec       	ldi	r20, 0xCD	; 205
    7698:	50 e0       	ldi	r21, 0x00	; 0
    769a:	50 93 4f 05 	sts	0x054F, r21
    769e:	40 93 4e 05 	sts	0x054E, r20
    76a2:	4c ec       	ldi	r20, 0xCC	; 204
    76a4:	50 e0       	ldi	r21, 0x00	; 0
    76a6:	50 93 51 05 	sts	0x0551, r21
    76aa:	40 93 50 05 	sts	0x0550, r20
    76ae:	48 ec       	ldi	r20, 0xC8	; 200
    76b0:	50 e0       	ldi	r21, 0x00	; 0
    76b2:	50 93 53 05 	sts	0x0553, r21
    76b6:	40 93 52 05 	sts	0x0552, r20
    76ba:	49 ec       	ldi	r20, 0xC9	; 201
    76bc:	50 e0       	ldi	r21, 0x00	; 0
    76be:	50 93 55 05 	sts	0x0555, r21
    76c2:	40 93 54 05 	sts	0x0554, r20
    76c6:	4a ec       	ldi	r20, 0xCA	; 202
    76c8:	50 e0       	ldi	r21, 0x00	; 0
    76ca:	50 93 57 05 	sts	0x0557, r21
    76ce:	40 93 56 05 	sts	0x0556, r20
    76d2:	4e ec       	ldi	r20, 0xCE	; 206
    76d4:	50 e0       	ldi	r21, 0x00	; 0
    76d6:	50 93 59 05 	sts	0x0559, r21
    76da:	40 93 58 05 	sts	0x0558, r20
    76de:	c0 93 5a 05 	sts	0x055A, r28
    76e2:	f0 93 5b 05 	sts	0x055B, r31
    76e6:	e0 93 5c 05 	sts	0x055C, r30
    76ea:	70 93 5d 05 	sts	0x055D, r23
    76ee:	60 93 5e 05 	sts	0x055E, r22
    76f2:	10 92 1f 05 	sts	0x051F, r1
    76f6:	10 92 1e 05 	sts	0x051E, r1
    76fa:	80 93 20 05 	sts	0x0520, r24
    76fe:	90 93 21 05 	sts	0x0521, r25
    7702:	a0 93 22 05 	sts	0x0522, r26
    7706:	b0 93 23 05 	sts	0x0523, r27
    770a:	30 93 1d 05 	sts	0x051D, r19
    770e:	20 93 1c 05 	sts	0x051C, r18
    7712:	4e e4       	ldi	r20, 0x4E	; 78
    7714:	56 e0       	ldi	r21, 0x06	; 6
    7716:	50 93 29 05 	sts	0x0529, r21
    771a:	40 93 28 05 	sts	0x0528, r20
    771e:	4a e0       	ldi	r20, 0x0A	; 10
    7720:	56 e0       	ldi	r21, 0x06	; 6
    7722:	50 93 2b 05 	sts	0x052B, r21
    7726:	40 93 2a 05 	sts	0x052A, r20
    772a:	45 ed       	ldi	r20, 0xD5	; 213
    772c:	50 e0       	ldi	r21, 0x00	; 0
    772e:	50 93 2d 05 	sts	0x052D, r21
    7732:	40 93 2c 05 	sts	0x052C, r20
    7736:	44 ed       	ldi	r20, 0xD4	; 212
    7738:	50 e0       	ldi	r21, 0x00	; 0
    773a:	50 93 2f 05 	sts	0x052F, r21
    773e:	40 93 2e 05 	sts	0x052E, r20
    7742:	40 ed       	ldi	r20, 0xD0	; 208
    7744:	50 e0       	ldi	r21, 0x00	; 0
    7746:	50 93 31 05 	sts	0x0531, r21
    774a:	40 93 30 05 	sts	0x0530, r20
    774e:	41 ed       	ldi	r20, 0xD1	; 209
    7750:	50 e0       	ldi	r21, 0x00	; 0
    7752:	50 93 33 05 	sts	0x0533, r21
    7756:	40 93 32 05 	sts	0x0532, r20
    775a:	42 ed       	ldi	r20, 0xD2	; 210
    775c:	50 e0       	ldi	r21, 0x00	; 0
    775e:	50 93 35 05 	sts	0x0535, r21
    7762:	40 93 34 05 	sts	0x0534, r20
    7766:	46 ed       	ldi	r20, 0xD6	; 214
    7768:	50 e0       	ldi	r21, 0x00	; 0
    776a:	50 93 37 05 	sts	0x0537, r21
    776e:	40 93 36 05 	sts	0x0536, r20
    7772:	c0 93 38 05 	sts	0x0538, r28
    7776:	f0 93 39 05 	sts	0x0539, r31
    777a:	e0 93 3a 05 	sts	0x053A, r30
    777e:	70 93 3b 05 	sts	0x053B, r23
    7782:	60 93 3c 05 	sts	0x053C, r22
    7786:	10 92 fd 04 	sts	0x04FD, r1
    778a:	10 92 fc 04 	sts	0x04FC, r1
    778e:	80 93 fe 04 	sts	0x04FE, r24
    7792:	90 93 ff 04 	sts	0x04FF, r25
    7796:	a0 93 00 05 	sts	0x0500, r26
    779a:	b0 93 01 05 	sts	0x0501, r27
    779e:	30 93 fb 04 	sts	0x04FB, r19
    77a2:	20 93 fa 04 	sts	0x04FA, r18
    77a6:	86 ec       	ldi	r24, 0xC6	; 198
    77a8:	95 e0       	ldi	r25, 0x05	; 5
    77aa:	90 93 07 05 	sts	0x0507, r25
    77ae:	80 93 06 05 	sts	0x0506, r24
    77b2:	82 e8       	ldi	r24, 0x82	; 130
    77b4:	95 e0       	ldi	r25, 0x05	; 5
    77b6:	90 93 09 05 	sts	0x0509, r25
    77ba:	80 93 08 05 	sts	0x0508, r24
    77be:	85 e3       	ldi	r24, 0x35	; 53
    77c0:	91 e0       	ldi	r25, 0x01	; 1
    77c2:	90 93 0b 05 	sts	0x050B, r25
    77c6:	80 93 0a 05 	sts	0x050A, r24
    77ca:	84 e3       	ldi	r24, 0x34	; 52
    77cc:	91 e0       	ldi	r25, 0x01	; 1
    77ce:	90 93 0d 05 	sts	0x050D, r25
    77d2:	80 93 0c 05 	sts	0x050C, r24
    77d6:	80 e3       	ldi	r24, 0x30	; 48
    77d8:	91 e0       	ldi	r25, 0x01	; 1
    77da:	90 93 0f 05 	sts	0x050F, r25
    77de:	80 93 0e 05 	sts	0x050E, r24
    77e2:	81 e3       	ldi	r24, 0x31	; 49
    77e4:	91 e0       	ldi	r25, 0x01	; 1
    77e6:	90 93 11 05 	sts	0x0511, r25
    77ea:	80 93 10 05 	sts	0x0510, r24
    77ee:	82 e3       	ldi	r24, 0x32	; 50
    77f0:	91 e0       	ldi	r25, 0x01	; 1
    77f2:	90 93 13 05 	sts	0x0513, r25
    77f6:	80 93 12 05 	sts	0x0512, r24
    77fa:	86 e3       	ldi	r24, 0x36	; 54
    77fc:	91 e0       	ldi	r25, 0x01	; 1
    77fe:	90 93 15 05 	sts	0x0515, r25
    7802:	80 93 14 05 	sts	0x0514, r24
    7806:	c0 93 16 05 	sts	0x0516, r28
    780a:	f0 93 17 05 	sts	0x0517, r31
    780e:	e0 93 18 05 	sts	0x0518, r30
    7812:	70 93 19 05 	sts	0x0519, r23
    7816:	60 93 1a 05 	sts	0x051A, r22
    781a:	cf 91       	pop	r28
    781c:	08 95       	ret

0000781e <_ZN5Print5writeEPKc>:
    781e:	61 15       	cp	r22, r1
    7820:	71 05       	cpc	r23, r1
    7822:	81 f0       	breq	.+32     	; 0x7844 <_ZN5Print5writeEPKc+0x26>
    7824:	db 01       	movw	r26, r22
    7826:	0d 90       	ld	r0, X+
    7828:	00 20       	and	r0, r0
    782a:	e9 f7       	brne	.-6      	; 0x7826 <_ZN5Print5writeEPKc+0x8>
    782c:	ad 01       	movw	r20, r26
    782e:	41 50       	subi	r20, 0x01	; 1
    7830:	51 09       	sbc	r21, r1
    7832:	46 1b       	sub	r20, r22
    7834:	57 0b       	sbc	r21, r23
    7836:	dc 01       	movw	r26, r24
    7838:	ed 91       	ld	r30, X+
    783a:	fc 91       	ld	r31, X
    783c:	02 80       	ldd	r0, Z+2	; 0x02
    783e:	f3 81       	ldd	r31, Z+3	; 0x03
    7840:	e0 2d       	mov	r30, r0
    7842:	19 94       	eijmp
    7844:	80 e0       	ldi	r24, 0x00	; 0
    7846:	90 e0       	ldi	r25, 0x00	; 0
    7848:	08 95       	ret

0000784a <main>:
    784a:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <init>
    784e:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <setup>
    7852:	cc e3       	ldi	r28, 0x3C	; 60
    7854:	d3 e0       	ldi	r29, 0x03	; 3
    7856:	0e 94 26 30 	call	0x604c	; 0x604c <loop>
    785a:	20 97       	sbiw	r28, 0x00	; 0
    785c:	e1 f3       	breq	.-8      	; 0x7856 <main+0xc>
    785e:	0e 94 3c 03 	call	0x678	; 0x678 <_Z14serialEventRunv>
    7862:	f9 cf       	rjmp	.-14     	; 0x7856 <main+0xc>

00007864 <__subsf3>:
    7864:	50 58       	subi	r21, 0x80	; 128

00007866 <__addsf3>:
    7866:	bb 27       	eor	r27, r27
    7868:	aa 27       	eor	r26, r26
    786a:	0e d0       	rcall	.+28     	; 0x7888 <__addsf3x>
    786c:	63 c2       	rjmp	.+1222   	; 0x7d34 <__fp_round>
    786e:	2c d2       	rcall	.+1112   	; 0x7cc8 <__fp_pscA>
    7870:	30 f0       	brcs	.+12     	; 0x787e <__addsf3+0x18>
    7872:	31 d2       	rcall	.+1122   	; 0x7cd6 <__fp_pscB>
    7874:	20 f0       	brcs	.+8      	; 0x787e <__addsf3+0x18>
    7876:	31 f4       	brne	.+12     	; 0x7884 <__addsf3+0x1e>
    7878:	9f 3f       	cpi	r25, 0xFF	; 255
    787a:	11 f4       	brne	.+4      	; 0x7880 <__addsf3+0x1a>
    787c:	1e f4       	brtc	.+6      	; 0x7884 <__addsf3+0x1e>
    787e:	fc c1       	rjmp	.+1016   	; 0x7c78 <__fp_nan>
    7880:	0e f4       	brtc	.+2      	; 0x7884 <__addsf3+0x1e>
    7882:	e0 95       	com	r30
    7884:	e7 fb       	bst	r30, 7
    7886:	c9 c1       	rjmp	.+914    	; 0x7c1a <__fp_inf>

00007888 <__addsf3x>:
    7888:	e9 2f       	mov	r30, r25
    788a:	76 d2       	rcall	.+1260   	; 0x7d78 <__fp_split3>
    788c:	80 f3       	brcs	.-32     	; 0x786e <__addsf3+0x8>
    788e:	ba 17       	cp	r27, r26
    7890:	62 07       	cpc	r22, r18
    7892:	73 07       	cpc	r23, r19
    7894:	84 07       	cpc	r24, r20
    7896:	95 07       	cpc	r25, r21
    7898:	18 f0       	brcs	.+6      	; 0x78a0 <__addsf3x+0x18>
    789a:	71 f4       	brne	.+28     	; 0x78b8 <__addsf3x+0x30>
    789c:	9e f5       	brtc	.+102    	; 0x7904 <__addsf3x+0x7c>
    789e:	a5 c2       	rjmp	.+1354   	; 0x7dea <__fp_zero>
    78a0:	0e f4       	brtc	.+2      	; 0x78a4 <__addsf3x+0x1c>
    78a2:	e0 95       	com	r30
    78a4:	0b 2e       	mov	r0, r27
    78a6:	ba 2f       	mov	r27, r26
    78a8:	a0 2d       	mov	r26, r0
    78aa:	0b 01       	movw	r0, r22
    78ac:	b9 01       	movw	r22, r18
    78ae:	90 01       	movw	r18, r0
    78b0:	0c 01       	movw	r0, r24
    78b2:	ca 01       	movw	r24, r20
    78b4:	a0 01       	movw	r20, r0
    78b6:	11 24       	eor	r1, r1
    78b8:	ff 27       	eor	r31, r31
    78ba:	59 1b       	sub	r21, r25
    78bc:	99 f0       	breq	.+38     	; 0x78e4 <__addsf3x+0x5c>
    78be:	59 3f       	cpi	r21, 0xF9	; 249
    78c0:	50 f4       	brcc	.+20     	; 0x78d6 <__addsf3x+0x4e>
    78c2:	50 3e       	cpi	r21, 0xE0	; 224
    78c4:	68 f1       	brcs	.+90     	; 0x7920 <__addsf3x+0x98>
    78c6:	1a 16       	cp	r1, r26
    78c8:	f0 40       	sbci	r31, 0x00	; 0
    78ca:	a2 2f       	mov	r26, r18
    78cc:	23 2f       	mov	r18, r19
    78ce:	34 2f       	mov	r19, r20
    78d0:	44 27       	eor	r20, r20
    78d2:	58 5f       	subi	r21, 0xF8	; 248
    78d4:	f3 cf       	rjmp	.-26     	; 0x78bc <__addsf3x+0x34>
    78d6:	46 95       	lsr	r20
    78d8:	37 95       	ror	r19
    78da:	27 95       	ror	r18
    78dc:	a7 95       	ror	r26
    78de:	f0 40       	sbci	r31, 0x00	; 0
    78e0:	53 95       	inc	r21
    78e2:	c9 f7       	brne	.-14     	; 0x78d6 <__addsf3x+0x4e>
    78e4:	7e f4       	brtc	.+30     	; 0x7904 <__addsf3x+0x7c>
    78e6:	1f 16       	cp	r1, r31
    78e8:	ba 0b       	sbc	r27, r26
    78ea:	62 0b       	sbc	r22, r18
    78ec:	73 0b       	sbc	r23, r19
    78ee:	84 0b       	sbc	r24, r20
    78f0:	ba f0       	brmi	.+46     	; 0x7920 <__addsf3x+0x98>
    78f2:	91 50       	subi	r25, 0x01	; 1
    78f4:	a1 f0       	breq	.+40     	; 0x791e <__addsf3x+0x96>
    78f6:	ff 0f       	add	r31, r31
    78f8:	bb 1f       	adc	r27, r27
    78fa:	66 1f       	adc	r22, r22
    78fc:	77 1f       	adc	r23, r23
    78fe:	88 1f       	adc	r24, r24
    7900:	c2 f7       	brpl	.-16     	; 0x78f2 <__addsf3x+0x6a>
    7902:	0e c0       	rjmp	.+28     	; 0x7920 <__addsf3x+0x98>
    7904:	ba 0f       	add	r27, r26
    7906:	62 1f       	adc	r22, r18
    7908:	73 1f       	adc	r23, r19
    790a:	84 1f       	adc	r24, r20
    790c:	48 f4       	brcc	.+18     	; 0x7920 <__addsf3x+0x98>
    790e:	87 95       	ror	r24
    7910:	77 95       	ror	r23
    7912:	67 95       	ror	r22
    7914:	b7 95       	ror	r27
    7916:	f7 95       	ror	r31
    7918:	9e 3f       	cpi	r25, 0xFE	; 254
    791a:	08 f0       	brcs	.+2      	; 0x791e <__addsf3x+0x96>
    791c:	b3 cf       	rjmp	.-154    	; 0x7884 <__addsf3+0x1e>
    791e:	93 95       	inc	r25
    7920:	88 0f       	add	r24, r24
    7922:	08 f0       	brcs	.+2      	; 0x7926 <__addsf3x+0x9e>
    7924:	99 27       	eor	r25, r25
    7926:	ee 0f       	add	r30, r30
    7928:	97 95       	ror	r25
    792a:	87 95       	ror	r24
    792c:	08 95       	ret
    792e:	cc d1       	rcall	.+920    	; 0x7cc8 <__fp_pscA>
    7930:	58 f0       	brcs	.+22     	; 0x7948 <__addsf3x+0xc0>
    7932:	80 e8       	ldi	r24, 0x80	; 128
    7934:	91 e0       	ldi	r25, 0x01	; 1
    7936:	09 f4       	brne	.+2      	; 0x793a <__addsf3x+0xb2>
    7938:	9e ef       	ldi	r25, 0xFE	; 254
    793a:	cd d1       	rcall	.+922    	; 0x7cd6 <__fp_pscB>
    793c:	28 f0       	brcs	.+10     	; 0x7948 <__addsf3x+0xc0>
    793e:	40 e8       	ldi	r20, 0x80	; 128
    7940:	51 e0       	ldi	r21, 0x01	; 1
    7942:	59 f4       	brne	.+22     	; 0x795a <atan2+0xe>
    7944:	5e ef       	ldi	r21, 0xFE	; 254
    7946:	09 c0       	rjmp	.+18     	; 0x795a <atan2+0xe>
    7948:	97 c1       	rjmp	.+814    	; 0x7c78 <__fp_nan>
    794a:	4f c2       	rjmp	.+1182   	; 0x7dea <__fp_zero>

0000794c <atan2>:
    794c:	e9 2f       	mov	r30, r25
    794e:	e0 78       	andi	r30, 0x80	; 128
    7950:	13 d2       	rcall	.+1062   	; 0x7d78 <__fp_split3>
    7952:	68 f3       	brcs	.-38     	; 0x792e <__addsf3x+0xa6>
    7954:	09 2e       	mov	r0, r25
    7956:	05 2a       	or	r0, r21
    7958:	c1 f3       	breq	.-16     	; 0x794a <__addsf3x+0xc2>
    795a:	26 17       	cp	r18, r22
    795c:	37 07       	cpc	r19, r23
    795e:	48 07       	cpc	r20, r24
    7960:	59 07       	cpc	r21, r25
    7962:	38 f0       	brcs	.+14     	; 0x7972 <atan2+0x26>
    7964:	0e 2e       	mov	r0, r30
    7966:	07 f8       	bld	r0, 7
    7968:	e0 25       	eor	r30, r0
    796a:	69 f0       	breq	.+26     	; 0x7986 <atan2+0x3a>
    796c:	e0 25       	eor	r30, r0
    796e:	e0 64       	ori	r30, 0x40	; 64
    7970:	0a c0       	rjmp	.+20     	; 0x7986 <atan2+0x3a>
    7972:	ef 63       	ori	r30, 0x3F	; 63
    7974:	07 f8       	bld	r0, 7
    7976:	00 94       	com	r0
    7978:	07 fa       	bst	r0, 7
    797a:	db 01       	movw	r26, r22
    797c:	b9 01       	movw	r22, r18
    797e:	9d 01       	movw	r18, r26
    7980:	dc 01       	movw	r26, r24
    7982:	ca 01       	movw	r24, r20
    7984:	ad 01       	movw	r20, r26
    7986:	ef 93       	push	r30
    7988:	4a d0       	rcall	.+148    	; 0x7a1e <__divsf3_pse>
    798a:	d4 d1       	rcall	.+936    	; 0x7d34 <__fp_round>
    798c:	0a d0       	rcall	.+20     	; 0x79a2 <atan>
    798e:	5f 91       	pop	r21
    7990:	55 23       	and	r21, r21
    7992:	31 f0       	breq	.+12     	; 0x79a0 <atan2+0x54>
    7994:	2b ed       	ldi	r18, 0xDB	; 219
    7996:	3f e0       	ldi	r19, 0x0F	; 15
    7998:	49 e4       	ldi	r20, 0x49	; 73
    799a:	50 fd       	sbrc	r21, 0
    799c:	49 ec       	ldi	r20, 0xC9	; 201
    799e:	63 cf       	rjmp	.-314    	; 0x7866 <__addsf3>
    79a0:	08 95       	ret

000079a2 <atan>:
    79a2:	df 93       	push	r29
    79a4:	dd 27       	eor	r29, r29
    79a6:	b9 2f       	mov	r27, r25
    79a8:	bf 77       	andi	r27, 0x7F	; 127
    79aa:	40 e8       	ldi	r20, 0x80	; 128
    79ac:	5f e3       	ldi	r21, 0x3F	; 63
    79ae:	16 16       	cp	r1, r22
    79b0:	17 06       	cpc	r1, r23
    79b2:	48 07       	cpc	r20, r24
    79b4:	5b 07       	cpc	r21, r27
    79b6:	10 f4       	brcc	.+4      	; 0x79bc <atan+0x1a>
    79b8:	d9 2f       	mov	r29, r25
    79ba:	22 d2       	rcall	.+1092   	; 0x7e00 <inverse>
    79bc:	9f 93       	push	r25
    79be:	8f 93       	push	r24
    79c0:	7f 93       	push	r23
    79c2:	6f 93       	push	r22
    79c4:	cf d2       	rcall	.+1438   	; 0x7f64 <square>
    79c6:	e4 ee       	ldi	r30, 0xE4	; 228
    79c8:	f0 e0       	ldi	r31, 0x00	; 0
    79ca:	59 d1       	rcall	.+690    	; 0x7c7e <__fp_powser>
    79cc:	b3 d1       	rcall	.+870    	; 0x7d34 <__fp_round>
    79ce:	2f 91       	pop	r18
    79d0:	3f 91       	pop	r19
    79d2:	4f 91       	pop	r20
    79d4:	5f 91       	pop	r21
    79d6:	27 d2       	rcall	.+1102   	; 0x7e26 <__mulsf3x>
    79d8:	dd 23       	and	r29, r29
    79da:	49 f0       	breq	.+18     	; 0x79ee <atan+0x4c>
    79dc:	90 58       	subi	r25, 0x80	; 128
    79de:	a2 ea       	ldi	r26, 0xA2	; 162
    79e0:	2a ed       	ldi	r18, 0xDA	; 218
    79e2:	3f e0       	ldi	r19, 0x0F	; 15
    79e4:	49 ec       	ldi	r20, 0xC9	; 201
    79e6:	5f e3       	ldi	r21, 0x3F	; 63
    79e8:	d0 78       	andi	r29, 0x80	; 128
    79ea:	5d 27       	eor	r21, r29
    79ec:	4d df       	rcall	.-358    	; 0x7888 <__addsf3x>
    79ee:	df 91       	pop	r29
    79f0:	a1 c1       	rjmp	.+834    	; 0x7d34 <__fp_round>

000079f2 <__cmpsf2>:
    79f2:	ef d0       	rcall	.+478    	; 0x7bd2 <__fp_cmp>
    79f4:	08 f4       	brcc	.+2      	; 0x79f8 <__cmpsf2+0x6>
    79f6:	81 e0       	ldi	r24, 0x01	; 1
    79f8:	08 95       	ret

000079fa <cos>:
    79fa:	75 d1       	rcall	.+746    	; 0x7ce6 <__fp_rempio2>
    79fc:	e3 95       	inc	r30
    79fe:	ab c1       	rjmp	.+854    	; 0x7d56 <__fp_sinus>

00007a00 <__divsf3>:
    7a00:	0c d0       	rcall	.+24     	; 0x7a1a <__divsf3x>
    7a02:	98 c1       	rjmp	.+816    	; 0x7d34 <__fp_round>
    7a04:	68 d1       	rcall	.+720    	; 0x7cd6 <__fp_pscB>
    7a06:	40 f0       	brcs	.+16     	; 0x7a18 <__divsf3+0x18>
    7a08:	5f d1       	rcall	.+702    	; 0x7cc8 <__fp_pscA>
    7a0a:	30 f0       	brcs	.+12     	; 0x7a18 <__divsf3+0x18>
    7a0c:	21 f4       	brne	.+8      	; 0x7a16 <__divsf3+0x16>
    7a0e:	5f 3f       	cpi	r21, 0xFF	; 255
    7a10:	19 f0       	breq	.+6      	; 0x7a18 <__divsf3+0x18>
    7a12:	03 c1       	rjmp	.+518    	; 0x7c1a <__fp_inf>
    7a14:	51 11       	cpse	r21, r1
    7a16:	ea c1       	rjmp	.+980    	; 0x7dec <__fp_szero>
    7a18:	2f c1       	rjmp	.+606    	; 0x7c78 <__fp_nan>

00007a1a <__divsf3x>:
    7a1a:	ae d1       	rcall	.+860    	; 0x7d78 <__fp_split3>
    7a1c:	98 f3       	brcs	.-26     	; 0x7a04 <__divsf3+0x4>

00007a1e <__divsf3_pse>:
    7a1e:	99 23       	and	r25, r25
    7a20:	c9 f3       	breq	.-14     	; 0x7a14 <__divsf3+0x14>
    7a22:	55 23       	and	r21, r21
    7a24:	b1 f3       	breq	.-20     	; 0x7a12 <__divsf3+0x12>
    7a26:	95 1b       	sub	r25, r21
    7a28:	55 0b       	sbc	r21, r21
    7a2a:	bb 27       	eor	r27, r27
    7a2c:	aa 27       	eor	r26, r26
    7a2e:	62 17       	cp	r22, r18
    7a30:	73 07       	cpc	r23, r19
    7a32:	84 07       	cpc	r24, r20
    7a34:	38 f0       	brcs	.+14     	; 0x7a44 <__divsf3_pse+0x26>
    7a36:	9f 5f       	subi	r25, 0xFF	; 255
    7a38:	5f 4f       	sbci	r21, 0xFF	; 255
    7a3a:	22 0f       	add	r18, r18
    7a3c:	33 1f       	adc	r19, r19
    7a3e:	44 1f       	adc	r20, r20
    7a40:	aa 1f       	adc	r26, r26
    7a42:	a9 f3       	breq	.-22     	; 0x7a2e <__divsf3_pse+0x10>
    7a44:	33 d0       	rcall	.+102    	; 0x7aac <__divsf3_pse+0x8e>
    7a46:	0e 2e       	mov	r0, r30
    7a48:	3a f0       	brmi	.+14     	; 0x7a58 <__divsf3_pse+0x3a>
    7a4a:	e0 e8       	ldi	r30, 0x80	; 128
    7a4c:	30 d0       	rcall	.+96     	; 0x7aae <__divsf3_pse+0x90>
    7a4e:	91 50       	subi	r25, 0x01	; 1
    7a50:	50 40       	sbci	r21, 0x00	; 0
    7a52:	e6 95       	lsr	r30
    7a54:	00 1c       	adc	r0, r0
    7a56:	ca f7       	brpl	.-14     	; 0x7a4a <__divsf3_pse+0x2c>
    7a58:	29 d0       	rcall	.+82     	; 0x7aac <__divsf3_pse+0x8e>
    7a5a:	fe 2f       	mov	r31, r30
    7a5c:	27 d0       	rcall	.+78     	; 0x7aac <__divsf3_pse+0x8e>
    7a5e:	66 0f       	add	r22, r22
    7a60:	77 1f       	adc	r23, r23
    7a62:	88 1f       	adc	r24, r24
    7a64:	bb 1f       	adc	r27, r27
    7a66:	26 17       	cp	r18, r22
    7a68:	37 07       	cpc	r19, r23
    7a6a:	48 07       	cpc	r20, r24
    7a6c:	ab 07       	cpc	r26, r27
    7a6e:	b0 e8       	ldi	r27, 0x80	; 128
    7a70:	09 f0       	breq	.+2      	; 0x7a74 <__divsf3_pse+0x56>
    7a72:	bb 0b       	sbc	r27, r27
    7a74:	80 2d       	mov	r24, r0
    7a76:	bf 01       	movw	r22, r30
    7a78:	ff 27       	eor	r31, r31
    7a7a:	93 58       	subi	r25, 0x83	; 131
    7a7c:	5f 4f       	sbci	r21, 0xFF	; 255
    7a7e:	2a f0       	brmi	.+10     	; 0x7a8a <__divsf3_pse+0x6c>
    7a80:	9e 3f       	cpi	r25, 0xFE	; 254
    7a82:	51 05       	cpc	r21, r1
    7a84:	68 f0       	brcs	.+26     	; 0x7aa0 <__divsf3_pse+0x82>
    7a86:	c9 c0       	rjmp	.+402    	; 0x7c1a <__fp_inf>
    7a88:	b1 c1       	rjmp	.+866    	; 0x7dec <__fp_szero>
    7a8a:	5f 3f       	cpi	r21, 0xFF	; 255
    7a8c:	ec f3       	brlt	.-6      	; 0x7a88 <__divsf3_pse+0x6a>
    7a8e:	98 3e       	cpi	r25, 0xE8	; 232
    7a90:	dc f3       	brlt	.-10     	; 0x7a88 <__divsf3_pse+0x6a>
    7a92:	86 95       	lsr	r24
    7a94:	77 95       	ror	r23
    7a96:	67 95       	ror	r22
    7a98:	b7 95       	ror	r27
    7a9a:	f7 95       	ror	r31
    7a9c:	9f 5f       	subi	r25, 0xFF	; 255
    7a9e:	c9 f7       	brne	.-14     	; 0x7a92 <__divsf3_pse+0x74>
    7aa0:	88 0f       	add	r24, r24
    7aa2:	91 1d       	adc	r25, r1
    7aa4:	96 95       	lsr	r25
    7aa6:	87 95       	ror	r24
    7aa8:	97 f9       	bld	r25, 7
    7aaa:	08 95       	ret
    7aac:	e1 e0       	ldi	r30, 0x01	; 1
    7aae:	66 0f       	add	r22, r22
    7ab0:	77 1f       	adc	r23, r23
    7ab2:	88 1f       	adc	r24, r24
    7ab4:	bb 1f       	adc	r27, r27
    7ab6:	62 17       	cp	r22, r18
    7ab8:	73 07       	cpc	r23, r19
    7aba:	84 07       	cpc	r24, r20
    7abc:	ba 07       	cpc	r27, r26
    7abe:	20 f0       	brcs	.+8      	; 0x7ac8 <__divsf3_pse+0xaa>
    7ac0:	62 1b       	sub	r22, r18
    7ac2:	73 0b       	sbc	r23, r19
    7ac4:	84 0b       	sbc	r24, r20
    7ac6:	ba 0b       	sbc	r27, r26
    7ac8:	ee 1f       	adc	r30, r30
    7aca:	88 f7       	brcc	.-30     	; 0x7aae <__divsf3_pse+0x90>
    7acc:	e0 95       	com	r30
    7ace:	08 95       	ret

00007ad0 <__fixsfsi>:
    7ad0:	04 d0       	rcall	.+8      	; 0x7ada <__fixunssfsi>
    7ad2:	68 94       	set
    7ad4:	b1 11       	cpse	r27, r1
    7ad6:	8a c1       	rjmp	.+788    	; 0x7dec <__fp_szero>
    7ad8:	08 95       	ret

00007ada <__fixunssfsi>:
    7ada:	56 d1       	rcall	.+684    	; 0x7d88 <__fp_splitA>
    7adc:	88 f0       	brcs	.+34     	; 0x7b00 <__fixunssfsi+0x26>
    7ade:	9f 57       	subi	r25, 0x7F	; 127
    7ae0:	90 f0       	brcs	.+36     	; 0x7b06 <__fixunssfsi+0x2c>
    7ae2:	b9 2f       	mov	r27, r25
    7ae4:	99 27       	eor	r25, r25
    7ae6:	b7 51       	subi	r27, 0x17	; 23
    7ae8:	a0 f0       	brcs	.+40     	; 0x7b12 <__fixunssfsi+0x38>
    7aea:	d1 f0       	breq	.+52     	; 0x7b20 <__fixunssfsi+0x46>
    7aec:	66 0f       	add	r22, r22
    7aee:	77 1f       	adc	r23, r23
    7af0:	88 1f       	adc	r24, r24
    7af2:	99 1f       	adc	r25, r25
    7af4:	1a f0       	brmi	.+6      	; 0x7afc <__fixunssfsi+0x22>
    7af6:	ba 95       	dec	r27
    7af8:	c9 f7       	brne	.-14     	; 0x7aec <__fixunssfsi+0x12>
    7afa:	12 c0       	rjmp	.+36     	; 0x7b20 <__fixunssfsi+0x46>
    7afc:	b1 30       	cpi	r27, 0x01	; 1
    7afe:	81 f0       	breq	.+32     	; 0x7b20 <__fixunssfsi+0x46>
    7b00:	74 d1       	rcall	.+744    	; 0x7dea <__fp_zero>
    7b02:	b1 e0       	ldi	r27, 0x01	; 1
    7b04:	08 95       	ret
    7b06:	71 c1       	rjmp	.+738    	; 0x7dea <__fp_zero>
    7b08:	67 2f       	mov	r22, r23
    7b0a:	78 2f       	mov	r23, r24
    7b0c:	88 27       	eor	r24, r24
    7b0e:	b8 5f       	subi	r27, 0xF8	; 248
    7b10:	39 f0       	breq	.+14     	; 0x7b20 <__fixunssfsi+0x46>
    7b12:	b9 3f       	cpi	r27, 0xF9	; 249
    7b14:	cc f3       	brlt	.-14     	; 0x7b08 <__fixunssfsi+0x2e>
    7b16:	86 95       	lsr	r24
    7b18:	77 95       	ror	r23
    7b1a:	67 95       	ror	r22
    7b1c:	b3 95       	inc	r27
    7b1e:	d9 f7       	brne	.-10     	; 0x7b16 <__fixunssfsi+0x3c>
    7b20:	3e f4       	brtc	.+14     	; 0x7b30 <__fixunssfsi+0x56>
    7b22:	90 95       	com	r25
    7b24:	80 95       	com	r24
    7b26:	70 95       	com	r23
    7b28:	61 95       	neg	r22
    7b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    7b2c:	8f 4f       	sbci	r24, 0xFF	; 255
    7b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    7b30:	08 95       	ret

00007b32 <__floatunsisf>:
    7b32:	e8 94       	clt
    7b34:	09 c0       	rjmp	.+18     	; 0x7b48 <__floatsisf+0x12>

00007b36 <__floatsisf>:
    7b36:	97 fb       	bst	r25, 7
    7b38:	3e f4       	brtc	.+14     	; 0x7b48 <__floatsisf+0x12>
    7b3a:	90 95       	com	r25
    7b3c:	80 95       	com	r24
    7b3e:	70 95       	com	r23
    7b40:	61 95       	neg	r22
    7b42:	7f 4f       	sbci	r23, 0xFF	; 255
    7b44:	8f 4f       	sbci	r24, 0xFF	; 255
    7b46:	9f 4f       	sbci	r25, 0xFF	; 255
    7b48:	99 23       	and	r25, r25
    7b4a:	a9 f0       	breq	.+42     	; 0x7b76 <__floatsisf+0x40>
    7b4c:	f9 2f       	mov	r31, r25
    7b4e:	96 e9       	ldi	r25, 0x96	; 150
    7b50:	bb 27       	eor	r27, r27
    7b52:	93 95       	inc	r25
    7b54:	f6 95       	lsr	r31
    7b56:	87 95       	ror	r24
    7b58:	77 95       	ror	r23
    7b5a:	67 95       	ror	r22
    7b5c:	b7 95       	ror	r27
    7b5e:	f1 11       	cpse	r31, r1
    7b60:	f8 cf       	rjmp	.-16     	; 0x7b52 <__floatsisf+0x1c>
    7b62:	fa f4       	brpl	.+62     	; 0x7ba2 <__floatsisf+0x6c>
    7b64:	bb 0f       	add	r27, r27
    7b66:	11 f4       	brne	.+4      	; 0x7b6c <__floatsisf+0x36>
    7b68:	60 ff       	sbrs	r22, 0
    7b6a:	1b c0       	rjmp	.+54     	; 0x7ba2 <__floatsisf+0x6c>
    7b6c:	6f 5f       	subi	r22, 0xFF	; 255
    7b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    7b70:	8f 4f       	sbci	r24, 0xFF	; 255
    7b72:	9f 4f       	sbci	r25, 0xFF	; 255
    7b74:	16 c0       	rjmp	.+44     	; 0x7ba2 <__floatsisf+0x6c>
    7b76:	88 23       	and	r24, r24
    7b78:	11 f0       	breq	.+4      	; 0x7b7e <__floatsisf+0x48>
    7b7a:	96 e9       	ldi	r25, 0x96	; 150
    7b7c:	11 c0       	rjmp	.+34     	; 0x7ba0 <__floatsisf+0x6a>
    7b7e:	77 23       	and	r23, r23
    7b80:	21 f0       	breq	.+8      	; 0x7b8a <__floatsisf+0x54>
    7b82:	9e e8       	ldi	r25, 0x8E	; 142
    7b84:	87 2f       	mov	r24, r23
    7b86:	76 2f       	mov	r23, r22
    7b88:	05 c0       	rjmp	.+10     	; 0x7b94 <__floatsisf+0x5e>
    7b8a:	66 23       	and	r22, r22
    7b8c:	71 f0       	breq	.+28     	; 0x7baa <__floatsisf+0x74>
    7b8e:	96 e8       	ldi	r25, 0x86	; 134
    7b90:	86 2f       	mov	r24, r22
    7b92:	70 e0       	ldi	r23, 0x00	; 0
    7b94:	60 e0       	ldi	r22, 0x00	; 0
    7b96:	2a f0       	brmi	.+10     	; 0x7ba2 <__floatsisf+0x6c>
    7b98:	9a 95       	dec	r25
    7b9a:	66 0f       	add	r22, r22
    7b9c:	77 1f       	adc	r23, r23
    7b9e:	88 1f       	adc	r24, r24
    7ba0:	da f7       	brpl	.-10     	; 0x7b98 <__floatsisf+0x62>
    7ba2:	88 0f       	add	r24, r24
    7ba4:	96 95       	lsr	r25
    7ba6:	87 95       	ror	r24
    7ba8:	97 f9       	bld	r25, 7
    7baa:	08 95       	ret

00007bac <floor>:
    7bac:	07 d1       	rcall	.+526    	; 0x7dbc <__fp_trunc>
    7bae:	80 f0       	brcs	.+32     	; 0x7bd0 <floor+0x24>
    7bb0:	9f 37       	cpi	r25, 0x7F	; 127
    7bb2:	40 f4       	brcc	.+16     	; 0x7bc4 <floor+0x18>
    7bb4:	91 11       	cpse	r25, r1
    7bb6:	0e f0       	brts	.+2      	; 0x7bba <floor+0xe>
    7bb8:	19 c1       	rjmp	.+562    	; 0x7dec <__fp_szero>
    7bba:	60 e0       	ldi	r22, 0x00	; 0
    7bbc:	70 e0       	ldi	r23, 0x00	; 0
    7bbe:	80 e8       	ldi	r24, 0x80	; 128
    7bc0:	9f eb       	ldi	r25, 0xBF	; 191
    7bc2:	08 95       	ret
    7bc4:	26 f4       	brtc	.+8      	; 0x7bce <floor+0x22>
    7bc6:	1b 16       	cp	r1, r27
    7bc8:	61 1d       	adc	r22, r1
    7bca:	71 1d       	adc	r23, r1
    7bcc:	81 1d       	adc	r24, r1
    7bce:	2b c0       	rjmp	.+86     	; 0x7c26 <__fp_mintl>
    7bd0:	45 c0       	rjmp	.+138    	; 0x7c5c <__fp_mpack>

00007bd2 <__fp_cmp>:
    7bd2:	99 0f       	add	r25, r25
    7bd4:	00 08       	sbc	r0, r0
    7bd6:	55 0f       	add	r21, r21
    7bd8:	aa 0b       	sbc	r26, r26
    7bda:	e0 e8       	ldi	r30, 0x80	; 128
    7bdc:	fe ef       	ldi	r31, 0xFE	; 254
    7bde:	16 16       	cp	r1, r22
    7be0:	17 06       	cpc	r1, r23
    7be2:	e8 07       	cpc	r30, r24
    7be4:	f9 07       	cpc	r31, r25
    7be6:	c0 f0       	brcs	.+48     	; 0x7c18 <__fp_cmp+0x46>
    7be8:	12 16       	cp	r1, r18
    7bea:	13 06       	cpc	r1, r19
    7bec:	e4 07       	cpc	r30, r20
    7bee:	f5 07       	cpc	r31, r21
    7bf0:	98 f0       	brcs	.+38     	; 0x7c18 <__fp_cmp+0x46>
    7bf2:	62 1b       	sub	r22, r18
    7bf4:	73 0b       	sbc	r23, r19
    7bf6:	84 0b       	sbc	r24, r20
    7bf8:	95 0b       	sbc	r25, r21
    7bfa:	39 f4       	brne	.+14     	; 0x7c0a <__fp_cmp+0x38>
    7bfc:	0a 26       	eor	r0, r26
    7bfe:	61 f0       	breq	.+24     	; 0x7c18 <__fp_cmp+0x46>
    7c00:	23 2b       	or	r18, r19
    7c02:	24 2b       	or	r18, r20
    7c04:	25 2b       	or	r18, r21
    7c06:	21 f4       	brne	.+8      	; 0x7c10 <__fp_cmp+0x3e>
    7c08:	08 95       	ret
    7c0a:	0a 26       	eor	r0, r26
    7c0c:	09 f4       	brne	.+2      	; 0x7c10 <__fp_cmp+0x3e>
    7c0e:	a1 40       	sbci	r26, 0x01	; 1
    7c10:	a6 95       	lsr	r26
    7c12:	8f ef       	ldi	r24, 0xFF	; 255
    7c14:	81 1d       	adc	r24, r1
    7c16:	81 1d       	adc	r24, r1
    7c18:	08 95       	ret

00007c1a <__fp_inf>:
    7c1a:	97 f9       	bld	r25, 7
    7c1c:	9f 67       	ori	r25, 0x7F	; 127
    7c1e:	80 e8       	ldi	r24, 0x80	; 128
    7c20:	70 e0       	ldi	r23, 0x00	; 0
    7c22:	60 e0       	ldi	r22, 0x00	; 0
    7c24:	08 95       	ret

00007c26 <__fp_mintl>:
    7c26:	88 23       	and	r24, r24
    7c28:	71 f4       	brne	.+28     	; 0x7c46 <__fp_mintl+0x20>
    7c2a:	77 23       	and	r23, r23
    7c2c:	21 f0       	breq	.+8      	; 0x7c36 <__fp_mintl+0x10>
    7c2e:	98 50       	subi	r25, 0x08	; 8
    7c30:	87 2b       	or	r24, r23
    7c32:	76 2f       	mov	r23, r22
    7c34:	07 c0       	rjmp	.+14     	; 0x7c44 <__fp_mintl+0x1e>
    7c36:	66 23       	and	r22, r22
    7c38:	11 f4       	brne	.+4      	; 0x7c3e <__fp_mintl+0x18>
    7c3a:	99 27       	eor	r25, r25
    7c3c:	0d c0       	rjmp	.+26     	; 0x7c58 <__fp_mintl+0x32>
    7c3e:	90 51       	subi	r25, 0x10	; 16
    7c40:	86 2b       	or	r24, r22
    7c42:	70 e0       	ldi	r23, 0x00	; 0
    7c44:	60 e0       	ldi	r22, 0x00	; 0
    7c46:	2a f0       	brmi	.+10     	; 0x7c52 <__fp_mintl+0x2c>
    7c48:	9a 95       	dec	r25
    7c4a:	66 0f       	add	r22, r22
    7c4c:	77 1f       	adc	r23, r23
    7c4e:	88 1f       	adc	r24, r24
    7c50:	da f7       	brpl	.-10     	; 0x7c48 <__fp_mintl+0x22>
    7c52:	88 0f       	add	r24, r24
    7c54:	96 95       	lsr	r25
    7c56:	87 95       	ror	r24
    7c58:	97 f9       	bld	r25, 7
    7c5a:	08 95       	ret

00007c5c <__fp_mpack>:
    7c5c:	9f 3f       	cpi	r25, 0xFF	; 255
    7c5e:	31 f0       	breq	.+12     	; 0x7c6c <__fp_mpack_finite+0xc>

00007c60 <__fp_mpack_finite>:
    7c60:	91 50       	subi	r25, 0x01	; 1
    7c62:	20 f4       	brcc	.+8      	; 0x7c6c <__fp_mpack_finite+0xc>
    7c64:	87 95       	ror	r24
    7c66:	77 95       	ror	r23
    7c68:	67 95       	ror	r22
    7c6a:	b7 95       	ror	r27
    7c6c:	88 0f       	add	r24, r24
    7c6e:	91 1d       	adc	r25, r1
    7c70:	96 95       	lsr	r25
    7c72:	87 95       	ror	r24
    7c74:	97 f9       	bld	r25, 7
    7c76:	08 95       	ret

00007c78 <__fp_nan>:
    7c78:	9f ef       	ldi	r25, 0xFF	; 255
    7c7a:	80 ec       	ldi	r24, 0xC0	; 192
    7c7c:	08 95       	ret

00007c7e <__fp_powser>:
    7c7e:	df 93       	push	r29
    7c80:	cf 93       	push	r28
    7c82:	1f 93       	push	r17
    7c84:	0f 93       	push	r16
    7c86:	ff 92       	push	r15
    7c88:	ef 92       	push	r14
    7c8a:	df 92       	push	r13
    7c8c:	7b 01       	movw	r14, r22
    7c8e:	8c 01       	movw	r16, r24
    7c90:	68 94       	set
    7c92:	05 c0       	rjmp	.+10     	; 0x7c9e <__fp_powser+0x20>
    7c94:	da 2e       	mov	r13, r26
    7c96:	ef 01       	movw	r28, r30
    7c98:	c6 d0       	rcall	.+396    	; 0x7e26 <__mulsf3x>
    7c9a:	fe 01       	movw	r30, r28
    7c9c:	e8 94       	clt
    7c9e:	a5 91       	lpm	r26, Z+
    7ca0:	25 91       	lpm	r18, Z+
    7ca2:	35 91       	lpm	r19, Z+
    7ca4:	45 91       	lpm	r20, Z+
    7ca6:	55 91       	lpm	r21, Z+
    7ca8:	ae f3       	brts	.-22     	; 0x7c94 <__fp_powser+0x16>
    7caa:	ef 01       	movw	r28, r30
    7cac:	ed dd       	rcall	.-1062   	; 0x7888 <__addsf3x>
    7cae:	fe 01       	movw	r30, r28
    7cb0:	97 01       	movw	r18, r14
    7cb2:	a8 01       	movw	r20, r16
    7cb4:	da 94       	dec	r13
    7cb6:	79 f7       	brne	.-34     	; 0x7c96 <__fp_powser+0x18>
    7cb8:	df 90       	pop	r13
    7cba:	ef 90       	pop	r14
    7cbc:	ff 90       	pop	r15
    7cbe:	0f 91       	pop	r16
    7cc0:	1f 91       	pop	r17
    7cc2:	cf 91       	pop	r28
    7cc4:	df 91       	pop	r29
    7cc6:	08 95       	ret

00007cc8 <__fp_pscA>:
    7cc8:	00 24       	eor	r0, r0
    7cca:	0a 94       	dec	r0
    7ccc:	16 16       	cp	r1, r22
    7cce:	17 06       	cpc	r1, r23
    7cd0:	18 06       	cpc	r1, r24
    7cd2:	09 06       	cpc	r0, r25
    7cd4:	08 95       	ret

00007cd6 <__fp_pscB>:
    7cd6:	00 24       	eor	r0, r0
    7cd8:	0a 94       	dec	r0
    7cda:	12 16       	cp	r1, r18
    7cdc:	13 06       	cpc	r1, r19
    7cde:	14 06       	cpc	r1, r20
    7ce0:	05 06       	cpc	r0, r21
    7ce2:	08 95       	ret
    7ce4:	c9 cf       	rjmp	.-110    	; 0x7c78 <__fp_nan>

00007ce6 <__fp_rempio2>:
    7ce6:	50 d0       	rcall	.+160    	; 0x7d88 <__fp_splitA>
    7ce8:	e8 f3       	brcs	.-6      	; 0x7ce4 <__fp_pscB+0xe>
    7cea:	e8 94       	clt
    7cec:	e0 e0       	ldi	r30, 0x00	; 0
    7cee:	bb 27       	eor	r27, r27
    7cf0:	9f 57       	subi	r25, 0x7F	; 127
    7cf2:	f0 f0       	brcs	.+60     	; 0x7d30 <__fp_rempio2+0x4a>
    7cf4:	2a ed       	ldi	r18, 0xDA	; 218
    7cf6:	3f e0       	ldi	r19, 0x0F	; 15
    7cf8:	49 ec       	ldi	r20, 0xC9	; 201
    7cfa:	06 c0       	rjmp	.+12     	; 0x7d08 <__fp_rempio2+0x22>
    7cfc:	ee 0f       	add	r30, r30
    7cfe:	bb 0f       	add	r27, r27
    7d00:	66 1f       	adc	r22, r22
    7d02:	77 1f       	adc	r23, r23
    7d04:	88 1f       	adc	r24, r24
    7d06:	28 f0       	brcs	.+10     	; 0x7d12 <__fp_rempio2+0x2c>
    7d08:	b2 3a       	cpi	r27, 0xA2	; 162
    7d0a:	62 07       	cpc	r22, r18
    7d0c:	73 07       	cpc	r23, r19
    7d0e:	84 07       	cpc	r24, r20
    7d10:	28 f0       	brcs	.+10     	; 0x7d1c <__fp_rempio2+0x36>
    7d12:	b2 5a       	subi	r27, 0xA2	; 162
    7d14:	62 0b       	sbc	r22, r18
    7d16:	73 0b       	sbc	r23, r19
    7d18:	84 0b       	sbc	r24, r20
    7d1a:	e3 95       	inc	r30
    7d1c:	9a 95       	dec	r25
    7d1e:	72 f7       	brpl	.-36     	; 0x7cfc <__fp_rempio2+0x16>
    7d20:	80 38       	cpi	r24, 0x80	; 128
    7d22:	30 f4       	brcc	.+12     	; 0x7d30 <__fp_rempio2+0x4a>
    7d24:	9a 95       	dec	r25
    7d26:	bb 0f       	add	r27, r27
    7d28:	66 1f       	adc	r22, r22
    7d2a:	77 1f       	adc	r23, r23
    7d2c:	88 1f       	adc	r24, r24
    7d2e:	d2 f7       	brpl	.-12     	; 0x7d24 <__fp_rempio2+0x3e>
    7d30:	90 48       	sbci	r25, 0x80	; 128
    7d32:	96 cf       	rjmp	.-212    	; 0x7c60 <__fp_mpack_finite>

00007d34 <__fp_round>:
    7d34:	09 2e       	mov	r0, r25
    7d36:	03 94       	inc	r0
    7d38:	00 0c       	add	r0, r0
    7d3a:	11 f4       	brne	.+4      	; 0x7d40 <__fp_round+0xc>
    7d3c:	88 23       	and	r24, r24
    7d3e:	52 f0       	brmi	.+20     	; 0x7d54 <__fp_round+0x20>
    7d40:	bb 0f       	add	r27, r27
    7d42:	40 f4       	brcc	.+16     	; 0x7d54 <__fp_round+0x20>
    7d44:	bf 2b       	or	r27, r31
    7d46:	11 f4       	brne	.+4      	; 0x7d4c <__fp_round+0x18>
    7d48:	60 ff       	sbrs	r22, 0
    7d4a:	04 c0       	rjmp	.+8      	; 0x7d54 <__fp_round+0x20>
    7d4c:	6f 5f       	subi	r22, 0xFF	; 255
    7d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    7d50:	8f 4f       	sbci	r24, 0xFF	; 255
    7d52:	9f 4f       	sbci	r25, 0xFF	; 255
    7d54:	08 95       	ret

00007d56 <__fp_sinus>:
    7d56:	ef 93       	push	r30
    7d58:	e0 ff       	sbrs	r30, 0
    7d5a:	06 c0       	rjmp	.+12     	; 0x7d68 <__fp_sinus+0x12>
    7d5c:	a2 ea       	ldi	r26, 0xA2	; 162
    7d5e:	2a ed       	ldi	r18, 0xDA	; 218
    7d60:	3f e0       	ldi	r19, 0x0F	; 15
    7d62:	49 ec       	ldi	r20, 0xC9	; 201
    7d64:	5f eb       	ldi	r21, 0xBF	; 191
    7d66:	90 dd       	rcall	.-1248   	; 0x7888 <__addsf3x>
    7d68:	e5 df       	rcall	.-54     	; 0x7d34 <__fp_round>
    7d6a:	0f 90       	pop	r0
    7d6c:	03 94       	inc	r0
    7d6e:	01 fc       	sbrc	r0, 1
    7d70:	90 58       	subi	r25, 0x80	; 128
    7d72:	e1 e1       	ldi	r30, 0x11	; 17
    7d74:	f1 e0       	ldi	r31, 0x01	; 1
    7d76:	04 c1       	rjmp	.+520    	; 0x7f80 <__fp_powsodd>

00007d78 <__fp_split3>:
    7d78:	57 fd       	sbrc	r21, 7
    7d7a:	90 58       	subi	r25, 0x80	; 128
    7d7c:	44 0f       	add	r20, r20
    7d7e:	55 1f       	adc	r21, r21
    7d80:	59 f0       	breq	.+22     	; 0x7d98 <__fp_splitA+0x10>
    7d82:	5f 3f       	cpi	r21, 0xFF	; 255
    7d84:	71 f0       	breq	.+28     	; 0x7da2 <__fp_splitA+0x1a>
    7d86:	47 95       	ror	r20

00007d88 <__fp_splitA>:
    7d88:	88 0f       	add	r24, r24
    7d8a:	97 fb       	bst	r25, 7
    7d8c:	99 1f       	adc	r25, r25
    7d8e:	61 f0       	breq	.+24     	; 0x7da8 <__fp_splitA+0x20>
    7d90:	9f 3f       	cpi	r25, 0xFF	; 255
    7d92:	79 f0       	breq	.+30     	; 0x7db2 <__fp_splitA+0x2a>
    7d94:	87 95       	ror	r24
    7d96:	08 95       	ret
    7d98:	12 16       	cp	r1, r18
    7d9a:	13 06       	cpc	r1, r19
    7d9c:	14 06       	cpc	r1, r20
    7d9e:	55 1f       	adc	r21, r21
    7da0:	f2 cf       	rjmp	.-28     	; 0x7d86 <__fp_split3+0xe>
    7da2:	46 95       	lsr	r20
    7da4:	f1 df       	rcall	.-30     	; 0x7d88 <__fp_splitA>
    7da6:	08 c0       	rjmp	.+16     	; 0x7db8 <__fp_splitA+0x30>
    7da8:	16 16       	cp	r1, r22
    7daa:	17 06       	cpc	r1, r23
    7dac:	18 06       	cpc	r1, r24
    7dae:	99 1f       	adc	r25, r25
    7db0:	f1 cf       	rjmp	.-30     	; 0x7d94 <__fp_splitA+0xc>
    7db2:	86 95       	lsr	r24
    7db4:	71 05       	cpc	r23, r1
    7db6:	61 05       	cpc	r22, r1
    7db8:	08 94       	sec
    7dba:	08 95       	ret

00007dbc <__fp_trunc>:
    7dbc:	e5 df       	rcall	.-54     	; 0x7d88 <__fp_splitA>
    7dbe:	a0 f0       	brcs	.+40     	; 0x7de8 <__fp_trunc+0x2c>
    7dc0:	be e7       	ldi	r27, 0x7E	; 126
    7dc2:	b9 17       	cp	r27, r25
    7dc4:	88 f4       	brcc	.+34     	; 0x7de8 <__fp_trunc+0x2c>
    7dc6:	bb 27       	eor	r27, r27
    7dc8:	9f 38       	cpi	r25, 0x8F	; 143
    7dca:	60 f4       	brcc	.+24     	; 0x7de4 <__fp_trunc+0x28>
    7dcc:	16 16       	cp	r1, r22
    7dce:	b1 1d       	adc	r27, r1
    7dd0:	67 2f       	mov	r22, r23
    7dd2:	78 2f       	mov	r23, r24
    7dd4:	88 27       	eor	r24, r24
    7dd6:	98 5f       	subi	r25, 0xF8	; 248
    7dd8:	f7 cf       	rjmp	.-18     	; 0x7dc8 <__fp_trunc+0xc>
    7dda:	86 95       	lsr	r24
    7ddc:	77 95       	ror	r23
    7dde:	67 95       	ror	r22
    7de0:	b1 1d       	adc	r27, r1
    7de2:	93 95       	inc	r25
    7de4:	96 39       	cpi	r25, 0x96	; 150
    7de6:	c8 f3       	brcs	.-14     	; 0x7dda <__fp_trunc+0x1e>
    7de8:	08 95       	ret

00007dea <__fp_zero>:
    7dea:	e8 94       	clt

00007dec <__fp_szero>:
    7dec:	bb 27       	eor	r27, r27
    7dee:	66 27       	eor	r22, r22
    7df0:	77 27       	eor	r23, r23
    7df2:	cb 01       	movw	r24, r22
    7df4:	97 f9       	bld	r25, 7
    7df6:	08 95       	ret

00007df8 <__gesf2>:
    7df8:	ec de       	rcall	.-552    	; 0x7bd2 <__fp_cmp>
    7dfa:	08 f4       	brcc	.+2      	; 0x7dfe <__gesf2+0x6>
    7dfc:	8f ef       	ldi	r24, 0xFF	; 255
    7dfe:	08 95       	ret

00007e00 <inverse>:
    7e00:	9b 01       	movw	r18, r22
    7e02:	ac 01       	movw	r20, r24
    7e04:	60 e0       	ldi	r22, 0x00	; 0
    7e06:	70 e0       	ldi	r23, 0x00	; 0
    7e08:	80 e8       	ldi	r24, 0x80	; 128
    7e0a:	9f e3       	ldi	r25, 0x3F	; 63
    7e0c:	f9 cd       	rjmp	.-1038   	; 0x7a00 <__divsf3>

00007e0e <__mulsf3>:
    7e0e:	0b d0       	rcall	.+22     	; 0x7e26 <__mulsf3x>
    7e10:	91 cf       	rjmp	.-222    	; 0x7d34 <__fp_round>
    7e12:	5a df       	rcall	.-332    	; 0x7cc8 <__fp_pscA>
    7e14:	28 f0       	brcs	.+10     	; 0x7e20 <__mulsf3+0x12>
    7e16:	5f df       	rcall	.-322    	; 0x7cd6 <__fp_pscB>
    7e18:	18 f0       	brcs	.+6      	; 0x7e20 <__mulsf3+0x12>
    7e1a:	95 23       	and	r25, r21
    7e1c:	09 f0       	breq	.+2      	; 0x7e20 <__mulsf3+0x12>
    7e1e:	fd ce       	rjmp	.-518    	; 0x7c1a <__fp_inf>
    7e20:	2b cf       	rjmp	.-426    	; 0x7c78 <__fp_nan>
    7e22:	11 24       	eor	r1, r1
    7e24:	e3 cf       	rjmp	.-58     	; 0x7dec <__fp_szero>

00007e26 <__mulsf3x>:
    7e26:	a8 df       	rcall	.-176    	; 0x7d78 <__fp_split3>
    7e28:	a0 f3       	brcs	.-24     	; 0x7e12 <__mulsf3+0x4>

00007e2a <__mulsf3_pse>:
    7e2a:	95 9f       	mul	r25, r21
    7e2c:	d1 f3       	breq	.-12     	; 0x7e22 <__mulsf3+0x14>
    7e2e:	95 0f       	add	r25, r21
    7e30:	50 e0       	ldi	r21, 0x00	; 0
    7e32:	55 1f       	adc	r21, r21
    7e34:	62 9f       	mul	r22, r18
    7e36:	f0 01       	movw	r30, r0
    7e38:	72 9f       	mul	r23, r18
    7e3a:	bb 27       	eor	r27, r27
    7e3c:	f0 0d       	add	r31, r0
    7e3e:	b1 1d       	adc	r27, r1
    7e40:	63 9f       	mul	r22, r19
    7e42:	aa 27       	eor	r26, r26
    7e44:	f0 0d       	add	r31, r0
    7e46:	b1 1d       	adc	r27, r1
    7e48:	aa 1f       	adc	r26, r26
    7e4a:	64 9f       	mul	r22, r20
    7e4c:	66 27       	eor	r22, r22
    7e4e:	b0 0d       	add	r27, r0
    7e50:	a1 1d       	adc	r26, r1
    7e52:	66 1f       	adc	r22, r22
    7e54:	82 9f       	mul	r24, r18
    7e56:	22 27       	eor	r18, r18
    7e58:	b0 0d       	add	r27, r0
    7e5a:	a1 1d       	adc	r26, r1
    7e5c:	62 1f       	adc	r22, r18
    7e5e:	73 9f       	mul	r23, r19
    7e60:	b0 0d       	add	r27, r0
    7e62:	a1 1d       	adc	r26, r1
    7e64:	62 1f       	adc	r22, r18
    7e66:	83 9f       	mul	r24, r19
    7e68:	a0 0d       	add	r26, r0
    7e6a:	61 1d       	adc	r22, r1
    7e6c:	22 1f       	adc	r18, r18
    7e6e:	74 9f       	mul	r23, r20
    7e70:	33 27       	eor	r19, r19
    7e72:	a0 0d       	add	r26, r0
    7e74:	61 1d       	adc	r22, r1
    7e76:	23 1f       	adc	r18, r19
    7e78:	84 9f       	mul	r24, r20
    7e7a:	60 0d       	add	r22, r0
    7e7c:	21 1d       	adc	r18, r1
    7e7e:	82 2f       	mov	r24, r18
    7e80:	76 2f       	mov	r23, r22
    7e82:	6a 2f       	mov	r22, r26
    7e84:	11 24       	eor	r1, r1
    7e86:	9f 57       	subi	r25, 0x7F	; 127
    7e88:	50 40       	sbci	r21, 0x00	; 0
    7e8a:	8a f0       	brmi	.+34     	; 0x7eae <__mulsf3_pse+0x84>
    7e8c:	e1 f0       	breq	.+56     	; 0x7ec6 <__mulsf3_pse+0x9c>
    7e8e:	88 23       	and	r24, r24
    7e90:	4a f0       	brmi	.+18     	; 0x7ea4 <__mulsf3_pse+0x7a>
    7e92:	ee 0f       	add	r30, r30
    7e94:	ff 1f       	adc	r31, r31
    7e96:	bb 1f       	adc	r27, r27
    7e98:	66 1f       	adc	r22, r22
    7e9a:	77 1f       	adc	r23, r23
    7e9c:	88 1f       	adc	r24, r24
    7e9e:	91 50       	subi	r25, 0x01	; 1
    7ea0:	50 40       	sbci	r21, 0x00	; 0
    7ea2:	a9 f7       	brne	.-22     	; 0x7e8e <__mulsf3_pse+0x64>
    7ea4:	9e 3f       	cpi	r25, 0xFE	; 254
    7ea6:	51 05       	cpc	r21, r1
    7ea8:	70 f0       	brcs	.+28     	; 0x7ec6 <__mulsf3_pse+0x9c>
    7eaa:	b7 ce       	rjmp	.-658    	; 0x7c1a <__fp_inf>
    7eac:	9f cf       	rjmp	.-194    	; 0x7dec <__fp_szero>
    7eae:	5f 3f       	cpi	r21, 0xFF	; 255
    7eb0:	ec f3       	brlt	.-6      	; 0x7eac <__mulsf3_pse+0x82>
    7eb2:	98 3e       	cpi	r25, 0xE8	; 232
    7eb4:	dc f3       	brlt	.-10     	; 0x7eac <__mulsf3_pse+0x82>
    7eb6:	86 95       	lsr	r24
    7eb8:	77 95       	ror	r23
    7eba:	67 95       	ror	r22
    7ebc:	b7 95       	ror	r27
    7ebe:	f7 95       	ror	r31
    7ec0:	e7 95       	ror	r30
    7ec2:	9f 5f       	subi	r25, 0xFF	; 255
    7ec4:	c1 f7       	brne	.-16     	; 0x7eb6 <__mulsf3_pse+0x8c>
    7ec6:	fe 2b       	or	r31, r30
    7ec8:	88 0f       	add	r24, r24
    7eca:	91 1d       	adc	r25, r1
    7ecc:	96 95       	lsr	r25
    7ece:	87 95       	ror	r24
    7ed0:	97 f9       	bld	r25, 7
    7ed2:	08 95       	ret

00007ed4 <sin>:
    7ed4:	9f 93       	push	r25
    7ed6:	07 df       	rcall	.-498    	; 0x7ce6 <__fp_rempio2>
    7ed8:	0f 90       	pop	r0
    7eda:	07 fc       	sbrc	r0, 7
    7edc:	ee 5f       	subi	r30, 0xFE	; 254
    7ede:	3b cf       	rjmp	.-394    	; 0x7d56 <__fp_sinus>
    7ee0:	11 f4       	brne	.+4      	; 0x7ee6 <sin+0x12>
    7ee2:	0e f4       	brtc	.+2      	; 0x7ee6 <sin+0x12>
    7ee4:	c9 ce       	rjmp	.-622    	; 0x7c78 <__fp_nan>
    7ee6:	ba ce       	rjmp	.-652    	; 0x7c5c <__fp_mpack>

00007ee8 <sqrt>:
    7ee8:	4f df       	rcall	.-354    	; 0x7d88 <__fp_splitA>
    7eea:	d0 f3       	brcs	.-12     	; 0x7ee0 <sin+0xc>
    7eec:	99 23       	and	r25, r25
    7eee:	d9 f3       	breq	.-10     	; 0x7ee6 <sin+0x12>
    7ef0:	ce f3       	brts	.-14     	; 0x7ee4 <sin+0x10>
    7ef2:	9f 57       	subi	r25, 0x7F	; 127
    7ef4:	55 0b       	sbc	r21, r21
    7ef6:	87 ff       	sbrs	r24, 7
    7ef8:	3c d0       	rcall	.+120    	; 0x7f72 <__fp_norm2>
    7efa:	00 24       	eor	r0, r0
    7efc:	a0 e6       	ldi	r26, 0x60	; 96
    7efe:	40 ea       	ldi	r20, 0xA0	; 160
    7f00:	90 01       	movw	r18, r0
    7f02:	80 58       	subi	r24, 0x80	; 128
    7f04:	56 95       	lsr	r21
    7f06:	97 95       	ror	r25
    7f08:	28 f4       	brcc	.+10     	; 0x7f14 <sqrt+0x2c>
    7f0a:	80 5c       	subi	r24, 0xC0	; 192
    7f0c:	66 0f       	add	r22, r22
    7f0e:	77 1f       	adc	r23, r23
    7f10:	88 1f       	adc	r24, r24
    7f12:	20 f0       	brcs	.+8      	; 0x7f1c <sqrt+0x34>
    7f14:	26 17       	cp	r18, r22
    7f16:	37 07       	cpc	r19, r23
    7f18:	48 07       	cpc	r20, r24
    7f1a:	30 f4       	brcc	.+12     	; 0x7f28 <sqrt+0x40>
    7f1c:	62 1b       	sub	r22, r18
    7f1e:	73 0b       	sbc	r23, r19
    7f20:	84 0b       	sbc	r24, r20
    7f22:	20 29       	or	r18, r0
    7f24:	31 29       	or	r19, r1
    7f26:	4a 2b       	or	r20, r26
    7f28:	a6 95       	lsr	r26
    7f2a:	17 94       	ror	r1
    7f2c:	07 94       	ror	r0
    7f2e:	20 25       	eor	r18, r0
    7f30:	31 25       	eor	r19, r1
    7f32:	4a 27       	eor	r20, r26
    7f34:	58 f7       	brcc	.-42     	; 0x7f0c <sqrt+0x24>
    7f36:	66 0f       	add	r22, r22
    7f38:	77 1f       	adc	r23, r23
    7f3a:	88 1f       	adc	r24, r24
    7f3c:	20 f0       	brcs	.+8      	; 0x7f46 <sqrt+0x5e>
    7f3e:	26 17       	cp	r18, r22
    7f40:	37 07       	cpc	r19, r23
    7f42:	48 07       	cpc	r20, r24
    7f44:	30 f4       	brcc	.+12     	; 0x7f52 <sqrt+0x6a>
    7f46:	62 0b       	sbc	r22, r18
    7f48:	73 0b       	sbc	r23, r19
    7f4a:	84 0b       	sbc	r24, r20
    7f4c:	20 0d       	add	r18, r0
    7f4e:	31 1d       	adc	r19, r1
    7f50:	41 1d       	adc	r20, r1
    7f52:	a0 95       	com	r26
    7f54:	81 f7       	brne	.-32     	; 0x7f36 <sqrt+0x4e>
    7f56:	b9 01       	movw	r22, r18
    7f58:	84 2f       	mov	r24, r20
    7f5a:	91 58       	subi	r25, 0x81	; 129
    7f5c:	88 0f       	add	r24, r24
    7f5e:	96 95       	lsr	r25
    7f60:	87 95       	ror	r24
    7f62:	08 95       	ret

00007f64 <square>:
    7f64:	9b 01       	movw	r18, r22
    7f66:	ac 01       	movw	r20, r24
    7f68:	52 cf       	rjmp	.-348    	; 0x7e0e <__mulsf3>

00007f6a <__unordsf2>:
    7f6a:	33 de       	rcall	.-922    	; 0x7bd2 <__fp_cmp>
    7f6c:	88 0b       	sbc	r24, r24
    7f6e:	99 0b       	sbc	r25, r25
    7f70:	08 95       	ret

00007f72 <__fp_norm2>:
    7f72:	91 50       	subi	r25, 0x01	; 1
    7f74:	50 40       	sbci	r21, 0x00	; 0
    7f76:	66 0f       	add	r22, r22
    7f78:	77 1f       	adc	r23, r23
    7f7a:	88 1f       	adc	r24, r24
    7f7c:	d2 f7       	brpl	.-12     	; 0x7f72 <__fp_norm2>
    7f7e:	08 95       	ret

00007f80 <__fp_powsodd>:
    7f80:	9f 93       	push	r25
    7f82:	8f 93       	push	r24
    7f84:	7f 93       	push	r23
    7f86:	6f 93       	push	r22
    7f88:	ff 93       	push	r31
    7f8a:	ef 93       	push	r30
    7f8c:	9b 01       	movw	r18, r22
    7f8e:	ac 01       	movw	r20, r24
    7f90:	3e df       	rcall	.-388    	; 0x7e0e <__mulsf3>
    7f92:	ef 91       	pop	r30
    7f94:	ff 91       	pop	r31
    7f96:	73 de       	rcall	.-794    	; 0x7c7e <__fp_powser>
    7f98:	2f 91       	pop	r18
    7f9a:	3f 91       	pop	r19
    7f9c:	4f 91       	pop	r20
    7f9e:	5f 91       	pop	r21
    7fa0:	36 cf       	rjmp	.-404    	; 0x7e0e <__mulsf3>

00007fa2 <__muluhisi3>:
    7fa2:	0e 94 3a 40 	call	0x8074	; 0x8074 <__umulhisi3>
    7fa6:	a5 9f       	mul	r26, r21
    7fa8:	90 0d       	add	r25, r0
    7faa:	b4 9f       	mul	r27, r20
    7fac:	90 0d       	add	r25, r0
    7fae:	a4 9f       	mul	r26, r20
    7fb0:	80 0d       	add	r24, r0
    7fb2:	91 1d       	adc	r25, r1
    7fb4:	11 24       	eor	r1, r1
    7fb6:	08 95       	ret

00007fb8 <__udivmodqi4>:
    7fb8:	99 1b       	sub	r25, r25
    7fba:	79 e0       	ldi	r23, 0x09	; 9
    7fbc:	04 c0       	rjmp	.+8      	; 0x7fc6 <__udivmodqi4_ep>

00007fbe <__udivmodqi4_loop>:
    7fbe:	99 1f       	adc	r25, r25
    7fc0:	96 17       	cp	r25, r22
    7fc2:	08 f0       	brcs	.+2      	; 0x7fc6 <__udivmodqi4_ep>
    7fc4:	96 1b       	sub	r25, r22

00007fc6 <__udivmodqi4_ep>:
    7fc6:	88 1f       	adc	r24, r24
    7fc8:	7a 95       	dec	r23
    7fca:	c9 f7       	brne	.-14     	; 0x7fbe <__udivmodqi4_loop>
    7fcc:	80 95       	com	r24
    7fce:	08 95       	ret

00007fd0 <__divmodhi4>:
    7fd0:	97 fb       	bst	r25, 7
    7fd2:	07 2e       	mov	r0, r23
    7fd4:	16 f4       	brtc	.+4      	; 0x7fda <__divmodhi4+0xa>
    7fd6:	00 94       	com	r0
    7fd8:	07 d0       	rcall	.+14     	; 0x7fe8 <__divmodhi4_neg1>
    7fda:	77 fd       	sbrc	r23, 7
    7fdc:	09 d0       	rcall	.+18     	; 0x7ff0 <__divmodhi4_neg2>
    7fde:	0e 94 46 40 	call	0x808c	; 0x808c <__udivmodhi4>
    7fe2:	07 fc       	sbrc	r0, 7
    7fe4:	05 d0       	rcall	.+10     	; 0x7ff0 <__divmodhi4_neg2>
    7fe6:	3e f4       	brtc	.+14     	; 0x7ff6 <__divmodhi4_exit>

00007fe8 <__divmodhi4_neg1>:
    7fe8:	90 95       	com	r25
    7fea:	81 95       	neg	r24
    7fec:	9f 4f       	sbci	r25, 0xFF	; 255
    7fee:	08 95       	ret

00007ff0 <__divmodhi4_neg2>:
    7ff0:	70 95       	com	r23
    7ff2:	61 95       	neg	r22
    7ff4:	7f 4f       	sbci	r23, 0xFF	; 255

00007ff6 <__divmodhi4_exit>:
    7ff6:	08 95       	ret

00007ff8 <__udivmodsi4>:
    7ff8:	a1 e2       	ldi	r26, 0x21	; 33
    7ffa:	1a 2e       	mov	r1, r26
    7ffc:	aa 1b       	sub	r26, r26
    7ffe:	bb 1b       	sub	r27, r27
    8000:	fd 01       	movw	r30, r26
    8002:	0d c0       	rjmp	.+26     	; 0x801e <__udivmodsi4_ep>

00008004 <__udivmodsi4_loop>:
    8004:	aa 1f       	adc	r26, r26
    8006:	bb 1f       	adc	r27, r27
    8008:	ee 1f       	adc	r30, r30
    800a:	ff 1f       	adc	r31, r31
    800c:	a2 17       	cp	r26, r18
    800e:	b3 07       	cpc	r27, r19
    8010:	e4 07       	cpc	r30, r20
    8012:	f5 07       	cpc	r31, r21
    8014:	20 f0       	brcs	.+8      	; 0x801e <__udivmodsi4_ep>
    8016:	a2 1b       	sub	r26, r18
    8018:	b3 0b       	sbc	r27, r19
    801a:	e4 0b       	sbc	r30, r20
    801c:	f5 0b       	sbc	r31, r21

0000801e <__udivmodsi4_ep>:
    801e:	66 1f       	adc	r22, r22
    8020:	77 1f       	adc	r23, r23
    8022:	88 1f       	adc	r24, r24
    8024:	99 1f       	adc	r25, r25
    8026:	1a 94       	dec	r1
    8028:	69 f7       	brne	.-38     	; 0x8004 <__udivmodsi4_loop>
    802a:	60 95       	com	r22
    802c:	70 95       	com	r23
    802e:	80 95       	com	r24
    8030:	90 95       	com	r25
    8032:	9b 01       	movw	r18, r22
    8034:	ac 01       	movw	r20, r24
    8036:	bd 01       	movw	r22, r26
    8038:	cf 01       	movw	r24, r30
    803a:	08 95       	ret

0000803c <__divmodsi4>:
    803c:	05 2e       	mov	r0, r21
    803e:	97 fb       	bst	r25, 7
    8040:	16 f4       	brtc	.+4      	; 0x8046 <__divmodsi4+0xa>
    8042:	00 94       	com	r0
    8044:	07 d0       	rcall	.+14     	; 0x8054 <__divmodsi4_neg1>
    8046:	57 fd       	sbrc	r21, 7
    8048:	0d d0       	rcall	.+26     	; 0x8064 <__divmodsi4_neg2>
    804a:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__udivmodsi4>
    804e:	07 fc       	sbrc	r0, 7
    8050:	09 d0       	rcall	.+18     	; 0x8064 <__divmodsi4_neg2>
    8052:	7e f4       	brtc	.+30     	; 0x8072 <__divmodsi4_exit>

00008054 <__divmodsi4_neg1>:
    8054:	90 95       	com	r25
    8056:	80 95       	com	r24
    8058:	70 95       	com	r23
    805a:	61 95       	neg	r22
    805c:	7f 4f       	sbci	r23, 0xFF	; 255
    805e:	8f 4f       	sbci	r24, 0xFF	; 255
    8060:	9f 4f       	sbci	r25, 0xFF	; 255
    8062:	08 95       	ret

00008064 <__divmodsi4_neg2>:
    8064:	50 95       	com	r21
    8066:	40 95       	com	r20
    8068:	30 95       	com	r19
    806a:	21 95       	neg	r18
    806c:	3f 4f       	sbci	r19, 0xFF	; 255
    806e:	4f 4f       	sbci	r20, 0xFF	; 255
    8070:	5f 4f       	sbci	r21, 0xFF	; 255

00008072 <__divmodsi4_exit>:
    8072:	08 95       	ret

00008074 <__umulhisi3>:
    8074:	a2 9f       	mul	r26, r18
    8076:	b0 01       	movw	r22, r0
    8078:	b3 9f       	mul	r27, r19
    807a:	c0 01       	movw	r24, r0
    807c:	a3 9f       	mul	r26, r19
    807e:	01 d0       	rcall	.+2      	; 0x8082 <__umulhisi3+0xe>
    8080:	b2 9f       	mul	r27, r18
    8082:	70 0d       	add	r23, r0
    8084:	81 1d       	adc	r24, r1
    8086:	11 24       	eor	r1, r1
    8088:	91 1d       	adc	r25, r1
    808a:	08 95       	ret

0000808c <__udivmodhi4>:
    808c:	aa 1b       	sub	r26, r26
    808e:	bb 1b       	sub	r27, r27
    8090:	51 e1       	ldi	r21, 0x11	; 17
    8092:	07 c0       	rjmp	.+14     	; 0x80a2 <__udivmodhi4_ep>

00008094 <__udivmodhi4_loop>:
    8094:	aa 1f       	adc	r26, r26
    8096:	bb 1f       	adc	r27, r27
    8098:	a6 17       	cp	r26, r22
    809a:	b7 07       	cpc	r27, r23
    809c:	10 f0       	brcs	.+4      	; 0x80a2 <__udivmodhi4_ep>
    809e:	a6 1b       	sub	r26, r22
    80a0:	b7 0b       	sbc	r27, r23

000080a2 <__udivmodhi4_ep>:
    80a2:	88 1f       	adc	r24, r24
    80a4:	99 1f       	adc	r25, r25
    80a6:	5a 95       	dec	r21
    80a8:	a9 f7       	brne	.-22     	; 0x8094 <__udivmodhi4_loop>
    80aa:	80 95       	com	r24
    80ac:	90 95       	com	r25
    80ae:	bc 01       	movw	r22, r24
    80b0:	cd 01       	movw	r24, r26
    80b2:	08 95       	ret

000080b4 <__tablejump_elpm__>:
    80b4:	07 90       	elpm	r0, Z+
    80b6:	f6 91       	elpm	r31, Z+
    80b8:	e0 2d       	mov	r30, r0
    80ba:	19 94       	eijmp

000080bc <atof>:
    80bc:	66 27       	eor	r22, r22
    80be:	77 27       	eor	r23, r23
    80c0:	0c 94 0f 42 	jmp	0x841e	; 0x841e <strtod>

000080c4 <atoi>:
    80c4:	fc 01       	movw	r30, r24
    80c6:	88 27       	eor	r24, r24
    80c8:	99 27       	eor	r25, r25
    80ca:	e8 94       	clt
    80cc:	21 91       	ld	r18, Z+
    80ce:	20 32       	cpi	r18, 0x20	; 32
    80d0:	e9 f3       	breq	.-6      	; 0x80cc <atoi+0x8>
    80d2:	29 30       	cpi	r18, 0x09	; 9
    80d4:	10 f0       	brcs	.+4      	; 0x80da <atoi+0x16>
    80d6:	2e 30       	cpi	r18, 0x0E	; 14
    80d8:	c8 f3       	brcs	.-14     	; 0x80cc <atoi+0x8>
    80da:	2b 32       	cpi	r18, 0x2B	; 43
    80dc:	41 f0       	breq	.+16     	; 0x80ee <atoi+0x2a>
    80de:	2d 32       	cpi	r18, 0x2D	; 45
    80e0:	39 f4       	brne	.+14     	; 0x80f0 <atoi+0x2c>
    80e2:	68 94       	set
    80e4:	04 c0       	rjmp	.+8      	; 0x80ee <atoi+0x2a>
    80e6:	0e 94 cc 41 	call	0x8398	; 0x8398 <__mulhi_const_10>
    80ea:	82 0f       	add	r24, r18
    80ec:	91 1d       	adc	r25, r1
    80ee:	21 91       	ld	r18, Z+
    80f0:	20 53       	subi	r18, 0x30	; 48
    80f2:	2a 30       	cpi	r18, 0x0A	; 10
    80f4:	c0 f3       	brcs	.-16     	; 0x80e6 <atoi+0x22>
    80f6:	1e f4       	brtc	.+6      	; 0x80fe <atoi+0x3a>
    80f8:	90 95       	com	r25
    80fa:	81 95       	neg	r24
    80fc:	9f 4f       	sbci	r25, 0xFF	; 255
    80fe:	08 95       	ret

00008100 <atol>:
    8100:	1f 93       	push	r17
    8102:	fc 01       	movw	r30, r24
    8104:	99 27       	eor	r25, r25
    8106:	88 27       	eor	r24, r24
    8108:	bc 01       	movw	r22, r24
    810a:	e8 94       	clt
    810c:	11 91       	ld	r17, Z+
    810e:	10 32       	cpi	r17, 0x20	; 32
    8110:	e9 f3       	breq	.-6      	; 0x810c <atol+0xc>
    8112:	19 30       	cpi	r17, 0x09	; 9
    8114:	10 f0       	brcs	.+4      	; 0x811a <atol+0x1a>
    8116:	1e 30       	cpi	r17, 0x0E	; 14
    8118:	c8 f3       	brcs	.-14     	; 0x810c <atol+0xc>
    811a:	1b 32       	cpi	r17, 0x2B	; 43
    811c:	51 f0       	breq	.+20     	; 0x8132 <atol+0x32>
    811e:	1d 32       	cpi	r17, 0x2D	; 45
    8120:	49 f4       	brne	.+18     	; 0x8134 <atol+0x34>
    8122:	68 94       	set
    8124:	06 c0       	rjmp	.+12     	; 0x8132 <atol+0x32>
    8126:	0e 94 b7 41 	call	0x836e	; 0x836e <__mulsi_const_10>
    812a:	61 0f       	add	r22, r17
    812c:	71 1d       	adc	r23, r1
    812e:	81 1d       	adc	r24, r1
    8130:	91 1d       	adc	r25, r1
    8132:	11 91       	ld	r17, Z+
    8134:	10 53       	subi	r17, 0x30	; 48
    8136:	1a 30       	cpi	r17, 0x0A	; 10
    8138:	b0 f3       	brcs	.-20     	; 0x8126 <atol+0x26>
    813a:	3e f4       	brtc	.+14     	; 0x814a <atol+0x4a>
    813c:	90 95       	com	r25
    813e:	80 95       	com	r24
    8140:	70 95       	com	r23
    8142:	61 95       	neg	r22
    8144:	7f 4f       	sbci	r23, 0xFF	; 255
    8146:	8f 4f       	sbci	r24, 0xFF	; 255
    8148:	9f 4f       	sbci	r25, 0xFF	; 255
    814a:	1f 91       	pop	r17
    814c:	08 95       	ret

0000814e <isspace>:
    814e:	91 11       	cpse	r25, r1
    8150:	cb c2       	rjmp	.+1430   	; 0x86e8 <__ctype_isfalse>
    8152:	80 32       	cpi	r24, 0x20	; 32
    8154:	19 f0       	breq	.+6      	; 0x815c <isspace+0xe>
    8156:	89 50       	subi	r24, 0x09	; 9
    8158:	85 50       	subi	r24, 0x05	; 5
    815a:	d0 f7       	brcc	.-12     	; 0x8150 <isspace+0x2>
    815c:	08 95       	ret

0000815e <tolower>:
    815e:	91 11       	cpse	r25, r1
    8160:	08 95       	ret
    8162:	81 54       	subi	r24, 0x41	; 65
    8164:	8a 51       	subi	r24, 0x1A	; 26
    8166:	08 f4       	brcc	.+2      	; 0x816a <tolower+0xc>
    8168:	80 5e       	subi	r24, 0xE0	; 224
    816a:	85 5a       	subi	r24, 0xA5	; 165
    816c:	08 95       	ret

0000816e <toupper>:
    816e:	91 11       	cpse	r25, r1
    8170:	08 95       	ret
    8172:	81 56       	subi	r24, 0x61	; 97
    8174:	8a 51       	subi	r24, 0x1A	; 26
    8176:	08 f4       	brcc	.+2      	; 0x817a <toupper+0xc>
    8178:	80 52       	subi	r24, 0x20	; 32
    817a:	85 58       	subi	r24, 0x85	; 133
    817c:	08 95       	ret

0000817e <strtok>:
    817e:	4c eb       	ldi	r20, 0xBC	; 188
    8180:	57 e0       	ldi	r21, 0x07	; 7
    8182:	0c 94 3b 41 	jmp	0x8276	; 0x8276 <strtok_r>

00008186 <memcpy>:
    8186:	fb 01       	movw	r30, r22
    8188:	dc 01       	movw	r26, r24
    818a:	02 c0       	rjmp	.+4      	; 0x8190 <memcpy+0xa>
    818c:	01 90       	ld	r0, Z+
    818e:	0d 92       	st	X+, r0
    8190:	41 50       	subi	r20, 0x01	; 1
    8192:	50 40       	sbci	r21, 0x00	; 0
    8194:	d8 f7       	brcc	.-10     	; 0x818c <memcpy+0x6>
    8196:	08 95       	ret

00008198 <memmove>:
    8198:	68 17       	cp	r22, r24
    819a:	79 07       	cpc	r23, r25
    819c:	68 f4       	brcc	.+26     	; 0x81b8 <memmove+0x20>
    819e:	fb 01       	movw	r30, r22
    81a0:	dc 01       	movw	r26, r24
    81a2:	e4 0f       	add	r30, r20
    81a4:	f5 1f       	adc	r31, r21
    81a6:	a4 0f       	add	r26, r20
    81a8:	b5 1f       	adc	r27, r21
    81aa:	02 c0       	rjmp	.+4      	; 0x81b0 <memmove+0x18>
    81ac:	02 90       	ld	r0, -Z
    81ae:	0e 92       	st	-X, r0
    81b0:	41 50       	subi	r20, 0x01	; 1
    81b2:	50 40       	sbci	r21, 0x00	; 0
    81b4:	d8 f7       	brcc	.-10     	; 0x81ac <memmove+0x14>
    81b6:	08 95       	ret
    81b8:	0c 94 c3 40 	jmp	0x8186	; 0x8186 <memcpy>

000081bc <strchr>:
    81bc:	fc 01       	movw	r30, r24
    81be:	81 91       	ld	r24, Z+
    81c0:	86 17       	cp	r24, r22
    81c2:	21 f0       	breq	.+8      	; 0x81cc <strchr+0x10>
    81c4:	88 23       	and	r24, r24
    81c6:	d9 f7       	brne	.-10     	; 0x81be <strchr+0x2>
    81c8:	99 27       	eor	r25, r25
    81ca:	08 95       	ret
    81cc:	31 97       	sbiw	r30, 0x01	; 1
    81ce:	cf 01       	movw	r24, r30
    81d0:	08 95       	ret

000081d2 <strcmp>:
    81d2:	fb 01       	movw	r30, r22
    81d4:	dc 01       	movw	r26, r24
    81d6:	8d 91       	ld	r24, X+
    81d8:	01 90       	ld	r0, Z+
    81da:	80 19       	sub	r24, r0
    81dc:	01 10       	cpse	r0, r1
    81de:	d9 f3       	breq	.-10     	; 0x81d6 <strcmp+0x4>
    81e0:	99 0b       	sbc	r25, r25
    81e2:	08 95       	ret

000081e4 <strcpy>:
    81e4:	fb 01       	movw	r30, r22
    81e6:	dc 01       	movw	r26, r24
    81e8:	01 90       	ld	r0, Z+
    81ea:	0d 92       	st	X+, r0
    81ec:	00 20       	and	r0, r0
    81ee:	e1 f7       	brne	.-8      	; 0x81e8 <strcpy+0x4>
    81f0:	08 95       	ret

000081f2 <strncmp>:
    81f2:	fb 01       	movw	r30, r22
    81f4:	dc 01       	movw	r26, r24
    81f6:	41 50       	subi	r20, 0x01	; 1
    81f8:	50 40       	sbci	r21, 0x00	; 0
    81fa:	30 f0       	brcs	.+12     	; 0x8208 <strncmp+0x16>
    81fc:	8d 91       	ld	r24, X+
    81fe:	01 90       	ld	r0, Z+
    8200:	80 19       	sub	r24, r0
    8202:	19 f4       	brne	.+6      	; 0x820a <strncmp+0x18>
    8204:	00 20       	and	r0, r0
    8206:	b9 f7       	brne	.-18     	; 0x81f6 <strncmp+0x4>
    8208:	88 1b       	sub	r24, r24
    820a:	99 0b       	sbc	r25, r25
    820c:	08 95       	ret

0000820e <strncpy>:
    820e:	fb 01       	movw	r30, r22
    8210:	dc 01       	movw	r26, r24
    8212:	41 50       	subi	r20, 0x01	; 1
    8214:	50 40       	sbci	r21, 0x00	; 0
    8216:	48 f0       	brcs	.+18     	; 0x822a <strncpy+0x1c>
    8218:	01 90       	ld	r0, Z+
    821a:	0d 92       	st	X+, r0
    821c:	00 20       	and	r0, r0
    821e:	c9 f7       	brne	.-14     	; 0x8212 <strncpy+0x4>
    8220:	01 c0       	rjmp	.+2      	; 0x8224 <strncpy+0x16>
    8222:	1d 92       	st	X+, r1
    8224:	41 50       	subi	r20, 0x01	; 1
    8226:	50 40       	sbci	r21, 0x00	; 0
    8228:	e0 f7       	brcc	.-8      	; 0x8222 <strncpy+0x14>
    822a:	08 95       	ret

0000822c <strrchr>:
    822c:	fc 01       	movw	r30, r24
    822e:	81 e0       	ldi	r24, 0x01	; 1
    8230:	90 e0       	ldi	r25, 0x00	; 0
    8232:	01 90       	ld	r0, Z+
    8234:	06 16       	cp	r0, r22
    8236:	09 f4       	brne	.+2      	; 0x823a <strrchr+0xe>
    8238:	cf 01       	movw	r24, r30
    823a:	00 20       	and	r0, r0
    823c:	d1 f7       	brne	.-12     	; 0x8232 <strrchr+0x6>
    823e:	01 97       	sbiw	r24, 0x01	; 1
    8240:	08 95       	ret

00008242 <strstr>:
    8242:	fb 01       	movw	r30, r22
    8244:	51 91       	ld	r21, Z+
    8246:	55 23       	and	r21, r21
    8248:	a9 f0       	breq	.+42     	; 0x8274 <strstr+0x32>
    824a:	bf 01       	movw	r22, r30
    824c:	dc 01       	movw	r26, r24
    824e:	4d 91       	ld	r20, X+
    8250:	45 17       	cp	r20, r21
    8252:	41 11       	cpse	r20, r1
    8254:	e1 f7       	brne	.-8      	; 0x824e <strstr+0xc>
    8256:	59 f4       	brne	.+22     	; 0x826e <strstr+0x2c>
    8258:	cd 01       	movw	r24, r26
    825a:	01 90       	ld	r0, Z+
    825c:	00 20       	and	r0, r0
    825e:	49 f0       	breq	.+18     	; 0x8272 <strstr+0x30>
    8260:	4d 91       	ld	r20, X+
    8262:	40 15       	cp	r20, r0
    8264:	41 11       	cpse	r20, r1
    8266:	c9 f3       	breq	.-14     	; 0x825a <strstr+0x18>
    8268:	fb 01       	movw	r30, r22
    826a:	41 11       	cpse	r20, r1
    826c:	ef cf       	rjmp	.-34     	; 0x824c <strstr+0xa>
    826e:	81 e0       	ldi	r24, 0x01	; 1
    8270:	90 e0       	ldi	r25, 0x00	; 0
    8272:	01 97       	sbiw	r24, 0x01	; 1
    8274:	08 95       	ret

00008276 <strtok_r>:
    8276:	fa 01       	movw	r30, r20
    8278:	a1 91       	ld	r26, Z+
    827a:	b0 81       	ld	r27, Z
    827c:	00 97       	sbiw	r24, 0x00	; 0
    827e:	19 f4       	brne	.+6      	; 0x8286 <strtok_r+0x10>
    8280:	10 97       	sbiw	r26, 0x00	; 0
    8282:	e1 f0       	breq	.+56     	; 0x82bc <strtok_r+0x46>
    8284:	cd 01       	movw	r24, r26
    8286:	dc 01       	movw	r26, r24
    8288:	cd 01       	movw	r24, r26
    828a:	0d 90       	ld	r0, X+
    828c:	00 20       	and	r0, r0
    828e:	11 f4       	brne	.+4      	; 0x8294 <strtok_r+0x1e>
    8290:	c0 01       	movw	r24, r0
    8292:	13 c0       	rjmp	.+38     	; 0x82ba <strtok_r+0x44>
    8294:	fb 01       	movw	r30, r22
    8296:	21 91       	ld	r18, Z+
    8298:	22 23       	and	r18, r18
    829a:	19 f0       	breq	.+6      	; 0x82a2 <strtok_r+0x2c>
    829c:	20 15       	cp	r18, r0
    829e:	d9 f7       	brne	.-10     	; 0x8296 <strtok_r+0x20>
    82a0:	f3 cf       	rjmp	.-26     	; 0x8288 <strtok_r+0x12>
    82a2:	fb 01       	movw	r30, r22
    82a4:	21 91       	ld	r18, Z+
    82a6:	20 15       	cp	r18, r0
    82a8:	19 f4       	brne	.+6      	; 0x82b0 <strtok_r+0x3a>
    82aa:	1e 92       	st	-X, r1
    82ac:	11 96       	adiw	r26, 0x01	; 1
    82ae:	06 c0       	rjmp	.+12     	; 0x82bc <strtok_r+0x46>
    82b0:	22 23       	and	r18, r18
    82b2:	c1 f7       	brne	.-16     	; 0x82a4 <strtok_r+0x2e>
    82b4:	0d 90       	ld	r0, X+
    82b6:	00 20       	and	r0, r0
    82b8:	a1 f7       	brne	.-24     	; 0x82a2 <strtok_r+0x2c>
    82ba:	d0 01       	movw	r26, r0
    82bc:	fa 01       	movw	r30, r20
    82be:	a1 93       	st	Z+, r26
    82c0:	b0 83       	st	Z, r27
    82c2:	08 95       	ret

000082c4 <itoa>:
    82c4:	fb 01       	movw	r30, r22
    82c6:	9f 01       	movw	r18, r30
    82c8:	e8 94       	clt
    82ca:	42 30       	cpi	r20, 0x02	; 2
    82cc:	c4 f0       	brlt	.+48     	; 0x82fe <itoa+0x3a>
    82ce:	45 32       	cpi	r20, 0x25	; 37
    82d0:	b4 f4       	brge	.+44     	; 0x82fe <itoa+0x3a>
    82d2:	4a 30       	cpi	r20, 0x0A	; 10
    82d4:	29 f4       	brne	.+10     	; 0x82e0 <itoa+0x1c>
    82d6:	97 fb       	bst	r25, 7
    82d8:	1e f4       	brtc	.+6      	; 0x82e0 <itoa+0x1c>
    82da:	90 95       	com	r25
    82dc:	81 95       	neg	r24
    82de:	9f 4f       	sbci	r25, 0xFF	; 255
    82e0:	64 2f       	mov	r22, r20
    82e2:	77 27       	eor	r23, r23
    82e4:	0e 94 46 40 	call	0x808c	; 0x808c <__udivmodhi4>
    82e8:	80 5d       	subi	r24, 0xD0	; 208
    82ea:	8a 33       	cpi	r24, 0x3A	; 58
    82ec:	0c f0       	brlt	.+2      	; 0x82f0 <itoa+0x2c>
    82ee:	89 5d       	subi	r24, 0xD9	; 217
    82f0:	81 93       	st	Z+, r24
    82f2:	cb 01       	movw	r24, r22
    82f4:	00 97       	sbiw	r24, 0x00	; 0
    82f6:	a1 f7       	brne	.-24     	; 0x82e0 <itoa+0x1c>
    82f8:	16 f4       	brtc	.+4      	; 0x82fe <itoa+0x3a>
    82fa:	5d e2       	ldi	r21, 0x2D	; 45
    82fc:	51 93       	st	Z+, r21
    82fe:	10 82       	st	Z, r1
    8300:	c9 01       	movw	r24, r18
    8302:	0c 94 8f 43 	jmp	0x871e	; 0x871e <strrev>

00008306 <ltoa>:
    8306:	fa 01       	movw	r30, r20
    8308:	cf 93       	push	r28
    830a:	ff 93       	push	r31
    830c:	ef 93       	push	r30
    830e:	22 30       	cpi	r18, 0x02	; 2
    8310:	44 f1       	brlt	.+80     	; 0x8362 <ltoa+0x5c>
    8312:	25 32       	cpi	r18, 0x25	; 37
    8314:	34 f5       	brge	.+76     	; 0x8362 <ltoa+0x5c>
    8316:	c2 2f       	mov	r28, r18
    8318:	e8 94       	clt
    831a:	ca 30       	cpi	r28, 0x0A	; 10
    831c:	49 f4       	brne	.+18     	; 0x8330 <ltoa+0x2a>
    831e:	97 fb       	bst	r25, 7
    8320:	3e f4       	brtc	.+14     	; 0x8330 <ltoa+0x2a>
    8322:	90 95       	com	r25
    8324:	80 95       	com	r24
    8326:	70 95       	com	r23
    8328:	61 95       	neg	r22
    832a:	7f 4f       	sbci	r23, 0xFF	; 255
    832c:	8f 4f       	sbci	r24, 0xFF	; 255
    832e:	9f 4f       	sbci	r25, 0xFF	; 255
    8330:	2c 2f       	mov	r18, r28
    8332:	33 27       	eor	r19, r19
    8334:	44 27       	eor	r20, r20
    8336:	55 27       	eor	r21, r21
    8338:	ff 93       	push	r31
    833a:	ef 93       	push	r30
    833c:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__udivmodsi4>
    8340:	ef 91       	pop	r30
    8342:	ff 91       	pop	r31
    8344:	60 5d       	subi	r22, 0xD0	; 208
    8346:	6a 33       	cpi	r22, 0x3A	; 58
    8348:	0c f0       	brlt	.+2      	; 0x834c <ltoa+0x46>
    834a:	69 5d       	subi	r22, 0xD9	; 217
    834c:	61 93       	st	Z+, r22
    834e:	b9 01       	movw	r22, r18
    8350:	ca 01       	movw	r24, r20
    8352:	60 50       	subi	r22, 0x00	; 0
    8354:	70 40       	sbci	r23, 0x00	; 0
    8356:	80 40       	sbci	r24, 0x00	; 0
    8358:	90 40       	sbci	r25, 0x00	; 0
    835a:	51 f7       	brne	.-44     	; 0x8330 <ltoa+0x2a>
    835c:	16 f4       	brtc	.+4      	; 0x8362 <ltoa+0x5c>
    835e:	cd e2       	ldi	r28, 0x2D	; 45
    8360:	c1 93       	st	Z+, r28
    8362:	10 82       	st	Z, r1
    8364:	8f 91       	pop	r24
    8366:	9f 91       	pop	r25
    8368:	cf 91       	pop	r28
    836a:	0c 94 8f 43 	jmp	0x871e	; 0x871e <strrev>

0000836e <__mulsi_const_10>:
    836e:	59 2f       	mov	r21, r25
    8370:	48 2f       	mov	r20, r24
    8372:	37 2f       	mov	r19, r23
    8374:	26 2f       	mov	r18, r22
    8376:	66 0f       	add	r22, r22
    8378:	77 1f       	adc	r23, r23
    837a:	88 1f       	adc	r24, r24
    837c:	99 1f       	adc	r25, r25
    837e:	66 0f       	add	r22, r22
    8380:	77 1f       	adc	r23, r23
    8382:	88 1f       	adc	r24, r24
    8384:	99 1f       	adc	r25, r25
    8386:	62 0f       	add	r22, r18
    8388:	73 1f       	adc	r23, r19
    838a:	84 1f       	adc	r24, r20
    838c:	95 1f       	adc	r25, r21
    838e:	66 0f       	add	r22, r22
    8390:	77 1f       	adc	r23, r23
    8392:	88 1f       	adc	r24, r24
    8394:	99 1f       	adc	r25, r25
    8396:	08 95       	ret

00008398 <__mulhi_const_10>:
    8398:	7a e0       	ldi	r23, 0x0A	; 10
    839a:	97 9f       	mul	r25, r23
    839c:	90 2d       	mov	r25, r0
    839e:	87 9f       	mul	r24, r23
    83a0:	80 2d       	mov	r24, r0
    83a2:	91 0d       	add	r25, r1
    83a4:	11 24       	eor	r1, r1
    83a6:	08 95       	ret

000083a8 <ultoa>:
    83a8:	fa 01       	movw	r30, r20
    83aa:	cf 93       	push	r28
    83ac:	ff 93       	push	r31
    83ae:	ef 93       	push	r30
    83b0:	22 30       	cpi	r18, 0x02	; 2
    83b2:	cc f0       	brlt	.+50     	; 0x83e6 <ultoa+0x3e>
    83b4:	25 32       	cpi	r18, 0x25	; 37
    83b6:	bc f4       	brge	.+46     	; 0x83e6 <ultoa+0x3e>
    83b8:	c2 2f       	mov	r28, r18
    83ba:	2c 2f       	mov	r18, r28
    83bc:	33 27       	eor	r19, r19
    83be:	44 27       	eor	r20, r20
    83c0:	55 27       	eor	r21, r21
    83c2:	ff 93       	push	r31
    83c4:	ef 93       	push	r30
    83c6:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__udivmodsi4>
    83ca:	ef 91       	pop	r30
    83cc:	ff 91       	pop	r31
    83ce:	60 5d       	subi	r22, 0xD0	; 208
    83d0:	6a 33       	cpi	r22, 0x3A	; 58
    83d2:	0c f0       	brlt	.+2      	; 0x83d6 <ultoa+0x2e>
    83d4:	69 5d       	subi	r22, 0xD9	; 217
    83d6:	61 93       	st	Z+, r22
    83d8:	b9 01       	movw	r22, r18
    83da:	ca 01       	movw	r24, r20
    83dc:	60 50       	subi	r22, 0x00	; 0
    83de:	70 40       	sbci	r23, 0x00	; 0
    83e0:	80 40       	sbci	r24, 0x00	; 0
    83e2:	90 40       	sbci	r25, 0x00	; 0
    83e4:	51 f7       	brne	.-44     	; 0x83ba <ultoa+0x12>
    83e6:	10 82       	st	Z, r1
    83e8:	8f 91       	pop	r24
    83ea:	9f 91       	pop	r25
    83ec:	cf 91       	pop	r28
    83ee:	0c 94 8f 43 	jmp	0x871e	; 0x871e <strrev>

000083f2 <utoa>:
    83f2:	fb 01       	movw	r30, r22
    83f4:	9f 01       	movw	r18, r30
    83f6:	42 30       	cpi	r20, 0x02	; 2
    83f8:	74 f0       	brlt	.+28     	; 0x8416 <utoa+0x24>
    83fa:	45 32       	cpi	r20, 0x25	; 37
    83fc:	64 f4       	brge	.+24     	; 0x8416 <utoa+0x24>
    83fe:	64 2f       	mov	r22, r20
    8400:	77 27       	eor	r23, r23
    8402:	0e 94 46 40 	call	0x808c	; 0x808c <__udivmodhi4>
    8406:	80 5d       	subi	r24, 0xD0	; 208
    8408:	8a 33       	cpi	r24, 0x3A	; 58
    840a:	0c f0       	brlt	.+2      	; 0x840e <utoa+0x1c>
    840c:	89 5d       	subi	r24, 0xD9	; 217
    840e:	81 93       	st	Z+, r24
    8410:	cb 01       	movw	r24, r22
    8412:	00 97       	sbiw	r24, 0x00	; 0
    8414:	a1 f7       	brne	.-24     	; 0x83fe <utoa+0xc>
    8416:	10 82       	st	Z, r1
    8418:	c9 01       	movw	r24, r18
    841a:	0c 94 8f 43 	jmp	0x871e	; 0x871e <strrev>

0000841e <strtod>:
    841e:	8f 92       	push	r8
    8420:	9f 92       	push	r9
    8422:	af 92       	push	r10
    8424:	bf 92       	push	r11
    8426:	cf 92       	push	r12
    8428:	df 92       	push	r13
    842a:	ef 92       	push	r14
    842c:	ff 92       	push	r15
    842e:	0f 93       	push	r16
    8430:	1f 93       	push	r17
    8432:	cf 93       	push	r28
    8434:	df 93       	push	r29
    8436:	8b 01       	movw	r16, r22
    8438:	61 15       	cp	r22, r1
    843a:	71 05       	cpc	r23, r1
    843c:	19 f0       	breq	.+6      	; 0x8444 <strtod+0x26>
    843e:	fb 01       	movw	r30, r22
    8440:	80 83       	st	Z, r24
    8442:	91 83       	std	Z+1, r25	; 0x01
    8444:	7c 01       	movw	r14, r24
    8446:	f7 01       	movw	r30, r14
    8448:	c1 90       	ld	r12, Z+
    844a:	7f 01       	movw	r14, r30
    844c:	ef 01       	movw	r28, r30
    844e:	8c 2d       	mov	r24, r12
    8450:	90 e0       	ldi	r25, 0x00	; 0
    8452:	0e 94 a7 40 	call	0x814e	; 0x814e <isspace>
    8456:	89 2b       	or	r24, r25
    8458:	b1 f7       	brne	.-20     	; 0x8446 <strtod+0x28>
    845a:	fd e2       	ldi	r31, 0x2D	; 45
    845c:	cf 12       	cpse	r12, r31
    845e:	04 c0       	rjmp	.+8      	; 0x8468 <strtod+0x4a>
    8460:	c9 90       	ld	r12, Y+
    8462:	dd 24       	eor	r13, r13
    8464:	d3 94       	inc	r13
    8466:	05 c0       	rjmp	.+10     	; 0x8472 <strtod+0x54>
    8468:	2b e2       	ldi	r18, 0x2B	; 43
    846a:	c2 12       	cpse	r12, r18
    846c:	01 c0       	rjmp	.+2      	; 0x8470 <strtod+0x52>
    846e:	c9 90       	ld	r12, Y+
    8470:	d1 2c       	mov	r13, r1
    8472:	7e 01       	movw	r14, r28
    8474:	41 e0       	ldi	r20, 0x01	; 1
    8476:	e4 1a       	sub	r14, r20
    8478:	f1 08       	sbc	r15, r1
    847a:	43 e0       	ldi	r20, 0x03	; 3
    847c:	50 e0       	ldi	r21, 0x00	; 0
    847e:	6f e4       	ldi	r22, 0x4F	; 79
    8480:	72 e0       	ldi	r23, 0x02	; 2
    8482:	c7 01       	movw	r24, r14
    8484:	0e 94 77 43 	call	0x86ee	; 0x86ee <strncasecmp_P>
    8488:	89 2b       	or	r24, r25
    848a:	e9 f4       	brne	.+58     	; 0x84c6 <strtod+0xa8>
    848c:	7e 01       	movw	r14, r28
    848e:	82 e0       	ldi	r24, 0x02	; 2
    8490:	e8 0e       	add	r14, r24
    8492:	f1 1c       	adc	r15, r1
    8494:	45 e0       	ldi	r20, 0x05	; 5
    8496:	50 e0       	ldi	r21, 0x00	; 0
    8498:	62 e5       	ldi	r22, 0x52	; 82
    849a:	72 e0       	ldi	r23, 0x02	; 2
    849c:	c7 01       	movw	r24, r14
    849e:	0e 94 77 43 	call	0x86ee	; 0x86ee <strncasecmp_P>
    84a2:	89 2b       	or	r24, r25
    84a4:	21 f4       	brne	.+8      	; 0x84ae <strtod+0x90>
    84a6:	7e 01       	movw	r14, r28
    84a8:	e7 e0       	ldi	r30, 0x07	; 7
    84aa:	ee 0e       	add	r14, r30
    84ac:	f1 1c       	adc	r15, r1
    84ae:	01 15       	cp	r16, r1
    84b0:	11 05       	cpc	r17, r1
    84b2:	19 f0       	breq	.+6      	; 0x84ba <strtod+0x9c>
    84b4:	f8 01       	movw	r30, r16
    84b6:	f1 82       	std	Z+1, r15	; 0x01
    84b8:	e0 82       	st	Z, r14
    84ba:	10 e0       	ldi	r17, 0x00	; 0
    84bc:	d0 e0       	ldi	r29, 0x00	; 0
    84be:	c0 e8       	ldi	r28, 0x80	; 128
    84c0:	d1 10       	cpse	r13, r1
    84c2:	fb c0       	rjmp	.+502    	; 0x86ba <strtod+0x29c>
    84c4:	ff c0       	rjmp	.+510    	; 0x86c4 <strtod+0x2a6>
    84c6:	43 e0       	ldi	r20, 0x03	; 3
    84c8:	50 e0       	ldi	r21, 0x00	; 0
    84ca:	67 e5       	ldi	r22, 0x57	; 87
    84cc:	72 e0       	ldi	r23, 0x02	; 2
    84ce:	c7 01       	movw	r24, r14
    84d0:	0e 94 77 43 	call	0x86ee	; 0x86ee <strncasecmp_P>
    84d4:	89 2b       	or	r24, r25
    84d6:	49 f4       	brne	.+18     	; 0x84ea <strtod+0xcc>
    84d8:	01 15       	cp	r16, r1
    84da:	11 05       	cpc	r17, r1
    84dc:	09 f4       	brne	.+2      	; 0x84e0 <strtod+0xc2>
    84de:	ef c0       	rjmp	.+478    	; 0x86be <strtod+0x2a0>
    84e0:	22 96       	adiw	r28, 0x02	; 2
    84e2:	f8 01       	movw	r30, r16
    84e4:	d1 83       	std	Z+1, r29	; 0x01
    84e6:	c0 83       	st	Z, r28
    84e8:	ea c0       	rjmp	.+468    	; 0x86be <strtod+0x2a0>
    84ea:	60 e0       	ldi	r22, 0x00	; 0
    84ec:	70 e0       	ldi	r23, 0x00	; 0
    84ee:	cb 01       	movw	r24, r22
    84f0:	e1 2c       	mov	r14, r1
    84f2:	f1 2c       	mov	r15, r1
    84f4:	ec 2d       	mov	r30, r12
    84f6:	e0 53       	subi	r30, 0x30	; 48
    84f8:	ea 30       	cpi	r30, 0x0A	; 10
    84fa:	48 f5       	brcc	.+82     	; 0x854e <strtod+0x130>
    84fc:	fd 2d       	mov	r31, r13
    84fe:	f2 60       	ori	r31, 0x02	; 2
    8500:	2d 2d       	mov	r18, r13
    8502:	28 70       	andi	r18, 0x08	; 8
    8504:	d2 fe       	sbrs	r13, 2
    8506:	06 c0       	rjmp	.+12     	; 0x8514 <strtod+0xf6>
    8508:	21 11       	cpse	r18, r1
    850a:	27 c0       	rjmp	.+78     	; 0x855a <strtod+0x13c>
    850c:	2f ef       	ldi	r18, 0xFF	; 255
    850e:	e2 1a       	sub	r14, r18
    8510:	f2 0a       	sbc	r15, r18
    8512:	23 c0       	rjmp	.+70     	; 0x855a <strtod+0x13c>
    8514:	22 23       	and	r18, r18
    8516:	19 f0       	breq	.+6      	; 0x851e <strtod+0x100>
    8518:	41 e0       	ldi	r20, 0x01	; 1
    851a:	e4 1a       	sub	r14, r20
    851c:	f1 08       	sbc	r15, r1
    851e:	a5 e0       	ldi	r26, 0x05	; 5
    8520:	b0 e0       	ldi	r27, 0x00	; 0
    8522:	9b 01       	movw	r18, r22
    8524:	ac 01       	movw	r20, r24
    8526:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__muluhisi3>
    852a:	66 0f       	add	r22, r22
    852c:	77 1f       	adc	r23, r23
    852e:	88 1f       	adc	r24, r24
    8530:	99 1f       	adc	r25, r25
    8532:	6e 0f       	add	r22, r30
    8534:	71 1d       	adc	r23, r1
    8536:	81 1d       	adc	r24, r1
    8538:	91 1d       	adc	r25, r1
    853a:	68 39       	cpi	r22, 0x98	; 152
    853c:	e9 e9       	ldi	r30, 0x99	; 153
    853e:	7e 07       	cpc	r23, r30
    8540:	8e 07       	cpc	r24, r30
    8542:	e9 e1       	ldi	r30, 0x19	; 25
    8544:	9e 07       	cpc	r25, r30
    8546:	48 f0       	brcs	.+18     	; 0x855a <strtod+0x13c>
    8548:	fd 2d       	mov	r31, r13
    854a:	f6 60       	ori	r31, 0x06	; 6
    854c:	06 c0       	rjmp	.+12     	; 0x855a <strtod+0x13c>
    854e:	ee 3f       	cpi	r30, 0xFE	; 254
    8550:	39 f4       	brne	.+14     	; 0x8560 <strtod+0x142>
    8552:	d3 fc       	sbrc	r13, 3
    8554:	3d c0       	rjmp	.+122    	; 0x85d0 <strtod+0x1b2>
    8556:	fd 2d       	mov	r31, r13
    8558:	f8 60       	ori	r31, 0x08	; 8
    855a:	c9 90       	ld	r12, Y+
    855c:	df 2e       	mov	r13, r31
    855e:	ca cf       	rjmp	.-108    	; 0x84f4 <strtod+0xd6>
    8560:	e5 33       	cpi	r30, 0x35	; 53
    8562:	11 f0       	breq	.+4      	; 0x8568 <strtod+0x14a>
    8564:	e5 31       	cpi	r30, 0x15	; 21
    8566:	a1 f5       	brne	.+104    	; 0x85d0 <strtod+0x1b2>
    8568:	a8 81       	ld	r26, Y
    856a:	ad 32       	cpi	r26, 0x2D	; 45
    856c:	19 f4       	brne	.+6      	; 0x8574 <strtod+0x156>
    856e:	f0 e1       	ldi	r31, 0x10	; 16
    8570:	df 2a       	or	r13, r31
    8572:	06 c0       	rjmp	.+12     	; 0x8580 <strtod+0x162>
    8574:	ab 32       	cpi	r26, 0x2B	; 43
    8576:	21 f0       	breq	.+8      	; 0x8580 <strtod+0x162>
    8578:	21 96       	adiw	r28, 0x01	; 1
    857a:	21 e0       	ldi	r18, 0x01	; 1
    857c:	30 e0       	ldi	r19, 0x00	; 0
    857e:	04 c0       	rjmp	.+8      	; 0x8588 <strtod+0x16a>
    8580:	a9 81       	ldd	r26, Y+1	; 0x01
    8582:	22 96       	adiw	r28, 0x02	; 2
    8584:	22 e0       	ldi	r18, 0x02	; 2
    8586:	30 e0       	ldi	r19, 0x00	; 0
    8588:	a0 53       	subi	r26, 0x30	; 48
    858a:	aa 30       	cpi	r26, 0x0A	; 10
    858c:	18 f0       	brcs	.+6      	; 0x8594 <strtod+0x176>
    858e:	c2 1b       	sub	r28, r18
    8590:	d3 0b       	sbc	r29, r19
    8592:	1e c0       	rjmp	.+60     	; 0x85d0 <strtod+0x1b2>
    8594:	fe 01       	movw	r30, r28
    8596:	20 e0       	ldi	r18, 0x00	; 0
    8598:	30 e0       	ldi	r19, 0x00	; 0
    859a:	20 38       	cpi	r18, 0x80	; 128
    859c:	4c e0       	ldi	r20, 0x0C	; 12
    859e:	34 07       	cpc	r19, r20
    85a0:	5c f4       	brge	.+22     	; 0x85b8 <strtod+0x19a>
    85a2:	a9 01       	movw	r20, r18
    85a4:	44 0f       	add	r20, r20
    85a6:	55 1f       	adc	r21, r21
    85a8:	44 0f       	add	r20, r20
    85aa:	55 1f       	adc	r21, r21
    85ac:	24 0f       	add	r18, r20
    85ae:	35 1f       	adc	r19, r21
    85b0:	22 0f       	add	r18, r18
    85b2:	33 1f       	adc	r19, r19
    85b4:	2a 0f       	add	r18, r26
    85b6:	31 1d       	adc	r19, r1
    85b8:	a1 91       	ld	r26, Z+
    85ba:	a0 53       	subi	r26, 0x30	; 48
    85bc:	ef 01       	movw	r28, r30
    85be:	aa 30       	cpi	r26, 0x0A	; 10
    85c0:	60 f3       	brcs	.-40     	; 0x859a <strtod+0x17c>
    85c2:	d4 fe       	sbrs	r13, 4
    85c4:	03 c0       	rjmp	.+6      	; 0x85cc <strtod+0x1ae>
    85c6:	31 95       	neg	r19
    85c8:	21 95       	neg	r18
    85ca:	31 09       	sbc	r19, r1
    85cc:	e2 0e       	add	r14, r18
    85ce:	f3 1e       	adc	r15, r19
    85d0:	d1 fe       	sbrs	r13, 1
    85d2:	07 c0       	rjmp	.+14     	; 0x85e2 <strtod+0x1c4>
    85d4:	01 15       	cp	r16, r1
    85d6:	11 05       	cpc	r17, r1
    85d8:	21 f0       	breq	.+8      	; 0x85e2 <strtod+0x1c4>
    85da:	21 97       	sbiw	r28, 0x01	; 1
    85dc:	f8 01       	movw	r30, r16
    85de:	d1 83       	std	Z+1, r29	; 0x01
    85e0:	c0 83       	st	Z, r28
    85e2:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <__floatunsisf>
    85e6:	2d 2d       	mov	r18, r13
    85e8:	23 70       	andi	r18, 0x03	; 3
    85ea:	23 30       	cpi	r18, 0x03	; 3
    85ec:	29 f0       	breq	.+10     	; 0x85f8 <strtod+0x1da>
    85ee:	16 2f       	mov	r17, r22
    85f0:	d7 2f       	mov	r29, r23
    85f2:	c8 2f       	mov	r28, r24
    85f4:	09 2f       	mov	r16, r25
    85f6:	07 c0       	rjmp	.+14     	; 0x8606 <strtod+0x1e8>
    85f8:	dc 01       	movw	r26, r24
    85fa:	cb 01       	movw	r24, r22
    85fc:	b0 58       	subi	r27, 0x80	; 128
    85fe:	18 2f       	mov	r17, r24
    8600:	d9 2f       	mov	r29, r25
    8602:	ca 2f       	mov	r28, r26
    8604:	0b 2f       	mov	r16, r27
    8606:	20 e0       	ldi	r18, 0x00	; 0
    8608:	30 e0       	ldi	r19, 0x00	; 0
    860a:	a9 01       	movw	r20, r18
    860c:	61 2f       	mov	r22, r17
    860e:	7d 2f       	mov	r23, r29
    8610:	8c 2f       	mov	r24, r28
    8612:	90 2f       	mov	r25, r16
    8614:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    8618:	88 23       	and	r24, r24
    861a:	09 f4       	brne	.+2      	; 0x861e <strtod+0x200>
    861c:	54 c0       	rjmp	.+168    	; 0x86c6 <strtod+0x2a8>
    861e:	f7 fe       	sbrs	r15, 7
    8620:	08 c0       	rjmp	.+16     	; 0x8632 <strtod+0x214>
    8622:	f1 94       	neg	r15
    8624:	e1 94       	neg	r14
    8626:	f1 08       	sbc	r15, r1
    8628:	36 e8       	ldi	r19, 0x86	; 134
    862a:	c3 2e       	mov	r12, r19
    862c:	32 e0       	ldi	r19, 0x02	; 2
    862e:	d3 2e       	mov	r13, r19
    8630:	04 c0       	rjmp	.+8      	; 0x863a <strtod+0x21c>
    8632:	2e e6       	ldi	r18, 0x6E	; 110
    8634:	c2 2e       	mov	r12, r18
    8636:	22 e0       	ldi	r18, 0x02	; 2
    8638:	d2 2e       	mov	r13, r18
    863a:	46 01       	movw	r8, r12
    863c:	f8 e1       	ldi	r31, 0x18	; 24
    863e:	8f 1a       	sub	r8, r31
    8640:	91 08       	sbc	r9, r1
    8642:	90 e2       	ldi	r25, 0x20	; 32
    8644:	a9 2e       	mov	r10, r25
    8646:	b1 2c       	mov	r11, r1
    8648:	15 c0       	rjmp	.+42     	; 0x8674 <strtod+0x256>
    864a:	f6 01       	movw	r30, r12
    864c:	45 91       	lpm	r20, Z+
    864e:	55 91       	lpm	r21, Z+
    8650:	65 91       	lpm	r22, Z+
    8652:	74 91       	lpm	r23, Z+
    8654:	24 2f       	mov	r18, r20
    8656:	35 2f       	mov	r19, r21
    8658:	46 2f       	mov	r20, r22
    865a:	57 2f       	mov	r21, r23
    865c:	61 2f       	mov	r22, r17
    865e:	7d 2f       	mov	r23, r29
    8660:	8c 2f       	mov	r24, r28
    8662:	90 2f       	mov	r25, r16
    8664:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__mulsf3>
    8668:	16 2f       	mov	r17, r22
    866a:	d7 2f       	mov	r29, r23
    866c:	c8 2f       	mov	r28, r24
    866e:	09 2f       	mov	r16, r25
    8670:	ea 18       	sub	r14, r10
    8672:	fb 08       	sbc	r15, r11
    8674:	ea 14       	cp	r14, r10
    8676:	fb 04       	cpc	r15, r11
    8678:	44 f7       	brge	.-48     	; 0x864a <strtod+0x22c>
    867a:	24 e0       	ldi	r18, 0x04	; 4
    867c:	c2 1a       	sub	r12, r18
    867e:	d1 08       	sbc	r13, r1
    8680:	b5 94       	asr	r11
    8682:	a7 94       	ror	r10
    8684:	c8 14       	cp	r12, r8
    8686:	d9 04       	cpc	r13, r9
    8688:	a9 f7       	brne	.-22     	; 0x8674 <strtod+0x256>
    868a:	61 2f       	mov	r22, r17
    868c:	7d 2f       	mov	r23, r29
    868e:	8c 2f       	mov	r24, r28
    8690:	90 2f       	mov	r25, r16
    8692:	28 2f       	mov	r18, r24
    8694:	22 0f       	add	r18, r18
    8696:	29 2f       	mov	r18, r25
    8698:	22 1f       	adc	r18, r18
    869a:	2f 3f       	cpi	r18, 0xFF	; 255
    869c:	39 f0       	breq	.+14     	; 0x86ac <strtod+0x28e>
    869e:	20 e0       	ldi	r18, 0x00	; 0
    86a0:	30 e0       	ldi	r19, 0x00	; 0
    86a2:	a9 01       	movw	r20, r18
    86a4:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__cmpsf2>
    86a8:	81 11       	cpse	r24, r1
    86aa:	0d c0       	rjmp	.+26     	; 0x86c6 <strtod+0x2a8>
    86ac:	82 e2       	ldi	r24, 0x22	; 34
    86ae:	90 e0       	ldi	r25, 0x00	; 0
    86b0:	90 93 62 10 	sts	0x1062, r25
    86b4:	80 93 61 10 	sts	0x1061, r24
    86b8:	06 c0       	rjmp	.+12     	; 0x86c6 <strtod+0x2a8>
    86ba:	0f ef       	ldi	r16, 0xFF	; 255
    86bc:	04 c0       	rjmp	.+8      	; 0x86c6 <strtod+0x2a8>
    86be:	10 e0       	ldi	r17, 0x00	; 0
    86c0:	d0 e0       	ldi	r29, 0x00	; 0
    86c2:	c0 ec       	ldi	r28, 0xC0	; 192
    86c4:	0f e7       	ldi	r16, 0x7F	; 127
    86c6:	61 2f       	mov	r22, r17
    86c8:	7d 2f       	mov	r23, r29
    86ca:	8c 2f       	mov	r24, r28
    86cc:	90 2f       	mov	r25, r16
    86ce:	df 91       	pop	r29
    86d0:	cf 91       	pop	r28
    86d2:	1f 91       	pop	r17
    86d4:	0f 91       	pop	r16
    86d6:	ff 90       	pop	r15
    86d8:	ef 90       	pop	r14
    86da:	df 90       	pop	r13
    86dc:	cf 90       	pop	r12
    86de:	bf 90       	pop	r11
    86e0:	af 90       	pop	r10
    86e2:	9f 90       	pop	r9
    86e4:	8f 90       	pop	r8
    86e6:	08 95       	ret

000086e8 <__ctype_isfalse>:
    86e8:	99 27       	eor	r25, r25
    86ea:	88 27       	eor	r24, r24

000086ec <__ctype_istrue>:
    86ec:	08 95       	ret

000086ee <strncasecmp_P>:
    86ee:	fb 01       	movw	r30, r22
    86f0:	dc 01       	movw	r26, r24
    86f2:	41 50       	subi	r20, 0x01	; 1
    86f4:	50 40       	sbci	r21, 0x00	; 0
    86f6:	88 f0       	brcs	.+34     	; 0x871a <strncasecmp_P+0x2c>
    86f8:	8d 91       	ld	r24, X+
    86fa:	81 34       	cpi	r24, 0x41	; 65
    86fc:	1c f0       	brlt	.+6      	; 0x8704 <strncasecmp_P+0x16>
    86fe:	8b 35       	cpi	r24, 0x5B	; 91
    8700:	0c f4       	brge	.+2      	; 0x8704 <strncasecmp_P+0x16>
    8702:	80 5e       	subi	r24, 0xE0	; 224
    8704:	65 91       	lpm	r22, Z+
    8706:	61 34       	cpi	r22, 0x41	; 65
    8708:	1c f0       	brlt	.+6      	; 0x8710 <strncasecmp_P+0x22>
    870a:	6b 35       	cpi	r22, 0x5B	; 91
    870c:	0c f4       	brge	.+2      	; 0x8710 <strncasecmp_P+0x22>
    870e:	60 5e       	subi	r22, 0xE0	; 224
    8710:	86 1b       	sub	r24, r22
    8712:	61 11       	cpse	r22, r1
    8714:	71 f3       	breq	.-36     	; 0x86f2 <strncasecmp_P+0x4>
    8716:	99 0b       	sbc	r25, r25
    8718:	08 95       	ret
    871a:	88 1b       	sub	r24, r24
    871c:	fc cf       	rjmp	.-8      	; 0x8716 <strncasecmp_P+0x28>

0000871e <strrev>:
    871e:	dc 01       	movw	r26, r24
    8720:	fc 01       	movw	r30, r24
    8722:	67 2f       	mov	r22, r23
    8724:	71 91       	ld	r23, Z+
    8726:	77 23       	and	r23, r23
    8728:	e1 f7       	brne	.-8      	; 0x8722 <strrev+0x4>
    872a:	32 97       	sbiw	r30, 0x02	; 2
    872c:	04 c0       	rjmp	.+8      	; 0x8736 <strrev+0x18>
    872e:	7c 91       	ld	r23, X
    8730:	6d 93       	st	X+, r22
    8732:	70 83       	st	Z, r23
    8734:	62 91       	ld	r22, -Z
    8736:	ae 17       	cp	r26, r30
    8738:	bf 07       	cpc	r27, r31
    873a:	c8 f3       	brcs	.-14     	; 0x872e <strrev+0x10>
    873c:	08 95       	ret

0000873e <__do_global_dtors>:
    873e:	12 e0       	ldi	r17, 0x02	; 2
    8740:	c6 e9       	ldi	r28, 0x96	; 150
    8742:	d2 e0       	ldi	r29, 0x02	; 2
    8744:	00 e0       	ldi	r16, 0x00	; 0
    8746:	06 c0       	rjmp	.+12     	; 0x8754 <__do_global_dtors+0x16>
    8748:	22 97       	sbiw	r28, 0x02	; 2
    874a:	01 09       	sbc	r16, r1
    874c:	fe 01       	movw	r30, r28
    874e:	0b bf       	out	0x3b, r16	; 59
    8750:	0e 94 5a 40 	call	0x80b4	; 0x80b4 <__tablejump_elpm__>
    8754:	ca 39       	cpi	r28, 0x9A	; 154
    8756:	d1 07       	cpc	r29, r17
    8758:	80 e0       	ldi	r24, 0x00	; 0
    875a:	08 07       	cpc	r16, r24
    875c:	a9 f7       	brne	.-22     	; 0x8748 <__do_global_dtors+0xa>
    875e:	f8 94       	cli

00008760 <__stop_program>:
    8760:	ff cf       	rjmp	.-2      	; 0x8760 <__stop_program>
