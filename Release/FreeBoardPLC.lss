
FreeBoardPLC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000570  00800200  000092b6  0000934a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000092b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000764  00800770  00800770  000098ba  2**0
                  ALLOC
  3 .stab         0001c8e4  00000000  00000000  000098bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0002d849  00000000  00000000  000261a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__dtors_end>
       4:	0c 94 62 40 	jmp	0x80c4	; 0x80c4 <__vector_1>
       8:	0c 94 93 40 	jmp	0x8126	; 0x8126 <__vector_2>
       c:	0c 94 c4 40 	jmp	0x8188	; 0x8188 <__vector_3>
      10:	0c 94 f5 40 	jmp	0x81ea	; 0x81ea <__vector_4>
      14:	0c 94 26 41 	jmp	0x824c	; 0x824c <__vector_5>
      18:	0c 94 57 41 	jmp	0x82ae	; 0x82ae <__vector_6>
      1c:	0c 94 88 41 	jmp	0x8310	; 0x8310 <__vector_7>
      20:	0c 94 b9 41 	jmp	0x8372	; 0x8372 <__vector_8>
      24:	0c 94 10 03 	jmp	0x620	; 0x620 <__vector_9>
      28:	0c 94 38 03 	jmp	0x670	; 0x670 <__vector_10>
      2c:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__vector_11>
      30:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      34:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      38:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      3c:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__vector_15>
      40:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      44:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__vector_17>
      48:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      4c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      50:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      54:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      58:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      5c:	0c 94 fd 41 	jmp	0x83fa	; 0x83fa <__vector_23>
      60:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      64:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__vector_25>
      68:	0c 94 f1 39 	jmp	0x73e2	; 0x73e2 <__vector_26>
      6c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      70:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      74:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      78:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      7c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      80:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_32>
      84:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      88:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      8c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      90:	0c 94 4a 39 	jmp	0x7294	; 0x7294 <__vector_36>
      94:	0c 94 3c 3a 	jmp	0x7478	; 0x7478 <__vector_37>
      98:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      9c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      a0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      a4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      a8:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__vector_42>
      ac:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      b0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      b4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      b8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      bc:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__vector_47>
      c0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      c4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      c8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      cc:	0c 94 77 39 	jmp	0x72ee	; 0x72ee <__vector_51>
      d0:	0c 94 87 3a 	jmp	0x750e	; 0x750e <__vector_52>
      d4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      d8:	0c 94 a4 39 	jmp	0x7348	; 0x7348 <__vector_54>
      dc:	0c 94 d2 3a 	jmp	0x75a4	; 0x75a4 <__vector_55>
      e0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

0000012f <_ZL5table>:
     12f:	00 c2 01 00 01 00 11 00 11 00 0c 00 00 e1 00 00     ................
     13f:	0a 00 25 00 25 00 21 00 00 96 00 00 19 00 39 00     ..%.%.!.......9.
     14f:	39 00 36 00 12 7a 00 00 1f 00 46 00 46 00 44 00     9.6..z....F.F.D.
     15f:	80 70 00 00 22 00 4d 00 4d 00 4a 00 00 4b 00 00     .p..".M.M.J..K..
     16f:	36 00 75 00 75 00 72 00 40 38 00 00 4a 00 9c 00     6.u.u.r.@8..J...
     17f:	9c 00 99 00 80 25 00 00 72 00 ec 00 ec 00 e9 00     .....%..r.......
     18f:	c0 12 00 00 e9 00 da 01 da 01 d7 01 60 09 00 00     ............`...
     19f:	d7 01 b6 03 b6 03 b3 03 b0 04 00 00 b3 03 6e 07     ..............n.
     1af:	6e 07 6b 07 2c 01 00 00 dc 0e c1 1d c1 1d be 1d     n.k.,...........

000001bf <port_to_mode_PGM>:
     1bf:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     1cf:	01 01 00 00 04 01 07 01 0a 01                       ..........

000001d9 <port_to_output_PGM>:
     1d9:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1e9:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f3 <port_to_input_PGM>:
     1f3:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     203:	00 01 00 00 03 01 06 01 09 01                       ..........

0000020d <digital_pin_to_port_PGM>:
     20d:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     21d:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     22d:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     23d:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     24d:	0b 0b 0b 0b 0b 0b                                   ......

00000253 <digital_pin_to_bit_mask_PGM>:
     253:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     263:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     273:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     283:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     293:	04 08 10 20 40 80                                   ... @.

00000299 <digital_pin_to_timer_PGM>:
     299:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     2c5:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000002e0 <__ctors_start>:
     2e0:	e2 08       	sbc	r14, r2
     2e2:	c4 13       	cpse	r28, r20
     2e4:	16 1a       	sub	r1, r22
     2e6:	a8 1e       	adc	r10, r24
     2e8:	07 38       	cpi	r16, 0x87	; 135
     2ea:	cc 3c       	cpi	r28, 0xCC	; 204

000002ec <__ctors_end>:
     2ec:	e7 08       	sbc	r14, r7
     2ee:	ad 1e       	adc	r10, r29

000002f0 <__dtors_end>:
     2f0:	11 24       	eor	r1, r1
     2f2:	1f be       	out	0x3f, r1	; 63
     2f4:	cf ef       	ldi	r28, 0xFF	; 255
     2f6:	d1 e2       	ldi	r29, 0x21	; 33
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	cd bf       	out	0x3d, r28	; 61

000002fc <__do_copy_data>:
     2fc:	17 e0       	ldi	r17, 0x07	; 7
     2fe:	a0 e0       	ldi	r26, 0x00	; 0
     300:	b2 e0       	ldi	r27, 0x02	; 2
     302:	e6 eb       	ldi	r30, 0xB6	; 182
     304:	f2 e9       	ldi	r31, 0x92	; 146
     306:	00 e0       	ldi	r16, 0x00	; 0
     308:	0b bf       	out	0x3b, r16	; 59
     30a:	02 c0       	rjmp	.+4      	; 0x310 <__do_copy_data+0x14>
     30c:	07 90       	elpm	r0, Z+
     30e:	0d 92       	st	X+, r0
     310:	a0 37       	cpi	r26, 0x70	; 112
     312:	b1 07       	cpc	r27, r17
     314:	d9 f7       	brne	.-10     	; 0x30c <__do_copy_data+0x10>

00000316 <__do_clear_bss>:
     316:	1e e0       	ldi	r17, 0x0E	; 14
     318:	a0 e7       	ldi	r26, 0x70	; 112
     31a:	b7 e0       	ldi	r27, 0x07	; 7
     31c:	01 c0       	rjmp	.+2      	; 0x320 <.do_clear_bss_start>

0000031e <.do_clear_bss_loop>:
     31e:	1d 92       	st	X+, r1

00000320 <.do_clear_bss_start>:
     320:	a4 3d       	cpi	r26, 0xD4	; 212
     322:	b1 07       	cpc	r27, r17
     324:	e1 f7       	brne	.-8      	; 0x31e <.do_clear_bss_loop>

00000326 <__do_global_ctors>:
     326:	12 e0       	ldi	r17, 0x02	; 2
     328:	cc ee       	ldi	r28, 0xEC	; 236
     32a:	d2 e0       	ldi	r29, 0x02	; 2
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	06 c0       	rjmp	.+12     	; 0x33c <__do_global_ctors+0x16>
     330:	22 97       	sbiw	r28, 0x02	; 2
     332:	01 09       	sbc	r16, r1
     334:	fe 01       	movw	r30, r28
     336:	0b bf       	out	0x3b, r16	; 59
     338:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <__tablejump_elpm__>
     33c:	c0 3e       	cpi	r28, 0xE0	; 224
     33e:	d1 07       	cpc	r29, r17
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	08 07       	cpc	r16, r24
     344:	a9 f7       	brne	.-22     	; 0x330 <__do_global_ctors+0xa>
     346:	0e 94 ea 41 	call	0x83d4	; 0x83d4 <main>
     34a:	0c 94 49 49 	jmp	0x9292	; 0x9292 <__do_global_dtors>

0000034e <__bad_interrupt>:
     34e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000352 <_ZN14SoftwareSerial4readEv>:


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     352:	20 91 70 07 	lds	r18, 0x0770
     356:	30 91 71 07 	lds	r19, 0x0771
     35a:	28 17       	cp	r18, r24
     35c:	39 07       	cpc	r19, r25
     35e:	b1 f4       	brne	.+44     	; 0x38c <_ZN14SoftwareSerial4readEv+0x3a>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     360:	90 91 b3 07 	lds	r25, 0x07B3
     364:	80 91 b2 07 	lds	r24, 0x07B2
     368:	98 17       	cp	r25, r24
     36a:	81 f0       	breq	.+32     	; 0x38c <_ZN14SoftwareSerial4readEv+0x3a>
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     36c:	e0 91 b3 07 	lds	r30, 0x07B3
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	ee 58       	subi	r30, 0x8E	; 142
     374:	f8 4f       	sbci	r31, 0xF8	; 248
     376:	20 81       	ld	r18, Z
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     378:	80 91 b3 07 	lds	r24, 0x07B3
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	8f 73       	andi	r24, 0x3F	; 63
     382:	90 70       	andi	r25, 0x00	; 0
     384:	80 93 b3 07 	sts	0x07B3, r24
  return d;
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	02 c0       	rjmp	.+4      	; 0x390 <_ZN14SoftwareSerial4readEv+0x3e>
  if (!isListening())
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
     38c:	2f ef       	ldi	r18, 0xFF	; 255
     38e:	3f ef       	ldi	r19, 0xFF	; 255

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     390:	c9 01       	movw	r24, r18
     392:	08 95       	ret

00000394 <_ZN14SoftwareSerial9availableEv>:

int SoftwareSerial::available()
{
  if (!isListening())
     394:	20 91 70 07 	lds	r18, 0x0770
     398:	30 91 71 07 	lds	r19, 0x0771
     39c:	28 17       	cp	r18, r24
     39e:	39 07       	cpc	r19, r25
     3a0:	79 f4       	brne	.+30     	; 0x3c0 <_ZN14SoftwareSerial9availableEv+0x2c>
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     3a2:	80 91 b2 07 	lds	r24, 0x07B2
     3a6:	20 91 b3 07 	lds	r18, 0x07B3
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	80 5c       	subi	r24, 0xC0	; 192
     3ae:	9f 4f       	sbci	r25, 0xFF	; 255
     3b0:	82 1b       	sub	r24, r18
     3b2:	91 09       	sbc	r25, r1
     3b4:	60 e4       	ldi	r22, 0x40	; 64
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	0e 94 98 47 	call	0x8f30	; 0x8f30 <__divmodhi4>
     3bc:	9c 01       	movw	r18, r24
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <_ZN14SoftwareSerial9availableEv+0x30>
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     3c4:	c9 01       	movw	r24, r18
     3c6:	08 95       	ret

000003c8 <_ZN14SoftwareSerial5flushEv>:
  return 1;
}

void SoftwareSerial::flush()
{
  if (!isListening())
     3c8:	20 91 70 07 	lds	r18, 0x0770
     3cc:	30 91 71 07 	lds	r19, 0x0771
     3d0:	28 17       	cp	r18, r24
     3d2:	39 07       	cpc	r19, r25
     3d4:	49 f4       	brne	.+18     	; 0x3e8 <_ZN14SoftwareSerial5flushEv+0x20>
    return;

  uint8_t oldSREG = SREG;
     3d6:	8f b7       	in	r24, 0x3f	; 63
  cli();
     3d8:	f8 94       	cli
  _receive_buffer_head = _receive_buffer_tail = 0;
     3da:	10 92 b2 07 	sts	0x07B2, r1
     3de:	90 91 b2 07 	lds	r25, 0x07B2
     3e2:	90 93 b3 07 	sts	0x07B3, r25
  SREG = oldSREG;
     3e6:	8f bf       	out	0x3f, r24	; 63
     3e8:	08 95       	ret

000003ea <_ZN14SoftwareSerial4peekEv>:
}

int SoftwareSerial::peek()
{
  if (!isListening())
     3ea:	20 91 70 07 	lds	r18, 0x0770
     3ee:	30 91 71 07 	lds	r19, 0x0771
     3f2:	28 17       	cp	r18, r24
     3f4:	39 07       	cpc	r19, r25
     3f6:	81 f4       	brne	.+32     	; 0x418 <_ZN14SoftwareSerial4peekEv+0x2e>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     3f8:	90 91 b3 07 	lds	r25, 0x07B3
     3fc:	80 91 b2 07 	lds	r24, 0x07B2
     400:	98 17       	cp	r25, r24
     402:	51 f0       	breq	.+20     	; 0x418 <_ZN14SoftwareSerial4peekEv+0x2e>
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     404:	e0 91 b3 07 	lds	r30, 0x07B3
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	ee 58       	subi	r30, 0x8E	; 142
     40c:	f8 4f       	sbci	r31, 0xF8	; 248
     40e:	20 81       	ld	r18, Z
     410:	33 27       	eor	r19, r19
     412:	27 fd       	sbrc	r18, 7
     414:	30 95       	com	r19
     416:	02 c0       	rjmp	.+4      	; 0x41c <_ZN14SoftwareSerial4peekEv+0x32>
  if (!isListening())
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
     418:	2f ef       	ldi	r18, 0xFF	; 255
     41a:	3f ef       	ldi	r19, 0xFF	; 255

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     41c:	c9 01       	movw	r24, r18
     41e:	08 95       	ret

00000420 <_ZN14SoftwareSerial10tunedDelayEj>:
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	2f ef       	ldi	r18, 0xFF	; 255
     426:	8f 3f       	cpi	r24, 0xFF	; 255
     428:	92 07       	cpc	r25, r18
     42a:	d9 f7       	brne	.-10     	; 0x422 <_ZN14SoftwareSerial10tunedDelayEj+0x2>
}
     42c:	08 95       	ret

0000042e <_ZN14SoftwareSerial6listenEv>:

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
     42e:	fc 01       	movw	r30, r24
  if (active_object != this)
     430:	80 91 70 07 	lds	r24, 0x0770
     434:	90 91 71 07 	lds	r25, 0x0771
     438:	8e 17       	cp	r24, r30
     43a:	9f 07       	cpc	r25, r31
     43c:	91 f0       	breq	.+36     	; 0x462 <_ZN14SoftwareSerial6listenEv+0x34>
  {
    _buffer_overflow = false;
     43e:	83 8d       	ldd	r24, Z+27	; 0x1b
     440:	8e 7f       	andi	r24, 0xFE	; 254
     442:	83 8f       	std	Z+27, r24	; 0x1b
    uint8_t oldSREG = SREG;
     444:	8f b7       	in	r24, 0x3f	; 63
    cli();
     446:	f8 94       	cli
    _receive_buffer_head = _receive_buffer_tail = 0;
     448:	10 92 b2 07 	sts	0x07B2, r1
     44c:	90 91 b2 07 	lds	r25, 0x07B2
     450:	90 93 b3 07 	sts	0x07B3, r25
    active_object = this;
     454:	f0 93 71 07 	sts	0x0771, r31
     458:	e0 93 70 07 	sts	0x0770, r30
    SREG = oldSREG;
     45c:	8f bf       	out	0x3f, r24	; 63
    return true;
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	08 95       	ret
  }

  return false;
     462:	80 e0       	ldi	r24, 0x00	; 0
}
     464:	08 95       	ret

00000466 <_ZN14SoftwareSerial4recvEv>:

//
// The receive routine called by the interrupt handler
//
void SoftwareSerial::recv()
{
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	ec 01       	movw	r28, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     474:	8b 8d       	ldd	r24, Y+27	; 0x1b
     476:	ee 85       	ldd	r30, Y+14	; 0x0e
     478:	ff 85       	ldd	r31, Y+15	; 0x0f
     47a:	9d 85       	ldd	r25, Y+13	; 0x0d
     47c:	81 ff       	sbrs	r24, 1
     47e:	04 c0       	rjmp	.+8      	; 0x488 <_ZN14SoftwareSerial4recvEv+0x22>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     480:	80 81       	ld	r24, Z
     482:	89 23       	and	r24, r25

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     484:	29 f4       	brne	.+10     	; 0x490 <_ZN14SoftwareSerial4recvEv+0x2a>
     486:	45 c0       	rjmp	.+138    	; 0x512 <_ZN14SoftwareSerial4recvEv+0xac>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     488:	80 81       	ld	r24, Z
     48a:	89 23       	and	r24, r25

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     48c:	09 f0       	breq	.+2      	; 0x490 <_ZN14SoftwareSerial4recvEv+0x2a>
     48e:	41 c0       	rjmp	.+130    	; 0x512 <_ZN14SoftwareSerial4recvEv+0xac>
  {
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     490:	8b 89       	ldd	r24, Y+19	; 0x13
     492:	9c 89       	ldd	r25, Y+20	; 0x14
     494:	0e 94 10 02 	call	0x420	; 0x420 <_ZN14SoftwareSerial10tunedDelayEj>
     498:	08 e0       	ldi	r16, 0x08	; 8
     49a:	10 e0       	ldi	r17, 0x00	; 0
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     49c:	ee 24       	eor	r14, r14
     49e:	e3 94       	inc	r14
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     4a0:	ff 24       	eor	r15, r15
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
     4a2:	8d 89       	ldd	r24, Y+21	; 0x15
     4a4:	9e 89       	ldd	r25, Y+22	; 0x16
     4a6:	0e 94 10 02 	call	0x420	; 0x420 <_ZN14SoftwareSerial10tunedDelayEj>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     4aa:	ee 85       	ldd	r30, Y+14	; 0x0e
     4ac:	ff 85       	ldd	r31, Y+15	; 0x0f
     4ae:	80 81       	ld	r24, Z
     4b0:	9d 85       	ldd	r25, Y+13	; 0x0d
     4b2:	89 23       	and	r24, r25
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
      if (rx_pin_read())
     4b4:	11 f0       	breq	.+4      	; 0x4ba <_ZN14SoftwareSerial4recvEv+0x54>
        d |= i;
     4b6:	fe 28       	or	r15, r14
     4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <_ZN14SoftwareSerial4recvEv+0x5a>
    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
     4ba:	8e 2d       	mov	r24, r14
     4bc:	80 95       	com	r24
      if (rx_pin_read())
        d |= i;
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
     4be:	f8 22       	and	r15, r24
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     4c0:	ee 0c       	add	r14, r14
     4c2:	01 50       	subi	r16, 0x01	; 1
     4c4:	10 40       	sbci	r17, 0x00	; 0
     4c6:	69 f7       	brne	.-38     	; 0x4a2 <_ZN14SoftwareSerial4recvEv+0x3c>
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     4c8:	8f 89       	ldd	r24, Y+23	; 0x17
     4ca:	98 8d       	ldd	r25, Y+24	; 0x18
     4cc:	0e 94 10 02 	call	0x420	; 0x420 <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN2, 1);

    if (_inverse_logic)
     4d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4d2:	81 fd       	sbrc	r24, 1
      d = ~d;
     4d4:	f0 94       	com	r15

    // if buffer full, set the overflow flag and return
    if ((_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF != _receive_buffer_head) 
     4d6:	80 91 b2 07 	lds	r24, 0x07B2
     4da:	20 91 b3 07 	lds	r18, 0x07B3
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	8f 73       	andi	r24, 0x3F	; 63
     4e4:	90 70       	andi	r25, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	82 17       	cp	r24, r18
     4ea:	93 07       	cpc	r25, r19
     4ec:	79 f0       	breq	.+30     	; 0x50c <_ZN14SoftwareSerial4recvEv+0xa6>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     4ee:	e0 91 b2 07 	lds	r30, 0x07B2
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	ee 58       	subi	r30, 0x8E	; 142
     4f6:	f8 4f       	sbci	r31, 0xF8	; 248
     4f8:	f0 82       	st	Z, r15
      _receive_buffer_tail = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     4fa:	80 91 b2 07 	lds	r24, 0x07B2
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	8f 73       	andi	r24, 0x3F	; 63
     504:	90 70       	andi	r25, 0x00	; 0
     506:	80 93 b2 07 	sts	0x07B2, r24
     50a:	03 c0       	rjmp	.+6      	; 0x512 <_ZN14SoftwareSerial4recvEv+0xac>
    else 
    {
#if _DEBUG // for scope: pulse pin as overflow indictator
      DebugPulse(_DEBUG_PIN1, 1);
#endif
      _buffer_overflow = true;
     50c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     50e:	81 60       	ori	r24, 0x01	; 1
     510:	8b 8f       	std	Y+27, r24	; 0x1b
    "pop r20 \n\t"
    "pop r19 \n\t"
    "pop r18 \n\t"
    ::);
#endif
}
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	ff 90       	pop	r15
     51c:	ef 90       	pop	r14
     51e:	08 95       	ret

00000520 <_ZN14SoftwareSerial12tx_pin_writeEh>:

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
     520:	fc 01       	movw	r30, r24
     522:	a1 89       	ldd	r26, Z+17	; 0x11
     524:	b2 89       	ldd	r27, Z+18	; 0x12
     526:	90 89       	ldd	r25, Z+16	; 0x10
  if (pin_state == LOW)
     528:	66 23       	and	r22, r22
     52a:	29 f4       	brne	.+10     	; 0x536 <_ZN14SoftwareSerial12tx_pin_writeEh+0x16>
    *_transmitPortRegister &= ~_transmitBitMask;
     52c:	2c 91       	ld	r18, X
     52e:	89 2f       	mov	r24, r25
     530:	80 95       	com	r24
     532:	82 23       	and	r24, r18
     534:	02 c0       	rjmp	.+4      	; 0x53a <_ZN14SoftwareSerial12tx_pin_writeEh+0x1a>
  else
    *_transmitPortRegister |= _transmitBitMask;
     536:	8c 91       	ld	r24, X
     538:	89 2b       	or	r24, r25
     53a:	8c 93       	st	X, r24
     53c:	08 95       	ret

0000053e <_ZN14SoftwareSerial5writeEh>:

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
     53e:	df 92       	push	r13
     540:	ef 92       	push	r14
     542:	ff 92       	push	r15
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	ec 01       	movw	r28, r24
     54e:	e6 2e       	mov	r14, r22
  if (_tx_delay == 0) {
     550:	89 8d       	ldd	r24, Y+25	; 0x19
     552:	9a 8d       	ldd	r25, Y+26	; 0x1a
     554:	00 97       	sbiw	r24, 0x00	; 0
     556:	39 f4       	brne	.+14     	; 0x566 <_ZN14SoftwareSerial5writeEh+0x28>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	9b 83       	std	Y+3, r25	; 0x03
     55e:	8a 83       	std	Y+2, r24	; 0x02
    setWriteError();
    return 0;
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	4b c0       	rjmp	.+150    	; 0x5fc <_ZN14SoftwareSerial5writeEh+0xbe>
  }

  uint8_t oldSREG = SREG;
     566:	df b6       	in	r13, 0x3f	; 63
  cli();  // turn off interrupts for a clean txmit
     568:	f8 94       	cli

  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
     56a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	81 ff       	sbrs	r24, 1
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	ce 01       	movw	r24, r28
     574:	0e 94 90 02 	call	0x520	; 0x520 <_ZN14SoftwareSerial12tx_pin_writeEh>
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);
     578:	89 8d       	ldd	r24, Y+25	; 0x19
     57a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     57c:	05 96       	adiw	r24, 0x05	; 5
     57e:	0e 94 10 02 	call	0x420	; 0x420 <_ZN14SoftwareSerial10tunedDelayEj>

  // Write each of the 8 bits
  if (_inverse_logic)
     582:	8b 8d       	ldd	r24, Y+27	; 0x1b
     584:	81 ff       	sbrs	r24, 1
     586:	19 c0       	rjmp	.+50     	; 0x5ba <_ZN14SoftwareSerial5writeEh+0x7c>
     588:	08 e0       	ldi	r16, 0x08	; 8
     58a:	10 e0       	ldi	r17, 0x00	; 0
     58c:	ff 24       	eor	r15, r15
     58e:	f3 94       	inc	r15
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     590:	8f 2d       	mov	r24, r15
     592:	8e 21       	and	r24, r14
     594:	19 f0       	breq	.+6      	; 0x59c <_ZN14SoftwareSerial5writeEh+0x5e>
        tx_pin_write(LOW); // send 1
     596:	ce 01       	movw	r24, r28
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <_ZN14SoftwareSerial5writeEh+0x62>
      else
        tx_pin_write(HIGH); // send 0
     59c:	ce 01       	movw	r24, r28
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	0e 94 90 02 	call	0x520	; 0x520 <_ZN14SoftwareSerial12tx_pin_writeEh>
    
      tunedDelay(_tx_delay);
     5a4:	89 8d       	ldd	r24, Y+25	; 0x19
     5a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5a8:	0e 94 10 02 	call	0x420	; 0x420 <_ZN14SoftwareSerial10tunedDelayEj>
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     5ac:	ff 0c       	add	r15, r15
     5ae:	01 50       	subi	r16, 0x01	; 1
     5b0:	10 40       	sbci	r17, 0x00	; 0
     5b2:	71 f7       	brne	.-36     	; 0x590 <_ZN14SoftwareSerial5writeEh+0x52>
        tx_pin_write(HIGH); // send 0
    
      tunedDelay(_tx_delay);
    }

    tx_pin_write(LOW); // restore pin to natural state
     5b4:	ce 01       	movw	r24, r28
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	18 c0       	rjmp	.+48     	; 0x5ea <_ZN14SoftwareSerial5writeEh+0xac>
  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
     5ba:	08 e0       	ldi	r16, 0x08	; 8
     5bc:	10 e0       	ldi	r17, 0x00	; 0
     5be:	ff 24       	eor	r15, r15
     5c0:	f3 94       	inc	r15
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     5c2:	8f 2d       	mov	r24, r15
     5c4:	8e 21       	and	r24, r14
     5c6:	19 f0       	breq	.+6      	; 0x5ce <_ZN14SoftwareSerial5writeEh+0x90>
        tx_pin_write(HIGH); // send 1
     5c8:	ce 01       	movw	r24, r28
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <_ZN14SoftwareSerial5writeEh+0x94>
      else
        tx_pin_write(LOW); // send 0
     5ce:	ce 01       	movw	r24, r28
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	0e 94 90 02 	call	0x520	; 0x520 <_ZN14SoftwareSerial12tx_pin_writeEh>
    
      tunedDelay(_tx_delay);
     5d6:	89 8d       	ldd	r24, Y+25	; 0x19
     5d8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5da:	0e 94 10 02 	call	0x420	; 0x420 <_ZN14SoftwareSerial10tunedDelayEj>

    tx_pin_write(LOW); // restore pin to natural state
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     5de:	ff 0c       	add	r15, r15
     5e0:	01 50       	subi	r16, 0x01	; 1
     5e2:	10 40       	sbci	r17, 0x00	; 0
     5e4:	71 f7       	brne	.-36     	; 0x5c2 <_ZN14SoftwareSerial5writeEh+0x84>
        tx_pin_write(LOW); // send 0
    
      tunedDelay(_tx_delay);
    }

    tx_pin_write(HIGH); // restore pin to natural state
     5e6:	ce 01       	movw	r24, r28
     5e8:	61 e0       	ldi	r22, 0x01	; 1
     5ea:	0e 94 90 02 	call	0x520	; 0x520 <_ZN14SoftwareSerial12tx_pin_writeEh>
  }

  SREG = oldSREG; // turn interrupts back on
     5ee:	df be       	out	0x3f, r13	; 63
  tunedDelay(_tx_delay);
     5f0:	89 8d       	ldd	r24, Y+25	; 0x19
     5f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5f4:	0e 94 10 02 	call	0x420	; 0x420 <_ZN14SoftwareSerial10tunedDelayEj>
  
  return 1;
     5f8:	21 e0       	ldi	r18, 0x01	; 1
     5fa:	30 e0       	ldi	r19, 0x00	; 0
}
     5fc:	c9 01       	movw	r24, r18
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	df 90       	pop	r13
     60c:	08 95       	ret

0000060e <_ZN14SoftwareSerial16handle_interruptEv>:
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     60e:	80 91 70 07 	lds	r24, 0x0770
     612:	90 91 71 07 	lds	r25, 0x0771
     616:	00 97       	sbiw	r24, 0x00	; 0
     618:	11 f0       	breq	.+4      	; 0x61e <_ZN14SoftwareSerial16handle_interruptEv+0x10>
  {
    active_object->recv();
     61a:	0e 94 33 02 	call	0x466	; 0x466 <_ZN14SoftwareSerial4recvEv>
     61e:	08 95       	ret

00000620 <__vector_9>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     620:	1f 92       	push	r1
     622:	0f 92       	push	r0
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	0f 92       	push	r0
     628:	0b b6       	in	r0, 0x3b	; 59
     62a:	0f 92       	push	r0
     62c:	11 24       	eor	r1, r1
     62e:	2f 93       	push	r18
     630:	3f 93       	push	r19
     632:	4f 93       	push	r20
     634:	5f 93       	push	r21
     636:	6f 93       	push	r22
     638:	7f 93       	push	r23
     63a:	8f 93       	push	r24
     63c:	9f 93       	push	r25
     63e:	af 93       	push	r26
     640:	bf 93       	push	r27
     642:	ef 93       	push	r30
     644:	ff 93       	push	r31
  SoftwareSerial::handle_interrupt();
     646:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN14SoftwareSerial16handle_interruptEv>
}
     64a:	ff 91       	pop	r31
     64c:	ef 91       	pop	r30
     64e:	bf 91       	pop	r27
     650:	af 91       	pop	r26
     652:	9f 91       	pop	r25
     654:	8f 91       	pop	r24
     656:	7f 91       	pop	r23
     658:	6f 91       	pop	r22
     65a:	5f 91       	pop	r21
     65c:	4f 91       	pop	r20
     65e:	3f 91       	pop	r19
     660:	2f 91       	pop	r18
     662:	0f 90       	pop	r0
     664:	0b be       	out	0x3b, r0	; 59
     666:	0f 90       	pop	r0
     668:	0f be       	out	0x3f, r0	; 63
     66a:	0f 90       	pop	r0
     66c:	1f 90       	pop	r1
     66e:	18 95       	reti

00000670 <__vector_10>:
#endif

#if defined(PCINT1_vect)
ISR(PCINT1_vect)
{
     670:	1f 92       	push	r1
     672:	0f 92       	push	r0
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	0f 92       	push	r0
     678:	0b b6       	in	r0, 0x3b	; 59
     67a:	0f 92       	push	r0
     67c:	11 24       	eor	r1, r1
     67e:	2f 93       	push	r18
     680:	3f 93       	push	r19
     682:	4f 93       	push	r20
     684:	5f 93       	push	r21
     686:	6f 93       	push	r22
     688:	7f 93       	push	r23
     68a:	8f 93       	push	r24
     68c:	9f 93       	push	r25
     68e:	af 93       	push	r26
     690:	bf 93       	push	r27
     692:	ef 93       	push	r30
     694:	ff 93       	push	r31
  SoftwareSerial::handle_interrupt();
     696:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN14SoftwareSerial16handle_interruptEv>
}
     69a:	ff 91       	pop	r31
     69c:	ef 91       	pop	r30
     69e:	bf 91       	pop	r27
     6a0:	af 91       	pop	r26
     6a2:	9f 91       	pop	r25
     6a4:	8f 91       	pop	r24
     6a6:	7f 91       	pop	r23
     6a8:	6f 91       	pop	r22
     6aa:	5f 91       	pop	r21
     6ac:	4f 91       	pop	r20
     6ae:	3f 91       	pop	r19
     6b0:	2f 91       	pop	r18
     6b2:	0f 90       	pop	r0
     6b4:	0b be       	out	0x3b, r0	; 59
     6b6:	0f 90       	pop	r0
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	0f 90       	pop	r0
     6bc:	1f 90       	pop	r1
     6be:	18 95       	reti

000006c0 <_ZN14SoftwareSerial5setTXEh>:
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
{
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	ec 01       	movw	r28, r24
     6c8:	16 2f       	mov	r17, r22
  pinMode(tx, OUTPUT);
     6ca:	86 2f       	mov	r24, r22
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	0e 94 76 43 	call	0x86ec	; 0x86ec <pinMode>
  digitalWrite(tx, HIGH);
     6d2:	81 2f       	mov	r24, r17
     6d4:	61 e0       	ldi	r22, 0x01	; 1
     6d6:	0e 94 9a 43 	call	0x8734	; 0x8734 <digitalWrite>
  _transmitBitMask = digitalPinToBitMask(tx);
     6da:	81 2f       	mov	r24, r17
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	fc 01       	movw	r30, r24
     6e0:	ed 5a       	subi	r30, 0xAD	; 173
     6e2:	fd 4f       	sbci	r31, 0xFD	; 253
     6e4:	e4 91       	lpm	r30, Z+
     6e6:	e8 8b       	std	Y+16, r30	; 0x10
  uint8_t port = digitalPinToPort(tx);
     6e8:	fc 01       	movw	r30, r24
     6ea:	e3 5f       	subi	r30, 0xF3	; 243
     6ec:	fd 4f       	sbci	r31, 0xFD	; 253
     6ee:	e4 91       	lpm	r30, Z+
  _transmitPortRegister = portOutputRegister(port);
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	ee 0f       	add	r30, r30
     6f4:	ff 1f       	adc	r31, r31
     6f6:	e7 52       	subi	r30, 0x27	; 39
     6f8:	fe 4f       	sbci	r31, 0xFE	; 254
     6fa:	85 91       	lpm	r24, Z+
     6fc:	94 91       	lpm	r25, Z+
     6fe:	89 8b       	std	Y+17, r24	; 0x11
     700:	9a 8b       	std	Y+18, r25	; 0x12
}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	08 95       	ret

0000070a <_ZN14SoftwareSerial5setRXEh>:

void SoftwareSerial::setRX(uint8_t rx)
{
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	ec 01       	movw	r28, r24
     712:	16 2f       	mov	r17, r22
  pinMode(rx, INPUT);
     714:	86 2f       	mov	r24, r22
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	0e 94 76 43 	call	0x86ec	; 0x86ec <pinMode>
  if (!_inverse_logic)
     71c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     71e:	81 fd       	sbrc	r24, 1
     720:	04 c0       	rjmp	.+8      	; 0x72a <_ZN14SoftwareSerial5setRXEh+0x20>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
     722:	81 2f       	mov	r24, r17
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	0e 94 9a 43 	call	0x8734	; 0x8734 <digitalWrite>
  _receivePin = rx;
     72a:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
     72c:	81 2f       	mov	r24, r17
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	fc 01       	movw	r30, r24
     732:	ed 5a       	subi	r30, 0xAD	; 173
     734:	fd 4f       	sbci	r31, 0xFD	; 253
     736:	e4 91       	lpm	r30, Z+
     738:	ed 87       	std	Y+13, r30	; 0x0d
  uint8_t port = digitalPinToPort(rx);
     73a:	fc 01       	movw	r30, r24
     73c:	e3 5f       	subi	r30, 0xF3	; 243
     73e:	fd 4f       	sbci	r31, 0xFD	; 253
     740:	e4 91       	lpm	r30, Z+
  _receivePortRegister = portInputRegister(port);
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	ee 0f       	add	r30, r30
     746:	ff 1f       	adc	r31, r31
     748:	ed 50       	subi	r30, 0x0D	; 13
     74a:	fe 4f       	sbci	r31, 0xFE	; 254
     74c:	85 91       	lpm	r24, Z+
     74e:	94 91       	lpm	r25, Z+
     750:	8e 87       	std	Y+14, r24	; 0x0e
     752:	9f 87       	std	Y+15, r25	; 0x0f
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	08 95       	ret

0000075c <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
     75c:	1f 93       	push	r17
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	ec 01       	movw	r28, r24
     764:	16 2f       	mov	r17, r22
  public:
    Print() : write_error(0) {}
     766:	1b 82       	std	Y+3, r1	; 0x03
     768:	1a 82       	std	Y+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     76a:	88 ee       	ldi	r24, 0xE8	; 232
     76c:	93 e0       	ldi	r25, 0x03	; 3
     76e:	a0 e0       	ldi	r26, 0x00	; 0
     770:	b0 e0       	ldi	r27, 0x00	; 0
     772:	8c 83       	std	Y+4, r24	; 0x04
     774:	9d 83       	std	Y+5, r25	; 0x05
     776:	ae 83       	std	Y+6, r26	; 0x06
     778:	bf 83       	std	Y+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
     77a:	82 ef       	ldi	r24, 0xF2	; 242
     77c:	96 e0       	ldi	r25, 0x06	; 6
     77e:	99 83       	std	Y+1, r25	; 0x01
     780:	88 83       	st	Y, r24
     782:	1c 8a       	std	Y+20, r1	; 0x14
     784:	1b 8a       	std	Y+19, r1	; 0x13
     786:	1e 8a       	std	Y+22, r1	; 0x16
     788:	1d 8a       	std	Y+21, r1	; 0x15
     78a:	18 8e       	std	Y+24, r1	; 0x18
     78c:	1f 8a       	std	Y+23, r1	; 0x17
     78e:	1a 8e       	std	Y+26, r1	; 0x1a
     790:	19 8e       	std	Y+25, r1	; 0x19
     792:	8b 8d       	ldd	r24, Y+27	; 0x1b
     794:	21 70       	andi	r18, 0x01	; 1
     796:	22 0f       	add	r18, r18
     798:	8c 7f       	andi	r24, 0xFC	; 252
     79a:	82 2b       	or	r24, r18
     79c:	8b 8f       	std	Y+27, r24	; 0x1b
{
  setTX(transmitPin);
     79e:	ce 01       	movw	r24, r28
     7a0:	64 2f       	mov	r22, r20
     7a2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_ZN14SoftwareSerial5setTXEh>
  setRX(receivePin);
     7a6:	ce 01       	movw	r24, r28
     7a8:	61 2f       	mov	r22, r17
     7aa:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN14SoftwareSerial5setRXEh>
}
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	1f 91       	pop	r17
     7b4:	08 95       	ret

000007b6 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	ec 01       	movw	r28, r24
     7c4:	7a 01       	movw	r14, r20
     7c6:	8b 01       	movw	r16, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     7c8:	1a 8e       	std	Y+26, r1	; 0x1a
     7ca:	19 8e       	std	Y+25, r1	; 0x19
     7cc:	18 8e       	std	Y+24, r1	; 0x18
     7ce:	1f 8a       	std	Y+23, r1	; 0x17
     7d0:	1e 8a       	std	Y+22, r1	; 0x16
     7d2:	1d 8a       	std	Y+21, r1	; 0x15
     7d4:	1c 8a       	std	Y+20, r1	; 0x14
     7d6:	1b 8a       	std	Y+19, r1	; 0x13

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	50 e0       	ldi	r21, 0x00	; 0
  {
    long baud = pgm_read_dword(&table[i].baud);
     7dc:	9a 01       	movw	r18, r20
     7de:	22 0f       	add	r18, r18
     7e0:	33 1f       	adc	r19, r19
     7e2:	24 0f       	add	r18, r20
     7e4:	35 1f       	adc	r19, r21
     7e6:	22 0f       	add	r18, r18
     7e8:	33 1f       	adc	r19, r19
     7ea:	22 0f       	add	r18, r18
     7ec:	33 1f       	adc	r19, r19
     7ee:	f9 01       	movw	r30, r18
     7f0:	e1 5d       	subi	r30, 0xD1	; 209
     7f2:	fe 4f       	sbci	r31, 0xFE	; 254
     7f4:	85 91       	lpm	r24, Z+
     7f6:	95 91       	lpm	r25, Z+
     7f8:	a5 91       	lpm	r26, Z+
     7fa:	b4 91       	lpm	r27, Z+
    if (baud == speed)
     7fc:	8e 15       	cp	r24, r14
     7fe:	9f 05       	cpc	r25, r15
     800:	a0 07       	cpc	r26, r16
     802:	b1 07       	cpc	r27, r17
     804:	e9 f4       	brne	.+58     	; 0x840 <_ZN14SoftwareSerial5beginEl+0x8a>
    {
      _rx_delay_centering = pgm_read_word(&table[i].rx_delay_centering);
     806:	f9 01       	movw	r30, r18
     808:	ed 5c       	subi	r30, 0xCD	; 205
     80a:	fe 4f       	sbci	r31, 0xFE	; 254
     80c:	85 91       	lpm	r24, Z+
     80e:	94 91       	lpm	r25, Z+
     810:	8b 8b       	std	Y+19, r24	; 0x13
     812:	9c 8b       	std	Y+20, r25	; 0x14
      _rx_delay_intrabit = pgm_read_word(&table[i].rx_delay_intrabit);
     814:	f9 01       	movw	r30, r18
     816:	eb 5c       	subi	r30, 0xCB	; 203
     818:	fe 4f       	sbci	r31, 0xFE	; 254
     81a:	85 91       	lpm	r24, Z+
     81c:	94 91       	lpm	r25, Z+
     81e:	8d 8b       	std	Y+21, r24	; 0x15
     820:	9e 8b       	std	Y+22, r25	; 0x16
      _rx_delay_stopbit = pgm_read_word(&table[i].rx_delay_stopbit);
     822:	f9 01       	movw	r30, r18
     824:	e9 5c       	subi	r30, 0xC9	; 201
     826:	fe 4f       	sbci	r31, 0xFE	; 254
     828:	85 91       	lpm	r24, Z+
     82a:	94 91       	lpm	r25, Z+
     82c:	8f 8b       	std	Y+23, r24	; 0x17
     82e:	98 8f       	std	Y+24, r25	; 0x18
      _tx_delay = pgm_read_word(&table[i].tx_delay);
     830:	27 5c       	subi	r18, 0xC7	; 199
     832:	3e 4f       	sbci	r19, 0xFE	; 254
     834:	f9 01       	movw	r30, r18
     836:	85 91       	lpm	r24, Z+
     838:	94 91       	lpm	r25, Z+
     83a:	89 8f       	std	Y+25, r24	; 0x19
     83c:	9a 8f       	std	Y+26, r25	; 0x1a
      break;
     83e:	06 c0       	rjmp	.+12     	; 0x84c <_ZN14SoftwareSerial5beginEl+0x96>

void SoftwareSerial::begin(long speed)
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
     840:	4f 5f       	subi	r20, 0xFF	; 255
     842:	5f 4f       	sbci	r21, 0xFF	; 255
     844:	4c 30       	cpi	r20, 0x0C	; 12
     846:	51 05       	cpc	r21, r1
     848:	09 f0       	breq	.+2      	; 0x84c <_ZN14SoftwareSerial5beginEl+0x96>
     84a:	c8 cf       	rjmp	.-112    	; 0x7dc <_ZN14SoftwareSerial5beginEl+0x26>
      break;
    }
  }

  // Set up RX interrupts, but only if we have a valid RX baud rate
  if (_rx_delay_stopbit)
     84c:	8f 89       	ldd	r24, Y+23	; 0x17
     84e:	98 8d       	ldd	r25, Y+24	; 0x18
     850:	00 97       	sbiw	r24, 0x00	; 0
     852:	09 f4       	brne	.+2      	; 0x856 <_ZN14SoftwareSerial5beginEl+0xa0>
     854:	66 c0       	rjmp	.+204    	; 0x922 <_ZN14SoftwareSerial5beginEl+0x16c>
  {
    if (digitalPinToPCICR(_receivePin))
     856:	8c 85       	ldd	r24, Y+12	; 0x0c
     858:	98 2f       	mov	r25, r24
     85a:	9a 50       	subi	r25, 0x0A	; 10
     85c:	94 30       	cpi	r25, 0x04	; 4
     85e:	40 f0       	brcs	.+16     	; 0x870 <_ZN14SoftwareSerial5beginEl+0xba>
     860:	28 2f       	mov	r18, r24
     862:	22 53       	subi	r18, 0x32	; 50
     864:	24 30       	cpi	r18, 0x04	; 4
     866:	20 f0       	brcs	.+8      	; 0x870 <_ZN14SoftwareSerial5beginEl+0xba>
     868:	2c 50       	subi	r18, 0x0C	; 12
     86a:	28 30       	cpi	r18, 0x08	; 8
     86c:	08 f0       	brcs	.+2      	; 0x870 <_ZN14SoftwareSerial5beginEl+0xba>
     86e:	55 c0       	rjmp	.+170    	; 0x91a <_ZN14SoftwareSerial5beginEl+0x164>
    {
      *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     870:	20 91 68 00 	lds	r18, 0x0068
     874:	94 30       	cpi	r25, 0x04	; 4
     876:	48 f0       	brcs	.+18     	; 0x88a <_ZN14SoftwareSerial5beginEl+0xd4>
     878:	98 2f       	mov	r25, r24
     87a:	92 53       	subi	r25, 0x32	; 50
     87c:	94 30       	cpi	r25, 0x04	; 4
     87e:	28 f0       	brcs	.+10     	; 0x88a <_ZN14SoftwareSerial5beginEl+0xd4>
     880:	8e 53       	subi	r24, 0x3E	; 62
     882:	88 30       	cpi	r24, 0x08	; 8
     884:	10 f4       	brcc	.+4      	; 0x88a <_ZN14SoftwareSerial5beginEl+0xd4>
     886:	84 e0       	ldi	r24, 0x04	; 4
     888:	01 c0       	rjmp	.+2      	; 0x88c <_ZN14SoftwareSerial5beginEl+0xd6>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	82 2b       	or	r24, r18
     88e:	80 93 68 00 	sts	0x0068, r24
      *digitalPinToPCMSK(_receivePin) |= _BV(digitalPinToPCMSKbit(_receivePin));
     892:	2c 85       	ldd	r18, Y+12	; 0x0c
     894:	92 2f       	mov	r25, r18
     896:	9a 50       	subi	r25, 0x0A	; 10
     898:	94 30       	cpi	r25, 0x04	; 4
     89a:	88 f0       	brcs	.+34     	; 0x8be <_ZN14SoftwareSerial5beginEl+0x108>
     89c:	82 2f       	mov	r24, r18
     89e:	82 53       	subi	r24, 0x32	; 50
     8a0:	84 30       	cpi	r24, 0x04	; 4
     8a2:	68 f0       	brcs	.+26     	; 0x8be <_ZN14SoftwareSerial5beginEl+0x108>
     8a4:	8c 50       	subi	r24, 0x0C	; 12
     8a6:	88 30       	cpi	r24, 0x08	; 8
     8a8:	18 f4       	brcc	.+6      	; 0x8b0 <_ZN14SoftwareSerial5beginEl+0xfa>
     8aa:	ed e6       	ldi	r30, 0x6D	; 109
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <_ZN14SoftwareSerial5beginEl+0xfe>
     8b0:	e0 e0       	ldi	r30, 0x00	; 0
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	88 30       	cpi	r24, 0x08	; 8
     8b6:	40 f4       	brcc	.+16     	; 0x8c8 <_ZN14SoftwareSerial5beginEl+0x112>
     8b8:	ad e6       	ldi	r26, 0x6D	; 109
     8ba:	b0 e0       	ldi	r27, 0x00	; 0
     8bc:	07 c0       	rjmp	.+14     	; 0x8cc <_ZN14SoftwareSerial5beginEl+0x116>
     8be:	eb e6       	ldi	r30, 0x6B	; 107
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	ab e6       	ldi	r26, 0x6B	; 107
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <_ZN14SoftwareSerial5beginEl+0x116>
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	4c 91       	ld	r20, X
     8ce:	94 30       	cpi	r25, 0x04	; 4
     8d0:	20 f4       	brcc	.+8      	; 0x8da <_ZN14SoftwareSerial5beginEl+0x124>
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	26 50       	subi	r18, 0x06	; 6
     8d6:	30 40       	sbci	r19, 0x00	; 0
     8d8:	0f c0       	rjmp	.+30     	; 0x8f8 <_ZN14SoftwareSerial5beginEl+0x142>
     8da:	22 33       	cpi	r18, 0x32	; 50
     8dc:	a9 f0       	breq	.+42     	; 0x908 <_ZN14SoftwareSerial5beginEl+0x152>
     8de:	23 33       	cpi	r18, 0x33	; 51
     8e0:	a9 f0       	breq	.+42     	; 0x90c <_ZN14SoftwareSerial5beginEl+0x156>
     8e2:	24 33       	cpi	r18, 0x34	; 52
     8e4:	a9 f0       	breq	.+42     	; 0x910 <_ZN14SoftwareSerial5beginEl+0x15a>
     8e6:	25 33       	cpi	r18, 0x35	; 53
     8e8:	a9 f0       	breq	.+42     	; 0x914 <_ZN14SoftwareSerial5beginEl+0x15e>
     8ea:	82 2f       	mov	r24, r18
     8ec:	8e 53       	subi	r24, 0x3E	; 62
     8ee:	88 30       	cpi	r24, 0x08	; 8
     8f0:	88 f4       	brcc	.+34     	; 0x914 <_ZN14SoftwareSerial5beginEl+0x15e>
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	2e 53       	subi	r18, 0x3E	; 62
     8f6:	30 40       	sbci	r19, 0x00	; 0
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <_ZN14SoftwareSerial5beginEl+0x14c>
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
     902:	2a 95       	dec	r18
     904:	e2 f7       	brpl	.-8      	; 0x8fe <_ZN14SoftwareSerial5beginEl+0x148>
     906:	07 c0       	rjmp	.+14     	; 0x916 <_ZN14SoftwareSerial5beginEl+0x160>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	05 c0       	rjmp	.+10     	; 0x916 <_ZN14SoftwareSerial5beginEl+0x160>
     90c:	84 e0       	ldi	r24, 0x04	; 4
     90e:	03 c0       	rjmp	.+6      	; 0x916 <_ZN14SoftwareSerial5beginEl+0x160>
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	01 c0       	rjmp	.+2      	; 0x916 <_ZN14SoftwareSerial5beginEl+0x160>
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	84 2b       	or	r24, r20
     918:	80 83       	st	Z, r24
    }
    tunedDelay(_tx_delay); // if we were low this establishes the end
     91a:	89 8d       	ldd	r24, Y+25	; 0x19
     91c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     91e:	0e 94 10 02 	call	0x420	; 0x420 <_ZN14SoftwareSerial10tunedDelayEj>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     922:	ce 01       	movw	r24, r28
     924:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN14SoftwareSerial6listenEv>
}
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	08 95       	ret

00000936 <_ZN14SoftwareSerial3endEv>:

void SoftwareSerial::end()
{
  if (digitalPinToPCMSK(_receivePin))
     936:	fc 01       	movw	r30, r24
     938:	24 85       	ldd	r18, Z+12	; 0x0c
     93a:	92 2f       	mov	r25, r18
     93c:	9a 50       	subi	r25, 0x0A	; 10
     93e:	94 30       	cpi	r25, 0x04	; 4
     940:	60 f0       	brcs	.+24     	; 0x95a <_ZN14SoftwareSerial3endEv+0x24>
     942:	82 2f       	mov	r24, r18
     944:	82 53       	subi	r24, 0x32	; 50
     946:	84 30       	cpi	r24, 0x04	; 4
     948:	40 f0       	brcs	.+16     	; 0x95a <_ZN14SoftwareSerial3endEv+0x24>
     94a:	8c 50       	subi	r24, 0x0C	; 12
     94c:	88 30       	cpi	r24, 0x08	; 8
     94e:	88 f5       	brcc	.+98     	; 0x9b2 <_ZN14SoftwareSerial3endEv+0x7c>
     950:	ed e6       	ldi	r30, 0x6D	; 109
     952:	f0 e0       	ldi	r31, 0x00	; 0
    *digitalPinToPCMSK(_receivePin) &= ~_BV(digitalPinToPCMSKbit(_receivePin));
     954:	ad e6       	ldi	r26, 0x6D	; 109
     956:	b0 e0       	ldi	r27, 0x00	; 0
     958:	04 c0       	rjmp	.+8      	; 0x962 <_ZN14SoftwareSerial3endEv+0x2c>
     95a:	eb e6       	ldi	r30, 0x6B	; 107
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	ab e6       	ldi	r26, 0x6B	; 107
     960:	b0 e0       	ldi	r27, 0x00	; 0
     962:	4c 91       	ld	r20, X
     964:	94 30       	cpi	r25, 0x04	; 4
     966:	20 f4       	brcc	.+8      	; 0x970 <_ZN14SoftwareSerial3endEv+0x3a>
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	26 50       	subi	r18, 0x06	; 6
     96c:	30 40       	sbci	r19, 0x00	; 0
     96e:	0f c0       	rjmp	.+30     	; 0x98e <_ZN14SoftwareSerial3endEv+0x58>
     970:	22 33       	cpi	r18, 0x32	; 50
     972:	b1 f0       	breq	.+44     	; 0x9a0 <_ZN14SoftwareSerial3endEv+0x6a>
     974:	23 33       	cpi	r18, 0x33	; 51
     976:	b1 f0       	breq	.+44     	; 0x9a4 <_ZN14SoftwareSerial3endEv+0x6e>
     978:	24 33       	cpi	r18, 0x34	; 52
     97a:	b1 f0       	breq	.+44     	; 0x9a8 <_ZN14SoftwareSerial3endEv+0x72>
     97c:	25 33       	cpi	r18, 0x35	; 53
     97e:	b1 f0       	breq	.+44     	; 0x9ac <_ZN14SoftwareSerial3endEv+0x76>
     980:	82 2f       	mov	r24, r18
     982:	8e 53       	subi	r24, 0x3E	; 62
     984:	88 30       	cpi	r24, 0x08	; 8
     986:	90 f4       	brcc	.+36     	; 0x9ac <_ZN14SoftwareSerial3endEv+0x76>
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	2e 53       	subi	r18, 0x3E	; 62
     98c:	30 40       	sbci	r19, 0x00	; 0
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	02 c0       	rjmp	.+4      	; 0x998 <_ZN14SoftwareSerial3endEv+0x62>
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	2a 95       	dec	r18
     99a:	e2 f7       	brpl	.-8      	; 0x994 <_ZN14SoftwareSerial3endEv+0x5e>
     99c:	80 95       	com	r24
     99e:	07 c0       	rjmp	.+14     	; 0x9ae <_ZN14SoftwareSerial3endEv+0x78>
     9a0:	87 ef       	ldi	r24, 0xF7	; 247
     9a2:	05 c0       	rjmp	.+10     	; 0x9ae <_ZN14SoftwareSerial3endEv+0x78>
     9a4:	8b ef       	ldi	r24, 0xFB	; 251
     9a6:	03 c0       	rjmp	.+6      	; 0x9ae <_ZN14SoftwareSerial3endEv+0x78>
     9a8:	8d ef       	ldi	r24, 0xFD	; 253
     9aa:	01 c0       	rjmp	.+2      	; 0x9ae <_ZN14SoftwareSerial3endEv+0x78>
     9ac:	8e ef       	ldi	r24, 0xFE	; 254
     9ae:	84 23       	and	r24, r20
     9b0:	80 83       	st	Z, r24
     9b2:	08 95       	ret

000009b4 <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
     9b4:	22 ef       	ldi	r18, 0xF2	; 242
     9b6:	36 e0       	ldi	r19, 0x06	; 6
     9b8:	fc 01       	movw	r30, r24
     9ba:	31 83       	std	Z+1, r19	; 0x01
     9bc:	20 83       	st	Z, r18
{
  end();
     9be:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN14SoftwareSerial3endEv>
}
     9c2:	08 95       	ret

000009c4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
#define SERVO_MAX() (MAX_PULSE_WIDTH - this->max * 4)  // maximum value in uS for this servo 

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	eb 01       	movw	r28, r22
     9d2:	7a 01       	movw	r14, r20
  if( Channel[timer] < 0 )
     9d4:	8c 01       	movw	r16, r24
     9d6:	dc 01       	movw	r26, r24
     9d8:	ab 5b       	subi	r26, 0xBB	; 187
     9da:	b7 4f       	sbci	r27, 0xF7	; 247
     9dc:	8c 91       	ld	r24, X
     9de:	87 ff       	sbrs	r24, 7
     9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x24>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer 
     9e2:	19 82       	std	Y+1, r1	; 0x01
     9e4:	18 82       	st	Y, r1
     9e6:	37 c0       	rjmp	.+110    	; 0xa56 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x92>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )  
     9e8:	c8 01       	movw	r24, r16
     9ea:	88 0f       	add	r24, r24
     9ec:	99 1f       	adc	r25, r25
     9ee:	80 0f       	add	r24, r16
     9f0:	91 1f       	adc	r25, r17
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	2c 91       	ld	r18, X
     9fc:	33 27       	eor	r19, r19
     9fe:	27 fd       	sbrc	r18, 7
     a00:	30 95       	com	r19
     a02:	28 0f       	add	r18, r24
     a04:	39 1f       	adc	r19, r25
     a06:	40 91 b4 07 	lds	r20, 0x07B4
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	24 17       	cp	r18, r20
     a0e:	35 07       	cpc	r19, r21
     a10:	14 f5       	brge	.+68     	; 0xa56 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x92>
     a12:	2c 91       	ld	r18, X
     a14:	33 27       	eor	r19, r19
     a16:	27 fd       	sbrc	r18, 7
     a18:	30 95       	com	r19
     a1a:	28 0f       	add	r18, r24
     a1c:	39 1f       	adc	r19, r25
     a1e:	f9 01       	movw	r30, r18
     a20:	ee 0f       	add	r30, r30
     a22:	ff 1f       	adc	r31, r31
     a24:	e2 0f       	add	r30, r18
     a26:	f3 1f       	adc	r31, r19
     a28:	eb 54       	subi	r30, 0x4B	; 75
     a2a:	f8 4f       	sbci	r31, 0xF8	; 248
     a2c:	20 81       	ld	r18, Z
     a2e:	26 ff       	sbrs	r18, 6
     a30:	12 c0       	rjmp	.+36     	; 0xa56 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x92>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
     a32:	2c 91       	ld	r18, X
     a34:	33 27       	eor	r19, r19
     a36:	27 fd       	sbrc	r18, 7
     a38:	30 95       	com	r19
     a3a:	28 0f       	add	r18, r24
     a3c:	39 1f       	adc	r19, r25
     a3e:	f9 01       	movw	r30, r18
     a40:	ee 0f       	add	r30, r30
     a42:	ff 1f       	adc	r31, r31
     a44:	e2 0f       	add	r30, r18
     a46:	f3 1f       	adc	r31, r19
     a48:	eb 54       	subi	r30, 0x4B	; 75
     a4a:	f8 4f       	sbci	r31, 0xF8	; 248
     a4c:	80 81       	ld	r24, Z
     a4e:	8f 73       	andi	r24, 0x3F	; 63
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	0e 94 9a 43 	call	0x8734	; 0x8734 <digitalWrite>
  }

  Channel[timer]++;    // increment to the next channel
     a56:	f8 01       	movw	r30, r16
     a58:	eb 5b       	subi	r30, 0xBB	; 187
     a5a:	f7 4f       	sbci	r31, 0xF7	; 247
     a5c:	80 81       	ld	r24, Z
     a5e:	8f 5f       	subi	r24, 0xFF	; 255
     a60:	80 83       	st	Z, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
     a62:	c8 01       	movw	r24, r16
     a64:	88 0f       	add	r24, r24
     a66:	99 1f       	adc	r25, r25
     a68:	80 0f       	add	r24, r16
     a6a:	91 1f       	adc	r25, r17
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	88 0f       	add	r24, r24
     a72:	99 1f       	adc	r25, r25
     a74:	20 81       	ld	r18, Z
     a76:	33 27       	eor	r19, r19
     a78:	27 fd       	sbrc	r18, 7
     a7a:	30 95       	com	r19
     a7c:	28 0f       	add	r18, r24
     a7e:	39 1f       	adc	r19, r25
     a80:	40 91 b4 07 	lds	r20, 0x07B4
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	24 17       	cp	r18, r20
     a88:	35 07       	cpc	r19, r21
     a8a:	0c f0       	brlt	.+2      	; 0xa8e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xca>
     a8c:	53 c0       	rjmp	.+166    	; 0xb34 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x170>
     a8e:	20 81       	ld	r18, Z
     a90:	2c 30       	cpi	r18, 0x0C	; 12
     a92:	0c f0       	brlt	.+2      	; 0xa96 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd2>
     a94:	4f c0       	rjmp	.+158    	; 0xb34 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x170>
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
     a96:	48 81       	ld	r20, Y
     a98:	59 81       	ldd	r21, Y+1	; 0x01
     a9a:	20 81       	ld	r18, Z
     a9c:	33 27       	eor	r19, r19
     a9e:	27 fd       	sbrc	r18, 7
     aa0:	30 95       	com	r19
     aa2:	28 0f       	add	r18, r24
     aa4:	39 1f       	adc	r19, r25
     aa6:	d9 01       	movw	r26, r18
     aa8:	aa 0f       	add	r26, r26
     aaa:	bb 1f       	adc	r27, r27
     aac:	a2 0f       	add	r26, r18
     aae:	b3 1f       	adc	r27, r19
     ab0:	ab 54       	subi	r26, 0x4B	; 75
     ab2:	b8 4f       	sbci	r27, 0xF8	; 248
     ab4:	11 96       	adiw	r26, 0x01	; 1
     ab6:	2d 91       	ld	r18, X+
     ab8:	3c 91       	ld	r19, X
     aba:	12 97       	sbiw	r26, 0x02	; 2
     abc:	42 0f       	add	r20, r18
     abe:	53 1f       	adc	r21, r19
     ac0:	d7 01       	movw	r26, r14
     ac2:	11 96       	adiw	r26, 0x01	; 1
     ac4:	5c 93       	st	X, r21
     ac6:	4e 93       	st	-X, r20
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
     ac8:	20 81       	ld	r18, Z
     aca:	33 27       	eor	r19, r19
     acc:	27 fd       	sbrc	r18, 7
     ace:	30 95       	com	r19
     ad0:	28 0f       	add	r18, r24
     ad2:	39 1f       	adc	r19, r25
     ad4:	d9 01       	movw	r26, r18
     ad6:	aa 0f       	add	r26, r26
     ad8:	bb 1f       	adc	r27, r27
     ada:	a2 0f       	add	r26, r18
     adc:	b3 1f       	adc	r27, r19
     ade:	ab 54       	subi	r26, 0x4B	; 75
     ae0:	b8 4f       	sbci	r27, 0xF8	; 248
     ae2:	2c 91       	ld	r18, X
     ae4:	26 ff       	sbrs	r18, 6
     ae6:	2d c0       	rjmp	.+90     	; 0xb42 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17e>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
     ae8:	20 81       	ld	r18, Z
     aea:	33 27       	eor	r19, r19
     aec:	27 fd       	sbrc	r18, 7
     aee:	30 95       	com	r19
     af0:	28 0f       	add	r18, r24
     af2:	39 1f       	adc	r19, r25
     af4:	f9 01       	movw	r30, r18
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	e2 0f       	add	r30, r18
     afc:	f3 1f       	adc	r31, r19
     afe:	eb 54       	subi	r30, 0x4B	; 75
     b00:	f8 4f       	sbci	r31, 0xF8	; 248
     b02:	80 81       	ld	r24, Z
     b04:	8f 73       	andi	r24, 0x3F	; 63
     b06:	61 e0       	ldi	r22, 0x01	; 1
     b08:	0e 94 9a 43 	call	0x8734	; 0x8734 <digitalWrite>
     b0c:	1a c0       	rjmp	.+52     	; 0xb42 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17e>
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( (unsigned)*TCNTn <  (usToTicks(REFRESH_INTERVAL) + 4) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
     b0e:	80 e4       	ldi	r24, 0x40	; 64
     b10:	9c e9       	ldi	r25, 0x9C	; 156
     b12:	f7 01       	movw	r30, r14
     b14:	91 83       	std	Z+1, r25	; 0x01
     b16:	80 83       	st	Z, r24
     b18:	07 c0       	rjmp	.+14     	; 0xb28 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x164>
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     b1a:	88 81       	ld	r24, Y
     b1c:	99 81       	ldd	r25, Y+1	; 0x01
     b1e:	04 96       	adiw	r24, 0x04	; 4
     b20:	d7 01       	movw	r26, r14
     b22:	11 96       	adiw	r26, 0x01	; 1
     b24:	9c 93       	st	X, r25
     b26:	8e 93       	st	-X, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
     b28:	f8 01       	movw	r30, r16
     b2a:	eb 5b       	subi	r30, 0xBB	; 187
     b2c:	f7 4f       	sbci	r31, 0xF7	; 247
     b2e:	8f ef       	ldi	r24, 0xFF	; 255
     b30:	80 83       	st	Z, r24
     b32:	07 c0       	rjmp	.+14     	; 0xb42 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17e>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( (unsigned)*TCNTn <  (usToTicks(REFRESH_INTERVAL) + 4) )  // allow a few ticks to ensure the next OCR1A not missed
     b34:	88 81       	ld	r24, Y
     b36:	99 81       	ldd	r25, Y+1	; 0x01
     b38:	bc e9       	ldi	r27, 0x9C	; 156
     b3a:	84 34       	cpi	r24, 0x44	; 68
     b3c:	9b 07       	cpc	r25, r27
     b3e:	38 f3       	brcs	.-50     	; 0xb0e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x14a>
     b40:	ec cf       	rjmp	.-40     	; 0xb1a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x156>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	08 95       	ret

00000b50 <__vector_17>:

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
{ 
     b50:	1f 92       	push	r1
     b52:	0f 92       	push	r0
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	0f 92       	push	r0
     b58:	0b b6       	in	r0, 0x3b	; 59
     b5a:	0f 92       	push	r0
     b5c:	11 24       	eor	r1, r1
     b5e:	2f 93       	push	r18
     b60:	3f 93       	push	r19
     b62:	4f 93       	push	r20
     b64:	5f 93       	push	r21
     b66:	6f 93       	push	r22
     b68:	7f 93       	push	r23
     b6a:	8f 93       	push	r24
     b6c:	9f 93       	push	r25
     b6e:	af 93       	push	r26
     b70:	bf 93       	push	r27
     b72:	ef 93       	push	r30
     b74:	ff 93       	push	r31
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	64 e8       	ldi	r22, 0x84	; 132
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	48 e8       	ldi	r20, 0x88	; 136
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     b86:	ff 91       	pop	r31
     b88:	ef 91       	pop	r30
     b8a:	bf 91       	pop	r27
     b8c:	af 91       	pop	r26
     b8e:	9f 91       	pop	r25
     b90:	8f 91       	pop	r24
     b92:	7f 91       	pop	r23
     b94:	6f 91       	pop	r22
     b96:	5f 91       	pop	r21
     b98:	4f 91       	pop	r20
     b9a:	3f 91       	pop	r19
     b9c:	2f 91       	pop	r18
     b9e:	0f 90       	pop	r0
     ba0:	0b be       	out	0x3b, r0	; 59
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_32>:
#endif

#if defined(_useTimer3)
SIGNAL (TIMER3_COMPA_vect) 
{ 
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	0b b6       	in	r0, 0x3b	; 59
     bb6:	0f 92       	push	r0
     bb8:	11 24       	eor	r1, r1
     bba:	2f 93       	push	r18
     bbc:	3f 93       	push	r19
     bbe:	4f 93       	push	r20
     bc0:	5f 93       	push	r21
     bc2:	6f 93       	push	r22
     bc4:	7f 93       	push	r23
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	ef 93       	push	r30
     bd0:	ff 93       	push	r31
  handle_interrupts(_timer3, &TCNT3, &OCR3A); 
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	64 e9       	ldi	r22, 0x94	; 148
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	48 e9       	ldi	r20, 0x98	; 152
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     be2:	ff 91       	pop	r31
     be4:	ef 91       	pop	r30
     be6:	bf 91       	pop	r27
     be8:	af 91       	pop	r26
     bea:	9f 91       	pop	r25
     bec:	8f 91       	pop	r24
     bee:	7f 91       	pop	r23
     bf0:	6f 91       	pop	r22
     bf2:	5f 91       	pop	r21
     bf4:	4f 91       	pop	r20
     bf6:	3f 91       	pop	r19
     bf8:	2f 91       	pop	r18
     bfa:	0f 90       	pop	r0
     bfc:	0b be       	out	0x3b, r0	; 59
     bfe:	0f 90       	pop	r0
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	0f 90       	pop	r0
     c04:	1f 90       	pop	r1
     c06:	18 95       	reti

00000c08 <__vector_42>:
#endif

#if defined(_useTimer4)
SIGNAL (TIMER4_COMPA_vect) 
{
     c08:	1f 92       	push	r1
     c0a:	0f 92       	push	r0
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	0f 92       	push	r0
     c10:	0b b6       	in	r0, 0x3b	; 59
     c12:	0f 92       	push	r0
     c14:	11 24       	eor	r1, r1
     c16:	2f 93       	push	r18
     c18:	3f 93       	push	r19
     c1a:	4f 93       	push	r20
     c1c:	5f 93       	push	r21
     c1e:	6f 93       	push	r22
     c20:	7f 93       	push	r23
     c22:	8f 93       	push	r24
     c24:	9f 93       	push	r25
     c26:	af 93       	push	r26
     c28:	bf 93       	push	r27
     c2a:	ef 93       	push	r30
     c2c:	ff 93       	push	r31
  handle_interrupts(_timer4, &TCNT4, &OCR4A); 
     c2e:	83 e0       	ldi	r24, 0x03	; 3
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	64 ea       	ldi	r22, 0xA4	; 164
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	48 ea       	ldi	r20, 0xA8	; 168
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     c3e:	ff 91       	pop	r31
     c40:	ef 91       	pop	r30
     c42:	bf 91       	pop	r27
     c44:	af 91       	pop	r26
     c46:	9f 91       	pop	r25
     c48:	8f 91       	pop	r24
     c4a:	7f 91       	pop	r23
     c4c:	6f 91       	pop	r22
     c4e:	5f 91       	pop	r21
     c50:	4f 91       	pop	r20
     c52:	3f 91       	pop	r19
     c54:	2f 91       	pop	r18
     c56:	0f 90       	pop	r0
     c58:	0b be       	out	0x3b, r0	; 59
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	0f 90       	pop	r0
     c60:	1f 90       	pop	r1
     c62:	18 95       	reti

00000c64 <__vector_47>:
#endif

#if defined(_useTimer5)
SIGNAL (TIMER5_COMPA_vect) 
{
     c64:	1f 92       	push	r1
     c66:	0f 92       	push	r0
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	0f 92       	push	r0
     c6c:	0b b6       	in	r0, 0x3b	; 59
     c6e:	0f 92       	push	r0
     c70:	11 24       	eor	r1, r1
     c72:	2f 93       	push	r18
     c74:	3f 93       	push	r19
     c76:	4f 93       	push	r20
     c78:	5f 93       	push	r21
     c7a:	6f 93       	push	r22
     c7c:	7f 93       	push	r23
     c7e:	8f 93       	push	r24
     c80:	9f 93       	push	r25
     c82:	af 93       	push	r26
     c84:	bf 93       	push	r27
     c86:	ef 93       	push	r30
     c88:	ff 93       	push	r31
  handle_interrupts(_timer5, &TCNT5, &OCR5A); 
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	64 e2       	ldi	r22, 0x24	; 36
     c90:	71 e0       	ldi	r23, 0x01	; 1
     c92:	48 e2       	ldi	r20, 0x28	; 40
     c94:	51 e0       	ldi	r21, 0x01	; 1
     c96:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     c9a:	ff 91       	pop	r31
     c9c:	ef 91       	pop	r30
     c9e:	bf 91       	pop	r27
     ca0:	af 91       	pop	r26
     ca2:	9f 91       	pop	r25
     ca4:	8f 91       	pop	r24
     ca6:	7f 91       	pop	r23
     ca8:	6f 91       	pop	r22
     caa:	5f 91       	pop	r21
     cac:	4f 91       	pop	r20
     cae:	3f 91       	pop	r19
     cb0:	2f 91       	pop	r18
     cb2:	0f 90       	pop	r0
     cb4:	0b be       	out	0x3b, r0	; 59
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	0f 90       	pop	r0
     cbc:	1f 90       	pop	r1
     cbe:	18 95       	reti

00000cc0 <_ZN10PinCatcher6detachEj>:
      pc_i.attachPin(pin, this);
}

void PinCatcher::detach(unsigned pin)
{
   if( (pin > 9 && pin < 15) || (pin>49 && pin <54) || (pin >61 && pin < 70))
     cc0:	cb 01       	movw	r24, r22
     cc2:	0a 97       	sbiw	r24, 0x0a	; 10
     cc4:	85 30       	cpi	r24, 0x05	; 5
     cc6:	91 05       	cpc	r25, r1
     cc8:	50 f0       	brcs	.+20     	; 0xcde <_ZN10PinCatcher6detachEj+0x1e>
     cca:	cb 01       	movw	r24, r22
     ccc:	c2 97       	sbiw	r24, 0x32	; 50
     cce:	84 30       	cpi	r24, 0x04	; 4
     cd0:	91 05       	cpc	r25, r1
     cd2:	28 f0       	brcs	.+10     	; 0xcde <_ZN10PinCatcher6detachEj+0x1e>
     cd4:	cb 01       	movw	r24, r22
     cd6:	ce 97       	sbiw	r24, 0x3e	; 62
     cd8:	88 30       	cpi	r24, 0x08	; 8
     cda:	91 05       	cpc	r25, r1
     cdc:	20 f4       	brcc	.+8      	; 0xce6 <_ZN10PinCatcher6detachEj+0x26>
      pc_i.detachPin(pin);
     cde:	89 e4       	ldi	r24, 0x49	; 73
     ce0:	98 e0       	ldi	r25, 0x08	; 8
     ce2:	0e 94 0b 08 	call	0x1016	; 0x1016 <_ZN15PinCatcher_impl9detachPinEj>
     ce6:	08 95       	ret

00000ce8 <_ZN10PinCatcher6attachEj>:
}

//--- alphabetic -------------------------------------------------------------------------------------------------------

void PinCatcher::attach(unsigned pin)
{
     ce8:	ac 01       	movw	r20, r24
	//A majority of the pins are NOT PCINTs, SO BE WARNED (i.e. you cannot use them as receive pins)
	// Only pins available for RECEIVE (TRANSMIT can be on any pin):
	// (I've deliberately left out pin mapping to the Hardware USARTs - seems senseless to me)
	// Pins: 10, 11, 12, 13,  50, 51, 52, 53,  62, 63, 64, 65, 66, 67, 68, 69

   if( (pin > 9 && pin < 15) || (pin>49 && pin <54) || (pin >61 && pin < 70) )
     cea:	cb 01       	movw	r24, r22
     cec:	0a 97       	sbiw	r24, 0x0a	; 10
     cee:	85 30       	cpi	r24, 0x05	; 5
     cf0:	91 05       	cpc	r25, r1
     cf2:	50 f0       	brcs	.+20     	; 0xd08 <_ZN10PinCatcher6attachEj+0x20>
     cf4:	cb 01       	movw	r24, r22
     cf6:	c2 97       	sbiw	r24, 0x32	; 50
     cf8:	84 30       	cpi	r24, 0x04	; 4
     cfa:	91 05       	cpc	r25, r1
     cfc:	28 f0       	brcs	.+10     	; 0xd08 <_ZN10PinCatcher6attachEj+0x20>
     cfe:	cb 01       	movw	r24, r22
     d00:	ce 97       	sbiw	r24, 0x3e	; 62
     d02:	88 30       	cpi	r24, 0x08	; 8
     d04:	91 05       	cpc	r25, r1
     d06:	20 f4       	brcc	.+8      	; 0xd10 <_ZN10PinCatcher6attachEj+0x28>
      pc_i.attachPin(pin, this);
     d08:	89 e4       	ldi	r24, 0x49	; 73
     d0a:	98 e0       	ldi	r25, 0x08	; 8
     d0c:	0e 94 f2 06 	call	0xde4	; 0xde4 <_ZN15PinCatcher_impl9attachPinEjP10PinCatcher>
     d10:	08 95       	ret

00000d12 <_ZN10PinCatcherC1Ev>:
#include <avr/interrupt.h>


//--- constructors/destructor ------------------------------------------------------------------------------------------

PinCatcher::PinCatcher()
     d12:	22 e0       	ldi	r18, 0x02	; 2
     d14:	37 e0       	ldi	r19, 0x07	; 7
     d16:	fc 01       	movw	r30, r24
     d18:	31 83       	std	Z+1, r19	; 0x01
     d1a:	20 83       	st	Z, r18
{
}
     d1c:	08 95       	ret

00000d1e <_ZN10PinCatcherD1Ev>:


PinCatcher::~PinCatcher()
     d1e:	22 e0       	ldi	r18, 0x02	; 2
     d20:	37 e0       	ldi	r19, 0x07	; 7
     d22:	fc 01       	movw	r30, r24
     d24:	31 83       	std	Z+1, r19	; 0x01
     d26:	20 83       	st	Z, r18
{
}
     d28:	08 95       	ret

00000d2a <_ZN15PinCatcher_implC1Ev>:

#include <Arduino.h>

//--- cosntructors/destructor ------------------------------------------------------------------------------------------

PinCatcher_impl::PinCatcher_impl() :
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	dc 01       	movw	r26, r24
		pins0_(*portInputRegister(0)), pins1_(*portInputRegister(9)), pins2_(
     d34:	23 ef       	ldi	r18, 0xF3	; 243
     d36:	31 e0       	ldi	r19, 0x01	; 1
     d38:	f9 01       	movw	r30, r18
     d3a:	45 91       	lpm	r20, Z+
     d3c:	54 91       	lpm	r21, Z+
				*portInputRegister(11)), last0_(
				pins0_), last1_(pins1_), last2_(pins2_),  mask0_(
				0), mask1_(0), mask2_(0) {
     d3e:	ca 01       	movw	r24, r20
     d40:	91 96       	adiw	r26, 0x21	; 33
     d42:	5c 93       	st	X, r21
     d44:	4e 93       	st	-X, r20
     d46:	90 97       	sbiw	r26, 0x20	; 32
#include <Arduino.h>

//--- cosntructors/destructor ------------------------------------------------------------------------------------------

PinCatcher_impl::PinCatcher_impl() :
		pins0_(*portInputRegister(0)), pins1_(*portInputRegister(9)), pins2_(
     d48:	f9 01       	movw	r30, r18
     d4a:	72 96       	adiw	r30, 0x12	; 18
     d4c:	45 91       	lpm	r20, Z+
     d4e:	54 91       	lpm	r21, Z+
				*portInputRegister(11)), last0_(
				pins0_), last1_(pins1_), last2_(pins2_),  mask0_(
				0), mask1_(0), mask2_(0) {
     d50:	e4 2e       	mov	r14, r20
     d52:	e7 01       	movw	r28, r14
     d54:	7e 01       	movw	r14, r28
     d56:	f5 2e       	mov	r15, r21
     d58:	e7 01       	movw	r28, r14
     d5a:	93 96       	adiw	r26, 0x23	; 35
     d5c:	fc 92       	st	X, r15
     d5e:	ee 92       	st	-X, r14
     d60:	92 97       	sbiw	r26, 0x22	; 34

//--- cosntructors/destructor ------------------------------------------------------------------------------------------

PinCatcher_impl::PinCatcher_impl() :
		pins0_(*portInputRegister(0)), pins1_(*portInputRegister(9)), pins2_(
				*portInputRegister(11)), last0_(
     d62:	2a 5e       	subi	r18, 0xEA	; 234
     d64:	3f 4f       	sbci	r19, 0xFF	; 255
     d66:	f9 01       	movw	r30, r18
     d68:	45 91       	lpm	r20, Z+
     d6a:	54 91       	lpm	r21, Z+
				pins0_), last1_(pins1_), last2_(pins2_),  mask0_(
				0), mask1_(0), mask2_(0) {
     d6c:	95 96       	adiw	r26, 0x25	; 37
     d6e:	5c 93       	st	X, r21
     d70:	4e 93       	st	-X, r20
     d72:	94 97       	sbiw	r26, 0x24	; 36
     d74:	fc 01       	movw	r30, r24
     d76:	80 81       	ld	r24, Z
     d78:	96 96       	adiw	r26, 0x26	; 38
     d7a:	8c 93       	st	X, r24
     d7c:	96 97       	sbiw	r26, 0x26	; 38
     d7e:	88 81       	ld	r24, Y
     d80:	97 96       	adiw	r26, 0x27	; 39
     d82:	8c 93       	st	X, r24
     d84:	97 97       	sbiw	r26, 0x27	; 39
     d86:	fa 01       	movw	r30, r20
     d88:	80 81       	ld	r24, Z
     d8a:	98 96       	adiw	r26, 0x28	; 40
     d8c:	8c 93       	st	X, r24
     d8e:	98 97       	sbiw	r26, 0x28	; 40
     d90:	99 96       	adiw	r26, 0x29	; 41
     d92:	1c 92       	st	X, r1
     d94:	99 97       	sbiw	r26, 0x29	; 41
     d96:	9a 96       	adiw	r26, 0x2a	; 42
     d98:	1c 92       	st	X, r1
     d9a:	9a 97       	sbiw	r26, 0x2a	; 42
     d9c:	9b 96       	adiw	r26, 0x2b	; 43
     d9e:	1c 92       	st	X, r1
     da0:	9b 97       	sbiw	r26, 0x2b	; 43
	// need to clear the who slots.
	memset(who_, 0, (sizeof(PinCatcher*) * 8));
     da2:	80 e1       	ldi	r24, 0x10	; 16
     da4:	1d 92       	st	X+, r1
     da6:	8a 95       	dec	r24
     da8:	e9 f7       	brne	.-6      	; 0xda4 <_ZN15PinCatcher_implC1Ev+0x7a>
}
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	ff 90       	pop	r15
     db0:	ef 90       	pop	r14
     db2:	08 95       	ret

00000db4 <_ZN15PinCatcher_implD1Ev>:

PinCatcher_impl::~PinCatcher_impl() {
	PCICR = 0;
     db4:	10 92 68 00 	sts	0x0068, r1
	PCMSK0 = 0;
     db8:	10 92 6b 00 	sts	0x006B, r1
	PCMSK1 = 0;
     dbc:	10 92 6c 00 	sts	0x006C, r1
	PCMSK2 = 0;
     dc0:	10 92 6d 00 	sts	0x006D, r1
}
     dc4:	08 95       	ret

00000dc6 <_Z41__static_initialization_and_destruction_0ii.clone.0>:
//}

ISR(PCINT2_vect)
{
	handlePins2_isr();
}
     dc6:	81 30       	cpi	r24, 0x01	; 1
     dc8:	91 05       	cpc	r25, r1
     dca:	29 f4       	brne	.+10     	; 0xdd6 <_Z41__static_initialization_and_destruction_0ii.clone.0+0x10>
//--- implementation details ----------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------------
// this is THE pin catcher implementation
PinCatcher_impl pc_i;
     dcc:	89 e4       	ldi	r24, 0x49	; 73
     dce:	98 e0       	ldi	r25, 0x08	; 8
     dd0:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN15PinCatcher_implC1Ev>
     dd4:	08 95       	ret
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	21 f4       	brne	.+8      	; 0xde2 <_Z41__static_initialization_and_destruction_0ii.clone.0+0x1c>
     dda:	89 e4       	ldi	r24, 0x49	; 73
     ddc:	98 e0       	ldi	r25, 0x08	; 8
     dde:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_ZN15PinCatcher_implD1Ev>
     de2:	08 95       	ret

00000de4 <_ZN15PinCatcher_impl9attachPinEjP10PinCatcher>:
	PCMSK2 = 0;
}

//--- alphabetic -------------------------------------------------------------------------------------------------------

void PinCatcher_impl::attachPin(unsigned pin, PinCatcher* who) {
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	dc 01       	movw	r26, r24
     dec:	eb 01       	movw	r28, r22

	if (pin >9 && pin<14) {
     dee:	fb 01       	movw	r30, r22
     df0:	3a 97       	sbiw	r30, 0x0a	; 10
     df2:	e4 30       	cpi	r30, 0x04	; 4
     df4:	f1 05       	cpc	r31, r1
     df6:	08 f0       	brcs	.+2      	; 0xdfa <_ZN15PinCatcher_impl9attachPinEjP10PinCatcher+0x16>
     df8:	4d c0       	rjmp	.+154    	; 0xe94 <_ZN15PinCatcher_impl9attachPinEjP10PinCatcher+0xb0>
		who_[pin - 10] = who;
     dfa:	ee 0f       	add	r30, r30
     dfc:	ff 1f       	adc	r31, r31
     dfe:	e8 0f       	add	r30, r24
     e00:	f9 1f       	adc	r31, r25
     e02:	51 83       	std	Z+1, r21	; 0x01
     e04:	40 83       	st	Z, r20
		uint8_t mask =digitalPinToBitMask(pin);
     e06:	fb 01       	movw	r30, r22
     e08:	ed 5a       	subi	r30, 0xAD	; 173
     e0a:	fd 4f       	sbci	r31, 0xFD	; 253
     e0c:	14 91       	lpm	r17, Z+
		mask0_ |= mask;
     e0e:	99 96       	adiw	r26, 0x29	; 41
     e10:	8c 91       	ld	r24, X
     e12:	99 97       	sbiw	r26, 0x29	; 41
     e14:	81 2b       	or	r24, r17
     e16:	99 96       	adiw	r26, 0x29	; 41
     e18:	8c 93       	st	X, r24
		PCMSK0 |= mask0_;
     e1a:	90 91 6b 00 	lds	r25, 0x006B
     e1e:	98 2b       	or	r25, r24
     e20:	90 93 6b 00 	sts	0x006B, r25
		PCICR |= 1;
     e24:	80 91 68 00 	lds	r24, 0x0068
     e28:	81 60       	ori	r24, 0x01	; 1
     e2a:	80 93 68 00 	sts	0x0068, r24
		Serial.print("START ANALOG Pin:");
     e2e:	87 e2       	ldi	r24, 0x27	; 39
     e30:	9e e0       	ldi	r25, 0x0E	; 14
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	72 e0       	ldi	r23, 0x02	; 2
     e36:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		Serial.print(pin, DEC);
     e3a:	87 e2       	ldi	r24, 0x27	; 39
     e3c:	9e e0       	ldi	r25, 0x0E	; 14
     e3e:	be 01       	movw	r22, r28
     e40:	4a e0       	ldi	r20, 0x0A	; 10
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	0e 94 95 3e 	call	0x7d2a	; 0x7d2a <_ZN5Print5printEji>
		Serial.print(" Port:");
     e48:	87 e2       	ldi	r24, 0x27	; 39
     e4a:	9e e0       	ldi	r25, 0x0E	; 14
     e4c:	62 e1       	ldi	r22, 0x12	; 18
     e4e:	72 e0       	ldi	r23, 0x02	; 2
     e50:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		Serial.print(digitalPinToPort(pin), DEC);
     e54:	c3 5f       	subi	r28, 0xF3	; 243
     e56:	dd 4f       	sbci	r29, 0xFD	; 253
     e58:	fe 01       	movw	r30, r28
     e5a:	64 91       	lpm	r22, Z+
     e5c:	87 e2       	ldi	r24, 0x27	; 39
     e5e:	9e e0       	ldi	r25, 0x0E	; 14
     e60:	4a e0       	ldi	r20, 0x0A	; 10
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <_ZN5Print5printEhi>
		Serial.print(" Mask:");
     e68:	87 e2       	ldi	r24, 0x27	; 39
     e6a:	9e e0       	ldi	r25, 0x0E	; 14
     e6c:	69 e1       	ldi	r22, 0x19	; 25
     e6e:	72 e0       	ldi	r23, 0x02	; 2
     e70:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		Serial.print(mask, BIN);
     e74:	87 e2       	ldi	r24, 0x27	; 39
     e76:	9e e0       	ldi	r25, 0x0E	; 14
     e78:	61 2f       	mov	r22, r17
     e7a:	42 e0       	ldi	r20, 0x02	; 2
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <_ZN5Print5printEhi>
		Serial.print("  OR'd PCmask..");
     e82:	87 e2       	ldi	r24, 0x27	; 39
     e84:	9e e0       	ldi	r25, 0x0E	; 14
     e86:	60 e2       	ldi	r22, 0x20	; 32
     e88:	72 e0       	ldi	r23, 0x02	; 2
     e8a:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		Serial.println(PCMSK0, BIN);
     e8e:	60 91 6b 00 	lds	r22, 0x006B
     e92:	a9 c0       	rjmp	.+338    	; 0xfe6 <_ZN15PinCatcher_impl9attachPinEjP10PinCatcher+0x202>
		Serial.print("  PCICR..");
		Serial.println(PCICR, BIN);
	} else if (pin > 49 && pin < 54) {
     e94:	cb 01       	movw	r24, r22
     e96:	c2 97       	sbiw	r24, 0x32	; 50
     e98:	84 30       	cpi	r24, 0x04	; 4
     e9a:	91 05       	cpc	r25, r1
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <_ZN15PinCatcher_impl9attachPinEjP10PinCatcher+0xbc>
     e9e:	4f c0       	rjmp	.+158    	; 0xf3e <_ZN15PinCatcher_impl9attachPinEjP10PinCatcher+0x15a>
		who_[pin - 45] = who;
     ea0:	fb 01       	movw	r30, r22
     ea2:	bd 97       	sbiw	r30, 0x2d	; 45
     ea4:	ee 0f       	add	r30, r30
     ea6:	ff 1f       	adc	r31, r31
     ea8:	ea 0f       	add	r30, r26
     eaa:	fb 1f       	adc	r31, r27
     eac:	51 83       	std	Z+1, r21	; 0x01
     eae:	40 83       	st	Z, r20
		//atmega1280 pins 50-53
		uint8_t mask = digitalPinToBitMask(pin);
     eb0:	fb 01       	movw	r30, r22
     eb2:	ed 5a       	subi	r30, 0xAD	; 173
     eb4:	fd 4f       	sbci	r31, 0xFD	; 253
     eb6:	14 91       	lpm	r17, Z+
		mask1_ |= mask;
     eb8:	9a 96       	adiw	r26, 0x2a	; 42
     eba:	8c 91       	ld	r24, X
     ebc:	9a 97       	sbiw	r26, 0x2a	; 42
     ebe:	81 2b       	or	r24, r17
     ec0:	9a 96       	adiw	r26, 0x2a	; 42
     ec2:	8c 93       	st	X, r24
		PCMSK1 |= mask1_;
     ec4:	90 91 6c 00 	lds	r25, 0x006C
     ec8:	98 2b       	or	r25, r24
     eca:	90 93 6c 00 	sts	0x006C, r25
		PCICR |= 2;
     ece:	80 91 68 00 	lds	r24, 0x0068
     ed2:	82 60       	ori	r24, 0x02	; 2
     ed4:	80 93 68 00 	sts	0x0068, r24
		Serial.print("START ANALOG Pin:");
     ed8:	87 e2       	ldi	r24, 0x27	; 39
     eda:	9e e0       	ldi	r25, 0x0E	; 14
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	72 e0       	ldi	r23, 0x02	; 2
     ee0:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		Serial.print(pin, DEC);
     ee4:	87 e2       	ldi	r24, 0x27	; 39
     ee6:	9e e0       	ldi	r25, 0x0E	; 14
     ee8:	be 01       	movw	r22, r28
     eea:	4a e0       	ldi	r20, 0x0A	; 10
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	0e 94 95 3e 	call	0x7d2a	; 0x7d2a <_ZN5Print5printEji>
		Serial.print(" Port:");
     ef2:	87 e2       	ldi	r24, 0x27	; 39
     ef4:	9e e0       	ldi	r25, 0x0E	; 14
     ef6:	62 e1       	ldi	r22, 0x12	; 18
     ef8:	72 e0       	ldi	r23, 0x02	; 2
     efa:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		Serial.print(digitalPinToPort(pin), DEC);
     efe:	c3 5f       	subi	r28, 0xF3	; 243
     f00:	dd 4f       	sbci	r29, 0xFD	; 253
     f02:	fe 01       	movw	r30, r28
     f04:	64 91       	lpm	r22, Z+
     f06:	87 e2       	ldi	r24, 0x27	; 39
     f08:	9e e0       	ldi	r25, 0x0E	; 14
     f0a:	4a e0       	ldi	r20, 0x0A	; 10
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <_ZN5Print5printEhi>
		Serial.print(" Mask:");
     f12:	87 e2       	ldi	r24, 0x27	; 39
     f14:	9e e0       	ldi	r25, 0x0E	; 14
     f16:	69 e1       	ldi	r22, 0x19	; 25
     f18:	72 e0       	ldi	r23, 0x02	; 2
     f1a:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		Serial.print(mask, BIN);
     f1e:	87 e2       	ldi	r24, 0x27	; 39
     f20:	9e e0       	ldi	r25, 0x0E	; 14
     f22:	61 2f       	mov	r22, r17
     f24:	42 e0       	ldi	r20, 0x02	; 2
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <_ZN5Print5printEhi>
		Serial.print("  OR'd PCmask..");
     f2c:	87 e2       	ldi	r24, 0x27	; 39
     f2e:	9e e0       	ldi	r25, 0x0E	; 14
     f30:	60 e2       	ldi	r22, 0x20	; 32
     f32:	72 e0       	ldi	r23, 0x02	; 2
     f34:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		Serial.println(PCMSK1, BIN);
     f38:	60 91 6c 00 	lds	r22, 0x006C
     f3c:	54 c0       	rjmp	.+168    	; 0xfe6 <_ZN15PinCatcher_impl9attachPinEjP10PinCatcher+0x202>
		Serial.print("  PCICR..");
		Serial.println(PCICR, BIN);
	} else if (pin > 61 && pin < 70) {
     f3e:	cb 01       	movw	r24, r22
     f40:	ce 97       	sbiw	r24, 0x3e	; 62
     f42:	88 30       	cpi	r24, 0x08	; 8
     f44:	91 05       	cpc	r25, r1
     f46:	08 f0       	brcs	.+2      	; 0xf4a <_ZN15PinCatcher_impl9attachPinEjP10PinCatcher+0x166>
     f48:	62 c0       	rjmp	.+196    	; 0x100e <_ZN15PinCatcher_impl9attachPinEjP10PinCatcher+0x22a>
		who_[pin - 54] = who;
     f4a:	fb 01       	movw	r30, r22
     f4c:	f6 97       	sbiw	r30, 0x36	; 54
     f4e:	ee 0f       	add	r30, r30
     f50:	ff 1f       	adc	r31, r31
     f52:	ea 0f       	add	r30, r26
     f54:	fb 1f       	adc	r31, r27
     f56:	51 83       	std	Z+1, r21	; 0x01
     f58:	40 83       	st	Z, r20
		uint8_t mask = digitalPinToBitMask(pin);
     f5a:	fb 01       	movw	r30, r22
     f5c:	ed 5a       	subi	r30, 0xAD	; 173
     f5e:	fd 4f       	sbci	r31, 0xFD	; 253
     f60:	14 91       	lpm	r17, Z+
		mask2_ |= mask;
     f62:	9b 96       	adiw	r26, 0x2b	; 43
     f64:	8c 91       	ld	r24, X
     f66:	9b 97       	sbiw	r26, 0x2b	; 43
     f68:	81 2b       	or	r24, r17
     f6a:	9b 96       	adiw	r26, 0x2b	; 43
     f6c:	8c 93       	st	X, r24
		PCMSK2 |= mask2_;
     f6e:	90 91 6d 00 	lds	r25, 0x006D
     f72:	98 2b       	or	r25, r24
     f74:	90 93 6d 00 	sts	0x006D, r25
		PCICR |= 4;
     f78:	80 91 68 00 	lds	r24, 0x0068
     f7c:	84 60       	ori	r24, 0x04	; 4
     f7e:	80 93 68 00 	sts	0x0068, r24
		Serial.print("START ANALOG Pin:");
     f82:	87 e2       	ldi	r24, 0x27	; 39
     f84:	9e e0       	ldi	r25, 0x0E	; 14
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	72 e0       	ldi	r23, 0x02	; 2
     f8a:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		Serial.print(pin, DEC);
     f8e:	87 e2       	ldi	r24, 0x27	; 39
     f90:	9e e0       	ldi	r25, 0x0E	; 14
     f92:	be 01       	movw	r22, r28
     f94:	4a e0       	ldi	r20, 0x0A	; 10
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	0e 94 95 3e 	call	0x7d2a	; 0x7d2a <_ZN5Print5printEji>
		Serial.print(" Port:");
     f9c:	87 e2       	ldi	r24, 0x27	; 39
     f9e:	9e e0       	ldi	r25, 0x0E	; 14
     fa0:	62 e1       	ldi	r22, 0x12	; 18
     fa2:	72 e0       	ldi	r23, 0x02	; 2
     fa4:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		Serial.print(digitalPinToPort(pin), DEC);
     fa8:	c3 5f       	subi	r28, 0xF3	; 243
     faa:	dd 4f       	sbci	r29, 0xFD	; 253
     fac:	fe 01       	movw	r30, r28
     fae:	64 91       	lpm	r22, Z+
     fb0:	87 e2       	ldi	r24, 0x27	; 39
     fb2:	9e e0       	ldi	r25, 0x0E	; 14
     fb4:	4a e0       	ldi	r20, 0x0A	; 10
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <_ZN5Print5printEhi>
		Serial.print(" Mask:");
     fbc:	87 e2       	ldi	r24, 0x27	; 39
     fbe:	9e e0       	ldi	r25, 0x0E	; 14
     fc0:	69 e1       	ldi	r22, 0x19	; 25
     fc2:	72 e0       	ldi	r23, 0x02	; 2
     fc4:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		Serial.print(mask, BIN);
     fc8:	87 e2       	ldi	r24, 0x27	; 39
     fca:	9e e0       	ldi	r25, 0x0E	; 14
     fcc:	61 2f       	mov	r22, r17
     fce:	42 e0       	ldi	r20, 0x02	; 2
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <_ZN5Print5printEhi>
		Serial.print("  OR'd PCmask..");
     fd6:	87 e2       	ldi	r24, 0x27	; 39
     fd8:	9e e0       	ldi	r25, 0x0E	; 14
     fda:	60 e2       	ldi	r22, 0x20	; 32
     fdc:	72 e0       	ldi	r23, 0x02	; 2
     fde:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		Serial.println(PCMSK2, BIN);
     fe2:	60 91 6d 00 	lds	r22, 0x006D
     fe6:	87 e2       	ldi	r24, 0x27	; 39
     fe8:	9e e0       	ldi	r25, 0x0E	; 14
     fea:	42 e0       	ldi	r20, 0x02	; 2
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	0e 94 a4 3e 	call	0x7d48	; 0x7d48 <_ZN5Print7printlnEhi>
		Serial.print("  PCICR..");
     ff2:	87 e2       	ldi	r24, 0x27	; 39
     ff4:	9e e0       	ldi	r25, 0x0E	; 14
     ff6:	60 e3       	ldi	r22, 0x30	; 48
     ff8:	72 e0       	ldi	r23, 0x02	; 2
     ffa:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		Serial.println(PCICR, BIN);
     ffe:	60 91 68 00 	lds	r22, 0x0068
    1002:	87 e2       	ldi	r24, 0x27	; 39
    1004:	9e e0       	ldi	r25, 0x0E	; 14
    1006:	42 e0       	ldi	r20, 0x02	; 2
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	0e 94 a4 3e 	call	0x7d48	; 0x7d48 <_ZN5Print7printlnEhi>
	}

}
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	08 95       	ret

00001016 <_ZN15PinCatcher_impl9detachPinEj>:

void PinCatcher_impl::detachPin(unsigned pin) {
    1016:	dc 01       	movw	r26, r24
	if (pin >9 && pin<14) {
    1018:	cb 01       	movw	r24, r22
    101a:	0a 97       	sbiw	r24, 0x0a	; 10
    101c:	84 30       	cpi	r24, 0x04	; 4
    101e:	91 05       	cpc	r25, r1
    1020:	f0 f4       	brcc	.+60     	; 0x105e <_ZN15PinCatcher_impl9detachPinEj+0x48>
		uint8_t mask = 0xFF ^ digitalPinToBitMask(pin);
    1022:	6d 5a       	subi	r22, 0xAD	; 173
    1024:	7d 4f       	sbci	r23, 0xFD	; 253
    1026:	fb 01       	movw	r30, r22
    1028:	64 91       	lpm	r22, Z+
    102a:	60 95       	com	r22
		mask0_ &= mask;
    102c:	99 96       	adiw	r26, 0x29	; 41
    102e:	2c 91       	ld	r18, X
    1030:	99 97       	sbiw	r26, 0x29	; 41
    1032:	62 23       	and	r22, r18
    1034:	99 96       	adiw	r26, 0x29	; 41
    1036:	6c 93       	st	X, r22
    1038:	99 97       	sbiw	r26, 0x29	; 41
		PCMSK0 = mask0_;
    103a:	60 93 6b 00 	sts	0x006B, r22
		if (!mask0_)
    103e:	99 96       	adiw	r26, 0x29	; 41
    1040:	2c 91       	ld	r18, X
    1042:	99 97       	sbiw	r26, 0x29	; 41
    1044:	22 23       	and	r18, r18
    1046:	29 f4       	brne	.+10     	; 0x1052 <_ZN15PinCatcher_impl9detachPinEj+0x3c>
			PCICR &= 3;
    1048:	20 91 68 00 	lds	r18, 0x0068
    104c:	23 70       	andi	r18, 0x03	; 3
    104e:	20 93 68 00 	sts	0x0068, r18
		who_[pin - 10] = 0;
    1052:	fc 01       	movw	r30, r24
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	ea 0f       	add	r30, r26
    105a:	fb 1f       	adc	r31, r27
    105c:	24 c0       	rjmp	.+72     	; 0x10a6 <_ZN15PinCatcher_impl9detachPinEj+0x90>
	} else if (pin > 49 && pin < 54) {
    105e:	cb 01       	movw	r24, r22
    1060:	c2 97       	sbiw	r24, 0x32	; 50
    1062:	84 30       	cpi	r24, 0x04	; 4
    1064:	91 05       	cpc	r25, r1
    1066:	10 f5       	brcc	.+68     	; 0x10ac <_ZN15PinCatcher_impl9detachPinEj+0x96>
		uint8_t mask = 0xFF ^ digitalPinToBitMask(pin);
    1068:	fb 01       	movw	r30, r22
    106a:	ed 5a       	subi	r30, 0xAD	; 173
    106c:	fd 4f       	sbci	r31, 0xFD	; 253
    106e:	e4 91       	lpm	r30, Z+
    1070:	e0 95       	com	r30
		mask1_ |= mask;
    1072:	9a 96       	adiw	r26, 0x2a	; 42
    1074:	8c 91       	ld	r24, X
    1076:	9a 97       	sbiw	r26, 0x2a	; 42
    1078:	e8 2b       	or	r30, r24
    107a:	9a 96       	adiw	r26, 0x2a	; 42
    107c:	ec 93       	st	X, r30
    107e:	9a 97       	sbiw	r26, 0x2a	; 42
		PCMSK1 = mask1_;
    1080:	e0 93 6c 00 	sts	0x006C, r30
		if (!mask1_)
    1084:	9a 96       	adiw	r26, 0x2a	; 42
    1086:	8c 91       	ld	r24, X
    1088:	9a 97       	sbiw	r26, 0x2a	; 42
    108a:	88 23       	and	r24, r24
    108c:	29 f4       	brne	.+10     	; 0x1098 <_ZN15PinCatcher_impl9detachPinEj+0x82>
			PCICR &= 6;
    108e:	80 91 68 00 	lds	r24, 0x0068
    1092:	86 70       	andi	r24, 0x06	; 6
    1094:	80 93 68 00 	sts	0x0068, r24
		who_[pin - 45] = 0;
    1098:	6d 52       	subi	r22, 0x2D	; 45
    109a:	70 40       	sbci	r23, 0x00	; 0
    109c:	66 0f       	add	r22, r22
    109e:	77 1f       	adc	r23, r23
    10a0:	6a 0f       	add	r22, r26
    10a2:	7b 1f       	adc	r23, r27
    10a4:	fb 01       	movw	r30, r22
    10a6:	11 82       	std	Z+1, r1	; 0x01
    10a8:	10 82       	st	Z, r1
    10aa:	08 95       	ret
	} else if (pin > 61 && pin < 70) {
    10ac:	cb 01       	movw	r24, r22
    10ae:	ce 97       	sbiw	r24, 0x3e	; 62
    10b0:	88 30       	cpi	r24, 0x08	; 8
    10b2:	91 05       	cpc	r25, r1
    10b4:	08 f5       	brcc	.+66     	; 0x10f8 <_ZN15PinCatcher_impl9detachPinEj+0xe2>
		uint8_t mask = 0xFF ^ digitalPinToBitMask(pin);
    10b6:	fb 01       	movw	r30, r22
    10b8:	ed 5a       	subi	r30, 0xAD	; 173
    10ba:	fd 4f       	sbci	r31, 0xFD	; 253
    10bc:	e4 91       	lpm	r30, Z+
    10be:	e0 95       	com	r30
		mask2_ &= mask;
    10c0:	9b 96       	adiw	r26, 0x2b	; 43
    10c2:	8c 91       	ld	r24, X
    10c4:	9b 97       	sbiw	r26, 0x2b	; 43
    10c6:	e8 23       	and	r30, r24
    10c8:	9b 96       	adiw	r26, 0x2b	; 43
    10ca:	ec 93       	st	X, r30
    10cc:	9b 97       	sbiw	r26, 0x2b	; 43
		PCMSK2 = mask2_;
    10ce:	e0 93 6d 00 	sts	0x006D, r30
		if (!mask2_)
    10d2:	9b 96       	adiw	r26, 0x2b	; 43
    10d4:	8c 91       	ld	r24, X
    10d6:	9b 97       	sbiw	r26, 0x2b	; 43
    10d8:	88 23       	and	r24, r24
    10da:	29 f4       	brne	.+10     	; 0x10e6 <_ZN15PinCatcher_impl9detachPinEj+0xd0>
			PCICR &= 5;
    10dc:	80 91 68 00 	lds	r24, 0x0068
    10e0:	85 70       	andi	r24, 0x05	; 5
    10e2:	80 93 68 00 	sts	0x0068, r24
		who_[pin - 54] = 0;
    10e6:	66 53       	subi	r22, 0x36	; 54
    10e8:	70 40       	sbci	r23, 0x00	; 0
    10ea:	66 0f       	add	r22, r22
    10ec:	77 1f       	adc	r23, r23
    10ee:	6a 0f       	add	r22, r26
    10f0:	7b 1f       	adc	r23, r27
    10f2:	fb 01       	movw	r30, r22
    10f4:	11 82       	std	Z+1, r1	; 0x01
    10f6:	10 82       	st	Z, r1
    10f8:	08 95       	ret

000010fa <_ZN15PinCatcher_impl11handlePins2Ev>:
	}
}



void PinCatcher_impl::handlePins2() {
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	ec 01       	movw	r28, r24
	// see handlePins0_ for comments
	//Serial.print("ISR fired");
	uint8_t curr = pins2_;
    1108:	ec a1       	ldd	r30, Y+36	; 0x24
    110a:	fd a1       	ldd	r31, Y+37	; 0x25
    110c:	f0 80       	ld	r15, Z
//	Serial.print(", pins2_=");
//	Serial.print(pins2_, BIN);
//	Serial.print(", last2_=");
//	Serial.print(last2_, BIN);
	uint8_t changed = mask2_ & (curr ^ last2_);
    110e:	08 a5       	ldd	r16, Y+40	; 0x28
    1110:	0f 25       	eor	r16, r15
    1112:	8b a5       	ldd	r24, Y+43	; 0x2b
    1114:	08 23       	and	r16, r24
	last2_ = curr;
    1116:	f8 a6       	std	Y+40, r15	; 0x28
//	Serial.print(", mask2_=");
//	Serial.print(mask2_, BIN);
//
//	Serial.print(", changed mask=");
//	Serial.println(changed, BIN);
	uint8_t count = 62; //pins 62-69
    1118:	2e e3       	ldi	r18, 0x3E	; 62
    111a:	e2 2e       	mov	r14, r18
	while (changed) {
    111c:	1d c0       	rjmp	.+58     	; 0x1158 <_ZN15PinCatcher_impl11handlePins2Ev+0x5e>
		if (changed & 0x01)
    111e:	10 e0       	ldi	r17, 0x00	; 0
    1120:	00 ff       	sbrs	r16, 0
    1122:	16 c0       	rjmp	.+44     	; 0x1150 <_ZN15PinCatcher_impl11handlePins2Ev+0x56>
			who_[count-54]->handle(count, (curr & 0x01));
    1124:	ee 2d       	mov	r30, r14
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	f6 97       	sbiw	r30, 0x36	; 54
    112a:	ee 0f       	add	r30, r30
    112c:	ff 1f       	adc	r31, r31
    112e:	ec 0f       	add	r30, r28
    1130:	fd 1f       	adc	r31, r29
    1132:	80 81       	ld	r24, Z
    1134:	91 81       	ldd	r25, Z+1	; 0x01
    1136:	dc 01       	movw	r26, r24
    1138:	ed 91       	ld	r30, X+
    113a:	fc 91       	ld	r31, X
    113c:	4f 2d       	mov	r20, r15
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	41 70       	andi	r20, 0x01	; 1
    1142:	50 70       	andi	r21, 0x00	; 0
    1144:	01 90       	ld	r0, Z+
    1146:	f0 81       	ld	r31, Z
    1148:	e0 2d       	mov	r30, r0
    114a:	6e 2d       	mov	r22, r14
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	09 95       	icall
		changed >>= 1;
    1150:	15 95       	asr	r17
    1152:	07 95       	ror	r16
		curr >>= 1;
    1154:	f6 94       	lsr	r15
		++count;
    1156:	e3 94       	inc	r14
//	Serial.print(mask2_, BIN);
//
//	Serial.print(", changed mask=");
//	Serial.println(changed, BIN);
	uint8_t count = 62; //pins 62-69
	while (changed) {
    1158:	00 23       	and	r16, r16
    115a:	09 f7       	brne	.-62     	; 0x111e <_ZN15PinCatcher_impl11handlePins2Ev+0x24>
			who_[count-54]->handle(count, (curr & 0x01));
		changed >>= 1;
		curr >>= 1;
		++count;
	}
}
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	08 95       	ret

0000116a <_Z15handlePins2_isrv>:
void handlePins1_isr() {
	pc_i.handlePins1();
}

void handlePins2_isr() {
	pc_i.handlePins2();
    116a:	89 e4       	ldi	r24, 0x49	; 73
    116c:	98 e0       	ldi	r25, 0x08	; 8
    116e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZN15PinCatcher_impl11handlePins2Ev>
}
    1172:	08 95       	ret

00001174 <__vector_11>:
//{
//   handlePins2_isr();
//}

ISR(PCINT2_vect)
{
    1174:	1f 92       	push	r1
    1176:	0f 92       	push	r0
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	0f 92       	push	r0
    117c:	0b b6       	in	r0, 0x3b	; 59
    117e:	0f 92       	push	r0
    1180:	11 24       	eor	r1, r1
    1182:	2f 93       	push	r18
    1184:	3f 93       	push	r19
    1186:	4f 93       	push	r20
    1188:	5f 93       	push	r21
    118a:	6f 93       	push	r22
    118c:	7f 93       	push	r23
    118e:	8f 93       	push	r24
    1190:	9f 93       	push	r25
    1192:	af 93       	push	r26
    1194:	bf 93       	push	r27
    1196:	ef 93       	push	r30
    1198:	ff 93       	push	r31
	handlePins2_isr();
    119a:	0e 94 b5 08 	call	0x116a	; 0x116a <_Z15handlePins2_isrv>
}
    119e:	ff 91       	pop	r31
    11a0:	ef 91       	pop	r30
    11a2:	bf 91       	pop	r27
    11a4:	af 91       	pop	r26
    11a6:	9f 91       	pop	r25
    11a8:	8f 91       	pop	r24
    11aa:	7f 91       	pop	r23
    11ac:	6f 91       	pop	r22
    11ae:	5f 91       	pop	r21
    11b0:	4f 91       	pop	r20
    11b2:	3f 91       	pop	r19
    11b4:	2f 91       	pop	r18
    11b6:	0f 90       	pop	r0
    11b8:	0b be       	out	0x3b, r0	; 59
    11ba:	0f 90       	pop	r0
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	0f 90       	pop	r0
    11c0:	1f 90       	pop	r1
    11c2:	18 95       	reti

000011c4 <_GLOBAL__I__ZN15PinCatcher_implC2Ev>:
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <_Z41__static_initialization_and_destruction_0ii.clone.0>
    11cc:	08 95       	ret

000011ce <_GLOBAL__D__ZN15PinCatcher_implC2Ev>:
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <_Z41__static_initialization_and_destruction_0ii.clone.0>
    11d6:	08 95       	ret

000011d8 <_ZN7PString5writeEh>:
  if (_size > 0)
    _buf[0] = '\0';
}

size_t PString::write(uint8_t b)
{
    11d8:	fc 01       	movw	r30, r24
  if (_cur + 1 < _buf + _size)
    11da:	a6 81       	ldd	r26, Z+6	; 0x06
    11dc:	b7 81       	ldd	r27, Z+7	; 0x07
    11de:	9d 01       	movw	r18, r26
    11e0:	2f 5f       	subi	r18, 0xFF	; 255
    11e2:	3f 4f       	sbci	r19, 0xFF	; 255
    11e4:	84 81       	ldd	r24, Z+4	; 0x04
    11e6:	95 81       	ldd	r25, Z+5	; 0x05
    11e8:	40 85       	ldd	r20, Z+8	; 0x08
    11ea:	51 85       	ldd	r21, Z+9	; 0x09
    11ec:	84 0f       	add	r24, r20
    11ee:	95 1f       	adc	r25, r21
    11f0:	28 17       	cp	r18, r24
    11f2:	39 07       	cpc	r19, r25
    11f4:	30 f4       	brcc	.+12     	; 0x1202 <_ZN7PString5writeEh+0x2a>
  {
    *_cur++ = (char)b;
    11f6:	6c 93       	st	X, r22
    11f8:	37 83       	std	Z+7, r19	; 0x07
    11fa:	26 83       	std	Z+6, r18	; 0x06
    *_cur = '\0';
    11fc:	11 96       	adiw	r26, 0x01	; 1
    11fe:	1c 92       	st	X, r1
    1200:	11 97       	sbiw	r26, 0x01	; 1
  }
  return 1;
}
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	08 95       	ret

00001208 <_ZN7PString5beginEv>:
*/

#include "PString.h"

void PString::begin()
{
    1208:	fc 01       	movw	r30, r24
  _cur = _buf;
    120a:	a4 81       	ldd	r26, Z+4	; 0x04
    120c:	b5 81       	ldd	r27, Z+5	; 0x05
    120e:	b7 83       	std	Z+7, r27	; 0x07
    1210:	a6 83       	std	Z+6, r26	; 0x06
  if (_size > 0)
    1212:	80 85       	ldd	r24, Z+8	; 0x08
    1214:	91 85       	ldd	r25, Z+9	; 0x09
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	09 f0       	breq	.+2      	; 0x121c <_ZN7PString5beginEv+0x14>
    _buf[0] = '\0';
    121a:	1c 92       	st	X, r1
    121c:	08 95       	ret

0000121e <_ZN3PID7ComputeEv>:
 *     This, as they say, is where the magic happens.  this function should be called
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed
 **********************************************************************************/ 
void PID::Compute()
{
    121e:	2f 92       	push	r2
    1220:	3f 92       	push	r3
    1222:	4f 92       	push	r4
    1224:	5f 92       	push	r5
    1226:	6f 92       	push	r6
    1228:	7f 92       	push	r7
    122a:	8f 92       	push	r8
    122c:	9f 92       	push	r9
    122e:	af 92       	push	r10
    1230:	bf 92       	push	r11
    1232:	cf 92       	push	r12
    1234:	df 92       	push	r13
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	2a 97       	sbiw	r28, 0x0a	; 10
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	9a 87       	std	Y+10, r25	; 0x0a
    1254:	89 87       	std	Y+9, r24	; 0x09
   if(!inAuto) return;
    1256:	dc 01       	movw	r26, r24
    1258:	d6 96       	adiw	r26, 0x36	; 54
    125a:	8c 91       	ld	r24, X
    125c:	d6 97       	sbiw	r26, 0x36	; 54
    125e:	88 23       	and	r24, r24
    1260:	09 f4       	brne	.+2      	; 0x1264 <_ZN3PID7ComputeEv+0x46>
    1262:	19 c1       	rjmp	.+562    	; 0x1496 <_ZN3PID7ComputeEv+0x278>
   unsigned long now = millis();
    1264:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    1268:	6d 83       	std	Y+5, r22	; 0x05
    126a:	7e 83       	std	Y+6, r23	; 0x06
    126c:	8f 83       	std	Y+7, r24	; 0x07
    126e:	98 87       	std	Y+8, r25	; 0x08
   int timeChange = (now - lastTime);
    1270:	e9 85       	ldd	r30, Y+9	; 0x09
    1272:	fa 85       	ldd	r31, Y+10	; 0x0a
    1274:	80 a1       	ldd	r24, Z+32	; 0x20
    1276:	91 a1       	ldd	r25, Z+33	; 0x21
    1278:	2d 81       	ldd	r18, Y+5	; 0x05
    127a:	3e 81       	ldd	r19, Y+6	; 0x06
    127c:	28 1b       	sub	r18, r24
    127e:	39 0b       	sbc	r19, r25
   if(timeChange>=SampleTime)
    1280:	84 a5       	ldd	r24, Z+44	; 0x2c
    1282:	95 a5       	ldd	r25, Z+45	; 0x2d
    1284:	28 17       	cp	r18, r24
    1286:	39 07       	cpc	r19, r25
    1288:	0c f4       	brge	.+2      	; 0x128c <_ZN3PID7ComputeEv+0x6e>
    128a:	05 c1       	rjmp	.+522    	; 0x1496 <_ZN3PID7ComputeEv+0x278>
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
    128c:	22 8d       	ldd	r18, Z+26	; 0x1a
    128e:	33 8d       	ldd	r19, Z+27	; 0x1b
    1290:	d9 01       	movw	r26, r18
    1292:	8d 91       	ld	r24, X+
    1294:	9d 91       	ld	r25, X+
    1296:	0d 90       	ld	r0, X+
    1298:	bc 91       	ld	r27, X
    129a:	a0 2d       	mov	r26, r0
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	9a 83       	std	Y+2, r25	; 0x02
    12a0:	ab 83       	std	Y+3, r26	; 0x03
    12a2:	bc 83       	std	Y+4, r27	; 0x04
      double error = *mySetpoint - input;
    12a4:	06 8c       	ldd	r0, Z+30	; 0x1e
    12a6:	f7 8d       	ldd	r31, Z+31	; 0x1f
    12a8:	e0 2d       	mov	r30, r0
    12aa:	60 81       	ld	r22, Z
    12ac:	71 81       	ldd	r23, Z+1	; 0x01
    12ae:	82 81       	ldd	r24, Z+2	; 0x02
    12b0:	93 81       	ldd	r25, Z+3	; 0x03
    12b2:	29 81       	ldd	r18, Y+1	; 0x01
    12b4:	3a 81       	ldd	r19, Y+2	; 0x02
    12b6:	4b 81       	ldd	r20, Y+3	; 0x03
    12b8:	5c 81       	ldd	r21, Y+4	; 0x04
    12ba:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    12be:	56 2e       	mov	r5, r22
    12c0:	47 2e       	mov	r4, r23
    12c2:	38 2e       	mov	r3, r24
    12c4:	29 2e       	mov	r2, r25
      ITerm+= (ki * error);
    12c6:	a2 01       	movw	r20, r4
    12c8:	91 01       	movw	r18, r2
    12ca:	65 2f       	mov	r22, r21
    12cc:	74 2f       	mov	r23, r20
    12ce:	83 2f       	mov	r24, r19
    12d0:	92 2f       	mov	r25, r18
    12d2:	e9 85       	ldd	r30, Y+9	; 0x09
    12d4:	fa 85       	ldd	r31, Y+10	; 0x0a
    12d6:	20 89       	ldd	r18, Z+16	; 0x10
    12d8:	31 89       	ldd	r19, Z+17	; 0x11
    12da:	42 89       	ldd	r20, Z+18	; 0x12
    12dc:	53 89       	ldd	r21, Z+19	; 0x13
    12de:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    12e2:	a9 85       	ldd	r26, Y+9	; 0x09
    12e4:	ba 85       	ldd	r27, Y+10	; 0x0a
    12e6:	94 96       	adiw	r26, 0x24	; 36
    12e8:	2d 91       	ld	r18, X+
    12ea:	3d 91       	ld	r19, X+
    12ec:	4d 91       	ld	r20, X+
    12ee:	5c 91       	ld	r21, X
    12f0:	97 97       	sbiw	r26, 0x27	; 39
    12f2:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    12f6:	d6 2e       	mov	r13, r22
    12f8:	c7 2e       	mov	r12, r23
    12fa:	b8 2e       	mov	r11, r24
    12fc:	a9 2e       	mov	r10, r25
    12fe:	a6 01       	movw	r20, r12
    1300:	95 01       	movw	r18, r10
    1302:	85 2f       	mov	r24, r21
    1304:	94 2f       	mov	r25, r20
    1306:	a3 2f       	mov	r26, r19
    1308:	b2 2f       	mov	r27, r18
    130a:	e9 85       	ldd	r30, Y+9	; 0x09
    130c:	fa 85       	ldd	r31, Y+10	; 0x0a
    130e:	84 a3       	std	Z+36, r24	; 0x24
    1310:	95 a3       	std	Z+37, r25	; 0x25
    1312:	a6 a3       	std	Z+38, r26	; 0x26
    1314:	b7 a3       	std	Z+39, r27	; 0x27
      if(ITerm > outMax) ITerm= outMax;
    1316:	02 a9       	ldd	r16, Z+50	; 0x32
    1318:	13 a9       	ldd	r17, Z+51	; 0x33
    131a:	f4 a8       	ldd	r15, Z+52	; 0x34
    131c:	e5 a8       	ldd	r14, Z+53	; 0x35
    131e:	65 2f       	mov	r22, r21
    1320:	74 2f       	mov	r23, r20
    1322:	83 2f       	mov	r24, r19
    1324:	92 2f       	mov	r25, r18
    1326:	f7 01       	movw	r30, r14
    1328:	20 2f       	mov	r18, r16
    132a:	31 2f       	mov	r19, r17
    132c:	4f 2f       	mov	r20, r31
    132e:	5e 2f       	mov	r21, r30
    1330:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <__gesf2>
    1334:	18 16       	cp	r1, r24
    1336:	64 f4       	brge	.+24     	; 0x1350 <_ZN3PID7ComputeEv+0x132>
    1338:	97 01       	movw	r18, r14
    133a:	80 2f       	mov	r24, r16
    133c:	91 2f       	mov	r25, r17
    133e:	a3 2f       	mov	r26, r19
    1340:	b2 2f       	mov	r27, r18
    1342:	e9 85       	ldd	r30, Y+9	; 0x09
    1344:	fa 85       	ldd	r31, Y+10	; 0x0a
    1346:	84 a3       	std	Z+36, r24	; 0x24
    1348:	95 a3       	std	Z+37, r25	; 0x25
    134a:	a6 a3       	std	Z+38, r26	; 0x26
    134c:	b7 a3       	std	Z+39, r27	; 0x27
    134e:	1a c0       	rjmp	.+52     	; 0x1384 <_ZN3PID7ComputeEv+0x166>
      else if(ITerm < outMin) ITerm= outMin;
    1350:	a9 85       	ldd	r26, Y+9	; 0x09
    1352:	ba 85       	ldd	r27, Y+10	; 0x0a
    1354:	9e 96       	adiw	r26, 0x2e	; 46
    1356:	6d 90       	ld	r6, X+
    1358:	7d 90       	ld	r7, X+
    135a:	8d 90       	ld	r8, X+
    135c:	9c 90       	ld	r9, X
    135e:	d1 97       	sbiw	r26, 0x31	; 49
    1360:	a6 01       	movw	r20, r12
    1362:	95 01       	movw	r18, r10
    1364:	65 2f       	mov	r22, r21
    1366:	74 2f       	mov	r23, r20
    1368:	83 2f       	mov	r24, r19
    136a:	92 2f       	mov	r25, r18
    136c:	a4 01       	movw	r20, r8
    136e:	93 01       	movw	r18, r6
    1370:	0e 94 99 44 	call	0x8932	; 0x8932 <__cmpsf2>
    1374:	87 ff       	sbrs	r24, 7
    1376:	06 c0       	rjmp	.+12     	; 0x1384 <_ZN3PID7ComputeEv+0x166>
    1378:	e9 85       	ldd	r30, Y+9	; 0x09
    137a:	fa 85       	ldd	r31, Y+10	; 0x0a
    137c:	64 a2       	std	Z+36, r6	; 0x24
    137e:	75 a2       	std	Z+37, r7	; 0x25
    1380:	86 a2       	std	Z+38, r8	; 0x26
    1382:	97 a2       	std	Z+39, r9	; 0x27
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    1384:	a2 01       	movw	r20, r4
    1386:	91 01       	movw	r18, r2
    1388:	65 2f       	mov	r22, r21
    138a:	74 2d       	mov	r23, r4
    138c:	83 2f       	mov	r24, r19
    138e:	92 2d       	mov	r25, r2
    1390:	a9 85       	ldd	r26, Y+9	; 0x09
    1392:	ba 85       	ldd	r27, Y+10	; 0x0a
    1394:	1c 96       	adiw	r26, 0x0c	; 12
    1396:	2d 91       	ld	r18, X+
    1398:	3d 91       	ld	r19, X+
    139a:	4d 91       	ld	r20, X+
    139c:	5c 91       	ld	r21, X
    139e:	1f 97       	sbiw	r26, 0x0f	; 15
    13a0:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    13a4:	e9 85       	ldd	r30, Y+9	; 0x09
    13a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    13a8:	24 a1       	ldd	r18, Z+36	; 0x24
    13aa:	35 a1       	ldd	r19, Z+37	; 0x25
    13ac:	46 a1       	ldd	r20, Z+38	; 0x26
    13ae:	57 a1       	ldd	r21, Z+39	; 0x27
    13b0:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    13b4:	5b 01       	movw	r10, r22
    13b6:	6c 01       	movw	r12, r24
	  double input = *myInput;
      double error = *mySetpoint - input;
      ITerm+= (ki * error);
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
    13b8:	69 81       	ldd	r22, Y+1	; 0x01
    13ba:	7a 81       	ldd	r23, Y+2	; 0x02
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	a9 85       	ldd	r26, Y+9	; 0x09
    13c2:	ba 85       	ldd	r27, Y+10	; 0x0a
    13c4:	98 96       	adiw	r26, 0x28	; 40
    13c6:	2d 91       	ld	r18, X+
    13c8:	3d 91       	ld	r19, X+
    13ca:	4d 91       	ld	r20, X+
    13cc:	5c 91       	ld	r21, X
    13ce:	9b 97       	sbiw	r26, 0x2b	; 43
    13d0:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    13d4:	e9 85       	ldd	r30, Y+9	; 0x09
    13d6:	fa 85       	ldd	r31, Y+10	; 0x0a
    13d8:	24 89       	ldd	r18, Z+20	; 0x14
    13da:	35 89       	ldd	r19, Z+21	; 0x15
    13dc:	46 89       	ldd	r20, Z+22	; 0x16
    13de:	57 89       	ldd	r21, Z+23	; 0x17
    13e0:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    13e4:	9b 01       	movw	r18, r22
    13e6:	ac 01       	movw	r20, r24
    13e8:	c6 01       	movw	r24, r12
    13ea:	b5 01       	movw	r22, r10
    13ec:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    13f0:	d6 2e       	mov	r13, r22
    13f2:	c7 2e       	mov	r12, r23
    13f4:	b8 2e       	mov	r11, r24
    13f6:	a9 2e       	mov	r10, r25
      
	  if(output > outMax) output = outMax;
    13f8:	a6 01       	movw	r20, r12
    13fa:	95 01       	movw	r18, r10
    13fc:	65 2f       	mov	r22, r21
    13fe:	74 2f       	mov	r23, r20
    1400:	83 2f       	mov	r24, r19
    1402:	92 2f       	mov	r25, r18
    1404:	f7 01       	movw	r30, r14
    1406:	20 2f       	mov	r18, r16
    1408:	31 2f       	mov	r19, r17
    140a:	4f 2f       	mov	r20, r31
    140c:	5e 2d       	mov	r21, r14
    140e:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <__gesf2>
    1412:	18 16       	cp	r1, r24
    1414:	fc f0       	brlt	.+62     	; 0x1454 <_ZN3PID7ComputeEv+0x236>
      else if(output < outMin) output = outMin;
    1416:	a9 85       	ldd	r26, Y+9	; 0x09
    1418:	ba 85       	ldd	r27, Y+10	; 0x0a
    141a:	9e 96       	adiw	r26, 0x2e	; 46
    141c:	0c 91       	ld	r16, X
    141e:	9e 97       	sbiw	r26, 0x2e	; 46
    1420:	9f 96       	adiw	r26, 0x2f	; 47
    1422:	1c 91       	ld	r17, X
    1424:	9f 97       	sbiw	r26, 0x2f	; 47
    1426:	d0 96       	adiw	r26, 0x30	; 48
    1428:	fc 90       	ld	r15, X
    142a:	d0 97       	sbiw	r26, 0x30	; 48
    142c:	d1 96       	adiw	r26, 0x31	; 49
    142e:	ec 90       	ld	r14, X
    1430:	a6 01       	movw	r20, r12
    1432:	95 01       	movw	r18, r10
    1434:	65 2f       	mov	r22, r21
    1436:	74 2f       	mov	r23, r20
    1438:	83 2f       	mov	r24, r19
    143a:	92 2f       	mov	r25, r18
    143c:	f7 01       	movw	r30, r14
    143e:	20 2f       	mov	r18, r16
    1440:	31 2f       	mov	r19, r17
    1442:	4f 2f       	mov	r20, r31
    1444:	5e 2f       	mov	r21, r30
    1446:	0e 94 99 44 	call	0x8932	; 0x8932 <__cmpsf2>
    144a:	87 fd       	sbrc	r24, 7
    144c:	03 c0       	rjmp	.+6      	; 0x1454 <_ZN3PID7ComputeEv+0x236>
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    144e:	0d 2d       	mov	r16, r13
    1450:	1c 2d       	mov	r17, r12
    1452:	75 01       	movw	r14, r10
      
	  if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	  *myOutput = output;
    1454:	a9 85       	ldd	r26, Y+9	; 0x09
    1456:	ba 85       	ldd	r27, Y+10	; 0x0a
    1458:	5c 96       	adiw	r26, 0x1c	; 28
    145a:	ed 91       	ld	r30, X+
    145c:	fc 91       	ld	r31, X
    145e:	5d 97       	sbiw	r26, 0x1d	; 29
    1460:	97 01       	movw	r18, r14
    1462:	80 2f       	mov	r24, r16
    1464:	91 2f       	mov	r25, r17
    1466:	a3 2f       	mov	r26, r19
    1468:	be 2d       	mov	r27, r14
    146a:	80 83       	st	Z, r24
    146c:	91 83       	std	Z+1, r25	; 0x01
    146e:	a2 83       	std	Z+2, r26	; 0x02
    1470:	b3 83       	std	Z+3, r27	; 0x03
	  
      /*Remember some variables for next time*/
      lastInput = input;
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	ab 81       	ldd	r26, Y+3	; 0x03
    1478:	bc 81       	ldd	r27, Y+4	; 0x04
    147a:	e9 85       	ldd	r30, Y+9	; 0x09
    147c:	fa 85       	ldd	r31, Y+10	; 0x0a
    147e:	80 a7       	std	Z+40, r24	; 0x28
    1480:	91 a7       	std	Z+41, r25	; 0x29
    1482:	a2 a7       	std	Z+42, r26	; 0x2a
    1484:	b3 a7       	std	Z+43, r27	; 0x2b
      lastTime = now;
    1486:	8d 81       	ldd	r24, Y+5	; 0x05
    1488:	9e 81       	ldd	r25, Y+6	; 0x06
    148a:	af 81       	ldd	r26, Y+7	; 0x07
    148c:	b8 85       	ldd	r27, Y+8	; 0x08
    148e:	80 a3       	std	Z+32, r24	; 0x20
    1490:	91 a3       	std	Z+33, r25	; 0x21
    1492:	a2 a3       	std	Z+34, r26	; 0x22
    1494:	b3 a3       	std	Z+35, r27	; 0x23
   }
}
    1496:	2a 96       	adiw	r28, 0x0a	; 10
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	ff 90       	pop	r15
    14ac:	ef 90       	pop	r14
    14ae:	df 90       	pop	r13
    14b0:	cf 90       	pop	r12
    14b2:	bf 90       	pop	r11
    14b4:	af 90       	pop	r10
    14b6:	9f 90       	pop	r9
    14b8:	8f 90       	pop	r8
    14ba:	7f 90       	pop	r7
    14bc:	6f 90       	pop	r6
    14be:	5f 90       	pop	r5
    14c0:	4f 90       	pop	r4
    14c2:	3f 90       	pop	r3
    14c4:	2f 90       	pop	r2
    14c6:	08 95       	ret

000014c8 <_ZN3PID10SetTuningsEddd>:
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
    14c8:	2f 92       	push	r2
    14ca:	3f 92       	push	r3
    14cc:	4f 92       	push	r4
    14ce:	5f 92       	push	r5
    14d0:	6f 92       	push	r6
    14d2:	7f 92       	push	r7
    14d4:	8f 92       	push	r8
    14d6:	9f 92       	push	r9
    14d8:	af 92       	push	r10
    14da:	bf 92       	push	r11
    14dc:	cf 92       	push	r12
    14de:	df 92       	push	r13
    14e0:	ef 92       	push	r14
    14e2:	ff 92       	push	r15
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	ec 01       	movw	r28, r24
    14ee:	2a 01       	movw	r4, r20
    14f0:	3b 01       	movw	r6, r22
    14f2:	48 01       	movw	r8, r16
    14f4:	59 01       	movw	r10, r18
   if (Kp<0 || Ki<0 || Kd<0) return;
    14f6:	cb 01       	movw	r24, r22
    14f8:	ba 01       	movw	r22, r20
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	a9 01       	movw	r20, r18
    1500:	0e 94 99 44 	call	0x8932	; 0x8932 <__cmpsf2>
    1504:	87 fd       	sbrc	r24, 7
    1506:	8a c0       	rjmp	.+276    	; 0x161c <_ZN3PID10SetTuningsEddd+0x154>
    1508:	c5 01       	movw	r24, r10
    150a:	b4 01       	movw	r22, r8
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	a9 01       	movw	r20, r18
    1512:	0e 94 99 44 	call	0x8932	; 0x8932 <__cmpsf2>
    1516:	87 fd       	sbrc	r24, 7
    1518:	81 c0       	rjmp	.+258    	; 0x161c <_ZN3PID10SetTuningsEddd+0x154>
    151a:	c7 01       	movw	r24, r14
    151c:	b6 01       	movw	r22, r12
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	a9 01       	movw	r20, r18
    1524:	0e 94 99 44 	call	0x8932	; 0x8932 <__cmpsf2>
    1528:	87 fd       	sbrc	r24, 7
    152a:	78 c0       	rjmp	.+240    	; 0x161c <_ZN3PID10SetTuningsEddd+0x154>
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    152c:	48 82       	st	Y, r4
    152e:	59 82       	std	Y+1, r5	; 0x01
    1530:	6a 82       	std	Y+2, r6	; 0x02
    1532:	7b 82       	std	Y+3, r7	; 0x03
    1534:	8c 82       	std	Y+4, r8	; 0x04
    1536:	9d 82       	std	Y+5, r9	; 0x05
    1538:	ae 82       	std	Y+6, r10	; 0x06
    153a:	bf 82       	std	Y+7, r11	; 0x07
    153c:	c8 86       	std	Y+8, r12	; 0x08
    153e:	d9 86       	std	Y+9, r13	; 0x09
    1540:	ea 86       	std	Y+10, r14	; 0x0a
    1542:	fb 86       	std	Y+11, r15	; 0x0b
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
    1544:	6c a5       	ldd	r22, Y+44	; 0x2c
    1546:	7d a5       	ldd	r23, Y+45	; 0x2d
    1548:	88 27       	eor	r24, r24
    154a:	77 fd       	sbrc	r23, 7
    154c:	80 95       	com	r24
    154e:	98 2f       	mov	r25, r24
    1550:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <__floatsisf>
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	4a e7       	ldi	r20, 0x7A	; 122
    155a:	54 e4       	ldi	r21, 0x44	; 68
    155c:	0e 94 a0 44 	call	0x8940	; 0x8940 <__divsf3>
    1560:	16 2f       	mov	r17, r22
    1562:	07 2f       	mov	r16, r23
    1564:	38 2e       	mov	r3, r24
    1566:	29 2e       	mov	r2, r25
   kp = Kp;
    1568:	4c 86       	std	Y+12, r4	; 0x0c
    156a:	5d 86       	std	Y+13, r5	; 0x0d
    156c:	6e 86       	std	Y+14, r6	; 0x0e
    156e:	7f 86       	std	Y+15, r7	; 0x0f
   ki = Ki * SampleTimeInSec;
    1570:	c5 01       	movw	r24, r10
    1572:	b4 01       	movw	r22, r8
    1574:	d8 01       	movw	r26, r16
    1576:	f1 01       	movw	r30, r2
    1578:	2b 2f       	mov	r18, r27
    157a:	3a 2f       	mov	r19, r26
    157c:	4f 2f       	mov	r20, r31
    157e:	5e 2f       	mov	r21, r30
    1580:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    1584:	86 2e       	mov	r8, r22
    1586:	b7 2e       	mov	r11, r23
    1588:	a8 2e       	mov	r10, r24
    158a:	99 2e       	mov	r9, r25
    158c:	86 2f       	mov	r24, r22
    158e:	9b 2d       	mov	r25, r11
    1590:	aa 2d       	mov	r26, r10
    1592:	b9 2d       	mov	r27, r9
    1594:	88 8b       	std	Y+16, r24	; 0x10
    1596:	99 8b       	std	Y+17, r25	; 0x11
    1598:	aa 8b       	std	Y+18, r26	; 0x12
    159a:	bb 8b       	std	Y+19, r27	; 0x13
   kd = Kd / SampleTimeInSec;
    159c:	c7 01       	movw	r24, r14
    159e:	b6 01       	movw	r22, r12
    15a0:	d8 01       	movw	r26, r16
    15a2:	f1 01       	movw	r30, r2
    15a4:	2b 2f       	mov	r18, r27
    15a6:	3a 2f       	mov	r19, r26
    15a8:	4f 2f       	mov	r20, r31
    15aa:	5e 2f       	mov	r21, r30
    15ac:	0e 94 a0 44 	call	0x8940	; 0x8940 <__divsf3>
    15b0:	c6 2e       	mov	r12, r22
    15b2:	17 2f       	mov	r17, r23
    15b4:	08 2f       	mov	r16, r24
    15b6:	f9 2e       	mov	r15, r25
    15b8:	86 2f       	mov	r24, r22
    15ba:	91 2f       	mov	r25, r17
    15bc:	a0 2f       	mov	r26, r16
    15be:	bf 2d       	mov	r27, r15
    15c0:	8c 8b       	std	Y+20, r24	; 0x14
    15c2:	9d 8b       	std	Y+21, r25	; 0x15
    15c4:	ae 8b       	std	Y+22, r26	; 0x16
    15c6:	bf 8b       	std	Y+23, r27	; 0x17
 
  if(controllerDirection ==REVERSE)
    15c8:	88 8d       	ldd	r24, Y+24	; 0x18
    15ca:	99 8d       	ldd	r25, Y+25	; 0x19
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	91 05       	cpc	r25, r1
    15d0:	29 f5       	brne	.+74     	; 0x161c <_ZN3PID10SetTuningsEddd+0x154>
   {
      kp = (0 - kp);
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	cb 01       	movw	r24, r22
    15d8:	a3 01       	movw	r20, r6
    15da:	92 01       	movw	r18, r4
    15dc:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    15e0:	6c 87       	std	Y+12, r22	; 0x0c
    15e2:	7d 87       	std	Y+13, r23	; 0x0d
    15e4:	8e 87       	std	Y+14, r24	; 0x0e
    15e6:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	cb 01       	movw	r24, r22
    15ee:	28 2d       	mov	r18, r8
    15f0:	3b 2d       	mov	r19, r11
    15f2:	4a 2d       	mov	r20, r10
    15f4:	59 2d       	mov	r21, r9
    15f6:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    15fa:	68 8b       	std	Y+16, r22	; 0x10
    15fc:	79 8b       	std	Y+17, r23	; 0x11
    15fe:	8a 8b       	std	Y+18, r24	; 0x12
    1600:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	cb 01       	movw	r24, r22
    1608:	2c 2d       	mov	r18, r12
    160a:	31 2f       	mov	r19, r17
    160c:	40 2f       	mov	r20, r16
    160e:	5f 2d       	mov	r21, r15
    1610:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    1614:	6c 8b       	std	Y+20, r22	; 0x14
    1616:	7d 8b       	std	Y+21, r23	; 0x15
    1618:	8e 8b       	std	Y+22, r24	; 0x16
    161a:	9f 8b       	std	Y+23, r25	; 0x17
   }
}
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	1f 91       	pop	r17
    1622:	0f 91       	pop	r16
    1624:	ff 90       	pop	r15
    1626:	ef 90       	pop	r14
    1628:	df 90       	pop	r13
    162a:	cf 90       	pop	r12
    162c:	bf 90       	pop	r11
    162e:	af 90       	pop	r10
    1630:	9f 90       	pop	r9
    1632:	8f 90       	pop	r8
    1634:	7f 90       	pop	r7
    1636:	6f 90       	pop	r6
    1638:	5f 90       	pop	r5
    163a:	4f 90       	pop	r4
    163c:	3f 90       	pop	r3
    163e:	2f 90       	pop	r2
    1640:	08 95       	ret

00001642 <_ZN3PID13SetSampleTimeEi>:
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
    1642:	cf 92       	push	r12
    1644:	df 92       	push	r13
    1646:	ef 92       	push	r14
    1648:	ff 92       	push	r15
    164a:	0f 93       	push	r16
    164c:	1f 93       	push	r17
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	ec 01       	movw	r28, r24
    1654:	6b 01       	movw	r12, r22
   if (NewSampleTime > 0)
    1656:	16 16       	cp	r1, r22
    1658:	17 06       	cpc	r1, r23
    165a:	ec f5       	brge	.+122    	; 0x16d6 <_ZN3PID13SetSampleTimeEi+0x94>
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
    165c:	b6 01       	movw	r22, r12
    165e:	88 27       	eor	r24, r24
    1660:	77 fd       	sbrc	r23, 7
    1662:	80 95       	com	r24
    1664:	98 2f       	mov	r25, r24
    1666:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <__floatsisf>
    166a:	7b 01       	movw	r14, r22
    166c:	8c 01       	movw	r16, r24
    166e:	6c a5       	ldd	r22, Y+44	; 0x2c
    1670:	7d a5       	ldd	r23, Y+45	; 0x2d
    1672:	88 27       	eor	r24, r24
    1674:	77 fd       	sbrc	r23, 7
    1676:	80 95       	com	r24
    1678:	98 2f       	mov	r25, r24
    167a:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <__floatsisf>
    167e:	9b 01       	movw	r18, r22
    1680:	ac 01       	movw	r20, r24
    1682:	c8 01       	movw	r24, r16
    1684:	b7 01       	movw	r22, r14
    1686:	0e 94 a0 44 	call	0x8940	; 0x8940 <__divsf3>
    168a:	16 2f       	mov	r17, r22
    168c:	07 2f       	mov	r16, r23
    168e:	f8 2e       	mov	r15, r24
    1690:	e9 2e       	mov	r14, r25
      ki *= ratio;
    1692:	68 89       	ldd	r22, Y+16	; 0x10
    1694:	79 89       	ldd	r23, Y+17	; 0x11
    1696:	8a 89       	ldd	r24, Y+18	; 0x12
    1698:	9b 89       	ldd	r25, Y+19	; 0x13
    169a:	d8 01       	movw	r26, r16
    169c:	f7 01       	movw	r30, r14
    169e:	2b 2f       	mov	r18, r27
    16a0:	3a 2f       	mov	r19, r26
    16a2:	4f 2f       	mov	r20, r31
    16a4:	5e 2f       	mov	r21, r30
    16a6:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    16aa:	68 8b       	std	Y+16, r22	; 0x10
    16ac:	79 8b       	std	Y+17, r23	; 0x11
    16ae:	8a 8b       	std	Y+18, r24	; 0x12
    16b0:	9b 8b       	std	Y+19, r25	; 0x13
      kd /= ratio;
    16b2:	6c 89       	ldd	r22, Y+20	; 0x14
    16b4:	7d 89       	ldd	r23, Y+21	; 0x15
    16b6:	8e 89       	ldd	r24, Y+22	; 0x16
    16b8:	9f 89       	ldd	r25, Y+23	; 0x17
    16ba:	d8 01       	movw	r26, r16
    16bc:	f7 01       	movw	r30, r14
    16be:	2b 2f       	mov	r18, r27
    16c0:	3a 2f       	mov	r19, r26
    16c2:	4f 2f       	mov	r20, r31
    16c4:	5e 2f       	mov	r21, r30
    16c6:	0e 94 a0 44 	call	0x8940	; 0x8940 <__divsf3>
    16ca:	6c 8b       	std	Y+20, r22	; 0x14
    16cc:	7d 8b       	std	Y+21, r23	; 0x15
    16ce:	8e 8b       	std	Y+22, r24	; 0x16
    16d0:	9f 8b       	std	Y+23, r25	; 0x17
      SampleTime = (unsigned long)NewSampleTime;
    16d2:	dd a6       	std	Y+45, r13	; 0x2d
    16d4:	cc a6       	std	Y+44, r12	; 0x2c
   }
}
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	08 95       	ret

000016e8 <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
    16e8:	4f 92       	push	r4
    16ea:	5f 92       	push	r5
    16ec:	6f 92       	push	r6
    16ee:	7f 92       	push	r7
    16f0:	8f 92       	push	r8
    16f2:	9f 92       	push	r9
    16f4:	af 92       	push	r10
    16f6:	bf 92       	push	r11
    16f8:	cf 92       	push	r12
    16fa:	df 92       	push	r13
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	ec 01       	movw	r28, r24
    170a:	5a 01       	movw	r10, r20
    170c:	6b 01       	movw	r12, r22
    170e:	78 01       	movw	r14, r16
    1710:	89 01       	movw	r16, r18
   if(Min >= Max) return;
    1712:	cb 01       	movw	r24, r22
    1714:	ba 01       	movw	r22, r20
    1716:	a8 01       	movw	r20, r16
    1718:	97 01       	movw	r18, r14
    171a:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <__gesf2>
    171e:	87 ff       	sbrs	r24, 7
    1720:	4e c0       	rjmp	.+156    	; 0x17be <_ZN3PID15SetOutputLimitsEdd+0xd6>
   outMin = Min;
    1722:	ae a6       	std	Y+46, r10	; 0x2e
    1724:	bf a6       	std	Y+47, r11	; 0x2f
    1726:	c8 aa       	std	Y+48, r12	; 0x30
    1728:	d9 aa       	std	Y+49, r13	; 0x31
   outMax = Max;
    172a:	ea aa       	std	Y+50, r14	; 0x32
    172c:	fb aa       	std	Y+51, r15	; 0x33
    172e:	0c ab       	std	Y+52, r16	; 0x34
    1730:	1d ab       	std	Y+53, r17	; 0x35
 
   if(inAuto)
    1732:	8e a9       	ldd	r24, Y+54	; 0x36
    1734:	88 23       	and	r24, r24
    1736:	09 f4       	brne	.+2      	; 0x173a <_ZN3PID15SetOutputLimitsEdd+0x52>
    1738:	42 c0       	rjmp	.+132    	; 0x17be <_ZN3PID15SetOutputLimitsEdd+0xd6>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    173a:	8c 8c       	ldd	r8, Y+28	; 0x1c
    173c:	9d 8c       	ldd	r9, Y+29	; 0x1d
    173e:	f4 01       	movw	r30, r8
    1740:	40 80       	ld	r4, Z
    1742:	51 80       	ldd	r5, Z+1	; 0x01
    1744:	62 80       	ldd	r6, Z+2	; 0x02
    1746:	73 80       	ldd	r7, Z+3	; 0x03
    1748:	c3 01       	movw	r24, r6
    174a:	b2 01       	movw	r22, r4
    174c:	a8 01       	movw	r20, r16
    174e:	97 01       	movw	r18, r14
    1750:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <__gesf2>
    1754:	18 16       	cp	r1, r24
    1756:	34 f4       	brge	.+12     	; 0x1764 <_ZN3PID15SetOutputLimitsEdd+0x7c>
    1758:	f4 01       	movw	r30, r8
    175a:	e0 82       	st	Z, r14
    175c:	f1 82       	std	Z+1, r15	; 0x01
    175e:	02 83       	std	Z+2, r16	; 0x02
    1760:	13 83       	std	Z+3, r17	; 0x03
    1762:	0d c0       	rjmp	.+26     	; 0x177e <_ZN3PID15SetOutputLimitsEdd+0x96>
	   else if(*myOutput < outMin) *myOutput = outMin;
    1764:	c3 01       	movw	r24, r6
    1766:	b2 01       	movw	r22, r4
    1768:	a6 01       	movw	r20, r12
    176a:	95 01       	movw	r18, r10
    176c:	0e 94 99 44 	call	0x8932	; 0x8932 <__cmpsf2>
    1770:	87 ff       	sbrs	r24, 7
    1772:	05 c0       	rjmp	.+10     	; 0x177e <_ZN3PID15SetOutputLimitsEdd+0x96>
    1774:	f4 01       	movw	r30, r8
    1776:	a0 82       	st	Z, r10
    1778:	b1 82       	std	Z+1, r11	; 0x01
    177a:	c2 82       	std	Z+2, r12	; 0x02
    177c:	d3 82       	std	Z+3, r13	; 0x03
	 
	   if(ITerm > outMax) ITerm= outMax;
    177e:	ac a0       	ldd	r10, Y+36	; 0x24
    1780:	bd a0       	ldd	r11, Y+37	; 0x25
    1782:	ce a0       	ldd	r12, Y+38	; 0x26
    1784:	df a0       	ldd	r13, Y+39	; 0x27
    1786:	ea a8       	ldd	r14, Y+50	; 0x32
    1788:	fb a8       	ldd	r15, Y+51	; 0x33
    178a:	0c a9       	ldd	r16, Y+52	; 0x34
    178c:	1d a9       	ldd	r17, Y+53	; 0x35
    178e:	c6 01       	movw	r24, r12
    1790:	b5 01       	movw	r22, r10
    1792:	a8 01       	movw	r20, r16
    1794:	97 01       	movw	r18, r14
    1796:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <__gesf2>
    179a:	18 16       	cp	r1, r24
    179c:	64 f0       	brlt	.+24     	; 0x17b6 <_ZN3PID15SetOutputLimitsEdd+0xce>
	   else if(ITerm < outMin) ITerm= outMin;
    179e:	ee a4       	ldd	r14, Y+46	; 0x2e
    17a0:	ff a4       	ldd	r15, Y+47	; 0x2f
    17a2:	08 a9       	ldd	r16, Y+48	; 0x30
    17a4:	19 a9       	ldd	r17, Y+49	; 0x31
    17a6:	c6 01       	movw	r24, r12
    17a8:	b5 01       	movw	r22, r10
    17aa:	a8 01       	movw	r20, r16
    17ac:	97 01       	movw	r18, r14
    17ae:	0e 94 99 44 	call	0x8932	; 0x8932 <__cmpsf2>
    17b2:	87 ff       	sbrs	r24, 7
    17b4:	04 c0       	rjmp	.+8      	; 0x17be <_ZN3PID15SetOutputLimitsEdd+0xd6>
    17b6:	ec a2       	std	Y+36, r14	; 0x24
    17b8:	fd a2       	std	Y+37, r15	; 0x25
    17ba:	0e a3       	std	Y+38, r16	; 0x26
    17bc:	1f a3       	std	Y+39, r17	; 0x27
   }
}
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	1f 91       	pop	r17
    17c4:	0f 91       	pop	r16
    17c6:	ff 90       	pop	r15
    17c8:	ef 90       	pop	r14
    17ca:	df 90       	pop	r13
    17cc:	cf 90       	pop	r12
    17ce:	bf 90       	pop	r11
    17d0:	af 90       	pop	r10
    17d2:	9f 90       	pop	r9
    17d4:	8f 90       	pop	r8
    17d6:	7f 90       	pop	r7
    17d8:	6f 90       	pop	r6
    17da:	5f 90       	pop	r5
    17dc:	4f 90       	pop	r4
    17de:	08 95       	ret

000017e0 <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
    17e0:	af 92       	push	r10
    17e2:	bf 92       	push	r11
    17e4:	cf 92       	push	r12
    17e6:	df 92       	push	r13
    17e8:	ef 92       	push	r14
    17ea:	ff 92       	push	r15
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	ec 01       	movw	r28, r24
   ITerm = *myOutput;
    17f6:	ec 8d       	ldd	r30, Y+28	; 0x1c
    17f8:	fd 8d       	ldd	r31, Y+29	; 0x1d
    17fa:	e0 80       	ld	r14, Z
    17fc:	f1 80       	ldd	r15, Z+1	; 0x01
    17fe:	02 81       	ldd	r16, Z+2	; 0x02
    1800:	13 81       	ldd	r17, Z+3	; 0x03
    1802:	ec a2       	std	Y+36, r14	; 0x24
    1804:	fd a2       	std	Y+37, r15	; 0x25
    1806:	0e a3       	std	Y+38, r16	; 0x26
    1808:	1f a3       	std	Y+39, r17	; 0x27
   lastInput = *myInput;
    180a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    180c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    180e:	80 81       	ld	r24, Z
    1810:	91 81       	ldd	r25, Z+1	; 0x01
    1812:	a2 81       	ldd	r26, Z+2	; 0x02
    1814:	b3 81       	ldd	r27, Z+3	; 0x03
    1816:	88 a7       	std	Y+40, r24	; 0x28
    1818:	99 a7       	std	Y+41, r25	; 0x29
    181a:	aa a7       	std	Y+42, r26	; 0x2a
    181c:	bb a7       	std	Y+43, r27	; 0x2b
   if(ITerm > outMax) ITerm = outMax;
    181e:	aa a8       	ldd	r10, Y+50	; 0x32
    1820:	bb a8       	ldd	r11, Y+51	; 0x33
    1822:	cc a8       	ldd	r12, Y+52	; 0x34
    1824:	dd a8       	ldd	r13, Y+53	; 0x35
    1826:	c8 01       	movw	r24, r16
    1828:	b7 01       	movw	r22, r14
    182a:	a6 01       	movw	r20, r12
    182c:	95 01       	movw	r18, r10
    182e:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <__gesf2>
    1832:	18 16       	cp	r1, r24
    1834:	64 f0       	brlt	.+24     	; 0x184e <_ZN3PID10InitializeEv+0x6e>
   else if(ITerm < outMin) ITerm = outMin;
    1836:	ae a4       	ldd	r10, Y+46	; 0x2e
    1838:	bf a4       	ldd	r11, Y+47	; 0x2f
    183a:	c8 a8       	ldd	r12, Y+48	; 0x30
    183c:	d9 a8       	ldd	r13, Y+49	; 0x31
    183e:	c8 01       	movw	r24, r16
    1840:	b7 01       	movw	r22, r14
    1842:	a6 01       	movw	r20, r12
    1844:	95 01       	movw	r18, r10
    1846:	0e 94 99 44 	call	0x8932	; 0x8932 <__cmpsf2>
    184a:	87 ff       	sbrs	r24, 7
    184c:	04 c0       	rjmp	.+8      	; 0x1856 <_ZN3PID10InitializeEv+0x76>
    184e:	ac a2       	std	Y+36, r10	; 0x24
    1850:	bd a2       	std	Y+37, r11	; 0x25
    1852:	ce a2       	std	Y+38, r12	; 0x26
    1854:	df a2       	std	Y+39, r13	; 0x27
}
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	1f 91       	pop	r17
    185c:	0f 91       	pop	r16
    185e:	ff 90       	pop	r15
    1860:	ef 90       	pop	r14
    1862:	df 90       	pop	r13
    1864:	cf 90       	pop	r12
    1866:	bf 90       	pop	r11
    1868:	af 90       	pop	r10
    186a:	08 95       	ret

0000186c <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/ 
void PID::SetMode(int Mode)
{
    186c:	1f 93       	push	r17
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    1874:	11 e0       	ldi	r17, 0x01	; 1
    1876:	61 30       	cpi	r22, 0x01	; 1
    1878:	71 05       	cpc	r23, r1
    187a:	09 f0       	breq	.+2      	; 0x187e <_ZN3PID7SetModeEi+0x12>
    187c:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto == !inAuto)
    187e:	8e a9       	ldd	r24, Y+54	; 0x36
    1880:	91 e0       	ldi	r25, 0x01	; 1
    1882:	89 27       	eor	r24, r25
    1884:	18 17       	cp	r17, r24
    1886:	19 f4       	brne	.+6      	; 0x188e <_ZN3PID7SetModeEi+0x22>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    1888:	ce 01       	movw	r24, r28
    188a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    188e:	1e ab       	std	Y+54, r17	; 0x36
}
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	08 95       	ret

00001898 <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    1898:	0f 93       	push	r16
    189a:	1f 93       	push	r17
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	ec 01       	movw	r28, r24
    18a2:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    18a4:	8e a9       	ldd	r24, Y+54	; 0x36
    18a6:	88 23       	and	r24, r24
    18a8:	61 f1       	breq	.+88     	; 0x1902 <_ZN3PID22SetControllerDirectionEi+0x6a>
    18aa:	88 8d       	ldd	r24, Y+24	; 0x18
    18ac:	99 8d       	ldd	r25, Y+25	; 0x19
    18ae:	68 17       	cp	r22, r24
    18b0:	79 07       	cpc	r23, r25
    18b2:	39 f1       	breq	.+78     	; 0x1902 <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	  kp = (0 - kp);
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	cb 01       	movw	r24, r22
    18ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    18bc:	3d 85       	ldd	r19, Y+13	; 0x0d
    18be:	4e 85       	ldd	r20, Y+14	; 0x0e
    18c0:	5f 85       	ldd	r21, Y+15	; 0x0f
    18c2:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    18c6:	6c 87       	std	Y+12, r22	; 0x0c
    18c8:	7d 87       	std	Y+13, r23	; 0x0d
    18ca:	8e 87       	std	Y+14, r24	; 0x0e
    18cc:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	cb 01       	movw	r24, r22
    18d4:	28 89       	ldd	r18, Y+16	; 0x10
    18d6:	39 89       	ldd	r19, Y+17	; 0x11
    18d8:	4a 89       	ldd	r20, Y+18	; 0x12
    18da:	5b 89       	ldd	r21, Y+19	; 0x13
    18dc:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    18e0:	68 8b       	std	Y+16, r22	; 0x10
    18e2:	79 8b       	std	Y+17, r23	; 0x11
    18e4:	8a 8b       	std	Y+18, r24	; 0x12
    18e6:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	70 e0       	ldi	r23, 0x00	; 0
    18ec:	cb 01       	movw	r24, r22
    18ee:	2c 89       	ldd	r18, Y+20	; 0x14
    18f0:	3d 89       	ldd	r19, Y+21	; 0x15
    18f2:	4e 89       	ldd	r20, Y+22	; 0x16
    18f4:	5f 89       	ldd	r21, Y+23	; 0x17
    18f6:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    18fa:	6c 8b       	std	Y+20, r22	; 0x14
    18fc:	7d 8b       	std	Y+21, r23	; 0x15
    18fe:	8e 8b       	std	Y+22, r24	; 0x16
    1900:	9f 8b       	std	Y+23, r25	; 0x17
   }   
   controllerDirection = Direction;
    1902:	19 8f       	std	Y+25, r17	; 0x19
    1904:	08 8f       	std	Y+24, r16	; 0x18
}
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	08 95       	ret

00001910 <_ZN3PIDC1EPdS0_S0_dddi>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up 
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    1910:	2f 92       	push	r2
    1912:	3f 92       	push	r3
    1914:	4f 92       	push	r4
    1916:	5f 92       	push	r5
    1918:	6f 92       	push	r6
    191a:	7f 92       	push	r7
    191c:	8f 92       	push	r8
    191e:	9f 92       	push	r9
    1920:	af 92       	push	r10
    1922:	bf 92       	push	r11
    1924:	cf 92       	push	r12
    1926:	df 92       	push	r13
    1928:	ef 92       	push	r14
    192a:	ff 92       	push	r15
    192c:	0f 93       	push	r16
    192e:	1f 93       	push	r17
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <_ZN3PIDC1EPdS0_S0_dddi+0x26>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <_ZN3PIDC1EPdS0_S0_dddi+0x28>
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	4c 01       	movw	r8, r24
    193e:	7a 83       	std	Y+2, r23	; 0x02
    1940:	69 83       	std	Y+1, r22	; 0x01
    1942:	1a 01       	movw	r2, r20
    1944:	3c 83       	std	Y+4, r19	; 0x04
    1946:	2b 83       	std	Y+3, r18	; 0x03
    1948:	27 01       	movw	r4, r14
    194a:	38 01       	movw	r6, r16
        double Kp, double Ki, double Kd, int ControllerDirection)
{
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	50 e0       	ldi	r21, 0x00	; 0
    1950:	ba 01       	movw	r22, r20
    1952:	00 e0       	ldi	r16, 0x00	; 0
    1954:	10 e0       	ldi	r17, 0x00	; 0
    1956:	2f e7       	ldi	r18, 0x7F	; 127
    1958:	33 e4       	ldi	r19, 0x43	; 67
    195a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN3PID15SetOutputLimitsEdd>
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    195e:	84 e6       	ldi	r24, 0x64	; 100
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	f4 01       	movw	r30, r8
    1964:	95 a7       	std	Z+45, r25	; 0x2d
    1966:	84 a7       	std	Z+44, r24	; 0x2c

    PID::SetControllerDirection(ControllerDirection);
    1968:	c4 01       	movw	r24, r8
    196a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    196c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    196e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd);
    1972:	c4 01       	movw	r24, r8
    1974:	b3 01       	movw	r22, r6
    1976:	a2 01       	movw	r20, r4
    1978:	96 01       	movw	r18, r12
    197a:	85 01       	movw	r16, r10
    197c:	c9 8c       	ldd	r12, Y+25	; 0x19
    197e:	da 8c       	ldd	r13, Y+26	; 0x1a
    1980:	eb 8c       	ldd	r14, Y+27	; 0x1b
    1982:	fc 8c       	ldd	r15, Y+28	; 0x1c
    1984:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_ZN3PID10SetTuningsEddd>

    lastTime = millis()-SampleTime;				
    1988:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    198c:	f4 01       	movw	r30, r8
    198e:	24 a5       	ldd	r18, Z+44	; 0x2c
    1990:	35 a5       	ldd	r19, Z+45	; 0x2d
    1992:	44 27       	eor	r20, r20
    1994:	37 fd       	sbrc	r19, 7
    1996:	40 95       	com	r20
    1998:	54 2f       	mov	r21, r20
    199a:	62 1b       	sub	r22, r18
    199c:	73 0b       	sbc	r23, r19
    199e:	84 0b       	sbc	r24, r20
    19a0:	95 0b       	sbc	r25, r21
    19a2:	60 a3       	std	Z+32, r22	; 0x20
    19a4:	71 a3       	std	Z+33, r23	; 0x21
    19a6:	82 a3       	std	Z+34, r24	; 0x22
    19a8:	93 a3       	std	Z+35, r25	; 0x23
    inAuto = false;
    19aa:	16 aa       	std	Z+54, r1	; 0x36
    myOutput = Output;
    19ac:	35 8e       	std	Z+29, r3	; 0x1d
    19ae:	24 8e       	std	Z+28, r2	; 0x1c
    myInput = Input;
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	9a 81       	ldd	r25, Y+2	; 0x02
    19b4:	93 8f       	std	Z+27, r25	; 0x1b
    19b6:	82 8f       	std	Z+26, r24	; 0x1a
    mySetpoint = Setpoint;
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	9c 81       	ldd	r25, Y+4	; 0x04
    19bc:	97 8f       	std	Z+31, r25	; 0x1f
    19be:	86 8f       	std	Z+30, r24	; 0x1e
		
}
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	ff 90       	pop	r15
    19d2:	ef 90       	pop	r14
    19d4:	df 90       	pop	r13
    19d6:	cf 90       	pop	r12
    19d8:	bf 90       	pop	r11
    19da:	af 90       	pop	r10
    19dc:	9f 90       	pop	r9
    19de:	8f 90       	pop	r8
    19e0:	7f 90       	pop	r7
    19e2:	6f 90       	pop	r6
    19e4:	5f 90       	pop	r5
    19e6:	4f 90       	pop	r4
    19e8:	3f 90       	pop	r3
    19ea:	2f 90       	pop	r2
    19ec:	08 95       	ret

000019ee <_ZN3PID7GetModeEv>:
 * purposes.  this are the functions the PID Front-end uses for example
 ******************************************************************************/
double PID::GetKp(){ return  dispKp; }
double PID::GetKi(){ return  dispKi;}
double PID::GetKd(){ return  dispKd;}
int PID::GetMode(){ return  inAuto ? AUTOMATIC : MANUAL;}
    19ee:	fc 01       	movw	r30, r24
    19f0:	86 a9       	ldd	r24, Z+54	; 0x36
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	08 95       	ret

000019f6 <_ZN4NMEAC1Ei>:

//
// constructor method
//

NMEA::NMEA(int connect)
    19f6:	ef 92       	push	r14
    19f8:	ff 92       	push	r15
    19fa:	0f 93       	push	r16
    19fc:	1f 93       	push	r17
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	fc 01       	movw	r30, r24
{
	// private properties
	_gprmc_only = connect;
    1a04:	71 83       	std	Z+1, r23	; 0x01
    1a06:	60 83       	st	Z, r22
	_gprmc_utc = 0.0;
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	a9 01       	movw	r20, r18
    1a0e:	22 83       	std	Z+2, r18	; 0x02
    1a10:	33 83       	std	Z+3, r19	; 0x03
    1a12:	44 83       	std	Z+4, r20	; 0x04
    1a14:	55 83       	std	Z+5, r21	; 0x05
	_gprmc_status = 'V';
    1a16:	86 e5       	ldi	r24, 0x56	; 86
    1a18:	86 83       	std	Z+6, r24	; 0x06
	_gprmc_lat = 0.0;
    1a1a:	27 83       	std	Z+7, r18	; 0x07
    1a1c:	30 87       	std	Z+8, r19	; 0x08
    1a1e:	41 87       	std	Z+9, r20	; 0x09
    1a20:	52 87       	std	Z+10, r21	; 0x0a
	_gprmc_long = 0.0;
    1a22:	23 87       	std	Z+11, r18	; 0x0b
    1a24:	34 87       	std	Z+12, r19	; 0x0c
    1a26:	45 87       	std	Z+13, r20	; 0x0d
    1a28:	56 87       	std	Z+14, r21	; 0x0e
	_gprmc_speed = 0.0;
    1a2a:	27 87       	std	Z+15, r18	; 0x0f
    1a2c:	30 8b       	std	Z+16, r19	; 0x10
    1a2e:	41 8b       	std	Z+17, r20	; 0x11
    1a30:	52 8b       	std	Z+18, r21	; 0x12
	_gprmc_angle = 0.0;
    1a32:	23 8b       	std	Z+19, r18	; 0x13
    1a34:	34 8b       	std	Z+20, r19	; 0x14
    1a36:	45 8b       	std	Z+21, r20	; 0x15
    1a38:	56 8b       	std	Z+22, r21	; 0x16
	_terms = 0;
    1a3a:	df 01       	movw	r26, r30
    1a3c:	a7 54       	subi	r26, 0x47	; 71
    1a3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a40:	1d 92       	st	X+, r1
    1a42:	1c 92       	st	X, r1
	n = 0;
    1a44:	df 01       	movw	r26, r30
    1a46:	a5 5a       	subi	r26, 0xA5	; 165
    1a48:	be 4f       	sbci	r27, 0xFE	; 254
    1a4a:	1d 92       	st	X+, r1
    1a4c:	1c 92       	st	X, r1
	_state = 0;
    1a4e:	df 01       	movw	r26, r30
    1a50:	a1 5a       	subi	r26, 0xA1	; 161
    1a52:	be 4f       	sbci	r27, 0xFE	; 254
    1a54:	1d 92       	st	X+, r1
    1a56:	1c 92       	st	X, r1
	_parity = 0;
    1a58:	df 01       	movw	r26, r30
    1a5a:	af 59       	subi	r26, 0x9F	; 159
    1a5c:	be 4f       	sbci	r27, 0xFE	; 254
    1a5e:	1d 92       	st	X+, r1
    1a60:	1c 92       	st	X, r1
	_nt = 0;
    1a62:	df 01       	movw	r26, r30
    1a64:	ad 59       	subi	r26, 0x9D	; 157
    1a66:	be 4f       	sbci	r27, 0xFE	; 254
    1a68:	1d 92       	st	X+, r1
    1a6a:	1c 92       	st	X, r1

	f_sentence[0] = 0;
    1a6c:	17 8a       	std	Z+23, r1	; 0x17
	f_terms = 0;
    1a6e:	df 01       	movw	r26, r30
    1a70:	a9 54       	subi	r26, 0x49	; 73
    1a72:	bf 4f       	sbci	r27, 0xFF	; 255
    1a74:	1d 92       	st	X+, r1
    1a76:	1c 92       	st	X, r1

//
// constructor method
//

NMEA::NMEA(int connect)
    1a78:	ef 01       	movw	r28, r30
    1a7a:	c1 5e       	subi	r28, 0xE1	; 225
    1a7c:	de 4f       	sbci	r29, 0xFE	; 254
    1a7e:	8b e7       	ldi	r24, 0x7B	; 123
    1a80:	e8 2e       	mov	r14, r24
    1a82:	f1 2c       	mov	r15, r1
    1a84:	ee 0e       	add	r14, r30
    1a86:	ff 1e       	adc	r15, r31
    1a88:	0e e1       	ldi	r16, 0x1E	; 30
    1a8a:	10 e0       	ldi	r17, 0x00	; 0

	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
    1a8c:	8f e0       	ldi	r24, 0x0F	; 15
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 94 00 48 	call	0x9000	; 0x9000 <malloc>
    1a94:	88 83       	st	Y, r24
    1a96:	99 83       	std	Y+1, r25	; 0x01
    1a98:	22 96       	adiw	r28, 0x02	; 2
    f_term[t] = (char*) malloc (15 * sizeof(char));
    1a9a:	8f e0       	ldi	r24, 0x0F	; 15
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0e 94 00 48 	call	0x9000	; 0x9000 <malloc>
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	d7 01       	movw	r26, r14
    1aa6:	8d 93       	st	X+, r24
    1aa8:	9d 93       	st	X+, r25
    1aaa:	7d 01       	movw	r14, r26
    (f_term[t])[0] = 0;
    1aac:	10 82       	st	Z, r1
    1aae:	01 50       	subi	r16, 0x01	; 1
    1ab0:	10 40       	sbci	r17, 0x00	; 0
	_nt = 0;

	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    1ab2:	61 f7       	brne	.-40     	; 0x1a8c <_ZN4NMEAC1Ei+0x96>
    _term[t] = (char*) malloc (15 * sizeof(char));
    f_term[t] = (char*) malloc (15 * sizeof(char));
    (f_term[t])[0] = 0;
  }
}
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	ff 90       	pop	r15
    1abe:	ef 90       	pop	r14
    1ac0:	08 95       	ret

00001ac2 <_ZN4NMEA12gprmc_statusEv>:
}

char NMEA::gprmc_status() {
	// returns status character of last-known GPRMC sentence ('A' or 'V')
	return _gprmc_status;
}
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	86 81       	ldd	r24, Z+6	; 0x06
    1ac6:	08 95       	ret

00001ac8 <_ZN4NMEA14gprmc_latitudeEv>:

float NMEA::gprmc_latitude() {
    1ac8:	fc 01       	movw	r30, r24
	// returns signed degree-decimal latitude value of last-known GPRMC position
	return _gprmc_lat;
}
    1aca:	57 81       	ldd	r21, Z+7	; 0x07
    1acc:	40 85       	ldd	r20, Z+8	; 0x08
    1ace:	31 85       	ldd	r19, Z+9	; 0x09
    1ad0:	22 85       	ldd	r18, Z+10	; 0x0a
    1ad2:	65 2f       	mov	r22, r21
    1ad4:	74 2f       	mov	r23, r20
    1ad6:	83 2f       	mov	r24, r19
    1ad8:	92 2f       	mov	r25, r18
    1ada:	08 95       	ret

00001adc <_ZN4NMEA15gprmc_longitudeEv>:

float NMEA::gprmc_longitude() {
    1adc:	fc 01       	movw	r30, r24
	// returns signed degree-decimal longitude value of last-known GPRMC position
	return _gprmc_long;
}
    1ade:	53 85       	ldd	r21, Z+11	; 0x0b
    1ae0:	44 85       	ldd	r20, Z+12	; 0x0c
    1ae2:	35 85       	ldd	r19, Z+13	; 0x0d
    1ae4:	26 85       	ldd	r18, Z+14	; 0x0e
    1ae6:	65 2f       	mov	r22, r21
    1ae8:	74 2f       	mov	r23, r20
    1aea:	83 2f       	mov	r24, r19
    1aec:	92 2f       	mov	r25, r18
    1aee:	08 95       	ret

00001af0 <_ZN4NMEA8sentenceEv>:
//	return rc;
//}

char* NMEA::sentence() {
	// returns last received full sentence as zero terminated string
  return f_sentence;
    1af0:	9c 01       	movw	r18, r24
    1af2:	29 5e       	subi	r18, 0xE9	; 233
    1af4:	3f 4f       	sbci	r19, 0xFF	; 255
}
    1af6:	c9 01       	movw	r24, r18
    1af8:	08 95       	ret

00001afa <_ZN4NMEA16distance_betweenEfffff>:

//
// private methods
//

float NMEA::distance_between (float lat1, float long1, float lat2, float long2, float units_per_meter) {
    1afa:	2f 92       	push	r2
    1afc:	3f 92       	push	r3
    1afe:	4f 92       	push	r4
    1b00:	5f 92       	push	r5
    1b02:	6f 92       	push	r6
    1b04:	7f 92       	push	r7
    1b06:	8f 92       	push	r8
    1b08:	9f 92       	push	r9
    1b0a:	af 92       	push	r10
    1b0c:	bf 92       	push	r11
    1b0e:	cf 92       	push	r12
    1b10:	df 92       	push	r13
    1b12:	ef 92       	push	r14
    1b14:	ff 92       	push	r15
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	60 97       	sbiw	r28, 0x10	; 16
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	49 83       	std	Y+1, r20	; 0x01
    1b30:	5a 83       	std	Y+2, r21	; 0x02
    1b32:	6b 83       	std	Y+3, r22	; 0x03
    1b34:	7c 83       	std	Y+4, r23	; 0x04
    1b36:	c9 01       	movw	r24, r18
    1b38:	b8 01       	movw	r22, r16
    1b3a:	26 01       	movw	r4, r12
    1b3c:	37 01       	movw	r6, r14
    1b3e:	a5 01       	movw	r20, r10
    1b40:	94 01       	movw	r18, r8
	// returns distance in meters between two positions, both specified
	// as signed decimal-degrees latitude and longitude. Uses great-circle
	// distance computation for hypothised sphere of radius 6372795 meters.
	// Because Earth is no exact sphere, rounding errors may be upto 0.5%.
  float delta = radians(long1-long2);
    1b42:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    1b46:	25 e3       	ldi	r18, 0x35	; 53
    1b48:	3a ef       	ldi	r19, 0xFA	; 250
    1b4a:	4e e8       	ldi	r20, 0x8E	; 142
    1b4c:	5c e3       	ldi	r21, 0x3C	; 60
    1b4e:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    1b52:	d6 2e       	mov	r13, r22
    1b54:	e7 2e       	mov	r14, r23
    1b56:	8c 01       	movw	r16, r24
  float sdlong = sin(delta);
    1b58:	76 2f       	mov	r23, r22
    1b5a:	27 2f       	mov	r18, r23
    1b5c:	3e 2d       	mov	r19, r14
    1b5e:	40 2f       	mov	r20, r16
    1b60:	51 2f       	mov	r21, r17
    1b62:	ca 01       	movw	r24, r20
    1b64:	b9 01       	movw	r22, r18
    1b66:	0e 94 0a 47 	call	0x8e14	; 0x8e14 <sin>
    1b6a:	6d 83       	std	Y+5, r22	; 0x05
    1b6c:	7e 83       	std	Y+6, r23	; 0x06
    1b6e:	8f 83       	std	Y+7, r24	; 0x07
    1b70:	98 87       	std	Y+8, r25	; 0x08
  float cdlong = cos(delta);
    1b72:	6d 2d       	mov	r22, r13
    1b74:	7e 2d       	mov	r23, r14
    1b76:	80 2f       	mov	r24, r16
    1b78:	91 2f       	mov	r25, r17
    1b7a:	0e 94 9d 44 	call	0x893a	; 0x893a <cos>
    1b7e:	69 87       	std	Y+9, r22	; 0x09
    1b80:	7a 87       	std	Y+10, r23	; 0x0a
    1b82:	8b 87       	std	Y+11, r24	; 0x0b
    1b84:	9c 87       	std	Y+12, r25	; 0x0c
  lat1 = radians(lat1);
    1b86:	69 81       	ldd	r22, Y+1	; 0x01
    1b88:	7a 81       	ldd	r23, Y+2	; 0x02
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8e:	25 e3       	ldi	r18, 0x35	; 53
    1b90:	3a ef       	ldi	r19, 0xFA	; 250
    1b92:	4e e8       	ldi	r20, 0x8E	; 142
    1b94:	5c e3       	ldi	r21, 0x3C	; 60
    1b96:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    1b9a:	8b 01       	movw	r16, r22
    1b9c:	a8 2e       	mov	r10, r24
    1b9e:	e9 2e       	mov	r14, r25
  lat2 = radians(lat2);
    1ba0:	c3 01       	movw	r24, r6
    1ba2:	b2 01       	movw	r22, r4
    1ba4:	25 e3       	ldi	r18, 0x35	; 53
    1ba6:	3a ef       	ldi	r19, 0xFA	; 250
    1ba8:	4e e8       	ldi	r20, 0x8E	; 142
    1baa:	5c e3       	ldi	r21, 0x3C	; 60
    1bac:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    1bb0:	96 2e       	mov	r9, r22
    1bb2:	b7 2e       	mov	r11, r23
    1bb4:	6c 01       	movw	r12, r24
  float slat1 = sin(lat1);
    1bb6:	60 2f       	mov	r22, r16
    1bb8:	71 2f       	mov	r23, r17
    1bba:	8a 2d       	mov	r24, r10
    1bbc:	9e 2d       	mov	r25, r14
    1bbe:	0e 94 0a 47 	call	0x8e14	; 0x8e14 <sin>
    1bc2:	69 83       	std	Y+1, r22	; 0x01
    1bc4:	7a 83       	std	Y+2, r23	; 0x02
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
    1bc8:	9c 83       	std	Y+4, r25	; 0x04
  float clat1 = cos(lat1);
    1bca:	60 2f       	mov	r22, r16
    1bcc:	71 2f       	mov	r23, r17
    1bce:	8a 2d       	mov	r24, r10
    1bd0:	9e 2d       	mov	r25, r14
    1bd2:	0e 94 9d 44 	call	0x893a	; 0x893a <cos>
    1bd6:	6d 87       	std	Y+13, r22	; 0x0d
    1bd8:	7e 87       	std	Y+14, r23	; 0x0e
    1bda:	8f 87       	std	Y+15, r24	; 0x0f
    1bdc:	98 8b       	std	Y+16, r25	; 0x10
  float slat2 = sin(lat2);
    1bde:	69 2d       	mov	r22, r9
    1be0:	7b 2d       	mov	r23, r11
    1be2:	8c 2d       	mov	r24, r12
    1be4:	9d 2d       	mov	r25, r13
    1be6:	0e 94 0a 47 	call	0x8e14	; 0x8e14 <sin>
    1bea:	2b 01       	movw	r4, r22
    1bec:	3c 01       	movw	r6, r24
  float clat2 = cos(lat2);
    1bee:	69 2d       	mov	r22, r9
    1bf0:	7b 2d       	mov	r23, r11
    1bf2:	8c 2d       	mov	r24, r12
    1bf4:	9d 2d       	mov	r25, r13
    1bf6:	0e 94 9d 44 	call	0x893a	; 0x893a <cos>
    1bfa:	7b 01       	movw	r14, r22
    1bfc:	8c 01       	movw	r16, r24
  delta = (clat1 * slat2) - (slat1 * clat2 * cdlong);
    1bfe:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c00:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c04:	98 89       	ldd	r25, Y+16	; 0x10
    1c06:	a3 01       	movw	r20, r6
    1c08:	92 01       	movw	r18, r4
    1c0a:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    1c0e:	5b 01       	movw	r10, r22
    1c10:	6c 01       	movw	r12, r24
    1c12:	69 81       	ldd	r22, Y+1	; 0x01
    1c14:	7a 81       	ldd	r23, Y+2	; 0x02
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1a:	a8 01       	movw	r20, r16
    1c1c:	97 01       	movw	r18, r14
    1c1e:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    1c22:	29 85       	ldd	r18, Y+9	; 0x09
    1c24:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c26:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c28:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c2a:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    1c2e:	9b 01       	movw	r18, r22
    1c30:	ac 01       	movw	r20, r24
    1c32:	c6 01       	movw	r24, r12
    1c34:	b5 01       	movw	r22, r10
    1c36:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    1c3a:	5b 01       	movw	r10, r22
    1c3c:	6c 01       	movw	r12, r24
  delta = sq(delta);
    1c3e:	76 2f       	mov	r23, r22
    1c40:	27 2f       	mov	r18, r23
    1c42:	3b 2d       	mov	r19, r11
    1c44:	4c 2d       	mov	r20, r12
    1c46:	5d 2d       	mov	r21, r13
    1c48:	ca 01       	movw	r24, r20
    1c4a:	b9 01       	movw	r22, r18
    1c4c:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    1c50:	96 2e       	mov	r9, r22
    1c52:	87 2e       	mov	r8, r23
    1c54:	38 2e       	mov	r3, r24
    1c56:	29 2e       	mov	r2, r25
  delta += sq(clat2 * sdlong);
    1c58:	c8 01       	movw	r24, r16
    1c5a:	b7 01       	movw	r22, r14
    1c5c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c5e:	3e 81       	ldd	r19, Y+6	; 0x06
    1c60:	4f 81       	ldd	r20, Y+7	; 0x07
    1c62:	58 85       	ldd	r21, Y+8	; 0x08
    1c64:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    1c68:	c7 2e       	mov	r12, r23
    1c6a:	d8 2e       	mov	r13, r24
    1c6c:	a9 2e       	mov	r10, r25
    1c6e:	76 2f       	mov	r23, r22
    1c70:	27 2f       	mov	r18, r23
    1c72:	3c 2d       	mov	r19, r12
    1c74:	4d 2d       	mov	r20, r13
    1c76:	5a 2d       	mov	r21, r10
    1c78:	ca 01       	movw	r24, r20
    1c7a:	b9 01       	movw	r22, r18
    1c7c:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    1c80:	9b 01       	movw	r18, r22
    1c82:	ac 01       	movw	r20, r24
    1c84:	d4 01       	movw	r26, r8
    1c86:	f1 01       	movw	r30, r2
    1c88:	6b 2f       	mov	r22, r27
    1c8a:	7a 2f       	mov	r23, r26
    1c8c:	8f 2f       	mov	r24, r31
    1c8e:	9e 2f       	mov	r25, r30
    1c90:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
  delta = sqrt(delta);
    1c94:	0e 94 14 47 	call	0x8e28	; 0x8e28 <sqrt>
    1c98:	6d 83       	std	Y+5, r22	; 0x05
    1c9a:	7e 83       	std	Y+6, r23	; 0x06
    1c9c:	8f 83       	std	Y+7, r24	; 0x07
    1c9e:	98 87       	std	Y+8, r25	; 0x08
  float denom = (slat1 * slat2) + (clat1 * clat2 * cdlong);
    1ca0:	69 81       	ldd	r22, Y+1	; 0x01
    1ca2:	7a 81       	ldd	r23, Y+2	; 0x02
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	a3 01       	movw	r20, r6
    1caa:	92 01       	movw	r18, r4
    1cac:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    1cb0:	5b 01       	movw	r10, r22
    1cb2:	6c 01       	movw	r12, r24
    1cb4:	6d 85       	ldd	r22, Y+13	; 0x0d
    1cb6:	7e 85       	ldd	r23, Y+14	; 0x0e
    1cb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cba:	98 89       	ldd	r25, Y+16	; 0x10
    1cbc:	a8 01       	movw	r20, r16
    1cbe:	97 01       	movw	r18, r14
    1cc0:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    1cc4:	29 85       	ldd	r18, Y+9	; 0x09
    1cc6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cc8:	4b 85       	ldd	r20, Y+11	; 0x0b
    1cca:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ccc:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    1cd0:	9b 01       	movw	r18, r22
    1cd2:	ac 01       	movw	r20, r24
    1cd4:	c6 01       	movw	r24, r12
    1cd6:	b5 01       	movw	r22, r10
    1cd8:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    1cdc:	9b 01       	movw	r18, r22
    1cde:	ac 01       	movw	r20, r24
  delta = atan2(delta, denom);
    1ce0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ce2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ce4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce6:	98 85       	ldd	r25, Y+8	; 0x08
    1ce8:	0e 94 46 44 	call	0x888c	; 0x888c <atan2>
  return delta * 6372795 * units_per_meter;
    1cec:	26 e7       	ldi	r18, 0x76	; 118
    1cee:	3b e7       	ldi	r19, 0x7B	; 123
    1cf0:	42 ec       	ldi	r20, 0xC2	; 194
    1cf2:	5a e4       	ldi	r21, 0x4A	; 74
    1cf4:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    1cf8:	2d a1       	ldd	r18, Y+37	; 0x25
    1cfa:	3e a1       	ldd	r19, Y+38	; 0x26
    1cfc:	4f a1       	ldd	r20, Y+39	; 0x27
    1cfe:	58 a5       	ldd	r21, Y+40	; 0x28
    1d00:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
}
    1d04:	60 96       	adiw	r28, 0x10	; 16
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	ff 90       	pop	r15
    1d1a:	ef 90       	pop	r14
    1d1c:	df 90       	pop	r13
    1d1e:	cf 90       	pop	r12
    1d20:	bf 90       	pop	r11
    1d22:	af 90       	pop	r10
    1d24:	9f 90       	pop	r9
    1d26:	8f 90       	pop	r8
    1d28:	7f 90       	pop	r7
    1d2a:	6f 90       	pop	r6
    1d2c:	5f 90       	pop	r5
    1d2e:	4f 90       	pop	r4
    1d30:	3f 90       	pop	r3
    1d32:	2f 90       	pop	r2
    1d34:	08 95       	ret

00001d36 <_ZN4NMEA17gprmc_distance_toEfff>:
float NMEA::gprmc_course() {
	// returns decimal value of track-angle-made-good term in last-known GPRMC sentence - 0-360 deg
	return _gprmc_angle;
}

float NMEA::gprmc_distance_to(float latitude, float longitude, float unit) {
    1d36:	4f 92       	push	r4
    1d38:	5f 92       	push	r5
    1d3a:	6f 92       	push	r6
    1d3c:	7f 92       	push	r7
    1d3e:	8f 92       	push	r8
    1d40:	9f 92       	push	r9
    1d42:	af 92       	push	r10
    1d44:	bf 92       	push	r11
    1d46:	cf 92       	push	r12
    1d48:	df 92       	push	r13
    1d4a:	ef 92       	push	r14
    1d4c:	ff 92       	push	r15
    1d4e:	0f 93       	push	r16
    1d50:	1f 93       	push	r17
    1d52:	4a 01       	movw	r8, r20
    1d54:	5b 01       	movw	r10, r22
    1d56:	28 01       	movw	r4, r16
    1d58:	39 01       	movw	r6, r18
	// returns distance from last-known GPRMC position to given position
	return distance_between( _gprmc_lat, _gprmc_long, latitude, longitude, unit);
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <_ZN4NMEA17gprmc_distance_toEfff+0x26>
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <_ZN4NMEA17gprmc_distance_toEfff+0x28>
    1d5e:	fc 01       	movw	r30, r24
    1d60:	47 81       	ldd	r20, Z+7	; 0x07
    1d62:	50 85       	ldd	r21, Z+8	; 0x08
    1d64:	61 85       	ldd	r22, Z+9	; 0x09
    1d66:	72 85       	ldd	r23, Z+10	; 0x0a
    1d68:	03 85       	ldd	r16, Z+11	; 0x0b
    1d6a:	14 85       	ldd	r17, Z+12	; 0x0c
    1d6c:	25 85       	ldd	r18, Z+13	; 0x0d
    1d6e:	36 85       	ldd	r19, Z+14	; 0x0e
    1d70:	ed b7       	in	r30, 0x3d	; 61
    1d72:	fe b7       	in	r31, 0x3e	; 62
    1d74:	c1 82       	std	Z+1, r12	; 0x01
    1d76:	d2 82       	std	Z+2, r13	; 0x02
    1d78:	e3 82       	std	Z+3, r14	; 0x03
    1d7a:	f4 82       	std	Z+4, r15	; 0x04
    1d7c:	75 01       	movw	r14, r10
    1d7e:	64 01       	movw	r12, r8
    1d80:	53 01       	movw	r10, r6
    1d82:	42 01       	movw	r8, r4
    1d84:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_ZN4NMEA16distance_betweenEfffff>
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
}
    1d90:	1f 91       	pop	r17
    1d92:	0f 91       	pop	r16
    1d94:	ff 90       	pop	r15
    1d96:	ef 90       	pop	r14
    1d98:	df 90       	pop	r13
    1d9a:	cf 90       	pop	r12
    1d9c:	bf 90       	pop	r11
    1d9e:	af 90       	pop	r10
    1da0:	9f 90       	pop	r9
    1da2:	8f 90       	pop	r8
    1da4:	7f 90       	pop	r7
    1da6:	6f 90       	pop	r6
    1da8:	5f 90       	pop	r5
    1daa:	4f 90       	pop	r4
    1dac:	08 95       	ret

00001dae <_ZN4NMEA8_decimalEPc>:
  else {
    return int(a)-48;
  }
}

float NMEA::_decimal(char* s) {
    1dae:	2f 92       	push	r2
    1db0:	3f 92       	push	r3
    1db2:	4f 92       	push	r4
    1db4:	5f 92       	push	r5
    1db6:	6f 92       	push	r6
    1db8:	7f 92       	push	r7
    1dba:	8f 92       	push	r8
    1dbc:	9f 92       	push	r9
    1dbe:	af 92       	push	r10
    1dc0:	bf 92       	push	r11
    1dc2:	cf 92       	push	r12
    1dc4:	df 92       	push	r13
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
  float rr = 0.0;
  float rb = 0.1;
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
    1dd2:	fb 01       	movw	r30, r22
    1dd4:	40 80       	ld	r4, Z
    1dd6:	f4 2d       	mov	r31, r4
    1dd8:	fd 32       	cpi	r31, 0x2D	; 45
    1dda:	39 f0       	breq	.+14     	; 0x1dea <_ZN4NMEA8_decimalEPc+0x3c>
	// does not trap invalid strings!
  long  rl = 0;
  float rr = 0.0;
  float rb = 0.1;
  boolean dec = false;
  int i = 0;
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	fb 32       	cpi	r31, 0x2B	; 43
    1de2:	29 f0       	breq	.+10     	; 0x1dee <_ZN4NMEA8_decimalEPc+0x40>
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <_ZN4NMEA8_decimalEPc+0x40>

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
  else {
    return int(a)-48;
  }
}

float NMEA::_decimal(char* s) {
    1dee:	1b 01       	movw	r2, r22
    1df0:	28 0e       	add	r2, r24
    1df2:	39 1e       	adc	r3, r25
    1df4:	dd 24       	eor	r13, r13
    1df6:	6d ec       	ldi	r22, 0xCD	; 205
    1df8:	c6 2e       	mov	r12, r22
    1dfa:	5c ec       	ldi	r21, 0xCC	; 204
    1dfc:	85 2e       	mov	r8, r21
    1dfe:	4c ec       	ldi	r20, 0xCC	; 204
    1e00:	74 2e       	mov	r7, r20
    1e02:	3d e3       	ldi	r19, 0x3D	; 61
    1e04:	63 2e       	mov	r6, r19
    1e06:	bb 24       	eor	r11, r11
    1e08:	aa 24       	eor	r10, r10
    1e0a:	99 24       	eor	r9, r9
    1e0c:	55 24       	eor	r5, r5
    1e0e:	ee 24       	eor	r14, r14
    1e10:	ff 24       	eor	r15, r15
    1e12:	87 01       	movw	r16, r14
    1e14:	4d c0       	rjmp	.+154    	; 0x1eb0 <_ZN4NMEA8_decimalEPc+0x102>
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    if (s[i] == '.') {
    1e16:	8e 32       	cpi	r24, 0x2E	; 46
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <_ZN4NMEA8_decimalEPc+0x6e>
    1e1a:	48 c0       	rjmp	.+144    	; 0x1eac <_ZN4NMEA8_decimalEPc+0xfe>
    1e1c:	c8 2f       	mov	r28, r24
    1e1e:	dd 27       	eor	r29, r29
    1e20:	c7 fd       	sbrc	r28, 7
    1e22:	d0 95       	com	r29
      dec = true;
    }
    else{
      if (!dec) {
    1e24:	dd 20       	and	r13, r13
    1e26:	a9 f4       	brne	.+42     	; 0x1e52 <_ZN4NMEA8_decimalEPc+0xa4>
        rl = (10 * rl) + (s[i] - 48);
    1e28:	c8 01       	movw	r24, r16
    1e2a:	b7 01       	movw	r22, r14
    1e2c:	2a e0       	ldi	r18, 0x0A	; 10
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	50 e0       	ldi	r21, 0x00	; 0
    1e34:	0e 94 6d 47 	call	0x8eda	; 0x8eda <__mulsi3>
    1e38:	7b 01       	movw	r14, r22
    1e3a:	8c 01       	movw	r16, r24
    1e3c:	e0 97       	sbiw	r28, 0x30	; 48
    1e3e:	ce 01       	movw	r24, r28
    1e40:	aa 27       	eor	r26, r26
    1e42:	97 fd       	sbrc	r25, 7
    1e44:	a0 95       	com	r26
    1e46:	ba 2f       	mov	r27, r26
    1e48:	e8 0e       	add	r14, r24
    1e4a:	f9 1e       	adc	r15, r25
    1e4c:	0a 1f       	adc	r16, r26
    1e4e:	1b 1f       	adc	r17, r27
    1e50:	2f c0       	rjmp	.+94     	; 0x1eb0 <_ZN4NMEA8_decimalEPc+0x102>
      }
      else {
        rr += rb * (float)(s[i] - 48);
    1e52:	e0 97       	sbiw	r28, 0x30	; 48
    1e54:	be 01       	movw	r22, r28
    1e56:	88 27       	eor	r24, r24
    1e58:	77 fd       	sbrc	r23, 7
    1e5a:	80 95       	com	r24
    1e5c:	98 2f       	mov	r25, r24
    1e5e:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <__floatsisf>
    1e62:	9b 01       	movw	r18, r22
    1e64:	ac 01       	movw	r20, r24
    1e66:	f3 01       	movw	r30, r6
    1e68:	6c 2d       	mov	r22, r12
    1e6a:	78 2d       	mov	r23, r8
    1e6c:	8f 2f       	mov	r24, r31
    1e6e:	96 2d       	mov	r25, r6
    1e70:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    1e74:	9b 01       	movw	r18, r22
    1e76:	ac 01       	movw	r20, r24
    1e78:	d5 01       	movw	r26, r10
    1e7a:	6b 2f       	mov	r22, r27
    1e7c:	7a 2d       	mov	r23, r10
    1e7e:	89 2d       	mov	r24, r9
    1e80:	95 2d       	mov	r25, r5
    1e82:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    1e86:	b6 2e       	mov	r11, r22
    1e88:	a7 2e       	mov	r10, r23
    1e8a:	98 2e       	mov	r9, r24
    1e8c:	59 2e       	mov	r5, r25
        rb /= 10.0;
    1e8e:	93 01       	movw	r18, r6
    1e90:	6c 2d       	mov	r22, r12
    1e92:	78 2d       	mov	r23, r8
    1e94:	83 2f       	mov	r24, r19
    1e96:	96 2d       	mov	r25, r6
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e2       	ldi	r20, 0x20	; 32
    1e9e:	51 e4       	ldi	r21, 0x41	; 65
    1ea0:	0e 94 a0 44 	call	0x8940	; 0x8940 <__divsf3>
    1ea4:	c6 2e       	mov	r12, r22
    1ea6:	87 2e       	mov	r8, r23
    1ea8:	78 2e       	mov	r7, r24
    1eaa:	69 2e       	mov	r6, r25
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    if (s[i] == '.') {
      dec = true;
    1eac:	dd 24       	eor	r13, r13
    1eae:	d3 94       	inc	r13
  float rb = 0.1;
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    1eb0:	f1 01       	movw	r30, r2
    1eb2:	81 91       	ld	r24, Z+
    1eb4:	1f 01       	movw	r2, r30
    1eb6:	88 23       	and	r24, r24
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <_ZN4NMEA8_decimalEPc+0x10e>
    1eba:	ad cf       	rjmp	.-166    	; 0x1e16 <_ZN4NMEA8_decimalEPc+0x68>
        rb /= 10.0;
      }
    }
    i++;
  }
  rr += (float)rl;
    1ebc:	c8 01       	movw	r24, r16
    1ebe:	b7 01       	movw	r22, r14
    1ec0:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <__floatsisf>
    1ec4:	9b 01       	movw	r18, r22
    1ec6:	ac 01       	movw	r20, r24
    1ec8:	d5 01       	movw	r26, r10
    1eca:	6b 2f       	mov	r22, r27
    1ecc:	7a 2d       	mov	r23, r10
    1ece:	89 2d       	mov	r24, r9
    1ed0:	95 2d       	mov	r25, r5
    1ed2:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    1ed6:	56 2f       	mov	r21, r22
    1ed8:	47 2f       	mov	r20, r23
    1eda:	38 2f       	mov	r19, r24
    1edc:	29 2f       	mov	r18, r25
  if (s[0] == '-') {
    1ede:	f4 2d       	mov	r31, r4
    1ee0:	fd 32       	cpi	r31, 0x2D	; 45
    1ee2:	79 f4       	brne	.+30     	; 0x1f02 <_ZN4NMEA8_decimalEPc+0x154>
    rr = 0.0 - rr;
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	70 e0       	ldi	r23, 0x00	; 0
    1ee8:	cb 01       	movw	r24, r22
    1eea:	da 01       	movw	r26, r20
    1eec:	f9 01       	movw	r30, r18
    1eee:	2b 2f       	mov	r18, r27
    1ef0:	3a 2f       	mov	r19, r26
    1ef2:	4f 2f       	mov	r20, r31
    1ef4:	5e 2f       	mov	r21, r30
    1ef6:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    1efa:	56 2f       	mov	r21, r22
    1efc:	47 2f       	mov	r20, r23
    1efe:	38 2f       	mov	r19, r24
    1f00:	29 2f       	mov	r18, r25
  }
  return rr;
}
    1f02:	da 01       	movw	r26, r20
    1f04:	f9 01       	movw	r30, r18
    1f06:	6b 2f       	mov	r22, r27
    1f08:	74 2f       	mov	r23, r20
    1f0a:	8f 2f       	mov	r24, r31
    1f0c:	92 2f       	mov	r25, r18
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	1f 91       	pop	r17
    1f14:	0f 91       	pop	r16
    1f16:	ff 90       	pop	r15
    1f18:	ef 90       	pop	r14
    1f1a:	df 90       	pop	r13
    1f1c:	cf 90       	pop	r12
    1f1e:	bf 90       	pop	r11
    1f20:	af 90       	pop	r10
    1f22:	9f 90       	pop	r9
    1f24:	8f 90       	pop	r8
    1f26:	7f 90       	pop	r7
    1f28:	6f 90       	pop	r6
    1f2a:	5f 90       	pop	r5
    1f2c:	4f 90       	pop	r4
    1f2e:	3f 90       	pop	r3
    1f30:	2f 90       	pop	r2
    1f32:	08 95       	ret

00001f34 <_ZN4NMEA6decodeEc>:

//
// public methods
//

int NMEA::decode(char c) {
    1f34:	af 92       	push	r10
    1f36:	bf 92       	push	r11
    1f38:	cf 92       	push	r12
    1f3a:	df 92       	push	r13
    1f3c:	ef 92       	push	r14
    1f3e:	ff 92       	push	r15
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	ec 01       	movw	r28, r24
  // avoid runaway sentences (>99 chars or >29 terms) and terms (>14 chars)
  if ((n >= 100) || (_terms >= 30) || (_nt >= 15)) { _state = 0; }
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	e5 5a       	subi	r30, 0xA5	; 165
    1f4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f50:	80 81       	ld	r24, Z
    1f52:	91 81       	ldd	r25, Z+1	; 0x01
    1f54:	84 36       	cpi	r24, 0x64	; 100
    1f56:	91 05       	cpc	r25, r1
    1f58:	84 f4       	brge	.+32     	; 0x1f7a <_ZN4NMEA6decodeEc+0x46>
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e7 54       	subi	r30, 0x47	; 71
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	20 81       	ld	r18, Z
    1f62:	31 81       	ldd	r19, Z+1	; 0x01
    1f64:	2e 31       	cpi	r18, 0x1E	; 30
    1f66:	31 05       	cpc	r19, r1
    1f68:	44 f4       	brge	.+16     	; 0x1f7a <_ZN4NMEA6decodeEc+0x46>
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	ed 59       	subi	r30, 0x9D	; 157
    1f6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f70:	20 81       	ld	r18, Z
    1f72:	31 81       	ldd	r19, Z+1	; 0x01
    1f74:	2f 30       	cpi	r18, 0x0F	; 15
    1f76:	31 05       	cpc	r19, r1
    1f78:	2c f0       	brlt	.+10     	; 0x1f84 <_ZN4NMEA6decodeEc+0x50>
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e1 5a       	subi	r30, 0xA1	; 161
    1f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f80:	11 82       	std	Z+1, r1	; 0x01
    1f82:	10 82       	st	Z, r1
  // LF and CR always reset parser
  if ((c == 0x0A) || (c == 0x0D)) { _state = 0; }
    1f84:	6a 30       	cpi	r22, 0x0A	; 10
    1f86:	11 f0       	breq	.+4      	; 0x1f8c <_ZN4NMEA6decodeEc+0x58>
    1f88:	6d 30       	cpi	r22, 0x0D	; 13
    1f8a:	29 f4       	brne	.+10     	; 0x1f96 <_ZN4NMEA6decodeEc+0x62>
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e1 5a       	subi	r30, 0xA1	; 161
    1f90:	fe 4f       	sbci	r31, 0xFE	; 254
    1f92:	11 82       	std	Z+1, r1	; 0x01
    1f94:	10 82       	st	Z, r1
    1f96:	8e 01       	movw	r16, r28
    1f98:	01 5a       	subi	r16, 0xA1	; 161
    1f9a:	1e 4f       	sbci	r17, 0xFE	; 254
  // '$' always starts a new sentence
  if (c == '$') {
    1f9c:	64 32       	cpi	r22, 0x24	; 36
    1f9e:	19 f5       	brne	.+70     	; 0x1fe6 <_ZN4NMEA6decodeEc+0xb2>
    _gprmc_tag = 0;
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e3 5a       	subi	r30, 0xA3	; 163
    1fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa6:	11 82       	std	Z+1, r1	; 0x01
    1fa8:	10 82       	st	Z, r1
    _parity = 0;
    1faa:	fe 01       	movw	r30, r28
    1fac:	ef 59       	subi	r30, 0x9F	; 159
    1fae:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb0:	11 82       	std	Z+1, r1	; 0x01
    1fb2:	10 82       	st	Z, r1
    _terms = 0;
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	e7 54       	subi	r30, 0x47	; 71
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	11 82       	std	Z+1, r1	; 0x01
    1fbc:	10 82       	st	Z, r1
    _nt = 0;
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	ed 59       	subi	r30, 0x9D	; 157
    1fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc4:	11 82       	std	Z+1, r1	; 0x01
    1fc6:	10 82       	st	Z, r1
    _sentence[0] = c;
    1fc8:	fe 01       	movw	r30, r28
    1fca:	e5 54       	subi	r30, 0x45	; 69
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	60 83       	st	Z, r22
    n = 1;
    1fd0:	c5 5a       	subi	r28, 0xA5	; 165
    1fd2:	de 4f       	sbci	r29, 0xFE	; 254
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	99 83       	std	Y+1, r25	; 0x01
    1fda:	88 83       	st	Y, r24
    _state = 1;
    1fdc:	d8 01       	movw	r26, r16
    1fde:	11 96       	adiw	r26, 0x01	; 1
    1fe0:	9c 93       	st	X, r25
    1fe2:	8e 93       	st	-X, r24
    1fe4:	b5 c2       	rjmp	.+1386   	; 0x2550 <__stack+0x351>
    return 0;
  }
  // parse other chars according to parser state
  switch(_state) {
    1fe6:	f8 01       	movw	r30, r16
    1fe8:	20 81       	ld	r18, Z
    1fea:	31 81       	ldd	r19, Z+1	; 0x01
    1fec:	21 30       	cpi	r18, 0x01	; 1
    1fee:	31 05       	cpc	r19, r1
    1ff0:	89 f0       	breq	.+34     	; 0x2014 <_ZN4NMEA6decodeEc+0xe0>
    1ff2:	22 30       	cpi	r18, 0x02	; 2
    1ff4:	31 05       	cpc	r19, r1
    1ff6:	2c f4       	brge	.+10     	; 0x2002 <_ZN4NMEA6decodeEc+0xce>
    1ff8:	21 15       	cp	r18, r1
    1ffa:	31 05       	cpc	r19, r1
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <_ZN4NMEA6decodeEc+0xcc>
    1ffe:	a8 c2       	rjmp	.+1360   	; 0x2550 <__stack+0x351>
    2000:	a3 c2       	rjmp	.+1350   	; 0x2548 <__stack+0x349>
    2002:	22 30       	cpi	r18, 0x02	; 2
    2004:	31 05       	cpc	r19, r1
    2006:	09 f4       	brne	.+2      	; 0x200a <_ZN4NMEA6decodeEc+0xd6>
    2008:	9b c0       	rjmp	.+310    	; 0x2140 <_ZN4NMEA6decodeEc+0x20c>
    200a:	23 30       	cpi	r18, 0x03	; 3
    200c:	31 05       	cpc	r19, r1
    200e:	09 f0       	breq	.+2      	; 0x2012 <_ZN4NMEA6decodeEc+0xde>
    2010:	9b c2       	rjmp	.+1334   	; 0x2548 <__stack+0x349>
    2012:	e2 c0       	rjmp	.+452    	; 0x21d8 <_ZN4NMEA6decodeEc+0x2a4>
  case 0:
    // waiting for '$', do nothing
    break;
  case 1:
  	// decode chars after '$' and before '*' found
    if (n < 7) {
    2014:	87 30       	cpi	r24, 0x07	; 7
    2016:	91 05       	cpc	r25, r1
    2018:	7c f4       	brge	.+30     	; 0x2038 <_ZN4NMEA6decodeEc+0x104>
    	// see if first seven chars match "$GPRMC,"
    	if (c == _GPRMC_TERM[n]) { _gprmc_tag++; }
    201a:	fc 01       	movw	r30, r24
    201c:	e6 5c       	subi	r30, 0xC6	; 198
    201e:	fd 4f       	sbci	r31, 0xFD	; 253
    2020:	20 81       	ld	r18, Z
    2022:	62 17       	cp	r22, r18
    2024:	49 f4       	brne	.+18     	; 0x2038 <_ZN4NMEA6decodeEc+0x104>
    2026:	fe 01       	movw	r30, r28
    2028:	e3 5a       	subi	r30, 0xA3	; 163
    202a:	fe 4f       	sbci	r31, 0xFE	; 254
    202c:	20 81       	ld	r18, Z
    202e:	31 81       	ldd	r19, Z+1	; 0x01
    2030:	2f 5f       	subi	r18, 0xFF	; 255
    2032:	3f 4f       	sbci	r19, 0xFF	; 255
    2034:	31 83       	std	Z+1, r19	; 0x01
    2036:	20 83       	st	Z, r18
    }
    // add received char to sentence
    _sentence[n++] = c;
    2038:	fe 01       	movw	r30, r28
    203a:	e8 0f       	add	r30, r24
    203c:	f9 1f       	adc	r31, r25
    203e:	e5 54       	subi	r30, 0x45	; 69
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	60 83       	st	Z, r22
    2044:	fe 01       	movw	r30, r28
    2046:	e5 5a       	subi	r30, 0xA5	; 165
    2048:	fe 4f       	sbci	r31, 0xFE	; 254
    204a:	01 96       	adiw	r24, 0x01	; 1
    204c:	91 83       	std	Z+1, r25	; 0x01
    204e:	80 83       	st	Z, r24
    switch (c) {
    2050:	6a 32       	cpi	r22, 0x2A	; 42
    2052:	89 f1       	breq	.+98     	; 0x20b6 <_ZN4NMEA6decodeEc+0x182>
    2054:	9e 01       	movw	r18, r28
    2056:	27 54       	subi	r18, 0x47	; 71
    2058:	3f 4f       	sbci	r19, 0xFF	; 255
    205a:	ce 01       	movw	r24, r28
    205c:	8d 59       	subi	r24, 0x9D	; 157
    205e:	9e 4f       	sbci	r25, 0xFE	; 254
    2060:	8e 01       	movw	r16, r28
    2062:	0f 59       	subi	r16, 0x9F	; 159
    2064:	1e 4f       	sbci	r17, 0xFE	; 254
    2066:	6c 32       	cpi	r22, 0x2C	; 44
    2068:	09 f0       	breq	.+2      	; 0x206c <_ZN4NMEA6decodeEc+0x138>
    206a:	47 c0       	rjmp	.+142    	; 0x20fa <_ZN4NMEA6decodeEc+0x1c6>
    case ',':
    	// ',' delimits the individual terms
      (_term[_terms++])[_nt] = 0;
    206c:	d9 01       	movw	r26, r18
    206e:	4d 91       	ld	r20, X+
    2070:	5c 91       	ld	r21, X
    2072:	11 97       	sbiw	r26, 0x01	; 1
    2074:	fa 01       	movw	r30, r20
    2076:	ee 0f       	add	r30, r30
    2078:	ff 1f       	adc	r31, r31
    207a:	ec 0f       	add	r30, r28
    207c:	fd 1f       	adc	r31, r29
    207e:	e1 5e       	subi	r30, 0xE1	; 225
    2080:	fe 4f       	sbci	r31, 0xFE	; 254
    2082:	01 90       	ld	r0, Z+
    2084:	f0 81       	ld	r31, Z
    2086:	e0 2d       	mov	r30, r0
    2088:	ec 01       	movw	r28, r24
    208a:	68 81       	ld	r22, Y
    208c:	79 81       	ldd	r23, Y+1	; 0x01
    208e:	e6 0f       	add	r30, r22
    2090:	f7 1f       	adc	r31, r23
    2092:	10 82       	st	Z, r1
    2094:	4f 5f       	subi	r20, 0xFF	; 255
    2096:	5f 4f       	sbci	r21, 0xFF	; 255
    2098:	11 96       	adiw	r26, 0x01	; 1
    209a:	5c 93       	st	X, r21
    209c:	4e 93       	st	-X, r20
      _nt = 0;
    209e:	19 82       	std	Y+1, r1	; 0x01
    20a0:	18 82       	st	Y, r1
      _parity = _parity ^ c;
    20a2:	f8 01       	movw	r30, r16
    20a4:	80 81       	ld	r24, Z
    20a6:	91 81       	ldd	r25, Z+1	; 0x01
    20a8:	2c e2       	ldi	r18, 0x2C	; 44
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	82 27       	eor	r24, r18
    20ae:	93 27       	eor	r25, r19
    20b0:	91 83       	std	Z+1, r25	; 0x01
    20b2:	80 83       	st	Z, r24
    20b4:	4d c2       	rjmp	.+1178   	; 0x2550 <__stack+0x351>
      break;
    case '*':
    	// '*' delimits term and precedes checksum term
      (_term[_terms++])[_nt] = 0;
    20b6:	ce 01       	movw	r24, r28
    20b8:	87 54       	subi	r24, 0x47	; 71
    20ba:	9f 4f       	sbci	r25, 0xFF	; 255
    20bc:	dc 01       	movw	r26, r24
    20be:	2d 91       	ld	r18, X+
    20c0:	3c 91       	ld	r19, X
    20c2:	f9 01       	movw	r30, r18
    20c4:	ee 0f       	add	r30, r30
    20c6:	ff 1f       	adc	r31, r31
    20c8:	ec 0f       	add	r30, r28
    20ca:	fd 1f       	adc	r31, r29
    20cc:	e1 5e       	subi	r30, 0xE1	; 225
    20ce:	fe 4f       	sbci	r31, 0xFE	; 254
    20d0:	01 90       	ld	r0, Z+
    20d2:	f0 81       	ld	r31, Z
    20d4:	e0 2d       	mov	r30, r0
    20d6:	de 01       	movw	r26, r28
    20d8:	ad 59       	subi	r26, 0x9D	; 157
    20da:	be 4f       	sbci	r27, 0xFE	; 254
    20dc:	4d 91       	ld	r20, X+
    20de:	5c 91       	ld	r21, X
    20e0:	11 97       	sbiw	r26, 0x01	; 1
    20e2:	e4 0f       	add	r30, r20
    20e4:	f5 1f       	adc	r31, r21
    20e6:	10 82       	st	Z, r1
    20e8:	2f 5f       	subi	r18, 0xFF	; 255
    20ea:	3f 4f       	sbci	r19, 0xFF	; 255
    20ec:	fc 01       	movw	r30, r24
    20ee:	31 83       	std	Z+1, r19	; 0x01
    20f0:	20 83       	st	Z, r18
      _nt = 0;
    20f2:	11 96       	adiw	r26, 0x01	; 1
    20f4:	1c 92       	st	X, r1
    20f6:	1e 92       	st	-X, r1
    20f8:	67 c0       	rjmp	.+206    	; 0x21c8 <_ZN4NMEA6decodeEc+0x294>
      _state++;
      break;
    default:
    	// all other chars between '$' and '*' are part of a term
      (_term[_terms])[_nt++] = c;
    20fa:	dc 01       	movw	r26, r24
    20fc:	4d 91       	ld	r20, X+
    20fe:	5c 91       	ld	r21, X
    2100:	d9 01       	movw	r26, r18
    2102:	ed 91       	ld	r30, X+
    2104:	fc 91       	ld	r31, X
    2106:	11 97       	sbiw	r26, 0x01	; 1
    2108:	ee 0f       	add	r30, r30
    210a:	ff 1f       	adc	r31, r31
    210c:	ec 0f       	add	r30, r28
    210e:	fd 1f       	adc	r31, r29
    2110:	e1 5e       	subi	r30, 0xE1	; 225
    2112:	fe 4f       	sbci	r31, 0xFE	; 254
    2114:	01 90       	ld	r0, Z+
    2116:	f0 81       	ld	r31, Z
    2118:	e0 2d       	mov	r30, r0
    211a:	e4 0f       	add	r30, r20
    211c:	f5 1f       	adc	r31, r21
    211e:	60 83       	st	Z, r22
    2120:	4f 5f       	subi	r20, 0xFF	; 255
    2122:	5f 4f       	sbci	r21, 0xFF	; 255
    2124:	ec 01       	movw	r28, r24
    2126:	59 83       	std	Y+1, r21	; 0x01
    2128:	48 83       	st	Y, r20
      _parity = _parity ^ c;
    212a:	77 27       	eor	r23, r23
    212c:	67 fd       	sbrc	r22, 7
    212e:	70 95       	com	r23
    2130:	f8 01       	movw	r30, r16
    2132:	80 81       	ld	r24, Z
    2134:	91 81       	ldd	r25, Z+1	; 0x01
    2136:	68 27       	eor	r22, r24
    2138:	79 27       	eor	r23, r25
    213a:	71 83       	std	Z+1, r23	; 0x01
    213c:	60 83       	st	Z, r22
    213e:	08 c2       	rjmp	.+1040   	; 0x2550 <__stack+0x351>
      break;
    }
    break;
  case 2:
  	// first char following '*' is checksum MSB
    _sentence[n++] = c;
    2140:	fe 01       	movw	r30, r28
    2142:	e8 0f       	add	r30, r24
    2144:	f9 1f       	adc	r31, r25
    2146:	e5 54       	subi	r30, 0x45	; 69
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	60 83       	st	Z, r22
    214c:	fe 01       	movw	r30, r28
    214e:	e5 5a       	subi	r30, 0xA5	; 165
    2150:	fe 4f       	sbci	r31, 0xFE	; 254
    2152:	01 96       	adiw	r24, 0x01	; 1
    2154:	91 83       	std	Z+1, r25	; 0x01
    2156:	80 83       	st	Z, r24
    (_term[_terms])[_nt++] = c;
    2158:	de 01       	movw	r26, r28
    215a:	ad 59       	subi	r26, 0x9D	; 157
    215c:	be 4f       	sbci	r27, 0xFE	; 254
    215e:	8d 91       	ld	r24, X+
    2160:	9c 91       	ld	r25, X
    2162:	11 97       	sbiw	r26, 0x01	; 1
    2164:	fe 01       	movw	r30, r28
    2166:	e7 54       	subi	r30, 0x47	; 71
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	01 90       	ld	r0, Z+
    216c:	f0 81       	ld	r31, Z
    216e:	e0 2d       	mov	r30, r0
    2170:	ee 0f       	add	r30, r30
    2172:	ff 1f       	adc	r31, r31
    2174:	ec 0f       	add	r30, r28
    2176:	fd 1f       	adc	r31, r29
    2178:	e1 5e       	subi	r30, 0xE1	; 225
    217a:	fe 4f       	sbci	r31, 0xFE	; 254
    217c:	01 90       	ld	r0, Z+
    217e:	f0 81       	ld	r31, Z
    2180:	e0 2d       	mov	r30, r0
    2182:	e8 0f       	add	r30, r24
    2184:	f9 1f       	adc	r31, r25
    2186:	60 83       	st	Z, r22
    2188:	01 96       	adiw	r24, 0x01	; 1
    218a:	11 96       	adiw	r26, 0x01	; 1
    218c:	9c 93       	st	X, r25
    218e:	8e 93       	st	-X, r24
    _parity = _parity - (16 * _dehex(c));		// replace with bitshift?
    2190:	fe 01       	movw	r30, r28
    2192:	ef 59       	subi	r30, 0x9F	; 159
    2194:	fe 4f       	sbci	r31, 0xFE	; 254
    2196:	40 81       	ld	r20, Z
    2198:	51 81       	ldd	r21, Z+1	; 0x01
    219a:	86 2f       	mov	r24, r22
    219c:	99 27       	eor	r25, r25
    219e:	87 fd       	sbrc	r24, 7
    21a0:	90 95       	com	r25
}

int NMEA::_dehex(char a) {
	// returns base-16 value of chars '0'-'9' and 'A'-'F';
	// does not trap invalid chars!
  if (int(a) >= 65) {
    21a2:	61 34       	cpi	r22, 0x41	; 65
    21a4:	14 f0       	brlt	.+4      	; 0x21aa <_ZN4NMEA6decodeEc+0x276>
    return int(a)-55;
    21a6:	c7 97       	sbiw	r24, 0x37	; 55
    21a8:	01 c0       	rjmp	.+2      	; 0x21ac <_ZN4NMEA6decodeEc+0x278>
  }
  else {
    return int(a)-48;
    21aa:	c0 97       	sbiw	r24, 0x30	; 48
    break;
  case 2:
  	// first char following '*' is checksum MSB
    _sentence[n++] = c;
    (_term[_terms])[_nt++] = c;
    _parity = _parity - (16 * _dehex(c));		// replace with bitshift?
    21ac:	fe 01       	movw	r30, r28
    21ae:	ef 59       	subi	r30, 0x9F	; 159
    21b0:	fe 4f       	sbci	r31, 0xFE	; 254
    21b2:	9c 01       	movw	r18, r24
    21b4:	a4 e0       	ldi	r26, 0x04	; 4
    21b6:	22 0f       	add	r18, r18
    21b8:	33 1f       	adc	r19, r19
    21ba:	aa 95       	dec	r26
    21bc:	e1 f7       	brne	.-8      	; 0x21b6 <_ZN4NMEA6decodeEc+0x282>
    21be:	ca 01       	movw	r24, r20
    21c0:	82 1b       	sub	r24, r18
    21c2:	93 0b       	sbc	r25, r19
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	80 83       	st	Z, r24
    _state++;
    21c8:	c1 5a       	subi	r28, 0xA1	; 161
    21ca:	de 4f       	sbci	r29, 0xFE	; 254
    21cc:	88 81       	ld	r24, Y
    21ce:	99 81       	ldd	r25, Y+1	; 0x01
    21d0:	01 96       	adiw	r24, 0x01	; 1
    21d2:	99 83       	std	Y+1, r25	; 0x01
    21d4:	88 83       	st	Y, r24
    21d6:	bc c1       	rjmp	.+888    	; 0x2550 <__stack+0x351>
    break;
  case 3:
  	// second char after '*' completes the checksum (LSB)
    _sentence[n++] = c;
    21d8:	fe 01       	movw	r30, r28
    21da:	e8 0f       	add	r30, r24
    21dc:	f9 1f       	adc	r31, r25
    21de:	e5 54       	subi	r30, 0x45	; 69
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	60 83       	st	Z, r22
    21e4:	01 96       	adiw	r24, 0x01	; 1
    _sentence[n++] = 0;
    21e6:	fe 01       	movw	r30, r28
    21e8:	e8 0f       	add	r30, r24
    21ea:	f9 1f       	adc	r31, r25
    21ec:	e5 54       	subi	r30, 0x45	; 69
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	10 82       	st	Z, r1
    21f2:	fe 01       	movw	r30, r28
    21f4:	e5 5a       	subi	r30, 0xA5	; 165
    21f6:	fe 4f       	sbci	r31, 0xFE	; 254
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	91 83       	std	Z+1, r25	; 0x01
    21fc:	80 83       	st	Z, r24
    (_term[_terms])[_nt++] = c;
    21fe:	9e 01       	movw	r18, r28
    2200:	2d 59       	subi	r18, 0x9D	; 157
    2202:	3e 4f       	sbci	r19, 0xFE	; 254
    2204:	d9 01       	movw	r26, r18
    2206:	4d 91       	ld	r20, X+
    2208:	5c 91       	ld	r21, X
    220a:	ce 01       	movw	r24, r28
    220c:	87 54       	subi	r24, 0x47	; 71
    220e:	9f 4f       	sbci	r25, 0xFF	; 255
    2210:	dc 01       	movw	r26, r24
    2212:	ed 91       	ld	r30, X+
    2214:	fc 91       	ld	r31, X
    2216:	11 97       	sbiw	r26, 0x01	; 1
    2218:	ee 0f       	add	r30, r30
    221a:	ff 1f       	adc	r31, r31
    221c:	ec 0f       	add	r30, r28
    221e:	fd 1f       	adc	r31, r29
    2220:	e1 5e       	subi	r30, 0xE1	; 225
    2222:	fe 4f       	sbci	r31, 0xFE	; 254
    2224:	01 90       	ld	r0, Z+
    2226:	f0 81       	ld	r31, Z
    2228:	e0 2d       	mov	r30, r0
    222a:	e4 0f       	add	r30, r20
    222c:	f5 1f       	adc	r31, r21
    222e:	60 83       	st	Z, r22
    2230:	4f 5f       	subi	r20, 0xFF	; 255
    2232:	5f 4f       	sbci	r21, 0xFF	; 255
    2234:	f9 01       	movw	r30, r18
    2236:	51 83       	std	Z+1, r21	; 0x01
    2238:	40 83       	st	Z, r20
    (_term[_terms++])[_nt] = 0;
    223a:	2d 91       	ld	r18, X+
    223c:	3c 91       	ld	r19, X
    223e:	11 97       	sbiw	r26, 0x01	; 1
    2240:	f9 01       	movw	r30, r18
    2242:	ee 0f       	add	r30, r30
    2244:	ff 1f       	adc	r31, r31
    2246:	ec 0f       	add	r30, r28
    2248:	fd 1f       	adc	r31, r29
    224a:	e1 5e       	subi	r30, 0xE1	; 225
    224c:	fe 4f       	sbci	r31, 0xFE	; 254
    224e:	01 90       	ld	r0, Z+
    2250:	f0 81       	ld	r31, Z
    2252:	e0 2d       	mov	r30, r0
    2254:	e4 0f       	add	r30, r20
    2256:	f5 1f       	adc	r31, r21
    2258:	10 82       	st	Z, r1
    225a:	2f 5f       	subi	r18, 0xFF	; 255
    225c:	3f 4f       	sbci	r19, 0xFF	; 255
    225e:	2d 93       	st	X+, r18
    2260:	3c 93       	st	X, r19
    _state = 0;
    2262:	d8 01       	movw	r26, r16
    2264:	11 96       	adiw	r26, 0x01	; 1
    2266:	1c 92       	st	X, r1
    2268:	1e 92       	st	-X, r1
    _parity = _parity - _dehex(c);
    226a:	fe 01       	movw	r30, r28
    226c:	ef 59       	subi	r30, 0x9F	; 159
    226e:	fe 4f       	sbci	r31, 0xFE	; 254
    2270:	20 81       	ld	r18, Z
    2272:	31 81       	ldd	r19, Z+1	; 0x01
    2274:	86 2f       	mov	r24, r22
    2276:	99 27       	eor	r25, r25
    2278:	87 fd       	sbrc	r24, 7
    227a:	90 95       	com	r25
}

int NMEA::_dehex(char a) {
	// returns base-16 value of chars '0'-'9' and 'A'-'F';
	// does not trap invalid chars!
  if (int(a) >= 65) {
    227c:	61 34       	cpi	r22, 0x41	; 65
    227e:	14 f0       	brlt	.+4      	; 0x2284 <__stack+0x85>
    return int(a)-55;
    2280:	c7 97       	sbiw	r24, 0x37	; 55
    2282:	01 c0       	rjmp	.+2      	; 0x2286 <__stack+0x87>
  }
  else {
    return int(a)-48;
    2284:	c0 97       	sbiw	r24, 0x30	; 48
    _sentence[n++] = c;
    _sentence[n++] = 0;
    (_term[_terms])[_nt++] = c;
    (_term[_terms++])[_nt] = 0;
    _state = 0;
    _parity = _parity - _dehex(c);
    2286:	f9 01       	movw	r30, r18
    2288:	e8 1b       	sub	r30, r24
    228a:	f9 0b       	sbc	r31, r25
    228c:	cf 01       	movw	r24, r30
    228e:	fe 01       	movw	r30, r28
    2290:	ef 59       	subi	r30, 0x9F	; 159
    2292:	fe 4f       	sbci	r31, 0xFE	; 254
    2294:	91 83       	std	Z+1, r25	; 0x01
    2296:	80 83       	st	Z, r24
    // when parity is zero, checksum was correct!
    if (_parity == 0) {
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	09 f0       	breq	.+2      	; 0x229e <__stack+0x9f>
    229c:	59 c1       	rjmp	.+690    	; 0x2550 <__stack+0x351>
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
    229e:	88 81       	ld	r24, Y
    22a0:	99 81       	ldd	r25, Y+1	; 0x01
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	79 f4       	brne	.+30     	; 0x22c4 <__stack+0xc5>
    22a6:	fe 01       	movw	r30, r28
    22a8:	e5 5a       	subi	r30, 0xA5	; 165
    22aa:	fe 4f       	sbci	r31, 0xFE	; 254
    22ac:	80 81       	ld	r24, Z
    22ae:	91 81       	ldd	r25, Z+1	; 0x01

//
// public methods
//

int NMEA::decode(char c) {
    22b0:	dc 01       	movw	r26, r24
    22b2:	a5 54       	subi	r26, 0x45	; 69
    22b4:	bf 4f       	sbci	r27, 0xFF	; 255
    22b6:	ac 0f       	add	r26, r28
    22b8:	bd 1f       	adc	r27, r29
    22ba:	fc 01       	movw	r30, r24
    22bc:	77 96       	adiw	r30, 0x17	; 23
    22be:	ec 0f       	add	r30, r28
    22c0:	fd 1f       	adc	r31, r29
    22c2:	0c c0       	rjmp	.+24     	; 0x22dc <__stack+0xdd>
    _state = 0;
    _parity = _parity - _dehex(c);
    // when parity is zero, checksum was correct!
    if (_parity == 0) {
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
    22c4:	fe 01       	movw	r30, r28
    22c6:	e3 5a       	subi	r30, 0xA3	; 163
    22c8:	fe 4f       	sbci	r31, 0xFE	; 254
    22ca:	80 81       	ld	r24, Z
    22cc:	91 81       	ldd	r25, Z+1	; 0x01
    22ce:	86 30       	cpi	r24, 0x06	; 6
    22d0:	91 05       	cpc	r25, r1
    22d2:	09 f0       	breq	.+2      	; 0x22d6 <__stack+0xd7>
    22d4:	3d c1       	rjmp	.+634    	; 0x2550 <__stack+0x351>
    22d6:	e7 cf       	rjmp	.-50     	; 0x22a6 <__stack+0xa7>
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
    22d8:	2e 91       	ld	r18, -X
    22da:	22 93       	st	-Z, r18

//
// public methods
//

int NMEA::decode(char c) {
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    // when parity is zero, checksum was correct!
    if (_parity == 0) {
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
    22de:	97 ff       	sbrs	r25, 7
    22e0:	fb cf       	rjmp	.-10     	; 0x22d8 <__stack+0xd9>
    22e2:	fe 01       	movw	r30, r28
    22e4:	e5 5a       	subi	r30, 0xA5	; 165
    22e6:	fe 4f       	sbci	r31, 0xFE	; 254
    22e8:	91 83       	std	Z+1, r25	; 0x01
    22ea:	80 83       	st	Z, r24
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    22ec:	de 01       	movw	r26, r28
    22ee:	a9 54       	subi	r26, 0x49	; 73
    22f0:	bf 4f       	sbci	r27, 0xFF	; 255
    22f2:	11 96       	adiw	r26, 0x01	; 1
    22f4:	1c 92       	st	X, r1
    22f6:	1e 92       	st	-X, r1
    22f8:	bd 01       	movw	r22, r26
    22fa:	8e 01       	movw	r16, r28
    22fc:	07 54       	subi	r16, 0x47	; 71
    22fe:	1f 4f       	sbci	r17, 0xFF	; 255
	      	_nt = 0;
    2300:	83 e6       	ldi	r24, 0x63	; 99
    2302:	e8 2e       	mov	r14, r24
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	f8 2e       	mov	r15, r24
    2308:	ec 0e       	add	r14, r28
    230a:	fd 1e       	adc	r15, r29
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    230c:	37 c0       	rjmp	.+110    	; 0x237c <__stack+0x17d>
	      	_nt = 0;
    230e:	f7 01       	movw	r30, r14
    2310:	11 82       	std	Z+1, r1	; 0x01
    2312:	10 82       	st	Z, r1
	      	while ((_term[f_terms])[_nt]) {
    2314:	0d c0       	rjmp	.+26     	; 0x2330 <__stack+0x131>
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
    2316:	fc 01       	movw	r30, r24
    2318:	80 81       	ld	r24, Z
    231a:	91 81       	ldd	r25, Z+1	; 0x01
    231c:	82 0f       	add	r24, r18
    231e:	93 1f       	adc	r25, r19
    2320:	fc 01       	movw	r30, r24
    2322:	40 83       	st	Z, r20
	        	_nt++;
    2324:	f7 01       	movw	r30, r14
    2326:	80 81       	ld	r24, Z
    2328:	91 81       	ldd	r25, Z+1	; 0x01
    232a:	01 96       	adiw	r24, 0x01	; 1
    232c:	91 83       	std	Z+1, r25	; 0x01
    232e:	80 83       	st	Z, r24
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
	      	_nt = 0;
	      	while ((_term[f_terms])[_nt]) {
    2330:	fb 01       	movw	r30, r22
    2332:	80 81       	ld	r24, Z
    2334:	91 81       	ldd	r25, Z+1	; 0x01
    2336:	f7 01       	movw	r30, r14
    2338:	20 81       	ld	r18, Z
    233a:	31 81       	ldd	r19, Z+1	; 0x01
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	8c 0f       	add	r24, r28
    2342:	9d 1f       	adc	r25, r29
    2344:	ac 01       	movw	r20, r24
    2346:	41 5e       	subi	r20, 0xE1	; 225
    2348:	5e 4f       	sbci	r21, 0xFE	; 254
    234a:	fa 01       	movw	r30, r20
    234c:	40 81       	ld	r20, Z
    234e:	51 81       	ldd	r21, Z+1	; 0x01
    2350:	42 0f       	add	r20, r18
    2352:	53 1f       	adc	r21, r19
    2354:	fa 01       	movw	r30, r20
    2356:	40 81       	ld	r20, Z
    2358:	85 58       	subi	r24, 0x85	; 133
    235a:	9f 4f       	sbci	r25, 0xFF	; 255
    235c:	44 23       	and	r20, r20
    235e:	d9 f6       	brne	.-74     	; 0x2316 <__stack+0x117>
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
	        	_nt++;
	        }
	        (f_term[f_terms])[_nt] = 0;
    2360:	fc 01       	movw	r30, r24
    2362:	80 81       	ld	r24, Z
    2364:	91 81       	ldd	r25, Z+1	; 0x01
    2366:	82 0f       	add	r24, r18
    2368:	93 1f       	adc	r25, r19
    236a:	fc 01       	movw	r30, r24
    236c:	10 82       	st	Z, r1
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    236e:	8d 91       	ld	r24, X+
    2370:	9c 91       	ld	r25, X
    2372:	11 97       	sbiw	r26, 0x01	; 1
    2374:	01 96       	adiw	r24, 0x01	; 1
    2376:	11 96       	adiw	r26, 0x01	; 1
    2378:	9c 93       	st	X, r25
    237a:	8e 93       	st	-X, r24
    237c:	fb 01       	movw	r30, r22
    237e:	20 81       	ld	r18, Z
    2380:	31 81       	ldd	r19, Z+1	; 0x01
    2382:	f8 01       	movw	r30, r16
    2384:	80 81       	ld	r24, Z
    2386:	91 81       	ldd	r25, Z+1	; 0x01
    2388:	28 17       	cp	r18, r24
    238a:	39 07       	cpc	r19, r25
    238c:	0c f4       	brge	.+2      	; 0x2390 <__stack+0x191>
    238e:	bf cf       	rjmp	.-130    	; 0x230e <__stack+0x10f>
	        	_nt++;
	        }
	        (f_term[f_terms])[_nt] = 0;
	      }
	      // when sentence is of datatype GPRMC
	      if (_gprmc_tag == 6) {
    2390:	fe 01       	movw	r30, r28
    2392:	e3 5a       	subi	r30, 0xA3	; 163
    2394:	fe 4f       	sbci	r31, 0xFE	; 254
    2396:	80 81       	ld	r24, Z
    2398:	91 81       	ldd	r25, Z+1	; 0x01
    239a:	86 30       	cpi	r24, 0x06	; 6
    239c:	91 05       	cpc	r25, r1
    239e:	09 f0       	breq	.+2      	; 0x23a2 <__stack+0x1a3>
    23a0:	da c0       	rjmp	.+436    	; 0x2556 <__stack+0x357>
	      	// store values of relevant GPRMC terms
	      	_gprmc_utc = _decimal(_term[1]);
    23a2:	fe 01       	movw	r30, r28
    23a4:	ef 5d       	subi	r30, 0xDF	; 223
    23a6:	fe 4f       	sbci	r31, 0xFE	; 254
    23a8:	60 81       	ld	r22, Z
    23aa:	71 81       	ldd	r23, Z+1	; 0x01
    23ac:	ce 01       	movw	r24, r28
    23ae:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZN4NMEA8_decimalEPc>
    23b2:	6a 83       	std	Y+2, r22	; 0x02
    23b4:	7b 83       	std	Y+3, r23	; 0x03
    23b6:	8c 83       	std	Y+4, r24	; 0x04
    23b8:	9d 83       	std	Y+5, r25	; 0x05
	      	_gprmc_status = (_term[2])[0];
    23ba:	fe 01       	movw	r30, r28
    23bc:	ed 5d       	subi	r30, 0xDD	; 221
    23be:	fe 4f       	sbci	r31, 0xFE	; 254
    23c0:	01 90       	ld	r0, Z+
    23c2:	f0 81       	ld	r31, Z
    23c4:	e0 2d       	mov	r30, r0
    23c6:	80 81       	ld	r24, Z
    23c8:	8e 83       	std	Y+6, r24	; 0x06
	        // calculate signed degree-decimal value of latitude term
	        _gprmc_lat = _decimal(_term[3]) / 100.0;
    23ca:	fe 01       	movw	r30, r28
    23cc:	eb 5d       	subi	r30, 0xDB	; 219
    23ce:	fe 4f       	sbci	r31, 0xFE	; 254
    23d0:	60 81       	ld	r22, Z
    23d2:	71 81       	ldd	r23, Z+1	; 0x01
    23d4:	ce 01       	movw	r24, r28
    23d6:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZN4NMEA8_decimalEPc>
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	48 ec       	ldi	r20, 0xC8	; 200
    23e0:	52 e4       	ldi	r21, 0x42	; 66
    23e2:	0e 94 a0 44 	call	0x8940	; 0x8940 <__divsf3>
    23e6:	5b 01       	movw	r10, r22
    23e8:	6c 01       	movw	r12, r24
	        _degs = floor(_gprmc_lat);
    23ea:	7b 2d       	mov	r23, r11
    23ec:	9d 2d       	mov	r25, r13
    23ee:	0e 94 76 45 	call	0x8aec	; 0x8aec <floor>
    23f2:	7b 01       	movw	r14, r22
    23f4:	8c 01       	movw	r16, r24
    23f6:	fe 01       	movw	r30, r28
    23f8:	eb 59       	subi	r30, 0x9B	; 155
    23fa:	fe 4f       	sbci	r31, 0xFE	; 254
    23fc:	60 83       	st	Z, r22
    23fe:	71 83       	std	Z+1, r23	; 0x01
    2400:	82 83       	std	Z+2, r24	; 0x02
    2402:	93 83       	std	Z+3, r25	; 0x03
	        _gprmc_lat = (100.0 * (_gprmc_lat - _degs)) / 60.0;
    2404:	6a 2d       	mov	r22, r10
    2406:	7b 2d       	mov	r23, r11
    2408:	8c 2d       	mov	r24, r12
    240a:	9d 2d       	mov	r25, r13
    240c:	a8 01       	movw	r20, r16
    240e:	97 01       	movw	r18, r14
    2410:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	48 ec       	ldi	r20, 0xC8	; 200
    241a:	52 e4       	ldi	r21, 0x42	; 66
    241c:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e7       	ldi	r20, 0x70	; 112
    2426:	52 e4       	ldi	r21, 0x42	; 66
    2428:	0e 94 a0 44 	call	0x8940	; 0x8940 <__divsf3>
	        _gprmc_lat += _degs;
    242c:	a8 01       	movw	r20, r16
    242e:	97 01       	movw	r18, r14
    2430:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    2434:	6b 01       	movw	r12, r22
    2436:	e8 2e       	mov	r14, r24
    2438:	09 2f       	mov	r16, r25
    243a:	76 2f       	mov	r23, r22
    243c:	27 2f       	mov	r18, r23
    243e:	3d 2d       	mov	r19, r13
    2440:	4e 2d       	mov	r20, r14
    2442:	50 2f       	mov	r21, r16
    2444:	2f 83       	std	Y+7, r18	; 0x07
    2446:	38 87       	std	Y+8, r19	; 0x08
    2448:	49 87       	std	Y+9, r20	; 0x09
    244a:	5a 87       	std	Y+10, r21	; 0x0a
	        // southern hemisphere is negative-valued
	        if ((_term[4])[0] == 'S') {
    244c:	fe 01       	movw	r30, r28
    244e:	e9 5d       	subi	r30, 0xD9	; 217
    2450:	fe 4f       	sbci	r31, 0xFE	; 254
    2452:	01 90       	ld	r0, Z+
    2454:	f0 81       	ld	r31, Z
    2456:	e0 2d       	mov	r30, r0
    2458:	80 81       	ld	r24, Z
    245a:	83 35       	cpi	r24, 0x53	; 83
    245c:	49 f4       	brne	.+18     	; 0x2470 <__stack+0x271>
	          _gprmc_lat = 0.0 - _gprmc_lat;
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	70 e0       	ldi	r23, 0x00	; 0
    2462:	cb 01       	movw	r24, r22
    2464:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    2468:	6f 83       	std	Y+7, r22	; 0x07
    246a:	78 87       	std	Y+8, r23	; 0x08
    246c:	89 87       	std	Y+9, r24	; 0x09
    246e:	9a 87       	std	Y+10, r25	; 0x0a
	        }
	        // calculate signed degree-decimal value of longitude term
	        _gprmc_long = _decimal(_term[5]) / 100.0;
    2470:	fe 01       	movw	r30, r28
    2472:	e7 5d       	subi	r30, 0xD7	; 215
    2474:	fe 4f       	sbci	r31, 0xFE	; 254
    2476:	60 81       	ld	r22, Z
    2478:	71 81       	ldd	r23, Z+1	; 0x01
    247a:	ce 01       	movw	r24, r28
    247c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZN4NMEA8_decimalEPc>
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	48 ec       	ldi	r20, 0xC8	; 200
    2486:	52 e4       	ldi	r21, 0x42	; 66
    2488:	0e 94 a0 44 	call	0x8940	; 0x8940 <__divsf3>
    248c:	5b 01       	movw	r10, r22
    248e:	6c 01       	movw	r12, r24
	        _degs = floor(_gprmc_long);
    2490:	7b 2d       	mov	r23, r11
    2492:	9d 2d       	mov	r25, r13
    2494:	0e 94 76 45 	call	0x8aec	; 0x8aec <floor>
    2498:	7b 01       	movw	r14, r22
    249a:	8c 01       	movw	r16, r24
    249c:	fe 01       	movw	r30, r28
    249e:	eb 59       	subi	r30, 0x9B	; 155
    24a0:	fe 4f       	sbci	r31, 0xFE	; 254
    24a2:	60 83       	st	Z, r22
    24a4:	71 83       	std	Z+1, r23	; 0x01
    24a6:	82 83       	std	Z+2, r24	; 0x02
    24a8:	93 83       	std	Z+3, r25	; 0x03
	        _gprmc_long = (100.0 * (_gprmc_long - _degs)) / 60.0;
    24aa:	6a 2d       	mov	r22, r10
    24ac:	7b 2d       	mov	r23, r11
    24ae:	8c 2d       	mov	r24, r12
    24b0:	9d 2d       	mov	r25, r13
    24b2:	a8 01       	movw	r20, r16
    24b4:	97 01       	movw	r18, r14
    24b6:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	48 ec       	ldi	r20, 0xC8	; 200
    24c0:	52 e4       	ldi	r21, 0x42	; 66
    24c2:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e7       	ldi	r20, 0x70	; 112
    24cc:	52 e4       	ldi	r21, 0x42	; 66
    24ce:	0e 94 a0 44 	call	0x8940	; 0x8940 <__divsf3>
	        _gprmc_long += _degs;
    24d2:	a8 01       	movw	r20, r16
    24d4:	97 01       	movw	r18, r14
    24d6:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    24da:	6b 01       	movw	r12, r22
    24dc:	e8 2e       	mov	r14, r24
    24de:	09 2f       	mov	r16, r25
    24e0:	76 2f       	mov	r23, r22
    24e2:	27 2f       	mov	r18, r23
    24e4:	3d 2d       	mov	r19, r13
    24e6:	4e 2d       	mov	r20, r14
    24e8:	50 2f       	mov	r21, r16
    24ea:	2b 87       	std	Y+11, r18	; 0x0b
    24ec:	3c 87       	std	Y+12, r19	; 0x0c
    24ee:	4d 87       	std	Y+13, r20	; 0x0d
    24f0:	5e 87       	std	Y+14, r21	; 0x0e
	        // western hemisphere is negative-valued
	        if ((_term[6])[0] == 'W') {
    24f2:	fe 01       	movw	r30, r28
    24f4:	e5 5d       	subi	r30, 0xD5	; 213
    24f6:	fe 4f       	sbci	r31, 0xFE	; 254
    24f8:	01 90       	ld	r0, Z+
    24fa:	f0 81       	ld	r31, Z
    24fc:	e0 2d       	mov	r30, r0
    24fe:	80 81       	ld	r24, Z
    2500:	87 35       	cpi	r24, 0x57	; 87
    2502:	49 f4       	brne	.+18     	; 0x2516 <__stack+0x317>
	          _gprmc_long = 0.0 - _gprmc_long;
    2504:	60 e0       	ldi	r22, 0x00	; 0
    2506:	70 e0       	ldi	r23, 0x00	; 0
    2508:	cb 01       	movw	r24, r22
    250a:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    250e:	6b 87       	std	Y+11, r22	; 0x0b
    2510:	7c 87       	std	Y+12, r23	; 0x0c
    2512:	8d 87       	std	Y+13, r24	; 0x0d
    2514:	9e 87       	std	Y+14, r25	; 0x0e
	        }
	        _gprmc_speed = _decimal(_term[7]);
    2516:	fe 01       	movw	r30, r28
    2518:	e3 5d       	subi	r30, 0xD3	; 211
    251a:	fe 4f       	sbci	r31, 0xFE	; 254
    251c:	60 81       	ld	r22, Z
    251e:	71 81       	ldd	r23, Z+1	; 0x01
    2520:	ce 01       	movw	r24, r28
    2522:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZN4NMEA8_decimalEPc>
    2526:	6f 87       	std	Y+15, r22	; 0x0f
    2528:	78 8b       	std	Y+16, r23	; 0x10
    252a:	89 8b       	std	Y+17, r24	; 0x11
    252c:	9a 8b       	std	Y+18, r25	; 0x12
	        _gprmc_angle = _decimal(_term[8]);
    252e:	fe 01       	movw	r30, r28
    2530:	e1 5d       	subi	r30, 0xD1	; 209
    2532:	fe 4f       	sbci	r31, 0xFE	; 254
    2534:	60 81       	ld	r22, Z
    2536:	71 81       	ldd	r23, Z+1	; 0x01
    2538:	ce 01       	movw	r24, r28
    253a:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZN4NMEA8_decimalEPc>
    253e:	6b 8b       	std	Y+19, r22	; 0x13
    2540:	7c 8b       	std	Y+20, r23	; 0x14
    2542:	8d 8b       	std	Y+21, r24	; 0x15
    2544:	9e 8b       	std	Y+22, r25	; 0x16
    2546:	07 c0       	rjmp	.+14     	; 0x2556 <__stack+0x357>
      	return 1;
      }
    }
    break;
  default:
    _state = 0;
    2548:	c1 5a       	subi	r28, 0xA1	; 161
    254a:	de 4f       	sbci	r29, 0xFE	; 254
    254c:	19 82       	std	Y+1, r1	; 0x01
    254e:	18 82       	st	Y, r1
    break;
  }
  return 0;
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	02 c0       	rjmp	.+4      	; 0x255a <__stack+0x35b>
	        }
	        _gprmc_speed = _decimal(_term[7]);
	        _gprmc_angle = _decimal(_term[8]);
	      }
      	// sentence accepted!
      	return 1;
    2556:	21 e0       	ldi	r18, 0x01	; 1
    2558:	30 e0       	ldi	r19, 0x00	; 0
  default:
    _state = 0;
    break;
  }
  return 0;
}
    255a:	c9 01       	movw	r24, r18
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    2564:	ff 90       	pop	r15
    2566:	ef 90       	pop	r14
    2568:	df 90       	pop	r13
    256a:	cf 90       	pop	r12
    256c:	bf 90       	pop	r11
    256e:	af 90       	pop	r10
    2570:	08 95       	ret

00002572 <_ZN11FlexiTimer23setEmdPFvvE>:
/**
 * @param resolution
 *   0.001 implies a 1 ms (1/1000s = 0.001s = 1ms) resolution. Therefore,
 *   0.0005 implies a 0.5 ms (1/2000s) resolution. And so on.
 */
void FlexiTimer2::set(unsigned long units, double resolution, void (*f)()) {
    2572:	cf 92       	push	r12
    2574:	df 92       	push	r13
    2576:	ef 92       	push	r14
    2578:	ff 92       	push	r15
    257a:	0f 93       	push	r16
    257c:	1f 93       	push	r17
    257e:	6b 01       	movw	r12, r22
    2580:	7c 01       	movw	r14, r24
    2582:	ca 01       	movw	r24, r20
    2584:	b9 01       	movw	r22, r18
	float prescaler = 0.0;
	
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TIMSK2 &= ~(1<<TOIE2);
    2586:	20 91 70 00 	lds	r18, 0x0070
    258a:	2e 7f       	andi	r18, 0xFE	; 254
    258c:	20 93 70 00 	sts	0x0070, r18
	TCCR2A &= ~((1<<WGM21) | (1<<WGM20));
    2590:	20 91 b0 00 	lds	r18, 0x00B0
    2594:	2c 7f       	andi	r18, 0xFC	; 252
    2596:	20 93 b0 00 	sts	0x00B0, r18
	TCCR2B &= ~(1<<WGM22);
    259a:	20 91 b1 00 	lds	r18, 0x00B1
    259e:	27 7f       	andi	r18, 0xF7	; 247
    25a0:	20 93 b1 00 	sts	0x00B1, r18
	ASSR &= ~(1<<AS2);
    25a4:	20 91 b6 00 	lds	r18, 0x00B6
    25a8:	2f 7d       	andi	r18, 0xDF	; 223
    25aa:	20 93 b6 00 	sts	0x00B6, r18
	TIMSK2 &= ~(1<<OCIE2A);
    25ae:	20 91 70 00 	lds	r18, 0x0070
    25b2:	2d 7f       	andi	r18, 0xFD	; 253
    25b4:	20 93 70 00 	sts	0x0070, r18
	
	if ((F_CPU >= 1000000UL) && (F_CPU <= 16000000UL)) {	// prescaler set to 64
		TCCR2B |= (1<<CS22);
    25b8:	20 91 b1 00 	lds	r18, 0x00B1
    25bc:	24 60       	ori	r18, 0x04	; 4
    25be:	20 93 b1 00 	sts	0x00B1, r18
		TCCR2B &= ~((1<<CS21) | (1<<CS20));
    25c2:	20 91 b1 00 	lds	r18, 0x00B1
    25c6:	2c 7f       	andi	r18, 0xFC	; 252
    25c8:	20 93 b1 00 	sts	0x00B1, r18
		TCCR2 &= ~((1<<CS21) | (1<<CS20));
		prescaler = 256.0;
	}
#endif
	
	tcnt2 = 256 - (int)((float)F_CPU * resolution / prescaler);
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	34 e2       	ldi	r19, 0x24	; 36
    25d0:	44 e7       	ldi	r20, 0x74	; 116
    25d2:	5b e4       	ldi	r21, 0x4B	; 75
    25d4:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e8       	ldi	r20, 0x80	; 128
    25de:	5c e3       	ldi	r21, 0x3C	; 60
    25e0:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    25e4:	0e 94 08 45 	call	0x8a10	; 0x8a10 <__fixsfsi>
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	91 e0       	ldi	r25, 0x01	; 1
    25ec:	86 1b       	sub	r24, r22
    25ee:	97 0b       	sbc	r25, r23
    25f0:	90 93 81 08 	sts	0x0881, r25
    25f4:	80 93 80 08 	sts	0x0880, r24
	
	if (units == 0)
    25f8:	c1 14       	cp	r12, r1
    25fa:	d1 04       	cpc	r13, r1
    25fc:	e1 04       	cpc	r14, r1
    25fe:	f1 04       	cpc	r15, r1
    2600:	69 f4       	brne	.+26     	; 0x261c <_ZN11FlexiTimer23setEmdPFvvE+0xaa>
		time_units = 1;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	a0 e0       	ldi	r26, 0x00	; 0
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	80 93 75 08 	sts	0x0875, r24
    260e:	90 93 76 08 	sts	0x0876, r25
    2612:	a0 93 77 08 	sts	0x0877, r26
    2616:	b0 93 78 08 	sts	0x0878, r27
    261a:	08 c0       	rjmp	.+16     	; 0x262c <_ZN11FlexiTimer23setEmdPFvvE+0xba>
	else
		time_units = units;
    261c:	c0 92 75 08 	sts	0x0875, r12
    2620:	d0 92 76 08 	sts	0x0876, r13
    2624:	e0 92 77 08 	sts	0x0877, r14
    2628:	f0 92 78 08 	sts	0x0878, r15
		
	func = f;
    262c:	10 93 7a 08 	sts	0x087A, r17
    2630:	00 93 79 08 	sts	0x0879, r16
}
    2634:	1f 91       	pop	r17
    2636:	0f 91       	pop	r16
    2638:	ff 90       	pop	r15
    263a:	ef 90       	pop	r14
    263c:	df 90       	pop	r13
    263e:	cf 90       	pop	r12
    2640:	08 95       	ret

00002642 <_ZN11FlexiTimer23setEmPFvvE>:
void (*FlexiTimer2::func)();
volatile unsigned long FlexiTimer2::count;
volatile char FlexiTimer2::overflowing;
volatile unsigned int FlexiTimer2::tcnt2;

void FlexiTimer2::set(unsigned long ms, void (*f)()) {
    2642:	0f 93       	push	r16
    2644:	1f 93       	push	r17
    2646:	8a 01       	movw	r16, r20
    FlexiTimer2::set(ms, 0.001, f);
    2648:	2f e6       	ldi	r18, 0x6F	; 111
    264a:	32 e1       	ldi	r19, 0x12	; 18
    264c:	43 e8       	ldi	r20, 0x83	; 131
    264e:	5a e3       	ldi	r21, 0x3A	; 58
    2650:	0e 94 b9 12 	call	0x2572	; 0x2572 <_ZN11FlexiTimer23setEmdPFvvE>
}
    2654:	1f 91       	pop	r17
    2656:	0f 91       	pop	r16
    2658:	08 95       	ret

0000265a <_ZN11FlexiTimer25startEv>:
		
	func = f;
}

void FlexiTimer2::start() {
	count = 0;
    265a:	10 92 7b 08 	sts	0x087B, r1
    265e:	10 92 7c 08 	sts	0x087C, r1
    2662:	10 92 7d 08 	sts	0x087D, r1
    2666:	10 92 7e 08 	sts	0x087E, r1
	overflowing = 0;
    266a:	10 92 7f 08 	sts	0x087F, r1
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TCNT2 = tcnt2;
    266e:	80 91 80 08 	lds	r24, 0x0880
    2672:	90 91 81 08 	lds	r25, 0x0881
    2676:	80 93 b2 00 	sts	0x00B2, r24
	TIMSK2 |= (1<<TOIE2);
    267a:	e0 e7       	ldi	r30, 0x70	; 112
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	81 60       	ori	r24, 0x01	; 1
    2682:	80 83       	st	Z, r24
	TIMSK |= (1<<TOIE2);
#elif defined (__AVR_ATmega8__)
	TCNT2 = tcnt2;
	TIMSK |= (1<<TOIE2);
#endif
}
    2684:	08 95       	ret

00002686 <_ZN11FlexiTimer29_overflowEv>:
	TIMSK &= ~(1<<TOIE2);
#endif
}

void FlexiTimer2::_overflow() {
	count += 1;
    2686:	80 91 7b 08 	lds	r24, 0x087B
    268a:	90 91 7c 08 	lds	r25, 0x087C
    268e:	a0 91 7d 08 	lds	r26, 0x087D
    2692:	b0 91 7e 08 	lds	r27, 0x087E
    2696:	01 96       	adiw	r24, 0x01	; 1
    2698:	a1 1d       	adc	r26, r1
    269a:	b1 1d       	adc	r27, r1
    269c:	80 93 7b 08 	sts	0x087B, r24
    26a0:	90 93 7c 08 	sts	0x087C, r25
    26a4:	a0 93 7d 08 	sts	0x087D, r26
    26a8:	b0 93 7e 08 	sts	0x087E, r27
	
	if (count >= time_units && !overflowing) {
    26ac:	20 91 7b 08 	lds	r18, 0x087B
    26b0:	30 91 7c 08 	lds	r19, 0x087C
    26b4:	40 91 7d 08 	lds	r20, 0x087D
    26b8:	50 91 7e 08 	lds	r21, 0x087E
    26bc:	80 91 75 08 	lds	r24, 0x0875
    26c0:	90 91 76 08 	lds	r25, 0x0876
    26c4:	a0 91 77 08 	lds	r26, 0x0877
    26c8:	b0 91 78 08 	lds	r27, 0x0878
    26cc:	28 17       	cp	r18, r24
    26ce:	39 07       	cpc	r19, r25
    26d0:	4a 07       	cpc	r20, r26
    26d2:	5b 07       	cpc	r21, r27
    26d4:	b0 f0       	brcs	.+44     	; 0x2702 <_ZN11FlexiTimer29_overflowEv+0x7c>
    26d6:	80 91 7f 08 	lds	r24, 0x087F
    26da:	88 23       	and	r24, r24
    26dc:	91 f4       	brne	.+36     	; 0x2702 <_ZN11FlexiTimer29_overflowEv+0x7c>
		overflowing = 1;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	80 93 7f 08 	sts	0x087F, r24
		count = 0;
    26e4:	10 92 7b 08 	sts	0x087B, r1
    26e8:	10 92 7c 08 	sts	0x087C, r1
    26ec:	10 92 7d 08 	sts	0x087D, r1
    26f0:	10 92 7e 08 	sts	0x087E, r1
		(*func)();
    26f4:	e0 91 79 08 	lds	r30, 0x0879
    26f8:	f0 91 7a 08 	lds	r31, 0x087A
    26fc:	09 95       	icall
		overflowing = 0;
    26fe:	10 92 7f 08 	sts	0x087F, r1
    2702:	08 95       	ret

00002704 <__vector_15>:
	}
}

ISR(TIMER2_OVF_vect) {
    2704:	1f 92       	push	r1
    2706:	0f 92       	push	r0
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	0f 92       	push	r0
    270c:	0b b6       	in	r0, 0x3b	; 59
    270e:	0f 92       	push	r0
    2710:	11 24       	eor	r1, r1
    2712:	2f 93       	push	r18
    2714:	3f 93       	push	r19
    2716:	4f 93       	push	r20
    2718:	5f 93       	push	r21
    271a:	6f 93       	push	r22
    271c:	7f 93       	push	r23
    271e:	8f 93       	push	r24
    2720:	9f 93       	push	r25
    2722:	af 93       	push	r26
    2724:	bf 93       	push	r27
    2726:	ef 93       	push	r30
    2728:	ff 93       	push	r31
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TCNT2 = FlexiTimer2::tcnt2;
    272a:	80 91 80 08 	lds	r24, 0x0880
    272e:	90 91 81 08 	lds	r25, 0x0881
    2732:	80 93 b2 00 	sts	0x00B2, r24
#elif defined (__AVR_ATmega128__)
	TCNT2 = FlexiTimer2::tcnt2;
#elif defined (__AVR_ATmega8__)
	TCNT2 = FlexiTimer2::tcnt2;
#endif
	FlexiTimer2::_overflow();
    2736:	0e 94 43 13 	call	0x2686	; 0x2686 <_ZN11FlexiTimer29_overflowEv>
}
    273a:	ff 91       	pop	r31
    273c:	ef 91       	pop	r30
    273e:	bf 91       	pop	r27
    2740:	af 91       	pop	r26
    2742:	9f 91       	pop	r25
    2744:	8f 91       	pop	r24
    2746:	7f 91       	pop	r23
    2748:	6f 91       	pop	r22
    274a:	5f 91       	pop	r21
    274c:	4f 91       	pop	r20
    274e:	3f 91       	pop	r19
    2750:	2f 91       	pop	r18
    2752:	0f 90       	pop	r0
    2754:	0b be       	out	0x3b, r0	; 59
    2756:	0f 90       	pop	r0
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	0f 90       	pop	r0
    275c:	1f 90       	pop	r1
    275e:	18 95       	reti

00002760 <_ZN12FirmataClass11systemResetEv>:



// resets the system state upon a SYSTEM_RESET message from the host software
void FirmataClass::systemReset(void)
{
    2760:	fc 01       	movw	r30, r24
  byte i;

  waitForData = 0; // this flag says the next serial input will be data
    2762:	15 82       	std	Z+5, r1	; 0x05
  executeMultiByteCommand = 0; // execute this after getting multi-byte data
    2764:	16 82       	std	Z+6, r1	; 0x06
  multiByteChannel = 0; // channel data for multiByteCommands
    2766:	17 82       	std	Z+7, r1	; 0x07
//******************************************************************************



// resets the system state upon a SYSTEM_RESET message from the host software
void FirmataClass::systemReset(void)
    2768:	dc 01       	movw	r26, r24
    276a:	18 96       	adiw	r26, 0x08	; 8
    276c:	80 e2       	ldi	r24, 0x20	; 32
  executeMultiByteCommand = 0; // execute this after getting multi-byte data
  multiByteChannel = 0; // channel data for multiByteCommands


  for(i=0; i<MAX_DATA_BYTES; i++) {
    storedInputData[i] = 0;
    276e:	1d 92       	st	X+, r1
    2770:	81 50       	subi	r24, 0x01	; 1
  waitForData = 0; // this flag says the next serial input will be data
  executeMultiByteCommand = 0; // execute this after getting multi-byte data
  multiByteChannel = 0; // channel data for multiByteCommands


  for(i=0; i<MAX_DATA_BYTES; i++) {
    2772:	e9 f7       	brne	.-6      	; 0x276e <_ZN12FirmataClass11systemResetEv+0xe>
    storedInputData[i] = 0;
  }

  parsingSysex = false;
    2774:	10 a6       	std	Z+40, r1	; 0x28
  sysexBytesRead = 0;
    2776:	12 a6       	std	Z+42, r1	; 0x2a
    2778:	11 a6       	std	Z+41, r1	; 0x29

  if(currentSystemResetCallback)
    277a:	05 a8       	ldd	r0, Z+53	; 0x35
    277c:	f6 a9       	ldd	r31, Z+54	; 0x36
    277e:	e0 2d       	mov	r30, r0
    2780:	30 97       	sbiw	r30, 0x00	; 0
    2782:	09 f0       	breq	.+2      	; 0x2786 <_ZN12FirmataClass11systemResetEv+0x26>
    (*currentSystemResetCallback)();
    2784:	09 95       	icall
    2786:	08 95       	ret

00002788 <_GLOBAL__I__ZN12FirmataClass23sendValueAsTwo7bitBytesEi>:

//******************************************************************************
//* Constructors
//******************************************************************************

FirmataClass::FirmataClass(Stream &s) : FirmataSerial(s)
    2788:	87 e2       	ldi	r24, 0x27	; 39
    278a:	9e e0       	ldi	r25, 0x0E	; 14
    278c:	90 93 83 08 	sts	0x0883, r25
    2790:	80 93 82 08 	sts	0x0882, r24
{
  firmwareVersionCount = 0;
    2794:	10 92 84 08 	sts	0x0884, r1
  systemReset();
    2798:	82 e8       	ldi	r24, 0x82	; 130
    279a:	98 e0       	ldi	r25, 0x08	; 8
    279c:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN12FirmataClass11systemResetEv>
  }
}


// make one instance for the user to use
FirmataClass Firmata(Serial);
    27a0:	08 95       	ret

000027a2 <_ZN11EEPROMClass4readEi>:
/******************************************************************************
 * User API
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
    27a2:	cb 01       	movw	r24, r22
	return eeprom_read_byte((unsigned char *) address);
    27a4:	0e 94 33 49 	call	0x9266	; 0x9266 <__eerd_byte_m1280>
}
    27a8:	08 95       	ret

000027aa <_ZN11EEPROMClass5writeEih>:

void EEPROMClass::write(int address, uint8_t value)
{
    27aa:	cb 01       	movw	r24, r22
	eeprom_write_byte((unsigned char *) address, value);
    27ac:	64 2f       	mov	r22, r20
    27ae:	0e 94 3b 49 	call	0x9276	; 0x9276 <__eewr_byte_m1280>
}
    27b2:	08 95       	ret

000027b4 <_ZN5AlarmD1Ev>:
	pinMode(alarmPin1, OUTPUT);
	pinMode(alarmPin2, OUTPUT);
	pinMode(alarmPin3, OUTPUT);
}

Alarm::~Alarm() {
    27b4:	24 e1       	ldi	r18, 0x14	; 20
    27b6:	37 e0       	ldi	r19, 0x07	; 7
    27b8:	fc 01       	movw	r30, r24
    27ba:	31 83       	std	Z+1, r19	; 0x01
    27bc:	20 83       	st	Z, r18

}
    27be:	08 95       	ret

000027c0 <_ZN5AlarmD0Ev>:
	pinMode(alarmPin1, OUTPUT);
	pinMode(alarmPin2, OUTPUT);
	pinMode(alarmPin3, OUTPUT);
}

Alarm::~Alarm() {
    27c0:	24 e1       	ldi	r18, 0x14	; 20
    27c2:	37 e0       	ldi	r19, 0x07	; 7
    27c4:	fc 01       	movw	r30, r24
    27c6:	31 83       	std	Z+1, r19	; 0x01
    27c8:	20 83       	st	Z, r18

}
    27ca:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <_ZdlPv>
    27ce:	08 95       	ret

000027d0 <_ZN5AlarmC1Ev>:
 *      Author: robert
 */

#include "Alarm.h"

Alarm::Alarm() {
    27d0:	fc 01       	movw	r30, r24
    27d2:	84 e1       	ldi	r24, 0x14	; 20
    27d4:	97 e0       	ldi	r25, 0x07	; 7
    27d6:	91 83       	std	Z+1, r25	; 0x01
    27d8:	80 83       	st	Z, r24
	alarmBeepState = false;
    27da:	16 82       	std	Z+6, r1	; 0x06
	lastAlarm = 0;
    27dc:	12 82       	std	Z+2, r1	; 0x02
    27de:	13 82       	std	Z+3, r1	; 0x03
    27e0:	14 82       	std	Z+4, r1	; 0x04
    27e2:	15 82       	std	Z+5, r1	; 0x05
	alarmValue = 0;
    27e4:	17 82       	std	Z+7, r1	; 0x07
	pinMode(alarmPin0, OUTPUT);
    27e6:	86 e1       	ldi	r24, 0x16	; 22
    27e8:	61 e0       	ldi	r22, 0x01	; 1
    27ea:	0e 94 76 43 	call	0x86ec	; 0x86ec <pinMode>
	pinMode(alarmPin1, OUTPUT);
    27ee:	87 e1       	ldi	r24, 0x17	; 23
    27f0:	61 e0       	ldi	r22, 0x01	; 1
    27f2:	0e 94 76 43 	call	0x86ec	; 0x86ec <pinMode>
	pinMode(alarmPin2, OUTPUT);
    27f6:	88 e1       	ldi	r24, 0x18	; 24
    27f8:	61 e0       	ldi	r22, 0x01	; 1
    27fa:	0e 94 76 43 	call	0x86ec	; 0x86ec <pinMode>
	pinMode(alarmPin3, OUTPUT);
    27fe:	89 e1       	ldi	r24, 0x19	; 25
    2800:	61 e0       	ldi	r22, 0x01	; 1
    2802:	0e 94 76 43 	call	0x86ec	; 0x86ec <pinMode>
}
    2806:	08 95       	ret

00002808 <_ZN5Alarm14alarmTriggeredEv>:
	alarmValue=alarmValue+alarm;
}
void Alarm::clearAlarm(int alarm) {
	alarmValue=alarmValue-alarm;
}
bool Alarm::alarmTriggered() {
    2808:	ef 92       	push	r14
    280a:	ff 92       	push	r15
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	fc 01       	movw	r30, r24
	if (alarmValue > 0) {
    2812:	87 81       	ldd	r24, Z+7	; 0x07
    2814:	18 16       	cp	r1, r24
    2816:	64 f4       	brge	.+24     	; 0x2830 <_ZN5Alarm14alarmTriggeredEv+0x28>

void Alarm::setSnoozeAlarm(unsigned long value) {
	snoozeAlarm = value;
}
unsigned long Alarm::getSnoozeAlarm() {
	return snoozeAlarm;
    2818:	e0 84       	ldd	r14, Z+8	; 0x08
    281a:	f1 84       	ldd	r15, Z+9	; 0x09
    281c:	02 85       	ldd	r16, Z+10	; 0x0a
    281e:	13 85       	ldd	r17, Z+11	; 0x0b
void Alarm::clearAlarm(int alarm) {
	alarmValue=alarmValue-alarm;
}
bool Alarm::alarmTriggered() {
	if (alarmValue > 0) {
		if (getSnoozeAlarm() > millis()) {
    2820:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
	alarmValue=alarmValue+alarm;
}
void Alarm::clearAlarm(int alarm) {
	alarmValue=alarmValue-alarm;
}
bool Alarm::alarmTriggered() {
    2824:	21 e0       	ldi	r18, 0x01	; 1
    2826:	6e 15       	cp	r22, r14
    2828:	7f 05       	cpc	r23, r15
    282a:	80 07       	cpc	r24, r16
    282c:	91 07       	cpc	r25, r17
    282e:	08 f4       	brcc	.+2      	; 0x2832 <_ZN5Alarm14alarmTriggeredEv+0x2a>
		if (getSnoozeAlarm() > millis()) {
			return false;
		}
		return true;
	}
	return false;
    2830:	20 e0       	ldi	r18, 0x00	; 0
}
    2832:	82 2f       	mov	r24, r18
    2834:	1f 91       	pop	r17
    2836:	0f 91       	pop	r16
    2838:	ff 90       	pop	r15
    283a:	ef 90       	pop	r14
    283c:	08 95       	ret

0000283e <_ZN5Alarm20isWindAlarmTriggeredEv>:

bool Alarm::isWindAlarmTriggered() {
	if ((alarmValue & WINDALARM) == WINDALARM)
    283e:	fc 01       	movw	r30, r24
    2840:	97 81       	ldd	r25, Z+7	; 0x07
		return true;
	}
	return false;
}

bool Alarm::isWindAlarmTriggered() {
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	91 ff       	sbrs	r25, 1
    2846:	80 e0       	ldi	r24, 0x00	; 0
	if ((alarmValue & WINDALARM) == WINDALARM)
		return true;
	return false;
}
    2848:	08 95       	ret

0000284a <_ZN5Alarm21isRadarAlarmTriggeredEv>:

bool Alarm::isRadarAlarmTriggered() {
	if ((alarmValue & RADARALARM) == RADARALARM)
    284a:	fc 01       	movw	r30, r24
    284c:	97 81       	ldd	r25, Z+7	; 0x07
	if ((alarmValue & WINDALARM) == WINDALARM)
		return true;
	return false;
}

bool Alarm::isRadarAlarmTriggered() {
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	92 ff       	sbrs	r25, 2
    2852:	80 e0       	ldi	r24, 0x00	; 0
	if ((alarmValue & RADARALARM) == RADARALARM)
		return true;
	return false;
}
    2854:	08 95       	ret

00002856 <_ZN5Alarm19isMobAlarmTriggeredEv>:
bool Alarm::isMobAlarmTriggered() {
	if ((alarmValue & MOBALARM) == MOBALARM)
    2856:	fc 01       	movw	r30, r24
    2858:	97 81       	ldd	r25, Z+7	; 0x07
bool Alarm::isRadarAlarmTriggered() {
	if ((alarmValue & RADARALARM) == RADARALARM)
		return true;
	return false;
}
bool Alarm::isMobAlarmTriggered() {
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	93 ff       	sbrs	r25, 3
    285e:	80 e0       	ldi	r24, 0x00	; 0
	if ((alarmValue & MOBALARM) == MOBALARM)
		return true;
	return false;
}
    2860:	08 95       	ret

00002862 <_ZN5Alarm11checkAlarmsEv>:
/* Take action if alarms are triggered*/
void Alarm::checkAlarms() {
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	ec 01       	movw	r28, r24
	if (alarmTriggered()) {
    2868:	0e 94 04 14 	call	0x2808	; 0x2808 <_ZN5Alarm14alarmTriggeredEv>
    286c:	88 23       	and	r24, r24
    286e:	89 f1       	breq	.+98     	; 0x28d2 <_ZN5Alarm11checkAlarmsEv+0x70>
		//alarm beeps on off on off
		//once in the alarm state, hitting any button will give a 5 minute respite from the beeping, eg snooze
		if (millis() - lastAlarm > 1000) {
    2870:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    2874:	2a 81       	ldd	r18, Y+2	; 0x02
    2876:	3b 81       	ldd	r19, Y+3	; 0x03
    2878:	4c 81       	ldd	r20, Y+4	; 0x04
    287a:	5d 81       	ldd	r21, Y+5	; 0x05
    287c:	62 1b       	sub	r22, r18
    287e:	73 0b       	sbc	r23, r19
    2880:	84 0b       	sbc	r24, r20
    2882:	95 0b       	sbc	r25, r21
    2884:	69 3e       	cpi	r22, 0xE9	; 233
    2886:	23 e0       	ldi	r18, 0x03	; 3
    2888:	72 07       	cpc	r23, r18
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	82 07       	cpc	r24, r18
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	92 07       	cpc	r25, r18
    2892:	78 f1       	brcs	.+94     	; 0x28f2 <_ZN5Alarm11checkAlarmsEv+0x90>
			digitalWrite(alarmPin0, alarmBeepState);
    2894:	86 e1       	ldi	r24, 0x16	; 22
    2896:	6e 81       	ldd	r22, Y+6	; 0x06
    2898:	0e 94 9a 43 	call	0x8734	; 0x8734 <digitalWrite>
			digitalWrite(alarmPin1, alarmBeepState);
    289c:	87 e1       	ldi	r24, 0x17	; 23
    289e:	6e 81       	ldd	r22, Y+6	; 0x06
    28a0:	0e 94 9a 43 	call	0x8734	; 0x8734 <digitalWrite>
			digitalWrite(alarmPin2, alarmBeepState);
    28a4:	88 e1       	ldi	r24, 0x18	; 24
    28a6:	6e 81       	ldd	r22, Y+6	; 0x06
    28a8:	0e 94 9a 43 	call	0x8734	; 0x8734 <digitalWrite>
			digitalWrite(alarmPin3, alarmBeepState);
    28ac:	89 e1       	ldi	r24, 0x19	; 25
    28ae:	6e 81       	ldd	r22, Y+6	; 0x06
    28b0:	0e 94 9a 43 	call	0x8734	; 0x8734 <digitalWrite>
			alarmBeepState = !alarmBeepState;
    28b4:	8e 81       	ldd	r24, Y+6	; 0x06
    28b6:	91 e0       	ldi	r25, 0x01	; 1
    28b8:	89 27       	eor	r24, r25
    28ba:	8e 83       	std	Y+6, r24	; 0x06
			lastAlarm = millis();
    28bc:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    28c0:	6a 83       	std	Y+2, r22	; 0x02
    28c2:	7b 83       	std	Y+3, r23	; 0x03
    28c4:	8c 83       	std	Y+4, r24	; 0x04
    28c6:	9d 83       	std	Y+5, r25	; 0x05
			snoozeAlarm = 0; //5 minute alarm snooze
    28c8:	18 86       	std	Y+8, r1	; 0x08
    28ca:	19 86       	std	Y+9, r1	; 0x09
    28cc:	1a 86       	std	Y+10, r1	; 0x0a
    28ce:	1b 86       	std	Y+11, r1	; 0x0b
    28d0:	10 c0       	rjmp	.+32     	; 0x28f2 <_ZN5Alarm11checkAlarmsEv+0x90>
		}
	} else {
		//no alarm
		digitalWrite(alarmPin0, LOW);
    28d2:	86 e1       	ldi	r24, 0x16	; 22
    28d4:	60 e0       	ldi	r22, 0x00	; 0
    28d6:	0e 94 9a 43 	call	0x8734	; 0x8734 <digitalWrite>
		digitalWrite(alarmPin1, LOW);
    28da:	87 e1       	ldi	r24, 0x17	; 23
    28dc:	60 e0       	ldi	r22, 0x00	; 0
    28de:	0e 94 9a 43 	call	0x8734	; 0x8734 <digitalWrite>
		digitalWrite(alarmPin2, LOW);
    28e2:	88 e1       	ldi	r24, 0x18	; 24
    28e4:	60 e0       	ldi	r22, 0x00	; 0
    28e6:	0e 94 9a 43 	call	0x8734	; 0x8734 <digitalWrite>
		digitalWrite(alarmPin3, LOW);
    28ea:	89 e1       	ldi	r24, 0x19	; 25
    28ec:	60 e0       	ldi	r22, 0x00	; 0
    28ee:	0e 94 9a 43 	call	0x8734	; 0x8734 <digitalWrite>
	}
}
    28f2:	df 91       	pop	r29
    28f4:	cf 91       	pop	r28
    28f6:	08 95       	ret

000028f8 <_ZN5Alarm14setSnoozeAlarmEm>:

void Alarm::setSnoozeAlarm(unsigned long value) {
	snoozeAlarm = value;
    28f8:	fc 01       	movw	r30, r24
    28fa:	40 87       	std	Z+8, r20	; 0x08
    28fc:	51 87       	std	Z+9, r21	; 0x09
    28fe:	62 87       	std	Z+10, r22	; 0x0a
    2900:	73 87       	std	Z+11, r23	; 0x0b
}
    2902:	08 95       	ret

00002904 <_ZN6AnchorD1Ev>:
	anchorLon = getAnchorAlarmLon();
	anchorRadius = getAnchorAlarmRadius();
	resetAnchorBox(anchorLat, anchorLon);
}

Anchor::~Anchor(){
    2904:	2c e1       	ldi	r18, 0x1C	; 28
    2906:	37 e0       	ldi	r19, 0x07	; 7
    2908:	fc 01       	movw	r30, r24
    290a:	31 83       	std	Z+1, r19	; 0x01
    290c:	20 83       	st	Z, r18

}
    290e:	08 95       	ret

00002910 <_ZN6AnchorD0Ev>:
	anchorLon = getAnchorAlarmLon();
	anchorRadius = getAnchorAlarmRadius();
	resetAnchorBox(anchorLat, anchorLon);
}

Anchor::~Anchor(){
    2910:	2c e1       	ldi	r18, 0x1C	; 28
    2912:	37 e0       	ldi	r19, 0x07	; 7
    2914:	fc 01       	movw	r30, r24
    2916:	31 83       	std	Z+1, r19	; 0x01
    2918:	20 83       	st	Z, r18

}
    291a:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <_ZdlPv>
    291e:	08 95       	ret

00002920 <_ZN6Anchor19getAnchorAlarmStateEv>:
	anchorAlarmTriggered = state;
}

bool Anchor::getAnchorAlarmState() {
	return anchorAlarmOn;
}
    2920:	fc 01       	movw	r30, r24
    2922:	82 a9       	ldd	r24, Z+50	; 0x32
    2924:	08 95       	ret

00002926 <_ZN6Anchor19setAnchorAlarmStateEb>:

void Anchor::setAnchorAlarmState(bool state) {
	anchorAlarmOn = state;
    2926:	fc 01       	movw	r30, r24
    2928:	62 ab       	std	Z+50, r22	; 0x32
}
    292a:	08 95       	ret

0000292c <_ZN6Anchor15updateAnchorBoxEff>:
/* Adjust the size of the anchor box. Will not go smaller than MINMTRS */
void Anchor::updateAnchorBox(float laty, float lonx) {
    292c:	2f 92       	push	r2
    292e:	3f 92       	push	r3
    2930:	4f 92       	push	r4
    2932:	5f 92       	push	r5
    2934:	6f 92       	push	r6
    2936:	7f 92       	push	r7
    2938:	8f 92       	push	r8
    293a:	9f 92       	push	r9
    293c:	af 92       	push	r10
    293e:	bf 92       	push	r11
    2940:	cf 92       	push	r12
    2942:	df 92       	push	r13
    2944:	ef 92       	push	r14
    2946:	ff 92       	push	r15
    2948:	0f 93       	push	r16
    294a:	1f 93       	push	r17
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	00 d0       	rcall	.+0      	; 0x2952 <_ZN6Anchor15updateAnchorBoxEff+0x26>
    2952:	00 d0       	rcall	.+0      	; 0x2954 <_ZN6Anchor15updateAnchorBoxEff+0x28>
    2954:	00 d0       	rcall	.+0      	; 0x2956 <_ZN6Anchor15updateAnchorBoxEff+0x2a>
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    295a:	9e 83       	std	Y+6, r25	; 0x06
    295c:	8d 83       	std	Y+5, r24	; 0x05
    295e:	5a 01       	movw	r10, r20
    2960:	6b 01       	movw	r12, r22
    2962:	38 01       	movw	r6, r16
    2964:	49 01       	movw	r8, r18
	//TODO: error testing around 0, 90, 180deg

	float n = laty + anchorRadiusDeg;
    2966:	fc 01       	movw	r30, r24
    2968:	e2 84       	ldd	r14, Z+10	; 0x0a
    296a:	f3 84       	ldd	r15, Z+11	; 0x0b
    296c:	04 85       	ldd	r16, Z+12	; 0x0c
    296e:	15 85       	ldd	r17, Z+13	; 0x0d
    2970:	cb 01       	movw	r24, r22
    2972:	ba 01       	movw	r22, r20
    2974:	a8 01       	movw	r20, r16
    2976:	97 01       	movw	r18, r14
    2978:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    297c:	56 2e       	mov	r5, r22
    297e:	47 2e       	mov	r4, r23
    2980:	38 2e       	mov	r3, r24
    2982:	29 2e       	mov	r2, r25
	float s = laty - anchorRadiusDeg;
    2984:	c6 01       	movw	r24, r12
    2986:	b5 01       	movw	r22, r10
    2988:	a8 01       	movw	r20, r16
    298a:	97 01       	movw	r18, r14
    298c:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    2990:	d6 2e       	mov	r13, r22
    2992:	c7 2e       	mov	r12, r23
    2994:	b8 2e       	mov	r11, r24
    2996:	a9 2e       	mov	r10, r25
	float e = lonx + anchorRadiusDeg;
    2998:	c4 01       	movw	r24, r8
    299a:	b3 01       	movw	r22, r6
    299c:	a8 01       	movw	r20, r16
    299e:	97 01       	movw	r18, r14
    29a0:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    29a4:	69 83       	std	Y+1, r22	; 0x01
    29a6:	7a 83       	std	Y+2, r23	; 0x02
    29a8:	8b 83       	std	Y+3, r24	; 0x03
    29aa:	9c 83       	std	Y+4, r25	; 0x04
	float w = lonx - anchorRadiusDeg;
    29ac:	c4 01       	movw	r24, r8
    29ae:	b3 01       	movw	r22, r6
    29b0:	a8 01       	movw	r20, r16
    29b2:	97 01       	movw	r18, r14
    29b4:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    29b8:	16 2f       	mov	r17, r22
    29ba:	e7 2e       	mov	r14, r23
    29bc:	08 2f       	mov	r16, r24
    29be:	f9 2e       	mov	r15, r25
	//shrink anchor box if we can
	if ((n - MINMTRS) > anchorS && n < anchorN)
    29c0:	a2 01       	movw	r20, r4
    29c2:	91 01       	movw	r18, r2
    29c4:	65 2f       	mov	r22, r21
    29c6:	74 2f       	mov	r23, r20
    29c8:	83 2f       	mov	r24, r19
    29ca:	92 2f       	mov	r25, r18
    29cc:	24 e8       	ldi	r18, 0x84	; 132
    29ce:	3a eb       	ldi	r19, 0xBA	; 186
    29d0:	4c e3       	ldi	r20, 0x3C	; 60
    29d2:	58 e3       	ldi	r21, 0x38	; 56
    29d4:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    29d8:	ed 81       	ldd	r30, Y+5	; 0x05
    29da:	fe 81       	ldd	r31, Y+6	; 0x06
    29dc:	22 a1       	ldd	r18, Z+34	; 0x22
    29de:	33 a1       	ldd	r19, Z+35	; 0x23
    29e0:	44 a1       	ldd	r20, Z+36	; 0x24
    29e2:	55 a1       	ldd	r21, Z+37	; 0x25
    29e4:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <__gesf2>
    29e8:	18 16       	cp	r1, r24
    29ea:	e4 f4       	brge	.+56     	; 0x2a24 <_ZN6Anchor15updateAnchorBoxEff+0xf8>
    29ec:	a2 01       	movw	r20, r4
    29ee:	91 01       	movw	r18, r2
    29f0:	65 2f       	mov	r22, r21
    29f2:	74 2f       	mov	r23, r20
    29f4:	83 2f       	mov	r24, r19
    29f6:	92 2f       	mov	r25, r18
    29f8:	ed 81       	ldd	r30, Y+5	; 0x05
    29fa:	fe 81       	ldd	r31, Y+6	; 0x06
    29fc:	26 8d       	ldd	r18, Z+30	; 0x1e
    29fe:	37 8d       	ldd	r19, Z+31	; 0x1f
    2a00:	40 a1       	ldd	r20, Z+32	; 0x20
    2a02:	51 a1       	ldd	r21, Z+33	; 0x21
    2a04:	0e 94 99 44 	call	0x8932	; 0x8932 <__cmpsf2>
    2a08:	87 ff       	sbrs	r24, 7
    2a0a:	0c c0       	rjmp	.+24     	; 0x2a24 <_ZN6Anchor15updateAnchorBoxEff+0xf8>
		anchorN = n;
    2a0c:	a2 01       	movw	r20, r4
    2a0e:	91 01       	movw	r18, r2
    2a10:	85 2f       	mov	r24, r21
    2a12:	94 2f       	mov	r25, r20
    2a14:	a3 2f       	mov	r26, r19
    2a16:	b2 2f       	mov	r27, r18
    2a18:	ed 81       	ldd	r30, Y+5	; 0x05
    2a1a:	fe 81       	ldd	r31, Y+6	; 0x06
    2a1c:	86 8f       	std	Z+30, r24	; 0x1e
    2a1e:	97 8f       	std	Z+31, r25	; 0x1f
    2a20:	a0 a3       	std	Z+32, r26	; 0x20
    2a22:	b1 a3       	std	Z+33, r27	; 0x21
	if ((s + MINMTRS) < anchorN && s > anchorS)
    2a24:	a6 01       	movw	r20, r12
    2a26:	95 01       	movw	r18, r10
    2a28:	65 2f       	mov	r22, r21
    2a2a:	7c 2d       	mov	r23, r12
    2a2c:	83 2f       	mov	r24, r19
    2a2e:	9a 2d       	mov	r25, r10
    2a30:	24 e8       	ldi	r18, 0x84	; 132
    2a32:	3a eb       	ldi	r19, 0xBA	; 186
    2a34:	4c e3       	ldi	r20, 0x3C	; 60
    2a36:	58 e3       	ldi	r21, 0x38	; 56
    2a38:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    2a3c:	ed 81       	ldd	r30, Y+5	; 0x05
    2a3e:	fe 81       	ldd	r31, Y+6	; 0x06
    2a40:	26 8d       	ldd	r18, Z+30	; 0x1e
    2a42:	37 8d       	ldd	r19, Z+31	; 0x1f
    2a44:	40 a1       	ldd	r20, Z+32	; 0x20
    2a46:	51 a1       	ldd	r21, Z+33	; 0x21
    2a48:	0e 94 99 44 	call	0x8932	; 0x8932 <__cmpsf2>
    2a4c:	87 ff       	sbrs	r24, 7
    2a4e:	1c c0       	rjmp	.+56     	; 0x2a88 <_ZN6Anchor15updateAnchorBoxEff+0x15c>
    2a50:	a6 01       	movw	r20, r12
    2a52:	95 01       	movw	r18, r10
    2a54:	65 2f       	mov	r22, r21
    2a56:	7c 2d       	mov	r23, r12
    2a58:	83 2f       	mov	r24, r19
    2a5a:	9a 2d       	mov	r25, r10
    2a5c:	ed 81       	ldd	r30, Y+5	; 0x05
    2a5e:	fe 81       	ldd	r31, Y+6	; 0x06
    2a60:	22 a1       	ldd	r18, Z+34	; 0x22
    2a62:	33 a1       	ldd	r19, Z+35	; 0x23
    2a64:	44 a1       	ldd	r20, Z+36	; 0x24
    2a66:	55 a1       	ldd	r21, Z+37	; 0x25
    2a68:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <__gesf2>
    2a6c:	18 16       	cp	r1, r24
    2a6e:	64 f4       	brge	.+24     	; 0x2a88 <_ZN6Anchor15updateAnchorBoxEff+0x15c>
		anchorS = s;
    2a70:	a6 01       	movw	r20, r12
    2a72:	95 01       	movw	r18, r10
    2a74:	85 2f       	mov	r24, r21
    2a76:	9c 2d       	mov	r25, r12
    2a78:	a3 2f       	mov	r26, r19
    2a7a:	ba 2d       	mov	r27, r10
    2a7c:	ed 81       	ldd	r30, Y+5	; 0x05
    2a7e:	fe 81       	ldd	r31, Y+6	; 0x06
    2a80:	82 a3       	std	Z+34, r24	; 0x22
    2a82:	93 a3       	std	Z+35, r25	; 0x23
    2a84:	a4 a3       	std	Z+36, r26	; 0x24
    2a86:	b5 a3       	std	Z+37, r27	; 0x25
	if ((e - MINMTRS) > anchorW && e < anchorE)
    2a88:	59 81       	ldd	r21, Y+1	; 0x01
    2a8a:	4a 81       	ldd	r20, Y+2	; 0x02
    2a8c:	3b 81       	ldd	r19, Y+3	; 0x03
    2a8e:	2c 81       	ldd	r18, Y+4	; 0x04
    2a90:	65 2f       	mov	r22, r21
    2a92:	74 2f       	mov	r23, r20
    2a94:	83 2f       	mov	r24, r19
    2a96:	92 2f       	mov	r25, r18
    2a98:	24 e8       	ldi	r18, 0x84	; 132
    2a9a:	3a eb       	ldi	r19, 0xBA	; 186
    2a9c:	4c e3       	ldi	r20, 0x3C	; 60
    2a9e:	58 e3       	ldi	r21, 0x38	; 56
    2aa0:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    2aa4:	ed 81       	ldd	r30, Y+5	; 0x05
    2aa6:	fe 81       	ldd	r31, Y+6	; 0x06
    2aa8:	22 a5       	ldd	r18, Z+42	; 0x2a
    2aaa:	33 a5       	ldd	r19, Z+43	; 0x2b
    2aac:	44 a5       	ldd	r20, Z+44	; 0x2c
    2aae:	55 a5       	ldd	r21, Z+45	; 0x2d
    2ab0:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <__gesf2>
    2ab4:	18 16       	cp	r1, r24
    2ab6:	04 f5       	brge	.+64     	; 0x2af8 <_ZN6Anchor15updateAnchorBoxEff+0x1cc>
    2ab8:	59 81       	ldd	r21, Y+1	; 0x01
    2aba:	4a 81       	ldd	r20, Y+2	; 0x02
    2abc:	3b 81       	ldd	r19, Y+3	; 0x03
    2abe:	2c 81       	ldd	r18, Y+4	; 0x04
    2ac0:	65 2f       	mov	r22, r21
    2ac2:	74 2f       	mov	r23, r20
    2ac4:	83 2f       	mov	r24, r19
    2ac6:	92 2f       	mov	r25, r18
    2ac8:	ed 81       	ldd	r30, Y+5	; 0x05
    2aca:	fe 81       	ldd	r31, Y+6	; 0x06
    2acc:	26 a1       	ldd	r18, Z+38	; 0x26
    2ace:	37 a1       	ldd	r19, Z+39	; 0x27
    2ad0:	40 a5       	ldd	r20, Z+40	; 0x28
    2ad2:	51 a5       	ldd	r21, Z+41	; 0x29
    2ad4:	0e 94 99 44 	call	0x8932	; 0x8932 <__cmpsf2>
    2ad8:	87 ff       	sbrs	r24, 7
    2ada:	0e c0       	rjmp	.+28     	; 0x2af8 <_ZN6Anchor15updateAnchorBoxEff+0x1cc>
		anchorE = e;
    2adc:	59 81       	ldd	r21, Y+1	; 0x01
    2ade:	4a 81       	ldd	r20, Y+2	; 0x02
    2ae0:	3b 81       	ldd	r19, Y+3	; 0x03
    2ae2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ae4:	85 2f       	mov	r24, r21
    2ae6:	94 2f       	mov	r25, r20
    2ae8:	a3 2f       	mov	r26, r19
    2aea:	b2 2f       	mov	r27, r18
    2aec:	ed 81       	ldd	r30, Y+5	; 0x05
    2aee:	fe 81       	ldd	r31, Y+6	; 0x06
    2af0:	86 a3       	std	Z+38, r24	; 0x26
    2af2:	97 a3       	std	Z+39, r25	; 0x27
    2af4:	a0 a7       	std	Z+40, r26	; 0x28
    2af6:	b1 a7       	std	Z+41, r27	; 0x29
	if ((w + MINMTRS) < anchorE && w > anchorW)
    2af8:	61 2f       	mov	r22, r17
    2afa:	7e 2d       	mov	r23, r14
    2afc:	80 2f       	mov	r24, r16
    2afe:	9f 2d       	mov	r25, r15
    2b00:	24 e8       	ldi	r18, 0x84	; 132
    2b02:	3a eb       	ldi	r19, 0xBA	; 186
    2b04:	4c e3       	ldi	r20, 0x3C	; 60
    2b06:	58 e3       	ldi	r21, 0x38	; 56
    2b08:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    2b0c:	ed 81       	ldd	r30, Y+5	; 0x05
    2b0e:	fe 81       	ldd	r31, Y+6	; 0x06
    2b10:	26 a1       	ldd	r18, Z+38	; 0x26
    2b12:	37 a1       	ldd	r19, Z+39	; 0x27
    2b14:	40 a5       	ldd	r20, Z+40	; 0x28
    2b16:	51 a5       	ldd	r21, Z+41	; 0x29
    2b18:	0e 94 99 44 	call	0x8932	; 0x8932 <__cmpsf2>
    2b1c:	87 ff       	sbrs	r24, 7
    2b1e:	18 c0       	rjmp	.+48     	; 0x2b50 <_ZN6Anchor15updateAnchorBoxEff+0x224>
    2b20:	61 2f       	mov	r22, r17
    2b22:	7e 2d       	mov	r23, r14
    2b24:	80 2f       	mov	r24, r16
    2b26:	9f 2d       	mov	r25, r15
    2b28:	ed 81       	ldd	r30, Y+5	; 0x05
    2b2a:	fe 81       	ldd	r31, Y+6	; 0x06
    2b2c:	22 a5       	ldd	r18, Z+42	; 0x2a
    2b2e:	33 a5       	ldd	r19, Z+43	; 0x2b
    2b30:	44 a5       	ldd	r20, Z+44	; 0x2c
    2b32:	55 a5       	ldd	r21, Z+45	; 0x2d
    2b34:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <__gesf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	54 f4       	brge	.+20     	; 0x2b50 <_ZN6Anchor15updateAnchorBoxEff+0x224>
		anchorW = w;
    2b3c:	81 2f       	mov	r24, r17
    2b3e:	9e 2d       	mov	r25, r14
    2b40:	a0 2f       	mov	r26, r16
    2b42:	bf 2d       	mov	r27, r15
    2b44:	ed 81       	ldd	r30, Y+5	; 0x05
    2b46:	fe 81       	ldd	r31, Y+6	; 0x06
    2b48:	82 a7       	std	Z+42, r24	; 0x2a
    2b4a:	93 a7       	std	Z+43, r25	; 0x2b
    2b4c:	a4 a7       	std	Z+44, r26	; 0x2c
    2b4e:	b5 a7       	std	Z+45, r27	; 0x2d

}
    2b50:	26 96       	adiw	r28, 0x06	; 6
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	f8 94       	cli
    2b56:	de bf       	out	0x3e, r29	; 62
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	cd bf       	out	0x3d, r28	; 61
    2b5c:	cf 91       	pop	r28
    2b5e:	df 91       	pop	r29
    2b60:	1f 91       	pop	r17
    2b62:	0f 91       	pop	r16
    2b64:	ff 90       	pop	r15
    2b66:	ef 90       	pop	r14
    2b68:	df 90       	pop	r13
    2b6a:	cf 90       	pop	r12
    2b6c:	bf 90       	pop	r11
    2b6e:	af 90       	pop	r10
    2b70:	9f 90       	pop	r9
    2b72:	8f 90       	pop	r8
    2b74:	7f 90       	pop	r7
    2b76:	6f 90       	pop	r6
    2b78:	5f 90       	pop	r5
    2b7a:	4f 90       	pop	r4
    2b7c:	3f 90       	pop	r3
    2b7e:	2f 90       	pop	r2
    2b80:	08 95       	ret

00002b82 <_ZN6Anchor14resetAnchorBoxEff>:

void Anchor::resetAnchorBox(float laty, float lonx) {
    2b82:	af 92       	push	r10
    2b84:	bf 92       	push	r11
    2b86:	cf 92       	push	r12
    2b88:	df 92       	push	r13
    2b8a:	ef 92       	push	r14
    2b8c:	ff 92       	push	r15
    2b8e:	0f 93       	push	r16
    2b90:	1f 93       	push	r17
    2b92:	cf 93       	push	r28
    2b94:	df 93       	push	r29
    2b96:	ec 01       	movw	r28, r24
    2b98:	5a 01       	movw	r10, r20
    2b9a:	6b 01       	movw	r12, r22
    2b9c:	78 01       	movw	r14, r16
    2b9e:	89 01       	movw	r16, r18
	anchorN = 90.0;
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	a4 eb       	ldi	r26, 0xB4	; 180
    2ba6:	b2 e4       	ldi	r27, 0x42	; 66
    2ba8:	8e 8f       	std	Y+30, r24	; 0x1e
    2baa:	9f 8f       	std	Y+31, r25	; 0x1f
    2bac:	a8 a3       	std	Y+32, r26	; 0x20
    2bae:	b9 a3       	std	Y+33, r27	; 0x21
	anchorS = -90.0;
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	a4 eb       	ldi	r26, 0xB4	; 180
    2bb6:	b2 ec       	ldi	r27, 0xC2	; 194
    2bb8:	8a a3       	std	Y+34, r24	; 0x22
    2bba:	9b a3       	std	Y+35, r25	; 0x23
    2bbc:	ac a3       	std	Y+36, r26	; 0x24
    2bbe:	bd a3       	std	Y+37, r27	; 0x25
	anchorE = 180.0;
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	a4 e3       	ldi	r26, 0x34	; 52
    2bc6:	b3 e4       	ldi	r27, 0x43	; 67
    2bc8:	8e a3       	std	Y+38, r24	; 0x26
    2bca:	9f a3       	std	Y+39, r25	; 0x27
    2bcc:	a8 a7       	std	Y+40, r26	; 0x28
    2bce:	b9 a7       	std	Y+41, r27	; 0x29
	anchorW = -180.0;
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	a4 e3       	ldi	r26, 0x34	; 52
    2bd6:	b3 ec       	ldi	r27, 0xC3	; 195
    2bd8:	8a a7       	std	Y+42, r24	; 0x2a
    2bda:	9b a7       	std	Y+43, r25	; 0x2b
    2bdc:	ac a7       	std	Y+44, r26	; 0x2c
    2bde:	bd a7       	std	Y+45, r27	; 0x2d
	anchorRadiusDeg = anchorRadius * LLMTRS;
    2be0:	6e 81       	ldd	r22, Y+6	; 0x06
    2be2:	7f 81       	ldd	r23, Y+7	; 0x07
    2be4:	88 85       	ldd	r24, Y+8	; 0x08
    2be6:	99 85       	ldd	r25, Y+9	; 0x09
    2be8:	2d e9       	ldi	r18, 0x9D	; 157
    2bea:	3b ef       	ldi	r19, 0xFB	; 251
    2bec:	46 e1       	ldi	r20, 0x16	; 22
    2bee:	57 e3       	ldi	r21, 0x37	; 55
    2bf0:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    2bf4:	6a 87       	std	Y+10, r22	; 0x0a
    2bf6:	7b 87       	std	Y+11, r23	; 0x0b
    2bf8:	8c 87       	std	Y+12, r24	; 0x0c
    2bfa:	9d 87       	std	Y+13, r25	; 0x0d
	updateAnchorBox(laty, lonx);
    2bfc:	ce 01       	movw	r24, r28
    2bfe:	b6 01       	movw	r22, r12
    2c00:	a5 01       	movw	r20, r10
    2c02:	98 01       	movw	r18, r16
    2c04:	87 01       	movw	r16, r14
    2c06:	0e 94 96 14 	call	0x292c	; 0x292c <_ZN6Anchor15updateAnchorBoxEff>
}
    2c0a:	df 91       	pop	r29
    2c0c:	cf 91       	pop	r28
    2c0e:	1f 91       	pop	r17
    2c10:	0f 91       	pop	r16
    2c12:	ff 90       	pop	r15
    2c14:	ef 90       	pop	r14
    2c16:	df 90       	pop	r13
    2c18:	cf 90       	pop	r12
    2c1a:	bf 90       	pop	r11
    2c1c:	af 90       	pop	r10
    2c1e:	08 95       	ret

00002c20 <_ZN6AnchorC1EP3Gps>:
/* NMEA Anchor alarm
 */

#include "Anchor.h"

Anchor::Anchor(Gps* gps) {
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	ec 01       	movw	r28, r24
    2c2a:	8c e1       	ldi	r24, 0x1C	; 28
    2c2c:	97 e0       	ldi	r25, 0x07	; 7
    2c2e:	99 83       	std	Y+1, r25	; 0x01
    2c30:	88 83       	st	Y, r24
	this->gps = gps;
    2c32:	7d ab       	std	Y+53, r23	; 0x35
    2c34:	6c ab       	std	Y+52, r22	; 0x34
	lastLcdUpdate= 0;
    2c36:	1a 82       	std	Y+2, r1	; 0x02
    2c38:	1b 82       	std	Y+3, r1	; 0x03
    2c3a:	1c 82       	std	Y+4, r1	; 0x04
    2c3c:	1d 82       	std	Y+5, r1	; 0x05
	anchorRadiusDeg = 0.0;
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	dc 01       	movw	r26, r24
    2c44:	8a 87       	std	Y+10, r24	; 0x0a
    2c46:	9b 87       	std	Y+11, r25	; 0x0b
    2c48:	ac 87       	std	Y+12, r26	; 0x0c
    2c4a:	bd 87       	std	Y+13, r27	; 0x0d
	anchorDistance = 0;
    2c4c:	8e 8b       	std	Y+22, r24	; 0x16
    2c4e:	9f 8b       	std	Y+23, r25	; 0x17
    2c50:	a8 8f       	std	Y+24, r26	; 0x18
    2c52:	b9 8f       	std	Y+25, r27	; 0x19
	maxAnchorDistance = 0;
    2c54:	8a 8f       	std	Y+26, r24	; 0x1a
    2c56:	9b 8f       	std	Y+27, r25	; 0x1b
    2c58:	ac 8f       	std	Y+28, r26	; 0x1c
    2c5a:	bd 8f       	std	Y+29, r27	; 0x1d

	//a box around the anchor, shrinks with every GPS reading to home in on the anchor itself
	anchorN = 90.0;
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	a4 eb       	ldi	r26, 0xB4	; 180
    2c62:	b2 e4       	ldi	r27, 0x42	; 66
    2c64:	8e 8f       	std	Y+30, r24	; 0x1e
    2c66:	9f 8f       	std	Y+31, r25	; 0x1f
    2c68:	a8 a3       	std	Y+32, r26	; 0x20
    2c6a:	b9 a3       	std	Y+33, r27	; 0x21
	anchorS = -90.0;
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	a4 eb       	ldi	r26, 0xB4	; 180
    2c72:	b2 ec       	ldi	r27, 0xC2	; 194
    2c74:	8a a3       	std	Y+34, r24	; 0x22
    2c76:	9b a3       	std	Y+35, r25	; 0x23
    2c78:	ac a3       	std	Y+36, r26	; 0x24
    2c7a:	bd a3       	std	Y+37, r27	; 0x25
	anchorE = 180.0;
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	a4 e3       	ldi	r26, 0x34	; 52
    2c82:	b3 e4       	ldi	r27, 0x43	; 67
    2c84:	8e a3       	std	Y+38, r24	; 0x26
    2c86:	9f a3       	std	Y+39, r25	; 0x27
    2c88:	a8 a7       	std	Y+40, r26	; 0x28
    2c8a:	b9 a7       	std	Y+41, r27	; 0x29
	anchorW = -180.0;
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	a4 e3       	ldi	r26, 0x34	; 52
    2c92:	b3 ec       	ldi	r27, 0xC3	; 195
    2c94:	8a a7       	std	Y+42, r24	; 0x2a
    2c96:	9b a7       	std	Y+43, r25	; 0x2b
    2c98:	ac a7       	std	Y+44, r26	; 0x2c
    2c9a:	bd a7       	std	Y+45, r27	; 0x2d

	//alarm

	anchorAlarmTriggered = false; //set to true to trigger anchor alarm
    2c9c:	1b aa       	std	Y+51, r1	; 0x33

	// read the last anchor alarm values
	anchorAlarmOn = getAnchorAlarmState();//flag to turn anchor alarm on/off toggle
	anchorLat = getAnchorAlarmLat();
    2c9e:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_Z17getAnchorAlarmLatv>
    2ca2:	6e 87       	std	Y+14, r22	; 0x0e
    2ca4:	7f 87       	std	Y+15, r23	; 0x0f
    2ca6:	88 8b       	std	Y+16, r24	; 0x10
    2ca8:	99 8b       	std	Y+17, r25	; 0x11
	anchorLon = getAnchorAlarmLon();
    2caa:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_Z17getAnchorAlarmLonv>
    2cae:	6a 8b       	std	Y+18, r22	; 0x12
    2cb0:	7b 8b       	std	Y+19, r23	; 0x13
    2cb2:	8c 8b       	std	Y+20, r24	; 0x14
    2cb4:	9d 8b       	std	Y+21, r25	; 0x15
	anchorRadius = getAnchorAlarmRadius();
    2cb6:	0e 94 94 1b 	call	0x3728	; 0x3728 <_Z20getAnchorAlarmRadiusv>
    2cba:	6e 83       	std	Y+6, r22	; 0x06
    2cbc:	7f 83       	std	Y+7, r23	; 0x07
    2cbe:	88 87       	std	Y+8, r24	; 0x08
    2cc0:	99 87       	std	Y+9, r25	; 0x09
	resetAnchorBox(anchorLat, anchorLon);
    2cc2:	4e 85       	ldd	r20, Y+14	; 0x0e
    2cc4:	5f 85       	ldd	r21, Y+15	; 0x0f
    2cc6:	68 89       	ldd	r22, Y+16	; 0x10
    2cc8:	79 89       	ldd	r23, Y+17	; 0x11
    2cca:	0a 89       	ldd	r16, Y+18	; 0x12
    2ccc:	1b 89       	ldd	r17, Y+19	; 0x13
    2cce:	2c 89       	ldd	r18, Y+20	; 0x14
    2cd0:	3d 89       	ldd	r19, Y+21	; 0x15
    2cd2:	ce 01       	movw	r24, r28
    2cd4:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZN6Anchor14resetAnchorBoxEff>
}
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	1f 91       	pop	r17
    2cde:	0f 91       	pop	r16
    2ce0:	08 95       	ret

00002ce2 <_ZN6Anchor15getAnchorRadiusEv>:
	if (lonx < anchorW)
		return false;
	return true;
}

float Anchor::getAnchorRadius() {
    2ce2:	fc 01       	movw	r30, r24
	return anchorRadius;
}
    2ce4:	56 81       	ldd	r21, Z+6	; 0x06
    2ce6:	47 81       	ldd	r20, Z+7	; 0x07
    2ce8:	30 85       	ldd	r19, Z+8	; 0x08
    2cea:	21 85       	ldd	r18, Z+9	; 0x09
    2cec:	65 2f       	mov	r22, r21
    2cee:	74 2f       	mov	r23, r20
    2cf0:	83 2f       	mov	r24, r19
    2cf2:	92 2f       	mov	r25, r18
    2cf4:	08 95       	ret

00002cf6 <_ZN6Anchor15setAnchorRadiusEf>:

/*set anchor radius and adjust box*/
void Anchor::setAnchorRadius(float radius) {
    2cf6:	af 92       	push	r10
    2cf8:	bf 92       	push	r11
    2cfa:	cf 92       	push	r12
    2cfc:	df 92       	push	r13
    2cfe:	ef 92       	push	r14
    2d00:	ff 92       	push	r15
    2d02:	0f 93       	push	r16
    2d04:	1f 93       	push	r17
    2d06:	cf 93       	push	r28
    2d08:	df 93       	push	r29
    2d0a:	ec 01       	movw	r28, r24
    2d0c:	7a 01       	movw	r14, r20
    2d0e:	8b 01       	movw	r16, r22
	if (radius < 0)
    2d10:	cb 01       	movw	r24, r22
    2d12:	ba 01       	movw	r22, r20
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	a9 01       	movw	r20, r18
    2d1a:	0e 94 99 44 	call	0x8932	; 0x8932 <__cmpsf2>
    2d1e:	87 ff       	sbrs	r24, 7
    2d20:	0a c0       	rjmp	.+20     	; 0x2d36 <_ZN6Anchor15setAnchorRadiusEf+0x40>
		radius = 0;
    2d22:	0f 2e       	mov	r0, r31
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	ef 2e       	mov	r14, r31
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	ff 2e       	mov	r15, r31
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	0f 2f       	mov	r16, r31
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	1f 2f       	mov	r17, r31
    2d34:	f0 2d       	mov	r31, r0
	float change = radius - anchorRadius;
    2d36:	c8 01       	movw	r24, r16
    2d38:	b7 01       	movw	r22, r14
    2d3a:	2e 81       	ldd	r18, Y+6	; 0x06
    2d3c:	3f 81       	ldd	r19, Y+7	; 0x07
    2d3e:	48 85       	ldd	r20, Y+8	; 0x08
    2d40:	59 85       	ldd	r21, Y+9	; 0x09
    2d42:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    2d46:	d6 2e       	mov	r13, r22
    2d48:	c7 2e       	mov	r12, r23
    2d4a:	b8 2e       	mov	r11, r24
    2d4c:	a9 2e       	mov	r10, r25
	anchorRadius = radius;
    2d4e:	ee 82       	std	Y+6, r14	; 0x06
    2d50:	ff 82       	std	Y+7, r15	; 0x07
    2d52:	08 87       	std	Y+8, r16	; 0x08
    2d54:	19 87       	std	Y+9, r17	; 0x09
	anchorRadiusDeg = anchorRadius * LLMTRS;
    2d56:	c8 01       	movw	r24, r16
    2d58:	b7 01       	movw	r22, r14
    2d5a:	2d e9       	ldi	r18, 0x9D	; 157
    2d5c:	3b ef       	ldi	r19, 0xFB	; 251
    2d5e:	46 e1       	ldi	r20, 0x16	; 22
    2d60:	57 e3       	ldi	r21, 0x37	; 55
    2d62:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    2d66:	6a 87       	std	Y+10, r22	; 0x0a
    2d68:	7b 87       	std	Y+11, r23	; 0x0b
    2d6a:	8c 87       	std	Y+12, r24	; 0x0c
    2d6c:	9d 87       	std	Y+13, r25	; 0x0d
	saveAnchorAlarmRadius(anchorRadius);
    2d6e:	c8 01       	movw	r24, r16
    2d70:	b7 01       	movw	r22, r14
    2d72:	0e 94 27 1b 	call	0x364e	; 0x364e <_Z21saveAnchorAlarmRadiusf>

	//deal with the changed box size
	if (change <= 0) {
    2d76:	a6 01       	movw	r20, r12
    2d78:	95 01       	movw	r18, r10
    2d7a:	65 2f       	mov	r22, r21
    2d7c:	74 2f       	mov	r23, r20
    2d7e:	83 2f       	mov	r24, r19
    2d80:	92 2f       	mov	r25, r18
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	a9 01       	movw	r20, r18
    2d88:	0e 94 99 44 	call	0x8932	; 0x8932 <__cmpsf2>
    2d8c:	18 16       	cp	r1, r24
    2d8e:	0c f0       	brlt	.+2      	; 0x2d92 <_ZN6Anchor15setAnchorRadiusEf+0x9c>
    2d90:	48 c0       	rjmp	.+144    	; 0x2e22 <_ZN6Anchor15setAnchorRadiusEf+0x12c>
		return; //no need, new box is smaller, it will sort itself
	} else {
		//grow the box? - add change to all edges?
		change = change * LLMTRS;
    2d92:	a6 01       	movw	r20, r12
    2d94:	95 01       	movw	r18, r10
    2d96:	65 2f       	mov	r22, r21
    2d98:	74 2f       	mov	r23, r20
    2d9a:	83 2f       	mov	r24, r19
    2d9c:	92 2f       	mov	r25, r18
    2d9e:	2d e9       	ldi	r18, 0x9D	; 157
    2da0:	3b ef       	ldi	r19, 0xFB	; 251
    2da2:	46 e1       	ldi	r20, 0x16	; 22
    2da4:	57 e3       	ldi	r21, 0x37	; 55
    2da6:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    2daa:	e6 2e       	mov	r14, r22
    2dac:	17 2f       	mov	r17, r23
    2dae:	08 2f       	mov	r16, r24
    2db0:	f9 2e       	mov	r15, r25
		anchorN = anchorN + change;
    2db2:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2db4:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2db6:	88 a1       	ldd	r24, Y+32	; 0x20
    2db8:	99 a1       	ldd	r25, Y+33	; 0x21
    2dba:	2e 2d       	mov	r18, r14
    2dbc:	31 2f       	mov	r19, r17
    2dbe:	40 2f       	mov	r20, r16
    2dc0:	5f 2d       	mov	r21, r15
    2dc2:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    2dc6:	6e 8f       	std	Y+30, r22	; 0x1e
    2dc8:	7f 8f       	std	Y+31, r23	; 0x1f
    2dca:	88 a3       	std	Y+32, r24	; 0x20
    2dcc:	99 a3       	std	Y+33, r25	; 0x21
		anchorS = anchorS - change;
    2dce:	6a a1       	ldd	r22, Y+34	; 0x22
    2dd0:	7b a1       	ldd	r23, Y+35	; 0x23
    2dd2:	8c a1       	ldd	r24, Y+36	; 0x24
    2dd4:	9d a1       	ldd	r25, Y+37	; 0x25
    2dd6:	2e 2d       	mov	r18, r14
    2dd8:	31 2f       	mov	r19, r17
    2dda:	40 2f       	mov	r20, r16
    2ddc:	5f 2d       	mov	r21, r15
    2dde:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    2de2:	6a a3       	std	Y+34, r22	; 0x22
    2de4:	7b a3       	std	Y+35, r23	; 0x23
    2de6:	8c a3       	std	Y+36, r24	; 0x24
    2de8:	9d a3       	std	Y+37, r25	; 0x25
		anchorE = anchorE + change;
    2dea:	6e a1       	ldd	r22, Y+38	; 0x26
    2dec:	7f a1       	ldd	r23, Y+39	; 0x27
    2dee:	88 a5       	ldd	r24, Y+40	; 0x28
    2df0:	99 a5       	ldd	r25, Y+41	; 0x29
    2df2:	2e 2d       	mov	r18, r14
    2df4:	31 2f       	mov	r19, r17
    2df6:	40 2f       	mov	r20, r16
    2df8:	5f 2d       	mov	r21, r15
    2dfa:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    2dfe:	6e a3       	std	Y+38, r22	; 0x26
    2e00:	7f a3       	std	Y+39, r23	; 0x27
    2e02:	88 a7       	std	Y+40, r24	; 0x28
    2e04:	99 a7       	std	Y+41, r25	; 0x29
		anchorW = anchorW - change;
    2e06:	6a a5       	ldd	r22, Y+42	; 0x2a
    2e08:	7b a5       	ldd	r23, Y+43	; 0x2b
    2e0a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2e0c:	9d a5       	ldd	r25, Y+45	; 0x2d
    2e0e:	2e 2d       	mov	r18, r14
    2e10:	31 2f       	mov	r19, r17
    2e12:	40 2f       	mov	r20, r16
    2e14:	5f 2d       	mov	r21, r15
    2e16:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    2e1a:	6a a7       	std	Y+42, r22	; 0x2a
    2e1c:	7b a7       	std	Y+43, r23	; 0x2b
    2e1e:	8c a7       	std	Y+44, r24	; 0x2c
    2e20:	9d a7       	std	Y+45, r25	; 0x2d

	}
}
    2e22:	df 91       	pop	r29
    2e24:	cf 91       	pop	r28
    2e26:	1f 91       	pop	r17
    2e28:	0f 91       	pop	r16
    2e2a:	ff 90       	pop	r15
    2e2c:	ef 90       	pop	r14
    2e2e:	df 90       	pop	r13
    2e30:	cf 90       	pop	r12
    2e32:	bf 90       	pop	r11
    2e34:	af 90       	pop	r10
    2e36:	08 95       	ret

00002e38 <_ZN6Anchor11checkAnchorEv>:
/*calc all params, and set alarm buzzer state*/
void Anchor::checkAnchor() {
    2e38:	cf 92       	push	r12
    2e3a:	df 92       	push	r13
    2e3c:	ef 92       	push	r14
    2e3e:	ff 92       	push	r15
    2e40:	0f 93       	push	r16
    2e42:	1f 93       	push	r17
    2e44:	cf 93       	push	r28
    2e46:	df 93       	push	r29
    2e48:	ec 01       	movw	r28, r24

	//we dont need to do this if the anchor alarm is off
	if(anchorAlarmOn){
    2e4a:	8a a9       	ldd	r24, Y+50	; 0x32
    2e4c:	88 23       	and	r24, r24
    2e4e:	09 f4       	brne	.+2      	; 0x2e52 <_ZN6Anchor11checkAnchorEv+0x1a>
    2e50:	6b c0       	rjmp	.+214    	; 0x2f28 <_ZN6Anchor11checkAnchorEv+0xf0>
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - gps->getLastGpsFix() > MAX_SINCE_LAST_GPS_FIX)
    2e52:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    2e56:	7b 01       	movw	r14, r22
    2e58:	8c 01       	movw	r16, r24
    2e5a:	8c a9       	ldd	r24, Y+52	; 0x34
    2e5c:	9d a9       	ldd	r25, Y+53	; 0x35
    2e5e:	0e 94 0f 20 	call	0x401e	; 0x401e <_ZN3Gps13getLastGpsFixEv>
    2e62:	e6 1a       	sub	r14, r22
    2e64:	f7 0a       	sbc	r15, r23
    2e66:	08 0b       	sbc	r16, r24
    2e68:	19 0b       	sbc	r17, r25
    2e6a:	81 ee       	ldi	r24, 0xE1	; 225
    2e6c:	e8 16       	cp	r14, r24
    2e6e:	83 e9       	ldi	r24, 0x93	; 147
    2e70:	f8 06       	cpc	r15, r24
    2e72:	84 e0       	ldi	r24, 0x04	; 4
    2e74:	08 07       	cpc	r16, r24
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	18 07       	cpc	r17, r24
    2e7a:	48 f0       	brcs	.+18     	; 0x2e8e <_ZN6Anchor11checkAnchorEv+0x56>
    2e7c:	8a a9       	ldd	r24, Y+50	; 0x32
    2e7e:	88 23       	and	r24, r24
    2e80:	31 f0       	breq	.+12     	; 0x2e8e <_ZN6Anchor11checkAnchorEv+0x56>
				&& anchorAlarmOn) {
			snoozeAlarm = 0;
    2e82:	1e a6       	std	Y+46, r1	; 0x2e
    2e84:	1f a6       	std	Y+47, r1	; 0x2f
    2e86:	18 aa       	std	Y+48, r1	; 0x30
    2e88:	19 aa       	std	Y+49, r1	; 0x31
			anchorAlarmTriggered = true;
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	8b ab       	std	Y+51, r24	; 0x33
		}
		//now check position
		if (gps->getRmcStatus()) {
    2e8e:	8c a9       	ldd	r24, Y+52	; 0x34
    2e90:	9d a9       	ldd	r25, Y+53	; 0x35
    2e92:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN3Gps12getRmcStatusEv>
    2e96:	88 23       	and	r24, r24
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <_ZN6Anchor11checkAnchorEv+0x64>
    2e9a:	46 c0       	rjmp	.+140    	; 0x2f28 <_ZN6Anchor11checkAnchorEv+0xf0>
			anchorDistance = gps->getRmcMetersTo(anchorLat, anchorLon);
    2e9c:	4e 85       	ldd	r20, Y+14	; 0x0e
    2e9e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2ea0:	68 89       	ldd	r22, Y+16	; 0x10
    2ea2:	79 89       	ldd	r23, Y+17	; 0x11
    2ea4:	0a 89       	ldd	r16, Y+18	; 0x12
    2ea6:	1b 89       	ldd	r17, Y+19	; 0x13
    2ea8:	2c 89       	ldd	r18, Y+20	; 0x14
    2eaa:	3d 89       	ldd	r19, Y+21	; 0x15
    2eac:	8c a9       	ldd	r24, Y+52	; 0x34
    2eae:	9d a9       	ldd	r25, Y+53	; 0x35
    2eb0:	0e 94 22 20 	call	0x4044	; 0x4044 <_ZN3Gps14getRmcMetersToEff>
    2eb4:	7b 01       	movw	r14, r22
    2eb6:	8c 01       	movw	r16, r24
    2eb8:	6e 8b       	std	Y+22, r22	; 0x16
    2eba:	7f 8b       	std	Y+23, r23	; 0x17
    2ebc:	88 8f       	std	Y+24, r24	; 0x18
    2ebe:	99 8f       	std	Y+25, r25	; 0x19
			if (anchorDistance > maxAnchorDistance)
    2ec0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2ec2:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2ec4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2ec6:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2ec8:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <__gesf2>
    2ecc:	18 16       	cp	r1, r24
    2ece:	24 f4       	brge	.+8      	; 0x2ed8 <_ZN6Anchor11checkAnchorEv+0xa0>
				maxAnchorDistance = anchorDistance;
    2ed0:	ea 8e       	std	Y+26, r14	; 0x1a
    2ed2:	fb 8e       	std	Y+27, r15	; 0x1b
    2ed4:	0c 8f       	std	Y+28, r16	; 0x1c
    2ed6:	1d 8f       	std	Y+29, r17	; 0x1d

			//update the anchor box
			updateAnchorBox(gps->getLatitude(), gps->getLongitude());
    2ed8:	8c a9       	ldd	r24, Y+52	; 0x34
    2eda:	9d a9       	ldd	r25, Y+53	; 0x35
    2edc:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <_ZN3Gps11getLatitudeEv>
    2ee0:	6b 01       	movw	r12, r22
    2ee2:	7c 01       	movw	r14, r24
    2ee4:	8c a9       	ldd	r24, Y+52	; 0x34
    2ee6:	9d a9       	ldd	r25, Y+53	; 0x35
    2ee8:	0e 94 07 20 	call	0x400e	; 0x400e <_ZN3Gps12getLongitudeEv>
    2eec:	8b 01       	movw	r16, r22
    2eee:	9c 01       	movw	r18, r24
    2ef0:	ce 01       	movw	r24, r28
    2ef2:	b7 01       	movw	r22, r14
    2ef4:	a6 01       	movw	r20, r12
    2ef6:	0e 94 96 14 	call	0x292c	; 0x292c <_ZN6Anchor15updateAnchorBoxEff>

			// read distance to anchorPoint in meters and set anchorAlarm accordingly
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (anchorAlarmOn && anchorDistance > anchorRadius) {
    2efa:	8a a9       	ldd	r24, Y+50	; 0x32
    2efc:	88 23       	and	r24, r24
    2efe:	99 f0       	breq	.+38     	; 0x2f26 <_ZN6Anchor11checkAnchorEv+0xee>
    2f00:	6e 89       	ldd	r22, Y+22	; 0x16
    2f02:	7f 89       	ldd	r23, Y+23	; 0x17
    2f04:	88 8d       	ldd	r24, Y+24	; 0x18
    2f06:	99 8d       	ldd	r25, Y+25	; 0x19
    2f08:	2e 81       	ldd	r18, Y+6	; 0x06
    2f0a:	3f 81       	ldd	r19, Y+7	; 0x07
    2f0c:	48 85       	ldd	r20, Y+8	; 0x08
    2f0e:	59 85       	ldd	r21, Y+9	; 0x09
    2f10:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <__gesf2>
    2f14:	18 16       	cp	r1, r24
    2f16:	3c f4       	brge	.+14     	; 0x2f26 <_ZN6Anchor11checkAnchorEv+0xee>
				snoozeAlarm = 0;
    2f18:	1e a6       	std	Y+46, r1	; 0x2e
    2f1a:	1f a6       	std	Y+47, r1	; 0x2f
    2f1c:	18 aa       	std	Y+48, r1	; 0x30
    2f1e:	19 aa       	std	Y+49, r1	; 0x31
				anchorAlarmTriggered = true;
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	8b ab       	std	Y+51, r24	; 0x33
    2f24:	01 c0       	rjmp	.+2      	; 0x2f28 <_ZN6Anchor11checkAnchorEv+0xf0>
			} else {
				anchorAlarmTriggered = false;
    2f26:	1b aa       	std	Y+51, r1	; 0x33
			}
		}
	}

}
    2f28:	df 91       	pop	r29
    2f2a:	cf 91       	pop	r28
    2f2c:	1f 91       	pop	r17
    2f2e:	0f 91       	pop	r16
    2f30:	ff 90       	pop	r15
    2f32:	ef 90       	pop	r14
    2f34:	df 90       	pop	r13
    2f36:	cf 90       	pop	r12
    2f38:	08 95       	ret

00002f3a <_ZN6Anchor14setAnchorPointEv>:

/*Set anchor position*/
void Anchor::setAnchorPoint() {
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	ec 01       	movw	r28, r24
	anchorLat = gps->getLatitude();
    2f40:	8c a9       	ldd	r24, Y+52	; 0x34
    2f42:	9d a9       	ldd	r25, Y+53	; 0x35
    2f44:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <_ZN3Gps11getLatitudeEv>
    2f48:	6e 87       	std	Y+14, r22	; 0x0e
    2f4a:	7f 87       	std	Y+15, r23	; 0x0f
    2f4c:	88 8b       	std	Y+16, r24	; 0x10
    2f4e:	99 8b       	std	Y+17, r25	; 0x11
	anchorLon = gps->getLongitude();
    2f50:	8c a9       	ldd	r24, Y+52	; 0x34
    2f52:	9d a9       	ldd	r25, Y+53	; 0x35
    2f54:	0e 94 07 20 	call	0x400e	; 0x400e <_ZN3Gps12getLongitudeEv>
    2f58:	6a 8b       	std	Y+18, r22	; 0x12
    2f5a:	7b 8b       	std	Y+19, r23	; 0x13
    2f5c:	8c 8b       	std	Y+20, r24	; 0x14
    2f5e:	9d 8b       	std	Y+21, r25	; 0x15
	maxAnchorDistance = 0;
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	dc 01       	movw	r26, r24
    2f66:	8a 8f       	std	Y+26, r24	; 0x1a
    2f68:	9b 8f       	std	Y+27, r25	; 0x1b
    2f6a:	ac 8f       	std	Y+28, r26	; 0x1c
    2f6c:	bd 8f       	std	Y+29, r27	; 0x1d
	saveAnchorAlarmLat(anchorLat);
    2f6e:	6e 85       	ldd	r22, Y+14	; 0x0e
    2f70:	7f 85       	ldd	r23, Y+15	; 0x0f
    2f72:	88 89       	ldd	r24, Y+16	; 0x10
    2f74:	99 89       	ldd	r25, Y+17	; 0x11
    2f76:	0e 94 57 1b 	call	0x36ae	; 0x36ae <_Z18saveAnchorAlarmLatf>
	saveAnchorAlarmLon(anchorLon);
    2f7a:	6a 89       	ldd	r22, Y+18	; 0x12
    2f7c:	7b 89       	ldd	r23, Y+19	; 0x13
    2f7e:	8c 89       	ldd	r24, Y+20	; 0x14
    2f80:	9d 89       	ldd	r25, Y+21	; 0x15
    2f82:	0e 94 3f 1b 	call	0x367e	; 0x367e <_Z18saveAnchorAlarmLonf>
}
    2f86:	df 91       	pop	r29
    2f88:	cf 91       	pop	r28
    2f8a:	08 95       	ret

00002f8c <_ZN6Anchor16drawAnchorScreenE3Lcdi>:
	saveAnchorAlarmState(anchorAlarmOn);
	//populate the box

}

void Anchor::drawAnchorScreen(Lcd lcd, int menuState) {
    2f8c:	cf 92       	push	r12
    2f8e:	df 92       	push	r13
    2f90:	ef 92       	push	r14
    2f92:	ff 92       	push	r15
    2f94:	0f 93       	push	r16
    2f96:	1f 93       	push	r17
    2f98:	cf 93       	push	r28
    2f9a:	df 93       	push	r29
    2f9c:	ec 01       	movw	r28, r24
    2f9e:	f6 2e       	mov	r15, r22
    2fa0:	e7 2e       	mov	r14, r23
    2fa2:	6a 01       	movw	r12, r20
	lcd.setCursor(2, 60);
    2fa4:	86 2f       	mov	r24, r22
    2fa6:	97 2f       	mov	r25, r23
    2fa8:	62 e0       	ldi	r22, 0x02	; 2
    2faa:	70 e0       	ldi	r23, 0x00	; 0
    2fac:	4c e3       	ldi	r20, 0x3C	; 60
    2fae:	50 e0       	ldi	r21, 0x00	; 0
    2fb0:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
	if (anchorAlarmOn) {
    2fb4:	8a a9       	ldd	r24, Y+50	; 0x32
    2fb6:	88 23       	and	r24, r24
    2fb8:	29 f0       	breq	.+10     	; 0x2fc4 <_ZN6Anchor16drawAnchorScreenE3Lcdi+0x38>
		lcd.print("Anchor alarm ON  ");
    2fba:	8f 2d       	mov	r24, r15
    2fbc:	9e 2d       	mov	r25, r14
    2fbe:	62 e4       	ldi	r22, 0x42	; 66
    2fc0:	72 e0       	ldi	r23, 0x02	; 2
    2fc2:	04 c0       	rjmp	.+8      	; 0x2fcc <_ZN6Anchor16drawAnchorScreenE3Lcdi+0x40>
	} else {
		lcd.print("Anchor alarm OFF ");
    2fc4:	8f 2d       	mov	r24, r15
    2fc6:	9e 2d       	mov	r25, r14
    2fc8:	64 e5       	ldi	r22, 0x54	; 84
    2fca:	72 e0       	ldi	r23, 0x02	; 2
    2fcc:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	}
	lcd.setCursor(2, 50);
    2fd0:	8f 2d       	mov	r24, r15
    2fd2:	9e 2d       	mov	r25, r14
    2fd4:	62 e0       	ldi	r22, 0x02	; 2
    2fd6:	70 e0       	ldi	r23, 0x00	; 0
    2fd8:	42 e3       	ldi	r20, 0x32	; 50
    2fda:	50 e0       	ldi	r21, 0x00	; 0
    2fdc:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
	lcd.print("Lat: ");
    2fe0:	8f 2d       	mov	r24, r15
    2fe2:	9e 2d       	mov	r25, r14
    2fe4:	66 e6       	ldi	r22, 0x66	; 102
    2fe6:	72 e0       	ldi	r23, 0x02	; 2
    2fe8:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>

	lcd.print(gps->getLatString(anchorLat, 4, 10));
    2fec:	4e 85       	ldd	r20, Y+14	; 0x0e
    2fee:	5f 85       	ldd	r21, Y+15	; 0x0f
    2ff0:	68 89       	ldd	r22, Y+16	; 0x10
    2ff2:	79 89       	ldd	r23, Y+17	; 0x11
    2ff4:	8c a9       	ldd	r24, Y+52	; 0x34
    2ff6:	9d a9       	ldd	r25, Y+53	; 0x35
    2ff8:	24 e0       	ldi	r18, 0x04	; 4
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	0a e0       	ldi	r16, 0x0A	; 10
    2ffe:	10 e0       	ldi	r17, 0x00	; 0
    3000:	0e 94 64 20 	call	0x40c8	; 0x40c8 <_ZN3Gps12getLatStringEfii>
    3004:	bc 01       	movw	r22, r24
    3006:	8f 2d       	mov	r24, r15
    3008:	9e 2d       	mov	r25, r14
    300a:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	lcd.setCursor(2, 40);
    300e:	8f 2d       	mov	r24, r15
    3010:	9e 2d       	mov	r25, r14
    3012:	62 e0       	ldi	r22, 0x02	; 2
    3014:	70 e0       	ldi	r23, 0x00	; 0
    3016:	48 e2       	ldi	r20, 0x28	; 40
    3018:	50 e0       	ldi	r21, 0x00	; 0
    301a:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
	lcd.print("Lon: ");
    301e:	8f 2d       	mov	r24, r15
    3020:	9e 2d       	mov	r25, r14
    3022:	6c e6       	ldi	r22, 0x6C	; 108
    3024:	72 e0       	ldi	r23, 0x02	; 2
    3026:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	lcd.print(gps->getLonString(anchorLon, 4, 10));
    302a:	4a 89       	ldd	r20, Y+18	; 0x12
    302c:	5b 89       	ldd	r21, Y+19	; 0x13
    302e:	6c 89       	ldd	r22, Y+20	; 0x14
    3030:	7d 89       	ldd	r23, Y+21	; 0x15
    3032:	8c a9       	ldd	r24, Y+52	; 0x34
    3034:	9d a9       	ldd	r25, Y+53	; 0x35
    3036:	24 e0       	ldi	r18, 0x04	; 4
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	0e 94 ce 20 	call	0x419c	; 0x419c <_ZN3Gps12getLonStringEfii>
    303e:	bc 01       	movw	r22, r24
    3040:	8f 2d       	mov	r24, r15
    3042:	9e 2d       	mov	r25, r14
    3044:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	lcd.setCursor(2, 30);
    3048:	8f 2d       	mov	r24, r15
    304a:	9e 2d       	mov	r25, r14
    304c:	62 e0       	ldi	r22, 0x02	; 2
    304e:	70 e0       	ldi	r23, 0x00	; 0
    3050:	4e e1       	ldi	r20, 0x1E	; 30
    3052:	50 e0       	ldi	r21, 0x00	; 0
    3054:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
	lcd.print("Radius : ");
    3058:	8f 2d       	mov	r24, r15
    305a:	9e 2d       	mov	r25, r14
    305c:	62 e7       	ldi	r22, 0x72	; 114
    305e:	72 e0       	ldi	r23, 0x02	; 2
    3060:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	lcd.print((int) anchorRadius);
    3064:	6e 81       	ldd	r22, Y+6	; 0x06
    3066:	7f 81       	ldd	r23, Y+7	; 0x07
    3068:	88 85       	ldd	r24, Y+8	; 0x08
    306a:	99 85       	ldd	r25, Y+9	; 0x09
    306c:	0e 94 08 45 	call	0x8a10	; 0x8a10 <__fixsfsi>
    3070:	9b 01       	movw	r18, r22
    3072:	ac 01       	movw	r20, r24
    3074:	8f 2d       	mov	r24, r15
    3076:	9e 2d       	mov	r25, r14
    3078:	b9 01       	movw	r22, r18
    307a:	4a e0       	ldi	r20, 0x0A	; 10
    307c:	50 e0       	ldi	r21, 0x00	; 0
    307e:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <_ZN5Print5printEii>
	lcd.print("M     ");
    3082:	8f 2d       	mov	r24, r15
    3084:	9e 2d       	mov	r25, r14
    3086:	6c e7       	ldi	r22, 0x7C	; 124
    3088:	72 e0       	ldi	r23, 0x02	; 2
    308a:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	lcd.setCursor(2, 20);
    308e:	8f 2d       	mov	r24, r15
    3090:	9e 2d       	mov	r25, r14
    3092:	62 e0       	ldi	r22, 0x02	; 2
    3094:	70 e0       	ldi	r23, 0x00	; 0
    3096:	44 e1       	ldi	r20, 0x14	; 20
    3098:	50 e0       	ldi	r21, 0x00	; 0
    309a:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
	if (menuState >= ANCHORMINMENU && menuState <= ANCHORMAXMENU) {
    309e:	c6 01       	movw	r24, r12
    30a0:	0a 97       	sbiw	r24, 0x0a	; 10
    30a2:	84 30       	cpi	r24, 0x04	; 4
    30a4:	91 05       	cpc	r25, r1
    30a6:	38 f4       	brcc	.+14     	; 0x30b6 <_ZN6Anchor16drawAnchorScreenE3Lcdi+0x12a>
		lcd.print("Back to prev menu ");
    30a8:	8f 2d       	mov	r24, r15
    30aa:	9e 2d       	mov	r25, r14
    30ac:	63 e8       	ldi	r22, 0x83	; 131
    30ae:	72 e0       	ldi	r23, 0x02	; 2
    30b0:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
    30b4:	69 c0       	rjmp	.+210    	; 0x3188 <_ZN6Anchor16drawAnchorScreenE3Lcdi+0x1fc>
		//lcd.writeButtonLabels(lcd.SET, lcd.NEXT, lcd.PREV);
	} else {
		lcd.print("Now: ");
    30b6:	8f 2d       	mov	r24, r15
    30b8:	9e 2d       	mov	r25, r14
    30ba:	66 e9       	ldi	r22, 0x96	; 150
    30bc:	72 e0       	ldi	r23, 0x02	; 2
    30be:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		lcd.print((int) anchorDistance);
    30c2:	6e 89       	ldd	r22, Y+22	; 0x16
    30c4:	7f 89       	ldd	r23, Y+23	; 0x17
    30c6:	88 8d       	ldd	r24, Y+24	; 0x18
    30c8:	99 8d       	ldd	r25, Y+25	; 0x19
    30ca:	0e 94 08 45 	call	0x8a10	; 0x8a10 <__fixsfsi>
    30ce:	9b 01       	movw	r18, r22
    30d0:	ac 01       	movw	r20, r24
    30d2:	8f 2d       	mov	r24, r15
    30d4:	9e 2d       	mov	r25, r14
    30d6:	b9 01       	movw	r22, r18
    30d8:	4a e0       	ldi	r20, 0x0A	; 10
    30da:	50 e0       	ldi	r21, 0x00	; 0
    30dc:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <_ZN5Print5printEii>
		// lcd.print("M, max: ");
		//lcd.print((int)maxAnchorDistance);
		//lcd.print("M     ");
		lcd.print("M,Box:");
    30e0:	8f 2d       	mov	r24, r15
    30e2:	9e 2d       	mov	r25, r14
    30e4:	6c e9       	ldi	r22, 0x9C	; 156
    30e6:	72 e0       	ldi	r23, 0x02	; 2
    30e8:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		float w = (anchorE - anchorW) / LLMTRS;
		float h = (anchorN - anchorS) / LLMTRS;
    30ec:	6e 8d       	ldd	r22, Y+30	; 0x1e
    30ee:	7f 8d       	ldd	r23, Y+31	; 0x1f
    30f0:	88 a1       	ldd	r24, Y+32	; 0x20
    30f2:	99 a1       	ldd	r25, Y+33	; 0x21
    30f4:	2a a1       	ldd	r18, Y+34	; 0x22
    30f6:	3b a1       	ldd	r19, Y+35	; 0x23
    30f8:	4c a1       	ldd	r20, Y+36	; 0x24
    30fa:	5d a1       	ldd	r21, Y+37	; 0x25
    30fc:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    3100:	2d e9       	ldi	r18, 0x9D	; 157
    3102:	3b ef       	ldi	r19, 0xFB	; 251
    3104:	46 e1       	ldi	r20, 0x16	; 22
    3106:	57 e3       	ldi	r21, 0x37	; 55
    3108:	0e 94 a0 44 	call	0x8940	; 0x8940 <__divsf3>
    310c:	16 2f       	mov	r17, r22
    310e:	07 2f       	mov	r16, r23
    3110:	6c 01       	movw	r12, r24
		lcd.print((int) anchorDistance);
		// lcd.print("M, max: ");
		//lcd.print((int)maxAnchorDistance);
		//lcd.print("M     ");
		lcd.print("M,Box:");
		float w = (anchorE - anchorW) / LLMTRS;
    3112:	6e a1       	ldd	r22, Y+38	; 0x26
    3114:	7f a1       	ldd	r23, Y+39	; 0x27
    3116:	88 a5       	ldd	r24, Y+40	; 0x28
    3118:	99 a5       	ldd	r25, Y+41	; 0x29
    311a:	2a a5       	ldd	r18, Y+42	; 0x2a
    311c:	3b a5       	ldd	r19, Y+43	; 0x2b
    311e:	4c a5       	ldd	r20, Y+44	; 0x2c
    3120:	5d a5       	ldd	r21, Y+45	; 0x2d
    3122:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    3126:	2d e9       	ldi	r18, 0x9D	; 157
    3128:	3b ef       	ldi	r19, 0xFB	; 251
    312a:	46 e1       	ldi	r20, 0x16	; 22
    312c:	57 e3       	ldi	r21, 0x37	; 55
    312e:	0e 94 a0 44 	call	0x8940	; 0x8940 <__divsf3>
		float h = (anchorN - anchorS) / LLMTRS;
		lcd.print((int) w);
    3132:	0e 94 08 45 	call	0x8a10	; 0x8a10 <__fixsfsi>
    3136:	9b 01       	movw	r18, r22
    3138:	ac 01       	movw	r20, r24
    313a:	8f 2d       	mov	r24, r15
    313c:	9e 2d       	mov	r25, r14
    313e:	b9 01       	movw	r22, r18
    3140:	4a e0       	ldi	r20, 0x0A	; 10
    3142:	50 e0       	ldi	r21, 0x00	; 0
    3144:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <_ZN5Print5printEii>
		lcd.print("x");
    3148:	8f 2d       	mov	r24, r15
    314a:	9e 2d       	mov	r25, r14
    314c:	63 ea       	ldi	r22, 0xA3	; 163
    314e:	72 e0       	ldi	r23, 0x02	; 2
    3150:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		lcd.print((int) h);
    3154:	a8 01       	movw	r20, r16
    3156:	65 2f       	mov	r22, r21
    3158:	74 2f       	mov	r23, r20
    315a:	8c 2d       	mov	r24, r12
    315c:	9d 2d       	mov	r25, r13
    315e:	0e 94 08 45 	call	0x8a10	; 0x8a10 <__fixsfsi>
    3162:	9b 01       	movw	r18, r22
    3164:	ac 01       	movw	r20, r24
    3166:	8f 2d       	mov	r24, r15
    3168:	9e 2d       	mov	r25, r14
    316a:	b9 01       	movw	r22, r18
    316c:	4a e0       	ldi	r20, 0x0A	; 10
    316e:	50 e0       	ldi	r21, 0x00	; 0
    3170:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <_ZN5Print5printEii>
		lcd.writeButtonLabels(EDIT, PGDN, PGUP);
    3174:	8f 2d       	mov	r24, r15
    3176:	9e 2d       	mov	r25, r14
    3178:	65 ea       	ldi	r22, 0xA5	; 165
    317a:	72 e0       	ldi	r23, 0x02	; 2
    317c:	4a ea       	ldi	r20, 0xAA	; 170
    317e:	52 e0       	ldi	r21, 0x02	; 2
    3180:	2f ea       	ldi	r18, 0xAF	; 175
    3182:	32 e0       	ldi	r19, 0x02	; 2
    3184:	0e 94 69 23 	call	0x46d2	; 0x46d2 <_ZN3Lcd17writeButtonLabelsEPcS0_S0_>

	}
	lastLcdUpdate= millis();
    3188:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    318c:	6a 83       	std	Y+2, r22	; 0x02
    318e:	7b 83       	std	Y+3, r23	; 0x03
    3190:	8c 83       	std	Y+4, r24	; 0x04
    3192:	9d 83       	std	Y+5, r25	; 0x05
}
    3194:	df 91       	pop	r29
    3196:	cf 91       	pop	r28
    3198:	1f 91       	pop	r17
    319a:	0f 91       	pop	r16
    319c:	ff 90       	pop	r15
    319e:	ef 90       	pop	r14
    31a0:	df 90       	pop	r13
    31a2:	cf 90       	pop	r12
    31a4:	08 95       	ret

000031a6 <_ZN6Anchor13drawAnchorBoxE3Lcdi>:
			lastLcdUpdate= millis();
			drawAnchorScreen(lcd, menuState);
		}
	}
}
void Anchor::drawAnchorBox(Lcd lcd, int menuState) {
    31a6:	0f 93       	push	r16
    31a8:	1f 93       	push	r17
    31aa:	cf 93       	push	r28
    31ac:	df 93       	push	r29
    31ae:	ec 01       	movw	r28, r24
    31b0:	cb 01       	movw	r24, r22
	if (menuState >= ANCHORMINMENU && menuState <= ANCHORMAXMENU) {
    31b2:	9a 01       	movw	r18, r20
    31b4:	2a 50       	subi	r18, 0x0A	; 10
    31b6:	30 40       	sbci	r19, 0x00	; 0
    31b8:	24 30       	cpi	r18, 0x04	; 4
    31ba:	31 05       	cpc	r19, r1
    31bc:	b8 f5       	brcc	.+110    	; 0x322c <_ZN6Anchor13drawAnchorBoxE3Lcdi+0x86>
		//draw the correct box
		if (menuState == ANCHORSTATE)
    31be:	4a 30       	cpi	r20, 0x0A	; 10
    31c0:	51 05       	cpc	r21, r1
    31c2:	49 f4       	brne	.+18     	; 0x31d6 <_ZN6Anchor13drawAnchorBoxE3Lcdi+0x30>
			lcd.drawBox(0, 51, 127, 62);
    31c4:	60 e0       	ldi	r22, 0x00	; 0
    31c6:	70 e0       	ldi	r23, 0x00	; 0
    31c8:	43 e3       	ldi	r20, 0x33	; 51
    31ca:	50 e0       	ldi	r21, 0x00	; 0
    31cc:	2f e7       	ldi	r18, 0x7F	; 127
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	0e e3       	ldi	r16, 0x3E	; 62
    31d2:	10 e0       	ldi	r17, 0x00	; 0
    31d4:	23 c0       	rjmp	.+70     	; 0x321c <_ZN6Anchor13drawAnchorBoxE3Lcdi+0x76>
		if (menuState == ANCHORPOINT)
    31d6:	4b 30       	cpi	r20, 0x0B	; 11
    31d8:	51 05       	cpc	r21, r1
    31da:	49 f4       	brne	.+18     	; 0x31ee <_ZN6Anchor13drawAnchorBoxE3Lcdi+0x48>
			lcd.drawBox(0, 31, 127, 52);
    31dc:	60 e0       	ldi	r22, 0x00	; 0
    31de:	70 e0       	ldi	r23, 0x00	; 0
    31e0:	4f e1       	ldi	r20, 0x1F	; 31
    31e2:	50 e0       	ldi	r21, 0x00	; 0
    31e4:	2f e7       	ldi	r18, 0x7F	; 127
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	04 e3       	ldi	r16, 0x34	; 52
    31ea:	10 e0       	ldi	r17, 0x00	; 0
    31ec:	17 c0       	rjmp	.+46     	; 0x321c <_ZN6Anchor13drawAnchorBoxE3Lcdi+0x76>
		if (menuState == ANCHORRADIUS)
    31ee:	4c 30       	cpi	r20, 0x0C	; 12
    31f0:	51 05       	cpc	r21, r1
    31f2:	49 f4       	brne	.+18     	; 0x3206 <_ZN6Anchor13drawAnchorBoxE3Lcdi+0x60>
			lcd.drawBox(0, 21, 127, 32);
    31f4:	60 e0       	ldi	r22, 0x00	; 0
    31f6:	70 e0       	ldi	r23, 0x00	; 0
    31f8:	45 e1       	ldi	r20, 0x15	; 21
    31fa:	50 e0       	ldi	r21, 0x00	; 0
    31fc:	2f e7       	ldi	r18, 0x7F	; 127
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	00 e2       	ldi	r16, 0x20	; 32
    3202:	10 e0       	ldi	r17, 0x00	; 0
    3204:	0b c0       	rjmp	.+22     	; 0x321c <_ZN6Anchor13drawAnchorBoxE3Lcdi+0x76>
		if (menuState == ANCHORRTN)
    3206:	4d 30       	cpi	r20, 0x0D	; 13
    3208:	51 05       	cpc	r21, r1
    320a:	51 f4       	brne	.+20     	; 0x3220 <_ZN6Anchor13drawAnchorBoxE3Lcdi+0x7a>
			lcd.drawBox(0, 11, 127, 22);
    320c:	60 e0       	ldi	r22, 0x00	; 0
    320e:	70 e0       	ldi	r23, 0x00	; 0
    3210:	4b e0       	ldi	r20, 0x0B	; 11
    3212:	50 e0       	ldi	r21, 0x00	; 0
    3214:	2f e7       	ldi	r18, 0x7F	; 127
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	06 e1       	ldi	r16, 0x16	; 22
    321a:	10 e0       	ldi	r17, 0x00	; 0
    321c:	0e 94 ab 22 	call	0x4556	; 0x4556 <_ZN3Lcd7drawBoxEiiii>
		lastLcdUpdate= millis();
    3220:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    3224:	6a 83       	std	Y+2, r22	; 0x02
    3226:	7b 83       	std	Y+3, r23	; 0x03
    3228:	8c 83       	std	Y+4, r24	; 0x04
    322a:	9d 83       	std	Y+5, r25	; 0x05
	}
}
    322c:	df 91       	pop	r29
    322e:	cf 91       	pop	r28
    3230:	1f 91       	pop	r17
    3232:	0f 91       	pop	r16
    3234:	08 95       	ret

00003236 <_ZN6Anchor14eraseAnchorBoxE3Lcdi>:

void Anchor::eraseAnchorBox(Lcd lcd, int menuState) {
    3236:	0f 93       	push	r16
    3238:	1f 93       	push	r17
    323a:	cf 93       	push	r28
    323c:	df 93       	push	r29
    323e:	ec 01       	movw	r28, r24
    3240:	cb 01       	movw	r24, r22
	if (menuState >= ANCHORMINMENU && menuState <= ANCHORMAXMENU) {
    3242:	9a 01       	movw	r18, r20
    3244:	2a 50       	subi	r18, 0x0A	; 10
    3246:	30 40       	sbci	r19, 0x00	; 0
    3248:	24 30       	cpi	r18, 0x04	; 4
    324a:	31 05       	cpc	r19, r1
    324c:	b8 f5       	brcc	.+110    	; 0x32bc <_ZN6Anchor14eraseAnchorBoxE3Lcdi+0x86>
		//draw the correct box
		if (menuState == ANCHORSTATE)
    324e:	4a 30       	cpi	r20, 0x0A	; 10
    3250:	51 05       	cpc	r21, r1
    3252:	49 f4       	brne	.+18     	; 0x3266 <_ZN6Anchor14eraseAnchorBoxE3Lcdi+0x30>
			lcd.eraseBox(0, 51, 127, 62);
    3254:	60 e0       	ldi	r22, 0x00	; 0
    3256:	70 e0       	ldi	r23, 0x00	; 0
    3258:	43 e3       	ldi	r20, 0x33	; 51
    325a:	50 e0       	ldi	r21, 0x00	; 0
    325c:	2f e7       	ldi	r18, 0x7F	; 127
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	0e e3       	ldi	r16, 0x3E	; 62
    3262:	10 e0       	ldi	r17, 0x00	; 0
    3264:	23 c0       	rjmp	.+70     	; 0x32ac <_ZN6Anchor14eraseAnchorBoxE3Lcdi+0x76>
		if (menuState == ANCHORPOINT)
    3266:	4b 30       	cpi	r20, 0x0B	; 11
    3268:	51 05       	cpc	r21, r1
    326a:	49 f4       	brne	.+18     	; 0x327e <_ZN6Anchor14eraseAnchorBoxE3Lcdi+0x48>
			lcd.eraseBox(0, 31, 127, 52);
    326c:	60 e0       	ldi	r22, 0x00	; 0
    326e:	70 e0       	ldi	r23, 0x00	; 0
    3270:	4f e1       	ldi	r20, 0x1F	; 31
    3272:	50 e0       	ldi	r21, 0x00	; 0
    3274:	2f e7       	ldi	r18, 0x7F	; 127
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	04 e3       	ldi	r16, 0x34	; 52
    327a:	10 e0       	ldi	r17, 0x00	; 0
    327c:	17 c0       	rjmp	.+46     	; 0x32ac <_ZN6Anchor14eraseAnchorBoxE3Lcdi+0x76>
		if (menuState == ANCHORRADIUS)
    327e:	4c 30       	cpi	r20, 0x0C	; 12
    3280:	51 05       	cpc	r21, r1
    3282:	49 f4       	brne	.+18     	; 0x3296 <_ZN6Anchor14eraseAnchorBoxE3Lcdi+0x60>
			lcd.eraseBox(0, 21, 127, 32);
    3284:	60 e0       	ldi	r22, 0x00	; 0
    3286:	70 e0       	ldi	r23, 0x00	; 0
    3288:	45 e1       	ldi	r20, 0x15	; 21
    328a:	50 e0       	ldi	r21, 0x00	; 0
    328c:	2f e7       	ldi	r18, 0x7F	; 127
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	00 e2       	ldi	r16, 0x20	; 32
    3292:	10 e0       	ldi	r17, 0x00	; 0
    3294:	0b c0       	rjmp	.+22     	; 0x32ac <_ZN6Anchor14eraseAnchorBoxE3Lcdi+0x76>
		if (menuState == ANCHORRTN)
    3296:	4d 30       	cpi	r20, 0x0D	; 13
    3298:	51 05       	cpc	r21, r1
    329a:	51 f4       	brne	.+20     	; 0x32b0 <_ZN6Anchor14eraseAnchorBoxE3Lcdi+0x7a>
			lcd.eraseBox(0, 11, 127, 22);
    329c:	60 e0       	ldi	r22, 0x00	; 0
    329e:	70 e0       	ldi	r23, 0x00	; 0
    32a0:	4b e0       	ldi	r20, 0x0B	; 11
    32a2:	50 e0       	ldi	r21, 0x00	; 0
    32a4:	2f e7       	ldi	r18, 0x7F	; 127
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	06 e1       	ldi	r16, 0x16	; 22
    32aa:	10 e0       	ldi	r17, 0x00	; 0
    32ac:	0e 94 0a 23 	call	0x4614	; 0x4614 <_ZN3Lcd8eraseBoxEiiii>
		lastLcdUpdate= millis();
    32b0:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    32b4:	6a 83       	std	Y+2, r22	; 0x02
    32b6:	7b 83       	std	Y+3, r23	; 0x03
    32b8:	8c 83       	std	Y+4, r24	; 0x04
    32ba:	9d 83       	std	Y+5, r25	; 0x05
	}
}
    32bc:	df 91       	pop	r29
    32be:	cf 91       	pop	r28
    32c0:	1f 91       	pop	r17
    32c2:	0f 91       	pop	r16
    32c4:	08 95       	ret

000032c6 <_ZN9AutopilotC1EP3Gps>:
double rudderCommand; //Output
PID headingPid(&actualHeading, &rudderCommand, &targetHeading, P_Param, I_Param,
		D_Param, DIRECT);

Autopilot::Autopilot(Gps* gps) {
	this->gps = gps;
    32c6:	fc 01       	movw	r30, r24
    32c8:	71 83       	std	Z+1, r23	; 0x01
    32ca:	60 83       	st	Z, r22
	targetHeading = 0; //Setpoint
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	dc 01       	movw	r26, r24
    32d2:	80 93 c2 08 	sts	0x08C2, r24
    32d6:	90 93 c3 08 	sts	0x08C3, r25
    32da:	a0 93 c4 08 	sts	0x08C4, r26
    32de:	b0 93 c5 08 	sts	0x08C5, r27
	actualHeading = 0; //Input
    32e2:	80 93 c6 08 	sts	0x08C6, r24
    32e6:	90 93 c7 08 	sts	0x08C7, r25
    32ea:	a0 93 c8 08 	sts	0x08C8, r26
    32ee:	b0 93 c9 08 	sts	0x08C9, r27
	rudderCommand = 0; //Output
    32f2:	80 93 ca 08 	sts	0x08CA, r24
    32f6:	90 93 cb 08 	sts	0x08CB, r25
    32fa:	a0 93 cc 08 	sts	0x08CC, r26
    32fe:	b0 93 cd 08 	sts	0x08CD, r27
	//headingPid.SetOutputLimits(0,66); //output limits
	headingPid.SetSampleTime(100);
    3302:	8e ec       	ldi	r24, 0xCE	; 206
    3304:	98 e0       	ldi	r25, 0x08	; 8
    3306:	64 e6       	ldi	r22, 0x64	; 100
    3308:	70 e0       	ldi	r23, 0x00	; 0
    330a:	0e 94 21 0b 	call	0x1642	; 0x1642 <_ZN3PID13SetSampleTimeEi>

}
    330e:	08 95       	ret

00003310 <_ZN9AutopilotD1Ev>:
Autopilot::~Autopilot() {

}
    3310:	08 95       	ret

00003312 <_ZN9Autopilot9isEnabledEv>:

bool Autopilot::isEnabled(){
	return headingPid.GetMode();
    3312:	8e ec       	ldi	r24, 0xCE	; 206
    3314:	98 e0       	ldi	r25, 0x08	; 8
    3316:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN3PID7GetModeEv>
    331a:	21 e0       	ldi	r18, 0x01	; 1
    331c:	00 97       	sbiw	r24, 0x00	; 0
    331e:	09 f4       	brne	.+2      	; 0x3322 <_ZN9Autopilot9isEnabledEv+0x10>
    3320:	20 e0       	ldi	r18, 0x00	; 0
}
    3322:	82 2f       	mov	r24, r18
    3324:	08 95       	ret

00003326 <_ZN9Autopilot15enableAutoPilotEv>:

/*
 * Returns the current heading 0-360 deg (assume T?)
 */
double Autopilot::getCurrentHeading() {
	return currentHeading; //gps->getRmcCourse();
    3326:	80 91 be 08 	lds	r24, 0x08BE
    332a:	90 91 bf 08 	lds	r25, 0x08BF
    332e:	a0 91 c0 08 	lds	r26, 0x08C0
    3332:	b0 91 c1 08 	lds	r27, 0x08C1
	return headingPid.GetMode();
}

void Autopilot::enableAutoPilot() {
	//initialize the variables we're linked to
	targetHeading = getCurrentHeading();
    3336:	80 93 c2 08 	sts	0x08C2, r24
    333a:	90 93 c3 08 	sts	0x08C3, r25
    333e:	a0 93 c4 08 	sts	0x08C4, r26
    3342:	b0 93 c5 08 	sts	0x08C5, r27
	actualHeading = getCurrentHeading();
    3346:	80 93 c6 08 	sts	0x08C6, r24
    334a:	90 93 c7 08 	sts	0x08C7, r25
    334e:	a0 93 c8 08 	sts	0x08C8, r26
    3352:	b0 93 c9 08 	sts	0x08C9, r27

	//turn the PID on
	headingPid.SetMode(AUTOMATIC);
    3356:	8e ec       	ldi	r24, 0xCE	; 206
    3358:	98 e0       	ldi	r25, 0x08	; 8
    335a:	61 e0       	ldi	r22, 0x01	; 1
    335c:	70 e0       	ldi	r23, 0x00	; 0
    335e:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZN3PID7SetModeEi>
}
    3362:	08 95       	ret

00003364 <_ZN9Autopilot16disableAutoPilotEv>:

void Autopilot::disableAutoPilot() {
	headingPid.SetMode(MANUAL);
    3364:	8e ec       	ldi	r24, 0xCE	; 206
    3366:	98 e0       	ldi	r25, 0x08	; 8
    3368:	60 e0       	ldi	r22, 0x00	; 0
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZN3PID7SetModeEi>
}
    3370:	08 95       	ret

00003372 <_ZN9Autopilot17getCurrentHeadingEv>:
/*
 * Returns the current heading 0-360 deg (assume T?)
 */
double Autopilot::getCurrentHeading() {
	return currentHeading; //gps->getRmcCourse();
}
    3372:	50 91 be 08 	lds	r21, 0x08BE
    3376:	40 91 bf 08 	lds	r20, 0x08BF
    337a:	30 91 c0 08 	lds	r19, 0x08C0
    337e:	20 91 c1 08 	lds	r18, 0x08C1
    3382:	65 2f       	mov	r22, r21
    3384:	74 2f       	mov	r23, r20
    3386:	83 2f       	mov	r24, r19
    3388:	92 2f       	mov	r25, r18
    338a:	08 95       	ret

0000338c <_ZN9Autopilot17setCurrentHeadingEd>:

void Autopilot::setCurrentHeading(double heading) {
	currentHeading = heading; //gps->getRmcCourse();
    338c:	40 93 be 08 	sts	0x08BE, r20
    3390:	50 93 bf 08 	sts	0x08BF, r21
    3394:	60 93 c0 08 	sts	0x08C0, r22
    3398:	70 93 c1 08 	sts	0x08C1, r23
}
    339c:	08 95       	ret

0000339e <_ZN9Autopilot16setTargetHeadingEd>:

void Autopilot::setTargetHeading(double target) {
	targetHeading = target;
    339e:	40 93 c2 08 	sts	0x08C2, r20
    33a2:	50 93 c3 08 	sts	0x08C3, r21
    33a6:	60 93 c4 08 	sts	0x08C4, r22
    33aa:	70 93 c5 08 	sts	0x08C5, r23
}
    33ae:	08 95       	ret

000033b0 <_ZN9Autopilot16getTargetHeadingEv>:
double Autopilot::getTargetHeading() {
	return targetHeading;
}
    33b0:	50 91 c2 08 	lds	r21, 0x08C2
    33b4:	40 91 c3 08 	lds	r20, 0x08C3
    33b8:	30 91 c4 08 	lds	r19, 0x08C4
    33bc:	20 91 c5 08 	lds	r18, 0x08C5
    33c0:	65 2f       	mov	r22, r21
    33c2:	74 2f       	mov	r23, r20
    33c4:	83 2f       	mov	r24, r19
    33c6:	92 2f       	mov	r25, r18
    33c8:	08 95       	ret

000033ca <_ZN9Autopilot19getRudderCorrectionEv>:

double Autopilot::getRudderCorrection() {
	//send out -33 to 33 as deg rudder correction
	return (rudderCommand - 128) / 6;
    33ca:	60 91 ca 08 	lds	r22, 0x08CA
    33ce:	70 91 cb 08 	lds	r23, 0x08CB
    33d2:	80 91 cc 08 	lds	r24, 0x08CC
    33d6:	90 91 cd 08 	lds	r25, 0x08CD
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e0       	ldi	r20, 0x00	; 0
    33e0:	53 e4       	ldi	r21, 0x43	; 67
    33e2:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	40 ec       	ldi	r20, 0xC0	; 192
    33ec:	50 e4       	ldi	r21, 0x40	; 64
    33ee:	0e 94 a0 44 	call	0x8940	; 0x8940 <__divsf3>
}
    33f2:	08 95       	ret

000033f4 <_ZN9Autopilot13calcAutoPilotEv>:
void Autopilot::calcAutoPilot() {
	//we dont do this if the autopilot is MANUAL
	if (headingPid.GetMode() == AUTOMATIC) {
    33f4:	8e ec       	ldi	r24, 0xCE	; 206
    33f6:	98 e0       	ldi	r25, 0x08	; 8
    33f8:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN3PID7GetModeEv>
    33fc:	81 30       	cpi	r24, 0x01	; 1
    33fe:	91 05       	cpc	r25, r1
    3400:	a1 f4       	brne	.+40     	; 0x342a <_ZN9Autopilot13calcAutoPilotEv+0x36>
		actualHeading = getCurrentHeading();
    3402:	80 91 be 08 	lds	r24, 0x08BE
    3406:	90 91 bf 08 	lds	r25, 0x08BF
    340a:	a0 91 c0 08 	lds	r26, 0x08C0
    340e:	b0 91 c1 08 	lds	r27, 0x08C1
    3412:	80 93 c6 08 	sts	0x08C6, r24
    3416:	90 93 c7 08 	sts	0x08C7, r25
    341a:	a0 93 c8 08 	sts	0x08C8, r26
    341e:	b0 93 c9 08 	sts	0x08C9, r27
		headingPid.Compute();
    3422:	8e ec       	ldi	r24, 0xCE	; 206
    3424:	98 e0       	ldi	r25, 0x08	; 8
    3426:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN3PID7ComputeEv>
    342a:	08 95       	ret

0000342c <_GLOBAL__I_currentHeading>:

	}
}
    342c:	af 92       	push	r10
    342e:	bf 92       	push	r11
    3430:	cf 92       	push	r12
    3432:	df 92       	push	r13
    3434:	ef 92       	push	r14
    3436:	ff 92       	push	r15
    3438:	0f 93       	push	r16
    343a:	1f 93       	push	r17
double currentHeading = 0;
double targetHeading; //Setpoint
double actualHeading; //Input
double rudderCommand; //Output
PID headingPid(&actualHeading, &rudderCommand, &targetHeading, P_Param, I_Param,
		D_Param, DIRECT);
    343c:	00 d0       	rcall	.+0      	; 0x343e <_GLOBAL__I_currentHeading+0x12>
    343e:	00 d0       	rcall	.+0      	; 0x3440 <_GLOBAL__I_currentHeading+0x14>
    3440:	00 d0       	rcall	.+0      	; 0x3442 <_GLOBAL__I_currentHeading+0x16>
    3442:	8a e9       	ldi	r24, 0x9A	; 154
    3444:	99 e9       	ldi	r25, 0x99	; 153
    3446:	a9 e9       	ldi	r26, 0x99	; 153
    3448:	be e3       	ldi	r27, 0x3E	; 62
    344a:	ed b7       	in	r30, 0x3d	; 61
    344c:	fe b7       	in	r31, 0x3e	; 62
    344e:	81 83       	std	Z+1, r24	; 0x01
    3450:	92 83       	std	Z+2, r25	; 0x02
    3452:	a3 83       	std	Z+3, r26	; 0x03
    3454:	b4 83       	std	Z+4, r27	; 0x04
    3456:	16 82       	std	Z+6, r1	; 0x06
    3458:	15 82       	std	Z+5, r1	; 0x05
    345a:	8e ec       	ldi	r24, 0xCE	; 206
    345c:	98 e0       	ldi	r25, 0x08	; 8
    345e:	66 ec       	ldi	r22, 0xC6	; 198
    3460:	78 e0       	ldi	r23, 0x08	; 8
    3462:	4a ec       	ldi	r20, 0xCA	; 202
    3464:	58 e0       	ldi	r21, 0x08	; 8
    3466:	22 ec       	ldi	r18, 0xC2	; 194
    3468:	38 e0       	ldi	r19, 0x08	; 8
    346a:	0f 2e       	mov	r0, r31
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	ef 2e       	mov	r14, r31
    3470:	f0 e0       	ldi	r31, 0x00	; 0
    3472:	ff 2e       	mov	r15, r31
    3474:	f0 e0       	ldi	r31, 0x00	; 0
    3476:	0f 2f       	mov	r16, r31
    3478:	f0 e4       	ldi	r31, 0x40	; 64
    347a:	1f 2f       	mov	r17, r31
    347c:	f0 2d       	mov	r31, r0
    347e:	0f 2e       	mov	r0, r31
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	af 2e       	mov	r10, r31
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	bf 2e       	mov	r11, r31
    3488:	f0 ea       	ldi	r31, 0xA0	; 160
    348a:	cf 2e       	mov	r12, r31
    348c:	f0 e4       	ldi	r31, 0x40	; 64
    348e:	df 2e       	mov	r13, r31
    3490:	f0 2d       	mov	r31, r0
    3492:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN3PIDC1EPdS0_S0_dddi>
    3496:	8d b7       	in	r24, 0x3d	; 61
    3498:	9e b7       	in	r25, 0x3e	; 62
    349a:	06 96       	adiw	r24, 0x06	; 6
    349c:	0f b6       	in	r0, 0x3f	; 63
    349e:	f8 94       	cli
    34a0:	9e bf       	out	0x3e, r25	; 62
    34a2:	0f be       	out	0x3f, r0	; 63
    34a4:	8d bf       	out	0x3d, r24	; 61
	if (headingPid.GetMode() == AUTOMATIC) {
		actualHeading = getCurrentHeading();
		headingPid.Compute();

	}
}
    34a6:	1f 91       	pop	r17
    34a8:	0f 91       	pop	r16
    34aa:	ff 90       	pop	r15
    34ac:	ef 90       	pop	r14
    34ae:	df 90       	pop	r13
    34b0:	cf 90       	pop	r12
    34b2:	bf 90       	pop	r11
    34b4:	af 90       	pop	r10
    34b6:	08 95       	ret

000034b8 <_Z20EEPROM_writeAnythingIbEiiRKT_>:
#define anchorLonAddr  6
#define anchorRadiusAddr 11
#define windAlarmSpeedAddr 15
#define windAlarmOnAddr 19

template<class T> int EEPROM_writeAnything(int ee, const T& value) {
    34b8:	9c 01       	movw	r18, r24
    34ba:	fb 01       	movw	r30, r22
	const unsigned char* p = (const unsigned char*) (const void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		EEPROM.write(ee++, *p++);
    34bc:	8d eb       	ldi	r24, 0xBD	; 189
    34be:	98 e0       	ldi	r25, 0x08	; 8
    34c0:	b9 01       	movw	r22, r18
    34c2:	40 81       	ld	r20, Z
    34c4:	0e 94 d5 13 	call	0x27aa	; 0x27aa <_ZN11EEPROMClass5writeEih>
	return i;
}
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	08 95       	ret

000034ce <_Z18saveWindAlarmStateb>:
	for (i = 0; i < sizeof(value); i++)
		*p++ = EEPROM.read(ee++);
	return i;
}
//Wind
void saveWindAlarmState(bool windAlarm) {
    34ce:	df 93       	push	r29
    34d0:	cf 93       	push	r28
    34d2:	0f 92       	push	r0
    34d4:	cd b7       	in	r28, 0x3d	; 61
    34d6:	de b7       	in	r29, 0x3e	; 62
    34d8:	89 83       	std	Y+1, r24	; 0x01
	EEPROM_writeAnything(windAlarmOnAddr, windAlarm);
    34da:	83 e1       	ldi	r24, 0x13	; 19
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	be 01       	movw	r22, r28
    34e0:	6f 5f       	subi	r22, 0xFF	; 255
    34e2:	7f 4f       	sbci	r23, 0xFF	; 255
    34e4:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <_Z20EEPROM_writeAnythingIbEiiRKT_>
}
    34e8:	0f 90       	pop	r0
    34ea:	cf 91       	pop	r28
    34ec:	df 91       	pop	r29
    34ee:	08 95       	ret

000034f0 <_Z19EEPROM_readAnythingIbEiiRT_>:
	for (i = 0; i < sizeof(value); i++)
		EEPROM.write(ee++, *p++);
	return i;
}

template<class T> int EEPROM_readAnything(int ee, T& value) {
    34f0:	cf 93       	push	r28
    34f2:	df 93       	push	r29
    34f4:	9c 01       	movw	r18, r24
    34f6:	eb 01       	movw	r28, r22
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		*p++ = EEPROM.read(ee++);
    34f8:	8d eb       	ldi	r24, 0xBD	; 189
    34fa:	98 e0       	ldi	r25, 0x08	; 8
    34fc:	b9 01       	movw	r22, r18
    34fe:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN11EEPROMClass4readEi>
    3502:	88 83       	st	Y, r24
	return i;
}
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	df 91       	pop	r29
    350a:	cf 91       	pop	r28
    350c:	08 95       	ret

0000350e <_Z18readWindAlarmStatev>:
//Wind
void saveWindAlarmState(bool windAlarm) {
	EEPROM_writeAnything(windAlarmOnAddr, windAlarm);
}
bool readWindAlarmState() {
    350e:	df 93       	push	r29
    3510:	cf 93       	push	r28
    3512:	0f 92       	push	r0
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
	bool alarm = false;
    3518:	19 82       	std	Y+1, r1	; 0x01
	EEPROM_readAnything(windAlarmOnAddr, alarm);
    351a:	83 e1       	ldi	r24, 0x13	; 19
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	be 01       	movw	r22, r28
    3520:	6f 5f       	subi	r22, 0xFF	; 255
    3522:	7f 4f       	sbci	r23, 0xFF	; 255
    3524:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <_Z19EEPROM_readAnythingIbEiiRT_>
	return alarm;
}
    3528:	89 81       	ldd	r24, Y+1	; 0x01
    352a:	0f 90       	pop	r0
    352c:	cf 91       	pop	r28
    352e:	df 91       	pop	r29
    3530:	08 95       	ret

00003532 <_Z20EEPROM_writeAnythingIiEiiRKT_>:
#define anchorLonAddr  6
#define anchorRadiusAddr 11
#define windAlarmSpeedAddr 15
#define windAlarmOnAddr 19

template<class T> int EEPROM_writeAnything(int ee, const T& value) {
    3532:	ef 92       	push	r14
    3534:	ff 92       	push	r15
    3536:	0f 93       	push	r16
    3538:	1f 93       	push	r17
    353a:	cf 93       	push	r28
    353c:	df 93       	push	r29
    353e:	ec 01       	movw	r28, r24
	const unsigned char* p = (const unsigned char*) (const void*) &value;
    3540:	7b 01       	movw	r14, r22
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		EEPROM.write(ee++, *p++);
    3542:	0d eb       	ldi	r16, 0xBD	; 189
    3544:	18 e0       	ldi	r17, 0x08	; 8
    3546:	c8 01       	movw	r24, r16
    3548:	be 01       	movw	r22, r28
    354a:	f7 01       	movw	r30, r14
    354c:	40 81       	ld	r20, Z
    354e:	0e 94 d5 13 	call	0x27aa	; 0x27aa <_ZN11EEPROMClass5writeEih>
    3552:	be 01       	movw	r22, r28
    3554:	6f 5f       	subi	r22, 0xFF	; 255
    3556:	7f 4f       	sbci	r23, 0xFF	; 255
    3558:	c8 01       	movw	r24, r16
    355a:	f7 01       	movw	r30, r14
    355c:	41 81       	ldd	r20, Z+1	; 0x01
    355e:	0e 94 d5 13 	call	0x27aa	; 0x27aa <_ZN11EEPROMClass5writeEih>
	return i;
}
    3562:	82 e0       	ldi	r24, 0x02	; 2
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	df 91       	pop	r29
    3568:	cf 91       	pop	r28
    356a:	1f 91       	pop	r17
    356c:	0f 91       	pop	r16
    356e:	ff 90       	pop	r15
    3570:	ef 90       	pop	r14
    3572:	08 95       	ret

00003574 <_Z18saveWindAlarmSpeedi>:
bool readWindAlarmState() {
	bool alarm = false;
	EEPROM_readAnything(windAlarmOnAddr, alarm);
	return alarm;
}
void saveWindAlarmSpeed(int windSpeed) {
    3574:	df 93       	push	r29
    3576:	cf 93       	push	r28
    3578:	00 d0       	rcall	.+0      	; 0x357a <_Z18saveWindAlarmSpeedi+0x6>
    357a:	cd b7       	in	r28, 0x3d	; 61
    357c:	de b7       	in	r29, 0x3e	; 62
    357e:	9a 83       	std	Y+2, r25	; 0x02
    3580:	89 83       	std	Y+1, r24	; 0x01
	EEPROM_writeAnything(windAlarmSpeedAddr, windSpeed);
    3582:	8f e0       	ldi	r24, 0x0F	; 15
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	be 01       	movw	r22, r28
    3588:	6f 5f       	subi	r22, 0xFF	; 255
    358a:	7f 4f       	sbci	r23, 0xFF	; 255
    358c:	0e 94 99 1a 	call	0x3532	; 0x3532 <_Z20EEPROM_writeAnythingIiEiiRKT_>

}
    3590:	0f 90       	pop	r0
    3592:	0f 90       	pop	r0
    3594:	cf 91       	pop	r28
    3596:	df 91       	pop	r29
    3598:	08 95       	ret

0000359a <_Z19EEPROM_readAnythingIiEiiRT_>:
	for (i = 0; i < sizeof(value); i++)
		EEPROM.write(ee++, *p++);
	return i;
}

template<class T> int EEPROM_readAnything(int ee, T& value) {
    359a:	ef 92       	push	r14
    359c:	ff 92       	push	r15
    359e:	0f 93       	push	r16
    35a0:	1f 93       	push	r17
    35a2:	cf 93       	push	r28
    35a4:	df 93       	push	r29
    35a6:	ec 01       	movw	r28, r24
	unsigned char* p = (unsigned char*) (void*) &value;
    35a8:	7b 01       	movw	r14, r22
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		*p++ = EEPROM.read(ee++);
    35aa:	0d eb       	ldi	r16, 0xBD	; 189
    35ac:	18 e0       	ldi	r17, 0x08	; 8
    35ae:	c8 01       	movw	r24, r16
    35b0:	be 01       	movw	r22, r28
    35b2:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN11EEPROMClass4readEi>
    35b6:	f7 01       	movw	r30, r14
    35b8:	80 83       	st	Z, r24
    35ba:	be 01       	movw	r22, r28
    35bc:	6f 5f       	subi	r22, 0xFF	; 255
    35be:	7f 4f       	sbci	r23, 0xFF	; 255
    35c0:	c8 01       	movw	r24, r16
    35c2:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN11EEPROMClass4readEi>
    35c6:	f7 01       	movw	r30, r14
    35c8:	81 83       	std	Z+1, r24	; 0x01
	return i;
}
    35ca:	82 e0       	ldi	r24, 0x02	; 2
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	df 91       	pop	r29
    35d0:	cf 91       	pop	r28
    35d2:	1f 91       	pop	r17
    35d4:	0f 91       	pop	r16
    35d6:	ff 90       	pop	r15
    35d8:	ef 90       	pop	r14
    35da:	08 95       	ret

000035dc <_Z18readWindAlarmSpeedv>:
}
void saveWindAlarmSpeed(int windSpeed) {
	EEPROM_writeAnything(windAlarmSpeedAddr, windSpeed);

}
int readWindAlarmSpeed() {
    35dc:	df 93       	push	r29
    35de:	cf 93       	push	r28
    35e0:	00 d0       	rcall	.+0      	; 0x35e2 <_Z18readWindAlarmSpeedv+0x6>
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
	int speed = 0.0;
    35e6:	1a 82       	std	Y+2, r1	; 0x02
    35e8:	19 82       	std	Y+1, r1	; 0x01
	EEPROM_readAnything(windAlarmSpeedAddr, speed);
    35ea:	8f e0       	ldi	r24, 0x0F	; 15
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	be 01       	movw	r22, r28
    35f0:	6f 5f       	subi	r22, 0xFF	; 255
    35f2:	7f 4f       	sbci	r23, 0xFF	; 255
    35f4:	0e 94 cd 1a 	call	0x359a	; 0x359a <_Z19EEPROM_readAnythingIiEiiRT_>
	return speed;
}
    35f8:	89 81       	ldd	r24, Y+1	; 0x01
    35fa:	9a 81       	ldd	r25, Y+2	; 0x02
    35fc:	0f 90       	pop	r0
    35fe:	0f 90       	pop	r0
    3600:	cf 91       	pop	r28
    3602:	df 91       	pop	r29
    3604:	08 95       	ret

00003606 <_Z20EEPROM_writeAnythingIfEiiRKT_>:
#define anchorLonAddr  6
#define anchorRadiusAddr 11
#define windAlarmSpeedAddr 15
#define windAlarmOnAddr 19

template<class T> int EEPROM_writeAnything(int ee, const T& value) {
    3606:	ef 92       	push	r14
    3608:	ff 92       	push	r15
    360a:	0f 93       	push	r16
    360c:	1f 93       	push	r17
    360e:	cf 93       	push	r28
    3610:	df 93       	push	r29
    3612:	9c 01       	movw	r18, r24
    3614:	eb 01       	movw	r28, r22
    3616:	84 e0       	ldi	r24, 0x04	; 4
    3618:	e8 2e       	mov	r14, r24
    361a:	f1 2c       	mov	r15, r1
    361c:	e6 0e       	add	r14, r22
    361e:	f7 1e       	adc	r15, r23
    3620:	01 c0       	rjmp	.+2      	; 0x3624 <_Z20EEPROM_writeAnythingIfEiiRKT_+0x1e>
	const unsigned char* p = (const unsigned char*) (const void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		EEPROM.write(ee++, *p++);
    3622:	98 01       	movw	r18, r16
    3624:	89 01       	movw	r16, r18
    3626:	0f 5f       	subi	r16, 0xFF	; 255
    3628:	1f 4f       	sbci	r17, 0xFF	; 255
    362a:	49 91       	ld	r20, Y+
    362c:	8d eb       	ldi	r24, 0xBD	; 189
    362e:	98 e0       	ldi	r25, 0x08	; 8
    3630:	b9 01       	movw	r22, r18
    3632:	0e 94 d5 13 	call	0x27aa	; 0x27aa <_ZN11EEPROMClass5writeEih>
#define windAlarmOnAddr 19

template<class T> int EEPROM_writeAnything(int ee, const T& value) {
	const unsigned char* p = (const unsigned char*) (const void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
    3636:	ce 15       	cp	r28, r14
    3638:	df 05       	cpc	r29, r15
    363a:	99 f7       	brne	.-26     	; 0x3622 <_Z20EEPROM_writeAnythingIfEiiRKT_+0x1c>
		EEPROM.write(ee++, *p++);
	return i;
}
    363c:	84 e0       	ldi	r24, 0x04	; 4
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	df 91       	pop	r29
    3642:	cf 91       	pop	r28
    3644:	1f 91       	pop	r17
    3646:	0f 91       	pop	r16
    3648:	ff 90       	pop	r15
    364a:	ef 90       	pop	r14
    364c:	08 95       	ret

0000364e <_Z21saveAnchorAlarmRadiusf>:
	EEPROM_writeAnything(anchorLatAddr, anchorLat);
}
void saveAnchorAlarmLon(float anchorLon) {
	EEPROM_writeAnything(anchorLonAddr, anchorLon);
}
void saveAnchorAlarmRadius(float anchorRadius) {
    364e:	df 93       	push	r29
    3650:	cf 93       	push	r28
    3652:	00 d0       	rcall	.+0      	; 0x3654 <_Z21saveAnchorAlarmRadiusf+0x6>
    3654:	00 d0       	rcall	.+0      	; 0x3656 <_Z21saveAnchorAlarmRadiusf+0x8>
    3656:	cd b7       	in	r28, 0x3d	; 61
    3658:	de b7       	in	r29, 0x3e	; 62
    365a:	69 83       	std	Y+1, r22	; 0x01
    365c:	7a 83       	std	Y+2, r23	; 0x02
    365e:	8b 83       	std	Y+3, r24	; 0x03
    3660:	9c 83       	std	Y+4, r25	; 0x04
	EEPROM_writeAnything(anchorRadiusAddr, anchorRadius);
    3662:	8b e0       	ldi	r24, 0x0B	; 11
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	be 01       	movw	r22, r28
    3668:	6f 5f       	subi	r22, 0xFF	; 255
    366a:	7f 4f       	sbci	r23, 0xFF	; 255
    366c:	0e 94 03 1b 	call	0x3606	; 0x3606 <_Z20EEPROM_writeAnythingIfEiiRKT_>
}
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	08 95       	ret

0000367e <_Z18saveAnchorAlarmLonf>:
	EEPROM_writeAnything(anchorStateAddr, anchorAlarmOn);
}
void saveAnchorAlarmLat(float anchorLat) {
	EEPROM_writeAnything(anchorLatAddr, anchorLat);
}
void saveAnchorAlarmLon(float anchorLon) {
    367e:	df 93       	push	r29
    3680:	cf 93       	push	r28
    3682:	00 d0       	rcall	.+0      	; 0x3684 <_Z18saveAnchorAlarmLonf+0x6>
    3684:	00 d0       	rcall	.+0      	; 0x3686 <_Z18saveAnchorAlarmLonf+0x8>
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
    368a:	69 83       	std	Y+1, r22	; 0x01
    368c:	7a 83       	std	Y+2, r23	; 0x02
    368e:	8b 83       	std	Y+3, r24	; 0x03
    3690:	9c 83       	std	Y+4, r25	; 0x04
	EEPROM_writeAnything(anchorLonAddr, anchorLon);
    3692:	86 e0       	ldi	r24, 0x06	; 6
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	be 01       	movw	r22, r28
    3698:	6f 5f       	subi	r22, 0xFF	; 255
    369a:	7f 4f       	sbci	r23, 0xFF	; 255
    369c:	0e 94 03 1b 	call	0x3606	; 0x3606 <_Z20EEPROM_writeAnythingIfEiiRKT_>
}
    36a0:	0f 90       	pop	r0
    36a2:	0f 90       	pop	r0
    36a4:	0f 90       	pop	r0
    36a6:	0f 90       	pop	r0
    36a8:	cf 91       	pop	r28
    36aa:	df 91       	pop	r29
    36ac:	08 95       	ret

000036ae <_Z18saveAnchorAlarmLatf>:

//Anchor
void saveAnchorAlarmState(bool anchorAlarmOn) {
	EEPROM_writeAnything(anchorStateAddr, anchorAlarmOn);
}
void saveAnchorAlarmLat(float anchorLat) {
    36ae:	df 93       	push	r29
    36b0:	cf 93       	push	r28
    36b2:	00 d0       	rcall	.+0      	; 0x36b4 <_Z18saveAnchorAlarmLatf+0x6>
    36b4:	00 d0       	rcall	.+0      	; 0x36b6 <_Z18saveAnchorAlarmLatf+0x8>
    36b6:	cd b7       	in	r28, 0x3d	; 61
    36b8:	de b7       	in	r29, 0x3e	; 62
    36ba:	69 83       	std	Y+1, r22	; 0x01
    36bc:	7a 83       	std	Y+2, r23	; 0x02
    36be:	8b 83       	std	Y+3, r24	; 0x03
    36c0:	9c 83       	std	Y+4, r25	; 0x04
	EEPROM_writeAnything(anchorLatAddr, anchorLat);
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	be 01       	movw	r22, r28
    36c8:	6f 5f       	subi	r22, 0xFF	; 255
    36ca:	7f 4f       	sbci	r23, 0xFF	; 255
    36cc:	0e 94 03 1b 	call	0x3606	; 0x3606 <_Z20EEPROM_writeAnythingIfEiiRKT_>
}
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	cf 91       	pop	r28
    36da:	df 91       	pop	r29
    36dc:	08 95       	ret

000036de <_Z19EEPROM_readAnythingIfEiiRT_>:
	for (i = 0; i < sizeof(value); i++)
		EEPROM.write(ee++, *p++);
	return i;
}

template<class T> int EEPROM_readAnything(int ee, T& value) {
    36de:	ef 92       	push	r14
    36e0:	ff 92       	push	r15
    36e2:	0f 93       	push	r16
    36e4:	1f 93       	push	r17
    36e6:	cf 93       	push	r28
    36e8:	df 93       	push	r29
    36ea:	9c 01       	movw	r18, r24
    36ec:	8b 01       	movw	r16, r22
    36ee:	94 e0       	ldi	r25, 0x04	; 4
    36f0:	e9 2e       	mov	r14, r25
    36f2:	f1 2c       	mov	r15, r1
    36f4:	e6 0e       	add	r14, r22
    36f6:	f7 1e       	adc	r15, r23
    36f8:	01 c0       	rjmp	.+2      	; 0x36fc <_Z19EEPROM_readAnythingIfEiiRT_+0x1e>
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		*p++ = EEPROM.read(ee++);
    36fa:	9e 01       	movw	r18, r28
    36fc:	e9 01       	movw	r28, r18
    36fe:	21 96       	adiw	r28, 0x01	; 1
    3700:	8d eb       	ldi	r24, 0xBD	; 189
    3702:	98 e0       	ldi	r25, 0x08	; 8
    3704:	b9 01       	movw	r22, r18
    3706:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN11EEPROMClass4readEi>
    370a:	f8 01       	movw	r30, r16
    370c:	81 93       	st	Z+, r24
    370e:	8f 01       	movw	r16, r30
}

template<class T> int EEPROM_readAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
    3710:	ee 15       	cp	r30, r14
    3712:	ff 05       	cpc	r31, r15
    3714:	91 f7       	brne	.-28     	; 0x36fa <_Z19EEPROM_readAnythingIfEiiRT_+0x1c>
		*p++ = EEPROM.read(ee++);
	return i;
}
    3716:	84 e0       	ldi	r24, 0x04	; 4
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	df 91       	pop	r29
    371c:	cf 91       	pop	r28
    371e:	1f 91       	pop	r17
    3720:	0f 91       	pop	r16
    3722:	ff 90       	pop	r15
    3724:	ef 90       	pop	r14
    3726:	08 95       	ret

00003728 <_Z20getAnchorAlarmRadiusv>:
float getAnchorAlarmLon() {
	float anchorLon = 0.0;
	EEPROM_readAnything(anchorLonAddr, anchorLon);
	return anchorLon;
}
float getAnchorAlarmRadius() {
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	00 d0       	rcall	.+0      	; 0x372e <_Z20getAnchorAlarmRadiusv+0x6>
    372e:	00 d0       	rcall	.+0      	; 0x3730 <_Z20getAnchorAlarmRadiusv+0x8>
    3730:	cd b7       	in	r28, 0x3d	; 61
    3732:	de b7       	in	r29, 0x3e	; 62
	float anchorRadius = 3.0;
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	a0 e4       	ldi	r26, 0x40	; 64
    373a:	b0 e4       	ldi	r27, 0x40	; 64
    373c:	89 83       	std	Y+1, r24	; 0x01
    373e:	9a 83       	std	Y+2, r25	; 0x02
    3740:	ab 83       	std	Y+3, r26	; 0x03
    3742:	bc 83       	std	Y+4, r27	; 0x04
	EEPROM_readAnything(anchorRadiusAddr, anchorRadius);
    3744:	8b e0       	ldi	r24, 0x0B	; 11
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	be 01       	movw	r22, r28
    374a:	6f 5f       	subi	r22, 0xFF	; 255
    374c:	7f 4f       	sbci	r23, 0xFF	; 255
    374e:	0e 94 6f 1b 	call	0x36de	; 0x36de <_Z19EEPROM_readAnythingIfEiiRT_>
	return anchorRadius;
}
    3752:	59 81       	ldd	r21, Y+1	; 0x01
    3754:	4a 81       	ldd	r20, Y+2	; 0x02
    3756:	3b 81       	ldd	r19, Y+3	; 0x03
    3758:	2c 81       	ldd	r18, Y+4	; 0x04
    375a:	65 2f       	mov	r22, r21
    375c:	74 2f       	mov	r23, r20
    375e:	83 2f       	mov	r24, r19
    3760:	92 2f       	mov	r25, r18
    3762:	0f 90       	pop	r0
    3764:	0f 90       	pop	r0
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	cf 91       	pop	r28
    376c:	df 91       	pop	r29
    376e:	08 95       	ret

00003770 <_Z17getAnchorAlarmLonv>:
float getAnchorAlarmLat() {
	float anchorLat = 0.0;
	EEPROM_readAnything(anchorLatAddr, anchorLat);
	return anchorLat;
}
float getAnchorAlarmLon() {
    3770:	df 93       	push	r29
    3772:	cf 93       	push	r28
    3774:	00 d0       	rcall	.+0      	; 0x3776 <_Z17getAnchorAlarmLonv+0x6>
    3776:	00 d0       	rcall	.+0      	; 0x3778 <_Z17getAnchorAlarmLonv+0x8>
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
	float anchorLon = 0.0;
    377c:	80 e0       	ldi	r24, 0x00	; 0
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	dc 01       	movw	r26, r24
    3782:	89 83       	std	Y+1, r24	; 0x01
    3784:	9a 83       	std	Y+2, r25	; 0x02
    3786:	ab 83       	std	Y+3, r26	; 0x03
    3788:	bc 83       	std	Y+4, r27	; 0x04
	EEPROM_readAnything(anchorLonAddr, anchorLon);
    378a:	86 e0       	ldi	r24, 0x06	; 6
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	be 01       	movw	r22, r28
    3790:	6f 5f       	subi	r22, 0xFF	; 255
    3792:	7f 4f       	sbci	r23, 0xFF	; 255
    3794:	0e 94 6f 1b 	call	0x36de	; 0x36de <_Z19EEPROM_readAnythingIfEiiRT_>
	return anchorLon;
}
    3798:	59 81       	ldd	r21, Y+1	; 0x01
    379a:	4a 81       	ldd	r20, Y+2	; 0x02
    379c:	3b 81       	ldd	r19, Y+3	; 0x03
    379e:	2c 81       	ldd	r18, Y+4	; 0x04
    37a0:	65 2f       	mov	r22, r21
    37a2:	74 2f       	mov	r23, r20
    37a4:	83 2f       	mov	r24, r19
    37a6:	92 2f       	mov	r25, r18
    37a8:	0f 90       	pop	r0
    37aa:	0f 90       	pop	r0
    37ac:	0f 90       	pop	r0
    37ae:	0f 90       	pop	r0
    37b0:	cf 91       	pop	r28
    37b2:	df 91       	pop	r29
    37b4:	08 95       	ret

000037b6 <_Z17getAnchorAlarmLatv>:
bool getAnchorAlarmState() {
	bool anchorAlarmOn = false;
	EEPROM_readAnything(anchorStateAddr, anchorAlarmOn);
	return anchorAlarmOn;
}
float getAnchorAlarmLat() {
    37b6:	df 93       	push	r29
    37b8:	cf 93       	push	r28
    37ba:	00 d0       	rcall	.+0      	; 0x37bc <_Z17getAnchorAlarmLatv+0x6>
    37bc:	00 d0       	rcall	.+0      	; 0x37be <_Z17getAnchorAlarmLatv+0x8>
    37be:	cd b7       	in	r28, 0x3d	; 61
    37c0:	de b7       	in	r29, 0x3e	; 62
	float anchorLat = 0.0;
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	dc 01       	movw	r26, r24
    37c8:	89 83       	std	Y+1, r24	; 0x01
    37ca:	9a 83       	std	Y+2, r25	; 0x02
    37cc:	ab 83       	std	Y+3, r26	; 0x03
    37ce:	bc 83       	std	Y+4, r27	; 0x04
	EEPROM_readAnything(anchorLatAddr, anchorLat);
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	be 01       	movw	r22, r28
    37d6:	6f 5f       	subi	r22, 0xFF	; 255
    37d8:	7f 4f       	sbci	r23, 0xFF	; 255
    37da:	0e 94 6f 1b 	call	0x36de	; 0x36de <_Z19EEPROM_readAnythingIfEiiRT_>
	return anchorLat;
}
    37de:	59 81       	ldd	r21, Y+1	; 0x01
    37e0:	4a 81       	ldd	r20, Y+2	; 0x02
    37e2:	3b 81       	ldd	r19, Y+3	; 0x03
    37e4:	2c 81       	ldd	r18, Y+4	; 0x04
    37e6:	65 2f       	mov	r22, r21
    37e8:	74 2f       	mov	r23, r20
    37ea:	83 2f       	mov	r24, r19
    37ec:	92 2f       	mov	r25, r18
    37ee:	0f 90       	pop	r0
    37f0:	0f 90       	pop	r0
    37f2:	0f 90       	pop	r0
    37f4:	0f 90       	pop	r0
    37f6:	cf 91       	pop	r28
    37f8:	df 91       	pop	r29
    37fa:	08 95       	ret

000037fc <_Z9calculatev>:
 * Timer interrupt driven method to do time sensitive calculations
 * The calc flag causes the main loop to execute other less sensitive calls.
 */
void calculate() {
	//we create 100ms pings here
	execute = true;
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	80 93 b7 0b 	sts	0x0BB7, r24
	//we record the ping count out to 2 secs
	interval++;
    3802:	80 91 b8 0b 	lds	r24, 0x0BB8
    3806:	90 91 b9 0b 	lds	r25, 0x0BB9
    380a:	01 96       	adiw	r24, 0x01	; 1
    380c:	90 93 b9 0b 	sts	0x0BB9, r25
    3810:	80 93 b8 0b 	sts	0x0BB8, r24
	interval = interval % 20;
    3814:	80 91 b8 0b 	lds	r24, 0x0BB8
    3818:	90 91 b9 0b 	lds	r25, 0x0BB9
    381c:	64 e1       	ldi	r22, 0x14	; 20
    381e:	70 e0       	ldi	r23, 0x00	; 0
    3820:	0e 94 98 47 	call	0x8f30	; 0x8f30 <__divmodhi4>
    3824:	90 93 b9 0b 	sts	0x0BB9, r25
    3828:	80 93 b8 0b 	sts	0x0BB8, r24
}
    382c:	08 95       	ret

0000382e <_Z7readWDDv>:
void readWDS() {
	wind.readWindDataSpeed();
}

void readWDD() {
	wind.readWindDataDir();
    382e:	86 eb       	ldi	r24, 0xB6	; 182
    3830:	9a e0       	ldi	r25, 0x0A	; 10
    3832:	0e 94 07 36 	call	0x6c0e	; 0x6c0e <_ZN4Wind15readWindDataDirEv>
}
    3836:	08 95       	ret

00003838 <_Z7readWDSv>:
	interval++;
	interval = interval % 20;
}

void readWDS() {
	wind.readWindDataSpeed();
    3838:	86 eb       	ldi	r24, 0xB6	; 182
    383a:	9a e0       	ldi	r25, 0x0A	; 10
    383c:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <_ZN4Wind17readWindDataSpeedEv>
}
    3840:	08 95       	ret

00003842 <_Z41__static_initialization_and_destruction_0ii.clone.2>:
	 s.append(", stack: ");
	 s.append((int)stackptr);
	 if(DEBUG)Serial.println(s);
	 */

}
    3842:	ef 92       	push	r14
    3844:	ff 92       	push	r15
    3846:	0f 93       	push	r16
    3848:	1f 93       	push	r17
    384a:	81 30       	cpi	r24, 0x01	; 1
    384c:	91 05       	cpc	r25, r1
    384e:	09 f0       	breq	.+2      	; 0x3852 <_Z41__static_initialization_and_destruction_0ii.clone.2+0x10>
    3850:	5f c0       	rjmp	.+190    	; 0x3910 <_Z41__static_initialization_and_destruction_0ii.clone.2+0xce>
#include "FreeBoardConstants.h"

class Lcd: public SoftwareSerial {
public:

	Lcd(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic=false):SoftwareSerial(receivePin,transmitPin,inverse_logic=false) {};
    3852:	85 e0       	ldi	r24, 0x05	; 5
    3854:	99 e0       	ldi	r25, 0x09	; 9
    3856:	62 e3       	ldi	r22, 0x32	; 50
    3858:	43 e3       	ldi	r20, 0x33	; 51
    385a:	20 e0       	ldi	r18, 0x00	; 0
    385c:	0e 94 ae 03 	call	0x75c	; 0x75c <_ZN14SoftwareSerialC1Ehhb>
    3860:	84 e2       	ldi	r24, 0x24	; 36
    3862:	97 e0       	ldi	r25, 0x07	; 7
    3864:	90 93 06 09 	sts	0x0906, r25
    3868:	80 93 05 09 	sts	0x0905, r24
#include <SoftwareSerial/SoftwareSerial.h>
#include "FreeBoardConstants.h"

class NmeaSerial: SoftwareSerial {
public:
	NmeaSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic = false):SoftwareSerial(receivePin, transmitPin, inverse_logic = false){};
    386c:	85 e2       	ldi	r24, 0x25	; 37
    386e:	99 e0       	ldi	r25, 0x09	; 9
    3870:	64 e3       	ldi	r22, 0x34	; 52
    3872:	45 e3       	ldi	r20, 0x35	; 53
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	0e 94 ae 03 	call	0x75c	; 0x75c <_ZN14SoftwareSerialC1Ehhb>
    387a:	8e e4       	ldi	r24, 0x4E	; 78
    387c:	97 e0       	ldi	r25, 0x07	; 7
    387e:	90 93 26 09 	sts	0x0926, r25
    3882:	80 93 25 09 	sts	0x0925, r24
// See http://forums.parallax.com/forums/default.aspx?f=19&m=50925
// See http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=63469&start=0
NmeaSerial nmea((uint8_t) nmeaRxPin, (uint8_t) nmeaTxPin, (bool) false);

//NMEA ports
NMEA gpsSource(ALL);
    3886:	81 e4       	ldi	r24, 0x41	; 65
    3888:	99 e0       	ldi	r25, 0x09	; 9
    388a:	60 e0       	ldi	r22, 0x00	; 0
    388c:	70 e0       	ldi	r23, 0x00	; 0
    388e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <_ZN4NMEAC1Ei>
//NMEA talker0(ALL);
//NMEA talker2(ALL);
//NMEA talker3(ALL);

//alarm
Alarm alarm;
    3892:	8a ea       	ldi	r24, 0xAA	; 170
    3894:	9a e0       	ldi	r25, 0x0A	; 10
    3896:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <_ZN5AlarmC1Ev>

//wind
Wind wind(&nmea);
    389a:	86 eb       	ldi	r24, 0xB6	; 182
    389c:	9a e0       	ldi	r25, 0x0A	; 10
    389e:	65 e2       	ldi	r22, 0x25	; 37
    38a0:	79 e0       	ldi	r23, 0x09	; 9
    38a2:	0e 94 9c 34 	call	0x6938	; 0x6938 <_ZN4WindC1EP10NmeaSerial>

//Gps
Gps gps(&gpsSource);
    38a6:	8e ee       	ldi	r24, 0xEE	; 238
    38a8:	9a e0       	ldi	r25, 0x0A	; 10
    38aa:	61 e4       	ldi	r22, 0x41	; 65
    38ac:	79 e0       	ldi	r23, 0x09	; 9
    38ae:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <_ZN3GpsC1EP4NMEA>

//Autopilot
Autopilot autopilot(&gps);
    38b2:	8b e4       	ldi	r24, 0x4B	; 75
    38b4:	9b e0       	ldi	r25, 0x0B	; 11
    38b6:	6e ee       	ldi	r22, 0xEE	; 238
    38b8:	7a e0       	ldi	r23, 0x0A	; 10
    38ba:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZN9AutopilotC1EP3Gps>

//Anchor
Anchor anchor(&gps);
    38be:	8d e4       	ldi	r24, 0x4D	; 77
    38c0:	9b e0       	ldi	r25, 0x0B	; 11
    38c2:	6e ee       	ldi	r22, 0xEE	; 238
    38c4:	7a e0       	ldi	r23, 0x0A	; 10
    38c6:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_ZN6AnchorC1EP3Gps>

Seatalk seatalk(&alarm, &Serial2);
    38ca:	83 e8       	ldi	r24, 0x83	; 131
    38cc:	9b e0       	ldi	r25, 0x0B	; 11
    38ce:	6a ea       	ldi	r22, 0xAA	; 170
    38d0:	7a e0       	ldi	r23, 0x0A	; 10
    38d2:	4f e6       	ldi	r20, 0x6F	; 111
    38d4:	5e e0       	ldi	r21, 0x0E	; 14
    38d6:	0e 94 41 32 	call	0x6482	; 0x6482 <_ZN7SeatalkC1EP5AlarmP14HardwareSerial>

//Menu
Menu menu(&lcd, &alarm, &anchor, &wind, &seatalk);
    38da:	8f e9       	ldi	r24, 0x9F	; 159
    38dc:	9b e0       	ldi	r25, 0x0B	; 11
    38de:	65 e0       	ldi	r22, 0x05	; 5
    38e0:	79 e0       	ldi	r23, 0x09	; 9
    38e2:	4a ea       	ldi	r20, 0xAA	; 170
    38e4:	5a e0       	ldi	r21, 0x0A	; 10
    38e6:	2d e4       	ldi	r18, 0x4D	; 77
    38e8:	3b e0       	ldi	r19, 0x0B	; 11
    38ea:	06 eb       	ldi	r16, 0xB6	; 182
    38ec:	1a e0       	ldi	r17, 0x0A	; 10
    38ee:	e3 e8       	ldi	r30, 0x83	; 131
    38f0:	ee 2e       	mov	r14, r30
    38f2:	eb e0       	ldi	r30, 0x0B	; 11
    38f4:	fe 2e       	mov	r15, r30
    38f6:	0e 94 bd 23 	call	0x477a	; 0x477a <_ZN4MenuC1EP3LcdP5AlarmP6AnchorP4WindP7Seatalk>

//re-enable ISR2 in SoftwareSerial.cpp line 314 if you stop using this
class ButtonCatcher: public PinCatcher {
	typedef PinCatcher parent;
public:
	ButtonCatcher() {
    38fa:	8d eb       	ldi	r24, 0xBD	; 189
    38fc:	9b e0       	ldi	r25, 0x0B	; 11
    38fe:	0e 94 89 06 	call	0xd12	; 0xd12 <_ZN10PinCatcherC1Ev>
    3902:	84 e3       	ldi	r24, 0x34	; 52
    3904:	97 e0       	ldi	r25, 0x07	; 7
    3906:	90 93 be 0b 	sts	0x0BBE, r25
    390a:	80 93 bd 0b 	sts	0x0BBD, r24
    390e:	28 c0       	rjmp	.+80     	; 0x3960 <_Z41__static_initialization_and_destruction_0ii.clone.2+0x11e>
		if (pin == button2)
			checkPress2();
	}
};

ButtonCatcher p;
    3910:	00 97       	sbiw	r24, 0x00	; 0
    3912:	31 f5       	brne	.+76     	; 0x3960 <_Z41__static_initialization_and_destruction_0ii.clone.2+0x11e>
	typedef PinCatcher parent;
public:
	ButtonCatcher() {
	}

	~ButtonCatcher() {
    3914:	84 e3       	ldi	r24, 0x34	; 52
    3916:	97 e0       	ldi	r25, 0x07	; 7
    3918:	90 93 be 0b 	sts	0x0BBE, r25
    391c:	80 93 bd 0b 	sts	0x0BBD, r24
    3920:	8d eb       	ldi	r24, 0xBD	; 189
    3922:	9b e0       	ldi	r25, 0x0B	; 11
    3924:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN10PinCatcherD1Ev>
Anchor anchor(&gps);

Seatalk seatalk(&alarm, &Serial2);

//Menu
Menu menu(&lcd, &alarm, &anchor, &wind, &seatalk);
    3928:	8f e9       	ldi	r24, 0x9F	; 159
    392a:	9b e0       	ldi	r25, 0x0B	; 11
    392c:	0e 94 af 23 	call	0x475e	; 0x475e <_ZN4MenuD1Ev>

//Autopilot
Autopilot autopilot(&gps);

//Anchor
Anchor anchor(&gps);
    3930:	8d e4       	ldi	r24, 0x4D	; 77
    3932:	9b e0       	ldi	r25, 0x0B	; 11
    3934:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN6AnchorD1Ev>

//Gps
Gps gps(&gpsSource);

//Autopilot
Autopilot autopilot(&gps);
    3938:	8b e4       	ldi	r24, 0x4B	; 75
    393a:	9b e0       	ldi	r25, 0x0B	; 11
    393c:	0e 94 88 19 	call	0x3310	; 0x3310 <_ZN9AutopilotD1Ev>

//wind
Wind wind(&nmea);

//Gps
Gps gps(&gpsSource);
    3940:	8e ee       	ldi	r24, 0xEE	; 238
    3942:	9a e0       	ldi	r25, 0x0A	; 10
    3944:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <_ZN3GpsD1Ev>
//NMEA talker0(ALL);
//NMEA talker2(ALL);
//NMEA talker3(ALL);

//alarm
Alarm alarm;
    3948:	8a ea       	ldi	r24, 0xAA	; 170
    394a:	9a e0       	ldi	r25, 0x0A	; 10
    394c:	0e 94 da 13 	call	0x27b4	; 0x27b4 <_ZN5AlarmD1Ev>

//NMEA output - The arduino puts out TTL, NMEA is RS232. They are different V and amps. The +-5V levels may need inverting or you get
// garbage.
// See http://forums.parallax.com/forums/default.aspx?f=19&m=50925
// See http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=63469&start=0
NmeaSerial nmea((uint8_t) nmeaRxPin, (uint8_t) nmeaTxPin, (bool) false);
    3950:	85 e2       	ldi	r24, 0x25	; 37
    3952:	99 e0       	ldi	r25, 0x09	; 9
    3954:	0e 94 23 32 	call	0x6446	; 0x6446 <_ZN10NmeaSerialD1Ev>
 */

#include "FreeBoardPLC.h"

// set up a new serial port for the lcd
Lcd lcd((uint8_t) rxPin, (uint8_t) txPin);
    3958:	85 e0       	ldi	r24, 0x05	; 5
    395a:	99 e0       	ldi	r25, 0x09	; 9
    395c:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
	 s.append(", stack: ");
	 s.append((int)stackptr);
	 if(DEBUG)Serial.println(s);
	 */

}
    3960:	1f 91       	pop	r17
    3962:	0f 91       	pop	r16
    3964:	ff 90       	pop	r15
    3966:	ef 90       	pop	r14
    3968:	08 95       	ret

0000396a <_ZN13ButtonCatcher5watchEj>:
	}

	~ButtonCatcher() {
	}

	void watch(unsigned pin) {
    396a:	fc 01       	movw	r30, r24
		attach(pin);
    396c:	a0 81       	ld	r26, Z
    396e:	b1 81       	ldd	r27, Z+1	; 0x01
    3970:	12 96       	adiw	r26, 0x02	; 2
    3972:	2d 91       	ld	r18, X+
    3974:	3c 91       	ld	r19, X
    3976:	13 97       	sbiw	r26, 0x03	; 3
    3978:	f9 01       	movw	r30, r18
    397a:	09 95       	icall
	}
    397c:	08 95       	ret

0000397e <setup>:
	}
};

ButtonCatcher p;

void setup() {
    397e:	cf 92       	push	r12
    3980:	df 92       	push	r13
    3982:	ef 92       	push	r14
    3984:	0f 93       	push	r16
    3986:	1f 93       	push	r17
    3988:	cf 93       	push	r28
    398a:	df 93       	push	r29
	// initialize  serial ports:
	Serial.begin(38400, 8, 1, 0);
    398c:	c7 e2       	ldi	r28, 0x27	; 39
    398e:	de e0       	ldi	r29, 0x0E	; 14
    3990:	ce 01       	movw	r24, r28
    3992:	40 e0       	ldi	r20, 0x00	; 0
    3994:	56 e9       	ldi	r21, 0x96	; 150
    3996:	60 e0       	ldi	r22, 0x00	; 0
    3998:	70 e0       	ldi	r23, 0x00	; 0
    399a:	28 e0       	ldi	r18, 0x08	; 8
    399c:	01 e0       	ldi	r16, 0x01	; 1
    399e:	ee 24       	eor	r14, r14
    39a0:	0e 94 a0 3b 	call	0x7740	; 0x7740 <_ZN14HardwareSerial5beginEmhhh>
	if (DEBUG)
		Serial.println("Initializing..");
    39a4:	ce 01       	movw	r24, r28
    39a6:	64 eb       	ldi	r22, 0xB4	; 180
    39a8:	72 e0       	ldi	r23, 0x02	; 2
    39aa:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>

	lcd.setupLcd();
    39ae:	f5 e0       	ldi	r31, 0x05	; 5
    39b0:	cf 2e       	mov	r12, r31
    39b2:	f9 e0       	ldi	r31, 0x09	; 9
    39b4:	df 2e       	mov	r13, r31
    39b6:	c6 01       	movw	r24, r12
    39b8:	0e 94 16 22 	call	0x442c	; 0x442c <_ZN3Lcd8setupLcdEv>

	//start gps on serial1, autobaud
	if (DEBUG)
		Serial.println("Start gps..");
    39bc:	ce 01       	movw	r24, r28
    39be:	63 ec       	ldi	r22, 0xC3	; 195
    39c0:	72 e0       	ldi	r23, 0x02	; 2
    39c2:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	gps.setupGps();
    39c6:	8e ee       	ldi	r24, 0xEE	; 238
    39c8:	9a e0       	ldi	r25, 0x0A	; 10
    39ca:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <_ZN3Gps8setupGpsEv>
	if (DEBUG)
		//Serial.println("Start seatalk - serial2..");
	//Serial2.begin(4800, 9, 1, 0); //Seatalk interface

	if (DEBUG)
		Serial.println("Start nmea Rx - serial3..");
    39ce:	ce 01       	movw	r24, r28
    39d0:	6f ec       	ldi	r22, 0xCF	; 207
    39d2:	72 e0       	ldi	r23, 0x02	; 2
    39d4:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	Serial3.begin(4800, 8, 1, 0); //talker2
    39d8:	83 e9       	ldi	r24, 0x93	; 147
    39da:	9e e0       	ldi	r25, 0x0E	; 14
    39dc:	40 ec       	ldi	r20, 0xC0	; 192
    39de:	52 e1       	ldi	r21, 0x12	; 18
    39e0:	60 e0       	ldi	r22, 0x00	; 0
    39e2:	70 e0       	ldi	r23, 0x00	; 0
    39e4:	28 e0       	ldi	r18, 0x08	; 8
    39e6:	0e 94 a0 3b 	call	0x7740	; 0x7740 <_ZN14HardwareSerial5beginEmhhh>

	if (DEBUG)
		Serial.println("Start nmea Tx..");
    39ea:	ce 01       	movw	r24, r28
    39ec:	69 ee       	ldi	r22, 0xE9	; 233
    39ee:	72 e0       	ldi	r23, 0x02	; 2
    39f0:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	pinMode(nmeaRxPin, INPUT);
    39f4:	84 e3       	ldi	r24, 0x34	; 52
    39f6:	60 e0       	ldi	r22, 0x00	; 0
    39f8:	0e 94 76 43 	call	0x86ec	; 0x86ec <pinMode>
	pinMode(nmeaTxPin, OUTPUT);
    39fc:	85 e3       	ldi	r24, 0x35	; 53
    39fe:	61 e0       	ldi	r22, 0x01	; 1
    3a00:	0e 94 76 43 	call	0x86ec	; 0x86ec <pinMode>
	nmea.begin(4800);
    3a04:	85 e2       	ldi	r24, 0x25	; 37
    3a06:	99 e0       	ldi	r25, 0x09	; 9
    3a08:	40 ec       	ldi	r20, 0xC0	; 192
    3a0a:	52 e1       	ldi	r21, 0x12	; 18
    3a0c:	60 e0       	ldi	r22, 0x00	; 0
    3a0e:	70 e0       	ldi	r23, 0x00	; 0
    3a10:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN10NmeaSerial5beginEl>

	//setup interrupts to windPins
	if (DEBUG)
		Serial.println("Start wind..");
    3a14:	ce 01       	movw	r24, r28
    3a16:	69 ef       	ldi	r22, 0xF9	; 249
    3a18:	72 e0       	ldi	r23, 0x02	; 2
    3a1a:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	pinMode(windSpeedPin, INPUT);
    3a1e:	85 e1       	ldi	r24, 0x15	; 21
    3a20:	60 e0       	ldi	r22, 0x00	; 0
    3a22:	0e 94 76 43 	call	0x86ec	; 0x86ec <pinMode>
	attachInterrupt(windSpeedInterrupt, readWDS, RISING);
    3a26:	82 e0       	ldi	r24, 0x02	; 2
    3a28:	6c e1       	ldi	r22, 0x1C	; 28
    3a2a:	7c e1       	ldi	r23, 0x1C	; 28
    3a2c:	43 e0       	ldi	r20, 0x03	; 3
    3a2e:	50 e0       	ldi	r21, 0x00	; 0
    3a30:	0e 94 e8 3f 	call	0x7fd0	; 0x7fd0 <attachInterrupt>
	pinMode(windDirPin, INPUT);
    3a34:	84 e1       	ldi	r24, 0x14	; 20
    3a36:	60 e0       	ldi	r22, 0x00	; 0
    3a38:	0e 94 76 43 	call	0x86ec	; 0x86ec <pinMode>
	attachInterrupt(windDirInterrupt, readWDD, RISING);
    3a3c:	83 e0       	ldi	r24, 0x03	; 3
    3a3e:	67 e1       	ldi	r22, 0x17	; 23
    3a40:	7c e1       	ldi	r23, 0x1C	; 28
    3a42:	43 e0       	ldi	r20, 0x03	; 3
    3a44:	50 e0       	ldi	r21, 0x00	; 0
    3a46:	0e 94 e8 3f 	call	0x7fd0	; 0x7fd0 <attachInterrupt>

	if (DEBUG)
		Serial.println("Start button interrupts..");
    3a4a:	ce 01       	movw	r24, r28
    3a4c:	66 e0       	ldi	r22, 0x06	; 6
    3a4e:	73 e0       	ldi	r23, 0x03	; 3
    3a50:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>

	pinMode(button0, INPUT);
    3a54:	8f e3       	ldi	r24, 0x3F	; 63
    3a56:	60 e0       	ldi	r22, 0x00	; 0
    3a58:	0e 94 76 43 	call	0x86ec	; 0x86ec <pinMode>
	pinMode(button1, INPUT);
    3a5c:	80 e4       	ldi	r24, 0x40	; 64
    3a5e:	60 e0       	ldi	r22, 0x00	; 0
    3a60:	0e 94 76 43 	call	0x86ec	; 0x86ec <pinMode>
	pinMode(button2, INPUT);
    3a64:	81 e4       	ldi	r24, 0x41	; 65
    3a66:	60 e0       	ldi	r22, 0x00	; 0
    3a68:	0e 94 76 43 	call	0x86ec	; 0x86ec <pinMode>
	//pinMode(button3, INPUT);

	//PinCatcher
	p.watch(button0);
    3a6c:	0d eb       	ldi	r16, 0xBD	; 189
    3a6e:	1b e0       	ldi	r17, 0x0B	; 11
    3a70:	c8 01       	movw	r24, r16
    3a72:	6f e3       	ldi	r22, 0x3F	; 63
    3a74:	70 e0       	ldi	r23, 0x00	; 0
    3a76:	0e 94 b5 1c 	call	0x396a	; 0x396a <_ZN13ButtonCatcher5watchEj>
	p.watch(button1);
    3a7a:	c8 01       	movw	r24, r16
    3a7c:	60 e4       	ldi	r22, 0x40	; 64
    3a7e:	70 e0       	ldi	r23, 0x00	; 0
    3a80:	0e 94 b5 1c 	call	0x396a	; 0x396a <_ZN13ButtonCatcher5watchEj>
	p.watch(button2);
    3a84:	c8 01       	movw	r24, r16
    3a86:	61 e4       	ldi	r22, 0x41	; 65
    3a88:	70 e0       	ldi	r23, 0x00	; 0
    3a8a:	0e 94 b5 1c 	call	0x396a	; 0x396a <_ZN13ButtonCatcher5watchEj>
	//p.watch(button3);

//	//setup timers
	if (DEBUG)
		Serial.println("Start timer..");
    3a8e:	ce 01       	movw	r24, r28
    3a90:	60 e2       	ldi	r22, 0x20	; 32
    3a92:	73 e0       	ldi	r23, 0x03	; 3
    3a94:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	FlexiTimer2::set(100, calculate); // 100ms period
    3a98:	64 e6       	ldi	r22, 0x64	; 100
    3a9a:	70 e0       	ldi	r23, 0x00	; 0
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	4e ef       	ldi	r20, 0xFE	; 254
    3aa2:	5b e1       	ldi	r21, 0x1B	; 27
    3aa4:	0e 94 21 13 	call	0x2642	; 0x2642 <_ZN11FlexiTimer23setEmPFvvE>
	FlexiTimer2::start();
    3aa8:	0e 94 2d 13 	call	0x265a	; 0x265a <_ZN11FlexiTimer25startEv>
	lcd.clearLcd();
    3aac:	c6 01       	movw	r24, r12
    3aae:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <_ZN3Lcd8clearLcdEv>

	if (DEBUG)
		Serial.println("Setup complete..");
    3ab2:	ce 01       	movw	r24, r28
    3ab4:	6e e2       	ldi	r22, 0x2E	; 46
    3ab6:	73 e0       	ldi	r23, 0x03	; 3
    3ab8:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
//	autopilot.enableAutoPilot();
//	autopilot.setTargetHeading(50);
}
    3abc:	df 91       	pop	r29
    3abe:	cf 91       	pop	r28
    3ac0:	1f 91       	pop	r17
    3ac2:	0f 91       	pop	r16
    3ac4:	ef 90       	pop	r14
    3ac6:	df 90       	pop	r13
    3ac8:	cf 90       	pop	r12
    3aca:	08 95       	ret

00003acc <_Z11checkPress0v>:
	wind.readWindDataDir();
}

void checkPress0() {
	//set button
	menu.setButton(button0);
    3acc:	8f e9       	ldi	r24, 0x9F	; 159
    3ace:	9b e0       	ldi	r25, 0x0B	; 11
    3ad0:	6f e3       	ldi	r22, 0x3F	; 63
    3ad2:	0e 94 df 23 	call	0x47be	; 0x47be <_ZN4Menu9setButtonEh>
}
    3ad6:	08 95       	ret

00003ad8 <_Z11checkPress1v>:
void checkPress1() {
	//set button
	menu.setButton(button1);
    3ad8:	8f e9       	ldi	r24, 0x9F	; 159
    3ada:	9b e0       	ldi	r25, 0x0B	; 11
    3adc:	60 e4       	ldi	r22, 0x40	; 64
    3ade:	0e 94 df 23 	call	0x47be	; 0x47be <_ZN4Menu9setButtonEh>
}
    3ae2:	08 95       	ret

00003ae4 <_Z11checkPress2v>:
void checkPress2() {
	//set button
	menu.setButton(button2);
    3ae4:	8f e9       	ldi	r24, 0x9F	; 159
    3ae6:	9b e0       	ldi	r25, 0x0B	; 11
    3ae8:	61 e4       	ldi	r22, 0x41	; 65
    3aea:	0e 94 df 23 	call	0x47be	; 0x47be <_ZN4Menu9setButtonEh>
}
    3aee:	08 95       	ret

00003af0 <_ZN13ButtonCatcher6handleEjb>:
	void ignore(unsigned pin) {
		detach(pin);
	}

	virtual void handle(unsigned pin, bool rising_edge_transition) {
		if (pin == button0)
    3af0:	6f 33       	cpi	r22, 0x3F	; 63
    3af2:	71 05       	cpc	r23, r1
    3af4:	19 f4       	brne	.+6      	; 0x3afc <_ZN13ButtonCatcher6handleEjb+0xc>
			checkPress0();
    3af6:	0e 94 66 1d 	call	0x3acc	; 0x3acc <_Z11checkPress0v>
    3afa:	08 95       	ret
		if (pin == button1)
    3afc:	60 34       	cpi	r22, 0x40	; 64
    3afe:	71 05       	cpc	r23, r1
    3b00:	19 f4       	brne	.+6      	; 0x3b08 <_ZN13ButtonCatcher6handleEjb+0x18>
			checkPress1();
    3b02:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <_Z11checkPress1v>
    3b06:	08 95       	ret
		if (pin == button2)
    3b08:	61 34       	cpi	r22, 0x41	; 65
    3b0a:	71 05       	cpc	r23, r1
    3b0c:	11 f4       	brne	.+4      	; 0x3b12 <_ZN13ButtonCatcher6handleEjb+0x22>
			checkPress2();
    3b0e:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <_Z11checkPress2v>
    3b12:	08 95       	ret

00003b14 <loop>:
void checkPress2() {
	//set button
	menu.setButton(button2);
}

void loop() {
    3b14:	ef 92       	push	r14
    3b16:	ff 92       	push	r15
    3b18:	0f 93       	push	r16
    3b1a:	1f 93       	push	r17
		}
		if (input == '+') {
			Serial.println("Autopilot heading + 5");
			autopilot.setTargetHeading(autopilot.getTargetHeading() + 5);
		}
		input = ' ';
    3b1c:	10 e2       	ldi	r17, 0x20	; 32

	if (DEBUG)
		//Serial.println("Looping..");
	//dont get caught endlessly reading/writing
	//allow single character commands
	while (Serial.available() > 0) {
    3b1e:	56 c0       	rjmp	.+172    	; 0x3bcc <loop+0xb8>
		input = Serial.read();
    3b20:	87 e2       	ldi	r24, 0x27	; 39
    3b22:	9e e0       	ldi	r25, 0x0E	; 14
    3b24:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_ZN14HardwareSerial4readEv>
    3b28:	80 93 bc 0b 	sts	0x0BBC, r24
		if (input == 'a') {
    3b2c:	81 36       	cpi	r24, 0x61	; 97
    3b2e:	51 f4       	brne	.+20     	; 0x3b44 <loop+0x30>
			Serial.println("Enable autopilot..");
    3b30:	87 e2       	ldi	r24, 0x27	; 39
    3b32:	9e e0       	ldi	r25, 0x0E	; 14
    3b34:	6f e3       	ldi	r22, 0x3F	; 63
    3b36:	73 e0       	ldi	r23, 0x03	; 3
    3b38:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
			autopilot.enableAutoPilot();
    3b3c:	8b e4       	ldi	r24, 0x4B	; 75
    3b3e:	9b e0       	ldi	r25, 0x0B	; 11
    3b40:	0e 94 93 19 	call	0x3326	; 0x3326 <_ZN9Autopilot15enableAutoPilotEv>
		}
		if (input == 'd') {
    3b44:	80 91 bc 0b 	lds	r24, 0x0BBC
    3b48:	84 36       	cpi	r24, 0x64	; 100
    3b4a:	51 f4       	brne	.+20     	; 0x3b60 <loop+0x4c>
			Serial.println("Disable autopilot..");
    3b4c:	87 e2       	ldi	r24, 0x27	; 39
    3b4e:	9e e0       	ldi	r25, 0x0E	; 14
    3b50:	62 e5       	ldi	r22, 0x52	; 82
    3b52:	73 e0       	ldi	r23, 0x03	; 3
    3b54:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
			autopilot.disableAutoPilot();
    3b58:	8b e4       	ldi	r24, 0x4B	; 75
    3b5a:	9b e0       	ldi	r25, 0x0B	; 11
    3b5c:	0e 94 b2 19 	call	0x3364	; 0x3364 <_ZN9Autopilot16disableAutoPilotEv>
		}
		if (input == '-') {
    3b60:	80 91 bc 0b 	lds	r24, 0x0BBC
    3b64:	8d 32       	cpi	r24, 0x2D	; 45
    3b66:	b1 f4       	brne	.+44     	; 0x3b94 <loop+0x80>
			Serial.println("Autopilot heading - 5");
    3b68:	87 e2       	ldi	r24, 0x27	; 39
    3b6a:	9e e0       	ldi	r25, 0x0E	; 14
    3b6c:	66 e6       	ldi	r22, 0x66	; 102
    3b6e:	73 e0       	ldi	r23, 0x03	; 3
    3b70:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
			//TODO: consider the 0-360 circle, cant be neg
			autopilot.setTargetHeading(autopilot.getTargetHeading() - 5);
    3b74:	8b e4       	ldi	r24, 0x4B	; 75
    3b76:	9b e0       	ldi	r25, 0x0B	; 11
    3b78:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN9Autopilot16getTargetHeadingEv>
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	40 ea       	ldi	r20, 0xA0	; 160
    3b82:	50 e4       	ldi	r21, 0x40	; 64
    3b84:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    3b88:	ab 01       	movw	r20, r22
    3b8a:	bc 01       	movw	r22, r24
    3b8c:	8b e4       	ldi	r24, 0x4B	; 75
    3b8e:	9b e0       	ldi	r25, 0x0B	; 11
    3b90:	0e 94 cf 19 	call	0x339e	; 0x339e <_ZN9Autopilot16setTargetHeadingEd>
		}
		if (input == '+') {
    3b94:	80 91 bc 0b 	lds	r24, 0x0BBC
    3b98:	8b 32       	cpi	r24, 0x2B	; 43
    3b9a:	b1 f4       	brne	.+44     	; 0x3bc8 <loop+0xb4>
			Serial.println("Autopilot heading + 5");
    3b9c:	87 e2       	ldi	r24, 0x27	; 39
    3b9e:	9e e0       	ldi	r25, 0x0E	; 14
    3ba0:	6c e7       	ldi	r22, 0x7C	; 124
    3ba2:	73 e0       	ldi	r23, 0x03	; 3
    3ba4:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
			autopilot.setTargetHeading(autopilot.getTargetHeading() + 5);
    3ba8:	8b e4       	ldi	r24, 0x4B	; 75
    3baa:	9b e0       	ldi	r25, 0x0B	; 11
    3bac:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN9Autopilot16getTargetHeadingEv>
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	40 ea       	ldi	r20, 0xA0	; 160
    3bb6:	50 e4       	ldi	r21, 0x40	; 64
    3bb8:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    3bbc:	ab 01       	movw	r20, r22
    3bbe:	bc 01       	movw	r22, r24
    3bc0:	8b e4       	ldi	r24, 0x4B	; 75
    3bc2:	9b e0       	ldi	r25, 0x0B	; 11
    3bc4:	0e 94 cf 19 	call	0x339e	; 0x339e <_ZN9Autopilot16setTargetHeadingEd>
		}
		input = ' ';
    3bc8:	10 93 bc 0b 	sts	0x0BBC, r17

	if (DEBUG)
		//Serial.println("Looping..");
	//dont get caught endlessly reading/writing
	//allow single character commands
	while (Serial.available() > 0) {
    3bcc:	87 e2       	ldi	r24, 0x27	; 39
    3bce:	9e e0       	ldi	r25, 0x0E	; 14
    3bd0:	0e 94 21 38 	call	0x7042	; 0x7042 <_ZN14HardwareSerial9availableEv>
    3bd4:	18 16       	cp	r1, r24
    3bd6:	19 06       	cpc	r1, r25
    3bd8:	0c f4       	brge	.+2      	; 0x3bdc <loop+0xc8>
    3bda:	a2 cf       	rjmp	.-188    	; 0x3b20 <loop+0xc>
    3bdc:	22 c0       	rjmp	.+68     	; 0x3c22 <loop+0x10e>
		}
		input = ' ';
	}
	// read from port 1, send to port 0:
	while (Serial1.available() > 0) {
		inByteSerial1 = Serial1.read();
    3bde:	8b e4       	ldi	r24, 0x4B	; 75
    3be0:	9e e0       	ldi	r25, 0x0E	; 14
    3be2:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_ZN14HardwareSerial4readEv>
    3be6:	68 2f       	mov	r22, r24
    3be8:	80 93 ba 0b 	sts	0x0BBA, r24
    3bec:	90 93 bb 0b 	sts	0x0BBB, r25
		//if(DEBUG)Serial.print(inByte);

		if (gps.decode(inByteSerial1)) {
    3bf0:	8e ee       	ldi	r24, 0xEE	; 238
    3bf2:	9a e0       	ldi	r25, 0x0A	; 10
    3bf4:	0e 94 40 20 	call	0x4080	; 0x4080 <_ZN3Gps6decodeEh>
    3bf8:	88 23       	and	r24, r24
    3bfa:	99 f0       	breq	.+38     	; 0x3c22 <loop+0x10e>
			if (MUX) {
				nmea.printNmea(gpsSource.sentence());
    3bfc:	81 e4       	ldi	r24, 0x41	; 65
    3bfe:	99 e0       	ldi	r25, 0x09	; 9
    3c00:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN4NMEA8sentenceEv>
    3c04:	bc 01       	movw	r22, r24
    3c06:	85 e2       	ldi	r24, 0x25	; 37
    3c08:	99 e0       	ldi	r25, 0x09	; 9
    3c0a:	0e 94 3e 32 	call	0x647c	; 0x647c <_ZN10NmeaSerial9printNmeaEPc>
			}
			if (MUX && DEBUG)
				Serial.println(gpsSource.sentence());
    3c0e:	81 e4       	ldi	r24, 0x41	; 65
    3c10:	99 e0       	ldi	r25, 0x09	; 9
    3c12:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN4NMEA8sentenceEv>
    3c16:	bc 01       	movw	r22, r24
    3c18:	87 e2       	ldi	r24, 0x27	; 39
    3c1a:	9e e0       	ldi	r25, 0x0E	; 14
    3c1c:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
			break; //every sentence
    3c20:	07 c0       	rjmp	.+14     	; 0x3c30 <loop+0x11c>
			autopilot.setTargetHeading(autopilot.getTargetHeading() + 5);
		}
		input = ' ';
	}
	// read from port 1, send to port 0:
	while (Serial1.available() > 0) {
    3c22:	8b e4       	ldi	r24, 0x4B	; 75
    3c24:	9e e0       	ldi	r25, 0x0E	; 14
    3c26:	0e 94 21 38 	call	0x7042	; 0x7042 <_ZN14HardwareSerial9availableEv>
    3c2a:	18 16       	cp	r1, r24
    3c2c:	19 06       	cpc	r1, r25
    3c2e:	bc f2       	brlt	.-82     	; 0x3bde <loop+0xca>
//			nmea.printNmea(talker3.sentence());
//		}
//		if(MUX && DEBUG)Serial.println(talker3.sentence());
//		break;//every sentence
//	}
	if (execute) {
    3c30:	80 91 b7 0b 	lds	r24, 0x0BB7
    3c34:	88 23       	and	r24, r24
    3c36:	09 f4       	brne	.+2      	; 0x3c3a <loop+0x126>
    3c38:	82 c0       	rjmp	.+260    	; 0x3d3e <loop+0x22a>
		//timer ping
		//do these every 100ms
		autopilot.calcAutoPilot();
    3c3a:	8b e4       	ldi	r24, 0x4B	; 75
    3c3c:	9b e0       	ldi	r25, 0x0B	; 11
    3c3e:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <_ZN9Autopilot13calcAutoPilotEv>

//		if (interval % 2 == 0) {
//			//do every 200ms
//		}
		if (interval % 5 == 0) {
    3c42:	80 91 b8 0b 	lds	r24, 0x0BB8
    3c46:	90 91 b9 0b 	lds	r25, 0x0BB9
    3c4a:	65 e0       	ldi	r22, 0x05	; 5
    3c4c:	70 e0       	ldi	r23, 0x00	; 0
    3c4e:	0e 94 98 47 	call	0x8f30	; 0x8f30 <__divmodhi4>
    3c52:	00 97       	sbiw	r24, 0x00	; 0
    3c54:	21 f4       	brne	.+8      	; 0x3c5e <loop+0x14a>
			//do every 500ms

			//fire any alarms
			alarm.checkAlarms();
    3c56:	8a ea       	ldi	r24, 0xAA	; 170
    3c58:	9a e0       	ldi	r25, 0x0A	; 10
    3c5a:	0e 94 31 14 	call	0x2862	; 0x2862 <_ZN5Alarm11checkAlarmsEv>

		}
		if (interval % 10 == 0) {
    3c5e:	80 91 b8 0b 	lds	r24, 0x0BB8
    3c62:	90 91 b9 0b 	lds	r25, 0x0BB9
    3c66:	6a e0       	ldi	r22, 0x0A	; 10
    3c68:	70 e0       	ldi	r23, 0x00	; 0
    3c6a:	0e 94 98 47 	call	0x8f30	; 0x8f30 <__divmodhi4>
    3c6e:	00 97       	sbiw	r24, 0x00	; 0
    3c70:	09 f0       	breq	.+2      	; 0x3c74 <loop+0x160>
    3c72:	63 c0       	rjmp	.+198    	; 0x3d3a <loop+0x226>
			//do every 1000ms
			wind.calcWindData();
    3c74:	86 eb       	ldi	r24, 0xB6	; 182
    3c76:	9a e0       	ldi	r25, 0x0A	; 10
    3c78:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <_ZN4Wind12calcWindDataEv>
			if (DEBUG && autopilot.isEnabled()) {
    3c7c:	8b e4       	ldi	r24, 0x4B	; 75
    3c7e:	9b e0       	ldi	r25, 0x0B	; 11
    3c80:	0e 94 89 19 	call	0x3312	; 0x3312 <_ZN9Autopilot9isEnabledEv>
    3c84:	88 23       	and	r24, r24
    3c86:	09 f4       	brne	.+2      	; 0x3c8a <loop+0x176>
    3c88:	4c c0       	rjmp	.+152    	; 0x3d22 <loop+0x20e>
					Serial.print("Target deg = ");
    3c8a:	87 e2       	ldi	r24, 0x27	; 39
    3c8c:	9e e0       	ldi	r25, 0x0E	; 14
    3c8e:	62 e9       	ldi	r22, 0x92	; 146
    3c90:	73 e0       	ldi	r23, 0x03	; 3
    3c92:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
					Serial.print(autopilot.getTargetHeading());
    3c96:	8b e4       	ldi	r24, 0x4B	; 75
    3c98:	9b e0       	ldi	r25, 0x0B	; 11
    3c9a:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN9Autopilot16getTargetHeadingEv>
    3c9e:	ab 01       	movw	r20, r22
    3ca0:	bc 01       	movw	r22, r24
    3ca2:	87 e2       	ldi	r24, 0x27	; 39
    3ca4:	9e e0       	ldi	r25, 0x0E	; 14
    3ca6:	22 e0       	ldi	r18, 0x02	; 2
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <_ZN5Print5printEdi>
					Serial.print("Heading deg = ");
    3cae:	87 e2       	ldi	r24, 0x27	; 39
    3cb0:	9e e0       	ldi	r25, 0x0E	; 14
    3cb2:	60 ea       	ldi	r22, 0xA0	; 160
    3cb4:	73 e0       	ldi	r23, 0x03	; 3
    3cb6:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
					Serial.print(autopilot.getCurrentHeading());
    3cba:	8b e4       	ldi	r24, 0x4B	; 75
    3cbc:	9b e0       	ldi	r25, 0x0B	; 11
    3cbe:	0e 94 b9 19 	call	0x3372	; 0x3372 <_ZN9Autopilot17getCurrentHeadingEv>
    3cc2:	ab 01       	movw	r20, r22
    3cc4:	bc 01       	movw	r22, r24
    3cc6:	87 e2       	ldi	r24, 0x27	; 39
    3cc8:	9e e0       	ldi	r25, 0x0E	; 14
    3cca:	22 e0       	ldi	r18, 0x02	; 2
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <_ZN5Print5printEdi>
					Serial.print(", Rudder = ");
    3cd2:	87 e2       	ldi	r24, 0x27	; 39
    3cd4:	9e e0       	ldi	r25, 0x0E	; 14
    3cd6:	6f ea       	ldi	r22, 0xAF	; 175
    3cd8:	73 e0       	ldi	r23, 0x03	; 3
    3cda:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
					Serial.println(autopilot.getRudderCorrection());
    3cde:	8b e4       	ldi	r24, 0x4B	; 75
    3ce0:	9b e0       	ldi	r25, 0x0B	; 11
    3ce2:	0e 94 e5 19 	call	0x33ca	; 0x33ca <_ZN9Autopilot19getRudderCorrectionEv>
    3ce6:	ab 01       	movw	r20, r22
    3ce8:	bc 01       	movw	r22, r24
    3cea:	87 e2       	ldi	r24, 0x27	; 39
    3cec:	9e e0       	ldi	r25, 0x0E	; 14
    3cee:	22 e0       	ldi	r18, 0x02	; 2
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	0e 94 d5 3f 	call	0x7faa	; 0x7faa <_ZN5Print7printlnEdi>
					autopilot.setCurrentHeading(autopilot.getCurrentHeading()+autopilot.getRudderCorrection());
    3cf6:	8b e4       	ldi	r24, 0x4B	; 75
    3cf8:	9b e0       	ldi	r25, 0x0B	; 11
    3cfa:	0e 94 b9 19 	call	0x3372	; 0x3372 <_ZN9Autopilot17getCurrentHeadingEv>
    3cfe:	7b 01       	movw	r14, r22
    3d00:	8c 01       	movw	r16, r24
    3d02:	8b e4       	ldi	r24, 0x4B	; 75
    3d04:	9b e0       	ldi	r25, 0x0B	; 11
    3d06:	0e 94 e5 19 	call	0x33ca	; 0x33ca <_ZN9Autopilot19getRudderCorrectionEv>
    3d0a:	9b 01       	movw	r18, r22
    3d0c:	ac 01       	movw	r20, r24
    3d0e:	c8 01       	movw	r24, r16
    3d10:	b7 01       	movw	r22, r14
    3d12:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    3d16:	ab 01       	movw	r20, r22
    3d18:	bc 01       	movw	r22, r24
    3d1a:	8b e4       	ldi	r24, 0x4B	; 75
    3d1c:	9b e0       	ldi	r25, 0x0B	; 11
    3d1e:	0e 94 c6 19 	call	0x338c	; 0x338c <_ZN9Autopilot17setCurrentHeadingEd>
				}
			anchor.checkAnchor();
    3d22:	8d e4       	ldi	r24, 0x4D	; 77
    3d24:	9b e0       	ldi	r25, 0x0B	; 11
    3d26:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <_ZN6Anchor11checkAnchorEv>
			wind.checkWindAlarm();
    3d2a:	86 eb       	ldi	r24, 0xB6	; 182
    3d2c:	9a e0       	ldi	r25, 0x0A	; 10
    3d2e:	0e 94 3b 33 	call	0x6676	; 0x6676 <_ZN4Wind14checkWindAlarmEv>
			wind.printWindNmea();
    3d32:	86 eb       	ldi	r24, 0xB6	; 182
    3d34:	9a e0       	ldi	r25, 0x0A	; 10
    3d36:	0e 94 a9 32 	call	0x6552	; 0x6552 <_ZN4Wind13printWindNmeaEv>
		}
		//if (interval % 20 == 0) {
			//do every 2000ms
		//}

		execute = false;
    3d3a:	10 92 b7 0b 	sts	0x0BB7, r1

	//wind.showWindData(lcd, menu.getMenuLevel(), menu.getMenuState());
	//anchor.showAnchorAlarmData(lcd, menu.getMenuLevel(), menu.getMenuState());

//	//check buttons
	menu.checkButtons();
    3d3e:	8f e9       	ldi	r24, 0x9F	; 159
    3d40:	9b e0       	ldi	r25, 0x0B	; 11
    3d42:	0e 94 cb 31 	call	0x6396	; 0x6396 <_ZN4Menu12checkButtonsEv>
	 s.append(", stack: ");
	 s.append((int)stackptr);
	 if(DEBUG)Serial.println(s);
	 */

}
    3d46:	1f 91       	pop	r17
    3d48:	0f 91       	pop	r16
    3d4a:	ff 90       	pop	r15
    3d4c:	ef 90       	pop	r14
    3d4e:	08 95       	ret

00003d50 <_GLOBAL__I_lcd>:
    3d50:	81 e0       	ldi	r24, 0x01	; 1
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	0e 94 21 1c 	call	0x3842	; 0x3842 <_Z41__static_initialization_and_destruction_0ii.clone.2>
    3d58:	08 95       	ret

00003d5a <_GLOBAL__D_lcd>:
    3d5a:	80 e0       	ldi	r24, 0x00	; 0
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	0e 94 21 1c 	call	0x3842	; 0x3842 <_Z41__static_initialization_and_destruction_0ii.clone.2>
    3d62:	08 95       	ret

00003d64 <_ZN3GpsD1Ev>:
#include "Gps.h"

Gps::~Gps() {
    3d64:	2e e3       	ldi	r18, 0x3E	; 62
    3d66:	37 e0       	ldi	r19, 0x07	; 7
    3d68:	fc 01       	movw	r30, r24
    3d6a:	31 83       	std	Z+1, r19	; 0x01
    3d6c:	20 83       	st	Z, r18
}
    3d6e:	08 95       	ret

00003d70 <_ZN3GpsD0Ev>:
#include "Gps.h"

Gps::~Gps() {
    3d70:	2e e3       	ldi	r18, 0x3E	; 62
    3d72:	37 e0       	ldi	r19, 0x07	; 7
    3d74:	fc 01       	movw	r30, r24
    3d76:	31 83       	std	Z+1, r19	; 0x01
    3d78:	20 83       	st	Z, r18
}
    3d7a:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <_ZdlPv>
    3d7e:	08 95       	ret

00003d80 <_ZN3GpsC1EP4NMEA>:
Gps::Gps(NMEA* gpsSource) {
    3d80:	fc 01       	movw	r30, r24
    3d82:	8e e3       	ldi	r24, 0x3E	; 62
    3d84:	97 e0       	ldi	r25, 0x07	; 7
    3d86:	91 83       	std	Z+1, r25	; 0x01
    3d88:	80 83       	st	Z, r24
	gpsDecode = false;
    3d8a:	12 82       	std	Z+2, r1	; 0x02
	lastGpsFix = 0;
    3d8c:	13 82       	std	Z+3, r1	; 0x03
    3d8e:	14 82       	std	Z+4, r1	; 0x04
    3d90:	15 82       	std	Z+5, r1	; 0x05
    3d92:	16 82       	std	Z+6, r1	; 0x06
	lastLcdUpdate=0;
    3d94:	17 82       	std	Z+7, r1	; 0x07
    3d96:	10 86       	std	Z+8, r1	; 0x08
    3d98:	11 86       	std	Z+9, r1	; 0x09
    3d9a:	12 86       	std	Z+10, r1	; 0x0a
	this->gpsSource = gpsSource;
    3d9c:	e5 5a       	subi	r30, 0xA5	; 165
    3d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3da0:	71 83       	std	Z+1, r23	; 0x01
    3da2:	60 83       	st	Z, r22
	//setupGps();
}
    3da4:	08 95       	ret

00003da6 <_ZN3Gps7testMsgEv>:

bool Gps::testMsg(){
    3da6:	df 92       	push	r13
    3da8:	ef 92       	push	r14
    3daa:	ff 92       	push	r15
    3dac:	0f 93       	push	r16
    3dae:	1f 93       	push	r17
    3db0:	cf 93       	push	r28
    3db2:	df 93       	push	r29
	//clear buffer of rubbish
	int x =0;
    3db4:	c0 e0       	ldi	r28, 0x00	; 0
    3db6:	d0 e0       	ldi	r29, 0x00	; 0
	while( x<100){
		if(Serial1.available()){
    3db8:	8b e4       	ldi	r24, 0x4B	; 75
    3dba:	9e e0       	ldi	r25, 0x0E	; 14
    3dbc:	0e 94 21 38 	call	0x7042	; 0x7042 <_ZN14HardwareSerial9availableEv>
    3dc0:	00 97       	sbiw	r24, 0x00	; 0
    3dc2:	d1 f3       	breq	.-12     	; 0x3db8 <_ZN3Gps7testMsgEv+0x12>
			Serial1.read();
    3dc4:	8b e4       	ldi	r24, 0x4B	; 75
    3dc6:	9e e0       	ldi	r25, 0x0E	; 14
    3dc8:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_ZN14HardwareSerial4readEv>
			x++;
    3dcc:	21 96       	adiw	r28, 0x01	; 1
}

bool Gps::testMsg(){
	//clear buffer of rubbish
	int x =0;
	while( x<100){
    3dce:	c4 36       	cpi	r28, 0x64	; 100
    3dd0:	d1 05       	cpc	r29, r1
    3dd2:	91 f7       	brne	.-28     	; 0x3db8 <_ZN3Gps7testMsgEv+0x12>
			Serial1.read();
			x++;
		}
	}
	//5 secs
	unsigned long now = millis();
    3dd4:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    3dd8:	7b 01       	movw	r14, r22
    3dda:	8c 01       	movw	r16, r24
	bool valid=true;
    3ddc:	dd 24       	eor	r13, r13
    3dde:	d3 94       	inc	r13
	while(now+5000>millis() && valid){
    3de0:	88 e8       	ldi	r24, 0x88	; 136
    3de2:	93 e1       	ldi	r25, 0x13	; 19
    3de4:	a0 e0       	ldi	r26, 0x00	; 0
    3de6:	b0 e0       	ldi	r27, 0x00	; 0
    3de8:	e8 0e       	add	r14, r24
    3dea:	f9 1e       	adc	r15, r25
    3dec:	0a 1f       	adc	r16, r26
    3dee:	1b 1f       	adc	r17, r27
    3df0:	0a c0       	rjmp	.+20     	; 0x3e06 <_ZN3Gps7testMsgEv+0x60>
		if(Serial1.available()){
			int c = Serial1.read();
    3df2:	8b e4       	ldi	r24, 0x4B	; 75
    3df4:	9e e0       	ldi	r25, 0x0E	; 14
    3df6:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_ZN14HardwareSerial4readEv>
	lastLcdUpdate=0;
	this->gpsSource = gpsSource;
	//setupGps();
}

bool Gps::testMsg(){
    3dfa:	dd 24       	eor	r13, r13
    3dfc:	d3 94       	inc	r13
    3dfe:	81 38       	cpi	r24, 0x81	; 129
    3e00:	91 05       	cpc	r25, r1
    3e02:	0c f0       	brlt	.+2      	; 0x3e06 <_ZN3Gps7testMsgEv+0x60>
    3e04:	dd 24       	eor	r13, r13
		}
	}
	//5 secs
	unsigned long now = millis();
	bool valid=true;
	while(now+5000>millis() && valid){
    3e06:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    3e0a:	6e 15       	cp	r22, r14
    3e0c:	7f 05       	cpc	r23, r15
    3e0e:	80 07       	cpc	r24, r16
    3e10:	91 07       	cpc	r25, r17
    3e12:	48 f4       	brcc	.+18     	; 0x3e26 <_ZN3Gps7testMsgEv+0x80>
    3e14:	dd 20       	and	r13, r13
    3e16:	81 f0       	breq	.+32     	; 0x3e38 <_ZN3Gps7testMsgEv+0x92>
		if(Serial1.available()){
    3e18:	8b e4       	ldi	r24, 0x4B	; 75
    3e1a:	9e e0       	ldi	r25, 0x0E	; 14
    3e1c:	0e 94 21 38 	call	0x7042	; 0x7042 <_ZN14HardwareSerial9availableEv>
    3e20:	00 97       	sbiw	r24, 0x00	; 0
    3e22:	89 f3       	breq	.-30     	; 0x3e06 <_ZN3Gps7testMsgEv+0x60>
    3e24:	e6 cf       	rjmp	.-52     	; 0x3df2 <_ZN3Gps7testMsgEv+0x4c>
			//not Cntrl-n or printable so invalid
			if( c>128)valid=false;
		}
	}
	if(DEBUG){
		if(valid)
    3e26:	dd 20       	and	r13, r13
    3e28:	39 f0       	breq	.+14     	; 0x3e38 <_ZN3Gps7testMsgEv+0x92>
			Serial.println("OK");
    3e2a:	87 e2       	ldi	r24, 0x27	; 39
    3e2c:	9e e0       	ldi	r25, 0x0E	; 14
    3e2e:	6b eb       	ldi	r22, 0xBB	; 187
    3e30:	73 e0       	ldi	r23, 0x03	; 3
    3e32:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
    3e36:	07 c0       	rjmp	.+14     	; 0x3e46 <_ZN3Gps7testMsgEv+0xa0>
		else
			Serial.println("FAIL");
    3e38:	87 e2       	ldi	r24, 0x27	; 39
    3e3a:	9e e0       	ldi	r25, 0x0E	; 14
    3e3c:	6e eb       	ldi	r22, 0xBE	; 190
    3e3e:	73 e0       	ldi	r23, 0x03	; 3
    3e40:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
    3e44:	dd 24       	eor	r13, r13
	}
	return valid;
}
    3e46:	8d 2d       	mov	r24, r13
    3e48:	df 91       	pop	r29
    3e4a:	cf 91       	pop	r28
    3e4c:	1f 91       	pop	r17
    3e4e:	0f 91       	pop	r16
    3e50:	ff 90       	pop	r15
    3e52:	ef 90       	pop	r14
    3e54:	df 90       	pop	r13
    3e56:	08 95       	ret

00003e58 <_ZN3Gps8autoBaudEv>:

int Gps::autoBaud(){
    3e58:	cf 93       	push	r28
    3e5a:	df 93       	push	r29
    3e5c:	ec 01       	movw	r28, r24
	//try the various baud rates until one makes sense
	//should only output simple NMEA [$A-Z0-9*\r\c]


	if(DEBUG)Serial.println("   try autobaud 4800..");
    3e5e:	87 e2       	ldi	r24, 0x27	; 39
    3e60:	9e e0       	ldi	r25, 0x0E	; 14
    3e62:	63 ec       	ldi	r22, 0xC3	; 195
    3e64:	73 e0       	ldi	r23, 0x03	; 3
    3e66:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	Serial1.begin(4800);
    3e6a:	8b e4       	ldi	r24, 0x4B	; 75
    3e6c:	9e e0       	ldi	r25, 0x0E	; 14
    3e6e:	40 ec       	ldi	r20, 0xC0	; 192
    3e70:	52 e1       	ldi	r21, 0x12	; 18
    3e72:	60 e0       	ldi	r22, 0x00	; 0
    3e74:	70 e0       	ldi	r23, 0x00	; 0
    3e76:	0e 94 1d 3b 	call	0x763a	; 0x763a <_ZN14HardwareSerial5beginEm>
	if(testMsg())return 4800;
    3e7a:	ce 01       	movw	r24, r28
    3e7c:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN3Gps7testMsgEv>
    3e80:	88 23       	and	r24, r24
    3e82:	09 f0       	breq	.+2      	; 0x3e86 <_ZN3Gps8autoBaudEv+0x2e>
    3e84:	67 c0       	rjmp	.+206    	; 0x3f54 <_ZN3Gps8autoBaudEv+0xfc>
	Serial1.end();
    3e86:	8b e4       	ldi	r24, 0x4B	; 75
    3e88:	9e e0       	ldi	r25, 0x0E	; 14
    3e8a:	0e 94 75 3c 	call	0x78ea	; 0x78ea <_ZN14HardwareSerial3endEv>
	if(DEBUG)Serial.println("   try autobaud 9600..");
    3e8e:	87 e2       	ldi	r24, 0x27	; 39
    3e90:	9e e0       	ldi	r25, 0x0E	; 14
    3e92:	6a ed       	ldi	r22, 0xDA	; 218
    3e94:	73 e0       	ldi	r23, 0x03	; 3
    3e96:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	Serial1.begin(9600);
    3e9a:	8b e4       	ldi	r24, 0x4B	; 75
    3e9c:	9e e0       	ldi	r25, 0x0E	; 14
    3e9e:	40 e8       	ldi	r20, 0x80	; 128
    3ea0:	55 e2       	ldi	r21, 0x25	; 37
    3ea2:	60 e0       	ldi	r22, 0x00	; 0
    3ea4:	70 e0       	ldi	r23, 0x00	; 0
    3ea6:	0e 94 1d 3b 	call	0x763a	; 0x763a <_ZN14HardwareSerial5beginEm>
	if(testMsg())return 9600;
    3eaa:	ce 01       	movw	r24, r28
    3eac:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN3Gps7testMsgEv>
    3eb0:	88 23       	and	r24, r24
    3eb2:	09 f0       	breq	.+2      	; 0x3eb6 <_ZN3Gps8autoBaudEv+0x5e>
    3eb4:	52 c0       	rjmp	.+164    	; 0x3f5a <_ZN3Gps8autoBaudEv+0x102>
	Serial1.end();
    3eb6:	8b e4       	ldi	r24, 0x4B	; 75
    3eb8:	9e e0       	ldi	r25, 0x0E	; 14
    3eba:	0e 94 75 3c 	call	0x78ea	; 0x78ea <_ZN14HardwareSerial3endEv>
	if(DEBUG)Serial.println("   try autobaud 19200..");
    3ebe:	87 e2       	ldi	r24, 0x27	; 39
    3ec0:	9e e0       	ldi	r25, 0x0E	; 14
    3ec2:	61 ef       	ldi	r22, 0xF1	; 241
    3ec4:	73 e0       	ldi	r23, 0x03	; 3
    3ec6:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	Serial1.begin(19200);
    3eca:	8b e4       	ldi	r24, 0x4B	; 75
    3ecc:	9e e0       	ldi	r25, 0x0E	; 14
    3ece:	40 e0       	ldi	r20, 0x00	; 0
    3ed0:	5b e4       	ldi	r21, 0x4B	; 75
    3ed2:	60 e0       	ldi	r22, 0x00	; 0
    3ed4:	70 e0       	ldi	r23, 0x00	; 0
    3ed6:	0e 94 1d 3b 	call	0x763a	; 0x763a <_ZN14HardwareSerial5beginEm>
	if(testMsg())return 19200;
    3eda:	ce 01       	movw	r24, r28
    3edc:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN3Gps7testMsgEv>
    3ee0:	88 23       	and	r24, r24
    3ee2:	f1 f5       	brne	.+124    	; 0x3f60 <_ZN3Gps8autoBaudEv+0x108>
	Serial1.end();
    3ee4:	8b e4       	ldi	r24, 0x4B	; 75
    3ee6:	9e e0       	ldi	r25, 0x0E	; 14
    3ee8:	0e 94 75 3c 	call	0x78ea	; 0x78ea <_ZN14HardwareSerial3endEv>
	if(DEBUG)Serial.println("   try autobaud 38400..");
    3eec:	87 e2       	ldi	r24, 0x27	; 39
    3eee:	9e e0       	ldi	r25, 0x0E	; 14
    3ef0:	69 e0       	ldi	r22, 0x09	; 9
    3ef2:	74 e0       	ldi	r23, 0x04	; 4
    3ef4:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
		Serial1.begin(38400);
    3ef8:	8b e4       	ldi	r24, 0x4B	; 75
    3efa:	9e e0       	ldi	r25, 0x0E	; 14
    3efc:	40 e0       	ldi	r20, 0x00	; 0
    3efe:	56 e9       	ldi	r21, 0x96	; 150
    3f00:	60 e0       	ldi	r22, 0x00	; 0
    3f02:	70 e0       	ldi	r23, 0x00	; 0
    3f04:	0e 94 1d 3b 	call	0x763a	; 0x763a <_ZN14HardwareSerial5beginEm>
		if(testMsg())return 38400;
    3f08:	ce 01       	movw	r24, r28
    3f0a:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN3Gps7testMsgEv>
    3f0e:	88 23       	and	r24, r24
    3f10:	51 f5       	brne	.+84     	; 0x3f66 <_ZN3Gps8autoBaudEv+0x10e>
	Serial1.end();
    3f12:	8b e4       	ldi	r24, 0x4B	; 75
    3f14:	9e e0       	ldi	r25, 0x0E	; 14
    3f16:	0e 94 75 3c 	call	0x78ea	; 0x78ea <_ZN14HardwareSerial3endEv>
	if(DEBUG)Serial.println("   try autobaud 57600..");
    3f1a:	87 e2       	ldi	r24, 0x27	; 39
    3f1c:	9e e0       	ldi	r25, 0x0E	; 14
    3f1e:	61 e2       	ldi	r22, 0x21	; 33
    3f20:	74 e0       	ldi	r23, 0x04	; 4
    3f22:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	Serial1.begin(57600);
    3f26:	8b e4       	ldi	r24, 0x4B	; 75
    3f28:	9e e0       	ldi	r25, 0x0E	; 14
    3f2a:	40 e0       	ldi	r20, 0x00	; 0
    3f2c:	51 ee       	ldi	r21, 0xE1	; 225
    3f2e:	60 e0       	ldi	r22, 0x00	; 0
    3f30:	70 e0       	ldi	r23, 0x00	; 0
    3f32:	0e 94 1d 3b 	call	0x763a	; 0x763a <_ZN14HardwareSerial5beginEm>
	if(testMsg())return 57600;
    3f36:	ce 01       	movw	r24, r28
    3f38:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN3Gps7testMsgEv>
    3f3c:	88 23       	and	r24, r24
    3f3e:	b1 f4       	brne	.+44     	; 0x3f6c <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
    3f40:	8b e4       	ldi	r24, 0x4B	; 75
    3f42:	9e e0       	ldi	r25, 0x0E	; 14
    3f44:	0e 94 75 3c 	call	0x78ea	; 0x78ea <_ZN14HardwareSerial3endEv>
	if(DEBUG)Serial.println("   default to 4800..");
    3f48:	87 e2       	ldi	r24, 0x27	; 39
    3f4a:	9e e0       	ldi	r25, 0x0E	; 14
    3f4c:	69 e3       	ldi	r22, 0x39	; 57
    3f4e:	74 e0       	ldi	r23, 0x04	; 4
    3f50:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	//should only output simple NMEA [$A-Z0-9*\r\c]


	if(DEBUG)Serial.println("   try autobaud 4800..");
	Serial1.begin(4800);
	if(testMsg())return 4800;
    3f54:	20 ec       	ldi	r18, 0xC0	; 192
    3f56:	32 e1       	ldi	r19, 0x12	; 18
    3f58:	0b c0       	rjmp	.+22     	; 0x3f70 <_ZN3Gps8autoBaudEv+0x118>
	Serial1.end();
	if(DEBUG)Serial.println("   try autobaud 9600..");
	Serial1.begin(9600);
	if(testMsg())return 9600;
    3f5a:	20 e8       	ldi	r18, 0x80	; 128
    3f5c:	35 e2       	ldi	r19, 0x25	; 37
    3f5e:	08 c0       	rjmp	.+16     	; 0x3f70 <_ZN3Gps8autoBaudEv+0x118>
	Serial1.end();
	if(DEBUG)Serial.println("   try autobaud 19200..");
	Serial1.begin(19200);
	if(testMsg())return 19200;
    3f60:	20 e0       	ldi	r18, 0x00	; 0
    3f62:	3b e4       	ldi	r19, 0x4B	; 75
    3f64:	05 c0       	rjmp	.+10     	; 0x3f70 <_ZN3Gps8autoBaudEv+0x118>
	Serial1.end();
	if(DEBUG)Serial.println("   try autobaud 38400..");
		Serial1.begin(38400);
		if(testMsg())return 38400;
    3f66:	20 e0       	ldi	r18, 0x00	; 0
    3f68:	36 e9       	ldi	r19, 0x96	; 150
    3f6a:	02 c0       	rjmp	.+4      	; 0x3f70 <_ZN3Gps8autoBaudEv+0x118>
	Serial1.end();
	if(DEBUG)Serial.println("   try autobaud 57600..");
	Serial1.begin(57600);
	if(testMsg())return 57600;
    3f6c:	20 e0       	ldi	r18, 0x00	; 0
    3f6e:	31 ee       	ldi	r19, 0xE1	; 225
	Serial1.end();
	if(DEBUG)Serial.println("   default to 4800..");
	return 4800;
}
    3f70:	c9 01       	movw	r24, r18
    3f72:	df 91       	pop	r29
    3f74:	cf 91       	pop	r28
    3f76:	08 95       	ret

00003f78 <_ZN3Gps8setupGpsEv>:
//	return gpsDecode;
//}
/*
 Set baud rate and various message frequencies.
 */
void Gps::setupGps() {
    3f78:	cf 93       	push	r28
    3f7a:	df 93       	push	r29
	 6 MSS (If internal beacon is supported)
	 7 Not defined
	 8 ZDA (if 1PPS output is supported)
	 9 Not defined
	 */
	autoBaud();
    3f7c:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN3Gps8autoBaudEv>
	//Serial1.begin(38400, 8, 1, 0); //gps
	//set debug on
	Serial1.println("$PSRF105,1*3E");
    3f80:	cb e4       	ldi	r28, 0x4B	; 75
    3f82:	de e0       	ldi	r29, 0x0E	; 14
    3f84:	ce 01       	movw	r24, r28
    3f86:	6e e4       	ldi	r22, 0x4E	; 78
    3f88:	74 e0       	ldi	r23, 0x04	; 4
    3f8a:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>

	//set VTG off -  Vector track an Speed over the Ground
	Serial1.println("$PSRF103,05,00,00,01*21");
    3f8e:	ce 01       	movw	r24, r28
    3f90:	6c e5       	ldi	r22, 0x5C	; 92
    3f92:	74 e0       	ldi	r23, 0x04	; 4
    3f94:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	//set GLL off -  Lat/Lon data
	Serial1.println("$PSRF103,01,00,00,01*25");
    3f98:	ce 01       	movw	r24, r28
    3f9a:	64 e7       	ldi	r22, 0x74	; 116
    3f9c:	74 e0       	ldi	r23, 0x04	; 4
    3f9e:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	//set GGA on, 5sec, constant -  Fix information
	Serial1.println("$PSRF103,00,00,05,01*21");
    3fa2:	ce 01       	movw	r24, r28
    3fa4:	6c e8       	ldi	r22, 0x8C	; 140
    3fa6:	74 e0       	ldi	r23, 0x04	; 4
    3fa8:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	//set GSA on, 5 sec, constant - Overall Satellite data
	Serial1.println("$PSRF103,02,00,05,01*23");
    3fac:	ce 01       	movw	r24, r28
    3fae:	64 ea       	ldi	r22, 0xA4	; 164
    3fb0:	74 e0       	ldi	r23, 0x04	; 4
    3fb2:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	//set GSV on, 20sec, constant -Detailed Satellite data
	Serial1.println("$PSRF103,03,00,20,01*25");
    3fb6:	ce 01       	movw	r24, r28
    3fb8:	6c eb       	ldi	r22, 0xBC	; 188
    3fba:	74 e0       	ldi	r23, 0x04	; 4
    3fbc:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	//set RMC on, 1sec, constant, Recommended minimum info
	Serial1.println("$PSRF103,04,00,01,01*21");
    3fc0:	ce 01       	movw	r24, r28
    3fc2:	64 ed       	ldi	r22, 0xD4	; 212
    3fc4:	74 e0       	ldi	r23, 0x04	; 4
    3fc6:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	//delay(1000);
//	while (Serial1.available() > 0) {
//		Serial.print(Serial1.read());
//	}
	//debug off
	Serial1.println("$PSRF105,0*3F");
    3fca:	ce 01       	movw	r24, r28
    3fcc:	6c ee       	ldi	r22, 0xEC	; 236
    3fce:	74 e0       	ldi	r23, 0x04	; 4
    3fd0:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	//#define SIRF_BAUD_RATE_19200    "$PSRF100,1,19200,8,1,0*38\r\n"
	//#define SIRF_BAUD_RATE_38400    "$PSRF100,1,38400,8,1,0*3D\r\n"
	//#define SIRF_BAUD_RATE_57600    "$PSRF100,1,57600,8,1,0*36\r\n"

	//$PSRF100,1,38400,8,1,0*3D\r\n
	Serial1.print("$PSRF100,1,38400,8,1,0*3D\r\n");
    3fd4:	ce 01       	movw	r24, r28
    3fd6:	6a ef       	ldi	r22, 0xFA	; 250
    3fd8:	74 e0       	ldi	r23, 0x04	; 4
    3fda:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	Serial1.flush();
    3fde:	ce 01       	movw	r24, r28
    3fe0:	0e 94 72 38 	call	0x70e4	; 0x70e4 <_ZN14HardwareSerial5flushEv>
	Serial1.end();
    3fe4:	ce 01       	movw	r24, r28
    3fe6:	0e 94 75 3c 	call	0x78ea	; 0x78ea <_ZN14HardwareSerial3endEv>
	Serial1.begin(38400);
    3fea:	ce 01       	movw	r24, r28
    3fec:	40 e0       	ldi	r20, 0x00	; 0
    3fee:	56 e9       	ldi	r21, 0x96	; 150
    3ff0:	60 e0       	ldi	r22, 0x00	; 0
    3ff2:	70 e0       	ldi	r23, 0x00	; 0
    3ff4:	0e 94 1d 3b 	call	0x763a	; 0x763a <_ZN14HardwareSerial5beginEm>

}
    3ff8:	df 91       	pop	r29
    3ffa:	cf 91       	pop	r28
    3ffc:	08 95       	ret

00003ffe <_ZN3Gps11getLatitudeEv>:



float Gps::getLatitude() {
	return gpsSource->gprmc_latitude();
    3ffe:	fc 01       	movw	r30, r24
    4000:	e5 5a       	subi	r30, 0xA5	; 165
    4002:	ff 4f       	sbci	r31, 0xFF	; 255
    4004:	80 81       	ld	r24, Z
    4006:	91 81       	ldd	r25, Z+1	; 0x01
    4008:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN4NMEA14gprmc_latitudeEv>
}
    400c:	08 95       	ret

0000400e <_ZN3Gps12getLongitudeEv>:

float Gps::getLongitude() {
	return gpsSource->gprmc_longitude();
    400e:	fc 01       	movw	r30, r24
    4010:	e5 5a       	subi	r30, 0xA5	; 165
    4012:	ff 4f       	sbci	r31, 0xFF	; 255
    4014:	80 81       	ld	r24, Z
    4016:	91 81       	ldd	r25, Z+1	; 0x01
    4018:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <_ZN4NMEA15gprmc_longitudeEv>
}
    401c:	08 95       	ret

0000401e <_ZN3Gps13getLastGpsFixEv>:

unsigned long Gps::getLastGpsFix() {
    401e:	fc 01       	movw	r30, r24
    4020:	63 81       	ldd	r22, Z+3	; 0x03
    4022:	74 81       	ldd	r23, Z+4	; 0x04
	return lastGpsFix;
}
    4024:	85 81       	ldd	r24, Z+5	; 0x05
    4026:	96 81       	ldd	r25, Z+6	; 0x06
    4028:	08 95       	ret

0000402a <_ZN3Gps12getRmcStatusEv>:

bool Gps::getRmcStatus() {
	return (gpsSource->gprmc_status() == 'A');
    402a:	fc 01       	movw	r30, r24
    402c:	e5 5a       	subi	r30, 0xA5	; 165
    402e:	ff 4f       	sbci	r31, 0xFF	; 255
    4030:	80 81       	ld	r24, Z
    4032:	91 81       	ldd	r25, Z+1	; 0x01
    4034:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN4NMEA12gprmc_statusEv>
    4038:	91 e0       	ldi	r25, 0x01	; 1
    403a:	81 34       	cpi	r24, 0x41	; 65
    403c:	09 f0       	breq	.+2      	; 0x4040 <_ZN3Gps12getRmcStatusEv+0x16>
    403e:	90 e0       	ldi	r25, 0x00	; 0
}
    4040:	89 2f       	mov	r24, r25
    4042:	08 95       	ret

00004044 <_ZN3Gps14getRmcMetersToEff>:

float Gps::getRmcMetersTo(float lat, float lon) {
    4044:	cf 92       	push	r12
    4046:	df 92       	push	r13
    4048:	ef 92       	push	r14
    404a:	ff 92       	push	r15
    404c:	0f 93       	push	r16
    404e:	1f 93       	push	r17
	return gpsSource->gprmc_distance_to(lat, lon, MTR);
    4050:	fc 01       	movw	r30, r24
    4052:	e5 5a       	subi	r30, 0xA5	; 165
    4054:	ff 4f       	sbci	r31, 0xFF	; 255
    4056:	80 81       	ld	r24, Z
    4058:	91 81       	ldd	r25, Z+1	; 0x01
    405a:	0f 2e       	mov	r0, r31
    405c:	f0 e0       	ldi	r31, 0x00	; 0
    405e:	cf 2e       	mov	r12, r31
    4060:	f0 e0       	ldi	r31, 0x00	; 0
    4062:	df 2e       	mov	r13, r31
    4064:	f0 e8       	ldi	r31, 0x80	; 128
    4066:	ef 2e       	mov	r14, r31
    4068:	ff e3       	ldi	r31, 0x3F	; 63
    406a:	ff 2e       	mov	r15, r31
    406c:	f0 2d       	mov	r31, r0
    406e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN4NMEA17gprmc_distance_toEfff>
}
    4072:	1f 91       	pop	r17
    4074:	0f 91       	pop	r16
    4076:	ff 90       	pop	r15
    4078:	ef 90       	pop	r14
    407a:	df 90       	pop	r13
    407c:	cf 90       	pop	r12
    407e:	08 95       	ret

00004080 <_ZN3Gps6decodeEh>:
float Gps::getRmcCourse() {
	return gpsSource->gprmc_course();
}

bool Gps::decode(byte inByte) {
    4080:	cf 93       	push	r28
    4082:	df 93       	push	r29
    4084:	ec 01       	movw	r28, r24
	// check if the character completes a valid GPS sentence
	gpsDecode = gpsSource->decode(inByte);
    4086:	fc 01       	movw	r30, r24
    4088:	e5 5a       	subi	r30, 0xA5	; 165
    408a:	ff 4f       	sbci	r31, 0xFF	; 255
    408c:	80 81       	ld	r24, Z
    408e:	91 81       	ldd	r25, Z+1	; 0x01
    4090:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <_ZN4NMEA6decodeEc>
    4094:	21 e0       	ldi	r18, 0x01	; 1
    4096:	00 97       	sbiw	r24, 0x00	; 0
    4098:	09 f4       	brne	.+2      	; 0x409c <_ZN3Gps6decodeEh+0x1c>
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	2a 83       	std	Y+2, r18	; 0x02
	//if(DEBUG)Serial.print(inByte,BYTE);
	if (gpsDecode) {
    409e:	22 23       	and	r18, r18
    40a0:	79 f0       	breq	.+30     	; 0x40c0 <_ZN3Gps6decodeEh+0x40>
		if (gpsSource->gprmc_status() == 'A') {
    40a2:	fe 01       	movw	r30, r28
    40a4:	e5 5a       	subi	r30, 0xA5	; 165
    40a6:	ff 4f       	sbci	r31, 0xFF	; 255
    40a8:	80 81       	ld	r24, Z
    40aa:	91 81       	ldd	r25, Z+1	; 0x01
    40ac:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN4NMEA12gprmc_statusEv>
    40b0:	81 34       	cpi	r24, 0x41	; 65
    40b2:	31 f4       	brne	.+12     	; 0x40c0 <_ZN3Gps6decodeEh+0x40>
			lastGpsFix = millis();
    40b4:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    40b8:	6b 83       	std	Y+3, r22	; 0x03
    40ba:	7c 83       	std	Y+4, r23	; 0x04
    40bc:	8d 83       	std	Y+5, r24	; 0x05
    40be:	9e 83       	std	Y+6, r25	; 0x06
		}
	}
	return gpsDecode;
}
    40c0:	8a 81       	ldd	r24, Y+2	; 0x02
    40c2:	df 91       	pop	r29
    40c4:	cf 91       	pop	r28
    40c6:	08 95       	ret

000040c8 <_ZN3Gps12getLatStringEfii>:
		}

	}
}

char* Gps::getLatString(float lat, int decimals, int padding) {
    40c8:	af 92       	push	r10
    40ca:	bf 92       	push	r11
    40cc:	cf 92       	push	r12
    40ce:	df 92       	push	r13
    40d0:	ef 92       	push	r14
    40d2:	ff 92       	push	r15
    40d4:	0f 93       	push	r16
    40d6:	1f 93       	push	r17
    40d8:	df 93       	push	r29
    40da:	cf 93       	push	r28
    40dc:	cd b7       	in	r28, 0x3d	; 61
    40de:	de b7       	in	r29, 0x3e	; 62
    40e0:	2a 97       	sbiw	r28, 0x0a	; 10
    40e2:	0f b6       	in	r0, 0x3f	; 63
    40e4:	f8 94       	cli
    40e6:	de bf       	out	0x3e, r29	; 62
    40e8:	0f be       	out	0x3f, r0	; 63
    40ea:	cd bf       	out	0x3d, r28	; 61
    40ec:	6a 01       	movw	r12, r20
    40ee:	7b 01       	movw	r14, r22
	PString str(latBuffer, sizeof(latBuffer));
    40f0:	2b e0       	ldi	r18, 0x0B	; 11
    40f2:	a2 2e       	mov	r10, r18
    40f4:	b1 2c       	mov	r11, r1
    40f6:	a8 0e       	add	r10, r24
    40f8:	b9 1e       	adc	r11, r25
    40fa:	1c 82       	std	Y+4, r1	; 0x04
    40fc:	1b 82       	std	Y+3, r1	; 0x03
  virtual size_t write(uint8_t);

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    40fe:	8c e0       	ldi	r24, 0x0C	; 12
    4100:	97 e0       	ldi	r25, 0x07	; 7
    4102:	9a 83       	std	Y+2, r25	; 0x02
    4104:	89 83       	std	Y+1, r24	; 0x01
    4106:	be 82       	std	Y+6, r11	; 0x06
    4108:	ad 82       	std	Y+5, r10	; 0x05
    410a:	88 e2       	ldi	r24, 0x28	; 40
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	9a 87       	std	Y+10, r25	; 0x0a
    4110:	89 87       	std	Y+9, r24	; 0x09
  { begin(); }
    4112:	8e 01       	movw	r16, r28
    4114:	0f 5f       	subi	r16, 0xFF	; 255
    4116:	1f 4f       	sbci	r17, 0xFF	; 255
    4118:	c8 01       	movw	r24, r16
    411a:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN7PString5beginEv>
	str.begin();
    411e:	c8 01       	movw	r24, r16
    4120:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN7PString5beginEv>
	if (lat >= 0.0) {
    4124:	c7 01       	movw	r24, r14
    4126:	b6 01       	movw	r22, r12
    4128:	20 e0       	ldi	r18, 0x00	; 0
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	a9 01       	movw	r20, r18
    412e:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <__gesf2>
    4132:	87 fd       	sbrc	r24, 7
    4134:	09 c0       	rjmp	.+18     	; 0x4148 <_ZN3Gps12getLatStringEfii+0x80>
		str.print("N");
    4136:	c8 01       	movw	r24, r16
    4138:	63 e3       	ldi	r22, 0x33	; 51
    413a:	75 e0       	ldi	r23, 0x05	; 5
    413c:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		str.print(lat,4);
    4140:	c8 01       	movw	r24, r16
    4142:	b7 01       	movw	r22, r14
    4144:	a6 01       	movw	r20, r12
    4146:	0f c0       	rjmp	.+30     	; 0x4166 <_ZN3Gps12getLatStringEfii+0x9e>
		str.print("    ");
	} else {
		str.print("S");
    4148:	c8 01       	movw	r24, r16
    414a:	6a e3       	ldi	r22, 0x3A	; 58
    414c:	75 e0       	ldi	r23, 0x05	; 5
    414e:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		float plusLat = 0 - lat;
    4152:	60 e0       	ldi	r22, 0x00	; 0
    4154:	70 e0       	ldi	r23, 0x00	; 0
    4156:	cb 01       	movw	r24, r22
    4158:	a7 01       	movw	r20, r14
    415a:	96 01       	movw	r18, r12
    415c:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    4160:	ab 01       	movw	r20, r22
    4162:	bc 01       	movw	r22, r24
		str.print(plusLat,4);
    4164:	c8 01       	movw	r24, r16
    4166:	24 e0       	ldi	r18, 0x04	; 4
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <_ZN5Print5printEdi>
		str.print("    ");
    416e:	c8 01       	movw	r24, r16
    4170:	65 e3       	ldi	r22, 0x35	; 53
    4172:	75 e0       	ldi	r23, 0x05	; 5
    4174:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	}
	//float absLat = abs(lat);
	//char * rslt = padFloat(absLat,decimals,padding);
	//str.print(rslt);
	return latBuffer;
}
    4178:	c5 01       	movw	r24, r10
    417a:	2a 96       	adiw	r28, 0x0a	; 10
    417c:	0f b6       	in	r0, 0x3f	; 63
    417e:	f8 94       	cli
    4180:	de bf       	out	0x3e, r29	; 62
    4182:	0f be       	out	0x3f, r0	; 63
    4184:	cd bf       	out	0x3d, r28	; 61
    4186:	cf 91       	pop	r28
    4188:	df 91       	pop	r29
    418a:	1f 91       	pop	r17
    418c:	0f 91       	pop	r16
    418e:	ff 90       	pop	r15
    4190:	ef 90       	pop	r14
    4192:	df 90       	pop	r13
    4194:	cf 90       	pop	r12
    4196:	bf 90       	pop	r11
    4198:	af 90       	pop	r10
    419a:	08 95       	ret

0000419c <_ZN3Gps12getLonStringEfii>:

char* Gps::getLonString(float lon, int decimals, int padding) {
    419c:	af 92       	push	r10
    419e:	bf 92       	push	r11
    41a0:	cf 92       	push	r12
    41a2:	df 92       	push	r13
    41a4:	ef 92       	push	r14
    41a6:	ff 92       	push	r15
    41a8:	0f 93       	push	r16
    41aa:	1f 93       	push	r17
    41ac:	df 93       	push	r29
    41ae:	cf 93       	push	r28
    41b0:	cd b7       	in	r28, 0x3d	; 61
    41b2:	de b7       	in	r29, 0x3e	; 62
    41b4:	2a 97       	sbiw	r28, 0x0a	; 10
    41b6:	0f b6       	in	r0, 0x3f	; 63
    41b8:	f8 94       	cli
    41ba:	de bf       	out	0x3e, r29	; 62
    41bc:	0f be       	out	0x3f, r0	; 63
    41be:	cd bf       	out	0x3d, r28	; 61
    41c0:	6a 01       	movw	r12, r20
    41c2:	7b 01       	movw	r14, r22
	PString str(lonBuffer, sizeof(lonBuffer));
    41c4:	33 e3       	ldi	r19, 0x33	; 51
    41c6:	a3 2e       	mov	r10, r19
    41c8:	b1 2c       	mov	r11, r1
    41ca:	a8 0e       	add	r10, r24
    41cc:	b9 1e       	adc	r11, r25
    41ce:	1c 82       	std	Y+4, r1	; 0x04
    41d0:	1b 82       	std	Y+3, r1	; 0x03
  virtual size_t write(uint8_t);

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    41d2:	8c e0       	ldi	r24, 0x0C	; 12
    41d4:	97 e0       	ldi	r25, 0x07	; 7
    41d6:	9a 83       	std	Y+2, r25	; 0x02
    41d8:	89 83       	std	Y+1, r24	; 0x01
    41da:	be 82       	std	Y+6, r11	; 0x06
    41dc:	ad 82       	std	Y+5, r10	; 0x05
    41de:	88 e2       	ldi	r24, 0x28	; 40
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	9a 87       	std	Y+10, r25	; 0x0a
    41e4:	89 87       	std	Y+9, r24	; 0x09
  { begin(); }
    41e6:	8e 01       	movw	r16, r28
    41e8:	0f 5f       	subi	r16, 0xFF	; 255
    41ea:	1f 4f       	sbci	r17, 0xFF	; 255
    41ec:	c8 01       	movw	r24, r16
    41ee:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN7PString5beginEv>
	str.begin();
    41f2:	c8 01       	movw	r24, r16
    41f4:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN7PString5beginEv>
	if (lon >= 0) {
    41f8:	c7 01       	movw	r24, r14
    41fa:	b6 01       	movw	r22, r12
    41fc:	20 e0       	ldi	r18, 0x00	; 0
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	a9 01       	movw	r20, r18
    4202:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <__gesf2>
    4206:	87 fd       	sbrc	r24, 7
    4208:	09 c0       	rjmp	.+18     	; 0x421c <_ZN3Gps12getLonStringEfii+0x80>
		str.print("E");
    420a:	c8 01       	movw	r24, r16
    420c:	6c e3       	ldi	r22, 0x3C	; 60
    420e:	75 e0       	ldi	r23, 0x05	; 5
    4210:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		str.print(lon,4);
    4214:	c8 01       	movw	r24, r16
    4216:	b7 01       	movw	r22, r14
    4218:	a6 01       	movw	r20, r12
    421a:	0f c0       	rjmp	.+30     	; 0x423a <_ZN3Gps12getLonStringEfii+0x9e>
		str.print("    ");
	} else {
		str.print("W");
    421c:	c8 01       	movw	r24, r16
    421e:	6e e3       	ldi	r22, 0x3E	; 62
    4220:	75 e0       	ldi	r23, 0x05	; 5
    4222:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		float plusLon = 0 - lon;
    4226:	60 e0       	ldi	r22, 0x00	; 0
    4228:	70 e0       	ldi	r23, 0x00	; 0
    422a:	cb 01       	movw	r24, r22
    422c:	a7 01       	movw	r20, r14
    422e:	96 01       	movw	r18, r12
    4230:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    4234:	ab 01       	movw	r20, r22
    4236:	bc 01       	movw	r22, r24
		str.print(plusLon,4);
    4238:	c8 01       	movw	r24, r16
    423a:	24 e0       	ldi	r18, 0x04	; 4
    423c:	30 e0       	ldi	r19, 0x00	; 0
    423e:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <_ZN5Print5printEdi>
		str.print("    ");
    4242:	c8 01       	movw	r24, r16
    4244:	65 e3       	ldi	r22, 0x35	; 53
    4246:	75 e0       	ldi	r23, 0x05	; 5
    4248:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	// float absLon = abs(lon);
	//char * rslt = padFloat(absLon,decimals,padding);
	//str.print(printFloat(abs(lon),decimals));

	return lonBuffer;
}
    424c:	c5 01       	movw	r24, r10
    424e:	2a 96       	adiw	r28, 0x0a	; 10
    4250:	0f b6       	in	r0, 0x3f	; 63
    4252:	f8 94       	cli
    4254:	de bf       	out	0x3e, r29	; 62
    4256:	0f be       	out	0x3f, r0	; 63
    4258:	cd bf       	out	0x3d, r28	; 61
    425a:	cf 91       	pop	r28
    425c:	df 91       	pop	r29
    425e:	1f 91       	pop	r17
    4260:	0f 91       	pop	r16
    4262:	ff 90       	pop	r15
    4264:	ef 90       	pop	r14
    4266:	df 90       	pop	r13
    4268:	cf 90       	pop	r12
    426a:	bf 90       	pop	r11
    426c:	af 90       	pop	r10
    426e:	08 95       	ret

00004270 <_ZN3LcdD1Ev>:
 *      Author: robert
 */

#include "Lcd.h"

Lcd:: ~Lcd(){
    4270:	24 e2       	ldi	r18, 0x24	; 36
    4272:	37 e0       	ldi	r19, 0x07	; 7
    4274:	fc 01       	movw	r30, r24
    4276:	31 83       	std	Z+1, r19	; 0x01
    4278:	20 83       	st	Z, r18
    427a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_ZN14SoftwareSerialD1Ev>

}
    427e:	08 95       	ret

00004280 <_ZN3Lcd12setBacklightEi>:
	this->lastScreenUpdate = lastScreenUpdate;
}

/* Routines to write to lcd*/

void Lcd::setBacklight(int dutyCycle) {
    4280:	ef 92       	push	r14
    4282:	ff 92       	push	r15
    4284:	1f 93       	push	r17
    4286:	cf 93       	push	r28
    4288:	df 93       	push	r29
    428a:	ec 01       	movw	r28, r24
    428c:	16 2f       	mov	r17, r22
	write(0x7C);
    428e:	e8 81       	ld	r30, Y
    4290:	f9 81       	ldd	r31, Y+1	; 0x01
    4292:	01 90       	ld	r0, Z+
    4294:	f0 81       	ld	r31, Z
    4296:	e0 2d       	mov	r30, r0
    4298:	7e 01       	movw	r14, r28
    429a:	9f 2d       	mov	r25, r15
    429c:	6c e7       	ldi	r22, 0x7C	; 124
    429e:	09 95       	icall
	write(0x02);
    42a0:	e8 81       	ld	r30, Y
    42a2:	f9 81       	ldd	r31, Y+1	; 0x01
    42a4:	01 90       	ld	r0, Z+
    42a6:	f0 81       	ld	r31, Z
    42a8:	e0 2d       	mov	r30, r0
    42aa:	ce 01       	movw	r24, r28
    42ac:	62 e0       	ldi	r22, 0x02	; 2
    42ae:	09 95       	icall
	write(dutyCycle);
    42b0:	e8 81       	ld	r30, Y
    42b2:	f9 81       	ldd	r31, Y+1	; 0x01
    42b4:	01 90       	ld	r0, Z+
    42b6:	f0 81       	ld	r31, Z
    42b8:	e0 2d       	mov	r30, r0
    42ba:	ce 01       	movw	r24, r28
    42bc:	61 2f       	mov	r22, r17
    42be:	09 95       	icall
	write((byte)0x00);
    42c0:	e8 81       	ld	r30, Y
    42c2:	f9 81       	ldd	r31, Y+1	; 0x01
    42c4:	01 90       	ld	r0, Z+
    42c6:	f0 81       	ld	r31, Z
    42c8:	e0 2d       	mov	r30, r0
    42ca:	ce 01       	movw	r24, r28
    42cc:	60 e0       	ldi	r22, 0x00	; 0
    42ce:	09 95       	icall
	flush();
    42d0:	e8 81       	ld	r30, Y
    42d2:	f9 81       	ldd	r31, Y+1	; 0x01
    42d4:	02 84       	ldd	r0, Z+10	; 0x0a
    42d6:	f3 85       	ldd	r31, Z+11	; 0x0b
    42d8:	e0 2d       	mov	r30, r0
    42da:	ce 01       	movw	r24, r28
    42dc:	09 95       	icall
	delay(50);
    42de:	62 e3       	ldi	r22, 0x32	; 50
    42e0:	70 e0       	ldi	r23, 0x00	; 0
    42e2:	80 e0       	ldi	r24, 0x00	; 0
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	0e 94 79 42 	call	0x84f2	; 0x84f2 <delay>
}
    42ea:	df 91       	pop	r29
    42ec:	cf 91       	pop	r28
    42ee:	1f 91       	pop	r17
    42f0:	ff 90       	pop	r15
    42f2:	ef 90       	pop	r14
    42f4:	08 95       	ret

000042f6 <_ZN3Lcd9setCursorEii>:
	delay(2000);

}

/* Text offsets measured in pixels from the bottom left. The x,y point defines the upper left of the character cell*/
void Lcd::setCursor(int x, int y) {
    42f6:	cf 92       	push	r12
    42f8:	df 92       	push	r13
    42fa:	ef 92       	push	r14
    42fc:	ff 92       	push	r15
    42fe:	1f 93       	push	r17
    4300:	df 93       	push	r29
    4302:	cf 93       	push	r28
    4304:	0f 92       	push	r0
    4306:	cd b7       	in	r28, 0x3d	; 61
    4308:	de b7       	in	r29, 0x3e	; 62
    430a:	6c 01       	movw	r12, r24
    430c:	16 2f       	mov	r17, r22
	//delay(5);
	//x_offset
	write(0x7C);
    430e:	dc 01       	movw	r26, r24
    4310:	ed 91       	ld	r30, X+
    4312:	fc 91       	ld	r31, X
    4314:	01 90       	ld	r0, Z+
    4316:	f0 81       	ld	r31, Z
    4318:	e0 2d       	mov	r30, r0
    431a:	6c e7       	ldi	r22, 0x7C	; 124
    431c:	49 83       	std	Y+1, r20	; 0x01
    431e:	09 95       	icall
	write(0x18);
    4320:	d6 01       	movw	r26, r12
    4322:	ed 91       	ld	r30, X+
    4324:	fc 91       	ld	r31, X
    4326:	01 90       	ld	r0, Z+
    4328:	f0 81       	ld	r31, Z
    432a:	e0 2d       	mov	r30, r0
    432c:	c6 01       	movw	r24, r12
    432e:	68 e1       	ldi	r22, 0x18	; 24
    4330:	09 95       	icall
	write(x);
    4332:	d6 01       	movw	r26, r12
    4334:	ed 91       	ld	r30, X+
    4336:	fc 91       	ld	r31, X
    4338:	01 90       	ld	r0, Z+
    433a:	f0 81       	ld	r31, Z
    433c:	e0 2d       	mov	r30, r0
    433e:	c6 01       	movw	r24, r12
    4340:	61 2f       	mov	r22, r17
    4342:	09 95       	icall
	//write((byte)0x00);
	flush();
    4344:	d6 01       	movw	r26, r12
    4346:	ed 91       	ld	r30, X+
    4348:	fc 91       	ld	r31, X
    434a:	02 84       	ldd	r0, Z+10	; 0x0a
    434c:	f3 85       	ldd	r31, Z+11	; 0x0b
    434e:	e0 2d       	mov	r30, r0
    4350:	c6 01       	movw	r24, r12
    4352:	09 95       	icall
	delay(100);
    4354:	64 e6       	ldi	r22, 0x64	; 100
    4356:	70 e0       	ldi	r23, 0x00	; 0
    4358:	80 e0       	ldi	r24, 0x00	; 0
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	0e 94 79 42 	call	0x84f2	; 0x84f2 <delay>
	//y_offset
	write(0x7C);
    4360:	d6 01       	movw	r26, r12
    4362:	ed 91       	ld	r30, X+
    4364:	fc 91       	ld	r31, X
    4366:	01 90       	ld	r0, Z+
    4368:	f0 81       	ld	r31, Z
    436a:	e0 2d       	mov	r30, r0
    436c:	c6 01       	movw	r24, r12
    436e:	6c e7       	ldi	r22, 0x7C	; 124
    4370:	09 95       	icall
	write(0x19);
    4372:	d6 01       	movw	r26, r12
    4374:	ed 91       	ld	r30, X+
    4376:	fc 91       	ld	r31, X
    4378:	01 90       	ld	r0, Z+
    437a:	f0 81       	ld	r31, Z
    437c:	e0 2d       	mov	r30, r0
    437e:	c6 01       	movw	r24, r12
    4380:	69 e1       	ldi	r22, 0x19	; 25
    4382:	09 95       	icall
	write(y);
    4384:	d6 01       	movw	r26, r12
    4386:	ed 91       	ld	r30, X+
    4388:	fc 91       	ld	r31, X
    438a:	01 90       	ld	r0, Z+
    438c:	f0 81       	ld	r31, Z
    438e:	e0 2d       	mov	r30, r0
    4390:	c6 01       	movw	r24, r12
    4392:	49 81       	ldd	r20, Y+1	; 0x01
    4394:	64 2f       	mov	r22, r20
    4396:	09 95       	icall
	//write((byte)0x00);
	flush();
    4398:	d6 01       	movw	r26, r12
    439a:	ed 91       	ld	r30, X+
    439c:	fc 91       	ld	r31, X
    439e:	02 84       	ldd	r0, Z+10	; 0x0a
    43a0:	f3 85       	ldd	r31, Z+11	; 0x0b
    43a2:	e0 2d       	mov	r30, r0
    43a4:	c6 01       	movw	r24, r12
    43a6:	09 95       	icall
	delay(100);
    43a8:	64 e6       	ldi	r22, 0x64	; 100
    43aa:	70 e0       	ldi	r23, 0x00	; 0
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	0e 94 79 42 	call	0x84f2	; 0x84f2 <delay>


}
    43b4:	0f 90       	pop	r0
    43b6:	cf 91       	pop	r28
    43b8:	df 91       	pop	r29
    43ba:	1f 91       	pop	r17
    43bc:	ff 90       	pop	r15
    43be:	ef 90       	pop	r14
    43c0:	df 90       	pop	r13
    43c2:	cf 90       	pop	r12
    43c4:	08 95       	ret

000043c6 <_ZN3Lcd8clearLcdEv>:
	delay(50);
}



void Lcd::clearLcd() {
    43c6:	ef 92       	push	r14
    43c8:	ff 92       	push	r15
    43ca:	cf 93       	push	r28
    43cc:	df 93       	push	r29
    43ce:	ec 01       	movw	r28, r24
	write(0x7C);
    43d0:	e8 81       	ld	r30, Y
    43d2:	f9 81       	ldd	r31, Y+1	; 0x01
    43d4:	01 90       	ld	r0, Z+
    43d6:	f0 81       	ld	r31, Z
    43d8:	e0 2d       	mov	r30, r0
    43da:	7e 01       	movw	r14, r28
    43dc:	9f 2d       	mov	r25, r15
    43de:	6c e7       	ldi	r22, 0x7C	; 124
    43e0:	09 95       	icall
	write((byte)0x00);
    43e2:	e8 81       	ld	r30, Y
    43e4:	f9 81       	ldd	r31, Y+1	; 0x01
    43e6:	01 90       	ld	r0, Z+
    43e8:	f0 81       	ld	r31, Z
    43ea:	e0 2d       	mov	r30, r0
    43ec:	ce 01       	movw	r24, r28
    43ee:	60 e0       	ldi	r22, 0x00	; 0
    43f0:	09 95       	icall
	//writeButtonLabels();
	setCursor(0, 0);
    43f2:	ce 01       	movw	r24, r28
    43f4:	60 e0       	ldi	r22, 0x00	; 0
    43f6:	70 e0       	ldi	r23, 0x00	; 0
    43f8:	40 e0       	ldi	r20, 0x00	; 0
    43fa:	50 e0       	ldi	r21, 0x00	; 0
    43fc:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
	lastScreenUpdate=0;
    4400:	1c 8e       	std	Y+28, r1	; 0x1c
    4402:	1d 8e       	std	Y+29, r1	; 0x1d
    4404:	1e 8e       	std	Y+30, r1	; 0x1e
    4406:	1f 8e       	std	Y+31, r1	; 0x1f
	flush();
    4408:	e8 81       	ld	r30, Y
    440a:	f9 81       	ldd	r31, Y+1	; 0x01
    440c:	02 84       	ldd	r0, Z+10	; 0x0a
    440e:	f3 85       	ldd	r31, Z+11	; 0x0b
    4410:	e0 2d       	mov	r30, r0
    4412:	ce 01       	movw	r24, r28
    4414:	09 95       	icall
	delay(50);
    4416:	62 e3       	ldi	r22, 0x32	; 50
    4418:	70 e0       	ldi	r23, 0x00	; 0
    441a:	80 e0       	ldi	r24, 0x00	; 0
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	0e 94 79 42 	call	0x84f2	; 0x84f2 <delay>
}
    4422:	df 91       	pop	r29
    4424:	cf 91       	pop	r28
    4426:	ff 90       	pop	r15
    4428:	ef 90       	pop	r14
    442a:	08 95       	ret

0000442c <_ZN3Lcd8setupLcdEv>:

void Lcd::setupLcd() {
    442c:	ef 92       	push	r14
    442e:	ff 92       	push	r15
    4430:	0f 93       	push	r16
    4432:	1f 93       	push	r17
    4434:	cf 93       	push	r28
    4436:	df 93       	push	r29
    4438:	ec 01       	movw	r28, r24
	lastScreenUpdate=0;
    443a:	1c 8e       	std	Y+28, r1	; 0x1c
    443c:	1d 8e       	std	Y+29, r1	; 0x1d
    443e:	1e 8e       	std	Y+30, r1	; 0x1e
    4440:	1f 8e       	std	Y+31, r1	; 0x1f
	Serial.println("Lcd reset..");
    4442:	07 e2       	ldi	r16, 0x27	; 39
    4444:	1e e0       	ldi	r17, 0x0E	; 14
    4446:	c8 01       	movw	r24, r16
    4448:	6f e9       	ldi	r22, 0x9F	; 159
    444a:	75 e0       	ldi	r23, 0x05	; 5
    444c:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	begin(115200);
    4450:	ce 01       	movw	r24, r28
    4452:	40 e0       	ldi	r20, 0x00	; 0
    4454:	52 ec       	ldi	r21, 0xC2	; 194
    4456:	61 e0       	ldi	r22, 0x01	; 1
    4458:	70 e0       	ldi	r23, 0x00	; 0
    445a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN14SoftwareSerial5beginEl>
	print("x");
    445e:	ce 01       	movw	r24, r28
    4460:	6b ea       	ldi	r22, 0xAB	; 171
    4462:	75 e0       	ldi	r23, 0x05	; 5
    4464:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	flush();
    4468:	e8 81       	ld	r30, Y
    446a:	f9 81       	ldd	r31, Y+1	; 0x01
    446c:	02 84       	ldd	r0, Z+10	; 0x0a
    446e:	f3 85       	ldd	r31, Z+11	; 0x0b
    4470:	e0 2d       	mov	r30, r0
    4472:	ce 01       	movw	r24, r28
    4474:	09 95       	icall

	delay(2000);
    4476:	60 ed       	ldi	r22, 0xD0	; 208
    4478:	77 e0       	ldi	r23, 0x07	; 7
    447a:	80 e0       	ldi	r24, 0x00	; 0
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	0e 94 79 42 	call	0x84f2	; 0x84f2 <delay>
	Serial.println("Lcd set baud 19200..");
    4482:	c8 01       	movw	r24, r16
    4484:	6d ea       	ldi	r22, 0xAD	; 173
    4486:	75 e0       	ldi	r23, 0x05	; 5
    4488:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	write(0x7C);
    448c:	e8 81       	ld	r30, Y
    448e:	f9 81       	ldd	r31, Y+1	; 0x01
    4490:	01 90       	ld	r0, Z+
    4492:	f0 81       	ld	r31, Z
    4494:	e0 2d       	mov	r30, r0
    4496:	ce 01       	movw	r24, r28
    4498:	6c e7       	ldi	r22, 0x7C	; 124
    449a:	09 95       	icall
	write(0x07);
    449c:	e8 81       	ld	r30, Y
    449e:	f9 81       	ldd	r31, Y+1	; 0x01
    44a0:	01 90       	ld	r0, Z+
    44a2:	f0 81       	ld	r31, Z
    44a4:	e0 2d       	mov	r30, r0
    44a6:	ce 01       	movw	r24, r28
    44a8:	67 e0       	ldi	r22, 0x07	; 7
    44aa:	09 95       	icall
	write(0x33);//19200
    44ac:	e8 81       	ld	r30, Y
    44ae:	f9 81       	ldd	r31, Y+1	; 0x01
    44b0:	01 90       	ld	r0, Z+
    44b2:	f0 81       	ld	r31, Z
    44b4:	e0 2d       	mov	r30, r0
    44b6:	ce 01       	movw	r24, r28
    44b8:	63 e3       	ldi	r22, 0x33	; 51
    44ba:	09 95       	icall
	//write(0x34);//38400
	flush();
    44bc:	e8 81       	ld	r30, Y
    44be:	f9 81       	ldd	r31, Y+1	; 0x01
    44c0:	02 84       	ldd	r0, Z+10	; 0x0a
    44c2:	f3 85       	ldd	r31, Z+11	; 0x0b
    44c4:	e0 2d       	mov	r30, r0
    44c6:	ce 01       	movw	r24, r28
    44c8:	09 95       	icall
	delay(1000);
    44ca:	68 ee       	ldi	r22, 0xE8	; 232
    44cc:	73 e0       	ldi	r23, 0x03	; 3
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	0e 94 79 42 	call	0x84f2	; 0x84f2 <delay>
	begin(19200);
    44d6:	ce 01       	movw	r24, r28
    44d8:	40 e0       	ldi	r20, 0x00	; 0
    44da:	5b e4       	ldi	r21, 0x4B	; 75
    44dc:	60 e0       	ldi	r22, 0x00	; 0
    44de:	70 e0       	ldi	r23, 0x00	; 0
    44e0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN14SoftwareSerial5beginEl>
	//set reverse off
	// print(0x7C);
	// print(0x12);
	clearLcd();
    44e4:	ce 01       	movw	r24, r28
    44e6:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <_ZN3Lcd8clearLcdEv>
	setBacklight(0);
    44ea:	ce 01       	movw	r24, r28
    44ec:	60 e0       	ldi	r22, 0x00	; 0
    44ee:	70 e0       	ldi	r23, 0x00	; 0
    44f0:	0e 94 40 21 	call	0x4280	; 0x4280 <_ZN3Lcd12setBacklightEi>

	//run demo
	//print(0x7C,BYTE); // cmd
	//print(0x04,BYTE); // demo

	setCursor(20, 50);
    44f4:	ce 01       	movw	r24, r28
    44f6:	64 e1       	ldi	r22, 0x14	; 20
    44f8:	70 e0       	ldi	r23, 0x00	; 0
    44fa:	42 e3       	ldi	r20, 0x32	; 50
    44fc:	50 e0       	ldi	r21, 0x00	; 0
    44fe:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
	print("FreeBoard");
    4502:	ce 01       	movw	r24, r28
    4504:	62 ec       	ldi	r22, 0xC2	; 194
    4506:	75 e0       	ldi	r23, 0x05	; 5
    4508:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	setCursor(10, 40);
    450c:	ce 01       	movw	r24, r28
    450e:	6a e0       	ldi	r22, 0x0A	; 10
    4510:	70 e0       	ldi	r23, 0x00	; 0
    4512:	48 e2       	ldi	r20, 0x28	; 40
    4514:	50 e0       	ldi	r21, 0x00	; 0
    4516:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
	print("Copyright RTH 2012");
    451a:	ce 01       	movw	r24, r28
    451c:	6c ec       	ldi	r22, 0xCC	; 204
    451e:	75 e0       	ldi	r23, 0x05	; 5
    4520:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	setCursor(10, 30);
    4524:	ce 01       	movw	r24, r28
    4526:	6a e0       	ldi	r22, 0x0A	; 10
    4528:	70 e0       	ldi	r23, 0x00	; 0
    452a:	4e e1       	ldi	r20, 0x1E	; 30
    452c:	50 e0       	ldi	r21, 0x00	; 0
    452e:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
	print("Init-please wait..");
    4532:	ce 01       	movw	r24, r28
    4534:	6f ed       	ldi	r22, 0xDF	; 223
    4536:	75 e0       	ldi	r23, 0x05	; 5
    4538:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	delay(2000);
    453c:	60 ed       	ldi	r22, 0xD0	; 208
    453e:	77 e0       	ldi	r23, 0x07	; 7
    4540:	80 e0       	ldi	r24, 0x00	; 0
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	0e 94 79 42 	call	0x84f2	; 0x84f2 <delay>

}
    4548:	df 91       	pop	r29
    454a:	cf 91       	pop	r28
    454c:	1f 91       	pop	r17
    454e:	0f 91       	pop	r16
    4550:	ff 90       	pop	r15
    4552:	ef 90       	pop	r14
    4554:	08 95       	ret

00004556 <_ZN3Lcd7drawBoxEiiii>:


}

/*Draw a box from lower lx,ly to upper ux,uy*/
void Lcd::drawBox(int lx, int ly, int ux, int uy) {
    4556:	cf 92       	push	r12
    4558:	df 92       	push	r13
    455a:	ef 92       	push	r14
    455c:	ff 92       	push	r15
    455e:	0f 93       	push	r16
    4560:	1f 93       	push	r17
    4562:	df 93       	push	r29
    4564:	cf 93       	push	r28
    4566:	00 d0       	rcall	.+0      	; 0x4568 <_ZN3Lcd7drawBoxEiiii+0x12>
    4568:	cd b7       	in	r28, 0x3d	; 61
    456a:	de b7       	in	r29, 0x3e	; 62
    456c:	6c 01       	movw	r12, r24
    456e:	16 2f       	mov	r17, r22
	write(0x7C);
    4570:	dc 01       	movw	r26, r24
    4572:	ed 91       	ld	r30, X+
    4574:	fc 91       	ld	r31, X
    4576:	01 90       	ld	r0, Z+
    4578:	f0 81       	ld	r31, Z
    457a:	e0 2d       	mov	r30, r0
    457c:	6c e7       	ldi	r22, 0x7C	; 124
    457e:	2a 83       	std	Y+2, r18	; 0x02
    4580:	49 83       	std	Y+1, r20	; 0x01
    4582:	09 95       	icall
	write(0x0F);
    4584:	d6 01       	movw	r26, r12
    4586:	ed 91       	ld	r30, X+
    4588:	fc 91       	ld	r31, X
    458a:	01 90       	ld	r0, Z+
    458c:	f0 81       	ld	r31, Z
    458e:	e0 2d       	mov	r30, r0
    4590:	c6 01       	movw	r24, r12
    4592:	6f e0       	ldi	r22, 0x0F	; 15
    4594:	09 95       	icall
	write(lx);
    4596:	d6 01       	movw	r26, r12
    4598:	ed 91       	ld	r30, X+
    459a:	fc 91       	ld	r31, X
    459c:	01 90       	ld	r0, Z+
    459e:	f0 81       	ld	r31, Z
    45a0:	e0 2d       	mov	r30, r0
    45a2:	c6 01       	movw	r24, r12
    45a4:	61 2f       	mov	r22, r17
    45a6:	09 95       	icall
	write(ly);
    45a8:	d6 01       	movw	r26, r12
    45aa:	ed 91       	ld	r30, X+
    45ac:	fc 91       	ld	r31, X
    45ae:	01 90       	ld	r0, Z+
    45b0:	f0 81       	ld	r31, Z
    45b2:	e0 2d       	mov	r30, r0
    45b4:	c6 01       	movw	r24, r12
    45b6:	49 81       	ldd	r20, Y+1	; 0x01
    45b8:	64 2f       	mov	r22, r20
    45ba:	09 95       	icall
	write(ux);
    45bc:	d6 01       	movw	r26, r12
    45be:	ed 91       	ld	r30, X+
    45c0:	fc 91       	ld	r31, X
    45c2:	01 90       	ld	r0, Z+
    45c4:	f0 81       	ld	r31, Z
    45c6:	e0 2d       	mov	r30, r0
    45c8:	c6 01       	movw	r24, r12
    45ca:	2a 81       	ldd	r18, Y+2	; 0x02
    45cc:	62 2f       	mov	r22, r18
    45ce:	09 95       	icall
	write(uy);
    45d0:	d6 01       	movw	r26, r12
    45d2:	ed 91       	ld	r30, X+
    45d4:	fc 91       	ld	r31, X
    45d6:	01 90       	ld	r0, Z+
    45d8:	f0 81       	ld	r31, Z
    45da:	e0 2d       	mov	r30, r0
    45dc:	c6 01       	movw	r24, r12
    45de:	60 2f       	mov	r22, r16
    45e0:	09 95       	icall
	flush();
    45e2:	d6 01       	movw	r26, r12
    45e4:	ed 91       	ld	r30, X+
    45e6:	fc 91       	ld	r31, X
    45e8:	02 84       	ldd	r0, Z+10	; 0x0a
    45ea:	f3 85       	ldd	r31, Z+11	; 0x0b
    45ec:	e0 2d       	mov	r30, r0
    45ee:	c6 01       	movw	r24, r12
    45f0:	09 95       	icall
	delay(50);
    45f2:	62 e3       	ldi	r22, 0x32	; 50
    45f4:	70 e0       	ldi	r23, 0x00	; 0
    45f6:	80 e0       	ldi	r24, 0x00	; 0
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	0e 94 79 42 	call	0x84f2	; 0x84f2 <delay>
}
    45fe:	0f 90       	pop	r0
    4600:	0f 90       	pop	r0
    4602:	cf 91       	pop	r28
    4604:	df 91       	pop	r29
    4606:	1f 91       	pop	r17
    4608:	0f 91       	pop	r16
    460a:	ff 90       	pop	r15
    460c:	ef 90       	pop	r14
    460e:	df 90       	pop	r13
    4610:	cf 90       	pop	r12
    4612:	08 95       	ret

00004614 <_ZN3Lcd8eraseBoxEiiii>:
/*Erase a box from lower lx,ly to upper ux,uy*/
void Lcd::eraseBox(int lx, int ly, int ux, int uy) {
    4614:	cf 92       	push	r12
    4616:	df 92       	push	r13
    4618:	ef 92       	push	r14
    461a:	ff 92       	push	r15
    461c:	0f 93       	push	r16
    461e:	1f 93       	push	r17
    4620:	df 93       	push	r29
    4622:	cf 93       	push	r28
    4624:	00 d0       	rcall	.+0      	; 0x4626 <_ZN3Lcd8eraseBoxEiiii+0x12>
    4626:	cd b7       	in	r28, 0x3d	; 61
    4628:	de b7       	in	r29, 0x3e	; 62
    462a:	6c 01       	movw	r12, r24
    462c:	16 2f       	mov	r17, r22
	write(0x7C);
    462e:	dc 01       	movw	r26, r24
    4630:	ed 91       	ld	r30, X+
    4632:	fc 91       	ld	r31, X
    4634:	01 90       	ld	r0, Z+
    4636:	f0 81       	ld	r31, Z
    4638:	e0 2d       	mov	r30, r0
    463a:	6c e7       	ldi	r22, 0x7C	; 124
    463c:	2a 83       	std	Y+2, r18	; 0x02
    463e:	49 83       	std	Y+1, r20	; 0x01
    4640:	09 95       	icall
	write(0x05);
    4642:	d6 01       	movw	r26, r12
    4644:	ed 91       	ld	r30, X+
    4646:	fc 91       	ld	r31, X
    4648:	01 90       	ld	r0, Z+
    464a:	f0 81       	ld	r31, Z
    464c:	e0 2d       	mov	r30, r0
    464e:	c6 01       	movw	r24, r12
    4650:	65 e0       	ldi	r22, 0x05	; 5
    4652:	09 95       	icall
	write(lx);
    4654:	d6 01       	movw	r26, r12
    4656:	ed 91       	ld	r30, X+
    4658:	fc 91       	ld	r31, X
    465a:	01 90       	ld	r0, Z+
    465c:	f0 81       	ld	r31, Z
    465e:	e0 2d       	mov	r30, r0
    4660:	c6 01       	movw	r24, r12
    4662:	61 2f       	mov	r22, r17
    4664:	09 95       	icall
	write(ly);
    4666:	d6 01       	movw	r26, r12
    4668:	ed 91       	ld	r30, X+
    466a:	fc 91       	ld	r31, X
    466c:	01 90       	ld	r0, Z+
    466e:	f0 81       	ld	r31, Z
    4670:	e0 2d       	mov	r30, r0
    4672:	c6 01       	movw	r24, r12
    4674:	49 81       	ldd	r20, Y+1	; 0x01
    4676:	64 2f       	mov	r22, r20
    4678:	09 95       	icall
	write(ux);
    467a:	d6 01       	movw	r26, r12
    467c:	ed 91       	ld	r30, X+
    467e:	fc 91       	ld	r31, X
    4680:	01 90       	ld	r0, Z+
    4682:	f0 81       	ld	r31, Z
    4684:	e0 2d       	mov	r30, r0
    4686:	c6 01       	movw	r24, r12
    4688:	2a 81       	ldd	r18, Y+2	; 0x02
    468a:	62 2f       	mov	r22, r18
    468c:	09 95       	icall
	write(uy);
    468e:	d6 01       	movw	r26, r12
    4690:	ed 91       	ld	r30, X+
    4692:	fc 91       	ld	r31, X
    4694:	01 90       	ld	r0, Z+
    4696:	f0 81       	ld	r31, Z
    4698:	e0 2d       	mov	r30, r0
    469a:	c6 01       	movw	r24, r12
    469c:	60 2f       	mov	r22, r16
    469e:	09 95       	icall
	flush();
    46a0:	d6 01       	movw	r26, r12
    46a2:	ed 91       	ld	r30, X+
    46a4:	fc 91       	ld	r31, X
    46a6:	02 84       	ldd	r0, Z+10	; 0x0a
    46a8:	f3 85       	ldd	r31, Z+11	; 0x0b
    46aa:	e0 2d       	mov	r30, r0
    46ac:	c6 01       	movw	r24, r12
    46ae:	09 95       	icall
	delay(50);
    46b0:	62 e3       	ldi	r22, 0x32	; 50
    46b2:	70 e0       	ldi	r23, 0x00	; 0
    46b4:	80 e0       	ldi	r24, 0x00	; 0
    46b6:	90 e0       	ldi	r25, 0x00	; 0
    46b8:	0e 94 79 42 	call	0x84f2	; 0x84f2 <delay>
}
    46bc:	0f 90       	pop	r0
    46be:	0f 90       	pop	r0
    46c0:	cf 91       	pop	r28
    46c2:	df 91       	pop	r29
    46c4:	1f 91       	pop	r17
    46c6:	0f 91       	pop	r16
    46c8:	ff 90       	pop	r15
    46ca:	ef 90       	pop	r14
    46cc:	df 90       	pop	r13
    46ce:	cf 90       	pop	r12
    46d0:	08 95       	ret

000046d2 <_ZN3Lcd17writeButtonLabelsEPcS0_S0_>:
	write(uy);
	flush();
	delay(50);
}

void Lcd::writeButtonLabels(char* b0, char* b1, char* b2) {
    46d2:	af 92       	push	r10
    46d4:	bf 92       	push	r11
    46d6:	cf 92       	push	r12
    46d8:	df 92       	push	r13
    46da:	ef 92       	push	r14
    46dc:	ff 92       	push	r15
    46de:	0f 93       	push	r16
    46e0:	1f 93       	push	r17
    46e2:	cf 93       	push	r28
    46e4:	df 93       	push	r29
    46e6:	ec 01       	movw	r28, r24
    46e8:	7b 01       	movw	r14, r22
    46ea:	6a 01       	movw	r12, r20
    46ec:	89 01       	movw	r16, r18
	 setCursor(0,10);
    46ee:	60 e0       	ldi	r22, 0x00	; 0
    46f0:	70 e0       	ldi	r23, 0x00	; 0
    46f2:	4a e0       	ldi	r20, 0x0A	; 10
    46f4:	50 e0       	ldi	r21, 0x00	; 0
    46f6:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
	 print(b0);
    46fa:	ce 01       	movw	r24, r28
    46fc:	b7 01       	movw	r22, r14
    46fe:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	 setCursor(50,10);
    4702:	ce 01       	movw	r24, r28
    4704:	62 e3       	ldi	r22, 0x32	; 50
    4706:	70 e0       	ldi	r23, 0x00	; 0
    4708:	4a e0       	ldi	r20, 0x0A	; 10
    470a:	50 e0       	ldi	r21, 0x00	; 0
    470c:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
	 print(b1);
    4710:	ce 01       	movw	r24, r28
    4712:	b6 01       	movw	r22, r12
    4714:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	 setCursor(90,10);
    4718:	ce 01       	movw	r24, r28
    471a:	6a e5       	ldi	r22, 0x5A	; 90
    471c:	70 e0       	ldi	r23, 0x00	; 0
    471e:	4a e0       	ldi	r20, 0x0A	; 10
    4720:	50 e0       	ldi	r21, 0x00	; 0
    4722:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
	 print(b2);
    4726:	ce 01       	movw	r24, r28
    4728:	b8 01       	movw	r22, r16
    472a:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	 flush();
    472e:	e8 81       	ld	r30, Y
    4730:	f9 81       	ldd	r31, Y+1	; 0x01
    4732:	02 84       	ldd	r0, Z+10	; 0x0a
    4734:	f3 85       	ldd	r31, Z+11	; 0x0b
    4736:	e0 2d       	mov	r30, r0
    4738:	ce 01       	movw	r24, r28
    473a:	09 95       	icall
	 delay(50);
    473c:	62 e3       	ldi	r22, 0x32	; 50
    473e:	70 e0       	ldi	r23, 0x00	; 0
    4740:	80 e0       	ldi	r24, 0x00	; 0
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	0e 94 79 42 	call	0x84f2	; 0x84f2 <delay>

}
    4748:	df 91       	pop	r29
    474a:	cf 91       	pop	r28
    474c:	1f 91       	pop	r17
    474e:	0f 91       	pop	r16
    4750:	ff 90       	pop	r15
    4752:	ef 90       	pop	r14
    4754:	df 90       	pop	r13
    4756:	cf 90       	pop	r12
    4758:	bf 90       	pop	r11
    475a:	af 90       	pop	r10
    475c:	08 95       	ret

0000475e <_ZN4MenuD1Ev>:
	this->lastButtonCheck = 0;
	this->menuState = GPS; //default, show gps data
	this->menuLevel = 0; //main menu
}

Menu::~Menu() {
    475e:	26 e4       	ldi	r18, 0x46	; 70
    4760:	37 e0       	ldi	r19, 0x07	; 7
    4762:	fc 01       	movw	r30, r24
    4764:	31 83       	std	Z+1, r19	; 0x01
    4766:	20 83       	st	Z, r18
	// TODO Auto-generated destructor stub
}
    4768:	08 95       	ret

0000476a <_ZN4MenuD0Ev>:
	this->lastButtonCheck = 0;
	this->menuState = GPS; //default, show gps data
	this->menuLevel = 0; //main menu
}

Menu::~Menu() {
    476a:	26 e4       	ldi	r18, 0x46	; 70
    476c:	37 e0       	ldi	r19, 0x07	; 7
    476e:	fc 01       	movw	r30, r24
    4770:	31 83       	std	Z+1, r19	; 0x01
    4772:	20 83       	st	Z, r18
	// TODO Auto-generated destructor stub
}
    4774:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <_ZdlPv>
    4778:	08 95       	ret

0000477a <_ZN4MenuC1EP3LcdP5AlarmP6AnchorP4WindP7Seatalk>:

#include "Menu.h"



Menu::Menu(Lcd* lcd, Alarm* alarm, Anchor* anchor, Wind* wind, Seatalk* seatalk) {
    477a:	ef 92       	push	r14
    477c:	ff 92       	push	r15
    477e:	0f 93       	push	r16
    4780:	1f 93       	push	r17
    4782:	fc 01       	movw	r30, r24
    4784:	86 e4       	ldi	r24, 0x46	; 70
    4786:	97 e0       	ldi	r25, 0x07	; 7
    4788:	91 83       	std	Z+1, r25	; 0x01
    478a:	80 83       	st	Z, r24
	this->lcd = lcd;
    478c:	77 87       	std	Z+15, r23	; 0x0f
    478e:	66 87       	std	Z+14, r22	; 0x0e
	this->alarm=alarm;
    4790:	51 8b       	std	Z+17, r21	; 0x11
    4792:	40 8b       	std	Z+16, r20	; 0x10
	this->anchor=anchor;
    4794:	33 8b       	std	Z+19, r19	; 0x13
    4796:	22 8b       	std	Z+18, r18	; 0x12
	this->wind=wind;
    4798:	15 8b       	std	Z+21, r17	; 0x15
    479a:	04 8b       	std	Z+20, r16	; 0x14
	this->seatalk=seatalk;
    479c:	f7 8a       	std	Z+23, r15	; 0x17
    479e:	e6 8a       	std	Z+22, r14	; 0x16

	this->button0Bouncer = LOW; //anchorPoint
    47a0:	12 82       	std	Z+2, r1	; 0x02
	this->button1Bouncer = LOW; //radius
    47a2:	13 82       	std	Z+3, r1	; 0x03
	this->button2Bouncer = LOW; //toggle alarm
    47a4:	14 82       	std	Z+4, r1	; 0x04
	this->button3Bouncer = LOW; //remote alarm
    47a6:	15 82       	std	Z+5, r1	; 0x05



	this->lastButtonCheck = 0;
    47a8:	11 86       	std	Z+9, r1	; 0x09
    47aa:	10 86       	std	Z+8, r1	; 0x08
	this->menuState = GPS; //default, show gps data
    47ac:	13 86       	std	Z+11, r1	; 0x0b
    47ae:	12 86       	std	Z+10, r1	; 0x0a
	this->menuLevel = 0; //main menu
    47b0:	15 86       	std	Z+13, r1	; 0x0d
    47b2:	14 86       	std	Z+12, r1	; 0x0c
}
    47b4:	1f 91       	pop	r17
    47b6:	0f 91       	pop	r16
    47b8:	ff 90       	pop	r15
    47ba:	ef 90       	pop	r14
    47bc:	08 95       	ret

000047be <_ZN4Menu9setButtonEh>:

Menu::~Menu() {
	// TODO Auto-generated destructor stub
}

void Menu::setButton(uint8_t buttonPin) {
    47be:	fc 01       	movw	r30, r24
	//skip if a button is un-processed
	if(button0Bouncer || button1Bouncer || button2Bouncer || button3Bouncer) return;
    47c0:	82 81       	ldd	r24, Z+2	; 0x02
    47c2:	88 23       	and	r24, r24
    47c4:	19 f5       	brne	.+70     	; 0x480c <_ZN4Menu9setButtonEh+0x4e>
    47c6:	83 81       	ldd	r24, Z+3	; 0x03
    47c8:	88 23       	and	r24, r24
    47ca:	01 f5       	brne	.+64     	; 0x480c <_ZN4Menu9setButtonEh+0x4e>
    47cc:	84 81       	ldd	r24, Z+4	; 0x04
    47ce:	88 23       	and	r24, r24
    47d0:	e9 f4       	brne	.+58     	; 0x480c <_ZN4Menu9setButtonEh+0x4e>
    47d2:	85 81       	ldd	r24, Z+5	; 0x05
    47d4:	88 23       	and	r24, r24
    47d6:	d1 f4       	brne	.+52     	; 0x480c <_ZN4Menu9setButtonEh+0x4e>
    47d8:	12 c0       	rjmp	.+36     	; 0x47fe <_ZN4Menu9setButtonEh+0x40>
	button0Pin=buttonPin;
	if(buttonPin == button0)button0Bouncer=HIGH;
    47da:	81 e0       	ldi	r24, 0x01	; 1
    47dc:	82 83       	std	Z+2, r24	; 0x02
    47de:	08 95       	ret
	if(buttonPin == button1)button1Bouncer=HIGH;
    47e0:	60 34       	cpi	r22, 0x40	; 64
    47e2:	19 f4       	brne	.+6      	; 0x47ea <_ZN4Menu9setButtonEh+0x2c>
    47e4:	81 e0       	ldi	r24, 0x01	; 1
    47e6:	83 83       	std	Z+3, r24	; 0x03
    47e8:	08 95       	ret
	if(buttonPin == button2)button2Bouncer=HIGH;
    47ea:	61 34       	cpi	r22, 0x41	; 65
    47ec:	19 f4       	brne	.+6      	; 0x47f4 <_ZN4Menu9setButtonEh+0x36>
    47ee:	81 e0       	ldi	r24, 0x01	; 1
    47f0:	84 83       	std	Z+4, r24	; 0x04
    47f2:	08 95       	ret
	if(buttonPin == button3)button3Bouncer=HIGH;
    47f4:	62 34       	cpi	r22, 0x42	; 66
    47f6:	51 f4       	brne	.+20     	; 0x480c <_ZN4Menu9setButtonEh+0x4e>
    47f8:	81 e0       	ldi	r24, 0x01	; 1
    47fa:	85 83       	std	Z+5, r24	; 0x05
    47fc:	08 95       	ret
}

void Menu::setButton(uint8_t buttonPin) {
	//skip if a button is un-processed
	if(button0Bouncer || button1Bouncer || button2Bouncer || button3Bouncer) return;
	button0Pin=buttonPin;
    47fe:	86 2f       	mov	r24, r22
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	97 83       	std	Z+7, r25	; 0x07
    4804:	86 83       	std	Z+6, r24	; 0x06
	if(buttonPin == button0)button0Bouncer=HIGH;
    4806:	6f 33       	cpi	r22, 0x3F	; 63
    4808:	59 f7       	brne	.-42     	; 0x47e0 <_ZN4Menu9setButtonEh+0x22>
    480a:	e7 cf       	rjmp	.-50     	; 0x47da <_ZN4Menu9setButtonEh+0x1c>
    480c:	08 95       	ret

0000480e <_ZN4Menu10anchorMenuEv>:

/*
 Check if the anchorPoint and Radius buttons are pressed
 */

void Menu::anchorMenu() {
    480e:	cf 92       	push	r12
    4810:	df 92       	push	r13
    4812:	ef 92       	push	r14
    4814:	ff 92       	push	r15
    4816:	0f 93       	push	r16
    4818:	1f 93       	push	r17
    481a:	df 93       	push	r29
    481c:	cf 93       	push	r28
    481e:	cd b7       	in	r28, 0x3d	; 61
    4820:	de b7       	in	r29, 0x3e	; 62
    4822:	c0 5e       	subi	r28, 0xE0	; 224
    4824:	d0 40       	sbci	r29, 0x00	; 0
    4826:	0f b6       	in	r0, 0x3f	; 63
    4828:	f8 94       	cli
    482a:	de bf       	out	0x3e, r29	; 62
    482c:	0f be       	out	0x3f, r0	; 63
    482e:	cd bf       	out	0x3d, r28	; 61
    4830:	7c 01       	movw	r14, r24
	if (button0Bouncer == HIGH) {
    4832:	dc 01       	movw	r26, r24
    4834:	12 96       	adiw	r26, 0x02	; 2
    4836:	8c 91       	ld	r24, X
    4838:	12 97       	sbiw	r26, 0x02	; 2
    483a:	88 23       	and	r24, r24
    483c:	09 f4       	brne	.+2      	; 0x4840 <_ZN4Menu10anchorMenuEv+0x32>
    483e:	5b c1       	rjmp	.+694    	; 0x4af6 <_ZN4Menu10anchorMenuEv+0x2e8>
		anchor->eraseAnchorBox(*lcd, getMenuState());
    4840:	52 96       	adiw	r26, 0x12	; 18
    4842:	8d 91       	ld	r24, X+
    4844:	9c 91       	ld	r25, X
    4846:	53 97       	sbiw	r26, 0x13	; 19
    4848:	1e 96       	adiw	r26, 0x0e	; 14
    484a:	ed 91       	ld	r30, X+
    484c:	fc 91       	ld	r31, X
    484e:	1f 97       	sbiw	r26, 0x0f	; 15
#define HEX 16
#define OCT 8
#define BIN 2

class Print
{
    4850:	22 81       	ldd	r18, Z+2	; 0x02
    4852:	33 81       	ldd	r19, Z+3	; 0x03
    4854:	3c 83       	std	Y+4, r19	; 0x04
    4856:	2b 83       	std	Y+3, r18	; 0x03
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
{
    4858:	24 81       	ldd	r18, Z+4	; 0x04
    485a:	35 81       	ldd	r19, Z+5	; 0x05
    485c:	46 81       	ldd	r20, Z+6	; 0x06
    485e:	57 81       	ldd	r21, Z+7	; 0x07
    4860:	2d 83       	std	Y+5, r18	; 0x05
    4862:	3e 83       	std	Y+6, r19	; 0x06
    4864:	4f 83       	std	Y+7, r20	; 0x07
    4866:	58 87       	std	Y+8, r21	; 0x08
    4868:	20 85       	ldd	r18, Z+8	; 0x08
    486a:	31 85       	ldd	r19, Z+9	; 0x09
    486c:	42 85       	ldd	r20, Z+10	; 0x0a
    486e:	53 85       	ldd	r21, Z+11	; 0x0b
    4870:	29 87       	std	Y+9, r18	; 0x09
    4872:	3a 87       	std	Y+10, r19	; 0x0a
    4874:	4b 87       	std	Y+11, r20	; 0x0b
    4876:	5c 87       	std	Y+12, r21	; 0x0c
#ifndef GCC_VERSION
#define GCC_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
#endif

class SoftwareSerial : public Stream
{
    4878:	24 85       	ldd	r18, Z+12	; 0x0c
    487a:	2d 87       	std	Y+13, r18	; 0x0d
    487c:	25 85       	ldd	r18, Z+13	; 0x0d
    487e:	2e 87       	std	Y+14, r18	; 0x0e
    4880:	26 85       	ldd	r18, Z+14	; 0x0e
    4882:	37 85       	ldd	r19, Z+15	; 0x0f
    4884:	38 8b       	std	Y+16, r19	; 0x10
    4886:	2f 87       	std	Y+15, r18	; 0x0f
    4888:	20 89       	ldd	r18, Z+16	; 0x10
    488a:	29 8b       	std	Y+17, r18	; 0x11
    488c:	21 89       	ldd	r18, Z+17	; 0x11
    488e:	32 89       	ldd	r19, Z+18	; 0x12
    4890:	3b 8b       	std	Y+19, r19	; 0x13
    4892:	2a 8b       	std	Y+18, r18	; 0x12
    4894:	23 89       	ldd	r18, Z+19	; 0x13
    4896:	34 89       	ldd	r19, Z+20	; 0x14
    4898:	3d 8b       	std	Y+21, r19	; 0x15
    489a:	2c 8b       	std	Y+20, r18	; 0x14
    489c:	25 89       	ldd	r18, Z+21	; 0x15
    489e:	36 89       	ldd	r19, Z+22	; 0x16
    48a0:	3f 8b       	std	Y+23, r19	; 0x17
    48a2:	2e 8b       	std	Y+22, r18	; 0x16
    48a4:	27 89       	ldd	r18, Z+23	; 0x17
    48a6:	30 8d       	ldd	r19, Z+24	; 0x18
    48a8:	39 8f       	std	Y+25, r19	; 0x19
    48aa:	28 8f       	std	Y+24, r18	; 0x18
    48ac:	21 8d       	ldd	r18, Z+25	; 0x19
    48ae:	32 8d       	ldd	r19, Z+26	; 0x1a
    48b0:	3b 8f       	std	Y+27, r19	; 0x1b
    48b2:	2a 8f       	std	Y+26, r18	; 0x1a
    48b4:	33 8d       	ldd	r19, Z+27	; 0x1b
    48b6:	31 70       	andi	r19, 0x01	; 1
    48b8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    48ba:	2e 7f       	andi	r18, 0xFE	; 254
    48bc:	23 2b       	or	r18, r19
    48be:	2c 8f       	std	Y+28, r18	; 0x1c
    48c0:	33 8d       	ldd	r19, Z+27	; 0x1b
    48c2:	32 70       	andi	r19, 0x02	; 2
    48c4:	2d 7f       	andi	r18, 0xFD	; 253
    48c6:	23 2b       	or	r18, r19
    48c8:	2c 8f       	std	Y+28, r18	; 0x1c
#include "Arduino.h"

#include <SoftwareSerial/SoftwareSerial.h>
#include "FreeBoardConstants.h"

class Lcd: public SoftwareSerial {
    48ca:	24 e2       	ldi	r18, 0x24	; 36
    48cc:	37 e0       	ldi	r19, 0x07	; 7
    48ce:	3a 83       	std	Y+2, r19	; 0x02
    48d0:	29 83       	std	Y+1, r18	; 0x01
    48d2:	24 8d       	ldd	r18, Z+28	; 0x1c
    48d4:	35 8d       	ldd	r19, Z+29	; 0x1d
    48d6:	46 8d       	ldd	r20, Z+30	; 0x1e
    48d8:	57 8d       	ldd	r21, Z+31	; 0x1f
    48da:	2d 8f       	std	Y+29, r18	; 0x1d
    48dc:	3e 8f       	std	Y+30, r19	; 0x1e
    48de:	4f 8f       	std	Y+31, r20	; 0x1f
    48e0:	58 a3       	std	Y+32, r21	; 0x20
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    48e2:	1a 96       	adiw	r26, 0x0a	; 10
    48e4:	4d 91       	ld	r20, X+
    48e6:	5c 91       	ld	r21, X
    48e8:	1b 97       	sbiw	r26, 0x0b	; 11
 Check if the anchorPoint and Radius buttons are pressed
 */

void Menu::anchorMenu() {
	if (button0Bouncer == HIGH) {
		anchor->eraseAnchorBox(*lcd, getMenuState());
    48ea:	8e 01       	movw	r16, r28
    48ec:	0f 5f       	subi	r16, 0xFF	; 255
    48ee:	1f 4f       	sbci	r17, 0xFF	; 255
    48f0:	b8 01       	movw	r22, r16
    48f2:	0e 94 1b 19 	call	0x3236	; 0x3236 <_ZN6Anchor14eraseAnchorBoxE3Lcdi>
    48f6:	c8 01       	movw	r24, r16
    48f8:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		menuState++;
    48fc:	f7 01       	movw	r30, r14
    48fe:	82 85       	ldd	r24, Z+10	; 0x0a
    4900:	93 85       	ldd	r25, Z+11	; 0x0b
    4902:	01 96       	adiw	r24, 0x01	; 1
    4904:	93 87       	std	Z+11, r25	; 0x0b
    4906:	82 87       	std	Z+10, r24	; 0x0a
		if (menuState > ANCHORMAXMENU)
    4908:	82 85       	ldd	r24, Z+10	; 0x0a
    490a:	93 85       	ldd	r25, Z+11	; 0x0b
    490c:	8e 30       	cpi	r24, 0x0E	; 14
    490e:	91 05       	cpc	r25, r1
    4910:	24 f0       	brlt	.+8      	; 0x491a <_ZN4Menu10anchorMenuEv+0x10c>
			menuState = ANCHORMINMENU;
    4912:	8a e0       	ldi	r24, 0x0A	; 10
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	93 87       	std	Z+11, r25	; 0x0b
    4918:	82 87       	std	Z+10, r24	; 0x0a
		anchor->drawAnchorBox(*lcd, getMenuState());
    491a:	d7 01       	movw	r26, r14
    491c:	52 96       	adiw	r26, 0x12	; 18
    491e:	8d 91       	ld	r24, X+
    4920:	9c 91       	ld	r25, X
    4922:	53 97       	sbiw	r26, 0x13	; 19
    4924:	1e 96       	adiw	r26, 0x0e	; 14
    4926:	ed 91       	ld	r30, X+
    4928:	fc 91       	ld	r31, X
    492a:	1f 97       	sbiw	r26, 0x0f	; 15
    492c:	22 81       	ldd	r18, Z+2	; 0x02
    492e:	33 81       	ldd	r19, Z+3	; 0x03
    4930:	3c a3       	std	Y+36, r19	; 0x24
    4932:	2b a3       	std	Y+35, r18	; 0x23
    4934:	24 81       	ldd	r18, Z+4	; 0x04
    4936:	35 81       	ldd	r19, Z+5	; 0x05
    4938:	46 81       	ldd	r20, Z+6	; 0x06
    493a:	57 81       	ldd	r21, Z+7	; 0x07
    493c:	2d a3       	std	Y+37, r18	; 0x25
    493e:	3e a3       	std	Y+38, r19	; 0x26
    4940:	4f a3       	std	Y+39, r20	; 0x27
    4942:	58 a7       	std	Y+40, r21	; 0x28
    4944:	20 85       	ldd	r18, Z+8	; 0x08
    4946:	31 85       	ldd	r19, Z+9	; 0x09
    4948:	42 85       	ldd	r20, Z+10	; 0x0a
    494a:	53 85       	ldd	r21, Z+11	; 0x0b
    494c:	29 a7       	std	Y+41, r18	; 0x29
    494e:	3a a7       	std	Y+42, r19	; 0x2a
    4950:	4b a7       	std	Y+43, r20	; 0x2b
    4952:	5c a7       	std	Y+44, r21	; 0x2c
    4954:	24 85       	ldd	r18, Z+12	; 0x0c
    4956:	2d a7       	std	Y+45, r18	; 0x2d
    4958:	25 85       	ldd	r18, Z+13	; 0x0d
    495a:	2e a7       	std	Y+46, r18	; 0x2e
    495c:	26 85       	ldd	r18, Z+14	; 0x0e
    495e:	37 85       	ldd	r19, Z+15	; 0x0f
    4960:	38 ab       	std	Y+48, r19	; 0x30
    4962:	2f a7       	std	Y+47, r18	; 0x2f
    4964:	20 89       	ldd	r18, Z+16	; 0x10
    4966:	29 ab       	std	Y+49, r18	; 0x31
    4968:	21 89       	ldd	r18, Z+17	; 0x11
    496a:	32 89       	ldd	r19, Z+18	; 0x12
    496c:	3b ab       	std	Y+51, r19	; 0x33
    496e:	2a ab       	std	Y+50, r18	; 0x32
    4970:	23 89       	ldd	r18, Z+19	; 0x13
    4972:	34 89       	ldd	r19, Z+20	; 0x14
    4974:	3d ab       	std	Y+53, r19	; 0x35
    4976:	2c ab       	std	Y+52, r18	; 0x34
    4978:	25 89       	ldd	r18, Z+21	; 0x15
    497a:	36 89       	ldd	r19, Z+22	; 0x16
    497c:	3f ab       	std	Y+55, r19	; 0x37
    497e:	2e ab       	std	Y+54, r18	; 0x36
    4980:	27 89       	ldd	r18, Z+23	; 0x17
    4982:	30 8d       	ldd	r19, Z+24	; 0x18
    4984:	39 af       	std	Y+57, r19	; 0x39
    4986:	28 af       	std	Y+56, r18	; 0x38
    4988:	21 8d       	ldd	r18, Z+25	; 0x19
    498a:	32 8d       	ldd	r19, Z+26	; 0x1a
    498c:	3b af       	std	Y+59, r19	; 0x3b
    498e:	2a af       	std	Y+58, r18	; 0x3a
    4990:	33 8d       	ldd	r19, Z+27	; 0x1b
    4992:	31 70       	andi	r19, 0x01	; 1
    4994:	2c ad       	ldd	r18, Y+60	; 0x3c
    4996:	2e 7f       	andi	r18, 0xFE	; 254
    4998:	23 2b       	or	r18, r19
    499a:	2c af       	std	Y+60, r18	; 0x3c
    499c:	33 8d       	ldd	r19, Z+27	; 0x1b
    499e:	32 70       	andi	r19, 0x02	; 2
    49a0:	2d 7f       	andi	r18, 0xFD	; 253
    49a2:	23 2b       	or	r18, r19
    49a4:	2c af       	std	Y+60, r18	; 0x3c
    49a6:	34 e2       	ldi	r19, 0x24	; 36
    49a8:	c3 2e       	mov	r12, r19
    49aa:	37 e0       	ldi	r19, 0x07	; 7
    49ac:	d3 2e       	mov	r13, r19
    49ae:	da a2       	std	Y+34, r13	; 0x22
    49b0:	c9 a2       	std	Y+33, r12	; 0x21
    49b2:	24 8d       	ldd	r18, Z+28	; 0x1c
    49b4:	35 8d       	ldd	r19, Z+29	; 0x1d
    49b6:	46 8d       	ldd	r20, Z+30	; 0x1e
    49b8:	57 8d       	ldd	r21, Z+31	; 0x1f
    49ba:	fe 01       	movw	r30, r28
    49bc:	fd 96       	adiw	r30, 0x3d	; 61
    49be:	20 83       	st	Z, r18
    49c0:	31 83       	std	Z+1, r19	; 0x01
    49c2:	42 83       	std	Z+2, r20	; 0x02
    49c4:	53 83       	std	Z+3, r21	; 0x03
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    49c6:	1a 96       	adiw	r26, 0x0a	; 10
    49c8:	4d 91       	ld	r20, X+
    49ca:	5c 91       	ld	r21, X
    49cc:	1b 97       	sbiw	r26, 0x0b	; 11
	if (button0Bouncer == HIGH) {
		anchor->eraseAnchorBox(*lcd, getMenuState());
		menuState++;
		if (menuState > ANCHORMAXMENU)
			menuState = ANCHORMINMENU;
		anchor->drawAnchorBox(*lcd, getMenuState());
    49ce:	8e 01       	movw	r16, r28
    49d0:	0f 5d       	subi	r16, 0xDF	; 223
    49d2:	1f 4f       	sbci	r17, 0xFF	; 255
    49d4:	b8 01       	movw	r22, r16
    49d6:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_ZN6Anchor13drawAnchorBoxE3Lcdi>
    49da:	c8 01       	movw	r24, r16
    49dc:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		anchor->drawAnchorScreen(*lcd, getMenuState());
    49e0:	f7 01       	movw	r30, r14
    49e2:	82 89       	ldd	r24, Z+18	; 0x12
    49e4:	93 89       	ldd	r25, Z+19	; 0x13
    49e6:	06 84       	ldd	r0, Z+14	; 0x0e
    49e8:	f7 85       	ldd	r31, Z+15	; 0x0f
    49ea:	e0 2d       	mov	r30, r0
    49ec:	22 81       	ldd	r18, Z+2	; 0x02
    49ee:	33 81       	ldd	r19, Z+3	; 0x03
    49f0:	de 01       	movw	r26, r28
    49f2:	ad 5b       	subi	r26, 0xBD	; 189
    49f4:	bf 4f       	sbci	r27, 0xFF	; 255
    49f6:	2d 93       	st	X+, r18
    49f8:	3c 93       	st	X, r19
    49fa:	24 81       	ldd	r18, Z+4	; 0x04
    49fc:	35 81       	ldd	r19, Z+5	; 0x05
    49fe:	46 81       	ldd	r20, Z+6	; 0x06
    4a00:	57 81       	ldd	r21, Z+7	; 0x07
    4a02:	de 01       	movw	r26, r28
    4a04:	ab 5b       	subi	r26, 0xBB	; 187
    4a06:	bf 4f       	sbci	r27, 0xFF	; 255
    4a08:	2d 93       	st	X+, r18
    4a0a:	3d 93       	st	X+, r19
    4a0c:	4d 93       	st	X+, r20
    4a0e:	5c 93       	st	X, r21
    4a10:	13 97       	sbiw	r26, 0x03	; 3
    4a12:	20 85       	ldd	r18, Z+8	; 0x08
    4a14:	31 85       	ldd	r19, Z+9	; 0x09
    4a16:	42 85       	ldd	r20, Z+10	; 0x0a
    4a18:	53 85       	ldd	r21, Z+11	; 0x0b
    4a1a:	de 01       	movw	r26, r28
    4a1c:	a7 5b       	subi	r26, 0xB7	; 183
    4a1e:	bf 4f       	sbci	r27, 0xFF	; 255
    4a20:	2d 93       	st	X+, r18
    4a22:	3d 93       	st	X+, r19
    4a24:	4d 93       	st	X+, r20
    4a26:	5c 93       	st	X, r21
    4a28:	13 97       	sbiw	r26, 0x03	; 3
    4a2a:	24 85       	ldd	r18, Z+12	; 0x0c
    4a2c:	de 01       	movw	r26, r28
    4a2e:	a3 5b       	subi	r26, 0xB3	; 179
    4a30:	bf 4f       	sbci	r27, 0xFF	; 255
    4a32:	2c 93       	st	X, r18
    4a34:	25 85       	ldd	r18, Z+13	; 0x0d
    4a36:	de 01       	movw	r26, r28
    4a38:	a2 5b       	subi	r26, 0xB2	; 178
    4a3a:	bf 4f       	sbci	r27, 0xFF	; 255
    4a3c:	2c 93       	st	X, r18
    4a3e:	26 85       	ldd	r18, Z+14	; 0x0e
    4a40:	37 85       	ldd	r19, Z+15	; 0x0f
    4a42:	de 01       	movw	r26, r28
    4a44:	a1 5b       	subi	r26, 0xB1	; 177
    4a46:	bf 4f       	sbci	r27, 0xFF	; 255
    4a48:	2d 93       	st	X+, r18
    4a4a:	3c 93       	st	X, r19
    4a4c:	20 89       	ldd	r18, Z+16	; 0x10
    4a4e:	de 01       	movw	r26, r28
    4a50:	af 5a       	subi	r26, 0xAF	; 175
    4a52:	bf 4f       	sbci	r27, 0xFF	; 255
    4a54:	2c 93       	st	X, r18
    4a56:	21 89       	ldd	r18, Z+17	; 0x11
    4a58:	32 89       	ldd	r19, Z+18	; 0x12
    4a5a:	de 01       	movw	r26, r28
    4a5c:	ae 5a       	subi	r26, 0xAE	; 174
    4a5e:	bf 4f       	sbci	r27, 0xFF	; 255
    4a60:	2d 93       	st	X+, r18
    4a62:	3c 93       	st	X, r19
    4a64:	23 89       	ldd	r18, Z+19	; 0x13
    4a66:	34 89       	ldd	r19, Z+20	; 0x14
    4a68:	de 01       	movw	r26, r28
    4a6a:	ac 5a       	subi	r26, 0xAC	; 172
    4a6c:	bf 4f       	sbci	r27, 0xFF	; 255
    4a6e:	2d 93       	st	X+, r18
    4a70:	3c 93       	st	X, r19
    4a72:	25 89       	ldd	r18, Z+21	; 0x15
    4a74:	36 89       	ldd	r19, Z+22	; 0x16
    4a76:	de 01       	movw	r26, r28
    4a78:	aa 5a       	subi	r26, 0xAA	; 170
    4a7a:	bf 4f       	sbci	r27, 0xFF	; 255
    4a7c:	2d 93       	st	X+, r18
    4a7e:	3c 93       	st	X, r19
    4a80:	27 89       	ldd	r18, Z+23	; 0x17
    4a82:	30 8d       	ldd	r19, Z+24	; 0x18
    4a84:	de 01       	movw	r26, r28
    4a86:	a8 5a       	subi	r26, 0xA8	; 168
    4a88:	bf 4f       	sbci	r27, 0xFF	; 255
    4a8a:	2d 93       	st	X+, r18
    4a8c:	3c 93       	st	X, r19
    4a8e:	21 8d       	ldd	r18, Z+25	; 0x19
    4a90:	32 8d       	ldd	r19, Z+26	; 0x1a
    4a92:	de 01       	movw	r26, r28
    4a94:	a6 5a       	subi	r26, 0xA6	; 166
    4a96:	bf 4f       	sbci	r27, 0xFF	; 255
    4a98:	2d 93       	st	X+, r18
    4a9a:	3c 93       	st	X, r19
    4a9c:	33 8d       	ldd	r19, Z+27	; 0x1b
    4a9e:	31 70       	andi	r19, 0x01	; 1
    4aa0:	de 01       	movw	r26, r28
    4aa2:	a4 5a       	subi	r26, 0xA4	; 164
    4aa4:	bf 4f       	sbci	r27, 0xFF	; 255
    4aa6:	2c 91       	ld	r18, X
    4aa8:	2e 7f       	andi	r18, 0xFE	; 254
    4aaa:	23 2b       	or	r18, r19
    4aac:	2c 93       	st	X, r18
    4aae:	33 8d       	ldd	r19, Z+27	; 0x1b
    4ab0:	32 70       	andi	r19, 0x02	; 2
    4ab2:	2d 7f       	andi	r18, 0xFD	; 253
    4ab4:	23 2b       	or	r18, r19
    4ab6:	2c 93       	st	X, r18
    4ab8:	8e 01       	movw	r16, r28
    4aba:	0f 5b       	subi	r16, 0xBF	; 191
    4abc:	1f 4f       	sbci	r17, 0xFF	; 255
    4abe:	d8 01       	movw	r26, r16
    4ac0:	cd 92       	st	X+, r12
    4ac2:	dc 92       	st	X, r13
    4ac4:	24 8d       	ldd	r18, Z+28	; 0x1c
    4ac6:	35 8d       	ldd	r19, Z+29	; 0x1d
    4ac8:	46 8d       	ldd	r20, Z+30	; 0x1e
    4aca:	57 8d       	ldd	r21, Z+31	; 0x1f
    4acc:	fe 01       	movw	r30, r28
    4ace:	e3 5a       	subi	r30, 0xA3	; 163
    4ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad2:	20 83       	st	Z, r18
    4ad4:	31 83       	std	Z+1, r19	; 0x01
    4ad6:	42 83       	std	Z+2, r20	; 0x02
    4ad8:	53 83       	std	Z+3, r21	; 0x03
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    4ada:	f7 01       	movw	r30, r14
    4adc:	42 85       	ldd	r20, Z+10	; 0x0a
    4ade:	53 85       	ldd	r21, Z+11	; 0x0b
		anchor->eraseAnchorBox(*lcd, getMenuState());
		menuState++;
		if (menuState > ANCHORMAXMENU)
			menuState = ANCHORMINMENU;
		anchor->drawAnchorBox(*lcd, getMenuState());
		anchor->drawAnchorScreen(*lcd, getMenuState());
    4ae0:	b8 01       	movw	r22, r16
    4ae2:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <_ZN6Anchor16drawAnchorScreenE3Lcdi>
    4ae6:	c8 01       	movw	r24, r16
    4ae8:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		button0Bouncer=LOW;
    4aec:	d7 01       	movw	r26, r14
    4aee:	12 96       	adiw	r26, 0x02	; 2
    4af0:	1c 92       	st	X, r1
    4af2:	12 97       	sbiw	r26, 0x02	; 2
		return;
    4af4:	5a c2       	rjmp	.+1204   	; 0x4faa <_ZN4Menu10anchorMenuEv+0x79c>
	}
	if (button1Bouncer == HIGH) {
    4af6:	f7 01       	movw	r30, r14
    4af8:	83 81       	ldd	r24, Z+3	; 0x03
    4afa:	88 23       	and	r24, r24
    4afc:	09 f4       	brne	.+2      	; 0x4b00 <_ZN4Menu10anchorMenuEv+0x2f2>
    4afe:	8b c1       	rjmp	.+790    	; 0x4e16 <_ZN4Menu10anchorMenuEv+0x608>

		anchor->eraseAnchorBox(*lcd, getMenuState());
    4b00:	82 89       	ldd	r24, Z+18	; 0x12
    4b02:	93 89       	ldd	r25, Z+19	; 0x13
    4b04:	06 84       	ldd	r0, Z+14	; 0x0e
    4b06:	f7 85       	ldd	r31, Z+15	; 0x0f
    4b08:	e0 2d       	mov	r30, r0
    4b0a:	8e 01       	movw	r16, r28
    4b0c:	0f 59       	subi	r16, 0x9F	; 159
    4b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b10:	22 81       	ldd	r18, Z+2	; 0x02
    4b12:	33 81       	ldd	r19, Z+3	; 0x03
    4b14:	d8 01       	movw	r26, r16
    4b16:	13 96       	adiw	r26, 0x03	; 3
    4b18:	3c 93       	st	X, r19
    4b1a:	2e 93       	st	-X, r18
    4b1c:	12 97       	sbiw	r26, 0x02	; 2
    4b1e:	24 81       	ldd	r18, Z+4	; 0x04
    4b20:	35 81       	ldd	r19, Z+5	; 0x05
    4b22:	46 81       	ldd	r20, Z+6	; 0x06
    4b24:	57 81       	ldd	r21, Z+7	; 0x07
    4b26:	14 96       	adiw	r26, 0x04	; 4
    4b28:	2d 93       	st	X+, r18
    4b2a:	3d 93       	st	X+, r19
    4b2c:	4d 93       	st	X+, r20
    4b2e:	5c 93       	st	X, r21
    4b30:	17 97       	sbiw	r26, 0x07	; 7
    4b32:	20 85       	ldd	r18, Z+8	; 0x08
    4b34:	31 85       	ldd	r19, Z+9	; 0x09
    4b36:	42 85       	ldd	r20, Z+10	; 0x0a
    4b38:	53 85       	ldd	r21, Z+11	; 0x0b
    4b3a:	18 96       	adiw	r26, 0x08	; 8
    4b3c:	2d 93       	st	X+, r18
    4b3e:	3d 93       	st	X+, r19
    4b40:	4d 93       	st	X+, r20
    4b42:	5c 93       	st	X, r21
    4b44:	1b 97       	sbiw	r26, 0x0b	; 11
    4b46:	24 85       	ldd	r18, Z+12	; 0x0c
    4b48:	1c 96       	adiw	r26, 0x0c	; 12
    4b4a:	2c 93       	st	X, r18
    4b4c:	1c 97       	sbiw	r26, 0x0c	; 12
    4b4e:	25 85       	ldd	r18, Z+13	; 0x0d
    4b50:	1d 96       	adiw	r26, 0x0d	; 13
    4b52:	2c 93       	st	X, r18
    4b54:	1d 97       	sbiw	r26, 0x0d	; 13
    4b56:	26 85       	ldd	r18, Z+14	; 0x0e
    4b58:	37 85       	ldd	r19, Z+15	; 0x0f
    4b5a:	1f 96       	adiw	r26, 0x0f	; 15
    4b5c:	3c 93       	st	X, r19
    4b5e:	2e 93       	st	-X, r18
    4b60:	1e 97       	sbiw	r26, 0x0e	; 14
    4b62:	20 89       	ldd	r18, Z+16	; 0x10
    4b64:	50 96       	adiw	r26, 0x10	; 16
    4b66:	2c 93       	st	X, r18
    4b68:	50 97       	sbiw	r26, 0x10	; 16
    4b6a:	21 89       	ldd	r18, Z+17	; 0x11
    4b6c:	32 89       	ldd	r19, Z+18	; 0x12
    4b6e:	52 96       	adiw	r26, 0x12	; 18
    4b70:	3c 93       	st	X, r19
    4b72:	2e 93       	st	-X, r18
    4b74:	51 97       	sbiw	r26, 0x11	; 17
    4b76:	23 89       	ldd	r18, Z+19	; 0x13
    4b78:	34 89       	ldd	r19, Z+20	; 0x14
    4b7a:	54 96       	adiw	r26, 0x14	; 20
    4b7c:	3c 93       	st	X, r19
    4b7e:	2e 93       	st	-X, r18
    4b80:	53 97       	sbiw	r26, 0x13	; 19
    4b82:	25 89       	ldd	r18, Z+21	; 0x15
    4b84:	36 89       	ldd	r19, Z+22	; 0x16
    4b86:	56 96       	adiw	r26, 0x16	; 22
    4b88:	3c 93       	st	X, r19
    4b8a:	2e 93       	st	-X, r18
    4b8c:	55 97       	sbiw	r26, 0x15	; 21
    4b8e:	27 89       	ldd	r18, Z+23	; 0x17
    4b90:	30 8d       	ldd	r19, Z+24	; 0x18
    4b92:	58 96       	adiw	r26, 0x18	; 24
    4b94:	3c 93       	st	X, r19
    4b96:	2e 93       	st	-X, r18
    4b98:	57 97       	sbiw	r26, 0x17	; 23
    4b9a:	21 8d       	ldd	r18, Z+25	; 0x19
    4b9c:	32 8d       	ldd	r19, Z+26	; 0x1a
    4b9e:	5a 96       	adiw	r26, 0x1a	; 26
    4ba0:	3c 93       	st	X, r19
    4ba2:	2e 93       	st	-X, r18
    4ba4:	59 97       	sbiw	r26, 0x19	; 25
    4ba6:	33 8d       	ldd	r19, Z+27	; 0x1b
    4ba8:	31 70       	andi	r19, 0x01	; 1
    4baa:	5b 96       	adiw	r26, 0x1b	; 27
    4bac:	2c 91       	ld	r18, X
    4bae:	5b 97       	sbiw	r26, 0x1b	; 27
    4bb0:	2e 7f       	andi	r18, 0xFE	; 254
    4bb2:	23 2b       	or	r18, r19
    4bb4:	5b 96       	adiw	r26, 0x1b	; 27
    4bb6:	2c 93       	st	X, r18
    4bb8:	5b 97       	sbiw	r26, 0x1b	; 27
    4bba:	33 8d       	ldd	r19, Z+27	; 0x1b
    4bbc:	32 70       	andi	r19, 0x02	; 2
    4bbe:	2d 7f       	andi	r18, 0xFD	; 253
    4bc0:	23 2b       	or	r18, r19
    4bc2:	5b 96       	adiw	r26, 0x1b	; 27
    4bc4:	2c 93       	st	X, r18
    4bc6:	5b 97       	sbiw	r26, 0x1b	; 27
    4bc8:	24 e2       	ldi	r18, 0x24	; 36
    4bca:	37 e0       	ldi	r19, 0x07	; 7
    4bcc:	2d 93       	st	X+, r18
    4bce:	3c 93       	st	X, r19
    4bd0:	24 8d       	ldd	r18, Z+28	; 0x1c
    4bd2:	35 8d       	ldd	r19, Z+29	; 0x1d
    4bd4:	46 8d       	ldd	r20, Z+30	; 0x1e
    4bd6:	57 8d       	ldd	r21, Z+31	; 0x1f
    4bd8:	f8 01       	movw	r30, r16
    4bda:	24 8f       	std	Z+28, r18	; 0x1c
    4bdc:	35 8f       	std	Z+29, r19	; 0x1d
    4bde:	46 8f       	std	Z+30, r20	; 0x1e
    4be0:	57 8f       	std	Z+31, r21	; 0x1f
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    4be2:	d7 01       	movw	r26, r14
    4be4:	1a 96       	adiw	r26, 0x0a	; 10
    4be6:	4d 91       	ld	r20, X+
    4be8:	5c 91       	ld	r21, X
    4bea:	1b 97       	sbiw	r26, 0x0b	; 11
		button0Bouncer=LOW;
		return;
	}
	if (button1Bouncer == HIGH) {

		anchor->eraseAnchorBox(*lcd, getMenuState());
    4bec:	b8 01       	movw	r22, r16
    4bee:	0e 94 1b 19 	call	0x3236	; 0x3236 <_ZN6Anchor14eraseAnchorBoxE3Lcdi>
    4bf2:	c8 01       	movw	r24, r16
    4bf4:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		menuState--;
    4bf8:	f7 01       	movw	r30, r14
    4bfa:	82 85       	ldd	r24, Z+10	; 0x0a
    4bfc:	93 85       	ldd	r25, Z+11	; 0x0b
    4bfe:	01 97       	sbiw	r24, 0x01	; 1
    4c00:	93 87       	std	Z+11, r25	; 0x0b
    4c02:	82 87       	std	Z+10, r24	; 0x0a
		if (menuState < ANCHORMINMENU)
    4c04:	82 85       	ldd	r24, Z+10	; 0x0a
    4c06:	93 85       	ldd	r25, Z+11	; 0x0b
    4c08:	8a 30       	cpi	r24, 0x0A	; 10
    4c0a:	91 05       	cpc	r25, r1
    4c0c:	24 f4       	brge	.+8      	; 0x4c16 <_ZN4Menu10anchorMenuEv+0x408>
			menuState = ANCHORMAXMENU;
    4c0e:	8d e0       	ldi	r24, 0x0D	; 13
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	93 87       	std	Z+11, r25	; 0x0b
    4c14:	82 87       	std	Z+10, r24	; 0x0a
		anchor->drawAnchorBox(*lcd, getMenuState());
    4c16:	d7 01       	movw	r26, r14
    4c18:	52 96       	adiw	r26, 0x12	; 18
    4c1a:	8d 91       	ld	r24, X+
    4c1c:	9c 91       	ld	r25, X
    4c1e:	53 97       	sbiw	r26, 0x13	; 19
    4c20:	1e 96       	adiw	r26, 0x0e	; 14
    4c22:	ed 91       	ld	r30, X+
    4c24:	fc 91       	ld	r31, X
    4c26:	1f 97       	sbiw	r26, 0x0f	; 15
    4c28:	8e 01       	movw	r16, r28
    4c2a:	0f 57       	subi	r16, 0x7F	; 127
    4c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c2e:	22 81       	ldd	r18, Z+2	; 0x02
    4c30:	33 81       	ldd	r19, Z+3	; 0x03
    4c32:	d8 01       	movw	r26, r16
    4c34:	13 96       	adiw	r26, 0x03	; 3
    4c36:	3c 93       	st	X, r19
    4c38:	2e 93       	st	-X, r18
    4c3a:	12 97       	sbiw	r26, 0x02	; 2
    4c3c:	24 81       	ldd	r18, Z+4	; 0x04
    4c3e:	35 81       	ldd	r19, Z+5	; 0x05
    4c40:	46 81       	ldd	r20, Z+6	; 0x06
    4c42:	57 81       	ldd	r21, Z+7	; 0x07
    4c44:	14 96       	adiw	r26, 0x04	; 4
    4c46:	2d 93       	st	X+, r18
    4c48:	3d 93       	st	X+, r19
    4c4a:	4d 93       	st	X+, r20
    4c4c:	5c 93       	st	X, r21
    4c4e:	17 97       	sbiw	r26, 0x07	; 7
    4c50:	20 85       	ldd	r18, Z+8	; 0x08
    4c52:	31 85       	ldd	r19, Z+9	; 0x09
    4c54:	42 85       	ldd	r20, Z+10	; 0x0a
    4c56:	53 85       	ldd	r21, Z+11	; 0x0b
    4c58:	18 96       	adiw	r26, 0x08	; 8
    4c5a:	2d 93       	st	X+, r18
    4c5c:	3d 93       	st	X+, r19
    4c5e:	4d 93       	st	X+, r20
    4c60:	5c 93       	st	X, r21
    4c62:	1b 97       	sbiw	r26, 0x0b	; 11
    4c64:	24 85       	ldd	r18, Z+12	; 0x0c
    4c66:	1c 96       	adiw	r26, 0x0c	; 12
    4c68:	2c 93       	st	X, r18
    4c6a:	1c 97       	sbiw	r26, 0x0c	; 12
    4c6c:	25 85       	ldd	r18, Z+13	; 0x0d
    4c6e:	1d 96       	adiw	r26, 0x0d	; 13
    4c70:	2c 93       	st	X, r18
    4c72:	1d 97       	sbiw	r26, 0x0d	; 13
    4c74:	26 85       	ldd	r18, Z+14	; 0x0e
    4c76:	37 85       	ldd	r19, Z+15	; 0x0f
    4c78:	1f 96       	adiw	r26, 0x0f	; 15
    4c7a:	3c 93       	st	X, r19
    4c7c:	2e 93       	st	-X, r18
    4c7e:	1e 97       	sbiw	r26, 0x0e	; 14
    4c80:	20 89       	ldd	r18, Z+16	; 0x10
    4c82:	50 96       	adiw	r26, 0x10	; 16
    4c84:	2c 93       	st	X, r18
    4c86:	50 97       	sbiw	r26, 0x10	; 16
    4c88:	21 89       	ldd	r18, Z+17	; 0x11
    4c8a:	32 89       	ldd	r19, Z+18	; 0x12
    4c8c:	52 96       	adiw	r26, 0x12	; 18
    4c8e:	3c 93       	st	X, r19
    4c90:	2e 93       	st	-X, r18
    4c92:	51 97       	sbiw	r26, 0x11	; 17
    4c94:	23 89       	ldd	r18, Z+19	; 0x13
    4c96:	34 89       	ldd	r19, Z+20	; 0x14
    4c98:	54 96       	adiw	r26, 0x14	; 20
    4c9a:	3c 93       	st	X, r19
    4c9c:	2e 93       	st	-X, r18
    4c9e:	53 97       	sbiw	r26, 0x13	; 19
    4ca0:	25 89       	ldd	r18, Z+21	; 0x15
    4ca2:	36 89       	ldd	r19, Z+22	; 0x16
    4ca4:	56 96       	adiw	r26, 0x16	; 22
    4ca6:	3c 93       	st	X, r19
    4ca8:	2e 93       	st	-X, r18
    4caa:	55 97       	sbiw	r26, 0x15	; 21
    4cac:	27 89       	ldd	r18, Z+23	; 0x17
    4cae:	30 8d       	ldd	r19, Z+24	; 0x18
    4cb0:	58 96       	adiw	r26, 0x18	; 24
    4cb2:	3c 93       	st	X, r19
    4cb4:	2e 93       	st	-X, r18
    4cb6:	57 97       	sbiw	r26, 0x17	; 23
    4cb8:	21 8d       	ldd	r18, Z+25	; 0x19
    4cba:	32 8d       	ldd	r19, Z+26	; 0x1a
    4cbc:	5a 96       	adiw	r26, 0x1a	; 26
    4cbe:	3c 93       	st	X, r19
    4cc0:	2e 93       	st	-X, r18
    4cc2:	59 97       	sbiw	r26, 0x19	; 25
    4cc4:	33 8d       	ldd	r19, Z+27	; 0x1b
    4cc6:	31 70       	andi	r19, 0x01	; 1
    4cc8:	5b 96       	adiw	r26, 0x1b	; 27
    4cca:	2c 91       	ld	r18, X
    4ccc:	5b 97       	sbiw	r26, 0x1b	; 27
    4cce:	2e 7f       	andi	r18, 0xFE	; 254
    4cd0:	23 2b       	or	r18, r19
    4cd2:	5b 96       	adiw	r26, 0x1b	; 27
    4cd4:	2c 93       	st	X, r18
    4cd6:	5b 97       	sbiw	r26, 0x1b	; 27
    4cd8:	33 8d       	ldd	r19, Z+27	; 0x1b
    4cda:	32 70       	andi	r19, 0x02	; 2
    4cdc:	2d 7f       	andi	r18, 0xFD	; 253
    4cde:	23 2b       	or	r18, r19
    4ce0:	5b 96       	adiw	r26, 0x1b	; 27
    4ce2:	2c 93       	st	X, r18
    4ce4:	5b 97       	sbiw	r26, 0x1b	; 27
    4ce6:	24 e2       	ldi	r18, 0x24	; 36
    4ce8:	c2 2e       	mov	r12, r18
    4cea:	27 e0       	ldi	r18, 0x07	; 7
    4cec:	d2 2e       	mov	r13, r18
    4cee:	cd 92       	st	X+, r12
    4cf0:	dc 92       	st	X, r13
    4cf2:	24 8d       	ldd	r18, Z+28	; 0x1c
    4cf4:	35 8d       	ldd	r19, Z+29	; 0x1d
    4cf6:	46 8d       	ldd	r20, Z+30	; 0x1e
    4cf8:	57 8d       	ldd	r21, Z+31	; 0x1f
    4cfa:	f8 01       	movw	r30, r16
    4cfc:	24 8f       	std	Z+28, r18	; 0x1c
    4cfe:	35 8f       	std	Z+29, r19	; 0x1d
    4d00:	46 8f       	std	Z+30, r20	; 0x1e
    4d02:	57 8f       	std	Z+31, r21	; 0x1f
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    4d04:	d7 01       	movw	r26, r14
    4d06:	1a 96       	adiw	r26, 0x0a	; 10
    4d08:	4d 91       	ld	r20, X+
    4d0a:	5c 91       	ld	r21, X
    4d0c:	1b 97       	sbiw	r26, 0x0b	; 11

		anchor->eraseAnchorBox(*lcd, getMenuState());
		menuState--;
		if (menuState < ANCHORMINMENU)
			menuState = ANCHORMAXMENU;
		anchor->drawAnchorBox(*lcd, getMenuState());
    4d0e:	b8 01       	movw	r22, r16
    4d10:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_ZN6Anchor13drawAnchorBoxE3Lcdi>
    4d14:	c8 01       	movw	r24, r16
    4d16:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		anchor->drawAnchorScreen(*lcd, getMenuState());
    4d1a:	f7 01       	movw	r30, r14
    4d1c:	82 89       	ldd	r24, Z+18	; 0x12
    4d1e:	93 89       	ldd	r25, Z+19	; 0x13
    4d20:	06 84       	ldd	r0, Z+14	; 0x0e
    4d22:	f7 85       	ldd	r31, Z+15	; 0x0f
    4d24:	e0 2d       	mov	r30, r0
    4d26:	8e 01       	movw	r16, r28
    4d28:	0f 55       	subi	r16, 0x5F	; 95
    4d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d2c:	22 81       	ldd	r18, Z+2	; 0x02
    4d2e:	33 81       	ldd	r19, Z+3	; 0x03
    4d30:	d8 01       	movw	r26, r16
    4d32:	13 96       	adiw	r26, 0x03	; 3
    4d34:	3c 93       	st	X, r19
    4d36:	2e 93       	st	-X, r18
    4d38:	12 97       	sbiw	r26, 0x02	; 2
    4d3a:	24 81       	ldd	r18, Z+4	; 0x04
    4d3c:	35 81       	ldd	r19, Z+5	; 0x05
    4d3e:	46 81       	ldd	r20, Z+6	; 0x06
    4d40:	57 81       	ldd	r21, Z+7	; 0x07
    4d42:	14 96       	adiw	r26, 0x04	; 4
    4d44:	2d 93       	st	X+, r18
    4d46:	3d 93       	st	X+, r19
    4d48:	4d 93       	st	X+, r20
    4d4a:	5c 93       	st	X, r21
    4d4c:	17 97       	sbiw	r26, 0x07	; 7
    4d4e:	20 85       	ldd	r18, Z+8	; 0x08
    4d50:	31 85       	ldd	r19, Z+9	; 0x09
    4d52:	42 85       	ldd	r20, Z+10	; 0x0a
    4d54:	53 85       	ldd	r21, Z+11	; 0x0b
    4d56:	18 96       	adiw	r26, 0x08	; 8
    4d58:	2d 93       	st	X+, r18
    4d5a:	3d 93       	st	X+, r19
    4d5c:	4d 93       	st	X+, r20
    4d5e:	5c 93       	st	X, r21
    4d60:	1b 97       	sbiw	r26, 0x0b	; 11
    4d62:	24 85       	ldd	r18, Z+12	; 0x0c
    4d64:	1c 96       	adiw	r26, 0x0c	; 12
    4d66:	2c 93       	st	X, r18
    4d68:	1c 97       	sbiw	r26, 0x0c	; 12
    4d6a:	25 85       	ldd	r18, Z+13	; 0x0d
    4d6c:	1d 96       	adiw	r26, 0x0d	; 13
    4d6e:	2c 93       	st	X, r18
    4d70:	1d 97       	sbiw	r26, 0x0d	; 13
    4d72:	26 85       	ldd	r18, Z+14	; 0x0e
    4d74:	37 85       	ldd	r19, Z+15	; 0x0f
    4d76:	1f 96       	adiw	r26, 0x0f	; 15
    4d78:	3c 93       	st	X, r19
    4d7a:	2e 93       	st	-X, r18
    4d7c:	1e 97       	sbiw	r26, 0x0e	; 14
    4d7e:	20 89       	ldd	r18, Z+16	; 0x10
    4d80:	50 96       	adiw	r26, 0x10	; 16
    4d82:	2c 93       	st	X, r18
    4d84:	50 97       	sbiw	r26, 0x10	; 16
    4d86:	21 89       	ldd	r18, Z+17	; 0x11
    4d88:	32 89       	ldd	r19, Z+18	; 0x12
    4d8a:	52 96       	adiw	r26, 0x12	; 18
    4d8c:	3c 93       	st	X, r19
    4d8e:	2e 93       	st	-X, r18
    4d90:	51 97       	sbiw	r26, 0x11	; 17
    4d92:	23 89       	ldd	r18, Z+19	; 0x13
    4d94:	34 89       	ldd	r19, Z+20	; 0x14
    4d96:	54 96       	adiw	r26, 0x14	; 20
    4d98:	3c 93       	st	X, r19
    4d9a:	2e 93       	st	-X, r18
    4d9c:	53 97       	sbiw	r26, 0x13	; 19
    4d9e:	25 89       	ldd	r18, Z+21	; 0x15
    4da0:	36 89       	ldd	r19, Z+22	; 0x16
    4da2:	56 96       	adiw	r26, 0x16	; 22
    4da4:	3c 93       	st	X, r19
    4da6:	2e 93       	st	-X, r18
    4da8:	55 97       	sbiw	r26, 0x15	; 21
    4daa:	27 89       	ldd	r18, Z+23	; 0x17
    4dac:	30 8d       	ldd	r19, Z+24	; 0x18
    4dae:	58 96       	adiw	r26, 0x18	; 24
    4db0:	3c 93       	st	X, r19
    4db2:	2e 93       	st	-X, r18
    4db4:	57 97       	sbiw	r26, 0x17	; 23
    4db6:	21 8d       	ldd	r18, Z+25	; 0x19
    4db8:	32 8d       	ldd	r19, Z+26	; 0x1a
    4dba:	5a 96       	adiw	r26, 0x1a	; 26
    4dbc:	3c 93       	st	X, r19
    4dbe:	2e 93       	st	-X, r18
    4dc0:	59 97       	sbiw	r26, 0x19	; 25
    4dc2:	33 8d       	ldd	r19, Z+27	; 0x1b
    4dc4:	31 70       	andi	r19, 0x01	; 1
    4dc6:	5b 96       	adiw	r26, 0x1b	; 27
    4dc8:	2c 91       	ld	r18, X
    4dca:	5b 97       	sbiw	r26, 0x1b	; 27
    4dcc:	2e 7f       	andi	r18, 0xFE	; 254
    4dce:	23 2b       	or	r18, r19
    4dd0:	5b 96       	adiw	r26, 0x1b	; 27
    4dd2:	2c 93       	st	X, r18
    4dd4:	5b 97       	sbiw	r26, 0x1b	; 27
    4dd6:	33 8d       	ldd	r19, Z+27	; 0x1b
    4dd8:	32 70       	andi	r19, 0x02	; 2
    4dda:	2d 7f       	andi	r18, 0xFD	; 253
    4ddc:	23 2b       	or	r18, r19
    4dde:	5b 96       	adiw	r26, 0x1b	; 27
    4de0:	2c 93       	st	X, r18
    4de2:	5b 97       	sbiw	r26, 0x1b	; 27
    4de4:	cd 92       	st	X+, r12
    4de6:	dc 92       	st	X, r13
    4de8:	24 8d       	ldd	r18, Z+28	; 0x1c
    4dea:	35 8d       	ldd	r19, Z+29	; 0x1d
    4dec:	46 8d       	ldd	r20, Z+30	; 0x1e
    4dee:	57 8d       	ldd	r21, Z+31	; 0x1f
    4df0:	f8 01       	movw	r30, r16
    4df2:	24 8f       	std	Z+28, r18	; 0x1c
    4df4:	35 8f       	std	Z+29, r19	; 0x1d
    4df6:	46 8f       	std	Z+30, r20	; 0x1e
    4df8:	57 8f       	std	Z+31, r21	; 0x1f
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    4dfa:	d7 01       	movw	r26, r14
    4dfc:	1a 96       	adiw	r26, 0x0a	; 10
    4dfe:	4d 91       	ld	r20, X+
    4e00:	5c 91       	ld	r21, X
    4e02:	1b 97       	sbiw	r26, 0x0b	; 11
		anchor->eraseAnchorBox(*lcd, getMenuState());
		menuState--;
		if (menuState < ANCHORMINMENU)
			menuState = ANCHORMAXMENU;
		anchor->drawAnchorBox(*lcd, getMenuState());
		anchor->drawAnchorScreen(*lcd, getMenuState());
    4e04:	b8 01       	movw	r22, r16
    4e06:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <_ZN6Anchor16drawAnchorScreenE3Lcdi>
    4e0a:	c8 01       	movw	r24, r16
    4e0c:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		button1Bouncer=LOW;
    4e10:	f7 01       	movw	r30, r14
    4e12:	13 82       	std	Z+3, r1	; 0x03
		return;
    4e14:	ca c0       	rjmp	.+404    	; 0x4faa <_ZN4Menu10anchorMenuEv+0x79c>
	}
	if (button2Bouncer == HIGH) {
    4e16:	d7 01       	movw	r26, r14
    4e18:	14 96       	adiw	r26, 0x04	; 4
    4e1a:	8c 91       	ld	r24, X
    4e1c:	14 97       	sbiw	r26, 0x04	; 4
    4e1e:	88 23       	and	r24, r24
    4e20:	09 f4       	brne	.+2      	; 0x4e24 <_ZN4Menu10anchorMenuEv+0x616>
    4e22:	c3 c0       	rjmp	.+390    	; 0x4faa <_ZN4Menu10anchorMenuEv+0x79c>

		switch (menuState) {
    4e24:	1a 96       	adiw	r26, 0x0a	; 10
    4e26:	8d 91       	ld	r24, X+
    4e28:	9c 91       	ld	r25, X
    4e2a:	1b 97       	sbiw	r26, 0x0b	; 11
    4e2c:	8b 30       	cpi	r24, 0x0B	; 11
    4e2e:	91 05       	cpc	r25, r1
    4e30:	d1 f0       	breq	.+52     	; 0x4e66 <_ZN4Menu10anchorMenuEv+0x658>
    4e32:	8c 30       	cpi	r24, 0x0C	; 12
    4e34:	91 05       	cpc	r25, r1
    4e36:	24 f4       	brge	.+8      	; 0x4e40 <_ZN4Menu10anchorMenuEv+0x632>
    4e38:	8a 30       	cpi	r24, 0x0A	; 10
    4e3a:	91 05       	cpc	r25, r1
    4e3c:	a1 f5       	brne	.+104    	; 0x4ea6 <_ZN4Menu10anchorMenuEv+0x698>
    4e3e:	07 c0       	rjmp	.+14     	; 0x4e4e <_ZN4Menu10anchorMenuEv+0x640>
    4e40:	8c 30       	cpi	r24, 0x0C	; 12
    4e42:	91 05       	cpc	r25, r1
    4e44:	c1 f0       	breq	.+48     	; 0x4e76 <_ZN4Menu10anchorMenuEv+0x668>
    4e46:	8d 30       	cpi	r24, 0x0D	; 13
    4e48:	91 05       	cpc	r25, r1
    4e4a:	69 f5       	brne	.+90     	; 0x4ea6 <_ZN4Menu10anchorMenuEv+0x698>
    4e4c:	1b c0       	rjmp	.+54     	; 0x4e84 <_ZN4Menu10anchorMenuEv+0x676>
		case ANCHORSTATE:
			anchor->setAnchorAlarmState(!anchor->getAnchorAlarmState());
    4e4e:	f7 01       	movw	r30, r14
    4e50:	02 89       	ldd	r16, Z+18	; 0x12
    4e52:	13 89       	ldd	r17, Z+19	; 0x13
    4e54:	c8 01       	movw	r24, r16
    4e56:	0e 94 90 14 	call	0x2920	; 0x2920 <_ZN6Anchor19getAnchorAlarmStateEv>
    4e5a:	61 e0       	ldi	r22, 0x01	; 1
    4e5c:	68 27       	eor	r22, r24
    4e5e:	c8 01       	movw	r24, r16
    4e60:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN6Anchor19setAnchorAlarmStateEb>
			break;
    4e64:	20 c0       	rjmp	.+64     	; 0x4ea6 <_ZN4Menu10anchorMenuEv+0x698>
		case ANCHORPOINT:
			anchor->setAnchorPoint();
    4e66:	d7 01       	movw	r26, r14
    4e68:	52 96       	adiw	r26, 0x12	; 18
    4e6a:	8d 91       	ld	r24, X+
    4e6c:	9c 91       	ld	r25, X
    4e6e:	53 97       	sbiw	r26, 0x13	; 19
    4e70:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <_ZN6Anchor14setAnchorPointEv>
			break;
    4e74:	18 c0       	rjmp	.+48     	; 0x4ea6 <_ZN4Menu10anchorMenuEv+0x698>
		case ANCHORRADIUS:
			menuLevel++;
    4e76:	f7 01       	movw	r30, r14
    4e78:	84 85       	ldd	r24, Z+12	; 0x0c
    4e7a:	95 85       	ldd	r25, Z+13	; 0x0d
    4e7c:	01 96       	adiw	r24, 0x01	; 1
    4e7e:	95 87       	std	Z+13, r25	; 0x0d
    4e80:	84 87       	std	Z+12, r24	; 0x0c
			break;
    4e82:	11 c0       	rjmp	.+34     	; 0x4ea6 <_ZN4Menu10anchorMenuEv+0x698>
		case ANCHORRTN:
			lcd->clearLcd();
    4e84:	d7 01       	movw	r26, r14
    4e86:	1e 96       	adiw	r26, 0x0e	; 14
    4e88:	8d 91       	ld	r24, X+
    4e8a:	9c 91       	ld	r25, X
    4e8c:	1f 97       	sbiw	r26, 0x0f	; 15
    4e8e:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <_ZN3Lcd8clearLcdEv>
			menuLevel--;
    4e92:	f7 01       	movw	r30, r14
    4e94:	84 85       	ldd	r24, Z+12	; 0x0c
    4e96:	95 85       	ldd	r25, Z+13	; 0x0d
    4e98:	01 97       	sbiw	r24, 0x01	; 1
    4e9a:	95 87       	std	Z+13, r25	; 0x0d
    4e9c:	84 87       	std	Z+12, r24	; 0x0c
			menuState = ANCHOR;
    4e9e:	81 e0       	ldi	r24, 0x01	; 1
    4ea0:	90 e0       	ldi	r25, 0x00	; 0
    4ea2:	93 87       	std	Z+11, r25	; 0x0b
    4ea4:	82 87       	std	Z+10, r24	; 0x0a

			break;

		}
		anchor->drawAnchorScreen(*lcd, getMenuState());
    4ea6:	d7 01       	movw	r26, r14
    4ea8:	52 96       	adiw	r26, 0x12	; 18
    4eaa:	8d 91       	ld	r24, X+
    4eac:	9c 91       	ld	r25, X
    4eae:	53 97       	sbiw	r26, 0x13	; 19
    4eb0:	1e 96       	adiw	r26, 0x0e	; 14
    4eb2:	ed 91       	ld	r30, X+
    4eb4:	fc 91       	ld	r31, X
    4eb6:	1f 97       	sbiw	r26, 0x0f	; 15
    4eb8:	8e 01       	movw	r16, r28
    4eba:	0f 53       	subi	r16, 0x3F	; 63
    4ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    4ebe:	22 81       	ldd	r18, Z+2	; 0x02
    4ec0:	33 81       	ldd	r19, Z+3	; 0x03
    4ec2:	d8 01       	movw	r26, r16
    4ec4:	13 96       	adiw	r26, 0x03	; 3
    4ec6:	3c 93       	st	X, r19
    4ec8:	2e 93       	st	-X, r18
    4eca:	12 97       	sbiw	r26, 0x02	; 2
    4ecc:	24 81       	ldd	r18, Z+4	; 0x04
    4ece:	35 81       	ldd	r19, Z+5	; 0x05
    4ed0:	46 81       	ldd	r20, Z+6	; 0x06
    4ed2:	57 81       	ldd	r21, Z+7	; 0x07
    4ed4:	14 96       	adiw	r26, 0x04	; 4
    4ed6:	2d 93       	st	X+, r18
    4ed8:	3d 93       	st	X+, r19
    4eda:	4d 93       	st	X+, r20
    4edc:	5c 93       	st	X, r21
    4ede:	17 97       	sbiw	r26, 0x07	; 7
    4ee0:	20 85       	ldd	r18, Z+8	; 0x08
    4ee2:	31 85       	ldd	r19, Z+9	; 0x09
    4ee4:	42 85       	ldd	r20, Z+10	; 0x0a
    4ee6:	53 85       	ldd	r21, Z+11	; 0x0b
    4ee8:	18 96       	adiw	r26, 0x08	; 8
    4eea:	2d 93       	st	X+, r18
    4eec:	3d 93       	st	X+, r19
    4eee:	4d 93       	st	X+, r20
    4ef0:	5c 93       	st	X, r21
    4ef2:	1b 97       	sbiw	r26, 0x0b	; 11
    4ef4:	24 85       	ldd	r18, Z+12	; 0x0c
    4ef6:	1c 96       	adiw	r26, 0x0c	; 12
    4ef8:	2c 93       	st	X, r18
    4efa:	1c 97       	sbiw	r26, 0x0c	; 12
    4efc:	25 85       	ldd	r18, Z+13	; 0x0d
    4efe:	1d 96       	adiw	r26, 0x0d	; 13
    4f00:	2c 93       	st	X, r18
    4f02:	1d 97       	sbiw	r26, 0x0d	; 13
    4f04:	26 85       	ldd	r18, Z+14	; 0x0e
    4f06:	37 85       	ldd	r19, Z+15	; 0x0f
    4f08:	1f 96       	adiw	r26, 0x0f	; 15
    4f0a:	3c 93       	st	X, r19
    4f0c:	2e 93       	st	-X, r18
    4f0e:	1e 97       	sbiw	r26, 0x0e	; 14
    4f10:	20 89       	ldd	r18, Z+16	; 0x10
    4f12:	50 96       	adiw	r26, 0x10	; 16
    4f14:	2c 93       	st	X, r18
    4f16:	50 97       	sbiw	r26, 0x10	; 16
    4f18:	21 89       	ldd	r18, Z+17	; 0x11
    4f1a:	32 89       	ldd	r19, Z+18	; 0x12
    4f1c:	52 96       	adiw	r26, 0x12	; 18
    4f1e:	3c 93       	st	X, r19
    4f20:	2e 93       	st	-X, r18
    4f22:	51 97       	sbiw	r26, 0x11	; 17
    4f24:	23 89       	ldd	r18, Z+19	; 0x13
    4f26:	34 89       	ldd	r19, Z+20	; 0x14
    4f28:	54 96       	adiw	r26, 0x14	; 20
    4f2a:	3c 93       	st	X, r19
    4f2c:	2e 93       	st	-X, r18
    4f2e:	53 97       	sbiw	r26, 0x13	; 19
    4f30:	25 89       	ldd	r18, Z+21	; 0x15
    4f32:	36 89       	ldd	r19, Z+22	; 0x16
    4f34:	56 96       	adiw	r26, 0x16	; 22
    4f36:	3c 93       	st	X, r19
    4f38:	2e 93       	st	-X, r18
    4f3a:	55 97       	sbiw	r26, 0x15	; 21
    4f3c:	27 89       	ldd	r18, Z+23	; 0x17
    4f3e:	30 8d       	ldd	r19, Z+24	; 0x18
    4f40:	58 96       	adiw	r26, 0x18	; 24
    4f42:	3c 93       	st	X, r19
    4f44:	2e 93       	st	-X, r18
    4f46:	57 97       	sbiw	r26, 0x17	; 23
    4f48:	21 8d       	ldd	r18, Z+25	; 0x19
    4f4a:	32 8d       	ldd	r19, Z+26	; 0x1a
    4f4c:	5a 96       	adiw	r26, 0x1a	; 26
    4f4e:	3c 93       	st	X, r19
    4f50:	2e 93       	st	-X, r18
    4f52:	59 97       	sbiw	r26, 0x19	; 25
    4f54:	33 8d       	ldd	r19, Z+27	; 0x1b
    4f56:	31 70       	andi	r19, 0x01	; 1
    4f58:	5b 96       	adiw	r26, 0x1b	; 27
    4f5a:	2c 91       	ld	r18, X
    4f5c:	5b 97       	sbiw	r26, 0x1b	; 27
    4f5e:	2e 7f       	andi	r18, 0xFE	; 254
    4f60:	23 2b       	or	r18, r19
    4f62:	5b 96       	adiw	r26, 0x1b	; 27
    4f64:	2c 93       	st	X, r18
    4f66:	5b 97       	sbiw	r26, 0x1b	; 27
    4f68:	33 8d       	ldd	r19, Z+27	; 0x1b
    4f6a:	32 70       	andi	r19, 0x02	; 2
    4f6c:	2d 7f       	andi	r18, 0xFD	; 253
    4f6e:	23 2b       	or	r18, r19
    4f70:	5b 96       	adiw	r26, 0x1b	; 27
    4f72:	2c 93       	st	X, r18
    4f74:	5b 97       	sbiw	r26, 0x1b	; 27
    4f76:	24 e2       	ldi	r18, 0x24	; 36
    4f78:	37 e0       	ldi	r19, 0x07	; 7
    4f7a:	2d 93       	st	X+, r18
    4f7c:	3c 93       	st	X, r19
    4f7e:	24 8d       	ldd	r18, Z+28	; 0x1c
    4f80:	35 8d       	ldd	r19, Z+29	; 0x1d
    4f82:	46 8d       	ldd	r20, Z+30	; 0x1e
    4f84:	57 8d       	ldd	r21, Z+31	; 0x1f
    4f86:	f8 01       	movw	r30, r16
    4f88:	24 8f       	std	Z+28, r18	; 0x1c
    4f8a:	35 8f       	std	Z+29, r19	; 0x1d
    4f8c:	46 8f       	std	Z+30, r20	; 0x1e
    4f8e:	57 8f       	std	Z+31, r21	; 0x1f
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    4f90:	d7 01       	movw	r26, r14
    4f92:	1a 96       	adiw	r26, 0x0a	; 10
    4f94:	4d 91       	ld	r20, X+
    4f96:	5c 91       	ld	r21, X
    4f98:	1b 97       	sbiw	r26, 0x0b	; 11
			menuState = ANCHOR;

			break;

		}
		anchor->drawAnchorScreen(*lcd, getMenuState());
    4f9a:	b8 01       	movw	r22, r16
    4f9c:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <_ZN6Anchor16drawAnchorScreenE3Lcdi>
    4fa0:	c8 01       	movw	r24, r16
    4fa2:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		button2Bouncer=LOW;
    4fa6:	f7 01       	movw	r30, r14
    4fa8:	14 82       	std	Z+4, r1	; 0x04
		return;
	}

}
    4faa:	c0 52       	subi	r28, 0x20	; 32
    4fac:	df 4f       	sbci	r29, 0xFF	; 255
    4fae:	0f b6       	in	r0, 0x3f	; 63
    4fb0:	f8 94       	cli
    4fb2:	de bf       	out	0x3e, r29	; 62
    4fb4:	0f be       	out	0x3f, r0	; 63
    4fb6:	cd bf       	out	0x3d, r28	; 61
    4fb8:	cf 91       	pop	r28
    4fba:	df 91       	pop	r29
    4fbc:	1f 91       	pop	r17
    4fbe:	0f 91       	pop	r16
    4fc0:	ff 90       	pop	r15
    4fc2:	ef 90       	pop	r14
    4fc4:	df 90       	pop	r13
    4fc6:	cf 90       	pop	r12
    4fc8:	08 95       	ret

00004fca <_ZN4Menu16anchorRadiusMenuEv>:

/* Adjust the anchor alarm radius*/
void Menu::anchorRadiusMenu() {
    4fca:	ef 92       	push	r14
    4fcc:	ff 92       	push	r15
    4fce:	0f 93       	push	r16
    4fd0:	1f 93       	push	r17
    4fd2:	df 93       	push	r29
    4fd4:	cf 93       	push	r28
    4fd6:	cd b7       	in	r28, 0x3d	; 61
    4fd8:	de b7       	in	r29, 0x3e	; 62
    4fda:	c0 56       	subi	r28, 0x60	; 96
    4fdc:	d0 40       	sbci	r29, 0x00	; 0
    4fde:	0f b6       	in	r0, 0x3f	; 63
    4fe0:	f8 94       	cli
    4fe2:	de bf       	out	0x3e, r29	; 62
    4fe4:	0f be       	out	0x3f, r0	; 63
    4fe6:	cd bf       	out	0x3d, r28	; 61
    4fe8:	7c 01       	movw	r14, r24
	if (button0Bouncer == HIGH) {
    4fea:	dc 01       	movw	r26, r24
    4fec:	12 96       	adiw	r26, 0x02	; 2
    4fee:	8c 91       	ld	r24, X
    4ff0:	12 97       	sbiw	r26, 0x02	; 2
    4ff2:	88 23       	and	r24, r24
    4ff4:	09 f4       	brne	.+2      	; 0x4ff8 <_ZN4Menu16anchorRadiusMenuEv+0x2e>
    4ff6:	72 c0       	rjmp	.+228    	; 0x50dc <_ZN4Menu16anchorRadiusMenuEv+0x112>

		//add 5M to anchor radius
		anchor->setAnchorRadius(anchor->getAnchorRadius() + 5.0);
    4ff8:	52 96       	adiw	r26, 0x12	; 18
    4ffa:	0d 91       	ld	r16, X+
    4ffc:	1c 91       	ld	r17, X
    4ffe:	53 97       	sbiw	r26, 0x13	; 19
    5000:	c8 01       	movw	r24, r16
    5002:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <_ZN6Anchor15getAnchorRadiusEv>
    5006:	20 e0       	ldi	r18, 0x00	; 0
    5008:	30 e0       	ldi	r19, 0x00	; 0
    500a:	40 ea       	ldi	r20, 0xA0	; 160
    500c:	50 e4       	ldi	r21, 0x40	; 64
    500e:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    5012:	ab 01       	movw	r20, r22
    5014:	bc 01       	movw	r22, r24
    5016:	c8 01       	movw	r24, r16
    5018:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <_ZN6Anchor15setAnchorRadiusEf>
		anchor->drawAnchorScreen(*lcd, getMenuState());
    501c:	f7 01       	movw	r30, r14
    501e:	82 89       	ldd	r24, Z+18	; 0x12
    5020:	93 89       	ldd	r25, Z+19	; 0x13
    5022:	06 84       	ldd	r0, Z+14	; 0x0e
    5024:	f7 85       	ldd	r31, Z+15	; 0x0f
    5026:	e0 2d       	mov	r30, r0
    5028:	22 81       	ldd	r18, Z+2	; 0x02
    502a:	33 81       	ldd	r19, Z+3	; 0x03
    502c:	3c 83       	std	Y+4, r19	; 0x04
    502e:	2b 83       	std	Y+3, r18	; 0x03
    5030:	24 81       	ldd	r18, Z+4	; 0x04
    5032:	35 81       	ldd	r19, Z+5	; 0x05
    5034:	46 81       	ldd	r20, Z+6	; 0x06
    5036:	57 81       	ldd	r21, Z+7	; 0x07
    5038:	2d 83       	std	Y+5, r18	; 0x05
    503a:	3e 83       	std	Y+6, r19	; 0x06
    503c:	4f 83       	std	Y+7, r20	; 0x07
    503e:	58 87       	std	Y+8, r21	; 0x08
    5040:	20 85       	ldd	r18, Z+8	; 0x08
    5042:	31 85       	ldd	r19, Z+9	; 0x09
    5044:	42 85       	ldd	r20, Z+10	; 0x0a
    5046:	53 85       	ldd	r21, Z+11	; 0x0b
    5048:	29 87       	std	Y+9, r18	; 0x09
    504a:	3a 87       	std	Y+10, r19	; 0x0a
    504c:	4b 87       	std	Y+11, r20	; 0x0b
    504e:	5c 87       	std	Y+12, r21	; 0x0c
    5050:	24 85       	ldd	r18, Z+12	; 0x0c
    5052:	2d 87       	std	Y+13, r18	; 0x0d
    5054:	25 85       	ldd	r18, Z+13	; 0x0d
    5056:	2e 87       	std	Y+14, r18	; 0x0e
    5058:	26 85       	ldd	r18, Z+14	; 0x0e
    505a:	37 85       	ldd	r19, Z+15	; 0x0f
    505c:	38 8b       	std	Y+16, r19	; 0x10
    505e:	2f 87       	std	Y+15, r18	; 0x0f
    5060:	20 89       	ldd	r18, Z+16	; 0x10
    5062:	29 8b       	std	Y+17, r18	; 0x11
    5064:	21 89       	ldd	r18, Z+17	; 0x11
    5066:	32 89       	ldd	r19, Z+18	; 0x12
    5068:	3b 8b       	std	Y+19, r19	; 0x13
    506a:	2a 8b       	std	Y+18, r18	; 0x12
    506c:	23 89       	ldd	r18, Z+19	; 0x13
    506e:	34 89       	ldd	r19, Z+20	; 0x14
    5070:	3d 8b       	std	Y+21, r19	; 0x15
    5072:	2c 8b       	std	Y+20, r18	; 0x14
    5074:	25 89       	ldd	r18, Z+21	; 0x15
    5076:	36 89       	ldd	r19, Z+22	; 0x16
    5078:	3f 8b       	std	Y+23, r19	; 0x17
    507a:	2e 8b       	std	Y+22, r18	; 0x16
    507c:	27 89       	ldd	r18, Z+23	; 0x17
    507e:	30 8d       	ldd	r19, Z+24	; 0x18
    5080:	39 8f       	std	Y+25, r19	; 0x19
    5082:	28 8f       	std	Y+24, r18	; 0x18
    5084:	21 8d       	ldd	r18, Z+25	; 0x19
    5086:	32 8d       	ldd	r19, Z+26	; 0x1a
    5088:	3b 8f       	std	Y+27, r19	; 0x1b
    508a:	2a 8f       	std	Y+26, r18	; 0x1a
    508c:	33 8d       	ldd	r19, Z+27	; 0x1b
    508e:	31 70       	andi	r19, 0x01	; 1
    5090:	2c 8d       	ldd	r18, Y+28	; 0x1c
    5092:	2e 7f       	andi	r18, 0xFE	; 254
    5094:	23 2b       	or	r18, r19
    5096:	2c 8f       	std	Y+28, r18	; 0x1c
    5098:	33 8d       	ldd	r19, Z+27	; 0x1b
    509a:	32 70       	andi	r19, 0x02	; 2
    509c:	2d 7f       	andi	r18, 0xFD	; 253
    509e:	23 2b       	or	r18, r19
    50a0:	2c 8f       	std	Y+28, r18	; 0x1c
    50a2:	24 e2       	ldi	r18, 0x24	; 36
    50a4:	37 e0       	ldi	r19, 0x07	; 7
    50a6:	3a 83       	std	Y+2, r19	; 0x02
    50a8:	29 83       	std	Y+1, r18	; 0x01
    50aa:	24 8d       	ldd	r18, Z+28	; 0x1c
    50ac:	35 8d       	ldd	r19, Z+29	; 0x1d
    50ae:	46 8d       	ldd	r20, Z+30	; 0x1e
    50b0:	57 8d       	ldd	r21, Z+31	; 0x1f
    50b2:	2d 8f       	std	Y+29, r18	; 0x1d
    50b4:	3e 8f       	std	Y+30, r19	; 0x1e
    50b6:	4f 8f       	std	Y+31, r20	; 0x1f
    50b8:	58 a3       	std	Y+32, r21	; 0x20
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    50ba:	d7 01       	movw	r26, r14
    50bc:	1a 96       	adiw	r26, 0x0a	; 10
    50be:	4d 91       	ld	r20, X+
    50c0:	5c 91       	ld	r21, X
    50c2:	1b 97       	sbiw	r26, 0x0b	; 11
void Menu::anchorRadiusMenu() {
	if (button0Bouncer == HIGH) {

		//add 5M to anchor radius
		anchor->setAnchorRadius(anchor->getAnchorRadius() + 5.0);
		anchor->drawAnchorScreen(*lcd, getMenuState());
    50c4:	8e 01       	movw	r16, r28
    50c6:	0f 5f       	subi	r16, 0xFF	; 255
    50c8:	1f 4f       	sbci	r17, 0xFF	; 255
    50ca:	b8 01       	movw	r22, r16
    50cc:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <_ZN6Anchor16drawAnchorScreenE3Lcdi>
    50d0:	c8 01       	movw	r24, r16
    50d2:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		button0Bouncer=LOW;
    50d6:	f7 01       	movw	r30, r14
    50d8:	12 82       	std	Z+2, r1	; 0x02
		return;
    50da:	19 c1       	rjmp	.+562    	; 0x530e <_ZN4Menu16anchorRadiusMenuEv+0x344>
	}
	if (button1Bouncer == HIGH) {
    50dc:	d7 01       	movw	r26, r14
    50de:	13 96       	adiw	r26, 0x03	; 3
    50e0:	8c 91       	ld	r24, X
    50e2:	13 97       	sbiw	r26, 0x03	; 3
    50e4:	88 23       	and	r24, r24
    50e6:	09 f4       	brne	.+2      	; 0x50ea <_ZN4Menu16anchorRadiusMenuEv+0x120>
    50e8:	74 c0       	rjmp	.+232    	; 0x51d2 <_ZN4Menu16anchorRadiusMenuEv+0x208>

		//subtract 5M from anchor radius
		anchor->setAnchorRadius(anchor->getAnchorRadius() - 5.0);
    50ea:	52 96       	adiw	r26, 0x12	; 18
    50ec:	0d 91       	ld	r16, X+
    50ee:	1c 91       	ld	r17, X
    50f0:	53 97       	sbiw	r26, 0x13	; 19
    50f2:	c8 01       	movw	r24, r16
    50f4:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <_ZN6Anchor15getAnchorRadiusEv>
    50f8:	20 e0       	ldi	r18, 0x00	; 0
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	40 ea       	ldi	r20, 0xA0	; 160
    50fe:	50 e4       	ldi	r21, 0x40	; 64
    5100:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    5104:	ab 01       	movw	r20, r22
    5106:	bc 01       	movw	r22, r24
    5108:	c8 01       	movw	r24, r16
    510a:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <_ZN6Anchor15setAnchorRadiusEf>
		anchor->drawAnchorScreen(*lcd, getMenuState());
    510e:	f7 01       	movw	r30, r14
    5110:	82 89       	ldd	r24, Z+18	; 0x12
    5112:	93 89       	ldd	r25, Z+19	; 0x13
    5114:	06 84       	ldd	r0, Z+14	; 0x0e
    5116:	f7 85       	ldd	r31, Z+15	; 0x0f
    5118:	e0 2d       	mov	r30, r0
    511a:	22 81       	ldd	r18, Z+2	; 0x02
    511c:	33 81       	ldd	r19, Z+3	; 0x03
    511e:	3c a3       	std	Y+36, r19	; 0x24
    5120:	2b a3       	std	Y+35, r18	; 0x23
    5122:	24 81       	ldd	r18, Z+4	; 0x04
    5124:	35 81       	ldd	r19, Z+5	; 0x05
    5126:	46 81       	ldd	r20, Z+6	; 0x06
    5128:	57 81       	ldd	r21, Z+7	; 0x07
    512a:	2d a3       	std	Y+37, r18	; 0x25
    512c:	3e a3       	std	Y+38, r19	; 0x26
    512e:	4f a3       	std	Y+39, r20	; 0x27
    5130:	58 a7       	std	Y+40, r21	; 0x28
    5132:	20 85       	ldd	r18, Z+8	; 0x08
    5134:	31 85       	ldd	r19, Z+9	; 0x09
    5136:	42 85       	ldd	r20, Z+10	; 0x0a
    5138:	53 85       	ldd	r21, Z+11	; 0x0b
    513a:	29 a7       	std	Y+41, r18	; 0x29
    513c:	3a a7       	std	Y+42, r19	; 0x2a
    513e:	4b a7       	std	Y+43, r20	; 0x2b
    5140:	5c a7       	std	Y+44, r21	; 0x2c
    5142:	24 85       	ldd	r18, Z+12	; 0x0c
    5144:	2d a7       	std	Y+45, r18	; 0x2d
    5146:	25 85       	ldd	r18, Z+13	; 0x0d
    5148:	2e a7       	std	Y+46, r18	; 0x2e
    514a:	26 85       	ldd	r18, Z+14	; 0x0e
    514c:	37 85       	ldd	r19, Z+15	; 0x0f
    514e:	38 ab       	std	Y+48, r19	; 0x30
    5150:	2f a7       	std	Y+47, r18	; 0x2f
    5152:	20 89       	ldd	r18, Z+16	; 0x10
    5154:	29 ab       	std	Y+49, r18	; 0x31
    5156:	21 89       	ldd	r18, Z+17	; 0x11
    5158:	32 89       	ldd	r19, Z+18	; 0x12
    515a:	3b ab       	std	Y+51, r19	; 0x33
    515c:	2a ab       	std	Y+50, r18	; 0x32
    515e:	23 89       	ldd	r18, Z+19	; 0x13
    5160:	34 89       	ldd	r19, Z+20	; 0x14
    5162:	3d ab       	std	Y+53, r19	; 0x35
    5164:	2c ab       	std	Y+52, r18	; 0x34
    5166:	25 89       	ldd	r18, Z+21	; 0x15
    5168:	36 89       	ldd	r19, Z+22	; 0x16
    516a:	3f ab       	std	Y+55, r19	; 0x37
    516c:	2e ab       	std	Y+54, r18	; 0x36
    516e:	27 89       	ldd	r18, Z+23	; 0x17
    5170:	30 8d       	ldd	r19, Z+24	; 0x18
    5172:	39 af       	std	Y+57, r19	; 0x39
    5174:	28 af       	std	Y+56, r18	; 0x38
    5176:	21 8d       	ldd	r18, Z+25	; 0x19
    5178:	32 8d       	ldd	r19, Z+26	; 0x1a
    517a:	3b af       	std	Y+59, r19	; 0x3b
    517c:	2a af       	std	Y+58, r18	; 0x3a
    517e:	33 8d       	ldd	r19, Z+27	; 0x1b
    5180:	31 70       	andi	r19, 0x01	; 1
    5182:	2c ad       	ldd	r18, Y+60	; 0x3c
    5184:	2e 7f       	andi	r18, 0xFE	; 254
    5186:	23 2b       	or	r18, r19
    5188:	2c af       	std	Y+60, r18	; 0x3c
    518a:	33 8d       	ldd	r19, Z+27	; 0x1b
    518c:	32 70       	andi	r19, 0x02	; 2
    518e:	2d 7f       	andi	r18, 0xFD	; 253
    5190:	23 2b       	or	r18, r19
    5192:	2c af       	std	Y+60, r18	; 0x3c
    5194:	24 e2       	ldi	r18, 0x24	; 36
    5196:	37 e0       	ldi	r19, 0x07	; 7
    5198:	3a a3       	std	Y+34, r19	; 0x22
    519a:	29 a3       	std	Y+33, r18	; 0x21
    519c:	24 8d       	ldd	r18, Z+28	; 0x1c
    519e:	35 8d       	ldd	r19, Z+29	; 0x1d
    51a0:	46 8d       	ldd	r20, Z+30	; 0x1e
    51a2:	57 8d       	ldd	r21, Z+31	; 0x1f
    51a4:	fe 01       	movw	r30, r28
    51a6:	fd 96       	adiw	r30, 0x3d	; 61
    51a8:	20 83       	st	Z, r18
    51aa:	31 83       	std	Z+1, r19	; 0x01
    51ac:	42 83       	std	Z+2, r20	; 0x02
    51ae:	53 83       	std	Z+3, r21	; 0x03
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    51b0:	d7 01       	movw	r26, r14
    51b2:	1a 96       	adiw	r26, 0x0a	; 10
    51b4:	4d 91       	ld	r20, X+
    51b6:	5c 91       	ld	r21, X
    51b8:	1b 97       	sbiw	r26, 0x0b	; 11
	}
	if (button1Bouncer == HIGH) {

		//subtract 5M from anchor radius
		anchor->setAnchorRadius(anchor->getAnchorRadius() - 5.0);
		anchor->drawAnchorScreen(*lcd, getMenuState());
    51ba:	8e 01       	movw	r16, r28
    51bc:	0f 5d       	subi	r16, 0xDF	; 223
    51be:	1f 4f       	sbci	r17, 0xFF	; 255
    51c0:	b8 01       	movw	r22, r16
    51c2:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <_ZN6Anchor16drawAnchorScreenE3Lcdi>
    51c6:	c8 01       	movw	r24, r16
    51c8:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		button1Bouncer=LOW;
    51cc:	f7 01       	movw	r30, r14
    51ce:	13 82       	std	Z+3, r1	; 0x03
		return;
    51d0:	9e c0       	rjmp	.+316    	; 0x530e <_ZN4Menu16anchorRadiusMenuEv+0x344>
	}
	if (button2Bouncer == HIGH) {
    51d2:	d7 01       	movw	r26, r14
    51d4:	14 96       	adiw	r26, 0x04	; 4
    51d6:	8c 91       	ld	r24, X
    51d8:	14 97       	sbiw	r26, 0x04	; 4
    51da:	88 23       	and	r24, r24
    51dc:	09 f4       	brne	.+2      	; 0x51e0 <_ZN4Menu16anchorRadiusMenuEv+0x216>
    51de:	97 c0       	rjmp	.+302    	; 0x530e <_ZN4Menu16anchorRadiusMenuEv+0x344>

		menuLevel--;
    51e0:	1c 96       	adiw	r26, 0x0c	; 12
    51e2:	8d 91       	ld	r24, X+
    51e4:	9c 91       	ld	r25, X
    51e6:	1d 97       	sbiw	r26, 0x0d	; 13
    51e8:	01 97       	sbiw	r24, 0x01	; 1
    51ea:	1d 96       	adiw	r26, 0x0d	; 13
    51ec:	9c 93       	st	X, r25
    51ee:	8e 93       	st	-X, r24
    51f0:	1c 97       	sbiw	r26, 0x0c	; 12
		anchor->drawAnchorScreen(*lcd,getMenuState());
    51f2:	52 96       	adiw	r26, 0x12	; 18
    51f4:	8d 91       	ld	r24, X+
    51f6:	9c 91       	ld	r25, X
    51f8:	53 97       	sbiw	r26, 0x13	; 19
    51fa:	1e 96       	adiw	r26, 0x0e	; 14
    51fc:	ed 91       	ld	r30, X+
    51fe:	fc 91       	ld	r31, X
    5200:	1f 97       	sbiw	r26, 0x0f	; 15
    5202:	22 81       	ldd	r18, Z+2	; 0x02
    5204:	33 81       	ldd	r19, Z+3	; 0x03
    5206:	de 01       	movw	r26, r28
    5208:	ad 5b       	subi	r26, 0xBD	; 189
    520a:	bf 4f       	sbci	r27, 0xFF	; 255
    520c:	2d 93       	st	X+, r18
    520e:	3c 93       	st	X, r19
    5210:	24 81       	ldd	r18, Z+4	; 0x04
    5212:	35 81       	ldd	r19, Z+5	; 0x05
    5214:	46 81       	ldd	r20, Z+6	; 0x06
    5216:	57 81       	ldd	r21, Z+7	; 0x07
    5218:	de 01       	movw	r26, r28
    521a:	ab 5b       	subi	r26, 0xBB	; 187
    521c:	bf 4f       	sbci	r27, 0xFF	; 255
    521e:	2d 93       	st	X+, r18
    5220:	3d 93       	st	X+, r19
    5222:	4d 93       	st	X+, r20
    5224:	5c 93       	st	X, r21
    5226:	13 97       	sbiw	r26, 0x03	; 3
    5228:	20 85       	ldd	r18, Z+8	; 0x08
    522a:	31 85       	ldd	r19, Z+9	; 0x09
    522c:	42 85       	ldd	r20, Z+10	; 0x0a
    522e:	53 85       	ldd	r21, Z+11	; 0x0b
    5230:	de 01       	movw	r26, r28
    5232:	a7 5b       	subi	r26, 0xB7	; 183
    5234:	bf 4f       	sbci	r27, 0xFF	; 255
    5236:	2d 93       	st	X+, r18
    5238:	3d 93       	st	X+, r19
    523a:	4d 93       	st	X+, r20
    523c:	5c 93       	st	X, r21
    523e:	13 97       	sbiw	r26, 0x03	; 3
    5240:	24 85       	ldd	r18, Z+12	; 0x0c
    5242:	de 01       	movw	r26, r28
    5244:	a3 5b       	subi	r26, 0xB3	; 179
    5246:	bf 4f       	sbci	r27, 0xFF	; 255
    5248:	2c 93       	st	X, r18
    524a:	25 85       	ldd	r18, Z+13	; 0x0d
    524c:	de 01       	movw	r26, r28
    524e:	a2 5b       	subi	r26, 0xB2	; 178
    5250:	bf 4f       	sbci	r27, 0xFF	; 255
    5252:	2c 93       	st	X, r18
    5254:	26 85       	ldd	r18, Z+14	; 0x0e
    5256:	37 85       	ldd	r19, Z+15	; 0x0f
    5258:	de 01       	movw	r26, r28
    525a:	a1 5b       	subi	r26, 0xB1	; 177
    525c:	bf 4f       	sbci	r27, 0xFF	; 255
    525e:	2d 93       	st	X+, r18
    5260:	3c 93       	st	X, r19
    5262:	20 89       	ldd	r18, Z+16	; 0x10
    5264:	de 01       	movw	r26, r28
    5266:	af 5a       	subi	r26, 0xAF	; 175
    5268:	bf 4f       	sbci	r27, 0xFF	; 255
    526a:	2c 93       	st	X, r18
    526c:	21 89       	ldd	r18, Z+17	; 0x11
    526e:	32 89       	ldd	r19, Z+18	; 0x12
    5270:	de 01       	movw	r26, r28
    5272:	ae 5a       	subi	r26, 0xAE	; 174
    5274:	bf 4f       	sbci	r27, 0xFF	; 255
    5276:	2d 93       	st	X+, r18
    5278:	3c 93       	st	X, r19
    527a:	23 89       	ldd	r18, Z+19	; 0x13
    527c:	34 89       	ldd	r19, Z+20	; 0x14
    527e:	de 01       	movw	r26, r28
    5280:	ac 5a       	subi	r26, 0xAC	; 172
    5282:	bf 4f       	sbci	r27, 0xFF	; 255
    5284:	2d 93       	st	X+, r18
    5286:	3c 93       	st	X, r19
    5288:	25 89       	ldd	r18, Z+21	; 0x15
    528a:	36 89       	ldd	r19, Z+22	; 0x16
    528c:	de 01       	movw	r26, r28
    528e:	aa 5a       	subi	r26, 0xAA	; 170
    5290:	bf 4f       	sbci	r27, 0xFF	; 255
    5292:	2d 93       	st	X+, r18
    5294:	3c 93       	st	X, r19
    5296:	27 89       	ldd	r18, Z+23	; 0x17
    5298:	30 8d       	ldd	r19, Z+24	; 0x18
    529a:	de 01       	movw	r26, r28
    529c:	a8 5a       	subi	r26, 0xA8	; 168
    529e:	bf 4f       	sbci	r27, 0xFF	; 255
    52a0:	2d 93       	st	X+, r18
    52a2:	3c 93       	st	X, r19
    52a4:	21 8d       	ldd	r18, Z+25	; 0x19
    52a6:	32 8d       	ldd	r19, Z+26	; 0x1a
    52a8:	de 01       	movw	r26, r28
    52aa:	a6 5a       	subi	r26, 0xA6	; 166
    52ac:	bf 4f       	sbci	r27, 0xFF	; 255
    52ae:	2d 93       	st	X+, r18
    52b0:	3c 93       	st	X, r19
    52b2:	33 8d       	ldd	r19, Z+27	; 0x1b
    52b4:	31 70       	andi	r19, 0x01	; 1
    52b6:	de 01       	movw	r26, r28
    52b8:	a4 5a       	subi	r26, 0xA4	; 164
    52ba:	bf 4f       	sbci	r27, 0xFF	; 255
    52bc:	2c 91       	ld	r18, X
    52be:	2e 7f       	andi	r18, 0xFE	; 254
    52c0:	23 2b       	or	r18, r19
    52c2:	2c 93       	st	X, r18
    52c4:	33 8d       	ldd	r19, Z+27	; 0x1b
    52c6:	32 70       	andi	r19, 0x02	; 2
    52c8:	2d 7f       	andi	r18, 0xFD	; 253
    52ca:	23 2b       	or	r18, r19
    52cc:	2c 93       	st	X, r18
    52ce:	8e 01       	movw	r16, r28
    52d0:	0f 5b       	subi	r16, 0xBF	; 191
    52d2:	1f 4f       	sbci	r17, 0xFF	; 255
    52d4:	24 e2       	ldi	r18, 0x24	; 36
    52d6:	37 e0       	ldi	r19, 0x07	; 7
    52d8:	d8 01       	movw	r26, r16
    52da:	2d 93       	st	X+, r18
    52dc:	3c 93       	st	X, r19
    52de:	24 8d       	ldd	r18, Z+28	; 0x1c
    52e0:	35 8d       	ldd	r19, Z+29	; 0x1d
    52e2:	46 8d       	ldd	r20, Z+30	; 0x1e
    52e4:	57 8d       	ldd	r21, Z+31	; 0x1f
    52e6:	fe 01       	movw	r30, r28
    52e8:	e3 5a       	subi	r30, 0xA3	; 163
    52ea:	ff 4f       	sbci	r31, 0xFF	; 255
    52ec:	20 83       	st	Z, r18
    52ee:	31 83       	std	Z+1, r19	; 0x01
    52f0:	42 83       	std	Z+2, r20	; 0x02
    52f2:	53 83       	std	Z+3, r21	; 0x03
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    52f4:	f7 01       	movw	r30, r14
    52f6:	42 85       	ldd	r20, Z+10	; 0x0a
    52f8:	53 85       	ldd	r21, Z+11	; 0x0b
		return;
	}
	if (button2Bouncer == HIGH) {

		menuLevel--;
		anchor->drawAnchorScreen(*lcd,getMenuState());
    52fa:	b8 01       	movw	r22, r16
    52fc:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <_ZN6Anchor16drawAnchorScreenE3Lcdi>
    5300:	c8 01       	movw	r24, r16
    5302:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		button2Bouncer=LOW;
    5306:	d7 01       	movw	r26, r14
    5308:	14 96       	adiw	r26, 0x04	; 4
    530a:	1c 92       	st	X, r1
    530c:	14 97       	sbiw	r26, 0x04	; 4
		return;
	}

}
    530e:	c0 5a       	subi	r28, 0xA0	; 160
    5310:	df 4f       	sbci	r29, 0xFF	; 255
    5312:	0f b6       	in	r0, 0x3f	; 63
    5314:	f8 94       	cli
    5316:	de bf       	out	0x3e, r29	; 62
    5318:	0f be       	out	0x3f, r0	; 63
    531a:	cd bf       	out	0x3d, r28	; 61
    531c:	cf 91       	pop	r28
    531e:	df 91       	pop	r29
    5320:	1f 91       	pop	r17
    5322:	0f 91       	pop	r16
    5324:	ff 90       	pop	r15
    5326:	ef 90       	pop	r14
    5328:	08 95       	ret

0000532a <_ZN4Menu8windMenuEv>:

/*
 Check if the windAlarm and speed buttons are pressed
 */

void Menu::windMenu() {
    532a:	cf 92       	push	r12
    532c:	df 92       	push	r13
    532e:	ef 92       	push	r14
    5330:	ff 92       	push	r15
    5332:	0f 93       	push	r16
    5334:	1f 93       	push	r17
    5336:	df 93       	push	r29
    5338:	cf 93       	push	r28
    533a:	cd b7       	in	r28, 0x3d	; 61
    533c:	de b7       	in	r29, 0x3e	; 62
    533e:	c0 5e       	subi	r28, 0xE0	; 224
    5340:	d0 40       	sbci	r29, 0x00	; 0
    5342:	0f b6       	in	r0, 0x3f	; 63
    5344:	f8 94       	cli
    5346:	de bf       	out	0x3e, r29	; 62
    5348:	0f be       	out	0x3f, r0	; 63
    534a:	cd bf       	out	0x3d, r28	; 61
    534c:	7c 01       	movw	r14, r24
	if (button0Bouncer == HIGH) {
    534e:	dc 01       	movw	r26, r24
    5350:	12 96       	adiw	r26, 0x02	; 2
    5352:	8c 91       	ld	r24, X
    5354:	12 97       	sbiw	r26, 0x02	; 2
    5356:	88 23       	and	r24, r24
    5358:	09 f4       	brne	.+2      	; 0x535c <_ZN4Menu8windMenuEv+0x32>
    535a:	5b c1       	rjmp	.+694    	; 0x5612 <_ZN4Menu8windMenuEv+0x2e8>

		wind->eraseWindBox(*lcd, getMenuState());
    535c:	54 96       	adiw	r26, 0x14	; 20
    535e:	8d 91       	ld	r24, X+
    5360:	9c 91       	ld	r25, X
    5362:	55 97       	sbiw	r26, 0x15	; 21
    5364:	1e 96       	adiw	r26, 0x0e	; 14
    5366:	ed 91       	ld	r30, X+
    5368:	fc 91       	ld	r31, X
    536a:	1f 97       	sbiw	r26, 0x0f	; 15
    536c:	22 81       	ldd	r18, Z+2	; 0x02
    536e:	33 81       	ldd	r19, Z+3	; 0x03
    5370:	3c 83       	std	Y+4, r19	; 0x04
    5372:	2b 83       	std	Y+3, r18	; 0x03
    5374:	24 81       	ldd	r18, Z+4	; 0x04
    5376:	35 81       	ldd	r19, Z+5	; 0x05
    5378:	46 81       	ldd	r20, Z+6	; 0x06
    537a:	57 81       	ldd	r21, Z+7	; 0x07
    537c:	2d 83       	std	Y+5, r18	; 0x05
    537e:	3e 83       	std	Y+6, r19	; 0x06
    5380:	4f 83       	std	Y+7, r20	; 0x07
    5382:	58 87       	std	Y+8, r21	; 0x08
    5384:	20 85       	ldd	r18, Z+8	; 0x08
    5386:	31 85       	ldd	r19, Z+9	; 0x09
    5388:	42 85       	ldd	r20, Z+10	; 0x0a
    538a:	53 85       	ldd	r21, Z+11	; 0x0b
    538c:	29 87       	std	Y+9, r18	; 0x09
    538e:	3a 87       	std	Y+10, r19	; 0x0a
    5390:	4b 87       	std	Y+11, r20	; 0x0b
    5392:	5c 87       	std	Y+12, r21	; 0x0c
    5394:	24 85       	ldd	r18, Z+12	; 0x0c
    5396:	2d 87       	std	Y+13, r18	; 0x0d
    5398:	25 85       	ldd	r18, Z+13	; 0x0d
    539a:	2e 87       	std	Y+14, r18	; 0x0e
    539c:	26 85       	ldd	r18, Z+14	; 0x0e
    539e:	37 85       	ldd	r19, Z+15	; 0x0f
    53a0:	38 8b       	std	Y+16, r19	; 0x10
    53a2:	2f 87       	std	Y+15, r18	; 0x0f
    53a4:	20 89       	ldd	r18, Z+16	; 0x10
    53a6:	29 8b       	std	Y+17, r18	; 0x11
    53a8:	21 89       	ldd	r18, Z+17	; 0x11
    53aa:	32 89       	ldd	r19, Z+18	; 0x12
    53ac:	3b 8b       	std	Y+19, r19	; 0x13
    53ae:	2a 8b       	std	Y+18, r18	; 0x12
    53b0:	23 89       	ldd	r18, Z+19	; 0x13
    53b2:	34 89       	ldd	r19, Z+20	; 0x14
    53b4:	3d 8b       	std	Y+21, r19	; 0x15
    53b6:	2c 8b       	std	Y+20, r18	; 0x14
    53b8:	25 89       	ldd	r18, Z+21	; 0x15
    53ba:	36 89       	ldd	r19, Z+22	; 0x16
    53bc:	3f 8b       	std	Y+23, r19	; 0x17
    53be:	2e 8b       	std	Y+22, r18	; 0x16
    53c0:	27 89       	ldd	r18, Z+23	; 0x17
    53c2:	30 8d       	ldd	r19, Z+24	; 0x18
    53c4:	39 8f       	std	Y+25, r19	; 0x19
    53c6:	28 8f       	std	Y+24, r18	; 0x18
    53c8:	21 8d       	ldd	r18, Z+25	; 0x19
    53ca:	32 8d       	ldd	r19, Z+26	; 0x1a
    53cc:	3b 8f       	std	Y+27, r19	; 0x1b
    53ce:	2a 8f       	std	Y+26, r18	; 0x1a
    53d0:	33 8d       	ldd	r19, Z+27	; 0x1b
    53d2:	31 70       	andi	r19, 0x01	; 1
    53d4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    53d6:	2e 7f       	andi	r18, 0xFE	; 254
    53d8:	23 2b       	or	r18, r19
    53da:	2c 8f       	std	Y+28, r18	; 0x1c
    53dc:	33 8d       	ldd	r19, Z+27	; 0x1b
    53de:	32 70       	andi	r19, 0x02	; 2
    53e0:	2d 7f       	andi	r18, 0xFD	; 253
    53e2:	23 2b       	or	r18, r19
    53e4:	2c 8f       	std	Y+28, r18	; 0x1c
    53e6:	24 e2       	ldi	r18, 0x24	; 36
    53e8:	37 e0       	ldi	r19, 0x07	; 7
    53ea:	3a 83       	std	Y+2, r19	; 0x02
    53ec:	29 83       	std	Y+1, r18	; 0x01
    53ee:	24 8d       	ldd	r18, Z+28	; 0x1c
    53f0:	35 8d       	ldd	r19, Z+29	; 0x1d
    53f2:	46 8d       	ldd	r20, Z+30	; 0x1e
    53f4:	57 8d       	ldd	r21, Z+31	; 0x1f
    53f6:	2d 8f       	std	Y+29, r18	; 0x1d
    53f8:	3e 8f       	std	Y+30, r19	; 0x1e
    53fa:	4f 8f       	std	Y+31, r20	; 0x1f
    53fc:	58 a3       	std	Y+32, r21	; 0x20
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    53fe:	1a 96       	adiw	r26, 0x0a	; 10
    5400:	4d 91       	ld	r20, X+
    5402:	5c 91       	ld	r21, X
    5404:	1b 97       	sbiw	r26, 0x0b	; 11
 */

void Menu::windMenu() {
	if (button0Bouncer == HIGH) {

		wind->eraseWindBox(*lcd, getMenuState());
    5406:	8e 01       	movw	r16, r28
    5408:	0f 5f       	subi	r16, 0xFF	; 255
    540a:	1f 4f       	sbci	r17, 0xFF	; 255
    540c:	b8 01       	movw	r22, r16
    540e:	0e 94 4a 34 	call	0x6894	; 0x6894 <_ZN4Wind12eraseWindBoxE3Lcdi>
    5412:	c8 01       	movw	r24, r16
    5414:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		menuState++;
    5418:	f7 01       	movw	r30, r14
    541a:	82 85       	ldd	r24, Z+10	; 0x0a
    541c:	93 85       	ldd	r25, Z+11	; 0x0b
    541e:	01 96       	adiw	r24, 0x01	; 1
    5420:	93 87       	std	Z+11, r25	; 0x0b
    5422:	82 87       	std	Z+10, r24	; 0x0a
		if (menuState > WINDMAXMENU)
    5424:	82 85       	ldd	r24, Z+10	; 0x0a
    5426:	93 85       	ldd	r25, Z+11	; 0x0b
    5428:	87 31       	cpi	r24, 0x17	; 23
    542a:	91 05       	cpc	r25, r1
    542c:	24 f0       	brlt	.+8      	; 0x5436 <_ZN4Menu8windMenuEv+0x10c>
			menuState = WINDMINMENU;
    542e:	84 e1       	ldi	r24, 0x14	; 20
    5430:	90 e0       	ldi	r25, 0x00	; 0
    5432:	93 87       	std	Z+11, r25	; 0x0b
    5434:	82 87       	std	Z+10, r24	; 0x0a
		wind->drawWindBox(*lcd, getMenuState());
    5436:	d7 01       	movw	r26, r14
    5438:	54 96       	adiw	r26, 0x14	; 20
    543a:	8d 91       	ld	r24, X+
    543c:	9c 91       	ld	r25, X
    543e:	55 97       	sbiw	r26, 0x15	; 21
    5440:	1e 96       	adiw	r26, 0x0e	; 14
    5442:	ed 91       	ld	r30, X+
    5444:	fc 91       	ld	r31, X
    5446:	1f 97       	sbiw	r26, 0x0f	; 15
    5448:	22 81       	ldd	r18, Z+2	; 0x02
    544a:	33 81       	ldd	r19, Z+3	; 0x03
    544c:	3c a3       	std	Y+36, r19	; 0x24
    544e:	2b a3       	std	Y+35, r18	; 0x23
    5450:	24 81       	ldd	r18, Z+4	; 0x04
    5452:	35 81       	ldd	r19, Z+5	; 0x05
    5454:	46 81       	ldd	r20, Z+6	; 0x06
    5456:	57 81       	ldd	r21, Z+7	; 0x07
    5458:	2d a3       	std	Y+37, r18	; 0x25
    545a:	3e a3       	std	Y+38, r19	; 0x26
    545c:	4f a3       	std	Y+39, r20	; 0x27
    545e:	58 a7       	std	Y+40, r21	; 0x28
    5460:	20 85       	ldd	r18, Z+8	; 0x08
    5462:	31 85       	ldd	r19, Z+9	; 0x09
    5464:	42 85       	ldd	r20, Z+10	; 0x0a
    5466:	53 85       	ldd	r21, Z+11	; 0x0b
    5468:	29 a7       	std	Y+41, r18	; 0x29
    546a:	3a a7       	std	Y+42, r19	; 0x2a
    546c:	4b a7       	std	Y+43, r20	; 0x2b
    546e:	5c a7       	std	Y+44, r21	; 0x2c
    5470:	24 85       	ldd	r18, Z+12	; 0x0c
    5472:	2d a7       	std	Y+45, r18	; 0x2d
    5474:	25 85       	ldd	r18, Z+13	; 0x0d
    5476:	2e a7       	std	Y+46, r18	; 0x2e
    5478:	26 85       	ldd	r18, Z+14	; 0x0e
    547a:	37 85       	ldd	r19, Z+15	; 0x0f
    547c:	38 ab       	std	Y+48, r19	; 0x30
    547e:	2f a7       	std	Y+47, r18	; 0x2f
    5480:	20 89       	ldd	r18, Z+16	; 0x10
    5482:	29 ab       	std	Y+49, r18	; 0x31
    5484:	21 89       	ldd	r18, Z+17	; 0x11
    5486:	32 89       	ldd	r19, Z+18	; 0x12
    5488:	3b ab       	std	Y+51, r19	; 0x33
    548a:	2a ab       	std	Y+50, r18	; 0x32
    548c:	23 89       	ldd	r18, Z+19	; 0x13
    548e:	34 89       	ldd	r19, Z+20	; 0x14
    5490:	3d ab       	std	Y+53, r19	; 0x35
    5492:	2c ab       	std	Y+52, r18	; 0x34
    5494:	25 89       	ldd	r18, Z+21	; 0x15
    5496:	36 89       	ldd	r19, Z+22	; 0x16
    5498:	3f ab       	std	Y+55, r19	; 0x37
    549a:	2e ab       	std	Y+54, r18	; 0x36
    549c:	27 89       	ldd	r18, Z+23	; 0x17
    549e:	30 8d       	ldd	r19, Z+24	; 0x18
    54a0:	39 af       	std	Y+57, r19	; 0x39
    54a2:	28 af       	std	Y+56, r18	; 0x38
    54a4:	21 8d       	ldd	r18, Z+25	; 0x19
    54a6:	32 8d       	ldd	r19, Z+26	; 0x1a
    54a8:	3b af       	std	Y+59, r19	; 0x3b
    54aa:	2a af       	std	Y+58, r18	; 0x3a
    54ac:	33 8d       	ldd	r19, Z+27	; 0x1b
    54ae:	31 70       	andi	r19, 0x01	; 1
    54b0:	2c ad       	ldd	r18, Y+60	; 0x3c
    54b2:	2e 7f       	andi	r18, 0xFE	; 254
    54b4:	23 2b       	or	r18, r19
    54b6:	2c af       	std	Y+60, r18	; 0x3c
    54b8:	33 8d       	ldd	r19, Z+27	; 0x1b
    54ba:	32 70       	andi	r19, 0x02	; 2
    54bc:	2d 7f       	andi	r18, 0xFD	; 253
    54be:	23 2b       	or	r18, r19
    54c0:	2c af       	std	Y+60, r18	; 0x3c
    54c2:	54 e2       	ldi	r21, 0x24	; 36
    54c4:	c5 2e       	mov	r12, r21
    54c6:	57 e0       	ldi	r21, 0x07	; 7
    54c8:	d5 2e       	mov	r13, r21
    54ca:	da a2       	std	Y+34, r13	; 0x22
    54cc:	c9 a2       	std	Y+33, r12	; 0x21
    54ce:	24 8d       	ldd	r18, Z+28	; 0x1c
    54d0:	35 8d       	ldd	r19, Z+29	; 0x1d
    54d2:	46 8d       	ldd	r20, Z+30	; 0x1e
    54d4:	57 8d       	ldd	r21, Z+31	; 0x1f
    54d6:	fe 01       	movw	r30, r28
    54d8:	fd 96       	adiw	r30, 0x3d	; 61
    54da:	20 83       	st	Z, r18
    54dc:	31 83       	std	Z+1, r19	; 0x01
    54de:	42 83       	std	Z+2, r20	; 0x02
    54e0:	53 83       	std	Z+3, r21	; 0x03
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    54e2:	1a 96       	adiw	r26, 0x0a	; 10
    54e4:	4d 91       	ld	r20, X+
    54e6:	5c 91       	ld	r21, X
    54e8:	1b 97       	sbiw	r26, 0x0b	; 11

		wind->eraseWindBox(*lcd, getMenuState());
		menuState++;
		if (menuState > WINDMAXMENU)
			menuState = WINDMINMENU;
		wind->drawWindBox(*lcd, getMenuState());
    54ea:	8e 01       	movw	r16, r28
    54ec:	0f 5d       	subi	r16, 0xDF	; 223
    54ee:	1f 4f       	sbci	r17, 0xFF	; 255
    54f0:	b8 01       	movw	r22, r16
    54f2:	0e 94 11 34 	call	0x6822	; 0x6822 <_ZN4Wind11drawWindBoxE3Lcdi>
    54f6:	c8 01       	movw	r24, r16
    54f8:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		wind->drawWindScreen(*lcd,getMenuLevel());
    54fc:	f7 01       	movw	r30, r14
    54fe:	84 89       	ldd	r24, Z+20	; 0x14
    5500:	95 89       	ldd	r25, Z+21	; 0x15
    5502:	06 84       	ldd	r0, Z+14	; 0x0e
    5504:	f7 85       	ldd	r31, Z+15	; 0x0f
    5506:	e0 2d       	mov	r30, r0
    5508:	22 81       	ldd	r18, Z+2	; 0x02
    550a:	33 81       	ldd	r19, Z+3	; 0x03
    550c:	de 01       	movw	r26, r28
    550e:	ad 5b       	subi	r26, 0xBD	; 189
    5510:	bf 4f       	sbci	r27, 0xFF	; 255
    5512:	2d 93       	st	X+, r18
    5514:	3c 93       	st	X, r19
    5516:	24 81       	ldd	r18, Z+4	; 0x04
    5518:	35 81       	ldd	r19, Z+5	; 0x05
    551a:	46 81       	ldd	r20, Z+6	; 0x06
    551c:	57 81       	ldd	r21, Z+7	; 0x07
    551e:	de 01       	movw	r26, r28
    5520:	ab 5b       	subi	r26, 0xBB	; 187
    5522:	bf 4f       	sbci	r27, 0xFF	; 255
    5524:	2d 93       	st	X+, r18
    5526:	3d 93       	st	X+, r19
    5528:	4d 93       	st	X+, r20
    552a:	5c 93       	st	X, r21
    552c:	13 97       	sbiw	r26, 0x03	; 3
    552e:	20 85       	ldd	r18, Z+8	; 0x08
    5530:	31 85       	ldd	r19, Z+9	; 0x09
    5532:	42 85       	ldd	r20, Z+10	; 0x0a
    5534:	53 85       	ldd	r21, Z+11	; 0x0b
    5536:	de 01       	movw	r26, r28
    5538:	a7 5b       	subi	r26, 0xB7	; 183
    553a:	bf 4f       	sbci	r27, 0xFF	; 255
    553c:	2d 93       	st	X+, r18
    553e:	3d 93       	st	X+, r19
    5540:	4d 93       	st	X+, r20
    5542:	5c 93       	st	X, r21
    5544:	13 97       	sbiw	r26, 0x03	; 3
    5546:	24 85       	ldd	r18, Z+12	; 0x0c
    5548:	de 01       	movw	r26, r28
    554a:	a3 5b       	subi	r26, 0xB3	; 179
    554c:	bf 4f       	sbci	r27, 0xFF	; 255
    554e:	2c 93       	st	X, r18
    5550:	25 85       	ldd	r18, Z+13	; 0x0d
    5552:	de 01       	movw	r26, r28
    5554:	a2 5b       	subi	r26, 0xB2	; 178
    5556:	bf 4f       	sbci	r27, 0xFF	; 255
    5558:	2c 93       	st	X, r18
    555a:	26 85       	ldd	r18, Z+14	; 0x0e
    555c:	37 85       	ldd	r19, Z+15	; 0x0f
    555e:	de 01       	movw	r26, r28
    5560:	a1 5b       	subi	r26, 0xB1	; 177
    5562:	bf 4f       	sbci	r27, 0xFF	; 255
    5564:	2d 93       	st	X+, r18
    5566:	3c 93       	st	X, r19
    5568:	20 89       	ldd	r18, Z+16	; 0x10
    556a:	de 01       	movw	r26, r28
    556c:	af 5a       	subi	r26, 0xAF	; 175
    556e:	bf 4f       	sbci	r27, 0xFF	; 255
    5570:	2c 93       	st	X, r18
    5572:	21 89       	ldd	r18, Z+17	; 0x11
    5574:	32 89       	ldd	r19, Z+18	; 0x12
    5576:	de 01       	movw	r26, r28
    5578:	ae 5a       	subi	r26, 0xAE	; 174
    557a:	bf 4f       	sbci	r27, 0xFF	; 255
    557c:	2d 93       	st	X+, r18
    557e:	3c 93       	st	X, r19
    5580:	23 89       	ldd	r18, Z+19	; 0x13
    5582:	34 89       	ldd	r19, Z+20	; 0x14
    5584:	de 01       	movw	r26, r28
    5586:	ac 5a       	subi	r26, 0xAC	; 172
    5588:	bf 4f       	sbci	r27, 0xFF	; 255
    558a:	2d 93       	st	X+, r18
    558c:	3c 93       	st	X, r19
    558e:	25 89       	ldd	r18, Z+21	; 0x15
    5590:	36 89       	ldd	r19, Z+22	; 0x16
    5592:	de 01       	movw	r26, r28
    5594:	aa 5a       	subi	r26, 0xAA	; 170
    5596:	bf 4f       	sbci	r27, 0xFF	; 255
    5598:	2d 93       	st	X+, r18
    559a:	3c 93       	st	X, r19
    559c:	27 89       	ldd	r18, Z+23	; 0x17
    559e:	30 8d       	ldd	r19, Z+24	; 0x18
    55a0:	de 01       	movw	r26, r28
    55a2:	a8 5a       	subi	r26, 0xA8	; 168
    55a4:	bf 4f       	sbci	r27, 0xFF	; 255
    55a6:	2d 93       	st	X+, r18
    55a8:	3c 93       	st	X, r19
    55aa:	21 8d       	ldd	r18, Z+25	; 0x19
    55ac:	32 8d       	ldd	r19, Z+26	; 0x1a
    55ae:	de 01       	movw	r26, r28
    55b0:	a6 5a       	subi	r26, 0xA6	; 166
    55b2:	bf 4f       	sbci	r27, 0xFF	; 255
    55b4:	2d 93       	st	X+, r18
    55b6:	3c 93       	st	X, r19
    55b8:	33 8d       	ldd	r19, Z+27	; 0x1b
    55ba:	31 70       	andi	r19, 0x01	; 1
    55bc:	de 01       	movw	r26, r28
    55be:	a4 5a       	subi	r26, 0xA4	; 164
    55c0:	bf 4f       	sbci	r27, 0xFF	; 255
    55c2:	2c 91       	ld	r18, X
    55c4:	2e 7f       	andi	r18, 0xFE	; 254
    55c6:	23 2b       	or	r18, r19
    55c8:	2c 93       	st	X, r18
    55ca:	33 8d       	ldd	r19, Z+27	; 0x1b
    55cc:	32 70       	andi	r19, 0x02	; 2
    55ce:	2d 7f       	andi	r18, 0xFD	; 253
    55d0:	23 2b       	or	r18, r19
    55d2:	2c 93       	st	X, r18
    55d4:	8e 01       	movw	r16, r28
    55d6:	0f 5b       	subi	r16, 0xBF	; 191
    55d8:	1f 4f       	sbci	r17, 0xFF	; 255
    55da:	d8 01       	movw	r26, r16
    55dc:	cd 92       	st	X+, r12
    55de:	dc 92       	st	X, r13
    55e0:	24 8d       	ldd	r18, Z+28	; 0x1c
    55e2:	35 8d       	ldd	r19, Z+29	; 0x1d
    55e4:	46 8d       	ldd	r20, Z+30	; 0x1e
    55e6:	57 8d       	ldd	r21, Z+31	; 0x1f
    55e8:	fe 01       	movw	r30, r28
    55ea:	e3 5a       	subi	r30, 0xA3	; 163
    55ec:	ff 4f       	sbci	r31, 0xFF	; 255
    55ee:	20 83       	st	Z, r18
    55f0:	31 83       	std	Z+1, r19	; 0x01
    55f2:	42 83       	std	Z+2, r20	; 0x02
    55f4:	53 83       	std	Z+3, r21	; 0x03
		}
	}
}

int Menu::getMenuLevel() {
	return menuLevel;
    55f6:	f7 01       	movw	r30, r14
    55f8:	44 85       	ldd	r20, Z+12	; 0x0c
    55fa:	55 85       	ldd	r21, Z+13	; 0x0d
		wind->eraseWindBox(*lcd, getMenuState());
		menuState++;
		if (menuState > WINDMAXMENU)
			menuState = WINDMINMENU;
		wind->drawWindBox(*lcd, getMenuState());
		wind->drawWindScreen(*lcd,getMenuLevel());
    55fc:	b8 01       	movw	r22, r16
    55fe:	0e 94 62 33 	call	0x66c4	; 0x66c4 <_ZN4Wind14drawWindScreenE3Lcdi>
    5602:	c8 01       	movw	r24, r16
    5604:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		button0Bouncer=LOW;
    5608:	d7 01       	movw	r26, r14
    560a:	12 96       	adiw	r26, 0x02	; 2
    560c:	1c 92       	st	X, r1
    560e:	12 97       	sbiw	r26, 0x02	; 2
		return;
    5610:	4f c2       	rjmp	.+1182   	; 0x5ab0 <_ZN4Menu8windMenuEv+0x786>
	}
	if (button1Bouncer == HIGH) {
    5612:	f7 01       	movw	r30, r14
    5614:	83 81       	ldd	r24, Z+3	; 0x03
    5616:	88 23       	and	r24, r24
    5618:	09 f4       	brne	.+2      	; 0x561c <_ZN4Menu8windMenuEv+0x2f2>
    561a:	8b c1       	rjmp	.+790    	; 0x5932 <_ZN4Menu8windMenuEv+0x608>

		wind->eraseWindBox(*lcd, getMenuState());
    561c:	84 89       	ldd	r24, Z+20	; 0x14
    561e:	95 89       	ldd	r25, Z+21	; 0x15
    5620:	06 84       	ldd	r0, Z+14	; 0x0e
    5622:	f7 85       	ldd	r31, Z+15	; 0x0f
    5624:	e0 2d       	mov	r30, r0
    5626:	8e 01       	movw	r16, r28
    5628:	0f 59       	subi	r16, 0x9F	; 159
    562a:	1f 4f       	sbci	r17, 0xFF	; 255
    562c:	22 81       	ldd	r18, Z+2	; 0x02
    562e:	33 81       	ldd	r19, Z+3	; 0x03
    5630:	d8 01       	movw	r26, r16
    5632:	13 96       	adiw	r26, 0x03	; 3
    5634:	3c 93       	st	X, r19
    5636:	2e 93       	st	-X, r18
    5638:	12 97       	sbiw	r26, 0x02	; 2
    563a:	24 81       	ldd	r18, Z+4	; 0x04
    563c:	35 81       	ldd	r19, Z+5	; 0x05
    563e:	46 81       	ldd	r20, Z+6	; 0x06
    5640:	57 81       	ldd	r21, Z+7	; 0x07
    5642:	14 96       	adiw	r26, 0x04	; 4
    5644:	2d 93       	st	X+, r18
    5646:	3d 93       	st	X+, r19
    5648:	4d 93       	st	X+, r20
    564a:	5c 93       	st	X, r21
    564c:	17 97       	sbiw	r26, 0x07	; 7
    564e:	20 85       	ldd	r18, Z+8	; 0x08
    5650:	31 85       	ldd	r19, Z+9	; 0x09
    5652:	42 85       	ldd	r20, Z+10	; 0x0a
    5654:	53 85       	ldd	r21, Z+11	; 0x0b
    5656:	18 96       	adiw	r26, 0x08	; 8
    5658:	2d 93       	st	X+, r18
    565a:	3d 93       	st	X+, r19
    565c:	4d 93       	st	X+, r20
    565e:	5c 93       	st	X, r21
    5660:	1b 97       	sbiw	r26, 0x0b	; 11
    5662:	24 85       	ldd	r18, Z+12	; 0x0c
    5664:	1c 96       	adiw	r26, 0x0c	; 12
    5666:	2c 93       	st	X, r18
    5668:	1c 97       	sbiw	r26, 0x0c	; 12
    566a:	25 85       	ldd	r18, Z+13	; 0x0d
    566c:	1d 96       	adiw	r26, 0x0d	; 13
    566e:	2c 93       	st	X, r18
    5670:	1d 97       	sbiw	r26, 0x0d	; 13
    5672:	26 85       	ldd	r18, Z+14	; 0x0e
    5674:	37 85       	ldd	r19, Z+15	; 0x0f
    5676:	1f 96       	adiw	r26, 0x0f	; 15
    5678:	3c 93       	st	X, r19
    567a:	2e 93       	st	-X, r18
    567c:	1e 97       	sbiw	r26, 0x0e	; 14
    567e:	20 89       	ldd	r18, Z+16	; 0x10
    5680:	50 96       	adiw	r26, 0x10	; 16
    5682:	2c 93       	st	X, r18
    5684:	50 97       	sbiw	r26, 0x10	; 16
    5686:	21 89       	ldd	r18, Z+17	; 0x11
    5688:	32 89       	ldd	r19, Z+18	; 0x12
    568a:	52 96       	adiw	r26, 0x12	; 18
    568c:	3c 93       	st	X, r19
    568e:	2e 93       	st	-X, r18
    5690:	51 97       	sbiw	r26, 0x11	; 17
    5692:	23 89       	ldd	r18, Z+19	; 0x13
    5694:	34 89       	ldd	r19, Z+20	; 0x14
    5696:	54 96       	adiw	r26, 0x14	; 20
    5698:	3c 93       	st	X, r19
    569a:	2e 93       	st	-X, r18
    569c:	53 97       	sbiw	r26, 0x13	; 19
    569e:	25 89       	ldd	r18, Z+21	; 0x15
    56a0:	36 89       	ldd	r19, Z+22	; 0x16
    56a2:	56 96       	adiw	r26, 0x16	; 22
    56a4:	3c 93       	st	X, r19
    56a6:	2e 93       	st	-X, r18
    56a8:	55 97       	sbiw	r26, 0x15	; 21
    56aa:	27 89       	ldd	r18, Z+23	; 0x17
    56ac:	30 8d       	ldd	r19, Z+24	; 0x18
    56ae:	58 96       	adiw	r26, 0x18	; 24
    56b0:	3c 93       	st	X, r19
    56b2:	2e 93       	st	-X, r18
    56b4:	57 97       	sbiw	r26, 0x17	; 23
    56b6:	21 8d       	ldd	r18, Z+25	; 0x19
    56b8:	32 8d       	ldd	r19, Z+26	; 0x1a
    56ba:	5a 96       	adiw	r26, 0x1a	; 26
    56bc:	3c 93       	st	X, r19
    56be:	2e 93       	st	-X, r18
    56c0:	59 97       	sbiw	r26, 0x19	; 25
    56c2:	33 8d       	ldd	r19, Z+27	; 0x1b
    56c4:	31 70       	andi	r19, 0x01	; 1
    56c6:	5b 96       	adiw	r26, 0x1b	; 27
    56c8:	2c 91       	ld	r18, X
    56ca:	5b 97       	sbiw	r26, 0x1b	; 27
    56cc:	2e 7f       	andi	r18, 0xFE	; 254
    56ce:	23 2b       	or	r18, r19
    56d0:	5b 96       	adiw	r26, 0x1b	; 27
    56d2:	2c 93       	st	X, r18
    56d4:	5b 97       	sbiw	r26, 0x1b	; 27
    56d6:	33 8d       	ldd	r19, Z+27	; 0x1b
    56d8:	32 70       	andi	r19, 0x02	; 2
    56da:	2d 7f       	andi	r18, 0xFD	; 253
    56dc:	23 2b       	or	r18, r19
    56de:	5b 96       	adiw	r26, 0x1b	; 27
    56e0:	2c 93       	st	X, r18
    56e2:	5b 97       	sbiw	r26, 0x1b	; 27
    56e4:	24 e2       	ldi	r18, 0x24	; 36
    56e6:	37 e0       	ldi	r19, 0x07	; 7
    56e8:	2d 93       	st	X+, r18
    56ea:	3c 93       	st	X, r19
    56ec:	24 8d       	ldd	r18, Z+28	; 0x1c
    56ee:	35 8d       	ldd	r19, Z+29	; 0x1d
    56f0:	46 8d       	ldd	r20, Z+30	; 0x1e
    56f2:	57 8d       	ldd	r21, Z+31	; 0x1f
    56f4:	f8 01       	movw	r30, r16
    56f6:	24 8f       	std	Z+28, r18	; 0x1c
    56f8:	35 8f       	std	Z+29, r19	; 0x1d
    56fa:	46 8f       	std	Z+30, r20	; 0x1e
    56fc:	57 8f       	std	Z+31, r21	; 0x1f
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    56fe:	d7 01       	movw	r26, r14
    5700:	1a 96       	adiw	r26, 0x0a	; 10
    5702:	4d 91       	ld	r20, X+
    5704:	5c 91       	ld	r21, X
    5706:	1b 97       	sbiw	r26, 0x0b	; 11
		button0Bouncer=LOW;
		return;
	}
	if (button1Bouncer == HIGH) {

		wind->eraseWindBox(*lcd, getMenuState());
    5708:	b8 01       	movw	r22, r16
    570a:	0e 94 4a 34 	call	0x6894	; 0x6894 <_ZN4Wind12eraseWindBoxE3Lcdi>
    570e:	c8 01       	movw	r24, r16
    5710:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		menuState--;
    5714:	f7 01       	movw	r30, r14
    5716:	82 85       	ldd	r24, Z+10	; 0x0a
    5718:	93 85       	ldd	r25, Z+11	; 0x0b
    571a:	01 97       	sbiw	r24, 0x01	; 1
    571c:	93 87       	std	Z+11, r25	; 0x0b
    571e:	82 87       	std	Z+10, r24	; 0x0a
		if (menuState < WINDMINMENU)
    5720:	82 85       	ldd	r24, Z+10	; 0x0a
    5722:	93 85       	ldd	r25, Z+11	; 0x0b
    5724:	84 31       	cpi	r24, 0x14	; 20
    5726:	91 05       	cpc	r25, r1
    5728:	24 f4       	brge	.+8      	; 0x5732 <_ZN4Menu8windMenuEv+0x408>
			menuState = WINDMAXMENU;
    572a:	86 e1       	ldi	r24, 0x16	; 22
    572c:	90 e0       	ldi	r25, 0x00	; 0
    572e:	93 87       	std	Z+11, r25	; 0x0b
    5730:	82 87       	std	Z+10, r24	; 0x0a
		wind->drawWindBox(*lcd, getMenuState());
    5732:	d7 01       	movw	r26, r14
    5734:	54 96       	adiw	r26, 0x14	; 20
    5736:	8d 91       	ld	r24, X+
    5738:	9c 91       	ld	r25, X
    573a:	55 97       	sbiw	r26, 0x15	; 21
    573c:	1e 96       	adiw	r26, 0x0e	; 14
    573e:	ed 91       	ld	r30, X+
    5740:	fc 91       	ld	r31, X
    5742:	1f 97       	sbiw	r26, 0x0f	; 15
    5744:	8e 01       	movw	r16, r28
    5746:	0f 57       	subi	r16, 0x7F	; 127
    5748:	1f 4f       	sbci	r17, 0xFF	; 255
    574a:	22 81       	ldd	r18, Z+2	; 0x02
    574c:	33 81       	ldd	r19, Z+3	; 0x03
    574e:	d8 01       	movw	r26, r16
    5750:	13 96       	adiw	r26, 0x03	; 3
    5752:	3c 93       	st	X, r19
    5754:	2e 93       	st	-X, r18
    5756:	12 97       	sbiw	r26, 0x02	; 2
    5758:	24 81       	ldd	r18, Z+4	; 0x04
    575a:	35 81       	ldd	r19, Z+5	; 0x05
    575c:	46 81       	ldd	r20, Z+6	; 0x06
    575e:	57 81       	ldd	r21, Z+7	; 0x07
    5760:	14 96       	adiw	r26, 0x04	; 4
    5762:	2d 93       	st	X+, r18
    5764:	3d 93       	st	X+, r19
    5766:	4d 93       	st	X+, r20
    5768:	5c 93       	st	X, r21
    576a:	17 97       	sbiw	r26, 0x07	; 7
    576c:	20 85       	ldd	r18, Z+8	; 0x08
    576e:	31 85       	ldd	r19, Z+9	; 0x09
    5770:	42 85       	ldd	r20, Z+10	; 0x0a
    5772:	53 85       	ldd	r21, Z+11	; 0x0b
    5774:	18 96       	adiw	r26, 0x08	; 8
    5776:	2d 93       	st	X+, r18
    5778:	3d 93       	st	X+, r19
    577a:	4d 93       	st	X+, r20
    577c:	5c 93       	st	X, r21
    577e:	1b 97       	sbiw	r26, 0x0b	; 11
    5780:	24 85       	ldd	r18, Z+12	; 0x0c
    5782:	1c 96       	adiw	r26, 0x0c	; 12
    5784:	2c 93       	st	X, r18
    5786:	1c 97       	sbiw	r26, 0x0c	; 12
    5788:	25 85       	ldd	r18, Z+13	; 0x0d
    578a:	1d 96       	adiw	r26, 0x0d	; 13
    578c:	2c 93       	st	X, r18
    578e:	1d 97       	sbiw	r26, 0x0d	; 13
    5790:	26 85       	ldd	r18, Z+14	; 0x0e
    5792:	37 85       	ldd	r19, Z+15	; 0x0f
    5794:	1f 96       	adiw	r26, 0x0f	; 15
    5796:	3c 93       	st	X, r19
    5798:	2e 93       	st	-X, r18
    579a:	1e 97       	sbiw	r26, 0x0e	; 14
    579c:	20 89       	ldd	r18, Z+16	; 0x10
    579e:	50 96       	adiw	r26, 0x10	; 16
    57a0:	2c 93       	st	X, r18
    57a2:	50 97       	sbiw	r26, 0x10	; 16
    57a4:	21 89       	ldd	r18, Z+17	; 0x11
    57a6:	32 89       	ldd	r19, Z+18	; 0x12
    57a8:	52 96       	adiw	r26, 0x12	; 18
    57aa:	3c 93       	st	X, r19
    57ac:	2e 93       	st	-X, r18
    57ae:	51 97       	sbiw	r26, 0x11	; 17
    57b0:	23 89       	ldd	r18, Z+19	; 0x13
    57b2:	34 89       	ldd	r19, Z+20	; 0x14
    57b4:	54 96       	adiw	r26, 0x14	; 20
    57b6:	3c 93       	st	X, r19
    57b8:	2e 93       	st	-X, r18
    57ba:	53 97       	sbiw	r26, 0x13	; 19
    57bc:	25 89       	ldd	r18, Z+21	; 0x15
    57be:	36 89       	ldd	r19, Z+22	; 0x16
    57c0:	56 96       	adiw	r26, 0x16	; 22
    57c2:	3c 93       	st	X, r19
    57c4:	2e 93       	st	-X, r18
    57c6:	55 97       	sbiw	r26, 0x15	; 21
    57c8:	27 89       	ldd	r18, Z+23	; 0x17
    57ca:	30 8d       	ldd	r19, Z+24	; 0x18
    57cc:	58 96       	adiw	r26, 0x18	; 24
    57ce:	3c 93       	st	X, r19
    57d0:	2e 93       	st	-X, r18
    57d2:	57 97       	sbiw	r26, 0x17	; 23
    57d4:	21 8d       	ldd	r18, Z+25	; 0x19
    57d6:	32 8d       	ldd	r19, Z+26	; 0x1a
    57d8:	5a 96       	adiw	r26, 0x1a	; 26
    57da:	3c 93       	st	X, r19
    57dc:	2e 93       	st	-X, r18
    57de:	59 97       	sbiw	r26, 0x19	; 25
    57e0:	33 8d       	ldd	r19, Z+27	; 0x1b
    57e2:	31 70       	andi	r19, 0x01	; 1
    57e4:	5b 96       	adiw	r26, 0x1b	; 27
    57e6:	2c 91       	ld	r18, X
    57e8:	5b 97       	sbiw	r26, 0x1b	; 27
    57ea:	2e 7f       	andi	r18, 0xFE	; 254
    57ec:	23 2b       	or	r18, r19
    57ee:	5b 96       	adiw	r26, 0x1b	; 27
    57f0:	2c 93       	st	X, r18
    57f2:	5b 97       	sbiw	r26, 0x1b	; 27
    57f4:	33 8d       	ldd	r19, Z+27	; 0x1b
    57f6:	32 70       	andi	r19, 0x02	; 2
    57f8:	2d 7f       	andi	r18, 0xFD	; 253
    57fa:	23 2b       	or	r18, r19
    57fc:	5b 96       	adiw	r26, 0x1b	; 27
    57fe:	2c 93       	st	X, r18
    5800:	5b 97       	sbiw	r26, 0x1b	; 27
    5802:	44 e2       	ldi	r20, 0x24	; 36
    5804:	c4 2e       	mov	r12, r20
    5806:	47 e0       	ldi	r20, 0x07	; 7
    5808:	d4 2e       	mov	r13, r20
    580a:	cd 92       	st	X+, r12
    580c:	dc 92       	st	X, r13
    580e:	24 8d       	ldd	r18, Z+28	; 0x1c
    5810:	35 8d       	ldd	r19, Z+29	; 0x1d
    5812:	46 8d       	ldd	r20, Z+30	; 0x1e
    5814:	57 8d       	ldd	r21, Z+31	; 0x1f
    5816:	f8 01       	movw	r30, r16
    5818:	24 8f       	std	Z+28, r18	; 0x1c
    581a:	35 8f       	std	Z+29, r19	; 0x1d
    581c:	46 8f       	std	Z+30, r20	; 0x1e
    581e:	57 8f       	std	Z+31, r21	; 0x1f
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    5820:	d7 01       	movw	r26, r14
    5822:	1a 96       	adiw	r26, 0x0a	; 10
    5824:	4d 91       	ld	r20, X+
    5826:	5c 91       	ld	r21, X
    5828:	1b 97       	sbiw	r26, 0x0b	; 11

		wind->eraseWindBox(*lcd, getMenuState());
		menuState--;
		if (menuState < WINDMINMENU)
			menuState = WINDMAXMENU;
		wind->drawWindBox(*lcd, getMenuState());
    582a:	b8 01       	movw	r22, r16
    582c:	0e 94 11 34 	call	0x6822	; 0x6822 <_ZN4Wind11drawWindBoxE3Lcdi>
    5830:	c8 01       	movw	r24, r16
    5832:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		wind->drawWindScreen(*lcd,getMenuLevel());
    5836:	f7 01       	movw	r30, r14
    5838:	84 89       	ldd	r24, Z+20	; 0x14
    583a:	95 89       	ldd	r25, Z+21	; 0x15
    583c:	06 84       	ldd	r0, Z+14	; 0x0e
    583e:	f7 85       	ldd	r31, Z+15	; 0x0f
    5840:	e0 2d       	mov	r30, r0
    5842:	8e 01       	movw	r16, r28
    5844:	0f 55       	subi	r16, 0x5F	; 95
    5846:	1f 4f       	sbci	r17, 0xFF	; 255
    5848:	22 81       	ldd	r18, Z+2	; 0x02
    584a:	33 81       	ldd	r19, Z+3	; 0x03
    584c:	d8 01       	movw	r26, r16
    584e:	13 96       	adiw	r26, 0x03	; 3
    5850:	3c 93       	st	X, r19
    5852:	2e 93       	st	-X, r18
    5854:	12 97       	sbiw	r26, 0x02	; 2
    5856:	24 81       	ldd	r18, Z+4	; 0x04
    5858:	35 81       	ldd	r19, Z+5	; 0x05
    585a:	46 81       	ldd	r20, Z+6	; 0x06
    585c:	57 81       	ldd	r21, Z+7	; 0x07
    585e:	14 96       	adiw	r26, 0x04	; 4
    5860:	2d 93       	st	X+, r18
    5862:	3d 93       	st	X+, r19
    5864:	4d 93       	st	X+, r20
    5866:	5c 93       	st	X, r21
    5868:	17 97       	sbiw	r26, 0x07	; 7
    586a:	20 85       	ldd	r18, Z+8	; 0x08
    586c:	31 85       	ldd	r19, Z+9	; 0x09
    586e:	42 85       	ldd	r20, Z+10	; 0x0a
    5870:	53 85       	ldd	r21, Z+11	; 0x0b
    5872:	18 96       	adiw	r26, 0x08	; 8
    5874:	2d 93       	st	X+, r18
    5876:	3d 93       	st	X+, r19
    5878:	4d 93       	st	X+, r20
    587a:	5c 93       	st	X, r21
    587c:	1b 97       	sbiw	r26, 0x0b	; 11
    587e:	24 85       	ldd	r18, Z+12	; 0x0c
    5880:	1c 96       	adiw	r26, 0x0c	; 12
    5882:	2c 93       	st	X, r18
    5884:	1c 97       	sbiw	r26, 0x0c	; 12
    5886:	25 85       	ldd	r18, Z+13	; 0x0d
    5888:	1d 96       	adiw	r26, 0x0d	; 13
    588a:	2c 93       	st	X, r18
    588c:	1d 97       	sbiw	r26, 0x0d	; 13
    588e:	26 85       	ldd	r18, Z+14	; 0x0e
    5890:	37 85       	ldd	r19, Z+15	; 0x0f
    5892:	1f 96       	adiw	r26, 0x0f	; 15
    5894:	3c 93       	st	X, r19
    5896:	2e 93       	st	-X, r18
    5898:	1e 97       	sbiw	r26, 0x0e	; 14
    589a:	20 89       	ldd	r18, Z+16	; 0x10
    589c:	50 96       	adiw	r26, 0x10	; 16
    589e:	2c 93       	st	X, r18
    58a0:	50 97       	sbiw	r26, 0x10	; 16
    58a2:	21 89       	ldd	r18, Z+17	; 0x11
    58a4:	32 89       	ldd	r19, Z+18	; 0x12
    58a6:	52 96       	adiw	r26, 0x12	; 18
    58a8:	3c 93       	st	X, r19
    58aa:	2e 93       	st	-X, r18
    58ac:	51 97       	sbiw	r26, 0x11	; 17
    58ae:	23 89       	ldd	r18, Z+19	; 0x13
    58b0:	34 89       	ldd	r19, Z+20	; 0x14
    58b2:	54 96       	adiw	r26, 0x14	; 20
    58b4:	3c 93       	st	X, r19
    58b6:	2e 93       	st	-X, r18
    58b8:	53 97       	sbiw	r26, 0x13	; 19
    58ba:	25 89       	ldd	r18, Z+21	; 0x15
    58bc:	36 89       	ldd	r19, Z+22	; 0x16
    58be:	56 96       	adiw	r26, 0x16	; 22
    58c0:	3c 93       	st	X, r19
    58c2:	2e 93       	st	-X, r18
    58c4:	55 97       	sbiw	r26, 0x15	; 21
    58c6:	27 89       	ldd	r18, Z+23	; 0x17
    58c8:	30 8d       	ldd	r19, Z+24	; 0x18
    58ca:	58 96       	adiw	r26, 0x18	; 24
    58cc:	3c 93       	st	X, r19
    58ce:	2e 93       	st	-X, r18
    58d0:	57 97       	sbiw	r26, 0x17	; 23
    58d2:	21 8d       	ldd	r18, Z+25	; 0x19
    58d4:	32 8d       	ldd	r19, Z+26	; 0x1a
    58d6:	5a 96       	adiw	r26, 0x1a	; 26
    58d8:	3c 93       	st	X, r19
    58da:	2e 93       	st	-X, r18
    58dc:	59 97       	sbiw	r26, 0x19	; 25
    58de:	33 8d       	ldd	r19, Z+27	; 0x1b
    58e0:	31 70       	andi	r19, 0x01	; 1
    58e2:	5b 96       	adiw	r26, 0x1b	; 27
    58e4:	2c 91       	ld	r18, X
    58e6:	5b 97       	sbiw	r26, 0x1b	; 27
    58e8:	2e 7f       	andi	r18, 0xFE	; 254
    58ea:	23 2b       	or	r18, r19
    58ec:	5b 96       	adiw	r26, 0x1b	; 27
    58ee:	2c 93       	st	X, r18
    58f0:	5b 97       	sbiw	r26, 0x1b	; 27
    58f2:	33 8d       	ldd	r19, Z+27	; 0x1b
    58f4:	32 70       	andi	r19, 0x02	; 2
    58f6:	2d 7f       	andi	r18, 0xFD	; 253
    58f8:	23 2b       	or	r18, r19
    58fa:	5b 96       	adiw	r26, 0x1b	; 27
    58fc:	2c 93       	st	X, r18
    58fe:	5b 97       	sbiw	r26, 0x1b	; 27
    5900:	cd 92       	st	X+, r12
    5902:	dc 92       	st	X, r13
    5904:	24 8d       	ldd	r18, Z+28	; 0x1c
    5906:	35 8d       	ldd	r19, Z+29	; 0x1d
    5908:	46 8d       	ldd	r20, Z+30	; 0x1e
    590a:	57 8d       	ldd	r21, Z+31	; 0x1f
    590c:	f8 01       	movw	r30, r16
    590e:	24 8f       	std	Z+28, r18	; 0x1c
    5910:	35 8f       	std	Z+29, r19	; 0x1d
    5912:	46 8f       	std	Z+30, r20	; 0x1e
    5914:	57 8f       	std	Z+31, r21	; 0x1f
		}
	}
}

int Menu::getMenuLevel() {
	return menuLevel;
    5916:	d7 01       	movw	r26, r14
    5918:	1c 96       	adiw	r26, 0x0c	; 12
    591a:	4d 91       	ld	r20, X+
    591c:	5c 91       	ld	r21, X
    591e:	1d 97       	sbiw	r26, 0x0d	; 13
		wind->eraseWindBox(*lcd, getMenuState());
		menuState--;
		if (menuState < WINDMINMENU)
			menuState = WINDMAXMENU;
		wind->drawWindBox(*lcd, getMenuState());
		wind->drawWindScreen(*lcd,getMenuLevel());
    5920:	b8 01       	movw	r22, r16
    5922:	0e 94 62 33 	call	0x66c4	; 0x66c4 <_ZN4Wind14drawWindScreenE3Lcdi>
    5926:	c8 01       	movw	r24, r16
    5928:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		button1Bouncer=LOW;
    592c:	f7 01       	movw	r30, r14
    592e:	13 82       	std	Z+3, r1	; 0x03
		return;
    5930:	bf c0       	rjmp	.+382    	; 0x5ab0 <_ZN4Menu8windMenuEv+0x786>
	}
	if (button2Bouncer == HIGH) {
    5932:	d7 01       	movw	r26, r14
    5934:	14 96       	adiw	r26, 0x04	; 4
    5936:	8c 91       	ld	r24, X
    5938:	14 97       	sbiw	r26, 0x04	; 4
    593a:	88 23       	and	r24, r24
    593c:	09 f4       	brne	.+2      	; 0x5940 <_ZN4Menu8windMenuEv+0x616>
    593e:	b8 c0       	rjmp	.+368    	; 0x5ab0 <_ZN4Menu8windMenuEv+0x786>

		switch (menuState) {
    5940:	1a 96       	adiw	r26, 0x0a	; 10
    5942:	8d 91       	ld	r24, X+
    5944:	9c 91       	ld	r25, X
    5946:	1b 97       	sbiw	r26, 0x0b	; 11
    5948:	85 31       	cpi	r24, 0x15	; 21
    594a:	91 05       	cpc	r25, r1
    594c:	91 f0       	breq	.+36     	; 0x5972 <_ZN4Menu8windMenuEv+0x648>
    594e:	86 31       	cpi	r24, 0x16	; 22
    5950:	91 05       	cpc	r25, r1
    5952:	d1 f0       	breq	.+52     	; 0x5988 <_ZN4Menu8windMenuEv+0x65e>
    5954:	84 31       	cpi	r24, 0x14	; 20
    5956:	91 05       	cpc	r25, r1
    5958:	61 f5       	brne	.+88     	; 0x59b2 <_ZN4Menu8windMenuEv+0x688>
		case WINDSTATE:
			wind->setWindAlarm(!wind->getWindAlarm());
    595a:	f7 01       	movw	r30, r14
    595c:	04 89       	ldd	r16, Z+20	; 0x14
    595e:	15 89       	ldd	r17, Z+21	; 0x15
    5960:	c8 01       	movw	r24, r16
    5962:	0e 94 5f 33 	call	0x66be	; 0x66be <_ZN4Wind12getWindAlarmEv>
    5966:	61 e0       	ldi	r22, 0x01	; 1
    5968:	68 27       	eor	r22, r24
    596a:	c8 01       	movw	r24, r16
    596c:	0e 94 4e 33 	call	0x669c	; 0x669c <_ZN4Wind12setWindAlarmEb>
			break;
    5970:	20 c0       	rjmp	.+64     	; 0x59b2 <_ZN4Menu8windMenuEv+0x688>
		case WINDSPEED:
			menuLevel++;
    5972:	d7 01       	movw	r26, r14
    5974:	1c 96       	adiw	r26, 0x0c	; 12
    5976:	8d 91       	ld	r24, X+
    5978:	9c 91       	ld	r25, X
    597a:	1d 97       	sbiw	r26, 0x0d	; 13
    597c:	01 96       	adiw	r24, 0x01	; 1
    597e:	1d 96       	adiw	r26, 0x0d	; 13
    5980:	9c 93       	st	X, r25
    5982:	8e 93       	st	-X, r24
    5984:	1c 97       	sbiw	r26, 0x0c	; 12
			break;
    5986:	15 c0       	rjmp	.+42     	; 0x59b2 <_ZN4Menu8windMenuEv+0x688>
		case WINDRTN:
			lcd->clearLcd();
    5988:	f7 01       	movw	r30, r14
    598a:	86 85       	ldd	r24, Z+14	; 0x0e
    598c:	97 85       	ldd	r25, Z+15	; 0x0f
    598e:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <_ZN3Lcd8clearLcdEv>
			menuLevel--;
    5992:	d7 01       	movw	r26, r14
    5994:	1c 96       	adiw	r26, 0x0c	; 12
    5996:	8d 91       	ld	r24, X+
    5998:	9c 91       	ld	r25, X
    599a:	1d 97       	sbiw	r26, 0x0d	; 13
    599c:	01 97       	sbiw	r24, 0x01	; 1
    599e:	1d 96       	adiw	r26, 0x0d	; 13
    59a0:	9c 93       	st	X, r25
    59a2:	8e 93       	st	-X, r24
    59a4:	1c 97       	sbiw	r26, 0x0c	; 12
			menuState = WIND;
    59a6:	82 e0       	ldi	r24, 0x02	; 2
    59a8:	90 e0       	ldi	r25, 0x00	; 0
    59aa:	1b 96       	adiw	r26, 0x0b	; 11
    59ac:	9c 93       	st	X, r25
    59ae:	8e 93       	st	-X, r24
    59b0:	1a 97       	sbiw	r26, 0x0a	; 10
			break;

		}
		wind->drawWindScreen(*lcd, getMenuLevel());
    59b2:	f7 01       	movw	r30, r14
    59b4:	84 89       	ldd	r24, Z+20	; 0x14
    59b6:	95 89       	ldd	r25, Z+21	; 0x15
    59b8:	06 84       	ldd	r0, Z+14	; 0x0e
    59ba:	f7 85       	ldd	r31, Z+15	; 0x0f
    59bc:	e0 2d       	mov	r30, r0
    59be:	8e 01       	movw	r16, r28
    59c0:	0f 53       	subi	r16, 0x3F	; 63
    59c2:	1f 4f       	sbci	r17, 0xFF	; 255
    59c4:	22 81       	ldd	r18, Z+2	; 0x02
    59c6:	33 81       	ldd	r19, Z+3	; 0x03
    59c8:	d8 01       	movw	r26, r16
    59ca:	13 96       	adiw	r26, 0x03	; 3
    59cc:	3c 93       	st	X, r19
    59ce:	2e 93       	st	-X, r18
    59d0:	12 97       	sbiw	r26, 0x02	; 2
    59d2:	24 81       	ldd	r18, Z+4	; 0x04
    59d4:	35 81       	ldd	r19, Z+5	; 0x05
    59d6:	46 81       	ldd	r20, Z+6	; 0x06
    59d8:	57 81       	ldd	r21, Z+7	; 0x07
    59da:	14 96       	adiw	r26, 0x04	; 4
    59dc:	2d 93       	st	X+, r18
    59de:	3d 93       	st	X+, r19
    59e0:	4d 93       	st	X+, r20
    59e2:	5c 93       	st	X, r21
    59e4:	17 97       	sbiw	r26, 0x07	; 7
    59e6:	20 85       	ldd	r18, Z+8	; 0x08
    59e8:	31 85       	ldd	r19, Z+9	; 0x09
    59ea:	42 85       	ldd	r20, Z+10	; 0x0a
    59ec:	53 85       	ldd	r21, Z+11	; 0x0b
    59ee:	18 96       	adiw	r26, 0x08	; 8
    59f0:	2d 93       	st	X+, r18
    59f2:	3d 93       	st	X+, r19
    59f4:	4d 93       	st	X+, r20
    59f6:	5c 93       	st	X, r21
    59f8:	1b 97       	sbiw	r26, 0x0b	; 11
    59fa:	24 85       	ldd	r18, Z+12	; 0x0c
    59fc:	1c 96       	adiw	r26, 0x0c	; 12
    59fe:	2c 93       	st	X, r18
    5a00:	1c 97       	sbiw	r26, 0x0c	; 12
    5a02:	25 85       	ldd	r18, Z+13	; 0x0d
    5a04:	1d 96       	adiw	r26, 0x0d	; 13
    5a06:	2c 93       	st	X, r18
    5a08:	1d 97       	sbiw	r26, 0x0d	; 13
    5a0a:	26 85       	ldd	r18, Z+14	; 0x0e
    5a0c:	37 85       	ldd	r19, Z+15	; 0x0f
    5a0e:	1f 96       	adiw	r26, 0x0f	; 15
    5a10:	3c 93       	st	X, r19
    5a12:	2e 93       	st	-X, r18
    5a14:	1e 97       	sbiw	r26, 0x0e	; 14
    5a16:	20 89       	ldd	r18, Z+16	; 0x10
    5a18:	50 96       	adiw	r26, 0x10	; 16
    5a1a:	2c 93       	st	X, r18
    5a1c:	50 97       	sbiw	r26, 0x10	; 16
    5a1e:	21 89       	ldd	r18, Z+17	; 0x11
    5a20:	32 89       	ldd	r19, Z+18	; 0x12
    5a22:	52 96       	adiw	r26, 0x12	; 18
    5a24:	3c 93       	st	X, r19
    5a26:	2e 93       	st	-X, r18
    5a28:	51 97       	sbiw	r26, 0x11	; 17
    5a2a:	23 89       	ldd	r18, Z+19	; 0x13
    5a2c:	34 89       	ldd	r19, Z+20	; 0x14
    5a2e:	54 96       	adiw	r26, 0x14	; 20
    5a30:	3c 93       	st	X, r19
    5a32:	2e 93       	st	-X, r18
    5a34:	53 97       	sbiw	r26, 0x13	; 19
    5a36:	25 89       	ldd	r18, Z+21	; 0x15
    5a38:	36 89       	ldd	r19, Z+22	; 0x16
    5a3a:	56 96       	adiw	r26, 0x16	; 22
    5a3c:	3c 93       	st	X, r19
    5a3e:	2e 93       	st	-X, r18
    5a40:	55 97       	sbiw	r26, 0x15	; 21
    5a42:	27 89       	ldd	r18, Z+23	; 0x17
    5a44:	30 8d       	ldd	r19, Z+24	; 0x18
    5a46:	58 96       	adiw	r26, 0x18	; 24
    5a48:	3c 93       	st	X, r19
    5a4a:	2e 93       	st	-X, r18
    5a4c:	57 97       	sbiw	r26, 0x17	; 23
    5a4e:	21 8d       	ldd	r18, Z+25	; 0x19
    5a50:	32 8d       	ldd	r19, Z+26	; 0x1a
    5a52:	5a 96       	adiw	r26, 0x1a	; 26
    5a54:	3c 93       	st	X, r19
    5a56:	2e 93       	st	-X, r18
    5a58:	59 97       	sbiw	r26, 0x19	; 25
    5a5a:	33 8d       	ldd	r19, Z+27	; 0x1b
    5a5c:	31 70       	andi	r19, 0x01	; 1
    5a5e:	5b 96       	adiw	r26, 0x1b	; 27
    5a60:	2c 91       	ld	r18, X
    5a62:	5b 97       	sbiw	r26, 0x1b	; 27
    5a64:	2e 7f       	andi	r18, 0xFE	; 254
    5a66:	23 2b       	or	r18, r19
    5a68:	5b 96       	adiw	r26, 0x1b	; 27
    5a6a:	2c 93       	st	X, r18
    5a6c:	5b 97       	sbiw	r26, 0x1b	; 27
    5a6e:	33 8d       	ldd	r19, Z+27	; 0x1b
    5a70:	32 70       	andi	r19, 0x02	; 2
    5a72:	2d 7f       	andi	r18, 0xFD	; 253
    5a74:	23 2b       	or	r18, r19
    5a76:	5b 96       	adiw	r26, 0x1b	; 27
    5a78:	2c 93       	st	X, r18
    5a7a:	5b 97       	sbiw	r26, 0x1b	; 27
    5a7c:	24 e2       	ldi	r18, 0x24	; 36
    5a7e:	37 e0       	ldi	r19, 0x07	; 7
    5a80:	2d 93       	st	X+, r18
    5a82:	3c 93       	st	X, r19
    5a84:	24 8d       	ldd	r18, Z+28	; 0x1c
    5a86:	35 8d       	ldd	r19, Z+29	; 0x1d
    5a88:	46 8d       	ldd	r20, Z+30	; 0x1e
    5a8a:	57 8d       	ldd	r21, Z+31	; 0x1f
    5a8c:	f8 01       	movw	r30, r16
    5a8e:	24 8f       	std	Z+28, r18	; 0x1c
    5a90:	35 8f       	std	Z+29, r19	; 0x1d
    5a92:	46 8f       	std	Z+30, r20	; 0x1e
    5a94:	57 8f       	std	Z+31, r21	; 0x1f
		}
	}
}

int Menu::getMenuLevel() {
	return menuLevel;
    5a96:	d7 01       	movw	r26, r14
    5a98:	1c 96       	adiw	r26, 0x0c	; 12
    5a9a:	4d 91       	ld	r20, X+
    5a9c:	5c 91       	ld	r21, X
    5a9e:	1d 97       	sbiw	r26, 0x0d	; 13
			menuLevel--;
			menuState = WIND;
			break;

		}
		wind->drawWindScreen(*lcd, getMenuLevel());
    5aa0:	b8 01       	movw	r22, r16
    5aa2:	0e 94 62 33 	call	0x66c4	; 0x66c4 <_ZN4Wind14drawWindScreenE3Lcdi>
    5aa6:	c8 01       	movw	r24, r16
    5aa8:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		button2Bouncer=LOW;
    5aac:	f7 01       	movw	r30, r14
    5aae:	14 82       	std	Z+4, r1	; 0x04
		return;
	}

}
    5ab0:	c0 52       	subi	r28, 0x20	; 32
    5ab2:	df 4f       	sbci	r29, 0xFF	; 255
    5ab4:	0f b6       	in	r0, 0x3f	; 63
    5ab6:	f8 94       	cli
    5ab8:	de bf       	out	0x3e, r29	; 62
    5aba:	0f be       	out	0x3f, r0	; 63
    5abc:	cd bf       	out	0x3d, r28	; 61
    5abe:	cf 91       	pop	r28
    5ac0:	df 91       	pop	r29
    5ac2:	1f 91       	pop	r17
    5ac4:	0f 91       	pop	r16
    5ac6:	ff 90       	pop	r15
    5ac8:	ef 90       	pop	r14
    5aca:	df 90       	pop	r13
    5acc:	cf 90       	pop	r12
    5ace:	08 95       	ret

00005ad0 <_ZN4Menu13windSpeedMenuEv>:

/* Adjust the wind alarm speed*/
void Menu::windSpeedMenu() {
    5ad0:	ef 92       	push	r14
    5ad2:	ff 92       	push	r15
    5ad4:	0f 93       	push	r16
    5ad6:	1f 93       	push	r17
    5ad8:	df 93       	push	r29
    5ada:	cf 93       	push	r28
    5adc:	cd b7       	in	r28, 0x3d	; 61
    5ade:	de b7       	in	r29, 0x3e	; 62
    5ae0:	c0 56       	subi	r28, 0x60	; 96
    5ae2:	d0 40       	sbci	r29, 0x00	; 0
    5ae4:	0f b6       	in	r0, 0x3f	; 63
    5ae6:	f8 94       	cli
    5ae8:	de bf       	out	0x3e, r29	; 62
    5aea:	0f be       	out	0x3f, r0	; 63
    5aec:	cd bf       	out	0x3d, r28	; 61
    5aee:	7c 01       	movw	r14, r24
	if (button0Bouncer == HIGH) {
    5af0:	dc 01       	movw	r26, r24
    5af2:	12 96       	adiw	r26, 0x02	; 2
    5af4:	8c 91       	ld	r24, X
    5af6:	12 97       	sbiw	r26, 0x02	; 2
    5af8:	88 23       	and	r24, r24
    5afa:	09 f4       	brne	.+2      	; 0x5afe <_ZN4Menu13windSpeedMenuEv+0x2e>
    5afc:	6d c0       	rjmp	.+218    	; 0x5bd8 <_ZN4Menu13windSpeedMenuEv+0x108>

		//add 5kts to windspeed
		wind->setWindAlarmSpeed(wind->getWindAlarmSpeed() + 5);
    5afe:	54 96       	adiw	r26, 0x14	; 20
    5b00:	0d 91       	ld	r16, X+
    5b02:	1c 91       	ld	r17, X
    5b04:	55 97       	sbiw	r26, 0x15	; 21
    5b06:	c8 01       	movw	r24, r16
    5b08:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <_ZN4Wind17getWindAlarmSpeedEv>
    5b0c:	bc 01       	movw	r22, r24
    5b0e:	6b 5f       	subi	r22, 0xFB	; 251
    5b10:	7f 4f       	sbci	r23, 0xFF	; 255
    5b12:	c8 01       	movw	r24, r16
    5b14:	0e 94 54 33 	call	0x66a8	; 0x66a8 <_ZN4Wind17setWindAlarmSpeedEi>
		wind->drawWindScreen(*lcd, getMenuLevel());
    5b18:	f7 01       	movw	r30, r14
    5b1a:	84 89       	ldd	r24, Z+20	; 0x14
    5b1c:	95 89       	ldd	r25, Z+21	; 0x15
    5b1e:	06 84       	ldd	r0, Z+14	; 0x0e
    5b20:	f7 85       	ldd	r31, Z+15	; 0x0f
    5b22:	e0 2d       	mov	r30, r0
    5b24:	22 81       	ldd	r18, Z+2	; 0x02
    5b26:	33 81       	ldd	r19, Z+3	; 0x03
    5b28:	3c 83       	std	Y+4, r19	; 0x04
    5b2a:	2b 83       	std	Y+3, r18	; 0x03
    5b2c:	24 81       	ldd	r18, Z+4	; 0x04
    5b2e:	35 81       	ldd	r19, Z+5	; 0x05
    5b30:	46 81       	ldd	r20, Z+6	; 0x06
    5b32:	57 81       	ldd	r21, Z+7	; 0x07
    5b34:	2d 83       	std	Y+5, r18	; 0x05
    5b36:	3e 83       	std	Y+6, r19	; 0x06
    5b38:	4f 83       	std	Y+7, r20	; 0x07
    5b3a:	58 87       	std	Y+8, r21	; 0x08
    5b3c:	20 85       	ldd	r18, Z+8	; 0x08
    5b3e:	31 85       	ldd	r19, Z+9	; 0x09
    5b40:	42 85       	ldd	r20, Z+10	; 0x0a
    5b42:	53 85       	ldd	r21, Z+11	; 0x0b
    5b44:	29 87       	std	Y+9, r18	; 0x09
    5b46:	3a 87       	std	Y+10, r19	; 0x0a
    5b48:	4b 87       	std	Y+11, r20	; 0x0b
    5b4a:	5c 87       	std	Y+12, r21	; 0x0c
    5b4c:	24 85       	ldd	r18, Z+12	; 0x0c
    5b4e:	2d 87       	std	Y+13, r18	; 0x0d
    5b50:	25 85       	ldd	r18, Z+13	; 0x0d
    5b52:	2e 87       	std	Y+14, r18	; 0x0e
    5b54:	26 85       	ldd	r18, Z+14	; 0x0e
    5b56:	37 85       	ldd	r19, Z+15	; 0x0f
    5b58:	38 8b       	std	Y+16, r19	; 0x10
    5b5a:	2f 87       	std	Y+15, r18	; 0x0f
    5b5c:	20 89       	ldd	r18, Z+16	; 0x10
    5b5e:	29 8b       	std	Y+17, r18	; 0x11
    5b60:	21 89       	ldd	r18, Z+17	; 0x11
    5b62:	32 89       	ldd	r19, Z+18	; 0x12
    5b64:	3b 8b       	std	Y+19, r19	; 0x13
    5b66:	2a 8b       	std	Y+18, r18	; 0x12
    5b68:	23 89       	ldd	r18, Z+19	; 0x13
    5b6a:	34 89       	ldd	r19, Z+20	; 0x14
    5b6c:	3d 8b       	std	Y+21, r19	; 0x15
    5b6e:	2c 8b       	std	Y+20, r18	; 0x14
    5b70:	25 89       	ldd	r18, Z+21	; 0x15
    5b72:	36 89       	ldd	r19, Z+22	; 0x16
    5b74:	3f 8b       	std	Y+23, r19	; 0x17
    5b76:	2e 8b       	std	Y+22, r18	; 0x16
    5b78:	27 89       	ldd	r18, Z+23	; 0x17
    5b7a:	30 8d       	ldd	r19, Z+24	; 0x18
    5b7c:	39 8f       	std	Y+25, r19	; 0x19
    5b7e:	28 8f       	std	Y+24, r18	; 0x18
    5b80:	21 8d       	ldd	r18, Z+25	; 0x19
    5b82:	32 8d       	ldd	r19, Z+26	; 0x1a
    5b84:	3b 8f       	std	Y+27, r19	; 0x1b
    5b86:	2a 8f       	std	Y+26, r18	; 0x1a
    5b88:	33 8d       	ldd	r19, Z+27	; 0x1b
    5b8a:	31 70       	andi	r19, 0x01	; 1
    5b8c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    5b8e:	2e 7f       	andi	r18, 0xFE	; 254
    5b90:	23 2b       	or	r18, r19
    5b92:	2c 8f       	std	Y+28, r18	; 0x1c
    5b94:	33 8d       	ldd	r19, Z+27	; 0x1b
    5b96:	32 70       	andi	r19, 0x02	; 2
    5b98:	2d 7f       	andi	r18, 0xFD	; 253
    5b9a:	23 2b       	or	r18, r19
    5b9c:	2c 8f       	std	Y+28, r18	; 0x1c
    5b9e:	24 e2       	ldi	r18, 0x24	; 36
    5ba0:	37 e0       	ldi	r19, 0x07	; 7
    5ba2:	3a 83       	std	Y+2, r19	; 0x02
    5ba4:	29 83       	std	Y+1, r18	; 0x01
    5ba6:	24 8d       	ldd	r18, Z+28	; 0x1c
    5ba8:	35 8d       	ldd	r19, Z+29	; 0x1d
    5baa:	46 8d       	ldd	r20, Z+30	; 0x1e
    5bac:	57 8d       	ldd	r21, Z+31	; 0x1f
    5bae:	2d 8f       	std	Y+29, r18	; 0x1d
    5bb0:	3e 8f       	std	Y+30, r19	; 0x1e
    5bb2:	4f 8f       	std	Y+31, r20	; 0x1f
    5bb4:	58 a3       	std	Y+32, r21	; 0x20
		}
	}
}

int Menu::getMenuLevel() {
	return menuLevel;
    5bb6:	d7 01       	movw	r26, r14
    5bb8:	1c 96       	adiw	r26, 0x0c	; 12
    5bba:	4d 91       	ld	r20, X+
    5bbc:	5c 91       	ld	r21, X
    5bbe:	1d 97       	sbiw	r26, 0x0d	; 13
void Menu::windSpeedMenu() {
	if (button0Bouncer == HIGH) {

		//add 5kts to windspeed
		wind->setWindAlarmSpeed(wind->getWindAlarmSpeed() + 5);
		wind->drawWindScreen(*lcd, getMenuLevel());
    5bc0:	8e 01       	movw	r16, r28
    5bc2:	0f 5f       	subi	r16, 0xFF	; 255
    5bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    5bc6:	b8 01       	movw	r22, r16
    5bc8:	0e 94 62 33 	call	0x66c4	; 0x66c4 <_ZN4Wind14drawWindScreenE3Lcdi>
    5bcc:	c8 01       	movw	r24, r16
    5bce:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		button0Bouncer=LOW;
    5bd2:	f7 01       	movw	r30, r14
    5bd4:	12 82       	std	Z+2, r1	; 0x02
		return;
    5bd6:	24 c1       	rjmp	.+584    	; 0x5e20 <_ZN4Menu13windSpeedMenuEv+0x350>
	}
	if (button1Bouncer == HIGH) {
    5bd8:	d7 01       	movw	r26, r14
    5bda:	13 96       	adiw	r26, 0x03	; 3
    5bdc:	8c 91       	ld	r24, X
    5bde:	13 97       	sbiw	r26, 0x03	; 3
    5be0:	88 23       	and	r24, r24
    5be2:	09 f4       	brne	.+2      	; 0x5be6 <_ZN4Menu13windSpeedMenuEv+0x116>
    5be4:	7f c0       	rjmp	.+254    	; 0x5ce4 <_ZN4Menu13windSpeedMenuEv+0x214>
		//add 5kts to windspeed

		wind->setWindAlarmSpeed(wind->getWindAlarmSpeed() - 5);
    5be6:	54 96       	adiw	r26, 0x14	; 20
    5be8:	0d 91       	ld	r16, X+
    5bea:	1c 91       	ld	r17, X
    5bec:	55 97       	sbiw	r26, 0x15	; 21
    5bee:	c8 01       	movw	r24, r16
    5bf0:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <_ZN4Wind17getWindAlarmSpeedEv>
    5bf4:	bc 01       	movw	r22, r24
    5bf6:	65 50       	subi	r22, 0x05	; 5
    5bf8:	70 40       	sbci	r23, 0x00	; 0
    5bfa:	c8 01       	movw	r24, r16
    5bfc:	0e 94 54 33 	call	0x66a8	; 0x66a8 <_ZN4Wind17setWindAlarmSpeedEi>
		if (wind->getWindAlarmSpeed() < 0)
    5c00:	f7 01       	movw	r30, r14
    5c02:	84 89       	ldd	r24, Z+20	; 0x14
    5c04:	95 89       	ldd	r25, Z+21	; 0x15
    5c06:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <_ZN4Wind17getWindAlarmSpeedEv>
    5c0a:	97 ff       	sbrs	r25, 7
    5c0c:	09 c0       	rjmp	.+18     	; 0x5c20 <_ZN4Menu13windSpeedMenuEv+0x150>
			wind->setWindAlarmSpeed(0);
    5c0e:	d7 01       	movw	r26, r14
    5c10:	54 96       	adiw	r26, 0x14	; 20
    5c12:	8d 91       	ld	r24, X+
    5c14:	9c 91       	ld	r25, X
    5c16:	55 97       	sbiw	r26, 0x15	; 21
    5c18:	60 e0       	ldi	r22, 0x00	; 0
    5c1a:	70 e0       	ldi	r23, 0x00	; 0
    5c1c:	0e 94 54 33 	call	0x66a8	; 0x66a8 <_ZN4Wind17setWindAlarmSpeedEi>
		wind->drawWindScreen(*lcd, getMenuLevel());
    5c20:	f7 01       	movw	r30, r14
    5c22:	84 89       	ldd	r24, Z+20	; 0x14
    5c24:	95 89       	ldd	r25, Z+21	; 0x15
    5c26:	06 84       	ldd	r0, Z+14	; 0x0e
    5c28:	f7 85       	ldd	r31, Z+15	; 0x0f
    5c2a:	e0 2d       	mov	r30, r0
    5c2c:	22 81       	ldd	r18, Z+2	; 0x02
    5c2e:	33 81       	ldd	r19, Z+3	; 0x03
    5c30:	3c a3       	std	Y+36, r19	; 0x24
    5c32:	2b a3       	std	Y+35, r18	; 0x23
    5c34:	24 81       	ldd	r18, Z+4	; 0x04
    5c36:	35 81       	ldd	r19, Z+5	; 0x05
    5c38:	46 81       	ldd	r20, Z+6	; 0x06
    5c3a:	57 81       	ldd	r21, Z+7	; 0x07
    5c3c:	2d a3       	std	Y+37, r18	; 0x25
    5c3e:	3e a3       	std	Y+38, r19	; 0x26
    5c40:	4f a3       	std	Y+39, r20	; 0x27
    5c42:	58 a7       	std	Y+40, r21	; 0x28
    5c44:	20 85       	ldd	r18, Z+8	; 0x08
    5c46:	31 85       	ldd	r19, Z+9	; 0x09
    5c48:	42 85       	ldd	r20, Z+10	; 0x0a
    5c4a:	53 85       	ldd	r21, Z+11	; 0x0b
    5c4c:	29 a7       	std	Y+41, r18	; 0x29
    5c4e:	3a a7       	std	Y+42, r19	; 0x2a
    5c50:	4b a7       	std	Y+43, r20	; 0x2b
    5c52:	5c a7       	std	Y+44, r21	; 0x2c
    5c54:	24 85       	ldd	r18, Z+12	; 0x0c
    5c56:	2d a7       	std	Y+45, r18	; 0x2d
    5c58:	25 85       	ldd	r18, Z+13	; 0x0d
    5c5a:	2e a7       	std	Y+46, r18	; 0x2e
    5c5c:	26 85       	ldd	r18, Z+14	; 0x0e
    5c5e:	37 85       	ldd	r19, Z+15	; 0x0f
    5c60:	38 ab       	std	Y+48, r19	; 0x30
    5c62:	2f a7       	std	Y+47, r18	; 0x2f
    5c64:	20 89       	ldd	r18, Z+16	; 0x10
    5c66:	29 ab       	std	Y+49, r18	; 0x31
    5c68:	21 89       	ldd	r18, Z+17	; 0x11
    5c6a:	32 89       	ldd	r19, Z+18	; 0x12
    5c6c:	3b ab       	std	Y+51, r19	; 0x33
    5c6e:	2a ab       	std	Y+50, r18	; 0x32
    5c70:	23 89       	ldd	r18, Z+19	; 0x13
    5c72:	34 89       	ldd	r19, Z+20	; 0x14
    5c74:	3d ab       	std	Y+53, r19	; 0x35
    5c76:	2c ab       	std	Y+52, r18	; 0x34
    5c78:	25 89       	ldd	r18, Z+21	; 0x15
    5c7a:	36 89       	ldd	r19, Z+22	; 0x16
    5c7c:	3f ab       	std	Y+55, r19	; 0x37
    5c7e:	2e ab       	std	Y+54, r18	; 0x36
    5c80:	27 89       	ldd	r18, Z+23	; 0x17
    5c82:	30 8d       	ldd	r19, Z+24	; 0x18
    5c84:	39 af       	std	Y+57, r19	; 0x39
    5c86:	28 af       	std	Y+56, r18	; 0x38
    5c88:	21 8d       	ldd	r18, Z+25	; 0x19
    5c8a:	32 8d       	ldd	r19, Z+26	; 0x1a
    5c8c:	3b af       	std	Y+59, r19	; 0x3b
    5c8e:	2a af       	std	Y+58, r18	; 0x3a
    5c90:	33 8d       	ldd	r19, Z+27	; 0x1b
    5c92:	31 70       	andi	r19, 0x01	; 1
    5c94:	2c ad       	ldd	r18, Y+60	; 0x3c
    5c96:	2e 7f       	andi	r18, 0xFE	; 254
    5c98:	23 2b       	or	r18, r19
    5c9a:	2c af       	std	Y+60, r18	; 0x3c
    5c9c:	33 8d       	ldd	r19, Z+27	; 0x1b
    5c9e:	32 70       	andi	r19, 0x02	; 2
    5ca0:	2d 7f       	andi	r18, 0xFD	; 253
    5ca2:	23 2b       	or	r18, r19
    5ca4:	2c af       	std	Y+60, r18	; 0x3c
    5ca6:	24 e2       	ldi	r18, 0x24	; 36
    5ca8:	37 e0       	ldi	r19, 0x07	; 7
    5caa:	3a a3       	std	Y+34, r19	; 0x22
    5cac:	29 a3       	std	Y+33, r18	; 0x21
    5cae:	24 8d       	ldd	r18, Z+28	; 0x1c
    5cb0:	35 8d       	ldd	r19, Z+29	; 0x1d
    5cb2:	46 8d       	ldd	r20, Z+30	; 0x1e
    5cb4:	57 8d       	ldd	r21, Z+31	; 0x1f
    5cb6:	fe 01       	movw	r30, r28
    5cb8:	fd 96       	adiw	r30, 0x3d	; 61
    5cba:	20 83       	st	Z, r18
    5cbc:	31 83       	std	Z+1, r19	; 0x01
    5cbe:	42 83       	std	Z+2, r20	; 0x02
    5cc0:	53 83       	std	Z+3, r21	; 0x03
		}
	}
}

int Menu::getMenuLevel() {
	return menuLevel;
    5cc2:	d7 01       	movw	r26, r14
    5cc4:	1c 96       	adiw	r26, 0x0c	; 12
    5cc6:	4d 91       	ld	r20, X+
    5cc8:	5c 91       	ld	r21, X
    5cca:	1d 97       	sbiw	r26, 0x0d	; 13
		//add 5kts to windspeed

		wind->setWindAlarmSpeed(wind->getWindAlarmSpeed() - 5);
		if (wind->getWindAlarmSpeed() < 0)
			wind->setWindAlarmSpeed(0);
		wind->drawWindScreen(*lcd, getMenuLevel());
    5ccc:	8e 01       	movw	r16, r28
    5cce:	0f 5d       	subi	r16, 0xDF	; 223
    5cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    5cd2:	b8 01       	movw	r22, r16
    5cd4:	0e 94 62 33 	call	0x66c4	; 0x66c4 <_ZN4Wind14drawWindScreenE3Lcdi>
    5cd8:	c8 01       	movw	r24, r16
    5cda:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		button1Bouncer=LOW;
    5cde:	f7 01       	movw	r30, r14
    5ce0:	13 82       	std	Z+3, r1	; 0x03
		return;
    5ce2:	9e c0       	rjmp	.+316    	; 0x5e20 <_ZN4Menu13windSpeedMenuEv+0x350>
	}
	if (button2Bouncer == HIGH) {
    5ce4:	d7 01       	movw	r26, r14
    5ce6:	14 96       	adiw	r26, 0x04	; 4
    5ce8:	8c 91       	ld	r24, X
    5cea:	14 97       	sbiw	r26, 0x04	; 4
    5cec:	88 23       	and	r24, r24
    5cee:	09 f4       	brne	.+2      	; 0x5cf2 <_ZN4Menu13windSpeedMenuEv+0x222>
    5cf0:	97 c0       	rjmp	.+302    	; 0x5e20 <_ZN4Menu13windSpeedMenuEv+0x350>
		menuLevel--;
    5cf2:	1c 96       	adiw	r26, 0x0c	; 12
    5cf4:	8d 91       	ld	r24, X+
    5cf6:	9c 91       	ld	r25, X
    5cf8:	1d 97       	sbiw	r26, 0x0d	; 13
    5cfa:	01 97       	sbiw	r24, 0x01	; 1
    5cfc:	1d 96       	adiw	r26, 0x0d	; 13
    5cfe:	9c 93       	st	X, r25
    5d00:	8e 93       	st	-X, r24
    5d02:	1c 97       	sbiw	r26, 0x0c	; 12

		wind->drawWindScreen(*lcd, getMenuLevel());
    5d04:	54 96       	adiw	r26, 0x14	; 20
    5d06:	8d 91       	ld	r24, X+
    5d08:	9c 91       	ld	r25, X
    5d0a:	55 97       	sbiw	r26, 0x15	; 21
    5d0c:	1e 96       	adiw	r26, 0x0e	; 14
    5d0e:	ed 91       	ld	r30, X+
    5d10:	fc 91       	ld	r31, X
    5d12:	1f 97       	sbiw	r26, 0x0f	; 15
    5d14:	22 81       	ldd	r18, Z+2	; 0x02
    5d16:	33 81       	ldd	r19, Z+3	; 0x03
    5d18:	de 01       	movw	r26, r28
    5d1a:	ad 5b       	subi	r26, 0xBD	; 189
    5d1c:	bf 4f       	sbci	r27, 0xFF	; 255
    5d1e:	2d 93       	st	X+, r18
    5d20:	3c 93       	st	X, r19
    5d22:	24 81       	ldd	r18, Z+4	; 0x04
    5d24:	35 81       	ldd	r19, Z+5	; 0x05
    5d26:	46 81       	ldd	r20, Z+6	; 0x06
    5d28:	57 81       	ldd	r21, Z+7	; 0x07
    5d2a:	de 01       	movw	r26, r28
    5d2c:	ab 5b       	subi	r26, 0xBB	; 187
    5d2e:	bf 4f       	sbci	r27, 0xFF	; 255
    5d30:	2d 93       	st	X+, r18
    5d32:	3d 93       	st	X+, r19
    5d34:	4d 93       	st	X+, r20
    5d36:	5c 93       	st	X, r21
    5d38:	13 97       	sbiw	r26, 0x03	; 3
    5d3a:	20 85       	ldd	r18, Z+8	; 0x08
    5d3c:	31 85       	ldd	r19, Z+9	; 0x09
    5d3e:	42 85       	ldd	r20, Z+10	; 0x0a
    5d40:	53 85       	ldd	r21, Z+11	; 0x0b
    5d42:	de 01       	movw	r26, r28
    5d44:	a7 5b       	subi	r26, 0xB7	; 183
    5d46:	bf 4f       	sbci	r27, 0xFF	; 255
    5d48:	2d 93       	st	X+, r18
    5d4a:	3d 93       	st	X+, r19
    5d4c:	4d 93       	st	X+, r20
    5d4e:	5c 93       	st	X, r21
    5d50:	13 97       	sbiw	r26, 0x03	; 3
    5d52:	24 85       	ldd	r18, Z+12	; 0x0c
    5d54:	de 01       	movw	r26, r28
    5d56:	a3 5b       	subi	r26, 0xB3	; 179
    5d58:	bf 4f       	sbci	r27, 0xFF	; 255
    5d5a:	2c 93       	st	X, r18
    5d5c:	25 85       	ldd	r18, Z+13	; 0x0d
    5d5e:	de 01       	movw	r26, r28
    5d60:	a2 5b       	subi	r26, 0xB2	; 178
    5d62:	bf 4f       	sbci	r27, 0xFF	; 255
    5d64:	2c 93       	st	X, r18
    5d66:	26 85       	ldd	r18, Z+14	; 0x0e
    5d68:	37 85       	ldd	r19, Z+15	; 0x0f
    5d6a:	de 01       	movw	r26, r28
    5d6c:	a1 5b       	subi	r26, 0xB1	; 177
    5d6e:	bf 4f       	sbci	r27, 0xFF	; 255
    5d70:	2d 93       	st	X+, r18
    5d72:	3c 93       	st	X, r19
    5d74:	20 89       	ldd	r18, Z+16	; 0x10
    5d76:	de 01       	movw	r26, r28
    5d78:	af 5a       	subi	r26, 0xAF	; 175
    5d7a:	bf 4f       	sbci	r27, 0xFF	; 255
    5d7c:	2c 93       	st	X, r18
    5d7e:	21 89       	ldd	r18, Z+17	; 0x11
    5d80:	32 89       	ldd	r19, Z+18	; 0x12
    5d82:	de 01       	movw	r26, r28
    5d84:	ae 5a       	subi	r26, 0xAE	; 174
    5d86:	bf 4f       	sbci	r27, 0xFF	; 255
    5d88:	2d 93       	st	X+, r18
    5d8a:	3c 93       	st	X, r19
    5d8c:	23 89       	ldd	r18, Z+19	; 0x13
    5d8e:	34 89       	ldd	r19, Z+20	; 0x14
    5d90:	de 01       	movw	r26, r28
    5d92:	ac 5a       	subi	r26, 0xAC	; 172
    5d94:	bf 4f       	sbci	r27, 0xFF	; 255
    5d96:	2d 93       	st	X+, r18
    5d98:	3c 93       	st	X, r19
    5d9a:	25 89       	ldd	r18, Z+21	; 0x15
    5d9c:	36 89       	ldd	r19, Z+22	; 0x16
    5d9e:	de 01       	movw	r26, r28
    5da0:	aa 5a       	subi	r26, 0xAA	; 170
    5da2:	bf 4f       	sbci	r27, 0xFF	; 255
    5da4:	2d 93       	st	X+, r18
    5da6:	3c 93       	st	X, r19
    5da8:	27 89       	ldd	r18, Z+23	; 0x17
    5daa:	30 8d       	ldd	r19, Z+24	; 0x18
    5dac:	de 01       	movw	r26, r28
    5dae:	a8 5a       	subi	r26, 0xA8	; 168
    5db0:	bf 4f       	sbci	r27, 0xFF	; 255
    5db2:	2d 93       	st	X+, r18
    5db4:	3c 93       	st	X, r19
    5db6:	21 8d       	ldd	r18, Z+25	; 0x19
    5db8:	32 8d       	ldd	r19, Z+26	; 0x1a
    5dba:	de 01       	movw	r26, r28
    5dbc:	a6 5a       	subi	r26, 0xA6	; 166
    5dbe:	bf 4f       	sbci	r27, 0xFF	; 255
    5dc0:	2d 93       	st	X+, r18
    5dc2:	3c 93       	st	X, r19
    5dc4:	33 8d       	ldd	r19, Z+27	; 0x1b
    5dc6:	31 70       	andi	r19, 0x01	; 1
    5dc8:	de 01       	movw	r26, r28
    5dca:	a4 5a       	subi	r26, 0xA4	; 164
    5dcc:	bf 4f       	sbci	r27, 0xFF	; 255
    5dce:	2c 91       	ld	r18, X
    5dd0:	2e 7f       	andi	r18, 0xFE	; 254
    5dd2:	23 2b       	or	r18, r19
    5dd4:	2c 93       	st	X, r18
    5dd6:	33 8d       	ldd	r19, Z+27	; 0x1b
    5dd8:	32 70       	andi	r19, 0x02	; 2
    5dda:	2d 7f       	andi	r18, 0xFD	; 253
    5ddc:	23 2b       	or	r18, r19
    5dde:	2c 93       	st	X, r18
    5de0:	8e 01       	movw	r16, r28
    5de2:	0f 5b       	subi	r16, 0xBF	; 191
    5de4:	1f 4f       	sbci	r17, 0xFF	; 255
    5de6:	24 e2       	ldi	r18, 0x24	; 36
    5de8:	37 e0       	ldi	r19, 0x07	; 7
    5dea:	d8 01       	movw	r26, r16
    5dec:	2d 93       	st	X+, r18
    5dee:	3c 93       	st	X, r19
    5df0:	24 8d       	ldd	r18, Z+28	; 0x1c
    5df2:	35 8d       	ldd	r19, Z+29	; 0x1d
    5df4:	46 8d       	ldd	r20, Z+30	; 0x1e
    5df6:	57 8d       	ldd	r21, Z+31	; 0x1f
    5df8:	fe 01       	movw	r30, r28
    5dfa:	e3 5a       	subi	r30, 0xA3	; 163
    5dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    5dfe:	20 83       	st	Z, r18
    5e00:	31 83       	std	Z+1, r19	; 0x01
    5e02:	42 83       	std	Z+2, r20	; 0x02
    5e04:	53 83       	std	Z+3, r21	; 0x03
		}
	}
}

int Menu::getMenuLevel() {
	return menuLevel;
    5e06:	f7 01       	movw	r30, r14
    5e08:	44 85       	ldd	r20, Z+12	; 0x0c
    5e0a:	55 85       	ldd	r21, Z+13	; 0x0d
		return;
	}
	if (button2Bouncer == HIGH) {
		menuLevel--;

		wind->drawWindScreen(*lcd, getMenuLevel());
    5e0c:	b8 01       	movw	r22, r16
    5e0e:	0e 94 62 33 	call	0x66c4	; 0x66c4 <_ZN4Wind14drawWindScreenE3Lcdi>
    5e12:	c8 01       	movw	r24, r16
    5e14:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
		button2Bouncer=LOW;
    5e18:	d7 01       	movw	r26, r14
    5e1a:	14 96       	adiw	r26, 0x04	; 4
    5e1c:	1c 92       	st	X, r1
    5e1e:	14 97       	sbiw	r26, 0x04	; 4
		return;
	}

}
    5e20:	c0 5a       	subi	r28, 0xA0	; 160
    5e22:	df 4f       	sbci	r29, 0xFF	; 255
    5e24:	0f b6       	in	r0, 0x3f	; 63
    5e26:	f8 94       	cli
    5e28:	de bf       	out	0x3e, r29	; 62
    5e2a:	0f be       	out	0x3f, r0	; 63
    5e2c:	cd bf       	out	0x3d, r28	; 61
    5e2e:	cf 91       	pop	r28
    5e30:	df 91       	pop	r29
    5e32:	1f 91       	pop	r17
    5e34:	0f 91       	pop	r16
    5e36:	ff 90       	pop	r15
    5e38:	ef 90       	pop	r14
    5e3a:	08 95       	ret

00005e3c <_ZN4Menu23handleButtonPushOnAlarmEv>:

/* handle the alarm if a button is pushed while alarming*/
void Menu::handleButtonPushOnAlarm() {
    5e3c:	0f 93       	push	r16
    5e3e:	1f 93       	push	r17
    5e40:	cf 93       	push	r28
    5e42:	df 93       	push	r29
    5e44:	ec 01       	movw	r28, r24
	if (alarm->alarmTriggered()) {
    5e46:	88 89       	ldd	r24, Y+16	; 0x10
    5e48:	99 89       	ldd	r25, Y+17	; 0x11
    5e4a:	0e 94 04 14 	call	0x2808	; 0x2808 <_ZN5Alarm14alarmTriggeredEv>
    5e4e:	88 23       	and	r24, r24
    5e50:	31 f1       	breq	.+76     	; 0x5e9e <_ZN4Menu23handleButtonPushOnAlarmEv+0x62>
		//give 5 minutes respite from noise!
		alarm->setSnoozeAlarm(millis() + SNOOZE_TIME_MILLIS);
    5e52:	08 89       	ldd	r16, Y+16	; 0x10
    5e54:	19 89       	ldd	r17, Y+17	; 0x11
    5e56:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    5e5a:	ab 01       	movw	r20, r22
    5e5c:	bc 01       	movw	r22, r24
    5e5e:	40 52       	subi	r20, 0x20	; 32
    5e60:	5c 46       	sbci	r21, 0x6C	; 108
    5e62:	6b 4f       	sbci	r22, 0xFB	; 251
    5e64:	7f 4f       	sbci	r23, 0xFF	; 255
    5e66:	c8 01       	movw	r24, r16
    5e68:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <_ZN5Alarm14setSnoozeAlarmEm>
		if (alarm->isMobAlarmTriggered()) {
    5e6c:	88 89       	ldd	r24, Y+16	; 0x10
    5e6e:	99 89       	ldd	r25, Y+17	; 0x11
    5e70:	0e 94 2b 14 	call	0x2856	; 0x2856 <_ZN5Alarm19isMobAlarmTriggeredEv>
			//send cancel ? no, waypoint is cancelled
			//seatalk->cancelMOB();
		}
		if (alarm->isRadarAlarmTriggered()) {
    5e74:	88 89       	ldd	r24, Y+16	; 0x10
    5e76:	99 89       	ldd	r25, Y+17	; 0x11
    5e78:	0e 94 25 14 	call	0x284a	; 0x284a <_ZN5Alarm21isRadarAlarmTriggeredEv>
    5e7c:	88 23       	and	r24, r24
    5e7e:	21 f0       	breq	.+8      	; 0x5e88 <_ZN4Menu23handleButtonPushOnAlarmEv+0x4c>
			//send acknowledge alarm
			seatalk->radarAlarmOff();
    5e80:	8e 89       	ldd	r24, Y+22	; 0x16
    5e82:	9f 89       	ldd	r25, Y+23	; 0x17
    5e84:	0e 94 4b 32 	call	0x6496	; 0x6496 <_ZN7Seatalk13radarAlarmOffEv>
		}
		if (alarm->isWindAlarmTriggered()) {
    5e88:	88 89       	ldd	r24, Y+16	; 0x10
    5e8a:	99 89       	ldd	r25, Y+17	; 0x11
    5e8c:	0e 94 1f 14 	call	0x283e	; 0x283e <_ZN5Alarm20isWindAlarmTriggeredEv>
    5e90:	88 23       	and	r24, r24
    5e92:	29 f0       	breq	.+10     	; 0x5e9e <_ZN4Menu23handleButtonPushOnAlarmEv+0x62>
			//send acknowledge alarm
			wind->setWindAlarm(false);
    5e94:	8c 89       	ldd	r24, Y+20	; 0x14
    5e96:	9d 89       	ldd	r25, Y+21	; 0x15
    5e98:	60 e0       	ldi	r22, 0x00	; 0
    5e9a:	0e 94 4e 33 	call	0x669c	; 0x669c <_ZN4Wind12setWindAlarmEb>
		}
	}
}
    5e9e:	df 91       	pop	r29
    5ea0:	cf 91       	pop	r28
    5ea2:	1f 91       	pop	r17
    5ea4:	0f 91       	pop	r16
    5ea6:	08 95       	ret

00005ea8 <_ZN4Menu8mainMenuEv>:
		// default:

	}
}

void Menu::mainMenu() {
    5ea8:	cf 92       	push	r12
    5eaa:	df 92       	push	r13
    5eac:	ef 92       	push	r14
    5eae:	ff 92       	push	r15
    5eb0:	0f 93       	push	r16
    5eb2:	1f 93       	push	r17
    5eb4:	df 93       	push	r29
    5eb6:	cf 93       	push	r28
    5eb8:	cd b7       	in	r28, 0x3d	; 61
    5eba:	de b7       	in	r29, 0x3e	; 62
    5ebc:	c0 58       	subi	r28, 0x80	; 128
    5ebe:	d0 40       	sbci	r29, 0x00	; 0
    5ec0:	0f b6       	in	r0, 0x3f	; 63
    5ec2:	f8 94       	cli
    5ec4:	de bf       	out	0x3e, r29	; 62
    5ec6:	0f be       	out	0x3f, r0	; 63
    5ec8:	cd bf       	out	0x3d, r28	; 61
    5eca:	7c 01       	movw	r14, r24

	//remote button;
	if (button3Bouncer == HIGH) {
    5ecc:	dc 01       	movw	r26, r24
    5ece:	15 96       	adiw	r26, 0x05	; 5
    5ed0:	8c 91       	ld	r24, X
    5ed2:	15 97       	sbiw	r26, 0x05	; 5
    5ed4:	88 23       	and	r24, r24
    5ed6:	59 f0       	breq	.+22     	; 0x5eee <_ZN4Menu8mainMenuEv+0x46>
		if(DEBUG)Serial.print("Pushed button 3");
    5ed8:	87 e2       	ldi	r24, 0x27	; 39
    5eda:	9e e0       	ldi	r25, 0x0E	; 14
    5edc:	62 ef       	ldi	r22, 0xF2	; 242
    5ede:	75 e0       	ldi	r23, 0x05	; 5
    5ee0:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		handleButtonPushOnAlarm();
    5ee4:	c7 01       	movw	r24, r14
    5ee6:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <_ZN4Menu23handleButtonPushOnAlarmEv>
		button3Bouncer=LOW;
    5eea:	f7 01       	movw	r30, r14
    5eec:	15 82       	std	Z+5, r1	; 0x05
	}
	//arrow buttons on main menu
	if (button0Bouncer == HIGH) {
    5eee:	d7 01       	movw	r26, r14
    5ef0:	12 96       	adiw	r26, 0x02	; 2
    5ef2:	8c 91       	ld	r24, X
    5ef4:	12 97       	sbiw	r26, 0x02	; 2
    5ef6:	88 23       	and	r24, r24
    5ef8:	11 f1       	breq	.+68     	; 0x5f3e <_ZN4Menu8mainMenuEv+0x96>

		if(DEBUG)Serial.print("Pushed button 0");
    5efa:	87 e2       	ldi	r24, 0x27	; 39
    5efc:	9e e0       	ldi	r25, 0x0E	; 14
    5efe:	62 e0       	ldi	r22, 0x02	; 2
    5f00:	76 e0       	ldi	r23, 0x06	; 6
    5f02:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		handleButtonPushOnAlarm();
    5f06:	c7 01       	movw	r24, r14
    5f08:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <_ZN4Menu23handleButtonPushOnAlarmEv>

		menuState++;
    5f0c:	f7 01       	movw	r30, r14
    5f0e:	82 85       	ldd	r24, Z+10	; 0x0a
    5f10:	93 85       	ldd	r25, Z+11	; 0x0b
    5f12:	01 96       	adiw	r24, 0x01	; 1
    5f14:	93 87       	std	Z+11, r25	; 0x0b
    5f16:	82 87       	std	Z+10, r24	; 0x0a
		lcd->clearLcd();
    5f18:	86 85       	ldd	r24, Z+14	; 0x0e
    5f1a:	97 85       	ldd	r25, Z+15	; 0x0f
    5f1c:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <_ZN3Lcd8clearLcdEv>
		if (menuState > MAXMENU)
    5f20:	d7 01       	movw	r26, r14
    5f22:	1a 96       	adiw	r26, 0x0a	; 10
    5f24:	8d 91       	ld	r24, X+
    5f26:	9c 91       	ld	r25, X
    5f28:	1b 97       	sbiw	r26, 0x0b	; 11
    5f2a:	83 30       	cpi	r24, 0x03	; 3
    5f2c:	91 05       	cpc	r25, r1
    5f2e:	24 f0       	brlt	.+8      	; 0x5f38 <_ZN4Menu8mainMenuEv+0x90>
			menuState = MINMENU;
    5f30:	1b 96       	adiw	r26, 0x0b	; 11
    5f32:	1c 92       	st	X, r1
    5f34:	1e 92       	st	-X, r1
    5f36:	1a 97       	sbiw	r26, 0x0a	; 10
		button0Bouncer=LOW;
    5f38:	f7 01       	movw	r30, r14
    5f3a:	12 82       	std	Z+2, r1	; 0x02
		return;
    5f3c:	1c c2       	rjmp	.+1080   	; 0x6376 <_ZN4Menu8mainMenuEv+0x4ce>
	}

	if (button1Bouncer== HIGH) {
    5f3e:	d7 01       	movw	r26, r14
    5f40:	13 96       	adiw	r26, 0x03	; 3
    5f42:	8c 91       	ld	r24, X
    5f44:	13 97       	sbiw	r26, 0x03	; 3
    5f46:	88 23       	and	r24, r24
    5f48:	19 f1       	breq	.+70     	; 0x5f90 <_ZN4Menu8mainMenuEv+0xe8>

		if(DEBUG)Serial.print("Pushed button 1");
    5f4a:	87 e2       	ldi	r24, 0x27	; 39
    5f4c:	9e e0       	ldi	r25, 0x0E	; 14
    5f4e:	62 e1       	ldi	r22, 0x12	; 18
    5f50:	76 e0       	ldi	r23, 0x06	; 6
    5f52:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		handleButtonPushOnAlarm();
    5f56:	c7 01       	movw	r24, r14
    5f58:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <_ZN4Menu23handleButtonPushOnAlarmEv>
		menuState--;
    5f5c:	f7 01       	movw	r30, r14
    5f5e:	82 85       	ldd	r24, Z+10	; 0x0a
    5f60:	93 85       	ldd	r25, Z+11	; 0x0b
    5f62:	01 97       	sbiw	r24, 0x01	; 1
    5f64:	93 87       	std	Z+11, r25	; 0x0b
    5f66:	82 87       	std	Z+10, r24	; 0x0a
		lcd->clearLcd();
    5f68:	86 85       	ldd	r24, Z+14	; 0x0e
    5f6a:	97 85       	ldd	r25, Z+15	; 0x0f
    5f6c:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <_ZN3Lcd8clearLcdEv>
		if (menuState < MINMENU)
    5f70:	d7 01       	movw	r26, r14
    5f72:	1a 96       	adiw	r26, 0x0a	; 10
    5f74:	8d 91       	ld	r24, X+
    5f76:	9c 91       	ld	r25, X
    5f78:	1b 97       	sbiw	r26, 0x0b	; 11
    5f7a:	97 ff       	sbrs	r25, 7
    5f7c:	06 c0       	rjmp	.+12     	; 0x5f8a <_ZN4Menu8mainMenuEv+0xe2>
			menuState = MAXMENU;
    5f7e:	82 e0       	ldi	r24, 0x02	; 2
    5f80:	90 e0       	ldi	r25, 0x00	; 0
    5f82:	1b 96       	adiw	r26, 0x0b	; 11
    5f84:	9c 93       	st	X, r25
    5f86:	8e 93       	st	-X, r24
    5f88:	1a 97       	sbiw	r26, 0x0a	; 10
		button1Bouncer=LOW;
    5f8a:	f7 01       	movw	r30, r14
    5f8c:	13 82       	std	Z+3, r1	; 0x03
		return;
    5f8e:	f3 c1       	rjmp	.+998    	; 0x6376 <_ZN4Menu8mainMenuEv+0x4ce>
	}

	if (button2Bouncer == HIGH) {
    5f90:	d7 01       	movw	r26, r14
    5f92:	14 96       	adiw	r26, 0x04	; 4
    5f94:	8c 91       	ld	r24, X
    5f96:	14 97       	sbiw	r26, 0x04	; 4
    5f98:	88 23       	and	r24, r24
    5f9a:	09 f4       	brne	.+2      	; 0x5f9e <_ZN4Menu8mainMenuEv+0xf6>
    5f9c:	ec c1       	rjmp	.+984    	; 0x6376 <_ZN4Menu8mainMenuEv+0x4ce>

		if(DEBUG)Serial.print("Pushed button 2");
    5f9e:	87 e2       	ldi	r24, 0x27	; 39
    5fa0:	9e e0       	ldi	r25, 0x0E	; 14
    5fa2:	62 e2       	ldi	r22, 0x22	; 34
    5fa4:	76 e0       	ldi	r23, 0x06	; 6
    5fa6:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		handleButtonPushOnAlarm();
    5faa:	c7 01       	movw	r24, r14
    5fac:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <_ZN4Menu23handleButtonPushOnAlarmEv>
		if (menuState == ANCHOR) {
    5fb0:	f7 01       	movw	r30, r14
    5fb2:	82 85       	ldd	r24, Z+10	; 0x0a
    5fb4:	93 85       	ldd	r25, Z+11	; 0x0b
    5fb6:	81 30       	cpi	r24, 0x01	; 1
    5fb8:	91 05       	cpc	r25, r1
    5fba:	09 f0       	breq	.+2      	; 0x5fbe <_ZN4Menu8mainMenuEv+0x116>
    5fbc:	c2 c0       	rjmp	.+388    	; 0x6142 <_ZN4Menu8mainMenuEv+0x29a>
			menuState = ANCHORMINMENU;
    5fbe:	8a e0       	ldi	r24, 0x0A	; 10
    5fc0:	90 e0       	ldi	r25, 0x00	; 0
    5fc2:	93 87       	std	Z+11, r25	; 0x0b
    5fc4:	82 87       	std	Z+10, r24	; 0x0a
			menuLevel++;
    5fc6:	84 85       	ldd	r24, Z+12	; 0x0c
    5fc8:	95 85       	ldd	r25, Z+13	; 0x0d
    5fca:	01 96       	adiw	r24, 0x01	; 1
    5fcc:	95 87       	std	Z+13, r25	; 0x0d
    5fce:	84 87       	std	Z+12, r24	; 0x0c
			anchor->drawAnchorBox(*lcd,getMenuState());
    5fd0:	82 89       	ldd	r24, Z+18	; 0x12
    5fd2:	93 89       	ldd	r25, Z+19	; 0x13
    5fd4:	06 84       	ldd	r0, Z+14	; 0x0e
    5fd6:	f7 85       	ldd	r31, Z+15	; 0x0f
    5fd8:	e0 2d       	mov	r30, r0
    5fda:	22 81       	ldd	r18, Z+2	; 0x02
    5fdc:	33 81       	ldd	r19, Z+3	; 0x03
    5fde:	3c 83       	std	Y+4, r19	; 0x04
    5fe0:	2b 83       	std	Y+3, r18	; 0x03
    5fe2:	24 81       	ldd	r18, Z+4	; 0x04
    5fe4:	35 81       	ldd	r19, Z+5	; 0x05
    5fe6:	46 81       	ldd	r20, Z+6	; 0x06
    5fe8:	57 81       	ldd	r21, Z+7	; 0x07
    5fea:	2d 83       	std	Y+5, r18	; 0x05
    5fec:	3e 83       	std	Y+6, r19	; 0x06
    5fee:	4f 83       	std	Y+7, r20	; 0x07
    5ff0:	58 87       	std	Y+8, r21	; 0x08
    5ff2:	20 85       	ldd	r18, Z+8	; 0x08
    5ff4:	31 85       	ldd	r19, Z+9	; 0x09
    5ff6:	42 85       	ldd	r20, Z+10	; 0x0a
    5ff8:	53 85       	ldd	r21, Z+11	; 0x0b
    5ffa:	29 87       	std	Y+9, r18	; 0x09
    5ffc:	3a 87       	std	Y+10, r19	; 0x0a
    5ffe:	4b 87       	std	Y+11, r20	; 0x0b
    6000:	5c 87       	std	Y+12, r21	; 0x0c
    6002:	24 85       	ldd	r18, Z+12	; 0x0c
    6004:	2d 87       	std	Y+13, r18	; 0x0d
    6006:	25 85       	ldd	r18, Z+13	; 0x0d
    6008:	2e 87       	std	Y+14, r18	; 0x0e
    600a:	26 85       	ldd	r18, Z+14	; 0x0e
    600c:	37 85       	ldd	r19, Z+15	; 0x0f
    600e:	38 8b       	std	Y+16, r19	; 0x10
    6010:	2f 87       	std	Y+15, r18	; 0x0f
    6012:	20 89       	ldd	r18, Z+16	; 0x10
    6014:	29 8b       	std	Y+17, r18	; 0x11
    6016:	21 89       	ldd	r18, Z+17	; 0x11
    6018:	32 89       	ldd	r19, Z+18	; 0x12
    601a:	3b 8b       	std	Y+19, r19	; 0x13
    601c:	2a 8b       	std	Y+18, r18	; 0x12
    601e:	23 89       	ldd	r18, Z+19	; 0x13
    6020:	34 89       	ldd	r19, Z+20	; 0x14
    6022:	3d 8b       	std	Y+21, r19	; 0x15
    6024:	2c 8b       	std	Y+20, r18	; 0x14
    6026:	25 89       	ldd	r18, Z+21	; 0x15
    6028:	36 89       	ldd	r19, Z+22	; 0x16
    602a:	3f 8b       	std	Y+23, r19	; 0x17
    602c:	2e 8b       	std	Y+22, r18	; 0x16
    602e:	27 89       	ldd	r18, Z+23	; 0x17
    6030:	30 8d       	ldd	r19, Z+24	; 0x18
    6032:	39 8f       	std	Y+25, r19	; 0x19
    6034:	28 8f       	std	Y+24, r18	; 0x18
    6036:	21 8d       	ldd	r18, Z+25	; 0x19
    6038:	32 8d       	ldd	r19, Z+26	; 0x1a
    603a:	3b 8f       	std	Y+27, r19	; 0x1b
    603c:	2a 8f       	std	Y+26, r18	; 0x1a
    603e:	33 8d       	ldd	r19, Z+27	; 0x1b
    6040:	31 70       	andi	r19, 0x01	; 1
    6042:	2c 8d       	ldd	r18, Y+28	; 0x1c
    6044:	2e 7f       	andi	r18, 0xFE	; 254
    6046:	23 2b       	or	r18, r19
    6048:	2c 8f       	std	Y+28, r18	; 0x1c
    604a:	33 8d       	ldd	r19, Z+27	; 0x1b
    604c:	32 70       	andi	r19, 0x02	; 2
    604e:	2d 7f       	andi	r18, 0xFD	; 253
    6050:	23 2b       	or	r18, r19
    6052:	2c 8f       	std	Y+28, r18	; 0x1c
    6054:	74 e2       	ldi	r23, 0x24	; 36
    6056:	c7 2e       	mov	r12, r23
    6058:	77 e0       	ldi	r23, 0x07	; 7
    605a:	d7 2e       	mov	r13, r23
    605c:	da 82       	std	Y+2, r13	; 0x02
    605e:	c9 82       	std	Y+1, r12	; 0x01
    6060:	24 8d       	ldd	r18, Z+28	; 0x1c
    6062:	35 8d       	ldd	r19, Z+29	; 0x1d
    6064:	46 8d       	ldd	r20, Z+30	; 0x1e
    6066:	57 8d       	ldd	r21, Z+31	; 0x1f
    6068:	2d 8f       	std	Y+29, r18	; 0x1d
    606a:	3e 8f       	std	Y+30, r19	; 0x1e
    606c:	4f 8f       	std	Y+31, r20	; 0x1f
    606e:	58 a3       	std	Y+32, r21	; 0x20
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    6070:	d7 01       	movw	r26, r14
    6072:	1a 96       	adiw	r26, 0x0a	; 10
    6074:	4d 91       	ld	r20, X+
    6076:	5c 91       	ld	r21, X
    6078:	1b 97       	sbiw	r26, 0x0b	; 11
		if(DEBUG)Serial.print("Pushed button 2");
		handleButtonPushOnAlarm();
		if (menuState == ANCHOR) {
			menuState = ANCHORMINMENU;
			menuLevel++;
			anchor->drawAnchorBox(*lcd,getMenuState());
    607a:	8e 01       	movw	r16, r28
    607c:	0f 5f       	subi	r16, 0xFF	; 255
    607e:	1f 4f       	sbci	r17, 0xFF	; 255
    6080:	b8 01       	movw	r22, r16
    6082:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_ZN6Anchor13drawAnchorBoxE3Lcdi>
    6086:	c8 01       	movw	r24, r16
    6088:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
			anchor->drawAnchorScreen(*lcd,getMenuState());
    608c:	f7 01       	movw	r30, r14
    608e:	82 89       	ldd	r24, Z+18	; 0x12
    6090:	93 89       	ldd	r25, Z+19	; 0x13
    6092:	06 84       	ldd	r0, Z+14	; 0x0e
    6094:	f7 85       	ldd	r31, Z+15	; 0x0f
    6096:	e0 2d       	mov	r30, r0
    6098:	22 81       	ldd	r18, Z+2	; 0x02
    609a:	33 81       	ldd	r19, Z+3	; 0x03
    609c:	3c a3       	std	Y+36, r19	; 0x24
    609e:	2b a3       	std	Y+35, r18	; 0x23
    60a0:	24 81       	ldd	r18, Z+4	; 0x04
    60a2:	35 81       	ldd	r19, Z+5	; 0x05
    60a4:	46 81       	ldd	r20, Z+6	; 0x06
    60a6:	57 81       	ldd	r21, Z+7	; 0x07
    60a8:	2d a3       	std	Y+37, r18	; 0x25
    60aa:	3e a3       	std	Y+38, r19	; 0x26
    60ac:	4f a3       	std	Y+39, r20	; 0x27
    60ae:	58 a7       	std	Y+40, r21	; 0x28
    60b0:	20 85       	ldd	r18, Z+8	; 0x08
    60b2:	31 85       	ldd	r19, Z+9	; 0x09
    60b4:	42 85       	ldd	r20, Z+10	; 0x0a
    60b6:	53 85       	ldd	r21, Z+11	; 0x0b
    60b8:	29 a7       	std	Y+41, r18	; 0x29
    60ba:	3a a7       	std	Y+42, r19	; 0x2a
    60bc:	4b a7       	std	Y+43, r20	; 0x2b
    60be:	5c a7       	std	Y+44, r21	; 0x2c
    60c0:	24 85       	ldd	r18, Z+12	; 0x0c
    60c2:	2d a7       	std	Y+45, r18	; 0x2d
    60c4:	25 85       	ldd	r18, Z+13	; 0x0d
    60c6:	2e a7       	std	Y+46, r18	; 0x2e
    60c8:	26 85       	ldd	r18, Z+14	; 0x0e
    60ca:	37 85       	ldd	r19, Z+15	; 0x0f
    60cc:	38 ab       	std	Y+48, r19	; 0x30
    60ce:	2f a7       	std	Y+47, r18	; 0x2f
    60d0:	20 89       	ldd	r18, Z+16	; 0x10
    60d2:	29 ab       	std	Y+49, r18	; 0x31
    60d4:	21 89       	ldd	r18, Z+17	; 0x11
    60d6:	32 89       	ldd	r19, Z+18	; 0x12
    60d8:	3b ab       	std	Y+51, r19	; 0x33
    60da:	2a ab       	std	Y+50, r18	; 0x32
    60dc:	23 89       	ldd	r18, Z+19	; 0x13
    60de:	34 89       	ldd	r19, Z+20	; 0x14
    60e0:	3d ab       	std	Y+53, r19	; 0x35
    60e2:	2c ab       	std	Y+52, r18	; 0x34
    60e4:	25 89       	ldd	r18, Z+21	; 0x15
    60e6:	36 89       	ldd	r19, Z+22	; 0x16
    60e8:	3f ab       	std	Y+55, r19	; 0x37
    60ea:	2e ab       	std	Y+54, r18	; 0x36
    60ec:	27 89       	ldd	r18, Z+23	; 0x17
    60ee:	30 8d       	ldd	r19, Z+24	; 0x18
    60f0:	39 af       	std	Y+57, r19	; 0x39
    60f2:	28 af       	std	Y+56, r18	; 0x38
    60f4:	21 8d       	ldd	r18, Z+25	; 0x19
    60f6:	32 8d       	ldd	r19, Z+26	; 0x1a
    60f8:	3b af       	std	Y+59, r19	; 0x3b
    60fa:	2a af       	std	Y+58, r18	; 0x3a
    60fc:	33 8d       	ldd	r19, Z+27	; 0x1b
    60fe:	31 70       	andi	r19, 0x01	; 1
    6100:	2c ad       	ldd	r18, Y+60	; 0x3c
    6102:	2e 7f       	andi	r18, 0xFE	; 254
    6104:	23 2b       	or	r18, r19
    6106:	2c af       	std	Y+60, r18	; 0x3c
    6108:	33 8d       	ldd	r19, Z+27	; 0x1b
    610a:	32 70       	andi	r19, 0x02	; 2
    610c:	2d 7f       	andi	r18, 0xFD	; 253
    610e:	23 2b       	or	r18, r19
    6110:	2c af       	std	Y+60, r18	; 0x3c
    6112:	da a2       	std	Y+34, r13	; 0x22
    6114:	c9 a2       	std	Y+33, r12	; 0x21
    6116:	24 8d       	ldd	r18, Z+28	; 0x1c
    6118:	35 8d       	ldd	r19, Z+29	; 0x1d
    611a:	46 8d       	ldd	r20, Z+30	; 0x1e
    611c:	57 8d       	ldd	r21, Z+31	; 0x1f
    611e:	fe 01       	movw	r30, r28
    6120:	fd 96       	adiw	r30, 0x3d	; 61
    6122:	20 83       	st	Z, r18
    6124:	31 83       	std	Z+1, r19	; 0x01
    6126:	42 83       	std	Z+2, r20	; 0x02
    6128:	53 83       	std	Z+3, r21	; 0x03
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    612a:	d7 01       	movw	r26, r14
    612c:	1a 96       	adiw	r26, 0x0a	; 10
    612e:	4d 91       	ld	r20, X+
    6130:	5c 91       	ld	r21, X
    6132:	1b 97       	sbiw	r26, 0x0b	; 11
		handleButtonPushOnAlarm();
		if (menuState == ANCHOR) {
			menuState = ANCHORMINMENU;
			menuLevel++;
			anchor->drawAnchorBox(*lcd,getMenuState());
			anchor->drawAnchorScreen(*lcd,getMenuState());
    6134:	8e 01       	movw	r16, r28
    6136:	0f 5d       	subi	r16, 0xDF	; 223
    6138:	1f 4f       	sbci	r17, 0xFF	; 255
    613a:	b8 01       	movw	r22, r16
    613c:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <_ZN6Anchor16drawAnchorScreenE3Lcdi>
    6140:	14 c1       	rjmp	.+552    	; 0x636a <_ZN4Menu8mainMenuEv+0x4c2>
		}else if (menuState == WIND) {
    6142:	f7 01       	movw	r30, r14
    6144:	82 85       	ldd	r24, Z+10	; 0x0a
    6146:	93 85       	ldd	r25, Z+11	; 0x0b
    6148:	82 30       	cpi	r24, 0x02	; 2
    614a:	91 05       	cpc	r25, r1
    614c:	09 f0       	breq	.+2      	; 0x6150 <_ZN4Menu8mainMenuEv+0x2a8>
    614e:	11 c1       	rjmp	.+546    	; 0x6372 <_ZN4Menu8mainMenuEv+0x4ca>
			menuState = WINDMINMENU;
    6150:	84 e1       	ldi	r24, 0x14	; 20
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	93 87       	std	Z+11, r25	; 0x0b
    6156:	82 87       	std	Z+10, r24	; 0x0a
			menuLevel++;
    6158:	84 85       	ldd	r24, Z+12	; 0x0c
    615a:	95 85       	ldd	r25, Z+13	; 0x0d
    615c:	01 96       	adiw	r24, 0x01	; 1
    615e:	95 87       	std	Z+13, r25	; 0x0d
    6160:	84 87       	std	Z+12, r24	; 0x0c
			wind->drawWindBox(*lcd, getMenuState());
    6162:	84 89       	ldd	r24, Z+20	; 0x14
    6164:	95 89       	ldd	r25, Z+21	; 0x15
    6166:	06 84       	ldd	r0, Z+14	; 0x0e
    6168:	f7 85       	ldd	r31, Z+15	; 0x0f
    616a:	e0 2d       	mov	r30, r0
    616c:	22 81       	ldd	r18, Z+2	; 0x02
    616e:	33 81       	ldd	r19, Z+3	; 0x03
    6170:	de 01       	movw	r26, r28
    6172:	ad 5b       	subi	r26, 0xBD	; 189
    6174:	bf 4f       	sbci	r27, 0xFF	; 255
    6176:	2d 93       	st	X+, r18
    6178:	3c 93       	st	X, r19
    617a:	24 81       	ldd	r18, Z+4	; 0x04
    617c:	35 81       	ldd	r19, Z+5	; 0x05
    617e:	46 81       	ldd	r20, Z+6	; 0x06
    6180:	57 81       	ldd	r21, Z+7	; 0x07
    6182:	de 01       	movw	r26, r28
    6184:	ab 5b       	subi	r26, 0xBB	; 187
    6186:	bf 4f       	sbci	r27, 0xFF	; 255
    6188:	2d 93       	st	X+, r18
    618a:	3d 93       	st	X+, r19
    618c:	4d 93       	st	X+, r20
    618e:	5c 93       	st	X, r21
    6190:	13 97       	sbiw	r26, 0x03	; 3
    6192:	20 85       	ldd	r18, Z+8	; 0x08
    6194:	31 85       	ldd	r19, Z+9	; 0x09
    6196:	42 85       	ldd	r20, Z+10	; 0x0a
    6198:	53 85       	ldd	r21, Z+11	; 0x0b
    619a:	de 01       	movw	r26, r28
    619c:	a7 5b       	subi	r26, 0xB7	; 183
    619e:	bf 4f       	sbci	r27, 0xFF	; 255
    61a0:	2d 93       	st	X+, r18
    61a2:	3d 93       	st	X+, r19
    61a4:	4d 93       	st	X+, r20
    61a6:	5c 93       	st	X, r21
    61a8:	13 97       	sbiw	r26, 0x03	; 3
    61aa:	24 85       	ldd	r18, Z+12	; 0x0c
    61ac:	de 01       	movw	r26, r28
    61ae:	a3 5b       	subi	r26, 0xB3	; 179
    61b0:	bf 4f       	sbci	r27, 0xFF	; 255
    61b2:	2c 93       	st	X, r18
    61b4:	25 85       	ldd	r18, Z+13	; 0x0d
    61b6:	de 01       	movw	r26, r28
    61b8:	a2 5b       	subi	r26, 0xB2	; 178
    61ba:	bf 4f       	sbci	r27, 0xFF	; 255
    61bc:	2c 93       	st	X, r18
    61be:	26 85       	ldd	r18, Z+14	; 0x0e
    61c0:	37 85       	ldd	r19, Z+15	; 0x0f
    61c2:	de 01       	movw	r26, r28
    61c4:	a1 5b       	subi	r26, 0xB1	; 177
    61c6:	bf 4f       	sbci	r27, 0xFF	; 255
    61c8:	2d 93       	st	X+, r18
    61ca:	3c 93       	st	X, r19
    61cc:	20 89       	ldd	r18, Z+16	; 0x10
    61ce:	de 01       	movw	r26, r28
    61d0:	af 5a       	subi	r26, 0xAF	; 175
    61d2:	bf 4f       	sbci	r27, 0xFF	; 255
    61d4:	2c 93       	st	X, r18
    61d6:	21 89       	ldd	r18, Z+17	; 0x11
    61d8:	32 89       	ldd	r19, Z+18	; 0x12
    61da:	de 01       	movw	r26, r28
    61dc:	ae 5a       	subi	r26, 0xAE	; 174
    61de:	bf 4f       	sbci	r27, 0xFF	; 255
    61e0:	2d 93       	st	X+, r18
    61e2:	3c 93       	st	X, r19
    61e4:	23 89       	ldd	r18, Z+19	; 0x13
    61e6:	34 89       	ldd	r19, Z+20	; 0x14
    61e8:	de 01       	movw	r26, r28
    61ea:	ac 5a       	subi	r26, 0xAC	; 172
    61ec:	bf 4f       	sbci	r27, 0xFF	; 255
    61ee:	2d 93       	st	X+, r18
    61f0:	3c 93       	st	X, r19
    61f2:	25 89       	ldd	r18, Z+21	; 0x15
    61f4:	36 89       	ldd	r19, Z+22	; 0x16
    61f6:	de 01       	movw	r26, r28
    61f8:	aa 5a       	subi	r26, 0xAA	; 170
    61fa:	bf 4f       	sbci	r27, 0xFF	; 255
    61fc:	2d 93       	st	X+, r18
    61fe:	3c 93       	st	X, r19
    6200:	27 89       	ldd	r18, Z+23	; 0x17
    6202:	30 8d       	ldd	r19, Z+24	; 0x18
    6204:	de 01       	movw	r26, r28
    6206:	a8 5a       	subi	r26, 0xA8	; 168
    6208:	bf 4f       	sbci	r27, 0xFF	; 255
    620a:	2d 93       	st	X+, r18
    620c:	3c 93       	st	X, r19
    620e:	21 8d       	ldd	r18, Z+25	; 0x19
    6210:	32 8d       	ldd	r19, Z+26	; 0x1a
    6212:	de 01       	movw	r26, r28
    6214:	a6 5a       	subi	r26, 0xA6	; 166
    6216:	bf 4f       	sbci	r27, 0xFF	; 255
    6218:	2d 93       	st	X+, r18
    621a:	3c 93       	st	X, r19
    621c:	33 8d       	ldd	r19, Z+27	; 0x1b
    621e:	31 70       	andi	r19, 0x01	; 1
    6220:	de 01       	movw	r26, r28
    6222:	a4 5a       	subi	r26, 0xA4	; 164
    6224:	bf 4f       	sbci	r27, 0xFF	; 255
    6226:	2c 91       	ld	r18, X
    6228:	2e 7f       	andi	r18, 0xFE	; 254
    622a:	23 2b       	or	r18, r19
    622c:	2c 93       	st	X, r18
    622e:	33 8d       	ldd	r19, Z+27	; 0x1b
    6230:	32 70       	andi	r19, 0x02	; 2
    6232:	2d 7f       	andi	r18, 0xFD	; 253
    6234:	23 2b       	or	r18, r19
    6236:	2c 93       	st	X, r18
    6238:	8e 01       	movw	r16, r28
    623a:	0f 5b       	subi	r16, 0xBF	; 191
    623c:	1f 4f       	sbci	r17, 0xFF	; 255
    623e:	64 e2       	ldi	r22, 0x24	; 36
    6240:	c6 2e       	mov	r12, r22
    6242:	67 e0       	ldi	r22, 0x07	; 7
    6244:	d6 2e       	mov	r13, r22
    6246:	d8 01       	movw	r26, r16
    6248:	cd 92       	st	X+, r12
    624a:	dc 92       	st	X, r13
    624c:	24 8d       	ldd	r18, Z+28	; 0x1c
    624e:	35 8d       	ldd	r19, Z+29	; 0x1d
    6250:	46 8d       	ldd	r20, Z+30	; 0x1e
    6252:	57 8d       	ldd	r21, Z+31	; 0x1f
    6254:	fe 01       	movw	r30, r28
    6256:	e3 5a       	subi	r30, 0xA3	; 163
    6258:	ff 4f       	sbci	r31, 0xFF	; 255
    625a:	20 83       	st	Z, r18
    625c:	31 83       	std	Z+1, r19	; 0x01
    625e:	42 83       	std	Z+2, r20	; 0x02
    6260:	53 83       	std	Z+3, r21	; 0x03
int Menu::getMenuLevel() {
	return menuLevel;
}

int Menu::getMenuState()  {
	return menuState;
    6262:	f7 01       	movw	r30, r14
    6264:	42 85       	ldd	r20, Z+10	; 0x0a
    6266:	53 85       	ldd	r21, Z+11	; 0x0b
			anchor->drawAnchorBox(*lcd,getMenuState());
			anchor->drawAnchorScreen(*lcd,getMenuState());
		}else if (menuState == WIND) {
			menuState = WINDMINMENU;
			menuLevel++;
			wind->drawWindBox(*lcd, getMenuState());
    6268:	b8 01       	movw	r22, r16
    626a:	0e 94 11 34 	call	0x6822	; 0x6822 <_ZN4Wind11drawWindBoxE3Lcdi>
    626e:	c8 01       	movw	r24, r16
    6270:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
			wind->drawWindScreen(*lcd, getMenuLevel());
    6274:	d7 01       	movw	r26, r14
    6276:	54 96       	adiw	r26, 0x14	; 20
    6278:	8d 91       	ld	r24, X+
    627a:	9c 91       	ld	r25, X
    627c:	55 97       	sbiw	r26, 0x15	; 21
    627e:	1e 96       	adiw	r26, 0x0e	; 14
    6280:	ed 91       	ld	r30, X+
    6282:	fc 91       	ld	r31, X
    6284:	1f 97       	sbiw	r26, 0x0f	; 15
    6286:	8e 01       	movw	r16, r28
    6288:	0f 59       	subi	r16, 0x9F	; 159
    628a:	1f 4f       	sbci	r17, 0xFF	; 255
    628c:	22 81       	ldd	r18, Z+2	; 0x02
    628e:	33 81       	ldd	r19, Z+3	; 0x03
    6290:	d8 01       	movw	r26, r16
    6292:	13 96       	adiw	r26, 0x03	; 3
    6294:	3c 93       	st	X, r19
    6296:	2e 93       	st	-X, r18
    6298:	12 97       	sbiw	r26, 0x02	; 2
    629a:	24 81       	ldd	r18, Z+4	; 0x04
    629c:	35 81       	ldd	r19, Z+5	; 0x05
    629e:	46 81       	ldd	r20, Z+6	; 0x06
    62a0:	57 81       	ldd	r21, Z+7	; 0x07
    62a2:	14 96       	adiw	r26, 0x04	; 4
    62a4:	2d 93       	st	X+, r18
    62a6:	3d 93       	st	X+, r19
    62a8:	4d 93       	st	X+, r20
    62aa:	5c 93       	st	X, r21
    62ac:	17 97       	sbiw	r26, 0x07	; 7
    62ae:	20 85       	ldd	r18, Z+8	; 0x08
    62b0:	31 85       	ldd	r19, Z+9	; 0x09
    62b2:	42 85       	ldd	r20, Z+10	; 0x0a
    62b4:	53 85       	ldd	r21, Z+11	; 0x0b
    62b6:	18 96       	adiw	r26, 0x08	; 8
    62b8:	2d 93       	st	X+, r18
    62ba:	3d 93       	st	X+, r19
    62bc:	4d 93       	st	X+, r20
    62be:	5c 93       	st	X, r21
    62c0:	1b 97       	sbiw	r26, 0x0b	; 11
    62c2:	24 85       	ldd	r18, Z+12	; 0x0c
    62c4:	1c 96       	adiw	r26, 0x0c	; 12
    62c6:	2c 93       	st	X, r18
    62c8:	1c 97       	sbiw	r26, 0x0c	; 12
    62ca:	25 85       	ldd	r18, Z+13	; 0x0d
    62cc:	1d 96       	adiw	r26, 0x0d	; 13
    62ce:	2c 93       	st	X, r18
    62d0:	1d 97       	sbiw	r26, 0x0d	; 13
    62d2:	26 85       	ldd	r18, Z+14	; 0x0e
    62d4:	37 85       	ldd	r19, Z+15	; 0x0f
    62d6:	1f 96       	adiw	r26, 0x0f	; 15
    62d8:	3c 93       	st	X, r19
    62da:	2e 93       	st	-X, r18
    62dc:	1e 97       	sbiw	r26, 0x0e	; 14
    62de:	20 89       	ldd	r18, Z+16	; 0x10
    62e0:	50 96       	adiw	r26, 0x10	; 16
    62e2:	2c 93       	st	X, r18
    62e4:	50 97       	sbiw	r26, 0x10	; 16
    62e6:	21 89       	ldd	r18, Z+17	; 0x11
    62e8:	32 89       	ldd	r19, Z+18	; 0x12
    62ea:	52 96       	adiw	r26, 0x12	; 18
    62ec:	3c 93       	st	X, r19
    62ee:	2e 93       	st	-X, r18
    62f0:	51 97       	sbiw	r26, 0x11	; 17
    62f2:	23 89       	ldd	r18, Z+19	; 0x13
    62f4:	34 89       	ldd	r19, Z+20	; 0x14
    62f6:	54 96       	adiw	r26, 0x14	; 20
    62f8:	3c 93       	st	X, r19
    62fa:	2e 93       	st	-X, r18
    62fc:	53 97       	sbiw	r26, 0x13	; 19
    62fe:	25 89       	ldd	r18, Z+21	; 0x15
    6300:	36 89       	ldd	r19, Z+22	; 0x16
    6302:	56 96       	adiw	r26, 0x16	; 22
    6304:	3c 93       	st	X, r19
    6306:	2e 93       	st	-X, r18
    6308:	55 97       	sbiw	r26, 0x15	; 21
    630a:	27 89       	ldd	r18, Z+23	; 0x17
    630c:	30 8d       	ldd	r19, Z+24	; 0x18
    630e:	58 96       	adiw	r26, 0x18	; 24
    6310:	3c 93       	st	X, r19
    6312:	2e 93       	st	-X, r18
    6314:	57 97       	sbiw	r26, 0x17	; 23
    6316:	21 8d       	ldd	r18, Z+25	; 0x19
    6318:	32 8d       	ldd	r19, Z+26	; 0x1a
    631a:	5a 96       	adiw	r26, 0x1a	; 26
    631c:	3c 93       	st	X, r19
    631e:	2e 93       	st	-X, r18
    6320:	59 97       	sbiw	r26, 0x19	; 25
    6322:	33 8d       	ldd	r19, Z+27	; 0x1b
    6324:	31 70       	andi	r19, 0x01	; 1
    6326:	5b 96       	adiw	r26, 0x1b	; 27
    6328:	2c 91       	ld	r18, X
    632a:	5b 97       	sbiw	r26, 0x1b	; 27
    632c:	2e 7f       	andi	r18, 0xFE	; 254
    632e:	23 2b       	or	r18, r19
    6330:	5b 96       	adiw	r26, 0x1b	; 27
    6332:	2c 93       	st	X, r18
    6334:	5b 97       	sbiw	r26, 0x1b	; 27
    6336:	33 8d       	ldd	r19, Z+27	; 0x1b
    6338:	32 70       	andi	r19, 0x02	; 2
    633a:	2d 7f       	andi	r18, 0xFD	; 253
    633c:	23 2b       	or	r18, r19
    633e:	5b 96       	adiw	r26, 0x1b	; 27
    6340:	2c 93       	st	X, r18
    6342:	5b 97       	sbiw	r26, 0x1b	; 27
    6344:	cd 92       	st	X+, r12
    6346:	dc 92       	st	X, r13
    6348:	24 8d       	ldd	r18, Z+28	; 0x1c
    634a:	35 8d       	ldd	r19, Z+29	; 0x1d
    634c:	46 8d       	ldd	r20, Z+30	; 0x1e
    634e:	57 8d       	ldd	r21, Z+31	; 0x1f
    6350:	f8 01       	movw	r30, r16
    6352:	24 8f       	std	Z+28, r18	; 0x1c
    6354:	35 8f       	std	Z+29, r19	; 0x1d
    6356:	46 8f       	std	Z+30, r20	; 0x1e
    6358:	57 8f       	std	Z+31, r21	; 0x1f
		}
	}
}

int Menu::getMenuLevel() {
	return menuLevel;
    635a:	d7 01       	movw	r26, r14
    635c:	1c 96       	adiw	r26, 0x0c	; 12
    635e:	4d 91       	ld	r20, X+
    6360:	5c 91       	ld	r21, X
    6362:	1d 97       	sbiw	r26, 0x0d	; 13
			anchor->drawAnchorScreen(*lcd,getMenuState());
		}else if (menuState == WIND) {
			menuState = WINDMINMENU;
			menuLevel++;
			wind->drawWindBox(*lcd, getMenuState());
			wind->drawWindScreen(*lcd, getMenuLevel());
    6364:	b8 01       	movw	r22, r16
    6366:	0e 94 62 33 	call	0x66c4	; 0x66c4 <_ZN4Wind14drawWindScreenE3Lcdi>
    636a:	c8 01       	movw	r24, r16
    636c:	0e 94 38 21 	call	0x4270	; 0x4270 <_ZN3LcdD1Ev>
    6370:	02 c0       	rjmp	.+4      	; 0x6376 <_ZN4Menu8mainMenuEv+0x4ce>
		}else{
			button2Bouncer=LOW;
    6372:	f7 01       	movw	r30, r14
    6374:	14 82       	std	Z+4, r1	; 0x04
		}
		return;
	}

}
    6376:	c0 58       	subi	r28, 0x80	; 128
    6378:	df 4f       	sbci	r29, 0xFF	; 255
    637a:	0f b6       	in	r0, 0x3f	; 63
    637c:	f8 94       	cli
    637e:	de bf       	out	0x3e, r29	; 62
    6380:	0f be       	out	0x3f, r0	; 63
    6382:	cd bf       	out	0x3d, r28	; 61
    6384:	cf 91       	pop	r28
    6386:	df 91       	pop	r29
    6388:	1f 91       	pop	r17
    638a:	0f 91       	pop	r16
    638c:	ff 90       	pop	r15
    638e:	ef 90       	pop	r14
    6390:	df 90       	pop	r13
    6392:	cf 90       	pop	r12
    6394:	08 95       	ret

00006396 <_ZN4Menu12checkButtonsEv>:
	if(buttonPin == button2)button2Bouncer=HIGH;
	if(buttonPin == button3)button3Bouncer=HIGH;
}
/*Check if buttons were pressed initiating a menu
 */
void Menu::checkButtons() {
    6396:	cf 93       	push	r28
    6398:	df 93       	push	r29
    639a:	ec 01       	movw	r28, r24
//	if(DEBUG)Serial.print("ButtonPin=");
//	if(DEBUG)Serial.println(button0Pin);
//	//mainMenu();
//	if(DEBUG)Serial.print("Menu level=");
//	if(DEBUG)Serial.println(menuLevel);
	switch (menuLevel) {
    639c:	8c 85       	ldd	r24, Y+12	; 0x0c
    639e:	9d 85       	ldd	r25, Y+13	; 0x0d
    63a0:	81 30       	cpi	r24, 0x01	; 1
    63a2:	91 05       	cpc	r25, r1
    63a4:	51 f0       	breq	.+20     	; 0x63ba <_ZN4Menu12checkButtonsEv+0x24>
    63a6:	82 30       	cpi	r24, 0x02	; 2
    63a8:	91 05       	cpc	r25, r1
    63aa:	71 f1       	breq	.+92     	; 0x6408 <_ZN4Menu12checkButtonsEv+0x72>
    63ac:	00 97       	sbiw	r24, 0x00	; 0
    63ae:	09 f0       	breq	.+2      	; 0x63b2 <_ZN4Menu12checkButtonsEv+0x1c>
    63b0:	47 c0       	rjmp	.+142    	; 0x6440 <_ZN4Menu12checkButtonsEv+0xaa>
	case 0:
		mainMenu();
    63b2:	ce 01       	movw	r24, r28
    63b4:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <_ZN4Menu8mainMenuEv>
		break;
    63b8:	43 c0       	rjmp	.+134    	; 0x6440 <_ZN4Menu12checkButtonsEv+0xaa>

	case 1:
		if (menuState == ANCHOR || (menuState >= ANCHORMINMENU
    63ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    63bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    63be:	81 30       	cpi	r24, 0x01	; 1
    63c0:	91 05       	cpc	r25, r1
    63c2:	51 f0       	breq	.+20     	; 0x63d8 <_ZN4Menu12checkButtonsEv+0x42>
    63c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    63c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    63c8:	8a 30       	cpi	r24, 0x0A	; 10
    63ca:	91 05       	cpc	r25, r1
    63cc:	7c f1       	brlt	.+94     	; 0x642c <_ZN4Menu12checkButtonsEv+0x96>
    63ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    63d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    63d2:	8e 30       	cpi	r24, 0x0E	; 14
    63d4:	91 05       	cpc	r25, r1
    63d6:	54 f5       	brge	.+84     	; 0x642c <_ZN4Menu12checkButtonsEv+0x96>
				&& menuState <= ANCHORMAXMENU)) {
			if(DEBUG)Serial.print("Anchor menu");
    63d8:	87 e2       	ldi	r24, 0x27	; 39
    63da:	9e e0       	ldi	r25, 0x0E	; 14
    63dc:	62 e3       	ldi	r22, 0x32	; 50
    63de:	76 e0       	ldi	r23, 0x06	; 6
    63e0:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
			anchorMenu();
    63e4:	ce 01       	movw	r24, r28
    63e6:	0e 94 07 24 	call	0x480e	; 0x480e <_ZN4Menu10anchorMenuEv>
			return;
    63ea:	2a c0       	rjmp	.+84     	; 0x6440 <_ZN4Menu12checkButtonsEv+0xaa>
		}
		if (menuState == WIND || (menuState >= WINDMINMENU && menuState
    63ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    63ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    63f0:	84 31       	cpi	r24, 0x14	; 20
    63f2:	91 05       	cpc	r25, r1
    63f4:	0c f1       	brlt	.+66     	; 0x6438 <_ZN4Menu12checkButtonsEv+0xa2>
    63f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    63f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    63fa:	87 31       	cpi	r24, 0x17	; 23
    63fc:	91 05       	cpc	r25, r1
    63fe:	e4 f4       	brge	.+56     	; 0x6438 <_ZN4Menu12checkButtonsEv+0xa2>
				<= WINDMAXMENU)) {
			windMenu();
    6400:	ce 01       	movw	r24, r28
    6402:	0e 94 95 29 	call	0x532a	; 0x532a <_ZN4Menu8windMenuEv>
			return;
    6406:	1c c0       	rjmp	.+56     	; 0x6440 <_ZN4Menu12checkButtonsEv+0xaa>
		menuLevel = 0;

		break;

	case 2:
		if (menuState == ANCHORRADIUS) {
    6408:	8a 85       	ldd	r24, Y+10	; 0x0a
    640a:	9b 85       	ldd	r25, Y+11	; 0x0b
    640c:	8c 30       	cpi	r24, 0x0C	; 12
    640e:	91 05       	cpc	r25, r1
    6410:	21 f4       	brne	.+8      	; 0x641a <_ZN4Menu12checkButtonsEv+0x84>
			anchorRadiusMenu();
    6412:	ce 01       	movw	r24, r28
    6414:	0e 94 e5 27 	call	0x4fca	; 0x4fca <_ZN4Menu16anchorRadiusMenuEv>
			return;
    6418:	13 c0       	rjmp	.+38     	; 0x6440 <_ZN4Menu12checkButtonsEv+0xaa>
		}
		if (menuState == WINDSPEED) {
    641a:	8a 85       	ldd	r24, Y+10	; 0x0a
    641c:	9b 85       	ldd	r25, Y+11	; 0x0b
    641e:	85 31       	cpi	r24, 0x15	; 21
    6420:	91 05       	cpc	r25, r1
    6422:	71 f4       	brne	.+28     	; 0x6440 <_ZN4Menu12checkButtonsEv+0xaa>
			windSpeedMenu();
    6424:	ce 01       	movw	r24, r28
    6426:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <_ZN4Menu13windSpeedMenuEv>
			return;
    642a:	0a c0       	rjmp	.+20     	; 0x6440 <_ZN4Menu12checkButtonsEv+0xaa>
				&& menuState <= ANCHORMAXMENU)) {
			if(DEBUG)Serial.print("Anchor menu");
			anchorMenu();
			return;
		}
		if (menuState == WIND || (menuState >= WINDMINMENU && menuState
    642c:	8a 85       	ldd	r24, Y+10	; 0x0a
    642e:	9b 85       	ldd	r25, Y+11	; 0x0b
    6430:	82 30       	cpi	r24, 0x02	; 2
    6432:	91 05       	cpc	r25, r1
    6434:	d9 f6       	brne	.-74     	; 0x63ec <_ZN4Menu12checkButtonsEv+0x56>
    6436:	e4 cf       	rjmp	.-56     	; 0x6400 <_ZN4Menu12checkButtonsEv+0x6a>
				<= WINDMAXMENU)) {
			windMenu();
			return;
		}
		menuState = MINMENU;
    6438:	1b 86       	std	Y+11, r1	; 0x0b
    643a:	1a 86       	std	Y+10, r1	; 0x0a
		menuLevel = 0;
    643c:	1d 86       	std	Y+13, r1	; 0x0d
    643e:	1c 86       	std	Y+12, r1	; 0x0c
		}
		break;
		// default:

	}
}
    6440:	df 91       	pop	r29
    6442:	cf 91       	pop	r28
    6444:	08 95       	ret

00006446 <_ZN10NmeaSerialD1Ev>:
 */

#include "NmeaSerial.h"


NmeaSerial::~NmeaSerial(){
    6446:	2e e4       	ldi	r18, 0x4E	; 78
    6448:	37 e0       	ldi	r19, 0x07	; 7
    644a:	fc 01       	movw	r30, r24
    644c:	31 83       	std	Z+1, r19	; 0x01
    644e:	20 83       	st	Z, r18
    6450:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_ZN14SoftwareSerialD1Ev>

}
    6454:	08 95       	ret

00006456 <_ZN10NmeaSerialD0Ev>:
 */

#include "NmeaSerial.h"


NmeaSerial::~NmeaSerial(){
    6456:	cf 93       	push	r28
    6458:	df 93       	push	r29
    645a:	ec 01       	movw	r28, r24
    645c:	8e e4       	ldi	r24, 0x4E	; 78
    645e:	97 e0       	ldi	r25, 0x07	; 7
    6460:	99 83       	std	Y+1, r25	; 0x01
    6462:	88 83       	st	Y, r24
    6464:	ce 01       	movw	r24, r28
    6466:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_ZN14SoftwareSerialD1Ev>

}
    646a:	ce 01       	movw	r24, r28
    646c:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <_ZdlPv>
    6470:	df 91       	pop	r29
    6472:	cf 91       	pop	r28
    6474:	08 95       	ret

00006476 <_ZN10NmeaSerial5beginEl>:
void NmeaSerial::begin(long speed){
	//initialise the nmea output
		//pinMode(nmeaRxPin, INPUT);
		//pinMode(nmeaTxPin, OUTPUT);
		SoftwareSerial::begin(speed);
    6476:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN14SoftwareSerial5beginEl>
}
    647a:	08 95       	ret

0000647c <_ZN10NmeaSerial9printNmeaEPc>:

void NmeaSerial::printNmea(char* sentence){
	//sentence can be up to 80 chars
	  //make it as perfect as possible, as the Raymarine C70 is very touchy
	 // noInterrupts();
	  println(sentence);
    647c:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
	 // interrupts();
	  //if(DEBUG)Serial.println(sentence);
}
    6480:	08 95       	ret

00006482 <_ZN7SeatalkC1EP5AlarmP14HardwareSerial>:

 */

#include "Seatalk.h"

	Seatalk::Seatalk(Alarm* alarm, HardwareSerial* serial) {
    6482:	fc 01       	movw	r30, r24
	this->alarm=alarm;
    6484:	71 8f       	std	Z+25, r23	; 0x19
    6486:	60 8f       	std	Z+24, r22	; 0x18
	this->serial=serial;
    6488:	53 8f       	std	Z+27, r21	; 0x1b
    648a:	42 8f       	std	Z+26, r20	; 0x1a
	radarAlarmTriggered = false; //set to true to trigger radar alarm
    648c:	10 82       	st	Z, r1
	mobAlarmTriggered = false; //set to true to trigger MOB alarm
    648e:	11 82       	std	Z+1, r1	; 0x01
	seaTalkPos = 0;
    6490:	13 82       	std	Z+3, r1	; 0x03
    6492:	12 82       	std	Z+2, r1	; 0x02
}
    6494:	08 95       	ret

00006496 <_ZN7Seatalk13radarAlarmOffEv>:
	// send 66  00 00 Wind alarm over
	serial->write9(0x66, true);
	serial->write9(0x00, false);
	serial->write9(0x00, false);
}
void Seatalk::radarAlarmOff() {
    6496:	cf 93       	push	r28
    6498:	df 93       	push	r29
    649a:	ec 01       	movw	r28, r24
	// send A8  43  80 00 00 C3  Alarm OFF for Guard #1 or #2
	serial->write9(0xA8, true);
    649c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    649e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    64a0:	dc 01       	movw	r26, r24
    64a2:	ed 91       	ld	r30, X+
    64a4:	fc 91       	ld	r31, X
    64a6:	04 84       	ldd	r0, Z+12	; 0x0c
    64a8:	f5 85       	ldd	r31, Z+13	; 0x0d
    64aa:	e0 2d       	mov	r30, r0
    64ac:	68 ea       	ldi	r22, 0xA8	; 168
    64ae:	41 e0       	ldi	r20, 0x01	; 1
    64b0:	09 95       	icall
	serial->write9(0x43, false);
    64b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    64b4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    64b6:	dc 01       	movw	r26, r24
    64b8:	ed 91       	ld	r30, X+
    64ba:	fc 91       	ld	r31, X
    64bc:	04 84       	ldd	r0, Z+12	; 0x0c
    64be:	f5 85       	ldd	r31, Z+13	; 0x0d
    64c0:	e0 2d       	mov	r30, r0
    64c2:	63 e4       	ldi	r22, 0x43	; 67
    64c4:	40 e0       	ldi	r20, 0x00	; 0
    64c6:	09 95       	icall
	serial->write9(0x00, false);
    64c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    64ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    64cc:	dc 01       	movw	r26, r24
    64ce:	ed 91       	ld	r30, X+
    64d0:	fc 91       	ld	r31, X
    64d2:	04 84       	ldd	r0, Z+12	; 0x0c
    64d4:	f5 85       	ldd	r31, Z+13	; 0x0d
    64d6:	e0 2d       	mov	r30, r0
    64d8:	60 e0       	ldi	r22, 0x00	; 0
    64da:	40 e0       	ldi	r20, 0x00	; 0
    64dc:	09 95       	icall
	serial->write9(0x00, false);
    64de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    64e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    64e2:	dc 01       	movw	r26, r24
    64e4:	ed 91       	ld	r30, X+
    64e6:	fc 91       	ld	r31, X
    64e8:	04 84       	ldd	r0, Z+12	; 0x0c
    64ea:	f5 85       	ldd	r31, Z+13	; 0x0d
    64ec:	e0 2d       	mov	r30, r0
    64ee:	60 e0       	ldi	r22, 0x00	; 0
    64f0:	40 e0       	ldi	r20, 0x00	; 0
    64f2:	09 95       	icall
	// send AB  43  80 00 00 C3  Alarm OFF for Guard #1 or #2
	serial->write9(0xAB, true);
    64f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    64f6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    64f8:	dc 01       	movw	r26, r24
    64fa:	ed 91       	ld	r30, X+
    64fc:	fc 91       	ld	r31, X
    64fe:	04 84       	ldd	r0, Z+12	; 0x0c
    6500:	f5 85       	ldd	r31, Z+13	; 0x0d
    6502:	e0 2d       	mov	r30, r0
    6504:	6b ea       	ldi	r22, 0xAB	; 171
    6506:	41 e0       	ldi	r20, 0x01	; 1
    6508:	09 95       	icall
	serial->write9(0x43, false);
    650a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    650c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    650e:	dc 01       	movw	r26, r24
    6510:	ed 91       	ld	r30, X+
    6512:	fc 91       	ld	r31, X
    6514:	04 84       	ldd	r0, Z+12	; 0x0c
    6516:	f5 85       	ldd	r31, Z+13	; 0x0d
    6518:	e0 2d       	mov	r30, r0
    651a:	63 e4       	ldi	r22, 0x43	; 67
    651c:	40 e0       	ldi	r20, 0x00	; 0
    651e:	09 95       	icall
	serial->write9(0x00, false);
    6520:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6522:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6524:	dc 01       	movw	r26, r24
    6526:	ed 91       	ld	r30, X+
    6528:	fc 91       	ld	r31, X
    652a:	04 84       	ldd	r0, Z+12	; 0x0c
    652c:	f5 85       	ldd	r31, Z+13	; 0x0d
    652e:	e0 2d       	mov	r30, r0
    6530:	60 e0       	ldi	r22, 0x00	; 0
    6532:	40 e0       	ldi	r20, 0x00	; 0
    6534:	09 95       	icall
	serial->write9(0x00, false);
    6536:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6538:	9b 8d       	ldd	r25, Y+27	; 0x1b
    653a:	dc 01       	movw	r26, r24
    653c:	ed 91       	ld	r30, X+
    653e:	fc 91       	ld	r31, X
    6540:	04 84       	ldd	r0, Z+12	; 0x0c
    6542:	f5 85       	ldd	r31, Z+13	; 0x0d
    6544:	e0 2d       	mov	r30, r0
    6546:	60 e0       	ldi	r22, 0x00	; 0
    6548:	40 e0       	ldi	r20, 0x00	; 0
    654a:	09 95       	icall
}
    654c:	df 91       	pop	r29
    654e:	cf 91       	pop	r28
    6550:	08 95       	ret

00006552 <_ZN4Wind13printWindNmeaEv>:
	}
	windAlarmOn = readWindAlarmState();

}

void Wind::printWindNmea() {
    6552:	cf 92       	push	r12
    6554:	df 92       	push	r13
    6556:	ef 92       	push	r14
    6558:	ff 92       	push	r15
    655a:	0f 93       	push	r16
    655c:	1f 93       	push	r17
    655e:	df 93       	push	r29
    6560:	cf 93       	push	r28
    6562:	cd b7       	in	r28, 0x3d	; 61
    6564:	de b7       	in	r29, 0x3e	; 62
    6566:	2a 97       	sbiw	r28, 0x0a	; 10
    6568:	0f b6       	in	r0, 0x3f	; 63
    656a:	f8 94       	cli
    656c:	de bf       	out	0x3e, r29	; 62
    656e:	0f be       	out	0x3f, r0	; 63
    6570:	cd bf       	out	0x3d, r28	; 61
    6572:	8c 01       	movw	r16, r24
		//Assemble a sentence of the various parts so that we can calculate the proper checksum

		PString str(windSentence, sizeof(windSentence));
    6574:	88 e1       	ldi	r24, 0x18	; 24
    6576:	c8 2e       	mov	r12, r24
    6578:	d1 2c       	mov	r13, r1
    657a:	c0 0e       	add	r12, r16
    657c:	d1 1e       	adc	r13, r17
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    657e:	1c 82       	std	Y+4, r1	; 0x04
    6580:	1b 82       	std	Y+3, r1	; 0x03
  virtual size_t write(uint8_t);

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    6582:	8c e0       	ldi	r24, 0x0C	; 12
    6584:	97 e0       	ldi	r25, 0x07	; 7
    6586:	9a 83       	std	Y+2, r25	; 0x02
    6588:	89 83       	std	Y+1, r24	; 0x01
    658a:	de 82       	std	Y+6, r13	; 0x06
    658c:	cd 82       	std	Y+5, r12	; 0x05
    658e:	8e e1       	ldi	r24, 0x1E	; 30
    6590:	90 e0       	ldi	r25, 0x00	; 0
    6592:	9a 87       	std	Y+10, r25	; 0x0a
    6594:	89 87       	std	Y+9, r24	; 0x09
  { begin(); }
    6596:	7e 01       	movw	r14, r28
    6598:	08 94       	sec
    659a:	e1 1c       	adc	r14, r1
    659c:	f1 1c       	adc	r15, r1
    659e:	c7 01       	movw	r24, r14
    65a0:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN7PString5beginEv>
		str.print("$IIMWV,");
    65a4:	c7 01       	movw	r24, r14
    65a6:	6e e3       	ldi	r22, 0x3E	; 62
    65a8:	76 e0       	ldi	r23, 0x06	; 6
    65aa:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		str.print(windApparentDir);
    65ae:	d8 01       	movw	r26, r16
    65b0:	52 96       	adiw	r26, 0x12	; 18
    65b2:	6d 91       	ld	r22, X+
    65b4:	7c 91       	ld	r23, X
    65b6:	53 97       	sbiw	r26, 0x13	; 19
    65b8:	c7 01       	movw	r24, r14
    65ba:	4a e0       	ldi	r20, 0x0A	; 10
    65bc:	50 e0       	ldi	r21, 0x00	; 0
    65be:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <_ZN5Print5printEii>
		str.print(".0,R,");
    65c2:	c7 01       	movw	r24, r14
    65c4:	66 e4       	ldi	r22, 0x46	; 70
    65c6:	76 e0       	ldi	r23, 0x06	; 6
    65c8:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		str.print(windAverage);
    65cc:	f8 01       	movw	r30, r16
    65ce:	62 85       	ldd	r22, Z+10	; 0x0a
    65d0:	73 85       	ldd	r23, Z+11	; 0x0b
    65d2:	c7 01       	movw	r24, r14
    65d4:	4a e0       	ldi	r20, 0x0A	; 10
    65d6:	50 e0       	ldi	r21, 0x00	; 0
    65d8:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <_ZN5Print5printEii>
		str.print(".0,N,A*");
    65dc:	c7 01       	movw	r24, r14
    65de:	6c e4       	ldi	r22, 0x4C	; 76
    65e0:	76 e0       	ldi	r23, 0x06	; 6
    65e2:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		//calculate the checksum

		cs = 0; //clear any old checksum
    65e6:	d8 01       	movw	r26, r16
    65e8:	d7 96       	adiw	r26, 0x37	; 55
    65ea:	1c 92       	st	X, r1
    65ec:	1e 92       	st	-X, r1
    65ee:	d6 97       	sbiw	r26, 0x36	; 54
	}
	windAlarmOn = readWindAlarmState();

}

void Wind::printWindNmea() {
    65f0:	98 01       	movw	r18, r16
    65f2:	27 5e       	subi	r18, 0xE7	; 231
    65f4:	3f 4f       	sbci	r19, 0xFF	; 255
		str.print(windAverage);
		str.print(".0,N,A*");
		//calculate the checksum

		cs = 0; //clear any old checksum
		for (unsigned int n = 1; n < strlen(windSentence) - 1; n++) {
    65f6:	81 e0       	ldi	r24, 0x01	; 1
    65f8:	90 e0       	ldi	r25, 0x00	; 0
    65fa:	0e c0       	rjmp	.+28     	; 0x6618 <_ZN4Wind13printWindNmeaEv+0xc6>
			cs ^= windSentence[n]; //calculates the checksum
    65fc:	f9 01       	movw	r30, r18
    65fe:	41 91       	ld	r20, Z+
    6600:	9f 01       	movw	r18, r30
    6602:	55 27       	eor	r21, r21
    6604:	47 fd       	sbrc	r20, 7
    6606:	50 95       	com	r21
    6608:	46 27       	eor	r20, r22
    660a:	57 27       	eor	r21, r23
    660c:	d8 01       	movw	r26, r16
    660e:	d7 96       	adiw	r26, 0x37	; 55
    6610:	5c 93       	st	X, r21
    6612:	4e 93       	st	-X, r20
    6614:	d6 97       	sbiw	r26, 0x36	; 54
		str.print(windAverage);
		str.print(".0,N,A*");
		//calculate the checksum

		cs = 0; //clear any old checksum
		for (unsigned int n = 1; n < strlen(windSentence) - 1; n++) {
    6616:	01 96       	adiw	r24, 0x01	; 1
    6618:	f6 01       	movw	r30, r12
    661a:	01 90       	ld	r0, Z+
    661c:	00 20       	and	r0, r0
    661e:	e9 f7       	brne	.-6      	; 0x661a <_ZN4Wind13printWindNmeaEv+0xc8>
    6620:	ec 19       	sub	r30, r12
    6622:	fd 09       	sbc	r31, r13
    6624:	32 97       	sbiw	r30, 0x02	; 2
    6626:	d8 01       	movw	r26, r16
    6628:	d6 96       	adiw	r26, 0x36	; 54
    662a:	6d 91       	ld	r22, X+
    662c:	7c 91       	ld	r23, X
    662e:	d7 97       	sbiw	r26, 0x37	; 55
    6630:	8e 17       	cp	r24, r30
    6632:	9f 07       	cpc	r25, r31
    6634:	18 f3       	brcs	.-58     	; 0x65fc <_ZN4Wind13printWindNmeaEv+0xaa>
			cs ^= windSentence[n]; //calculates the checksum
		}
		str.print(cs, HEX); // Assemble the final message and send it out the serial port
    6636:	ce 01       	movw	r24, r28
    6638:	01 96       	adiw	r24, 0x01	; 1
    663a:	40 e1       	ldi	r20, 0x10	; 16
    663c:	50 e0       	ldi	r21, 0x00	; 0
    663e:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <_ZN5Print5printEii>
		if(DEBUG)Serial.println(windSentence);
    6642:	87 e2       	ldi	r24, 0x27	; 39
    6644:	9e e0       	ldi	r25, 0x0E	; 14
    6646:	b6 01       	movw	r22, r12
    6648:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN5Print7printlnEPKc>
		nmea->printNmea(windSentence);
    664c:	f8 01       	movw	r30, r16
    664e:	80 81       	ld	r24, Z
    6650:	91 81       	ldd	r25, Z+1	; 0x01
    6652:	b6 01       	movw	r22, r12
    6654:	0e 94 3e 32 	call	0x647c	; 0x647c <_ZN10NmeaSerial9printNmeaEPc>

}
    6658:	2a 96       	adiw	r28, 0x0a	; 10
    665a:	0f b6       	in	r0, 0x3f	; 63
    665c:	f8 94       	cli
    665e:	de bf       	out	0x3e, r29	; 62
    6660:	0f be       	out	0x3f, r0	; 63
    6662:	cd bf       	out	0x3d, r28	; 61
    6664:	cf 91       	pop	r28
    6666:	df 91       	pop	r29
    6668:	1f 91       	pop	r17
    666a:	0f 91       	pop	r16
    666c:	ff 90       	pop	r15
    666e:	ef 90       	pop	r14
    6670:	df 90       	pop	r13
    6672:	cf 90       	pop	r12
    6674:	08 95       	ret

00006676 <_ZN4Wind14checkWindAlarmEv>:

void Wind::setupWindAlarm() {

}

void Wind::checkWindAlarm(){
    6676:	fc 01       	movw	r30, r24
	//check alarm val
		if (windAlarmOn && windAlarmSpeed > 0 && windAverage > windAlarmSpeed) {
    6678:	86 89       	ldd	r24, Z+22	; 0x16
    667a:	88 23       	and	r24, r24
    667c:	69 f0       	breq	.+26     	; 0x6698 <_ZN4Wind14checkWindAlarmEv+0x22>
    667e:	84 89       	ldd	r24, Z+20	; 0x14
    6680:	95 89       	ldd	r25, Z+21	; 0x15
    6682:	18 16       	cp	r1, r24
    6684:	19 06       	cpc	r1, r25
    6686:	44 f4       	brge	.+16     	; 0x6698 <_ZN4Wind14checkWindAlarmEv+0x22>
    6688:	22 85       	ldd	r18, Z+10	; 0x0a
    668a:	33 85       	ldd	r19, Z+11	; 0x0b
    668c:	82 17       	cp	r24, r18
    668e:	93 07       	cpc	r25, r19
    6690:	1c f4       	brge	.+6      	; 0x6698 <_ZN4Wind14checkWindAlarmEv+0x22>
			//TODO: Alarm snooze, better handling of this
			//setSnoozeAlarm(0);
			windAlarmTriggered = true;
    6692:	81 e0       	ldi	r24, 0x01	; 1
    6694:	87 8b       	std	Z+23, r24	; 0x17
    6696:	08 95       	ret
		} else {
			windAlarmTriggered = false;
    6698:	17 8a       	std	Z+23, r1	; 0x17
    669a:	08 95       	ret

0000669c <_ZN4Wind12setWindAlarmEb>:

}

/*Set wind alarm ON/OFF */
void Wind::setWindAlarm(bool flag) {
	this->windAlarmOn = flag;
    669c:	fc 01       	movw	r30, r24
    669e:	66 8b       	std	Z+22, r22	; 0x16
	saveWindAlarmState(windAlarmOn);
    66a0:	86 2f       	mov	r24, r22
    66a2:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_Z18saveWindAlarmStateb>
}
    66a6:	08 95       	ret

000066a8 <_ZN4Wind17setWindAlarmSpeedEi>:
void Wind::setLastWindUpdate(unsigned long lastWindUpdate) {
	this->lastWindUpdate = lastWindUpdate;
}

void Wind::setWindAlarmSpeed(int windAlarmSpeed) {
	this->windAlarmSpeed = windAlarmSpeed;
    66a8:	fc 01       	movw	r30, r24
    66aa:	75 8b       	std	Z+21, r23	; 0x15
    66ac:	64 8b       	std	Z+20, r22	; 0x14
	saveWindAlarmSpeed(windAlarmSpeed);
    66ae:	cb 01       	movw	r24, r22
    66b0:	0e 94 ba 1a 	call	0x3574	; 0x3574 <_Z18saveWindAlarmSpeedi>
}
    66b4:	08 95       	ret

000066b6 <_ZN4Wind17getWindAlarmSpeedEv>:

void Wind::setWindAverage(int windAverage) {
	this->windAverage = windAverage;
}

int Wind::getWindAlarmSpeed(){
    66b6:	fc 01       	movw	r30, r24
	return windAlarmSpeed;
}
    66b8:	84 89       	ldd	r24, Z+20	; 0x14
    66ba:	95 89       	ldd	r25, Z+21	; 0x15
    66bc:	08 95       	ret

000066be <_ZN4Wind12getWindAlarmEv>:
bool Wind::getWindAlarm() {
	return this->windAlarmOn;
}
    66be:	fc 01       	movw	r30, r24
    66c0:	86 89       	ldd	r24, Z+22	; 0x16
    66c2:	08 95       	ret

000066c4 <_ZN4Wind14drawWindScreenE3Lcdi>:
			drawWindScreen(lcd, menuLevel);
			lastLcdUpdate= millis();
		}
	}
}
void Wind::drawWindScreen(Lcd lcd, int menuLevel) {
    66c4:	ef 92       	push	r14
    66c6:	ff 92       	push	r15
    66c8:	0f 93       	push	r16
    66ca:	1f 93       	push	r17
    66cc:	cf 93       	push	r28
    66ce:	df 93       	push	r29
    66d0:	ec 01       	movw	r28, r24
    66d2:	7b 01       	movw	r14, r22
    66d4:	8a 01       	movw	r16, r20
	//update screen
	lcd.setCursor(2, 60);
    66d6:	cb 01       	movw	r24, r22
    66d8:	62 e0       	ldi	r22, 0x02	; 2
    66da:	70 e0       	ldi	r23, 0x00	; 0
    66dc:	4c e3       	ldi	r20, 0x3C	; 60
    66de:	50 e0       	ldi	r21, 0x00	; 0
    66e0:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
	lcd.print("WIND: ");
    66e4:	c7 01       	movw	r24, r14
    66e6:	64 e5       	ldi	r22, 0x54	; 84
    66e8:	76 e0       	ldi	r23, 0x06	; 6
    66ea:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	lcd.print((int) windAverage);
    66ee:	6a 85       	ldd	r22, Y+10	; 0x0a
    66f0:	7b 85       	ldd	r23, Y+11	; 0x0b
    66f2:	c7 01       	movw	r24, r14
    66f4:	4a e0       	ldi	r20, 0x0A	; 10
    66f6:	50 e0       	ldi	r21, 0x00	; 0
    66f8:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <_ZN5Print5printEii>
	lcd.print("KNTS    ");
    66fc:	c7 01       	movw	r24, r14
    66fe:	6b e5       	ldi	r22, 0x5B	; 91
    6700:	76 e0       	ldi	r23, 0x06	; 6
    6702:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	lcd.setCursor(2, 50);
    6706:	c7 01       	movw	r24, r14
    6708:	62 e0       	ldi	r22, 0x02	; 2
    670a:	70 e0       	ldi	r23, 0x00	; 0
    670c:	42 e3       	ldi	r20, 0x32	; 50
    670e:	50 e0       	ldi	r21, 0x00	; 0
    6710:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
	lcd.print("Max Gust: ");
    6714:	c7 01       	movw	r24, r14
    6716:	64 e6       	ldi	r22, 0x64	; 100
    6718:	76 e0       	ldi	r23, 0x06	; 6
    671a:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	lcd.print((int) windMax);
    671e:	68 89       	ldd	r22, Y+16	; 0x10
    6720:	79 89       	ldd	r23, Y+17	; 0x11
    6722:	c7 01       	movw	r24, r14
    6724:	4a e0       	ldi	r20, 0x0A	; 10
    6726:	50 e0       	ldi	r21, 0x00	; 0
    6728:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <_ZN5Print5printEii>
	lcd.print("KNTS   ");
    672c:	c7 01       	movw	r24, r14
    672e:	6f e6       	ldi	r22, 0x6F	; 111
    6730:	76 e0       	ldi	r23, 0x06	; 6
    6732:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	//alarms
	lcd.setCursor(2, 40);
    6736:	c7 01       	movw	r24, r14
    6738:	62 e0       	ldi	r22, 0x02	; 2
    673a:	70 e0       	ldi	r23, 0x00	; 0
    673c:	48 e2       	ldi	r20, 0x28	; 40
    673e:	50 e0       	ldi	r21, 0x00	; 0
    6740:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
	lcd.print("Wind Alarm: ");
    6744:	c7 01       	movw	r24, r14
    6746:	67 e7       	ldi	r22, 0x77	; 119
    6748:	76 e0       	ldi	r23, 0x06	; 6
    674a:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	if (windAlarmOn) {
    674e:	8e 89       	ldd	r24, Y+22	; 0x16
    6750:	88 23       	and	r24, r24
    6752:	21 f0       	breq	.+8      	; 0x675c <_ZN4Wind14drawWindScreenE3Lcdi+0x98>
		lcd.print("ON    ");
    6754:	c7 01       	movw	r24, r14
    6756:	64 e8       	ldi	r22, 0x84	; 132
    6758:	76 e0       	ldi	r23, 0x06	; 6
    675a:	03 c0       	rjmp	.+6      	; 0x6762 <_ZN4Wind14drawWindScreenE3Lcdi+0x9e>
	} else {
		lcd.print("OFF    ");
    675c:	c7 01       	movw	r24, r14
    675e:	6b e8       	ldi	r22, 0x8B	; 139
    6760:	76 e0       	ldi	r23, 0x06	; 6
    6762:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	}
	lcd.setCursor(2, 30);
    6766:	c7 01       	movw	r24, r14
    6768:	62 e0       	ldi	r22, 0x02	; 2
    676a:	70 e0       	ldi	r23, 0x00	; 0
    676c:	4e e1       	ldi	r20, 0x1E	; 30
    676e:	50 e0       	ldi	r21, 0x00	; 0
    6770:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
	lcd.print("Alarm Speed: ");
    6774:	c7 01       	movw	r24, r14
    6776:	63 e9       	ldi	r22, 0x93	; 147
    6778:	76 e0       	ldi	r23, 0x06	; 6
    677a:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	lcd.print((int) windAlarmSpeed);
    677e:	2c 89       	ldd	r18, Y+20	; 0x14
    6780:	3d 89       	ldd	r19, Y+21	; 0x15
    6782:	c7 01       	movw	r24, r14
    6784:	b9 01       	movw	r22, r18
    6786:	4a e0       	ldi	r20, 0x0A	; 10
    6788:	50 e0       	ldi	r21, 0x00	; 0
    678a:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <_ZN5Print5printEii>
	lcd.print("KNTS   ");
    678e:	c7 01       	movw	r24, r14
    6790:	6f e6       	ldi	r22, 0x6F	; 111
    6792:	76 e0       	ldi	r23, 0x06	; 6
    6794:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
	if (menuLevel >= 1) {
    6798:	10 16       	cp	r1, r16
    679a:	11 06       	cpc	r1, r17
    679c:	84 f4       	brge	.+32     	; 0x67be <_ZN4Wind14drawWindScreenE3Lcdi+0xfa>
		lcd.setCursor(2, 20);
    679e:	c7 01       	movw	r24, r14
    67a0:	62 e0       	ldi	r22, 0x02	; 2
    67a2:	70 e0       	ldi	r23, 0x00	; 0
    67a4:	44 e1       	ldi	r20, 0x14	; 20
    67a6:	50 e0       	ldi	r21, 0x00	; 0
    67a8:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN3Lcd9setCursorEii>
		lcd.print("Return to prev menu");
    67ac:	c7 01       	movw	r24, r14
    67ae:	61 ea       	ldi	r22, 0xA1	; 161
    67b0:	76 e0       	ldi	r23, 0x06	; 6
    67b2:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		lcd.writeButtonLabels(SET, NEXT, PREV);
    67b6:	c7 01       	movw	r24, r14
    67b8:	65 eb       	ldi	r22, 0xB5	; 181
    67ba:	76 e0       	ldi	r23, 0x06	; 6
    67bc:	03 c0       	rjmp	.+6      	; 0x67c4 <_ZN4Wind14drawWindScreenE3Lcdi+0x100>
	} else {
		lcd.writeButtonLabels(EDIT, PGDN, PGUP);
    67be:	c7 01       	movw	r24, r14
    67c0:	63 ec       	ldi	r22, 0xC3	; 195
    67c2:	76 e0       	ldi	r23, 0x06	; 6
    67c4:	49 eb       	ldi	r20, 0xB9	; 185
    67c6:	56 e0       	ldi	r21, 0x06	; 6
    67c8:	2e eb       	ldi	r18, 0xBE	; 190
    67ca:	36 e0       	ldi	r19, 0x06	; 6
    67cc:	0e 94 69 23 	call	0x46d2	; 0x46d2 <_ZN3Lcd17writeButtonLabelsEPcS0_S0_>
	}
	lastLcdUpdate= millis();
    67d0:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    67d4:	6e 83       	std	Y+6, r22	; 0x06
    67d6:	7f 83       	std	Y+7, r23	; 0x07
    67d8:	88 87       	std	Y+8, r24	; 0x08
    67da:	99 87       	std	Y+9, r25	; 0x09
	if (DEBUG) {
		Serial.print("Wind (KNTS): ");
    67dc:	87 e2       	ldi	r24, 0x27	; 39
    67de:	9e e0       	ldi	r25, 0x0E	; 14
    67e0:	68 ec       	ldi	r22, 0xC8	; 200
    67e2:	76 e0       	ldi	r23, 0x06	; 6
    67e4:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		Serial.print(windAverage, DEC);
    67e8:	6a 85       	ldd	r22, Y+10	; 0x0a
    67ea:	7b 85       	ldd	r23, Y+11	; 0x0b
    67ec:	87 e2       	ldi	r24, 0x27	; 39
    67ee:	9e e0       	ldi	r25, 0x0E	; 14
    67f0:	4a e0       	ldi	r20, 0x0A	; 10
    67f2:	50 e0       	ldi	r21, 0x00	; 0
    67f4:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <_ZN5Print5printEii>
		Serial.print(", gust (KNTS): ");
    67f8:	87 e2       	ldi	r24, 0x27	; 39
    67fa:	9e e0       	ldi	r25, 0x0E	; 14
    67fc:	66 ed       	ldi	r22, 0xD6	; 214
    67fe:	76 e0       	ldi	r23, 0x06	; 6
    6800:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <_ZN5Print5printEPKc>
		Serial.println(windMax, DEC);
    6804:	68 89       	ldd	r22, Y+16	; 0x10
    6806:	79 89       	ldd	r23, Y+17	; 0x11
    6808:	87 e2       	ldi	r24, 0x27	; 39
    680a:	9e e0       	ldi	r25, 0x0E	; 14
    680c:	4a e0       	ldi	r20, 0x0A	; 10
    680e:	50 e0       	ldi	r21, 0x00	; 0
    6810:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <_ZN5Print7printlnEii>
	}
}
    6814:	df 91       	pop	r29
    6816:	cf 91       	pop	r28
    6818:	1f 91       	pop	r17
    681a:	0f 91       	pop	r16
    681c:	ff 90       	pop	r15
    681e:	ef 90       	pop	r14
    6820:	08 95       	ret

00006822 <_ZN4Wind11drawWindBoxE3Lcdi>:

void Wind::drawWindBox(Lcd lcd, int menuState) {
    6822:	0f 93       	push	r16
    6824:	1f 93       	push	r17
    6826:	cf 93       	push	r28
    6828:	df 93       	push	r29
    682a:	ec 01       	movw	r28, r24
    682c:	cb 01       	movw	r24, r22
	if (menuState >= WINDMINMENU && menuState <= WINDMAXMENU) {
    682e:	9a 01       	movw	r18, r20
    6830:	24 51       	subi	r18, 0x14	; 20
    6832:	30 40       	sbci	r19, 0x00	; 0
    6834:	23 30       	cpi	r18, 0x03	; 3
    6836:	31 05       	cpc	r19, r1
    6838:	40 f5       	brcc	.+80     	; 0x688a <_ZN4Wind11drawWindBoxE3Lcdi+0x68>
		//draw the correct box
		if (menuState == WINDSTATE)
    683a:	44 31       	cpi	r20, 0x14	; 20
    683c:	51 05       	cpc	r21, r1
    683e:	49 f4       	brne	.+18     	; 0x6852 <_ZN4Wind11drawWindBoxE3Lcdi+0x30>
			lcd.drawBox(0, 31, 127, 42);
    6840:	60 e0       	ldi	r22, 0x00	; 0
    6842:	70 e0       	ldi	r23, 0x00	; 0
    6844:	4f e1       	ldi	r20, 0x1F	; 31
    6846:	50 e0       	ldi	r21, 0x00	; 0
    6848:	2f e7       	ldi	r18, 0x7F	; 127
    684a:	30 e0       	ldi	r19, 0x00	; 0
    684c:	0a e2       	ldi	r16, 0x2A	; 42
    684e:	10 e0       	ldi	r17, 0x00	; 0
    6850:	14 c0       	rjmp	.+40     	; 0x687a <_ZN4Wind11drawWindBoxE3Lcdi+0x58>
		if (menuState == WINDSPEED)
    6852:	45 31       	cpi	r20, 0x15	; 21
    6854:	51 05       	cpc	r21, r1
    6856:	49 f4       	brne	.+18     	; 0x686a <_ZN4Wind11drawWindBoxE3Lcdi+0x48>
			lcd.drawBox(0, 21, 127, 32);
    6858:	60 e0       	ldi	r22, 0x00	; 0
    685a:	70 e0       	ldi	r23, 0x00	; 0
    685c:	45 e1       	ldi	r20, 0x15	; 21
    685e:	50 e0       	ldi	r21, 0x00	; 0
    6860:	2f e7       	ldi	r18, 0x7F	; 127
    6862:	30 e0       	ldi	r19, 0x00	; 0
    6864:	00 e2       	ldi	r16, 0x20	; 32
    6866:	10 e0       	ldi	r17, 0x00	; 0
    6868:	08 c0       	rjmp	.+16     	; 0x687a <_ZN4Wind11drawWindBoxE3Lcdi+0x58>
		if (menuState == WINDRTN)
			lcd.drawBox(0, 11, 127, 22);
    686a:	60 e0       	ldi	r22, 0x00	; 0
    686c:	70 e0       	ldi	r23, 0x00	; 0
    686e:	4b e0       	ldi	r20, 0x0B	; 11
    6870:	50 e0       	ldi	r21, 0x00	; 0
    6872:	2f e7       	ldi	r18, 0x7F	; 127
    6874:	30 e0       	ldi	r19, 0x00	; 0
    6876:	06 e1       	ldi	r16, 0x16	; 22
    6878:	10 e0       	ldi	r17, 0x00	; 0
    687a:	0e 94 ab 22 	call	0x4556	; 0x4556 <_ZN3Lcd7drawBoxEiiii>
		lastLcdUpdate= millis();
    687e:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    6882:	6e 83       	std	Y+6, r22	; 0x06
    6884:	7f 83       	std	Y+7, r23	; 0x07
    6886:	88 87       	std	Y+8, r24	; 0x08
    6888:	99 87       	std	Y+9, r25	; 0x09
	}
}
    688a:	df 91       	pop	r29
    688c:	cf 91       	pop	r28
    688e:	1f 91       	pop	r17
    6890:	0f 91       	pop	r16
    6892:	08 95       	ret

00006894 <_ZN4Wind12eraseWindBoxE3Lcdi>:

void Wind::eraseWindBox(Lcd lcd, int menuState) {
    6894:	0f 93       	push	r16
    6896:	1f 93       	push	r17
    6898:	cf 93       	push	r28
    689a:	df 93       	push	r29
    689c:	ec 01       	movw	r28, r24
    689e:	cb 01       	movw	r24, r22
	if (menuState >= WINDMINMENU && menuState <= WINDMAXMENU) {
    68a0:	9a 01       	movw	r18, r20
    68a2:	24 51       	subi	r18, 0x14	; 20
    68a4:	30 40       	sbci	r19, 0x00	; 0
    68a6:	23 30       	cpi	r18, 0x03	; 3
    68a8:	31 05       	cpc	r19, r1
    68aa:	40 f5       	brcc	.+80     	; 0x68fc <_ZN4Wind12eraseWindBoxE3Lcdi+0x68>
		//draw the correct box
		if (menuState == WINDSTATE)
    68ac:	44 31       	cpi	r20, 0x14	; 20
    68ae:	51 05       	cpc	r21, r1
    68b0:	49 f4       	brne	.+18     	; 0x68c4 <_ZN4Wind12eraseWindBoxE3Lcdi+0x30>
			lcd.eraseBox(0, 31, 127, 42);
    68b2:	60 e0       	ldi	r22, 0x00	; 0
    68b4:	70 e0       	ldi	r23, 0x00	; 0
    68b6:	4f e1       	ldi	r20, 0x1F	; 31
    68b8:	50 e0       	ldi	r21, 0x00	; 0
    68ba:	2f e7       	ldi	r18, 0x7F	; 127
    68bc:	30 e0       	ldi	r19, 0x00	; 0
    68be:	0a e2       	ldi	r16, 0x2A	; 42
    68c0:	10 e0       	ldi	r17, 0x00	; 0
    68c2:	14 c0       	rjmp	.+40     	; 0x68ec <_ZN4Wind12eraseWindBoxE3Lcdi+0x58>
		if (menuState == WINDSPEED)
    68c4:	45 31       	cpi	r20, 0x15	; 21
    68c6:	51 05       	cpc	r21, r1
    68c8:	49 f4       	brne	.+18     	; 0x68dc <_ZN4Wind12eraseWindBoxE3Lcdi+0x48>
			lcd.eraseBox(0, 21, 127, 32);
    68ca:	60 e0       	ldi	r22, 0x00	; 0
    68cc:	70 e0       	ldi	r23, 0x00	; 0
    68ce:	45 e1       	ldi	r20, 0x15	; 21
    68d0:	50 e0       	ldi	r21, 0x00	; 0
    68d2:	2f e7       	ldi	r18, 0x7F	; 127
    68d4:	30 e0       	ldi	r19, 0x00	; 0
    68d6:	00 e2       	ldi	r16, 0x20	; 32
    68d8:	10 e0       	ldi	r17, 0x00	; 0
    68da:	08 c0       	rjmp	.+16     	; 0x68ec <_ZN4Wind12eraseWindBoxE3Lcdi+0x58>
		if (menuState == WINDRTN)
			lcd.eraseBox(0, 11, 127, 22);
    68dc:	60 e0       	ldi	r22, 0x00	; 0
    68de:	70 e0       	ldi	r23, 0x00	; 0
    68e0:	4b e0       	ldi	r20, 0x0B	; 11
    68e2:	50 e0       	ldi	r21, 0x00	; 0
    68e4:	2f e7       	ldi	r18, 0x7F	; 127
    68e6:	30 e0       	ldi	r19, 0x00	; 0
    68e8:	06 e1       	ldi	r16, 0x16	; 22
    68ea:	10 e0       	ldi	r17, 0x00	; 0
    68ec:	0e 94 0a 23 	call	0x4614	; 0x4614 <_ZN3Lcd8eraseBoxEiiii>
		lastLcdUpdate= millis();
    68f0:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    68f4:	6e 83       	std	Y+6, r22	; 0x06
    68f6:	7f 83       	std	Y+7, r23	; 0x07
    68f8:	88 87       	std	Y+8, r24	; 0x08
    68fa:	99 87       	std	Y+9, r25	; 0x09
	}
}
    68fc:	df 91       	pop	r29
    68fe:	cf 91       	pop	r28
    6900:	1f 91       	pop	r17
    6902:	0f 91       	pop	r16
    6904:	08 95       	ret

00006906 <_ZN11AverageListIVlE5resetEv>:
			}
			return min;
		}
		
		//reset the AverageList
		void reset(){ 
    6906:	fc 01       	movw	r30, r24
			currentSize = 0; 
    6908:	13 82       	std	Z+3, r1	; 0x03
			currentIndex = 0;
    690a:	14 82       	std	Z+4, r1	; 0x04
			for (byte i=0; i<size; i++){ values[i]=0; }
    690c:	20 e0       	ldi	r18, 0x00	; 0
    690e:	10 c0       	rjmp	.+32     	; 0x6930 <_ZN11AverageListIVlE5resetEv+0x2a>
    6910:	82 2f       	mov	r24, r18
    6912:	90 e0       	ldi	r25, 0x00	; 0
    6914:	88 0f       	add	r24, r24
    6916:	99 1f       	adc	r25, r25
    6918:	88 0f       	add	r24, r24
    691a:	99 1f       	adc	r25, r25
    691c:	a0 81       	ld	r26, Z
    691e:	b1 81       	ldd	r27, Z+1	; 0x01
    6920:	a8 0f       	add	r26, r24
    6922:	b9 1f       	adc	r27, r25
    6924:	1d 92       	st	X+, r1
    6926:	1d 92       	st	X+, r1
    6928:	1d 92       	st	X+, r1
    692a:	1c 92       	st	X, r1
    692c:	13 97       	sbiw	r26, 0x03	; 3
    692e:	2f 5f       	subi	r18, 0xFF	; 255
    6930:	82 81       	ldd	r24, Z+2	; 0x02
    6932:	28 17       	cp	r18, r24
    6934:	68 f3       	brcs	.-38     	; 0x6910 <_ZN11AverageListIVlE5resetEv+0xa>
		}
    6936:	08 95       	ret

00006938 <_ZN4WindC1EP10NmeaSerial>:
val dirStorage[MAX_NUMBER_OF_READINGS] = {0};

AverageList<val> speedList = AverageList<val>( speedStorage, MAX_NUMBER_OF_READINGS );
AverageList<val> dirList = AverageList<val>( dirStorage, MAX_NUMBER_OF_READINGS );

Wind::Wind(NmeaSerial* nmea) {
    6938:	cf 93       	push	r28
    693a:	df 93       	push	r29
    693c:	ec 01       	movw	r28, r24
	this->nmea = nmea;
    693e:	79 83       	std	Y+1, r23	; 0x01
    6940:	68 83       	st	Y, r22
	//initialise the wind interrupt
	//analogReference(INTERNAL); //ref to about 1.1V
	lastWindUpdate = millis(); // time of last screen update
    6942:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    6946:	6a 83       	std	Y+2, r22	; 0x02
    6948:	7b 83       	std	Y+3, r23	; 0x03
    694a:	8c 83       	std	Y+4, r24	; 0x04
    694c:	9d 83       	std	Y+5, r25	; 0x05
	lastLcdUpdate = millis();
    694e:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    6952:	6e 83       	std	Y+6, r22	; 0x06
    6954:	7f 83       	std	Y+7, r23	; 0x07
    6956:	88 87       	std	Y+8, r24	; 0x08
    6958:	99 87       	std	Y+9, r25	; 0x09

	windAverage = 0; // the average of spikes over time/factor to give knots
    695a:	1b 86       	std	Y+11, r1	; 0x0b
    695c:	1a 86       	std	Y+10, r1	; 0x0a
	windFactor = 1000000; //adjust factor to actual knots
    695e:	80 e0       	ldi	r24, 0x00	; 0
    6960:	94 e2       	ldi	r25, 0x24	; 36
    6962:	a4 e7       	ldi	r26, 0x74	; 116
    6964:	b9 e4       	ldi	r27, 0x49	; 73
    6966:	8c 87       	std	Y+12, r24	; 0x0c
    6968:	9d 87       	std	Y+13, r25	; 0x0d
    696a:	ae 87       	std	Y+14, r26	; 0x0e
    696c:	bf 87       	std	Y+15, r27	; 0x0f
	windMax = 0; //max of wind average
    696e:	19 8a       	std	Y+17, r1	; 0x11
    6970:	18 8a       	std	Y+16, r1	; 0x10
	windAlarmTriggered = false; //set to true to trigger wind alarm
    6972:	1f 8a       	std	Y+23, r1	; 0x17
	lastNmeaUpdate=0;
    6974:	10 92 d1 0b 	sts	0x0BD1, r1
    6978:	10 92 d2 0b 	sts	0x0BD2, r1
    697c:	10 92 d3 0b 	sts	0x0BD3, r1
    6980:	10 92 d4 0b 	sts	0x0BD4, r1
	windSpeedDur=0;
    6984:	10 92 c3 0b 	sts	0x0BC3, r1
    6988:	10 92 c4 0b 	sts	0x0BC4, r1
    698c:	10 92 c5 0b 	sts	0x0BC5, r1
    6990:	10 92 c6 0b 	sts	0x0BC6, r1
	windSpeedMicros=micros();
    6994:	0e 94 53 42 	call	0x84a6	; 0x84a6 <micros>
    6998:	60 93 c7 0b 	sts	0x0BC7, r22
    699c:	70 93 c8 0b 	sts	0x0BC8, r23
    69a0:	80 93 c9 0b 	sts	0x0BC9, r24
    69a4:	90 93 ca 0b 	sts	0x0BCA, r25
	windDirDur=0;
    69a8:	10 92 cb 0b 	sts	0x0BCB, r1
    69ac:	10 92 cc 0b 	sts	0x0BCC, r1
    69b0:	10 92 cd 0b 	sts	0x0BCD, r1
    69b4:	10 92 ce 0b 	sts	0x0BCE, r1
	windSpeedFlag=true;
    69b8:	81 e0       	ldi	r24, 0x01	; 1
    69ba:	80 93 cf 0b 	sts	0x0BCF, r24
	windDirFlag=false;
    69be:	10 92 d0 0b 	sts	0x0BD0, r1
	speedList.reset();
    69c2:	8d ef       	ldi	r24, 0xFD	; 253
    69c4:	9b e0       	ldi	r25, 0x0B	; 11
    69c6:	0e 94 83 34 	call	0x6906	; 0x6906 <_ZN11AverageListIVlE5resetEv>
	dirList.reset();
    69ca:	82 e0       	ldi	r24, 0x02	; 2
    69cc:	9c e0       	ldi	r25, 0x0C	; 12
    69ce:	0e 94 83 34 	call	0x6906	; 0x6906 <_ZN11AverageListIVlE5resetEv>
	cs = 0;
    69d2:	1f aa       	std	Y+55, r1	; 0x37
    69d4:	1e aa       	std	Y+54, r1	; 0x36
	// read the last wind alarm values
	windAlarmSpeed = readWindAlarmSpeed();
    69d6:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <_Z18readWindAlarmSpeedv>
    69da:	9d 8b       	std	Y+21, r25	; 0x15
    69dc:	8c 8b       	std	Y+20, r24	; 0x14
	if (windAlarmSpeed > 99) {
    69de:	84 36       	cpi	r24, 0x64	; 100
    69e0:	91 05       	cpc	r25, r1
    69e2:	34 f0       	brlt	.+12     	; 0x69f0 <_ZN4WindC1EP10NmeaSerial+0xb8>
		windAlarmSpeed = 99;
    69e4:	83 e6       	ldi	r24, 0x63	; 99
    69e6:	90 e0       	ldi	r25, 0x00	; 0
    69e8:	9d 8b       	std	Y+21, r25	; 0x15
    69ea:	8c 8b       	std	Y+20, r24	; 0x14
		saveWindAlarmSpeed(windAlarmSpeed);
    69ec:	0e 94 ba 1a 	call	0x3574	; 0x3574 <_Z18saveWindAlarmSpeedi>
	}
	windAlarmOn = readWindAlarmState();
    69f0:	0e 94 87 1a 	call	0x350e	; 0x350e <_Z18readWindAlarmStatev>
    69f4:	8e 8b       	std	Y+22, r24	; 0x16

}
    69f6:	df 91       	pop	r29
    69f8:	cf 91       	pop	r28
    69fa:	08 95       	ret

000069fc <_ZN11AverageListIVlE8addValueEl>:
			currentSize = 0; 
			currentIndex = 0; 
		}
		
		//add a value to the AverageList at the next index, if out of bounds, return false, else return true
		void addValue(datatype value){ 
    69fc:	0f 93       	push	r16
    69fe:	1f 93       	push	r17
    6a00:	df 93       	push	r29
    6a02:	cf 93       	push	r28
    6a04:	00 d0       	rcall	.+0      	; 0x6a06 <_ZN11AverageListIVlE8addValueEl+0xa>
    6a06:	00 d0       	rcall	.+0      	; 0x6a08 <_ZN11AverageListIVlE8addValueEl+0xc>
    6a08:	cd b7       	in	r28, 0x3d	; 61
    6a0a:	de b7       	in	r29, 0x3e	; 62
    6a0c:	fc 01       	movw	r30, r24
    6a0e:	49 83       	std	Y+1, r20	; 0x01
    6a10:	5a 83       	std	Y+2, r21	; 0x02
    6a12:	6b 83       	std	Y+3, r22	; 0x03
    6a14:	7c 83       	std	Y+4, r23	; 0x04
			if (currentSize<size){
    6a16:	73 81       	ldd	r23, Z+3	; 0x03
    6a18:	62 81       	ldd	r22, Z+2	; 0x02
    6a1a:	20 81       	ld	r18, Z
    6a1c:	31 81       	ldd	r19, Z+1	; 0x01
    6a1e:	76 17       	cp	r23, r22
    6a20:	d8 f4       	brcc	.+54     	; 0x6a58 <_ZN11AverageListIVlE8addValueEl+0x5c>
				values[currentSize++] = value;
    6a22:	47 2f       	mov	r20, r23
    6a24:	50 e0       	ldi	r21, 0x00	; 0
    6a26:	44 0f       	add	r20, r20
    6a28:	55 1f       	adc	r21, r21
    6a2a:	44 0f       	add	r20, r20
    6a2c:	55 1f       	adc	r21, r21
    6a2e:	42 0f       	add	r20, r18
    6a30:	53 1f       	adc	r21, r19
    6a32:	09 81       	ldd	r16, Y+1	; 0x01
    6a34:	1a 81       	ldd	r17, Y+2	; 0x02
    6a36:	2b 81       	ldd	r18, Y+3	; 0x03
    6a38:	3c 81       	ldd	r19, Y+4	; 0x04
    6a3a:	da 01       	movw	r26, r20
    6a3c:	0d 93       	st	X+, r16
    6a3e:	1d 93       	st	X+, r17
    6a40:	2d 93       	st	X+, r18
    6a42:	3c 93       	st	X, r19
    6a44:	13 97       	sbiw	r26, 0x03	; 3
    6a46:	67 2f       	mov	r22, r23
    6a48:	6f 5f       	subi	r22, 0xFF	; 255
    6a4a:	63 83       	std	Z+3, r22	; 0x03
				currentIndex = ++currentIndex % currentSize;
    6a4c:	84 81       	ldd	r24, Z+4	; 0x04
    6a4e:	8f 5f       	subi	r24, 0xFF	; 255
    6a50:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <__udivmodqi4>
    6a54:	94 83       	std	Z+4, r25	; 0x04
    6a56:	15 c0       	rjmp	.+42     	; 0x6a82 <_ZN11AverageListIVlE8addValueEl+0x86>
			}else{
				currentIndex = ++currentIndex % size;
    6a58:	84 81       	ldd	r24, Z+4	; 0x04
    6a5a:	8f 5f       	subi	r24, 0xFF	; 255
    6a5c:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <__udivmodqi4>
    6a60:	94 83       	std	Z+4, r25	; 0x04
				values[currentIndex] = value; 
    6a62:	e9 2f       	mov	r30, r25
    6a64:	f0 e0       	ldi	r31, 0x00	; 0
    6a66:	ee 0f       	add	r30, r30
    6a68:	ff 1f       	adc	r31, r31
    6a6a:	ee 0f       	add	r30, r30
    6a6c:	ff 1f       	adc	r31, r31
    6a6e:	e2 0f       	add	r30, r18
    6a70:	f3 1f       	adc	r31, r19
    6a72:	89 81       	ldd	r24, Y+1	; 0x01
    6a74:	9a 81       	ldd	r25, Y+2	; 0x02
    6a76:	ab 81       	ldd	r26, Y+3	; 0x03
    6a78:	bc 81       	ldd	r27, Y+4	; 0x04
    6a7a:	80 83       	st	Z, r24
    6a7c:	91 83       	std	Z+1, r25	; 0x01
    6a7e:	a2 83       	std	Z+2, r26	; 0x02
    6a80:	b3 83       	std	Z+3, r27	; 0x03
			}
		}
    6a82:	0f 90       	pop	r0
    6a84:	0f 90       	pop	r0
    6a86:	0f 90       	pop	r0
    6a88:	0f 90       	pop	r0
    6a8a:	cf 91       	pop	r28
    6a8c:	df 91       	pop	r29
    6a8e:	1f 91       	pop	r17
    6a90:	0f 91       	pop	r16
    6a92:	08 95       	ret

00006a94 <_ZN4Wind17readWindDataSpeedEv>:
		}
}
/* NMEA Wind routines and alarm
 */
void Wind::readWindDataSpeed() {
	if(windSpeedFlag){
    6a94:	80 91 cf 0b 	lds	r24, 0x0BCF
    6a98:	88 23       	and	r24, r24
    6a9a:	09 f4       	brne	.+2      	; 0x6a9e <_ZN4Wind17readWindDataSpeedEv+0xa>
    6a9c:	50 c0       	rjmp	.+160    	; 0x6b3e <_ZN4Wind17readWindDataSpeedEv+0xaa>
		windSpeedFlag=false;
    6a9e:	10 92 cf 0b 	sts	0x0BCF, r1
		windDirFlag=true;
    6aa2:	81 e0       	ldi	r24, 0x01	; 1
    6aa4:	80 93 d0 0b 	sts	0x0BD0, r24
		//called by speed pin interrupt
		//micros resets every 50 min, reset if that happens
		//counts clicks, one per rotation, about 2-3 rotations/s =1m/s = 1.94knts
		//therefore about 50/ms = 100knts = 150 rpm = 1000000/150 = 6500 us per pulse
		//at 100 knts about 20us per degree of rotation
		lastPulse=millis();
    6aa8:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    6aac:	60 93 bf 0b 	sts	0x0BBF, r22
    6ab0:	70 93 c0 0b 	sts	0x0BC0, r23
    6ab4:	80 93 c1 0b 	sts	0x0BC1, r24
    6ab8:	90 93 c2 0b 	sts	0x0BC2, r25
		windSpeedDur=micros()-windSpeedMicros;
    6abc:	0e 94 53 42 	call	0x84a6	; 0x84a6 <micros>
    6ac0:	20 91 c7 0b 	lds	r18, 0x0BC7
    6ac4:	30 91 c8 0b 	lds	r19, 0x0BC8
    6ac8:	40 91 c9 0b 	lds	r20, 0x0BC9
    6acc:	50 91 ca 0b 	lds	r21, 0x0BCA
    6ad0:	62 1b       	sub	r22, r18
    6ad2:	73 0b       	sbc	r23, r19
    6ad4:	84 0b       	sbc	r24, r20
    6ad6:	95 0b       	sbc	r25, r21
    6ad8:	60 93 c3 0b 	sts	0x0BC3, r22
    6adc:	70 93 c4 0b 	sts	0x0BC4, r23
    6ae0:	80 93 c5 0b 	sts	0x0BC5, r24
    6ae4:	90 93 c6 0b 	sts	0x0BC6, r25
		//debounce 5ms
		if(windSpeedDur>SPEED_DEBOUNCE){
    6ae8:	80 91 c3 0b 	lds	r24, 0x0BC3
    6aec:	90 91 c4 0b 	lds	r25, 0x0BC4
    6af0:	a0 91 c5 0b 	lds	r26, 0x0BC5
    6af4:	b0 91 c6 0b 	lds	r27, 0x0BC6
    6af8:	00 97       	sbiw	r24, 0x00	; 0
    6afa:	a1 05       	cpc	r26, r1
    6afc:	b1 05       	cpc	r27, r1
    6afe:	b9 f0       	breq	.+46     	; 0x6b2e <_ZN4Wind17readWindDataSpeedEv+0x9a>
			//average a bit
			speedList.addValue(windSpeedDur);
    6b00:	40 91 c3 0b 	lds	r20, 0x0BC3
    6b04:	50 91 c4 0b 	lds	r21, 0x0BC4
    6b08:	60 91 c5 0b 	lds	r22, 0x0BC5
    6b0c:	70 91 c6 0b 	lds	r23, 0x0BC6
    6b10:	8d ef       	ldi	r24, 0xFD	; 253
    6b12:	9b e0       	ldi	r25, 0x0B	; 11
    6b14:	0e 94 fe 34 	call	0x69fc	; 0x69fc <_ZN11AverageListIVlE8addValueEl>
			windSpeedMicros=micros();
    6b18:	0e 94 53 42 	call	0x84a6	; 0x84a6 <micros>
    6b1c:	60 93 c7 0b 	sts	0x0BC7, r22
    6b20:	70 93 c8 0b 	sts	0x0BC8, r23
    6b24:	80 93 c9 0b 	sts	0x0BC9, r24
    6b28:	90 93 ca 0b 	sts	0x0BCA, r25
    6b2c:	08 95       	ret
		}else if (windSpeedDur<0){
    6b2e:	80 91 c3 0b 	lds	r24, 0x0BC3
    6b32:	90 91 c4 0b 	lds	r25, 0x0BC4
    6b36:	a0 91 c5 0b 	lds	r26, 0x0BC5
    6b3a:	b0 91 c6 0b 	lds	r27, 0x0BC6
    6b3e:	08 95       	ret

00006b40 <_ZN11AverageListIVlE18addRotationalValueEl>:

		//add a circular (0-360) value to the AverageList at the next index, if out of bounds, return false, else return true
		void addRotationalValue(datatype value){
    6b40:	0f 93       	push	r16
    6b42:	1f 93       	push	r17
    6b44:	df 93       	push	r29
    6b46:	cf 93       	push	r28
    6b48:	00 d0       	rcall	.+0      	; 0x6b4a <_ZN11AverageListIVlE18addRotationalValueEl+0xa>
    6b4a:	00 d0       	rcall	.+0      	; 0x6b4c <_ZN11AverageListIVlE18addRotationalValueEl+0xc>
    6b4c:	cd b7       	in	r28, 0x3d	; 61
    6b4e:	de b7       	in	r29, 0x3e	; 62
    6b50:	8c 01       	movw	r16, r24
    6b52:	49 83       	std	Y+1, r20	; 0x01
    6b54:	5a 83       	std	Y+2, r21	; 0x02
    6b56:	6b 83       	std	Y+3, r22	; 0x03
    6b58:	7c 83       	std	Y+4, r23	; 0x04
			value=value%360;
    6b5a:	69 81       	ldd	r22, Y+1	; 0x01
    6b5c:	7a 81       	ldd	r23, Y+2	; 0x02
    6b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    6b60:	9c 81       	ldd	r25, Y+4	; 0x04
    6b62:	28 e6       	ldi	r18, 0x68	; 104
    6b64:	31 e0       	ldi	r19, 0x01	; 1
    6b66:	40 e0       	ldi	r20, 0x00	; 0
    6b68:	50 e0       	ldi	r21, 0x00	; 0
    6b6a:	0e 94 cd 47 	call	0x8f9a	; 0x8f9a <__divmodsi4>
    6b6e:	69 83       	std	Y+1, r22	; 0x01
    6b70:	7a 83       	std	Y+2, r23	; 0x02
    6b72:	8b 83       	std	Y+3, r24	; 0x03
    6b74:	9c 83       	std	Y+4, r25	; 0x04
			value=value-180;
    6b76:	89 81       	ldd	r24, Y+1	; 0x01
    6b78:	9a 81       	ldd	r25, Y+2	; 0x02
    6b7a:	ab 81       	ldd	r26, Y+3	; 0x03
    6b7c:	bc 81       	ldd	r27, Y+4	; 0x04
    6b7e:	84 5b       	subi	r24, 0xB4	; 180
    6b80:	90 40       	sbci	r25, 0x00	; 0
    6b82:	a0 40       	sbci	r26, 0x00	; 0
    6b84:	b0 40       	sbci	r27, 0x00	; 0
    6b86:	89 83       	std	Y+1, r24	; 0x01
    6b88:	9a 83       	std	Y+2, r25	; 0x02
    6b8a:	ab 83       	std	Y+3, r26	; 0x03
    6b8c:	bc 83       	std	Y+4, r27	; 0x04
			if (currentSize<size){
    6b8e:	f8 01       	movw	r30, r16
    6b90:	43 81       	ldd	r20, Z+3	; 0x03
    6b92:	62 81       	ldd	r22, Z+2	; 0x02
    6b94:	20 81       	ld	r18, Z
    6b96:	31 81       	ldd	r19, Z+1	; 0x01
    6b98:	46 17       	cp	r20, r22
    6b9a:	d0 f4       	brcc	.+52     	; 0x6bd0 <_ZN11AverageListIVlE18addRotationalValueEl+0x90>
				values[currentSize++] = value;
    6b9c:	e4 2f       	mov	r30, r20
    6b9e:	f0 e0       	ldi	r31, 0x00	; 0
    6ba0:	ee 0f       	add	r30, r30
    6ba2:	ff 1f       	adc	r31, r31
    6ba4:	ee 0f       	add	r30, r30
    6ba6:	ff 1f       	adc	r31, r31
    6ba8:	e2 0f       	add	r30, r18
    6baa:	f3 1f       	adc	r31, r19
    6bac:	89 81       	ldd	r24, Y+1	; 0x01
    6bae:	9a 81       	ldd	r25, Y+2	; 0x02
    6bb0:	ab 81       	ldd	r26, Y+3	; 0x03
    6bb2:	bc 81       	ldd	r27, Y+4	; 0x04
    6bb4:	80 83       	st	Z, r24
    6bb6:	91 83       	std	Z+1, r25	; 0x01
    6bb8:	a2 83       	std	Z+2, r26	; 0x02
    6bba:	b3 83       	std	Z+3, r27	; 0x03
    6bbc:	64 2f       	mov	r22, r20
    6bbe:	6f 5f       	subi	r22, 0xFF	; 255
    6bc0:	f8 01       	movw	r30, r16
    6bc2:	63 83       	std	Z+3, r22	; 0x03
				currentIndex = ++currentIndex % currentSize;
    6bc4:	84 81       	ldd	r24, Z+4	; 0x04
    6bc6:	8f 5f       	subi	r24, 0xFF	; 255
    6bc8:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <__udivmodqi4>
    6bcc:	94 83       	std	Z+4, r25	; 0x04
    6bce:	16 c0       	rjmp	.+44     	; 0x6bfc <_ZN11AverageListIVlE18addRotationalValueEl+0xbc>
			}else{
				currentIndex = ++currentIndex % size;
    6bd0:	f8 01       	movw	r30, r16
    6bd2:	84 81       	ldd	r24, Z+4	; 0x04
    6bd4:	8f 5f       	subi	r24, 0xFF	; 255
    6bd6:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <__udivmodqi4>
    6bda:	94 83       	std	Z+4, r25	; 0x04
				values[currentIndex] = value;
    6bdc:	e9 2f       	mov	r30, r25
    6bde:	f0 e0       	ldi	r31, 0x00	; 0
    6be0:	ee 0f       	add	r30, r30
    6be2:	ff 1f       	adc	r31, r31
    6be4:	ee 0f       	add	r30, r30
    6be6:	ff 1f       	adc	r31, r31
    6be8:	e2 0f       	add	r30, r18
    6bea:	f3 1f       	adc	r31, r19
    6bec:	89 81       	ldd	r24, Y+1	; 0x01
    6bee:	9a 81       	ldd	r25, Y+2	; 0x02
    6bf0:	ab 81       	ldd	r26, Y+3	; 0x03
    6bf2:	bc 81       	ldd	r27, Y+4	; 0x04
    6bf4:	80 83       	st	Z, r24
    6bf6:	91 83       	std	Z+1, r25	; 0x01
    6bf8:	a2 83       	std	Z+2, r26	; 0x02
    6bfa:	b3 83       	std	Z+3, r27	; 0x03
			}
		}
    6bfc:	0f 90       	pop	r0
    6bfe:	0f 90       	pop	r0
    6c00:	0f 90       	pop	r0
    6c02:	0f 90       	pop	r0
    6c04:	cf 91       	pop	r28
    6c06:	df 91       	pop	r29
    6c08:	1f 91       	pop	r17
    6c0a:	0f 91       	pop	r16
    6c0c:	08 95       	ret

00006c0e <_ZN4Wind15readWindDataDirEv>:
			windSpeedMicros=micros();
		}
	}

}
void Wind::readWindDataDir() {
    6c0e:	af 92       	push	r10
    6c10:	bf 92       	push	r11
    6c12:	cf 92       	push	r12
    6c14:	df 92       	push	r13
    6c16:	ef 92       	push	r14
    6c18:	ff 92       	push	r15
    6c1a:	0f 93       	push	r16
    6c1c:	1f 93       	push	r17
	if(windDirFlag){
    6c1e:	80 91 d0 0b 	lds	r24, 0x0BD0
    6c22:	88 23       	and	r24, r24
    6c24:	09 f4       	brne	.+2      	; 0x6c28 <_ZN4Wind15readWindDataDirEv+0x1a>
    6c26:	8f c0       	rjmp	.+286    	; 0x6d46 <_ZN4Wind15readWindDataDirEv+0x138>
		windSpeedFlag=true;
    6c28:	81 e0       	ldi	r24, 0x01	; 1
    6c2a:	80 93 cf 0b 	sts	0x0BCF, r24
		windDirFlag=false;
    6c2e:	10 92 d0 0b 	sts	0x0BD0, r1
		//called by dir pin interrupt
		//micros resets every 50 min, reset if that happens
		//debounce 5ms
		windDirDur=micros()-windSpeedMicros;
    6c32:	0e 94 53 42 	call	0x84a6	; 0x84a6 <micros>
    6c36:	20 91 c7 0b 	lds	r18, 0x0BC7
    6c3a:	30 91 c8 0b 	lds	r19, 0x0BC8
    6c3e:	40 91 c9 0b 	lds	r20, 0x0BC9
    6c42:	50 91 ca 0b 	lds	r21, 0x0BCA
    6c46:	62 1b       	sub	r22, r18
    6c48:	73 0b       	sbc	r23, r19
    6c4a:	84 0b       	sbc	r24, r20
    6c4c:	95 0b       	sbc	r25, r21
    6c4e:	60 93 cb 0b 	sts	0x0BCB, r22
    6c52:	70 93 cc 0b 	sts	0x0BCC, r23
    6c56:	80 93 cd 0b 	sts	0x0BCD, r24
    6c5a:	90 93 ce 0b 	sts	0x0BCE, r25
		// calc direction, degrees clockwise
		//check for 0's and no wind.
		if(windSpeedDur>windDirDur && windDirDur>DIR_DEBOUNCE && windSpeedDur>SPEED_DEBOUNCE && windSpeedDur< (3*1000000)){
    6c5e:	20 91 c3 0b 	lds	r18, 0x0BC3
    6c62:	30 91 c4 0b 	lds	r19, 0x0BC4
    6c66:	40 91 c5 0b 	lds	r20, 0x0BC5
    6c6a:	50 91 c6 0b 	lds	r21, 0x0BC6
    6c6e:	80 91 cb 0b 	lds	r24, 0x0BCB
    6c72:	90 91 cc 0b 	lds	r25, 0x0BCC
    6c76:	a0 91 cd 0b 	lds	r26, 0x0BCD
    6c7a:	b0 91 ce 0b 	lds	r27, 0x0BCE
    6c7e:	82 17       	cp	r24, r18
    6c80:	93 07       	cpc	r25, r19
    6c82:	a4 07       	cpc	r26, r20
    6c84:	b5 07       	cpc	r27, r21
    6c86:	08 f0       	brcs	.+2      	; 0x6c8a <_ZN4Wind15readWindDataDirEv+0x7c>
    6c88:	56 c0       	rjmp	.+172    	; 0x6d36 <_ZN4Wind15readWindDataDirEv+0x128>
    6c8a:	80 91 cb 0b 	lds	r24, 0x0BCB
    6c8e:	90 91 cc 0b 	lds	r25, 0x0BCC
    6c92:	a0 91 cd 0b 	lds	r26, 0x0BCD
    6c96:	b0 91 ce 0b 	lds	r27, 0x0BCE
    6c9a:	00 97       	sbiw	r24, 0x00	; 0
    6c9c:	a1 05       	cpc	r26, r1
    6c9e:	b1 05       	cpc	r27, r1
    6ca0:	09 f4       	brne	.+2      	; 0x6ca4 <_ZN4Wind15readWindDataDirEv+0x96>
    6ca2:	49 c0       	rjmp	.+146    	; 0x6d36 <_ZN4Wind15readWindDataDirEv+0x128>
    6ca4:	80 91 c3 0b 	lds	r24, 0x0BC3
    6ca8:	90 91 c4 0b 	lds	r25, 0x0BC4
    6cac:	a0 91 c5 0b 	lds	r26, 0x0BC5
    6cb0:	b0 91 c6 0b 	lds	r27, 0x0BC6
    6cb4:	00 97       	sbiw	r24, 0x00	; 0
    6cb6:	a1 05       	cpc	r26, r1
    6cb8:	b1 05       	cpc	r27, r1
    6cba:	e9 f1       	breq	.+122    	; 0x6d36 <_ZN4Wind15readWindDataDirEv+0x128>
    6cbc:	80 91 c3 0b 	lds	r24, 0x0BC3
    6cc0:	90 91 c4 0b 	lds	r25, 0x0BC4
    6cc4:	a0 91 c5 0b 	lds	r26, 0x0BC5
    6cc8:	b0 91 c6 0b 	lds	r27, 0x0BC6
    6ccc:	80 3c       	cpi	r24, 0xC0	; 192
    6cce:	26 ec       	ldi	r18, 0xC6	; 198
    6cd0:	92 07       	cpc	r25, r18
    6cd2:	2d e2       	ldi	r18, 0x2D	; 45
    6cd4:	a2 07       	cpc	r26, r18
    6cd6:	20 e0       	ldi	r18, 0x00	; 0
    6cd8:	b2 07       	cpc	r27, r18
    6cda:	68 f5       	brcc	.+90     	; 0x6d36 <_ZN4Wind15readWindDataDirEv+0x128>
			//total time to rotate = windSpeedDur
			//time to arrow = windDirDur
			//so windDirDur/windSpeedDur gives the fraction of 360deg
			//should round to int, min 1
			dirList.addRotationalValue(360*((float)windDirDur/windSpeedDur));
    6cdc:	60 91 cb 0b 	lds	r22, 0x0BCB
    6ce0:	70 91 cc 0b 	lds	r23, 0x0BCC
    6ce4:	80 91 cd 0b 	lds	r24, 0x0BCD
    6ce8:	90 91 ce 0b 	lds	r25, 0x0BCE
    6cec:	e0 90 c3 0b 	lds	r14, 0x0BC3
    6cf0:	f0 90 c4 0b 	lds	r15, 0x0BC4
    6cf4:	00 91 c5 0b 	lds	r16, 0x0BC5
    6cf8:	10 91 c6 0b 	lds	r17, 0x0BC6
    6cfc:	0e 94 39 45 	call	0x8a72	; 0x8a72 <__floatunsisf>
    6d00:	5b 01       	movw	r10, r22
    6d02:	6c 01       	movw	r12, r24
    6d04:	c8 01       	movw	r24, r16
    6d06:	b7 01       	movw	r22, r14
    6d08:	0e 94 39 45 	call	0x8a72	; 0x8a72 <__floatunsisf>
    6d0c:	9b 01       	movw	r18, r22
    6d0e:	ac 01       	movw	r20, r24
    6d10:	c6 01       	movw	r24, r12
    6d12:	b5 01       	movw	r22, r10
    6d14:	0e 94 a0 44 	call	0x8940	; 0x8940 <__divsf3>
    6d18:	20 e0       	ldi	r18, 0x00	; 0
    6d1a:	30 e0       	ldi	r19, 0x00	; 0
    6d1c:	44 eb       	ldi	r20, 0xB4	; 180
    6d1e:	53 e4       	ldi	r21, 0x43	; 67
    6d20:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    6d24:	0e 94 08 45 	call	0x8a10	; 0x8a10 <__fixsfsi>
    6d28:	ab 01       	movw	r20, r22
    6d2a:	bc 01       	movw	r22, r24
    6d2c:	82 e0       	ldi	r24, 0x02	; 2
    6d2e:	9c e0       	ldi	r25, 0x0C	; 12
    6d30:	0e 94 a0 35 	call	0x6b40	; 0x6b40 <_ZN11AverageListIVlE18addRotationalValueEl>
    6d34:	08 c0       	rjmp	.+16     	; 0x6d46 <_ZN4Wind15readWindDataDirEv+0x138>
		}else if(windDirDur<0){
    6d36:	80 91 cb 0b 	lds	r24, 0x0BCB
    6d3a:	90 91 cc 0b 	lds	r25, 0x0BCC
    6d3e:	a0 91 cd 0b 	lds	r26, 0x0BCD
    6d42:	b0 91 ce 0b 	lds	r27, 0x0BCE
			windDirDur=0;
			windSpeedDur=0;
		}
	}
}
    6d46:	1f 91       	pop	r17
    6d48:	0f 91       	pop	r16
    6d4a:	ff 90       	pop	r15
    6d4c:	ef 90       	pop	r14
    6d4e:	df 90       	pop	r13
    6d50:	cf 90       	pop	r12
    6d52:	bf 90       	pop	r11
    6d54:	af 90       	pop	r10
    6d56:	08 95       	ret

00006d58 <_ZN11AverageListIVlE15getTotalAverageEv>:
			else
				return (datatype)180-buffer;
		}

		//return the average of the entire AverageList, even though all values might not be initialized
		datatype getTotalAverage(){
    6d58:	cf 92       	push	r12
    6d5a:	df 92       	push	r13
    6d5c:	ff 92       	push	r15
    6d5e:	0f 93       	push	r16
    6d60:	1f 93       	push	r17
    6d62:	df 93       	push	r29
    6d64:	cf 93       	push	r28
    6d66:	00 d0       	rcall	.+0      	; 0x6d68 <_ZN11AverageListIVlE15getTotalAverageEv+0x10>
    6d68:	00 d0       	rcall	.+0      	; 0x6d6a <_ZN11AverageListIVlE15getTotalAverageEv+0x12>
    6d6a:	cd b7       	in	r28, 0x3d	; 61
    6d6c:	de b7       	in	r29, 0x3e	; 62
			datatype buffer = 0;
    6d6e:	19 82       	std	Y+1, r1	; 0x01
    6d70:	1a 82       	std	Y+2, r1	; 0x02
    6d72:	1b 82       	std	Y+3, r1	; 0x03
    6d74:	1c 82       	std	Y+4, r1	; 0x04
			for (byte i=0; i<size; i++){ buffer += values[i]; }
    6d76:	dc 01       	movw	r26, r24
    6d78:	12 96       	adiw	r26, 0x02	; 2
    6d7a:	fc 90       	ld	r15, X
    6d7c:	12 97       	sbiw	r26, 0x02	; 2
			else
				return (datatype)180-buffer;
		}

		//return the average of the entire AverageList, even though all values might not be initialized
		datatype getTotalAverage(){
    6d7e:	cf 2c       	mov	r12, r15
    6d80:	dd 24       	eor	r13, r13
    6d82:	cc 0c       	add	r12, r12
    6d84:	dd 1c       	adc	r13, r13
    6d86:	cc 0c       	add	r12, r12
    6d88:	dd 1c       	adc	r13, r13
			datatype buffer = 0;
			for (byte i=0; i<size; i++){ buffer += values[i]; }
    6d8a:	e0 e0       	ldi	r30, 0x00	; 0
    6d8c:	f0 e0       	ldi	r31, 0x00	; 0
    6d8e:	18 c0       	rjmp	.+48     	; 0x6dc0 <_ZN11AverageListIVlE15getTotalAverageEv+0x68>
    6d90:	09 81       	ldd	r16, Y+1	; 0x01
    6d92:	1a 81       	ldd	r17, Y+2	; 0x02
    6d94:	2b 81       	ldd	r18, Y+3	; 0x03
    6d96:	3c 81       	ldd	r19, Y+4	; 0x04
    6d98:	dc 01       	movw	r26, r24
    6d9a:	4d 91       	ld	r20, X+
    6d9c:	5c 91       	ld	r21, X
    6d9e:	4e 0f       	add	r20, r30
    6da0:	5f 1f       	adc	r21, r31
    6da2:	da 01       	movw	r26, r20
    6da4:	4d 91       	ld	r20, X+
    6da6:	5d 91       	ld	r21, X+
    6da8:	6d 91       	ld	r22, X+
    6daa:	7c 91       	ld	r23, X
    6dac:	13 97       	sbiw	r26, 0x03	; 3
    6dae:	40 0f       	add	r20, r16
    6db0:	51 1f       	adc	r21, r17
    6db2:	62 1f       	adc	r22, r18
    6db4:	73 1f       	adc	r23, r19
    6db6:	49 83       	std	Y+1, r20	; 0x01
    6db8:	5a 83       	std	Y+2, r21	; 0x02
    6dba:	6b 83       	std	Y+3, r22	; 0x03
    6dbc:	7c 83       	std	Y+4, r23	; 0x04
    6dbe:	34 96       	adiw	r30, 0x04	; 4
    6dc0:	ec 15       	cp	r30, r12
    6dc2:	fd 05       	cpc	r31, r13
    6dc4:	29 f7       	brne	.-54     	; 0x6d90 <_ZN11AverageListIVlE15getTotalAverageEv+0x38>
			buffer /= size;
    6dc6:	69 81       	ldd	r22, Y+1	; 0x01
    6dc8:	7a 81       	ldd	r23, Y+2	; 0x02
    6dca:	8b 81       	ldd	r24, Y+3	; 0x03
    6dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    6dce:	2f 2d       	mov	r18, r15
    6dd0:	30 e0       	ldi	r19, 0x00	; 0
    6dd2:	40 e0       	ldi	r20, 0x00	; 0
    6dd4:	50 e0       	ldi	r21, 0x00	; 0
    6dd6:	0e 94 cd 47 	call	0x8f9a	; 0x8f9a <__divmodsi4>
    6dda:	29 83       	std	Y+1, r18	; 0x01
    6ddc:	3a 83       	std	Y+2, r19	; 0x02
    6dde:	4b 83       	std	Y+3, r20	; 0x03
    6de0:	5c 83       	std	Y+4, r21	; 0x04
			return buffer;
    6de2:	29 81       	ldd	r18, Y+1	; 0x01
    6de4:	3a 81       	ldd	r19, Y+2	; 0x02
    6de6:	4b 81       	ldd	r20, Y+3	; 0x03
    6de8:	5c 81       	ldd	r21, Y+4	; 0x04
		}
    6dea:	b9 01       	movw	r22, r18
    6dec:	ca 01       	movw	r24, r20
    6dee:	0f 90       	pop	r0
    6df0:	0f 90       	pop	r0
    6df2:	0f 90       	pop	r0
    6df4:	0f 90       	pop	r0
    6df6:	cf 91       	pop	r28
    6df8:	df 91       	pop	r29
    6dfa:	1f 91       	pop	r17
    6dfc:	0f 91       	pop	r16
    6dfe:	ff 90       	pop	r15
    6e00:	df 90       	pop	r13
    6e02:	cf 90       	pop	r12
    6e04:	08 95       	ret

00006e06 <_ZN11AverageListIVlE20getRotationalAverageEv>:
			return (datatype)buffer;
		}


		//return the average of all circular (0-360) values added with an addRotationalValue call
		datatype getRotationalAverage(){
    6e06:	3f 92       	push	r3
    6e08:	4f 92       	push	r4
    6e0a:	5f 92       	push	r5
    6e0c:	6f 92       	push	r6
    6e0e:	7f 92       	push	r7
    6e10:	8f 92       	push	r8
    6e12:	9f 92       	push	r9
    6e14:	af 92       	push	r10
    6e16:	bf 92       	push	r11
    6e18:	cf 92       	push	r12
    6e1a:	df 92       	push	r13
    6e1c:	ef 92       	push	r14
    6e1e:	ff 92       	push	r15
    6e20:	0f 93       	push	r16
    6e22:	1f 93       	push	r17
    6e24:	cf 93       	push	r28
    6e26:	df 93       	push	r29
    6e28:	2c 01       	movw	r4, r24
			float buffer = 0;
			float sign = 0;
			for (byte i=0; i<currentSize; i++){
    6e2a:	fc 01       	movw	r30, r24
    6e2c:	33 80       	ldd	r3, Z+3	; 0x03
			return (datatype)buffer;
		}


		//return the average of all circular (0-360) values added with an addRotationalValue call
		datatype getRotationalAverage(){
    6e2e:	a3 2c       	mov	r10, r3
    6e30:	bb 24       	eor	r11, r11
    6e32:	aa 0c       	add	r10, r10
    6e34:	bb 1c       	adc	r11, r11
    6e36:	aa 0c       	add	r10, r10
    6e38:	bb 1c       	adc	r11, r11
			float buffer = 0;
			float sign = 0;
			for (byte i=0; i<currentSize; i++){
    6e3a:	00 e0       	ldi	r16, 0x00	; 0
    6e3c:	10 e0       	ldi	r17, 0x00	; 0


		//return the average of all circular (0-360) values added with an addRotationalValue call
		datatype getRotationalAverage(){
			float buffer = 0;
			float sign = 0;
    6e3e:	99 24       	eor	r9, r9
    6e40:	88 24       	eor	r8, r8
    6e42:	77 24       	eor	r7, r7
    6e44:	66 24       	eor	r6, r6
		}


		//return the average of all circular (0-360) values added with an addRotationalValue call
		datatype getRotationalAverage(){
			float buffer = 0;
    6e46:	ff 24       	eor	r15, r15
    6e48:	ee 24       	eor	r14, r14
    6e4a:	dd 24       	eor	r13, r13
    6e4c:	cc 24       	eor	r12, r12
			float sign = 0;
			for (byte i=0; i<currentSize; i++){
    6e4e:	38 c0       	rjmp	.+112    	; 0x6ec0 <_ZN11AverageListIVlE20getRotationalAverageEv+0xba>
				buffer += (float)abs(values[i]);
    6e50:	f2 01       	movw	r30, r4
    6e52:	c0 81       	ld	r28, Z
    6e54:	d1 81       	ldd	r29, Z+1	; 0x01
    6e56:	c0 0f       	add	r28, r16
    6e58:	d1 1f       	adc	r29, r17
    6e5a:	68 81       	ld	r22, Y
    6e5c:	79 81       	ldd	r23, Y+1	; 0x01
    6e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    6e60:	9b 81       	ldd	r25, Y+3	; 0x03
    6e62:	77 ff       	sbrs	r23, 7
    6e64:	03 c0       	rjmp	.+6      	; 0x6e6c <_ZN11AverageListIVlE20getRotationalAverageEv+0x66>
    6e66:	70 95       	com	r23
    6e68:	61 95       	neg	r22
    6e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    6e6c:	88 27       	eor	r24, r24
    6e6e:	77 fd       	sbrc	r23, 7
    6e70:	80 95       	com	r24
    6e72:	98 2f       	mov	r25, r24
    6e74:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <__floatsisf>
    6e78:	9b 01       	movw	r18, r22
    6e7a:	ac 01       	movw	r20, r24
    6e7c:	d7 01       	movw	r26, r14
    6e7e:	f6 01       	movw	r30, r12
    6e80:	6b 2f       	mov	r22, r27
    6e82:	7e 2d       	mov	r23, r14
    6e84:	8f 2f       	mov	r24, r31
    6e86:	9c 2d       	mov	r25, r12
    6e88:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    6e8c:	f6 2e       	mov	r15, r22
    6e8e:	e7 2e       	mov	r14, r23
    6e90:	d8 2e       	mov	r13, r24
    6e92:	c9 2e       	mov	r12, r25
				sign += (float)values[i];
    6e94:	68 81       	ld	r22, Y
    6e96:	79 81       	ldd	r23, Y+1	; 0x01
    6e98:	8a 81       	ldd	r24, Y+2	; 0x02
    6e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    6e9c:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <__floatsisf>
    6ea0:	9b 01       	movw	r18, r22
    6ea2:	ac 01       	movw	r20, r24
    6ea4:	d4 01       	movw	r26, r8
    6ea6:	f3 01       	movw	r30, r6
    6ea8:	6b 2f       	mov	r22, r27
    6eaa:	78 2d       	mov	r23, r8
    6eac:	8f 2f       	mov	r24, r31
    6eae:	96 2d       	mov	r25, r6
    6eb0:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    6eb4:	96 2e       	mov	r9, r22
    6eb6:	87 2e       	mov	r8, r23
    6eb8:	78 2e       	mov	r7, r24
    6eba:	69 2e       	mov	r6, r25
    6ebc:	0c 5f       	subi	r16, 0xFC	; 252
    6ebe:	1f 4f       	sbci	r17, 0xFF	; 255

		//return the average of all circular (0-360) values added with an addRotationalValue call
		datatype getRotationalAverage(){
			float buffer = 0;
			float sign = 0;
			for (byte i=0; i<currentSize; i++){
    6ec0:	0a 15       	cp	r16, r10
    6ec2:	1b 05       	cpc	r17, r11
    6ec4:	29 f6       	brne	.-118    	; 0x6e50 <_ZN11AverageListIVlE20getRotationalAverageEv+0x4a>
				buffer += (float)abs(values[i]);
				sign += (float)values[i];
			}
			buffer /= currentSize;
    6ec6:	63 2d       	mov	r22, r3
    6ec8:	70 e0       	ldi	r23, 0x00	; 0
    6eca:	88 27       	eor	r24, r24
    6ecc:	77 fd       	sbrc	r23, 7
    6ece:	80 95       	com	r24
    6ed0:	98 2f       	mov	r25, r24
    6ed2:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <__floatsisf>
    6ed6:	9b 01       	movw	r18, r22
    6ed8:	ac 01       	movw	r20, r24
    6eda:	d7 01       	movw	r26, r14
    6edc:	f6 01       	movw	r30, r12
    6ede:	6b 2f       	mov	r22, r27
    6ee0:	7e 2d       	mov	r23, r14
    6ee2:	8f 2f       	mov	r24, r31
    6ee4:	9c 2d       	mov	r25, r12
    6ee6:	0e 94 a0 44 	call	0x8940	; 0x8940 <__divsf3>
    6eea:	d6 2e       	mov	r13, r22
    6eec:	e7 2e       	mov	r14, r23
    6eee:	f8 2e       	mov	r15, r24
    6ef0:	09 2f       	mov	r16, r25
			if(sign>0)
    6ef2:	a4 01       	movw	r20, r8
    6ef4:	93 01       	movw	r18, r6
    6ef6:	65 2f       	mov	r22, r21
    6ef8:	78 2d       	mov	r23, r8
    6efa:	83 2f       	mov	r24, r19
    6efc:	96 2d       	mov	r25, r6
    6efe:	20 e0       	ldi	r18, 0x00	; 0
    6f00:	30 e0       	ldi	r19, 0x00	; 0
    6f02:	a9 01       	movw	r20, r18
    6f04:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <__gesf2>
    6f08:	18 16       	cp	r1, r24
    6f0a:	6c f4       	brge	.+26     	; 0x6f26 <_ZN11AverageListIVlE20getRotationalAverageEv+0x120>
				return (datatype)buffer+180;
    6f0c:	6d 2d       	mov	r22, r13
    6f0e:	7e 2d       	mov	r23, r14
    6f10:	8f 2d       	mov	r24, r15
    6f12:	90 2f       	mov	r25, r16
    6f14:	0e 94 08 45 	call	0x8a10	; 0x8a10 <__fixsfsi>
    6f18:	9b 01       	movw	r18, r22
    6f1a:	ac 01       	movw	r20, r24
    6f1c:	2c 54       	subi	r18, 0x4C	; 76
    6f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    6f20:	4f 4f       	sbci	r20, 0xFF	; 255
    6f22:	5f 4f       	sbci	r21, 0xFF	; 255
    6f24:	0e c0       	rjmp	.+28     	; 0x6f42 <_ZN11AverageListIVlE20getRotationalAverageEv+0x13c>
			else
				return (datatype)180-buffer;
    6f26:	60 e0       	ldi	r22, 0x00	; 0
    6f28:	70 e0       	ldi	r23, 0x00	; 0
    6f2a:	84 e3       	ldi	r24, 0x34	; 52
    6f2c:	93 e4       	ldi	r25, 0x43	; 67
    6f2e:	2d 2d       	mov	r18, r13
    6f30:	3e 2d       	mov	r19, r14
    6f32:	4f 2d       	mov	r20, r15
    6f34:	50 2f       	mov	r21, r16
    6f36:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    6f3a:	0e 94 08 45 	call	0x8a10	; 0x8a10 <__fixsfsi>
    6f3e:	9b 01       	movw	r18, r22
    6f40:	ac 01       	movw	r20, r24
		}
    6f42:	b9 01       	movw	r22, r18
    6f44:	ca 01       	movw	r24, r20
    6f46:	df 91       	pop	r29
    6f48:	cf 91       	pop	r28
    6f4a:	1f 91       	pop	r17
    6f4c:	0f 91       	pop	r16
    6f4e:	ff 90       	pop	r15
    6f50:	ef 90       	pop	r14
    6f52:	df 90       	pop	r13
    6f54:	cf 90       	pop	r12
    6f56:	bf 90       	pop	r11
    6f58:	af 90       	pop	r10
    6f5a:	9f 90       	pop	r9
    6f5c:	8f 90       	pop	r8
    6f5e:	7f 90       	pop	r7
    6f60:	6f 90       	pop	r6
    6f62:	5f 90       	pop	r5
    6f64:	4f 90       	pop	r4
    6f66:	3f 90       	pop	r3
    6f68:	08 95       	ret

00006f6a <_ZN4Wind12calcWindDataEv>:

void Wind::calcWindData() {
    6f6a:	ef 92       	push	r14
    6f6c:	ff 92       	push	r15
    6f6e:	0f 93       	push	r16
    6f70:	1f 93       	push	r17
    6f72:	cf 93       	push	r28
    6f74:	df 93       	push	r29
    6f76:	ec 01       	movw	r28, r24
//		Serial.println(windSpeedDur);
//		Serial.print("WindDir list:");
//		Serial.print(dirList.getTotalAverage());
//		Serial.print(", WindDirDur:");
//		Serial.println(windDirDur);
		lastWindUpdate = millis();
    6f78:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    6f7c:	6a 83       	std	Y+2, r22	; 0x02
    6f7e:	7b 83       	std	Y+3, r23	; 0x03
    6f80:	8c 83       	std	Y+4, r24	; 0x04
    6f82:	9d 83       	std	Y+5, r25	; 0x05

		//convert to windAverage
		if(millis()-lastPulse>3000){
    6f84:	0e 94 45 42 	call	0x848a	; 0x848a <millis>
    6f88:	20 91 bf 0b 	lds	r18, 0x0BBF
    6f8c:	30 91 c0 0b 	lds	r19, 0x0BC0
    6f90:	40 91 c1 0b 	lds	r20, 0x0BC1
    6f94:	50 91 c2 0b 	lds	r21, 0x0BC2
    6f98:	62 1b       	sub	r22, r18
    6f9a:	73 0b       	sbc	r23, r19
    6f9c:	84 0b       	sbc	r24, r20
    6f9e:	95 0b       	sbc	r25, r21
    6fa0:	69 3b       	cpi	r22, 0xB9	; 185
    6fa2:	2b e0       	ldi	r18, 0x0B	; 11
    6fa4:	72 07       	cpc	r23, r18
    6fa6:	20 e0       	ldi	r18, 0x00	; 0
    6fa8:	82 07       	cpc	r24, r18
    6faa:	20 e0       	ldi	r18, 0x00	; 0
    6fac:	92 07       	cpc	r25, r18
    6fae:	38 f0       	brcs	.+14     	; 0x6fbe <_ZN4Wind12calcWindDataEv+0x54>
			//no rotation, no wind
			windAverage=0;
    6fb0:	1b 86       	std	Y+11, r1	; 0x0b
    6fb2:	1a 86       	std	Y+10, r1	; 0x0a
			speedList.reset();
    6fb4:	8d ef       	ldi	r24, 0xFD	; 253
    6fb6:	9b e0       	ldi	r25, 0x0B	; 11
    6fb8:	0e 94 83 34 	call	0x6906	; 0x6906 <_ZN11AverageListIVlE5resetEv>
    6fbc:	1b c0       	rjmp	.+54     	; 0x6ff4 <_ZN4Wind12calcWindDataEv+0x8a>
		}else{
			windAverage =  windFactor / speedList.getTotalAverage() ;
    6fbe:	ec 84       	ldd	r14, Y+12	; 0x0c
    6fc0:	fd 84       	ldd	r15, Y+13	; 0x0d
    6fc2:	0e 85       	ldd	r16, Y+14	; 0x0e
    6fc4:	1f 85       	ldd	r17, Y+15	; 0x0f
    6fc6:	8d ef       	ldi	r24, 0xFD	; 253
    6fc8:	9b e0       	ldi	r25, 0x0B	; 11
    6fca:	0e 94 ac 36 	call	0x6d58	; 0x6d58 <_ZN11AverageListIVlE15getTotalAverageEv>
    6fce:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <__floatsisf>
    6fd2:	9b 01       	movw	r18, r22
    6fd4:	ac 01       	movw	r20, r24
    6fd6:	c8 01       	movw	r24, r16
    6fd8:	b7 01       	movw	r22, r14
    6fda:	0e 94 a0 44 	call	0x8940	; 0x8940 <__divsf3>
    6fde:	0e 94 08 45 	call	0x8a10	; 0x8a10 <__fixsfsi>
    6fe2:	7b 87       	std	Y+11, r23	; 0x0b
    6fe4:	6a 87       	std	Y+10, r22	; 0x0a

			//update gusts
			if (windAverage > windMax)
    6fe6:	28 89       	ldd	r18, Y+16	; 0x10
    6fe8:	39 89       	ldd	r19, Y+17	; 0x11
    6fea:	26 17       	cp	r18, r22
    6fec:	37 07       	cpc	r19, r23
    6fee:	14 f4       	brge	.+4      	; 0x6ff4 <_ZN4Wind12calcWindDataEv+0x8a>
				windMax = windAverage;
    6ff0:	79 8b       	std	Y+17, r23	; 0x11
    6ff2:	68 8b       	std	Y+16, r22	; 0x10
		}

	// calc direction, degrees clockwise
	//should round to int, min 1
	windApparentDir=(int)dirList.getRotationalAverage();
    6ff4:	82 e0       	ldi	r24, 0x02	; 2
    6ff6:	9c e0       	ldi	r25, 0x0C	; 12
    6ff8:	0e 94 03 37 	call	0x6e06	; 0x6e06 <_ZN11AverageListIVlE20getRotationalAverageEv>
    6ffc:	7b 8b       	std	Y+19, r23	; 0x13
    6ffe:	6a 8b       	std	Y+18, r22	; 0x12

}
    7000:	df 91       	pop	r29
    7002:	cf 91       	pop	r28
    7004:	1f 91       	pop	r17
    7006:	0f 91       	pop	r16
    7008:	ff 90       	pop	r15
    700a:	ef 90       	pop	r14
    700c:	08 95       	ret

0000700e <_GLOBAL__I_lastPulse>:

template<typename datatype>
class AverageList {
	public:
		//<<constructor>>
		AverageList(datatype* storage, byte storageSize) : values(storage) , size(storageSize) { 
    700e:	85 ed       	ldi	r24, 0xD5	; 213
    7010:	9b e0       	ldi	r25, 0x0B	; 11
    7012:	90 93 fe 0b 	sts	0x0BFE, r25
    7016:	80 93 fd 0b 	sts	0x0BFD, r24
    701a:	25 e0       	ldi	r18, 0x05	; 5
    701c:	20 93 ff 0b 	sts	0x0BFF, r18
			currentSize = 0; 
    7020:	10 92 00 0c 	sts	0x0C00, r1
			currentIndex = 0; 
    7024:	10 92 01 0c 	sts	0x0C01, r1

template<typename datatype>
class AverageList {
	public:
		//<<constructor>>
		AverageList(datatype* storage, byte storageSize) : values(storage) , size(storageSize) { 
    7028:	89 ee       	ldi	r24, 0xE9	; 233
    702a:	9b e0       	ldi	r25, 0x0B	; 11
    702c:	90 93 03 0c 	sts	0x0C03, r25
    7030:	80 93 02 0c 	sts	0x0C02, r24
    7034:	20 93 04 0c 	sts	0x0C04, r18
			currentSize = 0; 
    7038:	10 92 05 0c 	sts	0x0C05, r1
			currentIndex = 0; 
    703c:	10 92 06 0c 	sts	0x0C06, r1
			lcd.eraseBox(0, 21, 127, 32);
		if (menuState == WINDRTN)
			lcd.eraseBox(0, 11, 127, 22);
		lastLcdUpdate= millis();
	}
}
    7040:	08 95       	ret

00007042 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    7042:	fc 01       	movw	r30, r24
    7044:	84 85       	ldd	r24, Z+12	; 0x0c
    7046:	95 85       	ldd	r25, Z+13	; 0x0d
    7048:	fc 01       	movw	r30, r24
    704a:	e0 5c       	subi	r30, 0xC0	; 192
    704c:	ff 4f       	sbci	r31, 0xFF	; 255
    704e:	20 81       	ld	r18, Z
    7050:	31 81       	ldd	r19, Z+1	; 0x01
    7052:	8e 5b       	subi	r24, 0xBE	; 190
    7054:	9f 4f       	sbci	r25, 0xFF	; 255
    7056:	fc 01       	movw	r30, r24
    7058:	80 81       	ld	r24, Z
    705a:	91 81       	ldd	r25, Z+1	; 0x01
    705c:	28 1b       	sub	r18, r24
    705e:	39 0b       	sbc	r19, r25
    7060:	2f 73       	andi	r18, 0x3F	; 63
    7062:	30 70       	andi	r19, 0x00	; 0
}
    7064:	c9 01       	movw	r24, r18
    7066:	08 95       	ret

00007068 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    7068:	fc 01       	movw	r30, r24
    706a:	84 85       	ldd	r24, Z+12	; 0x0c
    706c:	95 85       	ldd	r25, Z+13	; 0x0d
    706e:	fc 01       	movw	r30, r24
    7070:	e0 5c       	subi	r30, 0xC0	; 192
    7072:	ff 4f       	sbci	r31, 0xFF	; 255
    7074:	40 81       	ld	r20, Z
    7076:	51 81       	ldd	r21, Z+1	; 0x01
    7078:	fc 01       	movw	r30, r24
    707a:	ee 5b       	subi	r30, 0xBE	; 190
    707c:	ff 4f       	sbci	r31, 0xFF	; 255
    707e:	20 81       	ld	r18, Z
    7080:	31 81       	ldd	r19, Z+1	; 0x01
    7082:	42 17       	cp	r20, r18
    7084:	53 07       	cpc	r21, r19
    7086:	41 f0       	breq	.+16     	; 0x7098 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    7088:	01 90       	ld	r0, Z+
    708a:	f0 81       	ld	r31, Z
    708c:	e0 2d       	mov	r30, r0
    708e:	e8 0f       	add	r30, r24
    7090:	f9 1f       	adc	r31, r25
    7092:	20 81       	ld	r18, Z
    7094:	30 e0       	ldi	r19, 0x00	; 0
    7096:	02 c0       	rjmp	.+4      	; 0x709c <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    7098:	2f ef       	ldi	r18, 0xFF	; 255
    709a:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    709c:	c9 01       	movw	r24, r18
    709e:	08 95       	ret

000070a0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    70a0:	fc 01       	movw	r30, r24
    70a2:	84 85       	ldd	r24, Z+12	; 0x0c
    70a4:	95 85       	ldd	r25, Z+13	; 0x0d
    70a6:	fc 01       	movw	r30, r24
    70a8:	e0 5c       	subi	r30, 0xC0	; 192
    70aa:	ff 4f       	sbci	r31, 0xFF	; 255
    70ac:	40 81       	ld	r20, Z
    70ae:	51 81       	ldd	r21, Z+1	; 0x01
    70b0:	fc 01       	movw	r30, r24
    70b2:	ee 5b       	subi	r30, 0xBE	; 190
    70b4:	ff 4f       	sbci	r31, 0xFF	; 255
    70b6:	20 81       	ld	r18, Z
    70b8:	31 81       	ldd	r19, Z+1	; 0x01
    70ba:	42 17       	cp	r20, r18
    70bc:	53 07       	cpc	r21, r19
    70be:	71 f0       	breq	.+28     	; 0x70dc <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    70c0:	a0 81       	ld	r26, Z
    70c2:	b1 81       	ldd	r27, Z+1	; 0x01
    70c4:	a8 0f       	add	r26, r24
    70c6:	b9 1f       	adc	r27, r25
    70c8:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    70ca:	80 81       	ld	r24, Z
    70cc:	91 81       	ldd	r25, Z+1	; 0x01
    70ce:	01 96       	adiw	r24, 0x01	; 1
    70d0:	8f 73       	andi	r24, 0x3F	; 63
    70d2:	90 70       	andi	r25, 0x00	; 0
    70d4:	91 83       	std	Z+1, r25	; 0x01
    70d6:	80 83       	st	Z, r24
    return c;
    70d8:	30 e0       	ldi	r19, 0x00	; 0
    70da:	02 c0       	rjmp	.+4      	; 0x70e0 <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    70dc:	2f ef       	ldi	r18, 0xFF	; 255
    70de:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    70e0:	c9 01       	movw	r24, r18
    70e2:	08 95       	ret

000070e4 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    70e4:	dc 01       	movw	r26, r24
    70e6:	1e 96       	adiw	r26, 0x0e	; 14
    70e8:	8d 91       	ld	r24, X+
    70ea:	9c 91       	ld	r25, X
    70ec:	1f 97       	sbiw	r26, 0x0f	; 15
    70ee:	fc 01       	movw	r30, r24
    70f0:	e0 5c       	subi	r30, 0xC0	; 192
    70f2:	ff 4f       	sbci	r31, 0xFF	; 255
    70f4:	8e 5b       	subi	r24, 0xBE	; 190
    70f6:	9f 4f       	sbci	r25, 0xFF	; 255
    70f8:	40 81       	ld	r20, Z
    70fa:	51 81       	ldd	r21, Z+1	; 0x01
    70fc:	dc 01       	movw	r26, r24
    70fe:	2d 91       	ld	r18, X+
    7100:	3c 91       	ld	r19, X
    7102:	11 97       	sbiw	r26, 0x01	; 1
    7104:	42 17       	cp	r20, r18
    7106:	53 07       	cpc	r21, r19
    7108:	b9 f7       	brne	.-18     	; 0x70f8 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
    710a:	08 95       	ret

0000710c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    710c:	1f 93       	push	r17
    710e:	fc 01       	movw	r30, r24
    7110:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    7112:	26 85       	ldd	r18, Z+14	; 0x0e
    7114:	37 85       	ldd	r19, Z+15	; 0x0f
    7116:	d9 01       	movw	r26, r18
    7118:	a0 5c       	subi	r26, 0xC0	; 192
    711a:	bf 4f       	sbci	r27, 0xFF	; 255
    711c:	8d 91       	ld	r24, X+
    711e:	9c 91       	ld	r25, X
    7120:	01 96       	adiw	r24, 0x01	; 1
    7122:	60 e4       	ldi	r22, 0x40	; 64
    7124:	70 e0       	ldi	r23, 0x00	; 0
    7126:	0e 94 98 47 	call	0x8f30	; 0x8f30 <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    712a:	d9 01       	movw	r26, r18
    712c:	ae 5b       	subi	r26, 0xBE	; 190
    712e:	bf 4f       	sbci	r27, 0xFF	; 255
    7130:	4d 91       	ld	r20, X+
    7132:	5c 91       	ld	r21, X
    7134:	11 97       	sbiw	r26, 0x01	; 1
    7136:	84 17       	cp	r24, r20
    7138:	95 07       	cpc	r25, r21
    713a:	d1 f3       	breq	.-12     	; 0x7130 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    713c:	d9 01       	movw	r26, r18
    713e:	a0 5c       	subi	r26, 0xC0	; 192
    7140:	bf 4f       	sbci	r27, 0xFF	; 255
    7142:	0d 90       	ld	r0, X+
    7144:	bc 91       	ld	r27, X
    7146:	a0 2d       	mov	r26, r0
    7148:	a2 0f       	add	r26, r18
    714a:	b3 1f       	adc	r27, r19
    714c:	1c 93       	st	X, r17
  _tx_buffer->head = i;
    714e:	a6 85       	ldd	r26, Z+14	; 0x0e
    7150:	b7 85       	ldd	r27, Z+15	; 0x0f
    7152:	a0 5c       	subi	r26, 0xC0	; 192
    7154:	bf 4f       	sbci	r27, 0xFF	; 255
    7156:	11 96       	adiw	r26, 0x01	; 1
    7158:	9c 93       	st	X, r25
    715a:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
    715c:	a6 89       	ldd	r26, Z+22	; 0x16
    715e:	b7 89       	ldd	r27, Z+23	; 0x17
    7160:	2c 91       	ld	r18, X
    7162:	81 e0       	ldi	r24, 0x01	; 1
    7164:	90 e0       	ldi	r25, 0x00	; 0
    7166:	07 8c       	ldd	r0, Z+31	; 0x1f
    7168:	02 c0       	rjmp	.+4      	; 0x716e <_ZN14HardwareSerial5writeEh+0x62>
    716a:	88 0f       	add	r24, r24
    716c:	99 1f       	adc	r25, r25
    716e:	0a 94       	dec	r0
    7170:	e2 f7       	brpl	.-8      	; 0x716a <_ZN14HardwareSerial5writeEh+0x5e>
    7172:	28 2b       	or	r18, r24
    7174:	2c 93       	st	X, r18
  
  return 1;
}
    7176:	81 e0       	ldi	r24, 0x01	; 1
    7178:	90 e0       	ldi	r25, 0x00	; 0
    717a:	1f 91       	pop	r17
    717c:	08 95       	ret

0000717e <_ZN14HardwareSerial6write9Ehb>:

//New write method, and setup methods
size_t HardwareSerial::write9(uint8_t c, bool p)
{
    717e:	1f 93       	push	r17
    7180:	fc 01       	movw	r30, r24
    7182:	16 2f       	mov	r17, r22
	int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    7184:	26 85       	ldd	r18, Z+14	; 0x0e
    7186:	37 85       	ldd	r19, Z+15	; 0x0f
    7188:	d9 01       	movw	r26, r18
    718a:	a0 5c       	subi	r26, 0xC0	; 192
    718c:	bf 4f       	sbci	r27, 0xFF	; 255
    718e:	8d 91       	ld	r24, X+
    7190:	9c 91       	ld	r25, X
    7192:	01 96       	adiw	r24, 0x01	; 1
    7194:	60 e4       	ldi	r22, 0x40	; 64
    7196:	70 e0       	ldi	r23, 0x00	; 0
    7198:	0e 94 98 47 	call	0x8f30	; 0x8f30 <__divmodhi4>

	  // If the output buffer is full, there's nothing for it other than to
	  // wait for the interrupt handler to empty it a bit
	  // ???: return 0 here instead?
	  while (i == _tx_buffer->tail)
    719c:	d9 01       	movw	r26, r18
    719e:	ae 5b       	subi	r26, 0xBE	; 190
    71a0:	bf 4f       	sbci	r27, 0xFF	; 255
    71a2:	6d 91       	ld	r22, X+
    71a4:	7c 91       	ld	r23, X
    71a6:	11 97       	sbiw	r26, 0x01	; 1
    71a8:	86 17       	cp	r24, r22
    71aa:	97 07       	cpc	r25, r23
    71ac:	d1 f3       	breq	.-12     	; 0x71a2 <_ZN14HardwareSerial6write9Ehb+0x24>
	    ;

	  _tx_buffer->buffer[_tx_buffer->head] = c;
    71ae:	d9 01       	movw	r26, r18
    71b0:	a0 5c       	subi	r26, 0xC0	; 192
    71b2:	bf 4f       	sbci	r27, 0xFF	; 255
    71b4:	0d 90       	ld	r0, X+
    71b6:	bc 91       	ld	r27, X
    71b8:	a0 2d       	mov	r26, r0
    71ba:	a2 0f       	add	r26, r18
    71bc:	b3 1f       	adc	r27, r19
    71be:	1c 93       	st	X, r17
	  _tx_buffer->head = i;
    71c0:	a6 85       	ldd	r26, Z+14	; 0x0e
    71c2:	b7 85       	ldd	r27, Z+15	; 0x0f
    71c4:	a0 5c       	subi	r26, 0xC0	; 192
    71c6:	bf 4f       	sbci	r27, 0xFF	; 255
    71c8:	11 96       	adiw	r26, 0x01	; 1
    71ca:	9c 93       	st	X, r25
    71cc:	8e 93       	st	-X, r24
    71ce:	a6 89       	ldd	r26, Z+22	; 0x16
    71d0:	b7 89       	ldd	r27, Z+23	; 0x17

  //set TXB8 (bit 0) with 1 or 0
  if(p ){
    71d2:	44 23       	and	r20, r20
    71d4:	19 f0       	breq	.+6      	; 0x71dc <_ZN14HardwareSerial6write9Ehb+0x5e>
    *_ucsrb=*_ucsrb | B00000001;
    71d6:	8c 91       	ld	r24, X
    71d8:	81 60       	ori	r24, 0x01	; 1
    71da:	02 c0       	rjmp	.+4      	; 0x71e0 <_ZN14HardwareSerial6write9Ehb+0x62>
  }else{
    *_ucsrb=*_ucsrb & B11111110;
    71dc:	8c 91       	ld	r24, X
    71de:	8e 7f       	andi	r24, 0xFE	; 254
    71e0:	8c 93       	st	X, r24
  }
  sbi(*_ucsrb, _udrie);
    71e2:	a6 89       	ldd	r26, Z+22	; 0x16
    71e4:	b7 89       	ldd	r27, Z+23	; 0x17
    71e6:	2c 91       	ld	r18, X
    71e8:	81 e0       	ldi	r24, 0x01	; 1
    71ea:	90 e0       	ldi	r25, 0x00	; 0
    71ec:	07 8c       	ldd	r0, Z+31	; 0x1f
    71ee:	02 c0       	rjmp	.+4      	; 0x71f4 <_ZN14HardwareSerial6write9Ehb+0x76>
    71f0:	88 0f       	add	r24, r24
    71f2:	99 1f       	adc	r25, r25
    71f4:	0a 94       	dec	r0
    71f6:	e2 f7       	brpl	.-8      	; 0x71f0 <_ZN14HardwareSerial6write9Ehb+0x72>
    71f8:	28 2b       	or	r18, r24
    71fa:	2c 93       	st	X, r18

  return 1;
}
    71fc:	81 e0       	ldi	r24, 0x01	; 1
    71fe:	90 e0       	ldi	r25, 0x00	; 0
    7200:	1f 91       	pop	r17
    7202:	08 95       	ret

00007204 <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    7204:	fb 01       	movw	r30, r22
    7206:	e0 5c       	subi	r30, 0xC0	; 192
    7208:	ff 4f       	sbci	r31, 0xFF	; 255
    720a:	20 81       	ld	r18, Z
    720c:	31 81       	ldd	r19, Z+1	; 0x01
    720e:	2f 5f       	subi	r18, 0xFF	; 255
    7210:	3f 4f       	sbci	r19, 0xFF	; 255
    7212:	2f 73       	andi	r18, 0x3F	; 63
    7214:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    7216:	db 01       	movw	r26, r22
    7218:	ae 5b       	subi	r26, 0xBE	; 190
    721a:	bf 4f       	sbci	r27, 0xFF	; 255
    721c:	4d 91       	ld	r20, X+
    721e:	5c 91       	ld	r21, X
    7220:	11 97       	sbiw	r26, 0x01	; 1
    7222:	24 17       	cp	r18, r20
    7224:	35 07       	cpc	r19, r21
    7226:	39 f0       	breq	.+14     	; 0x7236 <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
    7228:	a0 81       	ld	r26, Z
    722a:	b1 81       	ldd	r27, Z+1	; 0x01
    722c:	a6 0f       	add	r26, r22
    722e:	b7 1f       	adc	r27, r23
    7230:	8c 93       	st	X, r24
    buffer->head = i;
    7232:	31 83       	std	Z+1, r19	; 0x01
    7234:	20 83       	st	Z, r18
    7236:	08 95       	ret

00007238 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    7238:	08 95       	ret

0000723a <__vector_25>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    723a:	1f 92       	push	r1
    723c:	0f 92       	push	r0
    723e:	0f b6       	in	r0, 0x3f	; 63
    7240:	0f 92       	push	r0
    7242:	0b b6       	in	r0, 0x3b	; 59
    7244:	0f 92       	push	r0
    7246:	11 24       	eor	r1, r1
    7248:	2f 93       	push	r18
    724a:	3f 93       	push	r19
    724c:	4f 93       	push	r20
    724e:	5f 93       	push	r21
    7250:	6f 93       	push	r22
    7252:	7f 93       	push	r23
    7254:	8f 93       	push	r24
    7256:	9f 93       	push	r25
    7258:	af 93       	push	r26
    725a:	bf 93       	push	r27
    725c:	ef 93       	push	r30
    725e:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    7260:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
    7264:	67 e0       	ldi	r22, 0x07	; 7
    7266:	7c e0       	ldi	r23, 0x0C	; 12
    7268:	0e 94 02 39 	call	0x7204	; 0x7204 <_Z10store_charhP11ring_buffer>
  }
    726c:	ff 91       	pop	r31
    726e:	ef 91       	pop	r30
    7270:	bf 91       	pop	r27
    7272:	af 91       	pop	r26
    7274:	9f 91       	pop	r25
    7276:	8f 91       	pop	r24
    7278:	7f 91       	pop	r23
    727a:	6f 91       	pop	r22
    727c:	5f 91       	pop	r21
    727e:	4f 91       	pop	r20
    7280:	3f 91       	pop	r19
    7282:	2f 91       	pop	r18
    7284:	0f 90       	pop	r0
    7286:	0b be       	out	0x3b, r0	; 59
    7288:	0f 90       	pop	r0
    728a:	0f be       	out	0x3f, r0	; 63
    728c:	0f 90       	pop	r0
    728e:	1f 90       	pop	r1
    7290:	18 95       	reti

00007292 <_Z12serialEvent1v>:
#endif
#endif

#if defined(USART1_RX_vect)
  void serialEvent1() __attribute__((weak));
  void serialEvent1() {}
    7292:	08 95       	ret

00007294 <__vector_36>:
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
  {
    7294:	1f 92       	push	r1
    7296:	0f 92       	push	r0
    7298:	0f b6       	in	r0, 0x3f	; 63
    729a:	0f 92       	push	r0
    729c:	0b b6       	in	r0, 0x3b	; 59
    729e:	0f 92       	push	r0
    72a0:	11 24       	eor	r1, r1
    72a2:	2f 93       	push	r18
    72a4:	3f 93       	push	r19
    72a6:	4f 93       	push	r20
    72a8:	5f 93       	push	r21
    72aa:	6f 93       	push	r22
    72ac:	7f 93       	push	r23
    72ae:	8f 93       	push	r24
    72b0:	9f 93       	push	r25
    72b2:	af 93       	push	r26
    72b4:	bf 93       	push	r27
    72b6:	ef 93       	push	r30
    72b8:	ff 93       	push	r31
    unsigned char c = UDR1;
    72ba:	80 91 ce 00 	lds	r24, 0x00CE
    store_char(c, &rx_buffer1);
    72be:	6f e8       	ldi	r22, 0x8F	; 143
    72c0:	7c e0       	ldi	r23, 0x0C	; 12
    72c2:	0e 94 02 39 	call	0x7204	; 0x7204 <_Z10store_charhP11ring_buffer>
  }
    72c6:	ff 91       	pop	r31
    72c8:	ef 91       	pop	r30
    72ca:	bf 91       	pop	r27
    72cc:	af 91       	pop	r26
    72ce:	9f 91       	pop	r25
    72d0:	8f 91       	pop	r24
    72d2:	7f 91       	pop	r23
    72d4:	6f 91       	pop	r22
    72d6:	5f 91       	pop	r21
    72d8:	4f 91       	pop	r20
    72da:	3f 91       	pop	r19
    72dc:	2f 91       	pop	r18
    72de:	0f 90       	pop	r0
    72e0:	0b be       	out	0x3b, r0	; 59
    72e2:	0f 90       	pop	r0
    72e4:	0f be       	out	0x3f, r0	; 63
    72e6:	0f 90       	pop	r0
    72e8:	1f 90       	pop	r1
    72ea:	18 95       	reti

000072ec <_Z12serialEvent2v>:
  #error SIG_USART1_RECV
#endif

#if defined(USART2_RX_vect) && defined(UDR2)
  void serialEvent2() __attribute__((weak));
  void serialEvent2() {}
    72ec:	08 95       	ret

000072ee <__vector_51>:
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
  {
    72ee:	1f 92       	push	r1
    72f0:	0f 92       	push	r0
    72f2:	0f b6       	in	r0, 0x3f	; 63
    72f4:	0f 92       	push	r0
    72f6:	0b b6       	in	r0, 0x3b	; 59
    72f8:	0f 92       	push	r0
    72fa:	11 24       	eor	r1, r1
    72fc:	2f 93       	push	r18
    72fe:	3f 93       	push	r19
    7300:	4f 93       	push	r20
    7302:	5f 93       	push	r21
    7304:	6f 93       	push	r22
    7306:	7f 93       	push	r23
    7308:	8f 93       	push	r24
    730a:	9f 93       	push	r25
    730c:	af 93       	push	r26
    730e:	bf 93       	push	r27
    7310:	ef 93       	push	r30
    7312:	ff 93       	push	r31
    unsigned char c = UDR2;
    7314:	80 91 d6 00 	lds	r24, 0x00D6
    store_char(c, &rx_buffer2);
    7318:	67 e1       	ldi	r22, 0x17	; 23
    731a:	7d e0       	ldi	r23, 0x0D	; 13
    731c:	0e 94 02 39 	call	0x7204	; 0x7204 <_Z10store_charhP11ring_buffer>
  }
    7320:	ff 91       	pop	r31
    7322:	ef 91       	pop	r30
    7324:	bf 91       	pop	r27
    7326:	af 91       	pop	r26
    7328:	9f 91       	pop	r25
    732a:	8f 91       	pop	r24
    732c:	7f 91       	pop	r23
    732e:	6f 91       	pop	r22
    7330:	5f 91       	pop	r21
    7332:	4f 91       	pop	r20
    7334:	3f 91       	pop	r19
    7336:	2f 91       	pop	r18
    7338:	0f 90       	pop	r0
    733a:	0b be       	out	0x3b, r0	; 59
    733c:	0f 90       	pop	r0
    733e:	0f be       	out	0x3f, r0	; 63
    7340:	0f 90       	pop	r0
    7342:	1f 90       	pop	r1
    7344:	18 95       	reti

00007346 <_Z12serialEvent3v>:
  #error SIG_USART2_RECV
#endif

#if defined(USART3_RX_vect) && defined(UDR3)
  void serialEvent3() __attribute__((weak));
  void serialEvent3() {}
    7346:	08 95       	ret

00007348 <__vector_54>:
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
  {
    7348:	1f 92       	push	r1
    734a:	0f 92       	push	r0
    734c:	0f b6       	in	r0, 0x3f	; 63
    734e:	0f 92       	push	r0
    7350:	0b b6       	in	r0, 0x3b	; 59
    7352:	0f 92       	push	r0
    7354:	11 24       	eor	r1, r1
    7356:	2f 93       	push	r18
    7358:	3f 93       	push	r19
    735a:	4f 93       	push	r20
    735c:	5f 93       	push	r21
    735e:	6f 93       	push	r22
    7360:	7f 93       	push	r23
    7362:	8f 93       	push	r24
    7364:	9f 93       	push	r25
    7366:	af 93       	push	r26
    7368:	bf 93       	push	r27
    736a:	ef 93       	push	r30
    736c:	ff 93       	push	r31
    unsigned char c = UDR3;
    736e:	80 91 36 01 	lds	r24, 0x0136
    store_char(c, &rx_buffer3);
    7372:	6f e9       	ldi	r22, 0x9F	; 159
    7374:	7d e0       	ldi	r23, 0x0D	; 13
    7376:	0e 94 02 39 	call	0x7204	; 0x7204 <_Z10store_charhP11ring_buffer>
  }
    737a:	ff 91       	pop	r31
    737c:	ef 91       	pop	r30
    737e:	bf 91       	pop	r27
    7380:	af 91       	pop	r26
    7382:	9f 91       	pop	r25
    7384:	8f 91       	pop	r24
    7386:	7f 91       	pop	r23
    7388:	6f 91       	pop	r22
    738a:	5f 91       	pop	r21
    738c:	4f 91       	pop	r20
    738e:	3f 91       	pop	r19
    7390:	2f 91       	pop	r18
    7392:	0f 90       	pop	r0
    7394:	0b be       	out	0x3b, r0	; 59
    7396:	0f 90       	pop	r0
    7398:	0f be       	out	0x3f, r0	; 63
    739a:	0f 90       	pop	r0
    739c:	1f 90       	pop	r1
    739e:	18 95       	reti

000073a0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    73a0:	87 e2       	ldi	r24, 0x27	; 39
    73a2:	9e e0       	ldi	r25, 0x0E	; 14
    73a4:	0e 94 21 38 	call	0x7042	; 0x7042 <_ZN14HardwareSerial9availableEv>
    73a8:	00 97       	sbiw	r24, 0x00	; 0
    73aa:	11 f0       	breq	.+4      	; 0x73b0 <_Z14serialEventRunv+0x10>
    73ac:	0e 94 1c 39 	call	0x7238	; 0x7238 <_Z11serialEventv>
#endif
#ifdef serialEvent1_implemented
  if (Serial1.available()) serialEvent1();
    73b0:	8b e4       	ldi	r24, 0x4B	; 75
    73b2:	9e e0       	ldi	r25, 0x0E	; 14
    73b4:	0e 94 21 38 	call	0x7042	; 0x7042 <_ZN14HardwareSerial9availableEv>
    73b8:	00 97       	sbiw	r24, 0x00	; 0
    73ba:	11 f0       	breq	.+4      	; 0x73c0 <_Z14serialEventRunv+0x20>
    73bc:	0e 94 49 39 	call	0x7292	; 0x7292 <_Z12serialEvent1v>
#endif
#ifdef serialEvent2_implemented
  if (Serial2.available()) serialEvent2();
    73c0:	8f e6       	ldi	r24, 0x6F	; 111
    73c2:	9e e0       	ldi	r25, 0x0E	; 14
    73c4:	0e 94 21 38 	call	0x7042	; 0x7042 <_ZN14HardwareSerial9availableEv>
    73c8:	00 97       	sbiw	r24, 0x00	; 0
    73ca:	11 f0       	breq	.+4      	; 0x73d0 <_Z14serialEventRunv+0x30>
    73cc:	0e 94 76 39 	call	0x72ec	; 0x72ec <_Z12serialEvent2v>
#endif
#ifdef serialEvent3_implemented
  if (Serial3.available()) serialEvent3();
    73d0:	83 e9       	ldi	r24, 0x93	; 147
    73d2:	9e e0       	ldi	r25, 0x0E	; 14
    73d4:	0e 94 21 38 	call	0x7042	; 0x7042 <_ZN14HardwareSerial9availableEv>
    73d8:	00 97       	sbiw	r24, 0x00	; 0
    73da:	11 f0       	breq	.+4      	; 0x73e0 <_Z14serialEventRunv+0x40>
    73dc:	0e 94 a3 39 	call	0x7346	; 0x7346 <_Z12serialEvent3v>
    73e0:	08 95       	ret

000073e2 <__vector_26>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    73e2:	1f 92       	push	r1
    73e4:	0f 92       	push	r0
    73e6:	0f b6       	in	r0, 0x3f	; 63
    73e8:	0f 92       	push	r0
    73ea:	0b b6       	in	r0, 0x3b	; 59
    73ec:	0f 92       	push	r0
    73ee:	11 24       	eor	r1, r1
    73f0:	2f 93       	push	r18
    73f2:	3f 93       	push	r19
    73f4:	5f 93       	push	r21
    73f6:	6f 93       	push	r22
    73f8:	7f 93       	push	r23
    73fa:	8f 93       	push	r24
    73fc:	9f 93       	push	r25
    73fe:	af 93       	push	r26
    7400:	bf 93       	push	r27
    7402:	ef 93       	push	r30
    7404:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    7406:	20 91 8b 0c 	lds	r18, 0x0C8B
    740a:	30 91 8c 0c 	lds	r19, 0x0C8C
    740e:	80 91 8d 0c 	lds	r24, 0x0C8D
    7412:	90 91 8e 0c 	lds	r25, 0x0C8E
    7416:	28 17       	cp	r18, r24
    7418:	39 07       	cpc	r19, r25
    741a:	31 f4       	brne	.+12     	; 0x7428 <__vector_26+0x46>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    741c:	80 91 c1 00 	lds	r24, 0x00C1
    7420:	8f 7d       	andi	r24, 0xDF	; 223
    7422:	80 93 c1 00 	sts	0x00C1, r24
    7426:	16 c0       	rjmp	.+44     	; 0x7454 <__vector_26+0x72>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    7428:	e0 91 8d 0c 	lds	r30, 0x0C8D
    742c:	f0 91 8e 0c 	lds	r31, 0x0C8E
    7430:	e5 5b       	subi	r30, 0xB5	; 181
    7432:	f3 4f       	sbci	r31, 0xF3	; 243
    7434:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    7436:	80 91 8d 0c 	lds	r24, 0x0C8D
    743a:	90 91 8e 0c 	lds	r25, 0x0C8E
    743e:	01 96       	adiw	r24, 0x01	; 1
    7440:	60 e4       	ldi	r22, 0x40	; 64
    7442:	70 e0       	ldi	r23, 0x00	; 0
    7444:	0e 94 98 47 	call	0x8f30	; 0x8f30 <__divmodhi4>
    7448:	90 93 8e 0c 	sts	0x0C8E, r25
    744c:	80 93 8d 0c 	sts	0x0C8D, r24
	
  #if defined(UDR0)
    UDR0 = c;
    7450:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    7454:	ff 91       	pop	r31
    7456:	ef 91       	pop	r30
    7458:	bf 91       	pop	r27
    745a:	af 91       	pop	r26
    745c:	9f 91       	pop	r25
    745e:	8f 91       	pop	r24
    7460:	7f 91       	pop	r23
    7462:	6f 91       	pop	r22
    7464:	5f 91       	pop	r21
    7466:	3f 91       	pop	r19
    7468:	2f 91       	pop	r18
    746a:	0f 90       	pop	r0
    746c:	0b be       	out	0x3b, r0	; 59
    746e:	0f 90       	pop	r0
    7470:	0f be       	out	0x3f, r0	; 63
    7472:	0f 90       	pop	r0
    7474:	1f 90       	pop	r1
    7476:	18 95       	reti

00007478 <__vector_37>:
#endif
#endif

#ifdef USART1_UDRE_vect
ISR(USART1_UDRE_vect)
{
    7478:	1f 92       	push	r1
    747a:	0f 92       	push	r0
    747c:	0f b6       	in	r0, 0x3f	; 63
    747e:	0f 92       	push	r0
    7480:	0b b6       	in	r0, 0x3b	; 59
    7482:	0f 92       	push	r0
    7484:	11 24       	eor	r1, r1
    7486:	2f 93       	push	r18
    7488:	3f 93       	push	r19
    748a:	5f 93       	push	r21
    748c:	6f 93       	push	r22
    748e:	7f 93       	push	r23
    7490:	8f 93       	push	r24
    7492:	9f 93       	push	r25
    7494:	af 93       	push	r26
    7496:	bf 93       	push	r27
    7498:	ef 93       	push	r30
    749a:	ff 93       	push	r31
  if (tx_buffer1.head == tx_buffer1.tail) {
    749c:	20 91 13 0d 	lds	r18, 0x0D13
    74a0:	30 91 14 0d 	lds	r19, 0x0D14
    74a4:	80 91 15 0d 	lds	r24, 0x0D15
    74a8:	90 91 16 0d 	lds	r25, 0x0D16
    74ac:	28 17       	cp	r18, r24
    74ae:	39 07       	cpc	r19, r25
    74b0:	31 f4       	brne	.+12     	; 0x74be <__vector_37+0x46>
	// Buffer empty, so disable interrupts
    cbi(UCSR1B, UDRIE1);
    74b2:	80 91 c9 00 	lds	r24, 0x00C9
    74b6:	8f 7d       	andi	r24, 0xDF	; 223
    74b8:	80 93 c9 00 	sts	0x00C9, r24
    74bc:	16 c0       	rjmp	.+44     	; 0x74ea <__vector_37+0x72>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
    74be:	e0 91 15 0d 	lds	r30, 0x0D15
    74c2:	f0 91 16 0d 	lds	r31, 0x0D16
    74c6:	ed 52       	subi	r30, 0x2D	; 45
    74c8:	f3 4f       	sbci	r31, 0xF3	; 243
    74ca:	20 81       	ld	r18, Z
    tx_buffer1.tail = (tx_buffer1.tail + 1) % SERIAL_BUFFER_SIZE;
    74cc:	80 91 15 0d 	lds	r24, 0x0D15
    74d0:	90 91 16 0d 	lds	r25, 0x0D16
    74d4:	01 96       	adiw	r24, 0x01	; 1
    74d6:	60 e4       	ldi	r22, 0x40	; 64
    74d8:	70 e0       	ldi	r23, 0x00	; 0
    74da:	0e 94 98 47 	call	0x8f30	; 0x8f30 <__divmodhi4>
    74de:	90 93 16 0d 	sts	0x0D16, r25
    74e2:	80 93 15 0d 	sts	0x0D15, r24
	
    UDR1 = c;
    74e6:	20 93 ce 00 	sts	0x00CE, r18
  }
}
    74ea:	ff 91       	pop	r31
    74ec:	ef 91       	pop	r30
    74ee:	bf 91       	pop	r27
    74f0:	af 91       	pop	r26
    74f2:	9f 91       	pop	r25
    74f4:	8f 91       	pop	r24
    74f6:	7f 91       	pop	r23
    74f8:	6f 91       	pop	r22
    74fa:	5f 91       	pop	r21
    74fc:	3f 91       	pop	r19
    74fe:	2f 91       	pop	r18
    7500:	0f 90       	pop	r0
    7502:	0b be       	out	0x3b, r0	; 59
    7504:	0f 90       	pop	r0
    7506:	0f be       	out	0x3f, r0	; 63
    7508:	0f 90       	pop	r0
    750a:	1f 90       	pop	r1
    750c:	18 95       	reti

0000750e <__vector_52>:
#endif

#ifdef USART2_UDRE_vect
ISR(USART2_UDRE_vect)
{
    750e:	1f 92       	push	r1
    7510:	0f 92       	push	r0
    7512:	0f b6       	in	r0, 0x3f	; 63
    7514:	0f 92       	push	r0
    7516:	0b b6       	in	r0, 0x3b	; 59
    7518:	0f 92       	push	r0
    751a:	11 24       	eor	r1, r1
    751c:	2f 93       	push	r18
    751e:	3f 93       	push	r19
    7520:	5f 93       	push	r21
    7522:	6f 93       	push	r22
    7524:	7f 93       	push	r23
    7526:	8f 93       	push	r24
    7528:	9f 93       	push	r25
    752a:	af 93       	push	r26
    752c:	bf 93       	push	r27
    752e:	ef 93       	push	r30
    7530:	ff 93       	push	r31
  if (tx_buffer2.head == tx_buffer2.tail) {
    7532:	20 91 9b 0d 	lds	r18, 0x0D9B
    7536:	30 91 9c 0d 	lds	r19, 0x0D9C
    753a:	80 91 9d 0d 	lds	r24, 0x0D9D
    753e:	90 91 9e 0d 	lds	r25, 0x0D9E
    7542:	28 17       	cp	r18, r24
    7544:	39 07       	cpc	r19, r25
    7546:	31 f4       	brne	.+12     	; 0x7554 <__vector_52+0x46>
	// Buffer empty, so disable interrupts
    cbi(UCSR2B, UDRIE2);
    7548:	80 91 d1 00 	lds	r24, 0x00D1
    754c:	8f 7d       	andi	r24, 0xDF	; 223
    754e:	80 93 d1 00 	sts	0x00D1, r24
    7552:	16 c0       	rjmp	.+44     	; 0x7580 <__vector_52+0x72>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
    7554:	e0 91 9d 0d 	lds	r30, 0x0D9D
    7558:	f0 91 9e 0d 	lds	r31, 0x0D9E
    755c:	e5 5a       	subi	r30, 0xA5	; 165
    755e:	f2 4f       	sbci	r31, 0xF2	; 242
    7560:	20 81       	ld	r18, Z
    tx_buffer2.tail = (tx_buffer2.tail + 1) % SERIAL_BUFFER_SIZE;
    7562:	80 91 9d 0d 	lds	r24, 0x0D9D
    7566:	90 91 9e 0d 	lds	r25, 0x0D9E
    756a:	01 96       	adiw	r24, 0x01	; 1
    756c:	60 e4       	ldi	r22, 0x40	; 64
    756e:	70 e0       	ldi	r23, 0x00	; 0
    7570:	0e 94 98 47 	call	0x8f30	; 0x8f30 <__divmodhi4>
    7574:	90 93 9e 0d 	sts	0x0D9E, r25
    7578:	80 93 9d 0d 	sts	0x0D9D, r24
	
    UDR2 = c;
    757c:	20 93 d6 00 	sts	0x00D6, r18
  }
}
    7580:	ff 91       	pop	r31
    7582:	ef 91       	pop	r30
    7584:	bf 91       	pop	r27
    7586:	af 91       	pop	r26
    7588:	9f 91       	pop	r25
    758a:	8f 91       	pop	r24
    758c:	7f 91       	pop	r23
    758e:	6f 91       	pop	r22
    7590:	5f 91       	pop	r21
    7592:	3f 91       	pop	r19
    7594:	2f 91       	pop	r18
    7596:	0f 90       	pop	r0
    7598:	0b be       	out	0x3b, r0	; 59
    759a:	0f 90       	pop	r0
    759c:	0f be       	out	0x3f, r0	; 63
    759e:	0f 90       	pop	r0
    75a0:	1f 90       	pop	r1
    75a2:	18 95       	reti

000075a4 <__vector_55>:
#endif

#ifdef USART3_UDRE_vect
ISR(USART3_UDRE_vect)
{
    75a4:	1f 92       	push	r1
    75a6:	0f 92       	push	r0
    75a8:	0f b6       	in	r0, 0x3f	; 63
    75aa:	0f 92       	push	r0
    75ac:	0b b6       	in	r0, 0x3b	; 59
    75ae:	0f 92       	push	r0
    75b0:	11 24       	eor	r1, r1
    75b2:	2f 93       	push	r18
    75b4:	3f 93       	push	r19
    75b6:	5f 93       	push	r21
    75b8:	6f 93       	push	r22
    75ba:	7f 93       	push	r23
    75bc:	8f 93       	push	r24
    75be:	9f 93       	push	r25
    75c0:	af 93       	push	r26
    75c2:	bf 93       	push	r27
    75c4:	ef 93       	push	r30
    75c6:	ff 93       	push	r31
  if (tx_buffer3.head == tx_buffer3.tail) {
    75c8:	20 91 23 0e 	lds	r18, 0x0E23
    75cc:	30 91 24 0e 	lds	r19, 0x0E24
    75d0:	80 91 25 0e 	lds	r24, 0x0E25
    75d4:	90 91 26 0e 	lds	r25, 0x0E26
    75d8:	28 17       	cp	r18, r24
    75da:	39 07       	cpc	r19, r25
    75dc:	31 f4       	brne	.+12     	; 0x75ea <__vector_55+0x46>
	// Buffer empty, so disable interrupts
    cbi(UCSR3B, UDRIE3);
    75de:	80 91 31 01 	lds	r24, 0x0131
    75e2:	8f 7d       	andi	r24, 0xDF	; 223
    75e4:	80 93 31 01 	sts	0x0131, r24
    75e8:	16 c0       	rjmp	.+44     	; 0x7616 <__vector_55+0x72>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
    75ea:	e0 91 25 0e 	lds	r30, 0x0E25
    75ee:	f0 91 26 0e 	lds	r31, 0x0E26
    75f2:	ed 51       	subi	r30, 0x1D	; 29
    75f4:	f2 4f       	sbci	r31, 0xF2	; 242
    75f6:	20 81       	ld	r18, Z
    tx_buffer3.tail = (tx_buffer3.tail + 1) % SERIAL_BUFFER_SIZE;
    75f8:	80 91 25 0e 	lds	r24, 0x0E25
    75fc:	90 91 26 0e 	lds	r25, 0x0E26
    7600:	01 96       	adiw	r24, 0x01	; 1
    7602:	60 e4       	ldi	r22, 0x40	; 64
    7604:	70 e0       	ldi	r23, 0x00	; 0
    7606:	0e 94 98 47 	call	0x8f30	; 0x8f30 <__divmodhi4>
    760a:	90 93 26 0e 	sts	0x0E26, r25
    760e:	80 93 25 0e 	sts	0x0E25, r24
	
    UDR3 = c;
    7612:	20 93 36 01 	sts	0x0136, r18
  }
}
    7616:	ff 91       	pop	r31
    7618:	ef 91       	pop	r30
    761a:	bf 91       	pop	r27
    761c:	af 91       	pop	r26
    761e:	9f 91       	pop	r25
    7620:	8f 91       	pop	r24
    7622:	7f 91       	pop	r23
    7624:	6f 91       	pop	r22
    7626:	5f 91       	pop	r21
    7628:	3f 91       	pop	r19
    762a:	2f 91       	pop	r18
    762c:	0f 90       	pop	r0
    762e:	0b be       	out	0x3b, r0	; 59
    7630:	0f 90       	pop	r0
    7632:	0f be       	out	0x3f, r0	; 63
    7634:	0f 90       	pop	r0
    7636:	1f 90       	pop	r1
    7638:	18 95       	reti

0000763a <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    763a:	df 92       	push	r13
    763c:	ef 92       	push	r14
    763e:	ff 92       	push	r15
    7640:	0f 93       	push	r16
    7642:	1f 93       	push	r17
    7644:	cf 93       	push	r28
    7646:	df 93       	push	r29
    7648:	ec 01       	movw	r28, r24
    764a:	7a 01       	movw	r14, r20
    764c:	8b 01       	movw	r16, r22
  _usbs = usbs;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    764e:	dd 24       	eor	r13, r13
    7650:	d3 94       	inc	r13
    7652:	40 30       	cpi	r20, 0x00	; 0
    7654:	81 ee       	ldi	r24, 0xE1	; 225
    7656:	58 07       	cpc	r21, r24
    7658:	80 e0       	ldi	r24, 0x00	; 0
    765a:	68 07       	cpc	r22, r24
    765c:	80 e0       	ldi	r24, 0x00	; 0
    765e:	78 07       	cpc	r23, r24
    7660:	49 f4       	brne	.+18     	; 0x7674 <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    7662:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    7664:	ec 89       	ldd	r30, Y+20	; 0x14
    7666:	fd 89       	ldd	r31, Y+21	; 0x15
    7668:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    766a:	60 e8       	ldi	r22, 0x80	; 128
    766c:	74 e8       	ldi	r23, 0x84	; 132
    766e:	8e e1       	ldi	r24, 0x1E	; 30
    7670:	90 e0       	ldi	r25, 0x00	; 0
    7672:	0f c0       	rjmp	.+30     	; 0x7692 <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    7674:	ec 89       	ldd	r30, Y+20	; 0x14
    7676:	fd 89       	ldd	r31, Y+21	; 0x15
    7678:	81 e0       	ldi	r24, 0x01	; 1
    767a:	90 e0       	ldi	r25, 0x00	; 0
    767c:	08 a0       	ldd	r0, Y+32	; 0x20
    767e:	02 c0       	rjmp	.+4      	; 0x7684 <_ZN14HardwareSerial5beginEm+0x4a>
    7680:	88 0f       	add	r24, r24
    7682:	99 1f       	adc	r25, r25
    7684:	0a 94       	dec	r0
    7686:	e2 f7       	brpl	.-8      	; 0x7680 <_ZN14HardwareSerial5beginEm+0x46>
    7688:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    768a:	60 e0       	ldi	r22, 0x00	; 0
    768c:	79 e0       	ldi	r23, 0x09	; 9
    768e:	8d e3       	ldi	r24, 0x3D	; 61
    7690:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    7692:	a8 01       	movw	r20, r16
    7694:	97 01       	movw	r18, r14
    7696:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <__udivmodsi4>
    769a:	21 50       	subi	r18, 0x01	; 1
    769c:	30 40       	sbci	r19, 0x00	; 0
    769e:	40 40       	sbci	r20, 0x00	; 0
    76a0:	50 40       	sbci	r21, 0x00	; 0
    76a2:	56 95       	lsr	r21
    76a4:	47 95       	ror	r20
    76a6:	37 95       	ror	r19
    76a8:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    76aa:	80 e1       	ldi	r24, 0x10	; 16
    76ac:	20 30       	cpi	r18, 0x00	; 0
    76ae:	38 07       	cpc	r19, r24
    76b0:	10 f0       	brcs	.+4      	; 0x76b6 <_ZN14HardwareSerial5beginEm+0x7c>
    76b2:	dd 20       	and	r13, r13
    76b4:	b1 f6       	brne	.-84     	; 0x7662 <_ZN14HardwareSerial5beginEm+0x28>
  {
    use_u2x = false;
    goto try_again;
  }
  //set 9 bit off in *_ucsrb here to be sure its 0
  *_ucsrb &= 4;
    76b6:	ee 89       	ldd	r30, Y+22	; 0x16
    76b8:	ff 89       	ldd	r31, Y+23	; 0x17
    76ba:	80 81       	ld	r24, Z
    76bc:	84 70       	andi	r24, 0x04	; 4
    76be:	80 83       	st	Z, r24
  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    76c0:	e8 89       	ldd	r30, Y+16	; 0x10
    76c2:	f9 89       	ldd	r31, Y+17	; 0x11
    76c4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    76c6:	ea 89       	ldd	r30, Y+18	; 0x12
    76c8:	fb 89       	ldd	r31, Y+19	; 0x13
    76ca:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    76cc:	ee 89       	ldd	r30, Y+22	; 0x16
    76ce:	ff 89       	ldd	r31, Y+23	; 0x17
    76d0:	40 81       	ld	r20, Z
    76d2:	81 e0       	ldi	r24, 0x01	; 1
    76d4:	90 e0       	ldi	r25, 0x00	; 0
    76d6:	9c 01       	movw	r18, r24
    76d8:	0c 8c       	ldd	r0, Y+28	; 0x1c
    76da:	02 c0       	rjmp	.+4      	; 0x76e0 <_ZN14HardwareSerial5beginEm+0xa6>
    76dc:	22 0f       	add	r18, r18
    76de:	33 1f       	adc	r19, r19
    76e0:	0a 94       	dec	r0
    76e2:	e2 f7       	brpl	.-8      	; 0x76dc <_ZN14HardwareSerial5beginEm+0xa2>
    76e4:	42 2b       	or	r20, r18
    76e6:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    76e8:	ee 89       	ldd	r30, Y+22	; 0x16
    76ea:	ff 89       	ldd	r31, Y+23	; 0x17
    76ec:	40 81       	ld	r20, Z
    76ee:	9c 01       	movw	r18, r24
    76f0:	0d 8c       	ldd	r0, Y+29	; 0x1d
    76f2:	02 c0       	rjmp	.+4      	; 0x76f8 <_ZN14HardwareSerial5beginEm+0xbe>
    76f4:	22 0f       	add	r18, r18
    76f6:	33 1f       	adc	r19, r19
    76f8:	0a 94       	dec	r0
    76fa:	e2 f7       	brpl	.-8      	; 0x76f4 <_ZN14HardwareSerial5beginEm+0xba>
    76fc:	42 2b       	or	r20, r18
    76fe:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    7700:	ee 89       	ldd	r30, Y+22	; 0x16
    7702:	ff 89       	ldd	r31, Y+23	; 0x17
    7704:	40 81       	ld	r20, Z
    7706:	9c 01       	movw	r18, r24
    7708:	0e 8c       	ldd	r0, Y+30	; 0x1e
    770a:	02 c0       	rjmp	.+4      	; 0x7710 <_ZN14HardwareSerial5beginEm+0xd6>
    770c:	22 0f       	add	r18, r18
    770e:	33 1f       	adc	r19, r19
    7710:	0a 94       	dec	r0
    7712:	e2 f7       	brpl	.-8      	; 0x770c <_ZN14HardwareSerial5beginEm+0xd2>
    7714:	42 2b       	or	r20, r18
    7716:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    7718:	ee 89       	ldd	r30, Y+22	; 0x16
    771a:	ff 89       	ldd	r31, Y+23	; 0x17
    771c:	20 81       	ld	r18, Z
    771e:	0f 8c       	ldd	r0, Y+31	; 0x1f
    7720:	02 c0       	rjmp	.+4      	; 0x7726 <_ZN14HardwareSerial5beginEm+0xec>
    7722:	88 0f       	add	r24, r24
    7724:	99 1f       	adc	r25, r25
    7726:	0a 94       	dec	r0
    7728:	e2 f7       	brpl	.-8      	; 0x7722 <_ZN14HardwareSerial5beginEm+0xe8>
    772a:	80 95       	com	r24
    772c:	82 23       	and	r24, r18
    772e:	80 83       	st	Z, r24
}
    7730:	df 91       	pop	r29
    7732:	cf 91       	pop	r28
    7734:	1f 91       	pop	r17
    7736:	0f 91       	pop	r16
    7738:	ff 90       	pop	r15
    773a:	ef 90       	pop	r14
    773c:	df 90       	pop	r13
    773e:	08 95       	ret

00007740 <_ZN14HardwareSerial5beginEmhhh>:
//    - stop bits ( 1 or 2 )
//        default = 1
//    - parity ( 0 = none, 1 = odd, 2 = even )
//        default = 0
void HardwareSerial::begin(const uint32_t baud, const uint8_t data_bits, const uint8_t stop_bits, const uint8_t parity)
{
    7740:	af 92       	push	r10
    7742:	bf 92       	push	r11
    7744:	cf 92       	push	r12
    7746:	df 92       	push	r13
    7748:	ef 92       	push	r14
    774a:	ff 92       	push	r15
    774c:	0f 93       	push	r16
    774e:	1f 93       	push	r17
    7750:	cf 93       	push	r28
    7752:	df 93       	push	r29
    7754:	ec 01       	movw	r28, r24
    7756:	5a 01       	movw	r10, r20
    7758:	6b 01       	movw	r12, r22
    775a:	12 2f       	mov	r17, r18
    775c:	f0 2e       	mov	r15, r16
//        default = 8
//    - stop bits ( 1 or 2 )
//        default = 1
//    - parity ( 0 = none, 1 = odd, 2 = even )
//        default = 0
void HardwareSerial::begin(const uint32_t baud, const uint8_t data_bits, const uint8_t stop_bits, const uint8_t parity)
    775e:	01 e0       	ldi	r16, 0x01	; 1
    7760:	40 30       	cpi	r20, 0x00	; 0
    7762:	81 ee       	ldi	r24, 0xE1	; 225
    7764:	58 07       	cpc	r21, r24
    7766:	80 e0       	ldi	r24, 0x00	; 0
    7768:	68 07       	cpc	r22, r24
    776a:	80 e0       	ldi	r24, 0x00	; 0
    776c:	78 07       	cpc	r23, r24
    776e:	09 f4       	brne	.+2      	; 0x7772 <_ZN14HardwareSerial5beginEmhhh+0x32>
    7770:	00 e0       	ldi	r16, 0x00	; 0
	  if (baud == 57600) {
	    use_u2x = false;
	  }
	#endif
        uint8_t frame_format=0;
        *_ucsrb=0;
    7772:	ee 89       	ldd	r30, Y+22	; 0x16
    7774:	ff 89       	ldd	r31, Y+23	; 0x17
    7776:	10 82       	st	Z, r1
        // U2X mode is needed for baud rates higher than ( Hz / 16 )
        try_again:

          if (use_u2x) {
    7778:	00 23       	and	r16, r16
    777a:	99 f0       	breq	.+38     	; 0x77a2 <_ZN14HardwareSerial5beginEmhhh+0x62>
    777c:	02 c0       	rjmp	.+4      	; 0x7782 <_ZN14HardwareSerial5beginEmhhh+0x42>
            baud_setting = (F_CPU / 8 / baud - 1) / 2;
          }

          if ((baud_setting > 4095) && use_u2x)
          {
            use_u2x = false;
    777e:	00 e0       	ldi	r16, 0x00	; 0
    7780:	10 c0       	rjmp	.+32     	; 0x77a2 <_ZN14HardwareSerial5beginEmhhh+0x62>
        *_ucsrb=0;
        // U2X mode is needed for baud rates higher than ( Hz / 16 )
        try_again:

          if (use_u2x) {
            *_ucsra = 1 << _u2x;
    7782:	ec 89       	ldd	r30, Y+20	; 0x14
    7784:	fd 89       	ldd	r31, Y+21	; 0x15
    7786:	81 e0       	ldi	r24, 0x01	; 1
    7788:	90 e0       	ldi	r25, 0x00	; 0
    778a:	08 a0       	ldd	r0, Y+32	; 0x20
    778c:	02 c0       	rjmp	.+4      	; 0x7792 <_ZN14HardwareSerial5beginEmhhh+0x52>
    778e:	88 0f       	add	r24, r24
    7790:	99 1f       	adc	r25, r25
    7792:	0a 94       	dec	r0
    7794:	e2 f7       	brpl	.-8      	; 0x778e <_ZN14HardwareSerial5beginEmhhh+0x4e>
    7796:	80 83       	st	Z, r24
            baud_setting = (F_CPU / 4 / baud - 1) / 2;
    7798:	60 e0       	ldi	r22, 0x00	; 0
    779a:	79 e0       	ldi	r23, 0x09	; 9
    779c:	8d e3       	ldi	r24, 0x3D	; 61
    779e:	90 e0       	ldi	r25, 0x00	; 0
    77a0:	07 c0       	rjmp	.+14     	; 0x77b0 <_ZN14HardwareSerial5beginEmhhh+0x70>
          } else {
            *_ucsra = 0;
    77a2:	ec 89       	ldd	r30, Y+20	; 0x14
    77a4:	fd 89       	ldd	r31, Y+21	; 0x15
    77a6:	10 82       	st	Z, r1
            baud_setting = (F_CPU / 8 / baud - 1) / 2;
    77a8:	60 e8       	ldi	r22, 0x80	; 128
    77aa:	74 e8       	ldi	r23, 0x84	; 132
    77ac:	8e e1       	ldi	r24, 0x1E	; 30
    77ae:	90 e0       	ldi	r25, 0x00	; 0
    77b0:	a6 01       	movw	r20, r12
    77b2:	95 01       	movw	r18, r10
    77b4:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <__udivmodsi4>
    77b8:	21 50       	subi	r18, 0x01	; 1
    77ba:	30 40       	sbci	r19, 0x00	; 0
    77bc:	40 40       	sbci	r20, 0x00	; 0
    77be:	50 40       	sbci	r21, 0x00	; 0
    77c0:	56 95       	lsr	r21
    77c2:	47 95       	ror	r20
    77c4:	37 95       	ror	r19
    77c6:	27 95       	ror	r18
          }

          if ((baud_setting > 4095) && use_u2x)
    77c8:	80 e1       	ldi	r24, 0x10	; 16
    77ca:	20 30       	cpi	r18, 0x00	; 0
    77cc:	38 07       	cpc	r19, r24
    77ce:	10 f0       	brcs	.+4      	; 0x77d4 <_ZN14HardwareSerial5beginEmhhh+0x94>
    77d0:	00 23       	and	r16, r16
    77d2:	a9 f6       	brne	.-86     	; 0x777e <_ZN14HardwareSerial5beginEmhhh+0x3e>
            use_u2x = false;
            goto try_again;
          }

        //set 9 bit off in *_ucsrb here to be sure its 0
        *_ucsrb &= 4;
    77d4:	ee 89       	ldd	r30, Y+22	; 0x16
    77d6:	ff 89       	ldd	r31, Y+23	; 0x17
    77d8:	80 81       	ld	r24, Z
    77da:	84 70       	andi	r24, 0x04	; 4
    77dc:	80 83       	st	Z, r24
        switch(data_bits) {
    77de:	17 30       	cpi	r17, 0x07	; 7
    77e0:	79 f0       	breq	.+30     	; 0x7800 <_ZN14HardwareSerial5beginEmhhh+0xc0>
    77e2:	18 30       	cpi	r17, 0x08	; 8
    77e4:	28 f4       	brcc	.+10     	; 0x77f0 <_ZN14HardwareSerial5beginEmhhh+0xb0>
    77e6:	15 30       	cpi	r17, 0x05	; 5
    77e8:	39 f1       	breq	.+78     	; 0x7838 <_ZN14HardwareSerial5beginEmhhh+0xf8>
    77ea:	16 30       	cpi	r17, 0x06	; 6
    77ec:	11 f5       	brne	.+68     	; 0x7832 <_ZN14HardwareSerial5beginEmhhh+0xf2>
    77ee:	05 c0       	rjmp	.+10     	; 0x77fa <_ZN14HardwareSerial5beginEmhhh+0xba>
    77f0:	18 30       	cpi	r17, 0x08	; 8
    77f2:	f9 f0       	breq	.+62     	; 0x7832 <_ZN14HardwareSerial5beginEmhhh+0xf2>
    77f4:	19 30       	cpi	r17, 0x09	; 9
    77f6:	e9 f4       	brne	.+58     	; 0x7832 <_ZN14HardwareSerial5beginEmhhh+0xf2>
    77f8:	0d c0       	rjmp	.+26     	; 0x7814 <_ZN14HardwareSerial5beginEmhhh+0xd4>
                case 5: frame_format = 0; break; // 5 data bits
                case 6: frame_format = (1<<_ucsz0); break; // 6 data bits
    77fa:	81 e0       	ldi	r24, 0x01	; 1
    77fc:	90 e0       	ldi	r25, 0x00	; 0
    77fe:	02 c0       	rjmp	.+4      	; 0x7804 <_ZN14HardwareSerial5beginEmhhh+0xc4>
                case 7: frame_format = (2<<_ucsz0); break; // 7 data bits
    7800:	82 e0       	ldi	r24, 0x02	; 2
    7802:	90 e0       	ldi	r25, 0x00	; 0
    7804:	09 a0       	ldd	r0, Y+33	; 0x21
    7806:	02 c0       	rjmp	.+4      	; 0x780c <_ZN14HardwareSerial5beginEmhhh+0xcc>
    7808:	88 0f       	add	r24, r24
    780a:	99 1f       	adc	r25, r25
    780c:	0a 94       	dec	r0
    780e:	e2 f7       	brpl	.-8      	; 0x7808 <_ZN14HardwareSerial5beginEmhhh+0xc8>
    7810:	48 2f       	mov	r20, r24
    7812:	13 c0       	rjmp	.+38     	; 0x783a <_ZN14HardwareSerial5beginEmhhh+0xfa>
                case 8: frame_format = (3<<_ucsz0); break;// 8 data bits
                case 9:
                	frame_format = (3<<_ucsz0); // 9 data bits
    7814:	83 e0       	ldi	r24, 0x03	; 3
    7816:	90 e0       	ldi	r25, 0x00	; 0
    7818:	09 a0       	ldd	r0, Y+33	; 0x21
    781a:	02 c0       	rjmp	.+4      	; 0x7820 <_ZN14HardwareSerial5beginEmhhh+0xe0>
    781c:	88 0f       	add	r24, r24
    781e:	99 1f       	adc	r25, r25
    7820:	0a 94       	dec	r0
    7822:	e2 f7       	brpl	.-8      	; 0x781c <_ZN14HardwareSerial5beginEmhhh+0xdc>
    7824:	48 2f       	mov	r20, r24
                	*_ucsrb |= 4;
    7826:	ee 89       	ldd	r30, Y+22	; 0x16
    7828:	ff 89       	ldd	r31, Y+23	; 0x17
    782a:	80 81       	ld	r24, Z
    782c:	84 60       	ori	r24, 0x04	; 4
    782e:	80 83       	st	Z, r24
                	break;
    7830:	04 c0       	rjmp	.+8      	; 0x783a <_ZN14HardwareSerial5beginEmhhh+0xfa>
                default: frame_format = (3<<_ucsz0); break;// 8 data bits
    7832:	83 e0       	ldi	r24, 0x03	; 3
    7834:	90 e0       	ldi	r25, 0x00	; 0
    7836:	e6 cf       	rjmp	.-52     	; 0x7804 <_ZN14HardwareSerial5beginEmhhh+0xc4>
          }

        //set 9 bit off in *_ucsrb here to be sure its 0
        *_ucsrb &= 4;
        switch(data_bits) {
                case 5: frame_format = 0; break; // 5 data bits
    7838:	40 e0       	ldi	r20, 0x00	; 0
                	*_ucsrb |= 4;
                	break;
                default: frame_format = (3<<_ucsz0); break;// 8 data bits
        }

        if(stop_bits==2) frame_format |= (1<<_usbs);
    783a:	8f 2d       	mov	r24, r15
    783c:	82 30       	cpi	r24, 0x02	; 2
    783e:	49 f4       	brne	.+18     	; 0x7852 <_ZN14HardwareSerial5beginEmhhh+0x112>
    7840:	81 e0       	ldi	r24, 0x01	; 1
    7842:	90 e0       	ldi	r25, 0x00	; 0
    7844:	0b a0       	ldd	r0, Y+35	; 0x23
    7846:	02 c0       	rjmp	.+4      	; 0x784c <_ZN14HardwareSerial5beginEmhhh+0x10c>
    7848:	88 0f       	add	r24, r24
    784a:	99 1f       	adc	r25, r25
    784c:	0a 94       	dec	r0
    784e:	e2 f7       	brpl	.-8      	; 0x7848 <_ZN14HardwareSerial5beginEmhhh+0x108>
    7850:	48 2b       	or	r20, r24

        switch(parity) {
    7852:	8e 2d       	mov	r24, r14
    7854:	81 30       	cpi	r24, 0x01	; 1
    7856:	19 f0       	breq	.+6      	; 0x785e <_ZN14HardwareSerial5beginEmhhh+0x11e>
    7858:	82 30       	cpi	r24, 0x02	; 2
    785a:	69 f4       	brne	.+26     	; 0x7876 <_ZN14HardwareSerial5beginEmhhh+0x136>
    785c:	03 c0       	rjmp	.+6      	; 0x7864 <_ZN14HardwareSerial5beginEmhhh+0x124>
                case 1: frame_format |= (3<<_upm0); break; // odd parity
    785e:	83 e0       	ldi	r24, 0x03	; 3
    7860:	90 e0       	ldi	r25, 0x00	; 0
    7862:	02 c0       	rjmp	.+4      	; 0x7868 <_ZN14HardwareSerial5beginEmhhh+0x128>
                case 2: frame_format |= (2<<_upm0); break; // even parity
    7864:	82 e0       	ldi	r24, 0x02	; 2
    7866:	90 e0       	ldi	r25, 0x00	; 0
    7868:	0a a0       	ldd	r0, Y+34	; 0x22
    786a:	02 c0       	rjmp	.+4      	; 0x7870 <_ZN14HardwareSerial5beginEmhhh+0x130>
    786c:	88 0f       	add	r24, r24
    786e:	99 1f       	adc	r25, r25
    7870:	0a 94       	dec	r0
    7872:	e2 f7       	brpl	.-8      	; 0x786c <_ZN14HardwareSerial5beginEmhhh+0x12c>
    7874:	48 2b       	or	r20, r24
                default: break; // disabled parity
        }

        // assign the baud_setting, a.k.a. ubbr ( USART Baud Rate Register )
	*_ubrrh = baud_setting >> 8;
    7876:	e8 89       	ldd	r30, Y+16	; 0x10
    7878:	f9 89       	ldd	r31, Y+17	; 0x11
    787a:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    787c:	ea 89       	ldd	r30, Y+18	; 0x12
    787e:	fb 89       	ldd	r31, Y+19	; 0x13
    7880:	20 83       	st	Z, r18

        // enable the serial recieve pin, transmit pin, and recieve interrupt
        *_ucsrb |= (1 << _rxen);
    7882:	ee 89       	ldd	r30, Y+22	; 0x16
    7884:	ff 89       	ldd	r31, Y+23	; 0x17
    7886:	50 81       	ld	r21, Z
    7888:	81 e0       	ldi	r24, 0x01	; 1
    788a:	90 e0       	ldi	r25, 0x00	; 0
    788c:	9c 01       	movw	r18, r24
    788e:	0c 8c       	ldd	r0, Y+28	; 0x1c
    7890:	02 c0       	rjmp	.+4      	; 0x7896 <_ZN14HardwareSerial5beginEmhhh+0x156>
    7892:	22 0f       	add	r18, r18
    7894:	33 1f       	adc	r19, r19
    7896:	0a 94       	dec	r0
    7898:	e2 f7       	brpl	.-8      	; 0x7892 <_ZN14HardwareSerial5beginEmhhh+0x152>
    789a:	52 2b       	or	r21, r18
    789c:	50 83       	st	Z, r21
	*_ucsrb |= (1 << _txen) ;
    789e:	ee 89       	ldd	r30, Y+22	; 0x16
    78a0:	ff 89       	ldd	r31, Y+23	; 0x17
    78a2:	50 81       	ld	r21, Z
    78a4:	9c 01       	movw	r18, r24
    78a6:	0d 8c       	ldd	r0, Y+29	; 0x1d
    78a8:	02 c0       	rjmp	.+4      	; 0x78ae <_ZN14HardwareSerial5beginEmhhh+0x16e>
    78aa:	22 0f       	add	r18, r18
    78ac:	33 1f       	adc	r19, r19
    78ae:	0a 94       	dec	r0
    78b0:	e2 f7       	brpl	.-8      	; 0x78aa <_ZN14HardwareSerial5beginEmhhh+0x16a>
    78b2:	52 2b       	or	r21, r18
    78b4:	50 83       	st	Z, r21
	*_ucsrb |= (1 << _rxcie);
    78b6:	ee 89       	ldd	r30, Y+22	; 0x16
    78b8:	ff 89       	ldd	r31, Y+23	; 0x17
    78ba:	50 81       	ld	r21, Z
    78bc:	9c 01       	movw	r18, r24
    78be:	0e 8c       	ldd	r0, Y+30	; 0x1e
    78c0:	02 c0       	rjmp	.+4      	; 0x78c6 <_ZN14HardwareSerial5beginEmhhh+0x186>
    78c2:	22 0f       	add	r18, r18
    78c4:	33 1f       	adc	r19, r19
    78c6:	0a 94       	dec	r0
    78c8:	e2 f7       	brpl	.-8      	; 0x78c2 <_ZN14HardwareSerial5beginEmhhh+0x182>
    78ca:	52 2b       	or	r21, r18
    78cc:	50 83       	st	Z, r21

        // Set frame format
        *_ucsrc = frame_format;
    78ce:	e8 8d       	ldd	r30, Y+24	; 0x18
    78d0:	f9 8d       	ldd	r31, Y+25	; 0x19
    78d2:	40 83       	st	Z, r20
}
    78d4:	df 91       	pop	r29
    78d6:	cf 91       	pop	r28
    78d8:	1f 91       	pop	r17
    78da:	0f 91       	pop	r16
    78dc:	ff 90       	pop	r15
    78de:	ef 90       	pop	r14
    78e0:	df 90       	pop	r13
    78e2:	cf 90       	pop	r12
    78e4:	bf 90       	pop	r11
    78e6:	af 90       	pop	r10
    78e8:	08 95       	ret

000078ea <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
    78ea:	cf 93       	push	r28
    78ec:	df 93       	push	r29
    78ee:	fc 01       	movw	r30, r24
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    78f0:	86 85       	ldd	r24, Z+14	; 0x0e
    78f2:	97 85       	ldd	r25, Z+15	; 0x0f
    78f4:	dc 01       	movw	r26, r24
    78f6:	a0 5c       	subi	r26, 0xC0	; 192
    78f8:	bf 4f       	sbci	r27, 0xFF	; 255
    78fa:	8e 5b       	subi	r24, 0xBE	; 190
    78fc:	9f 4f       	sbci	r25, 0xFF	; 255
    78fe:	4d 91       	ld	r20, X+
    7900:	5c 91       	ld	r21, X
    7902:	11 97       	sbiw	r26, 0x01	; 1
    7904:	ec 01       	movw	r28, r24
    7906:	28 81       	ld	r18, Y
    7908:	39 81       	ldd	r19, Y+1	; 0x01
    790a:	42 17       	cp	r20, r18
    790c:	53 07       	cpc	r21, r19
    790e:	b9 f7       	brne	.-18     	; 0x78fe <_ZN14HardwareSerial3endEv+0x14>
    ;

  cbi(*_ucsrb, _rxen);
    7910:	a6 89       	ldd	r26, Z+22	; 0x16
    7912:	b7 89       	ldd	r27, Z+23	; 0x17
    7914:	4c 91       	ld	r20, X
    7916:	81 e0       	ldi	r24, 0x01	; 1
    7918:	90 e0       	ldi	r25, 0x00	; 0
    791a:	9c 01       	movw	r18, r24
    791c:	04 8c       	ldd	r0, Z+28	; 0x1c
    791e:	02 c0       	rjmp	.+4      	; 0x7924 <_ZN14HardwareSerial3endEv+0x3a>
    7920:	22 0f       	add	r18, r18
    7922:	33 1f       	adc	r19, r19
    7924:	0a 94       	dec	r0
    7926:	e2 f7       	brpl	.-8      	; 0x7920 <_ZN14HardwareSerial3endEv+0x36>
    7928:	20 95       	com	r18
    792a:	24 23       	and	r18, r20
    792c:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
    792e:	a6 89       	ldd	r26, Z+22	; 0x16
    7930:	b7 89       	ldd	r27, Z+23	; 0x17
    7932:	4c 91       	ld	r20, X
    7934:	9c 01       	movw	r18, r24
    7936:	05 8c       	ldd	r0, Z+29	; 0x1d
    7938:	02 c0       	rjmp	.+4      	; 0x793e <_ZN14HardwareSerial3endEv+0x54>
    793a:	22 0f       	add	r18, r18
    793c:	33 1f       	adc	r19, r19
    793e:	0a 94       	dec	r0
    7940:	e2 f7       	brpl	.-8      	; 0x793a <_ZN14HardwareSerial3endEv+0x50>
    7942:	20 95       	com	r18
    7944:	24 23       	and	r18, r20
    7946:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
    7948:	a6 89       	ldd	r26, Z+22	; 0x16
    794a:	b7 89       	ldd	r27, Z+23	; 0x17
    794c:	4c 91       	ld	r20, X
    794e:	9c 01       	movw	r18, r24
    7950:	06 8c       	ldd	r0, Z+30	; 0x1e
    7952:	02 c0       	rjmp	.+4      	; 0x7958 <_ZN14HardwareSerial3endEv+0x6e>
    7954:	22 0f       	add	r18, r18
    7956:	33 1f       	adc	r19, r19
    7958:	0a 94       	dec	r0
    795a:	e2 f7       	brpl	.-8      	; 0x7954 <_ZN14HardwareSerial3endEv+0x6a>
    795c:	20 95       	com	r18
    795e:	24 23       	and	r18, r20
    7960:	2c 93       	st	X, r18
  cbi(*_ucsrb, _udrie);
    7962:	a6 89       	ldd	r26, Z+22	; 0x16
    7964:	b7 89       	ldd	r27, Z+23	; 0x17
    7966:	2c 91       	ld	r18, X
    7968:	07 8c       	ldd	r0, Z+31	; 0x1f
    796a:	02 c0       	rjmp	.+4      	; 0x7970 <_ZN14HardwareSerial3endEv+0x86>
    796c:	88 0f       	add	r24, r24
    796e:	99 1f       	adc	r25, r25
    7970:	0a 94       	dec	r0
    7972:	e2 f7       	brpl	.-8      	; 0x796c <_ZN14HardwareSerial3endEv+0x82>
    7974:	80 95       	com	r24
    7976:	82 23       	and	r24, r18
    7978:	8c 93       	st	X, r24
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    797a:	84 85       	ldd	r24, Z+12	; 0x0c
    797c:	95 85       	ldd	r25, Z+13	; 0x0d
    797e:	fc 01       	movw	r30, r24
    7980:	ee 5b       	subi	r30, 0xBE	; 190
    7982:	ff 4f       	sbci	r31, 0xFF	; 255
    7984:	20 81       	ld	r18, Z
    7986:	31 81       	ldd	r19, Z+1	; 0x01
    7988:	80 5c       	subi	r24, 0xC0	; 192
    798a:	9f 4f       	sbci	r25, 0xFF	; 255
    798c:	fc 01       	movw	r30, r24
    798e:	31 83       	std	Z+1, r19	; 0x01
    7990:	20 83       	st	Z, r18
}
    7992:	df 91       	pop	r29
    7994:	cf 91       	pop	r28
    7996:	08 95       	ret

00007998 <_GLOBAL__I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2, UCSZ20, UPM20, USBS2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3, UCSZ30, UPM30, USBS3);
    7998:	1f 93       	push	r17
    799a:	cf 93       	push	r28
    799c:	df 93       	push	r29
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    799e:	10 92 2a 0e 	sts	0x0E2A, r1
    79a2:	10 92 29 0e 	sts	0x0E29, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    79a6:	88 ee       	ldi	r24, 0xE8	; 232
    79a8:	93 e0       	ldi	r25, 0x03	; 3
    79aa:	a0 e0       	ldi	r26, 0x00	; 0
    79ac:	b0 e0       	ldi	r27, 0x00	; 0
    79ae:	80 93 2b 0e 	sts	0x0E2B, r24
    79b2:	90 93 2c 0e 	sts	0x0E2C, r25
    79b6:	a0 93 2d 0e 	sts	0x0E2D, r26
    79ba:	b0 93 2e 0e 	sts	0x0E2E, r27
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,volatile uint8_t *ucsrc,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x,
  uint8_t ucsz0,
  uint8_t upm0,
  uint8_t usbs)
    79be:	e9 e2       	ldi	r30, 0x29	; 41
    79c0:	fe e0       	ldi	r31, 0x0E	; 14
    79c2:	22 e6       	ldi	r18, 0x62	; 98
    79c4:	37 e0       	ldi	r19, 0x07	; 7
    79c6:	32 93       	st	-Z, r19
    79c8:	22 93       	st	-Z, r18
{
  _rx_buffer = rx_buffer;
    79ca:	47 e0       	ldi	r20, 0x07	; 7
    79cc:	5c e0       	ldi	r21, 0x0C	; 12
    79ce:	55 87       	std	Z+13, r21	; 0x0d
    79d0:	44 87       	std	Z+12, r20	; 0x0c
  _tx_buffer = tx_buffer;
    79d2:	4b e4       	ldi	r20, 0x4B	; 75
    79d4:	5c e0       	ldi	r21, 0x0C	; 12
    79d6:	57 87       	std	Z+15, r21	; 0x0f
    79d8:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
    79da:	45 ec       	ldi	r20, 0xC5	; 197
    79dc:	50 e0       	ldi	r21, 0x00	; 0
    79de:	51 8b       	std	Z+17, r21	; 0x11
    79e0:	40 8b       	std	Z+16, r20	; 0x10
  _ubrrl = ubrrl;
    79e2:	44 ec       	ldi	r20, 0xC4	; 196
    79e4:	50 e0       	ldi	r21, 0x00	; 0
    79e6:	53 8b       	std	Z+19, r21	; 0x13
    79e8:	42 8b       	std	Z+18, r20	; 0x12
  _ucsra = ucsra;
    79ea:	40 ec       	ldi	r20, 0xC0	; 192
    79ec:	50 e0       	ldi	r21, 0x00	; 0
    79ee:	55 8b       	std	Z+21, r21	; 0x15
    79f0:	44 8b       	std	Z+20, r20	; 0x14
  _ucsrb = ucsrb;
    79f2:	41 ec       	ldi	r20, 0xC1	; 193
    79f4:	50 e0       	ldi	r21, 0x00	; 0
    79f6:	57 8b       	std	Z+23, r21	; 0x17
    79f8:	46 8b       	std	Z+22, r20	; 0x16
  _ucsrc = ucsrc;
    79fa:	42 ec       	ldi	r20, 0xC2	; 194
    79fc:	50 e0       	ldi	r21, 0x00	; 0
    79fe:	51 8f       	std	Z+25, r21	; 0x19
    7a00:	40 8f       	std	Z+24, r20	; 0x18
  _udr = udr;
    7a02:	46 ec       	ldi	r20, 0xC6	; 198
    7a04:	50 e0       	ldi	r21, 0x00	; 0
    7a06:	53 8f       	std	Z+27, r21	; 0x1b
    7a08:	42 8f       	std	Z+26, r20	; 0x1a
  _rxen = rxen;
    7a0a:	54 e0       	ldi	r21, 0x04	; 4
    7a0c:	54 8f       	std	Z+28, r21	; 0x1c
  _txen = txen;
    7a0e:	43 e0       	ldi	r20, 0x03	; 3
    7a10:	45 8f       	std	Z+29, r20	; 0x1d
  _rxcie = rxcie;
    7a12:	17 e0       	ldi	r17, 0x07	; 7
    7a14:	16 8f       	std	Z+30, r17	; 0x1e
  _udrie = udrie;
    7a16:	75 e0       	ldi	r23, 0x05	; 5
    7a18:	77 8f       	std	Z+31, r23	; 0x1f
  _u2x = u2x;
    7a1a:	61 e0       	ldi	r22, 0x01	; 1
    7a1c:	60 a3       	std	Z+32, r22	; 0x20
  _ucsz0 = ucsz0;
    7a1e:	61 a3       	std	Z+33, r22	; 0x21
  _upm0 = upm0;
    7a20:	52 a3       	std	Z+34, r21	; 0x22
  _usbs = usbs;
    7a22:	43 a3       	std	Z+35, r20	; 0x23
    7a24:	10 92 4e 0e 	sts	0x0E4E, r1
    7a28:	10 92 4d 0e 	sts	0x0E4D, r1
    7a2c:	80 93 4f 0e 	sts	0x0E4F, r24
    7a30:	90 93 50 0e 	sts	0x0E50, r25
    7a34:	a0 93 51 0e 	sts	0x0E51, r26
    7a38:	b0 93 52 0e 	sts	0x0E52, r27
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,volatile uint8_t *ucsrc,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x,
  uint8_t ucsz0,
  uint8_t upm0,
  uint8_t usbs)
    7a3c:	ed e4       	ldi	r30, 0x4D	; 77
    7a3e:	fe e0       	ldi	r31, 0x0E	; 14
    7a40:	32 93       	st	-Z, r19
    7a42:	22 93       	st	-Z, r18
{
  _rx_buffer = rx_buffer;
    7a44:	cf e8       	ldi	r28, 0x8F	; 143
    7a46:	dc e0       	ldi	r29, 0x0C	; 12
    7a48:	d5 87       	std	Z+13, r29	; 0x0d
    7a4a:	c4 87       	std	Z+12, r28	; 0x0c
  _tx_buffer = tx_buffer;
    7a4c:	c3 ed       	ldi	r28, 0xD3	; 211
    7a4e:	dc e0       	ldi	r29, 0x0C	; 12
    7a50:	d7 87       	std	Z+15, r29	; 0x0f
    7a52:	c6 87       	std	Z+14, r28	; 0x0e
  _ubrrh = ubrrh;
    7a54:	cd ec       	ldi	r28, 0xCD	; 205
    7a56:	d0 e0       	ldi	r29, 0x00	; 0
    7a58:	d1 8b       	std	Z+17, r29	; 0x11
    7a5a:	c0 8b       	std	Z+16, r28	; 0x10
  _ubrrl = ubrrl;
    7a5c:	cc ec       	ldi	r28, 0xCC	; 204
    7a5e:	d0 e0       	ldi	r29, 0x00	; 0
    7a60:	d3 8b       	std	Z+19, r29	; 0x13
    7a62:	c2 8b       	std	Z+18, r28	; 0x12
  _ucsra = ucsra;
    7a64:	c8 ec       	ldi	r28, 0xC8	; 200
    7a66:	d0 e0       	ldi	r29, 0x00	; 0
    7a68:	d5 8b       	std	Z+21, r29	; 0x15
    7a6a:	c4 8b       	std	Z+20, r28	; 0x14
  _ucsrb = ucsrb;
    7a6c:	c9 ec       	ldi	r28, 0xC9	; 201
    7a6e:	d0 e0       	ldi	r29, 0x00	; 0
    7a70:	d7 8b       	std	Z+23, r29	; 0x17
    7a72:	c6 8b       	std	Z+22, r28	; 0x16
  _ucsrc = ucsrc;
    7a74:	ca ec       	ldi	r28, 0xCA	; 202
    7a76:	d0 e0       	ldi	r29, 0x00	; 0
    7a78:	d1 8f       	std	Z+25, r29	; 0x19
    7a7a:	c0 8f       	std	Z+24, r28	; 0x18
  _udr = udr;
    7a7c:	ce ec       	ldi	r28, 0xCE	; 206
    7a7e:	d0 e0       	ldi	r29, 0x00	; 0
    7a80:	d3 8f       	std	Z+27, r29	; 0x1b
    7a82:	c2 8f       	std	Z+26, r28	; 0x1a
  _rxen = rxen;
    7a84:	54 8f       	std	Z+28, r21	; 0x1c
  _txen = txen;
    7a86:	45 8f       	std	Z+29, r20	; 0x1d
  _rxcie = rxcie;
    7a88:	16 8f       	std	Z+30, r17	; 0x1e
  _udrie = udrie;
    7a8a:	77 8f       	std	Z+31, r23	; 0x1f
  _u2x = u2x;
    7a8c:	60 a3       	std	Z+32, r22	; 0x20
  _ucsz0 = ucsz0;
    7a8e:	61 a3       	std	Z+33, r22	; 0x21
  _upm0 = upm0;
    7a90:	52 a3       	std	Z+34, r21	; 0x22
  _usbs = usbs;
    7a92:	43 a3       	std	Z+35, r20	; 0x23
    7a94:	10 92 72 0e 	sts	0x0E72, r1
    7a98:	10 92 71 0e 	sts	0x0E71, r1
    7a9c:	80 93 73 0e 	sts	0x0E73, r24
    7aa0:	90 93 74 0e 	sts	0x0E74, r25
    7aa4:	a0 93 75 0e 	sts	0x0E75, r26
    7aa8:	b0 93 76 0e 	sts	0x0E76, r27
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,volatile uint8_t *ucsrc,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x,
  uint8_t ucsz0,
  uint8_t upm0,
  uint8_t usbs)
    7aac:	e1 e7       	ldi	r30, 0x71	; 113
    7aae:	fe e0       	ldi	r31, 0x0E	; 14
    7ab0:	32 93       	st	-Z, r19
    7ab2:	22 93       	st	-Z, r18
{
  _rx_buffer = rx_buffer;
    7ab4:	c7 e1       	ldi	r28, 0x17	; 23
    7ab6:	dd e0       	ldi	r29, 0x0D	; 13
    7ab8:	d5 87       	std	Z+13, r29	; 0x0d
    7aba:	c4 87       	std	Z+12, r28	; 0x0c
  _tx_buffer = tx_buffer;
    7abc:	cb e5       	ldi	r28, 0x5B	; 91
    7abe:	dd e0       	ldi	r29, 0x0D	; 13
    7ac0:	d7 87       	std	Z+15, r29	; 0x0f
    7ac2:	c6 87       	std	Z+14, r28	; 0x0e
  _ubrrh = ubrrh;
    7ac4:	c5 ed       	ldi	r28, 0xD5	; 213
    7ac6:	d0 e0       	ldi	r29, 0x00	; 0
    7ac8:	d1 8b       	std	Z+17, r29	; 0x11
    7aca:	c0 8b       	std	Z+16, r28	; 0x10
  _ubrrl = ubrrl;
    7acc:	c4 ed       	ldi	r28, 0xD4	; 212
    7ace:	d0 e0       	ldi	r29, 0x00	; 0
    7ad0:	d3 8b       	std	Z+19, r29	; 0x13
    7ad2:	c2 8b       	std	Z+18, r28	; 0x12
  _ucsra = ucsra;
    7ad4:	c0 ed       	ldi	r28, 0xD0	; 208
    7ad6:	d0 e0       	ldi	r29, 0x00	; 0
    7ad8:	d5 8b       	std	Z+21, r29	; 0x15
    7ada:	c4 8b       	std	Z+20, r28	; 0x14
  _ucsrb = ucsrb;
    7adc:	c1 ed       	ldi	r28, 0xD1	; 209
    7ade:	d0 e0       	ldi	r29, 0x00	; 0
    7ae0:	d7 8b       	std	Z+23, r29	; 0x17
    7ae2:	c6 8b       	std	Z+22, r28	; 0x16
  _ucsrc = ucsrc;
    7ae4:	c2 ed       	ldi	r28, 0xD2	; 210
    7ae6:	d0 e0       	ldi	r29, 0x00	; 0
    7ae8:	d1 8f       	std	Z+25, r29	; 0x19
    7aea:	c0 8f       	std	Z+24, r28	; 0x18
  _udr = udr;
    7aec:	c6 ed       	ldi	r28, 0xD6	; 214
    7aee:	d0 e0       	ldi	r29, 0x00	; 0
    7af0:	d3 8f       	std	Z+27, r29	; 0x1b
    7af2:	c2 8f       	std	Z+26, r28	; 0x1a
  _rxen = rxen;
    7af4:	54 8f       	std	Z+28, r21	; 0x1c
  _txen = txen;
    7af6:	45 8f       	std	Z+29, r20	; 0x1d
  _rxcie = rxcie;
    7af8:	16 8f       	std	Z+30, r17	; 0x1e
  _udrie = udrie;
    7afa:	77 8f       	std	Z+31, r23	; 0x1f
  _u2x = u2x;
    7afc:	60 a3       	std	Z+32, r22	; 0x20
  _ucsz0 = ucsz0;
    7afe:	61 a3       	std	Z+33, r22	; 0x21
  _upm0 = upm0;
    7b00:	52 a3       	std	Z+34, r21	; 0x22
  _usbs = usbs;
    7b02:	43 a3       	std	Z+35, r20	; 0x23
    7b04:	10 92 96 0e 	sts	0x0E96, r1
    7b08:	10 92 95 0e 	sts	0x0E95, r1
    7b0c:	80 93 97 0e 	sts	0x0E97, r24
    7b10:	90 93 98 0e 	sts	0x0E98, r25
    7b14:	a0 93 99 0e 	sts	0x0E99, r26
    7b18:	b0 93 9a 0e 	sts	0x0E9A, r27
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,volatile uint8_t *ucsrc,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x,
  uint8_t ucsz0,
  uint8_t upm0,
  uint8_t usbs)
    7b1c:	e5 e9       	ldi	r30, 0x95	; 149
    7b1e:	fe e0       	ldi	r31, 0x0E	; 14
    7b20:	32 93       	st	-Z, r19
    7b22:	22 93       	st	-Z, r18
{
  _rx_buffer = rx_buffer;
    7b24:	8f e9       	ldi	r24, 0x9F	; 159
    7b26:	9d e0       	ldi	r25, 0x0D	; 13
    7b28:	95 87       	std	Z+13, r25	; 0x0d
    7b2a:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
    7b2c:	83 ee       	ldi	r24, 0xE3	; 227
    7b2e:	9d e0       	ldi	r25, 0x0D	; 13
    7b30:	97 87       	std	Z+15, r25	; 0x0f
    7b32:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
    7b34:	85 e3       	ldi	r24, 0x35	; 53
    7b36:	91 e0       	ldi	r25, 0x01	; 1
    7b38:	91 8b       	std	Z+17, r25	; 0x11
    7b3a:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
    7b3c:	84 e3       	ldi	r24, 0x34	; 52
    7b3e:	91 e0       	ldi	r25, 0x01	; 1
    7b40:	93 8b       	std	Z+19, r25	; 0x13
    7b42:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
    7b44:	80 e3       	ldi	r24, 0x30	; 48
    7b46:	91 e0       	ldi	r25, 0x01	; 1
    7b48:	95 8b       	std	Z+21, r25	; 0x15
    7b4a:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
    7b4c:	81 e3       	ldi	r24, 0x31	; 49
    7b4e:	91 e0       	ldi	r25, 0x01	; 1
    7b50:	97 8b       	std	Z+23, r25	; 0x17
    7b52:	86 8b       	std	Z+22, r24	; 0x16
  _ucsrc = ucsrc;
    7b54:	82 e3       	ldi	r24, 0x32	; 50
    7b56:	91 e0       	ldi	r25, 0x01	; 1
    7b58:	91 8f       	std	Z+25, r25	; 0x19
    7b5a:	80 8f       	std	Z+24, r24	; 0x18
  _udr = udr;
    7b5c:	86 e3       	ldi	r24, 0x36	; 54
    7b5e:	91 e0       	ldi	r25, 0x01	; 1
    7b60:	93 8f       	std	Z+27, r25	; 0x1b
    7b62:	82 8f       	std	Z+26, r24	; 0x1a
  _rxen = rxen;
    7b64:	54 8f       	std	Z+28, r21	; 0x1c
  _txen = txen;
    7b66:	45 8f       	std	Z+29, r20	; 0x1d
  _rxcie = rxcie;
    7b68:	16 8f       	std	Z+30, r17	; 0x1e
  _udrie = udrie;
    7b6a:	77 8f       	std	Z+31, r23	; 0x1f
  _u2x = u2x;
    7b6c:	60 a3       	std	Z+32, r22	; 0x20
  _ucsz0 = ucsz0;
    7b6e:	61 a3       	std	Z+33, r22	; 0x21
  _upm0 = upm0;
    7b70:	52 a3       	std	Z+34, r21	; 0x22
  _usbs = usbs;
    7b72:	43 a3       	std	Z+35, r20	; 0x23
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2, UCSZ20, UPM20, USBS2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3, UCSZ30, UPM30, USBS3);
    7b74:	df 91       	pop	r29
    7b76:	cf 91       	pop	r28
    7b78:	1f 91       	pop	r17
    7b7a:	08 95       	ret

00007b7c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    7b7c:	cf 92       	push	r12
    7b7e:	df 92       	push	r13
    7b80:	ef 92       	push	r14
    7b82:	ff 92       	push	r15
    7b84:	0f 93       	push	r16
    7b86:	1f 93       	push	r17
    7b88:	cf 93       	push	r28
    7b8a:	df 93       	push	r29
    7b8c:	6c 01       	movw	r12, r24
    7b8e:	7b 01       	movw	r14, r22
    7b90:	8a 01       	movw	r16, r20
  size_t n = 0;
    7b92:	c0 e0       	ldi	r28, 0x00	; 0
    7b94:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    7b96:	0f c0       	rjmp	.+30     	; 0x7bb6 <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
    7b98:	d7 01       	movw	r26, r14
    7b9a:	6d 91       	ld	r22, X+
    7b9c:	7d 01       	movw	r14, r26
    7b9e:	d6 01       	movw	r26, r12
    7ba0:	ed 91       	ld	r30, X+
    7ba2:	fc 91       	ld	r31, X
    7ba4:	01 90       	ld	r0, Z+
    7ba6:	f0 81       	ld	r31, Z
    7ba8:	e0 2d       	mov	r30, r0
    7baa:	c6 01       	movw	r24, r12
    7bac:	09 95       	icall
    7bae:	c8 0f       	add	r28, r24
    7bb0:	d9 1f       	adc	r29, r25
    7bb2:	01 50       	subi	r16, 0x01	; 1
    7bb4:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    7bb6:	01 15       	cp	r16, r1
    7bb8:	11 05       	cpc	r17, r1
    7bba:	71 f7       	brne	.-36     	; 0x7b98 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    7bbc:	ce 01       	movw	r24, r28
    7bbe:	df 91       	pop	r29
    7bc0:	cf 91       	pop	r28
    7bc2:	1f 91       	pop	r17
    7bc4:	0f 91       	pop	r16
    7bc6:	ff 90       	pop	r15
    7bc8:	ef 90       	pop	r14
    7bca:	df 90       	pop	r13
    7bcc:	cf 90       	pop	r12
    7bce:	08 95       	ret

00007bd0 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    7bd0:	db 01       	movw	r26, r22
    7bd2:	0d 90       	ld	r0, X+
    7bd4:	00 20       	and	r0, r0
    7bd6:	e9 f7       	brne	.-6      	; 0x7bd2 <_ZN5Print5writeEPKc+0x2>
    7bd8:	ad 01       	movw	r20, r26
    7bda:	41 50       	subi	r20, 0x01	; 1
    7bdc:	50 40       	sbci	r21, 0x00	; 0
    7bde:	46 1b       	sub	r20, r22
    7be0:	57 0b       	sbc	r21, r23
    7be2:	dc 01       	movw	r26, r24
    7be4:	ed 91       	ld	r30, X+
    7be6:	fc 91       	ld	r31, X
    7be8:	02 80       	ldd	r0, Z+2	; 0x02
    7bea:	f3 81       	ldd	r31, Z+3	; 0x03
    7bec:	e0 2d       	mov	r30, r0
    7bee:	09 95       	icall
    7bf0:	08 95       	ret

00007bf2 <_ZN5Print5printEPKc>:
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    7bf2:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <_ZN5Print5writeEPKc>
    size_t println(const char[]);
    7bf6:	08 95       	ret

00007bf8 <_ZN5Print5printEc>:
    size_t println(char);
    size_t println(unsigned char, int = DEC);
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
    7bf8:	dc 01       	movw	r26, r24
    7bfa:	ed 91       	ld	r30, X+
    7bfc:	fc 91       	ld	r31, X
    7bfe:	01 90       	ld	r0, Z+
    7c00:	f0 81       	ld	r31, Z
    7c02:	e0 2d       	mov	r30, r0
    7c04:	09 95       	icall
    size_t println(long, int = DEC);
    7c06:	08 95       	ret

00007c08 <_ZN5Print7printlnEv>:
    7c08:	0f 93       	push	r16
    7c0a:	1f 93       	push	r17
    7c0c:	cf 93       	push	r28
    7c0e:	df 93       	push	r29
    7c10:	ec 01       	movw	r28, r24
    7c12:	6d e0       	ldi	r22, 0x0D	; 13
    7c14:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZN5Print5printEc>
    7c18:	8c 01       	movw	r16, r24
    7c1a:	ce 01       	movw	r24, r28
    7c1c:	6a e0       	ldi	r22, 0x0A	; 10
    7c1e:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZN5Print5printEc>
    7c22:	08 0f       	add	r16, r24
    7c24:	19 1f       	adc	r17, r25
    7c26:	c8 01       	movw	r24, r16
    7c28:	df 91       	pop	r29
    7c2a:	cf 91       	pop	r28
    7c2c:	1f 91       	pop	r17
    7c2e:	0f 91       	pop	r16
    7c30:	08 95       	ret

00007c32 <_ZN5Print7printlnEPKc>:
    7c32:	0f 93       	push	r16
    7c34:	1f 93       	push	r17
    7c36:	cf 93       	push	r28
    7c38:	df 93       	push	r29
    7c3a:	ec 01       	movw	r28, r24
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    7c3c:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <_ZN5Print5writeEPKc>
    7c40:	8c 01       	movw	r16, r24
    7c42:	ce 01       	movw	r24, r28
    7c44:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <_ZN5Print7printlnEv>
    7c48:	08 0f       	add	r16, r24
    7c4a:	19 1f       	adc	r17, r25
    7c4c:	c8 01       	movw	r24, r16
    7c4e:	df 91       	pop	r29
    7c50:	cf 91       	pop	r28
    7c52:	1f 91       	pop	r17
    7c54:	0f 91       	pop	r16
    7c56:	08 95       	ret

00007c58 <_ZN5Print11printNumberEmh>:
    7c58:	8f 92       	push	r8
    7c5a:	9f 92       	push	r9
    7c5c:	af 92       	push	r10
    7c5e:	bf 92       	push	r11
    7c60:	cf 92       	push	r12
    7c62:	df 92       	push	r13
    7c64:	ef 92       	push	r14
    7c66:	ff 92       	push	r15
    7c68:	0f 93       	push	r16
    7c6a:	1f 93       	push	r17
    7c6c:	df 93       	push	r29
    7c6e:	cf 93       	push	r28
    7c70:	cd b7       	in	r28, 0x3d	; 61
    7c72:	de b7       	in	r29, 0x3e	; 62
    7c74:	a1 97       	sbiw	r28, 0x21	; 33
    7c76:	0f b6       	in	r0, 0x3f	; 63
    7c78:	f8 94       	cli
    7c7a:	de bf       	out	0x3e, r29	; 62
    7c7c:	0f be       	out	0x3f, r0	; 63
    7c7e:	cd bf       	out	0x3d, r28	; 61
    7c80:	6c 01       	movw	r12, r24
    7c82:	04 2f       	mov	r16, r20
    7c84:	e5 2f       	mov	r30, r21
    7c86:	cb 01       	movw	r24, r22
    7c88:	12 2f       	mov	r17, r18
    7c8a:	19 a2       	std	Y+33, r1	; 0x21
    7c8c:	22 30       	cpi	r18, 0x02	; 2
    7c8e:	08 f4       	brcc	.+2      	; 0x7c92 <_ZN5Print11printNumberEmh+0x3a>
    7c90:	1a e0       	ldi	r17, 0x0A	; 10
    7c92:	21 e2       	ldi	r18, 0x21	; 33
    7c94:	e2 2e       	mov	r14, r18
    7c96:	f1 2c       	mov	r15, r1
    7c98:	ec 0e       	add	r14, r28
    7c9a:	fd 1e       	adc	r15, r29
    7c9c:	81 2e       	mov	r8, r17
    7c9e:	99 24       	eor	r9, r9
    7ca0:	aa 24       	eor	r10, r10
    7ca2:	bb 24       	eor	r11, r11
    7ca4:	03 c0       	rjmp	.+6      	; 0x7cac <_ZN5Print11printNumberEmh+0x54>
    7ca6:	02 2f       	mov	r16, r18
    7ca8:	e3 2f       	mov	r30, r19
    7caa:	ca 01       	movw	r24, r20
    7cac:	60 2f       	mov	r22, r16
    7cae:	7e 2f       	mov	r23, r30
    7cb0:	a5 01       	movw	r20, r10
    7cb2:	94 01       	movw	r18, r8
    7cb4:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <__udivmodsi4>
    7cb8:	12 9f       	mul	r17, r18
    7cba:	80 2d       	mov	r24, r0
    7cbc:	11 24       	eor	r1, r1
    7cbe:	08 1b       	sub	r16, r24
    7cc0:	08 94       	sec
    7cc2:	e1 08       	sbc	r14, r1
    7cc4:	f1 08       	sbc	r15, r1
    7cc6:	0a 30       	cpi	r16, 0x0A	; 10
    7cc8:	14 f4       	brge	.+4      	; 0x7cce <_ZN5Print11printNumberEmh+0x76>
    7cca:	00 5d       	subi	r16, 0xD0	; 208
    7ccc:	01 c0       	rjmp	.+2      	; 0x7cd0 <_ZN5Print11printNumberEmh+0x78>
    7cce:	09 5c       	subi	r16, 0xC9	; 201
    7cd0:	f7 01       	movw	r30, r14
    7cd2:	00 83       	st	Z, r16
    7cd4:	21 15       	cp	r18, r1
    7cd6:	31 05       	cpc	r19, r1
    7cd8:	41 05       	cpc	r20, r1
    7cda:	51 05       	cpc	r21, r1
    7cdc:	21 f7       	brne	.-56     	; 0x7ca6 <_ZN5Print11printNumberEmh+0x4e>
    7cde:	c6 01       	movw	r24, r12
    7ce0:	b7 01       	movw	r22, r14
    7ce2:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <_ZN5Print5writeEPKc>
    7ce6:	a1 96       	adiw	r28, 0x21	; 33
    7ce8:	0f b6       	in	r0, 0x3f	; 63
    7cea:	f8 94       	cli
    7cec:	de bf       	out	0x3e, r29	; 62
    7cee:	0f be       	out	0x3f, r0	; 63
    7cf0:	cd bf       	out	0x3d, r28	; 61
    7cf2:	cf 91       	pop	r28
    7cf4:	df 91       	pop	r29
    7cf6:	1f 91       	pop	r17
    7cf8:	0f 91       	pop	r16
    7cfa:	ff 90       	pop	r15
    7cfc:	ef 90       	pop	r14
    7cfe:	df 90       	pop	r13
    7d00:	cf 90       	pop	r12
    7d02:	bf 90       	pop	r11
    7d04:	af 90       	pop	r10
    7d06:	9f 90       	pop	r9
    7d08:	8f 90       	pop	r8
    7d0a:	08 95       	ret

00007d0c <_ZN5Print5printEmi>:
    7d0c:	21 15       	cp	r18, r1
    7d0e:	31 05       	cpc	r19, r1
    7d10:	49 f4       	brne	.+18     	; 0x7d24 <_ZN5Print5printEmi+0x18>
    7d12:	dc 01       	movw	r26, r24
    7d14:	ed 91       	ld	r30, X+
    7d16:	fc 91       	ld	r31, X
    7d18:	01 90       	ld	r0, Z+
    7d1a:	f0 81       	ld	r31, Z
    7d1c:	e0 2d       	mov	r30, r0
    7d1e:	64 2f       	mov	r22, r20
    7d20:	09 95       	icall
    7d22:	08 95       	ret
    7d24:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <_ZN5Print11printNumberEmh>
    7d28:	08 95       	ret

00007d2a <_ZN5Print5printEji>:
    7d2a:	9a 01       	movw	r18, r20
    7d2c:	ab 01       	movw	r20, r22
    7d2e:	60 e0       	ldi	r22, 0x00	; 0
    7d30:	70 e0       	ldi	r23, 0x00	; 0
    7d32:	0e 94 86 3e 	call	0x7d0c	; 0x7d0c <_ZN5Print5printEmi>
    7d36:	08 95       	ret

00007d38 <_ZN5Print5printEhi>:
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
    size_t println(long, int = DEC);
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    7d38:	9a 01       	movw	r18, r20
    size_t println(void);
    7d3a:	46 2f       	mov	r20, r22
    7d3c:	50 e0       	ldi	r21, 0x00	; 0
    7d3e:	60 e0       	ldi	r22, 0x00	; 0
    7d40:	70 e0       	ldi	r23, 0x00	; 0
    7d42:	0e 94 86 3e 	call	0x7d0c	; 0x7d0c <_ZN5Print5printEmi>
};
    7d46:	08 95       	ret

00007d48 <_ZN5Print7printlnEhi>:
    7d48:	0f 93       	push	r16
    7d4a:	1f 93       	push	r17
    7d4c:	cf 93       	push	r28
    7d4e:	df 93       	push	r29
    7d50:	ec 01       	movw	r28, r24
    7d52:	9a 01       	movw	r18, r20
    size_t println(unsigned int, int = DEC);
    size_t println(long, int = DEC);
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    7d54:	46 2f       	mov	r20, r22
    7d56:	50 e0       	ldi	r21, 0x00	; 0
    7d58:	60 e0       	ldi	r22, 0x00	; 0
    7d5a:	70 e0       	ldi	r23, 0x00	; 0
    7d5c:	0e 94 86 3e 	call	0x7d0c	; 0x7d0c <_ZN5Print5printEmi>
    7d60:	8c 01       	movw	r16, r24
    7d62:	ce 01       	movw	r24, r28
    7d64:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <_ZN5Print7printlnEv>
    7d68:	08 0f       	add	r16, r24
    7d6a:	19 1f       	adc	r17, r25
    7d6c:	c8 01       	movw	r24, r16
    7d6e:	df 91       	pop	r29
    7d70:	cf 91       	pop	r28
    7d72:	1f 91       	pop	r17
    7d74:	0f 91       	pop	r16
    7d76:	08 95       	ret

00007d78 <_ZN5Print5printEli>:
    7d78:	cf 92       	push	r12
    7d7a:	df 92       	push	r13
    7d7c:	ef 92       	push	r14
    7d7e:	ff 92       	push	r15
    7d80:	0f 93       	push	r16
    7d82:	1f 93       	push	r17
    7d84:	cf 93       	push	r28
    7d86:	df 93       	push	r29
    7d88:	ec 01       	movw	r28, r24
    7d8a:	7a 01       	movw	r14, r20
    7d8c:	8b 01       	movw	r16, r22
    7d8e:	21 15       	cp	r18, r1
    7d90:	31 05       	cpc	r19, r1
    7d92:	41 f4       	brne	.+16     	; 0x7da4 <_ZN5Print5printEli+0x2c>
    7d94:	e8 81       	ld	r30, Y
    7d96:	f9 81       	ldd	r31, Y+1	; 0x01
    7d98:	01 90       	ld	r0, Z+
    7d9a:	f0 81       	ld	r31, Z
    7d9c:	e0 2d       	mov	r30, r0
    7d9e:	64 2f       	mov	r22, r20
    7da0:	09 95       	icall
    7da2:	1a c0       	rjmp	.+52     	; 0x7dd8 <_ZN5Print5printEli+0x60>
    7da4:	2a 30       	cpi	r18, 0x0A	; 10
    7da6:	31 05       	cpc	r19, r1
    7da8:	a9 f4       	brne	.+42     	; 0x7dd4 <_ZN5Print5printEli+0x5c>
    7daa:	77 ff       	sbrs	r23, 7
    7dac:	12 c0       	rjmp	.+36     	; 0x7dd2 <_ZN5Print5printEli+0x5a>
    7dae:	6d e2       	ldi	r22, 0x2D	; 45
    7db0:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZN5Print5printEc>
    7db4:	6c 01       	movw	r12, r24
    7db6:	44 27       	eor	r20, r20
    7db8:	55 27       	eor	r21, r21
    7dba:	ba 01       	movw	r22, r20
    7dbc:	4e 19       	sub	r20, r14
    7dbe:	5f 09       	sbc	r21, r15
    7dc0:	60 0b       	sbc	r22, r16
    7dc2:	71 0b       	sbc	r23, r17
    7dc4:	ce 01       	movw	r24, r28
    7dc6:	2a e0       	ldi	r18, 0x0A	; 10
    7dc8:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <_ZN5Print11printNumberEmh>
    7dcc:	c8 0e       	add	r12, r24
    7dce:	d9 1e       	adc	r13, r25
    7dd0:	04 c0       	rjmp	.+8      	; 0x7dda <_ZN5Print5printEli+0x62>
    7dd2:	2a e0       	ldi	r18, 0x0A	; 10
    7dd4:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <_ZN5Print11printNumberEmh>
    7dd8:	6c 01       	movw	r12, r24
    7dda:	c6 01       	movw	r24, r12
    7ddc:	df 91       	pop	r29
    7dde:	cf 91       	pop	r28
    7de0:	1f 91       	pop	r17
    7de2:	0f 91       	pop	r16
    7de4:	ff 90       	pop	r15
    7de6:	ef 90       	pop	r14
    7de8:	df 90       	pop	r13
    7dea:	cf 90       	pop	r12
    7dec:	08 95       	ret

00007dee <_ZN5Print5printEii>:
    size_t println(const Printable&);
    size_t println(void);
};

#endif
    7dee:	9a 01       	movw	r18, r20
    7df0:	fb 01       	movw	r30, r22
    7df2:	af 01       	movw	r20, r30
    7df4:	66 27       	eor	r22, r22
    7df6:	57 fd       	sbrc	r21, 7
    7df8:	60 95       	com	r22
    7dfa:	76 2f       	mov	r23, r22
    7dfc:	0e 94 bc 3e 	call	0x7d78	; 0x7d78 <_ZN5Print5printEli>
    7e00:	08 95       	ret

00007e02 <_ZN5Print7printlnEii>:
    7e02:	0f 93       	push	r16
    7e04:	1f 93       	push	r17
    7e06:	cf 93       	push	r28
    7e08:	df 93       	push	r29
    7e0a:	ec 01       	movw	r28, r24
    7e0c:	9a 01       	movw	r18, r20
    size_t println(void);
};

#endif
    7e0e:	cb 01       	movw	r24, r22
    7e10:	ac 01       	movw	r20, r24
    7e12:	66 27       	eor	r22, r22
    7e14:	57 fd       	sbrc	r21, 7
    7e16:	60 95       	com	r22
    7e18:	76 2f       	mov	r23, r22
    7e1a:	ce 01       	movw	r24, r28
    7e1c:	0e 94 bc 3e 	call	0x7d78	; 0x7d78 <_ZN5Print5printEli>
    7e20:	8c 01       	movw	r16, r24
    7e22:	ce 01       	movw	r24, r28
    7e24:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <_ZN5Print7printlnEv>
    7e28:	08 0f       	add	r16, r24
    7e2a:	19 1f       	adc	r17, r25
    7e2c:	c8 01       	movw	r24, r16
    7e2e:	df 91       	pop	r29
    7e30:	cf 91       	pop	r28
    7e32:	1f 91       	pop	r17
    7e34:	0f 91       	pop	r16
    7e36:	08 95       	ret

00007e38 <_ZN5Print10printFloatEdh>:
    7e38:	6f 92       	push	r6
    7e3a:	7f 92       	push	r7
    7e3c:	9f 92       	push	r9
    7e3e:	af 92       	push	r10
    7e40:	bf 92       	push	r11
    7e42:	cf 92       	push	r12
    7e44:	df 92       	push	r13
    7e46:	ef 92       	push	r14
    7e48:	ff 92       	push	r15
    7e4a:	0f 93       	push	r16
    7e4c:	1f 93       	push	r17
    7e4e:	cf 93       	push	r28
    7e50:	df 93       	push	r29
    7e52:	3c 01       	movw	r6, r24
    7e54:	7a 01       	movw	r14, r20
    7e56:	8b 01       	movw	r16, r22
    7e58:	c2 2e       	mov	r12, r18
    7e5a:	cb 01       	movw	r24, r22
    7e5c:	ba 01       	movw	r22, r20
    7e5e:	20 e0       	ldi	r18, 0x00	; 0
    7e60:	30 e0       	ldi	r19, 0x00	; 0
    7e62:	a9 01       	movw	r20, r18
    7e64:	0e 94 99 44 	call	0x8932	; 0x8932 <__cmpsf2>
    7e68:	87 ff       	sbrs	r24, 7
    7e6a:	0a c0       	rjmp	.+20     	; 0x7e80 <_ZN5Print10printFloatEdh+0x48>
    7e6c:	c3 01       	movw	r24, r6
    7e6e:	6d e2       	ldi	r22, 0x2D	; 45
    7e70:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZN5Print5printEc>
    7e74:	ec 01       	movw	r28, r24
    7e76:	17 fb       	bst	r17, 7
    7e78:	10 95       	com	r17
    7e7a:	17 f9       	bld	r17, 7
    7e7c:	10 95       	com	r17
    7e7e:	02 c0       	rjmp	.+4      	; 0x7e84 <_ZN5Print10printFloatEdh+0x4c>
    7e80:	c0 e0       	ldi	r28, 0x00	; 0
    7e82:	d0 e0       	ldi	r29, 0x00	; 0
    7e84:	dd 24       	eor	r13, r13
    7e86:	50 e0       	ldi	r21, 0x00	; 0
    7e88:	40 e0       	ldi	r20, 0x00	; 0
    7e8a:	30 e0       	ldi	r19, 0x00	; 0
    7e8c:	2f e3       	ldi	r18, 0x3F	; 63
    7e8e:	11 c0       	rjmp	.+34     	; 0x7eb2 <_ZN5Print10printFloatEdh+0x7a>
    7e90:	da 01       	movw	r26, r20
    7e92:	f9 01       	movw	r30, r18
    7e94:	6b 2f       	mov	r22, r27
    7e96:	74 2f       	mov	r23, r20
    7e98:	8f 2f       	mov	r24, r31
    7e9a:	92 2f       	mov	r25, r18
    7e9c:	20 e0       	ldi	r18, 0x00	; 0
    7e9e:	30 e0       	ldi	r19, 0x00	; 0
    7ea0:	40 e2       	ldi	r20, 0x20	; 32
    7ea2:	51 e4       	ldi	r21, 0x41	; 65
    7ea4:	0e 94 a0 44 	call	0x8940	; 0x8940 <__divsf3>
    7ea8:	56 2f       	mov	r21, r22
    7eaa:	47 2f       	mov	r20, r23
    7eac:	38 2f       	mov	r19, r24
    7eae:	29 2f       	mov	r18, r25
    7eb0:	d3 94       	inc	r13
    7eb2:	dc 14       	cp	r13, r12
    7eb4:	68 f3       	brcs	.-38     	; 0x7e90 <_ZN5Print10printFloatEdh+0x58>
    7eb6:	c8 01       	movw	r24, r16
    7eb8:	b7 01       	movw	r22, r14
    7eba:	da 01       	movw	r26, r20
    7ebc:	f9 01       	movw	r30, r18
    7ebe:	2b 2f       	mov	r18, r27
    7ec0:	34 2f       	mov	r19, r20
    7ec2:	4f 2f       	mov	r20, r31
    7ec4:	5e 2f       	mov	r21, r30
    7ec6:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <__addsf3>
    7eca:	5b 01       	movw	r10, r22
    7ecc:	f8 2e       	mov	r15, r24
    7ece:	99 2e       	mov	r9, r25
    7ed0:	7b 2d       	mov	r23, r11
    7ed2:	0e 94 0d 45 	call	0x8a1a	; 0x8a1a <__fixunssfsi>
    7ed6:	16 2f       	mov	r17, r22
    7ed8:	d7 2e       	mov	r13, r23
    7eda:	e8 2e       	mov	r14, r24
    7edc:	09 2f       	mov	r16, r25
    7ede:	0e 94 39 45 	call	0x8a72	; 0x8a72 <__floatunsisf>
    7ee2:	9b 01       	movw	r18, r22
    7ee4:	ac 01       	movw	r20, r24
    7ee6:	6a 2d       	mov	r22, r10
    7ee8:	7b 2d       	mov	r23, r11
    7eea:	8f 2d       	mov	r24, r15
    7eec:	99 2d       	mov	r25, r9
    7eee:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    7ef2:	96 2e       	mov	r9, r22
    7ef4:	a7 2e       	mov	r10, r23
    7ef6:	b8 2e       	mov	r11, r24
    7ef8:	f9 2e       	mov	r15, r25
    7efa:	c3 01       	movw	r24, r6
    7efc:	41 2f       	mov	r20, r17
    7efe:	5d 2d       	mov	r21, r13
    7f00:	6e 2d       	mov	r22, r14
    7f02:	70 2f       	mov	r23, r16
    7f04:	2a e0       	ldi	r18, 0x0A	; 10
    7f06:	30 e0       	ldi	r19, 0x00	; 0
    7f08:	0e 94 86 3e 	call	0x7d0c	; 0x7d0c <_ZN5Print5printEmi>
    7f0c:	c8 0f       	add	r28, r24
    7f0e:	d9 1f       	adc	r29, r25
    7f10:	cc 20       	and	r12, r12
    7f12:	b9 f1       	breq	.+110    	; 0x7f82 <_ZN5Print10printFloatEdh+0x14a>
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    7f14:	c3 01       	movw	r24, r6
    7f16:	66 ee       	ldi	r22, 0xE6	; 230
    7f18:	76 e0       	ldi	r23, 0x06	; 6
    7f1a:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <_ZN5Print5writeEPKc>
    7f1e:	c8 0f       	add	r28, r24
    7f20:	d9 1f       	adc	r29, r25
    7f22:	2f c0       	rjmp	.+94     	; 0x7f82 <_ZN5Print10printFloatEdh+0x14a>
    7f24:	69 2d       	mov	r22, r9
    7f26:	7a 2d       	mov	r23, r10
    7f28:	8b 2d       	mov	r24, r11
    7f2a:	9f 2d       	mov	r25, r15
    7f2c:	20 e0       	ldi	r18, 0x00	; 0
    7f2e:	30 e0       	ldi	r19, 0x00	; 0
    7f30:	40 e2       	ldi	r20, 0x20	; 32
    7f32:	51 e4       	ldi	r21, 0x41	; 65
    7f34:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__mulsf3>
    7f38:	d6 2e       	mov	r13, r22
    7f3a:	b7 2e       	mov	r11, r23
    7f3c:	a8 2e       	mov	r10, r24
    7f3e:	99 2e       	mov	r9, r25
    7f40:	0e 94 08 45 	call	0x8a10	; 0x8a10 <__fixsfsi>
    size_t println(void);
};

#endif
    7f44:	7b 01       	movw	r14, r22
    7f46:	00 27       	eor	r16, r16
    7f48:	f7 fc       	sbrc	r15, 7
    7f4a:	00 95       	com	r16
    7f4c:	10 2f       	mov	r17, r16
    7f4e:	c3 01       	movw	r24, r6
    7f50:	b8 01       	movw	r22, r16
    7f52:	a7 01       	movw	r20, r14
    7f54:	2a e0       	ldi	r18, 0x0A	; 10
    7f56:	30 e0       	ldi	r19, 0x00	; 0
    7f58:	0e 94 bc 3e 	call	0x7d78	; 0x7d78 <_ZN5Print5printEli>
    7f5c:	c8 0f       	add	r28, r24
    7f5e:	d9 1f       	adc	r29, r25
    7f60:	c8 01       	movw	r24, r16
    7f62:	b7 01       	movw	r22, r14
    7f64:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <__floatsisf>
    7f68:	9b 01       	movw	r18, r22
    7f6a:	ac 01       	movw	r20, r24
    7f6c:	6d 2d       	mov	r22, r13
    7f6e:	7b 2d       	mov	r23, r11
    7f70:	8a 2d       	mov	r24, r10
    7f72:	99 2d       	mov	r25, r9
    7f74:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__subsf3>
    7f78:	96 2e       	mov	r9, r22
    7f7a:	a7 2e       	mov	r10, r23
    7f7c:	b8 2e       	mov	r11, r24
    7f7e:	f9 2e       	mov	r15, r25
    7f80:	ca 94       	dec	r12
    7f82:	cc 20       	and	r12, r12
    7f84:	79 f6       	brne	.-98     	; 0x7f24 <_ZN5Print10printFloatEdh+0xec>
    7f86:	ce 01       	movw	r24, r28
    7f88:	df 91       	pop	r29
    7f8a:	cf 91       	pop	r28
    7f8c:	1f 91       	pop	r17
    7f8e:	0f 91       	pop	r16
    7f90:	ff 90       	pop	r15
    7f92:	ef 90       	pop	r14
    7f94:	df 90       	pop	r13
    7f96:	cf 90       	pop	r12
    7f98:	bf 90       	pop	r11
    7f9a:	af 90       	pop	r10
    7f9c:	9f 90       	pop	r9
    7f9e:	7f 90       	pop	r7
    7fa0:	6f 90       	pop	r6
    7fa2:	08 95       	ret

00007fa4 <_ZN5Print5printEdi>:
    7fa4:	0e 94 1c 3f 	call	0x7e38	; 0x7e38 <_ZN5Print10printFloatEdh>
    7fa8:	08 95       	ret

00007faa <_ZN5Print7printlnEdi>:
    7faa:	0f 93       	push	r16
    7fac:	1f 93       	push	r17
    7fae:	cf 93       	push	r28
    7fb0:	df 93       	push	r29
    7fb2:	ec 01       	movw	r28, r24
    7fb4:	0e 94 1c 3f 	call	0x7e38	; 0x7e38 <_ZN5Print10printFloatEdh>
    7fb8:	8c 01       	movw	r16, r24
    7fba:	ce 01       	movw	r24, r28
    7fbc:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <_ZN5Print7printlnEv>
    7fc0:	08 0f       	add	r16, r24
    7fc2:	19 1f       	adc	r17, r25
    7fc4:	c8 01       	movw	r24, r16
    7fc6:	df 91       	pop	r29
    7fc8:	cf 91       	pop	r28
    7fca:	1f 91       	pop	r17
    7fcc:	0f 91       	pop	r16
    7fce:	08 95       	ret

00007fd0 <attachInterrupt>:

volatile static voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    7fd0:	88 30       	cpi	r24, 0x08	; 8
    7fd2:	08 f0       	brcs	.+2      	; 0x7fd6 <attachInterrupt+0x6>
    7fd4:	76 c0       	rjmp	.+236    	; 0x80c2 <attachInterrupt+0xf2>
    intFunc[interruptNum] = userFunc;
    7fd6:	e8 2f       	mov	r30, r24
    7fd8:	f0 e0       	ldi	r31, 0x00	; 0
    7fda:	ee 0f       	add	r30, r30
    7fdc:	ff 1f       	adc	r31, r31
    7fde:	e9 54       	subi	r30, 0x49	; 73
    7fe0:	f1 4f       	sbci	r31, 0xF1	; 241
    7fe2:	71 83       	std	Z+1, r23	; 0x01
    7fe4:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    7fe6:	84 30       	cpi	r24, 0x04	; 4
    7fe8:	29 f1       	breq	.+74     	; 0x8034 <attachInterrupt+0x64>
    7fea:	85 30       	cpi	r24, 0x05	; 5
    7fec:	38 f4       	brcc	.+14     	; 0x7ffc <attachInterrupt+0x2c>
    7fee:	82 30       	cpi	r24, 0x02	; 2
    7ff0:	69 f0       	breq	.+26     	; 0x800c <attachInterrupt+0x3c>
    7ff2:	83 30       	cpi	r24, 0x03	; 3
    7ff4:	98 f4       	brcc	.+38     	; 0x801c <attachInterrupt+0x4c>
    7ff6:	81 30       	cpi	r24, 0x01	; 1
    7ff8:	b9 f5       	brne	.+110    	; 0x8068 <attachInterrupt+0x98>
    7ffa:	3e c0       	rjmp	.+124    	; 0x8078 <attachInterrupt+0xa8>
    7ffc:	86 30       	cpi	r24, 0x06	; 6
    7ffe:	09 f4       	brne	.+2      	; 0x8002 <attachInterrupt+0x32>
    8000:	47 c0       	rjmp	.+142    	; 0x8090 <attachInterrupt+0xc0>
    8002:	86 30       	cpi	r24, 0x06	; 6
    8004:	20 f1       	brcs	.+72     	; 0x804e <attachInterrupt+0x7e>
    8006:	87 30       	cpi	r24, 0x07	; 7
    8008:	79 f5       	brne	.+94     	; 0x8068 <attachInterrupt+0x98>
    800a:	4f c0       	rjmp	.+158    	; 0x80aa <attachInterrupt+0xda>
#if defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    800c:	80 91 69 00 	lds	r24, 0x0069
    8010:	8c 7f       	andi	r24, 0xFC	; 252
    8012:	84 2b       	or	r24, r20
    8014:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
    8018:	e8 9a       	sbi	0x1d, 0	; 29
      break;
    801a:	08 95       	ret
    case 3:
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    801c:	80 91 69 00 	lds	r24, 0x0069
    8020:	44 0f       	add	r20, r20
    8022:	55 1f       	adc	r21, r21
    8024:	44 0f       	add	r20, r20
    8026:	55 1f       	adc	r21, r21
    8028:	83 7f       	andi	r24, 0xF3	; 243
    802a:	84 2b       	or	r24, r20
    802c:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
    8030:	e9 9a       	sbi	0x1d, 1	; 29
      break;
    8032:	08 95       	ret
    case 4:
      EICRA = (EICRA & ~((1 << ISC20) | (1 << ISC21))) | (mode << ISC20);
    8034:	80 91 69 00 	lds	r24, 0x0069
    8038:	74 e0       	ldi	r23, 0x04	; 4
    803a:	44 0f       	add	r20, r20
    803c:	55 1f       	adc	r21, r21
    803e:	7a 95       	dec	r23
    8040:	e1 f7       	brne	.-8      	; 0x803a <attachInterrupt+0x6a>
    8042:	8f 7c       	andi	r24, 0xCF	; 207
    8044:	84 2b       	or	r24, r20
    8046:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT2);
    804a:	ea 9a       	sbi	0x1d, 2	; 29
      break;
    804c:	08 95       	ret
    case 5:
      EICRA = (EICRA & ~((1 << ISC30) | (1 << ISC31))) | (mode << ISC30);
    804e:	80 91 69 00 	lds	r24, 0x0069
    8052:	66 e0       	ldi	r22, 0x06	; 6
    8054:	44 0f       	add	r20, r20
    8056:	55 1f       	adc	r21, r21
    8058:	6a 95       	dec	r22
    805a:	e1 f7       	brne	.-8      	; 0x8054 <attachInterrupt+0x84>
    805c:	8f 73       	andi	r24, 0x3F	; 63
    805e:	84 2b       	or	r24, r20
    8060:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT3);
    8064:	eb 9a       	sbi	0x1d, 3	; 29
      break;
    8066:	08 95       	ret
    case 0:
      EICRB = (EICRB & ~((1 << ISC40) | (1 << ISC41))) | (mode << ISC40);
    8068:	80 91 6a 00 	lds	r24, 0x006A
    806c:	8c 7f       	andi	r24, 0xFC	; 252
    806e:	84 2b       	or	r24, r20
    8070:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT4);
    8074:	ec 9a       	sbi	0x1d, 4	; 29
      break;
    8076:	08 95       	ret
    case 1:
      EICRB = (EICRB & ~((1 << ISC50) | (1 << ISC51))) | (mode << ISC50);
    8078:	80 91 6a 00 	lds	r24, 0x006A
    807c:	44 0f       	add	r20, r20
    807e:	55 1f       	adc	r21, r21
    8080:	44 0f       	add	r20, r20
    8082:	55 1f       	adc	r21, r21
    8084:	83 7f       	andi	r24, 0xF3	; 243
    8086:	84 2b       	or	r24, r20
    8088:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT5);
    808c:	ed 9a       	sbi	0x1d, 5	; 29
      break;
    808e:	08 95       	ret
    case 6:
      EICRB = (EICRB & ~((1 << ISC60) | (1 << ISC61))) | (mode << ISC60);
    8090:	80 91 6a 00 	lds	r24, 0x006A
    8094:	24 e0       	ldi	r18, 0x04	; 4
    8096:	44 0f       	add	r20, r20
    8098:	55 1f       	adc	r21, r21
    809a:	2a 95       	dec	r18
    809c:	e1 f7       	brne	.-8      	; 0x8096 <attachInterrupt+0xc6>
    809e:	8f 7c       	andi	r24, 0xCF	; 207
    80a0:	84 2b       	or	r24, r20
    80a2:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT6);
    80a6:	ee 9a       	sbi	0x1d, 6	; 29
      break;
    80a8:	08 95       	ret
    case 7:
      EICRB = (EICRB & ~((1 << ISC70) | (1 << ISC71))) | (mode << ISC70);
    80aa:	80 91 6a 00 	lds	r24, 0x006A
    80ae:	96 e0       	ldi	r25, 0x06	; 6
    80b0:	44 0f       	add	r20, r20
    80b2:	55 1f       	adc	r21, r21
    80b4:	9a 95       	dec	r25
    80b6:	e1 f7       	brne	.-8      	; 0x80b0 <attachInterrupt+0xe0>
    80b8:	8f 73       	andi	r24, 0x3F	; 63
    80ba:	84 2b       	or	r24, r20
    80bc:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT7);
    80c0:	ef 9a       	sbi	0x1d, 7	; 29
    80c2:	08 95       	ret

000080c4 <__vector_1>:
}
*/

#if defined(EICRA) && defined(EICRB)

SIGNAL(INT0_vect) {
    80c4:	1f 92       	push	r1
    80c6:	0f 92       	push	r0
    80c8:	0f b6       	in	r0, 0x3f	; 63
    80ca:	0f 92       	push	r0
    80cc:	0b b6       	in	r0, 0x3b	; 59
    80ce:	0f 92       	push	r0
    80d0:	11 24       	eor	r1, r1
    80d2:	2f 93       	push	r18
    80d4:	3f 93       	push	r19
    80d6:	4f 93       	push	r20
    80d8:	5f 93       	push	r21
    80da:	6f 93       	push	r22
    80dc:	7f 93       	push	r23
    80de:	8f 93       	push	r24
    80e0:	9f 93       	push	r25
    80e2:	af 93       	push	r26
    80e4:	bf 93       	push	r27
    80e6:	ef 93       	push	r30
    80e8:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    80ea:	80 91 bb 0e 	lds	r24, 0x0EBB
    80ee:	90 91 bc 0e 	lds	r25, 0x0EBC
    80f2:	00 97       	sbiw	r24, 0x00	; 0
    80f4:	29 f0       	breq	.+10     	; 0x8100 <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    80f6:	e0 91 bb 0e 	lds	r30, 0x0EBB
    80fa:	f0 91 bc 0e 	lds	r31, 0x0EBC
    80fe:	09 95       	icall
}
    8100:	ff 91       	pop	r31
    8102:	ef 91       	pop	r30
    8104:	bf 91       	pop	r27
    8106:	af 91       	pop	r26
    8108:	9f 91       	pop	r25
    810a:	8f 91       	pop	r24
    810c:	7f 91       	pop	r23
    810e:	6f 91       	pop	r22
    8110:	5f 91       	pop	r21
    8112:	4f 91       	pop	r20
    8114:	3f 91       	pop	r19
    8116:	2f 91       	pop	r18
    8118:	0f 90       	pop	r0
    811a:	0b be       	out	0x3b, r0	; 59
    811c:	0f 90       	pop	r0
    811e:	0f be       	out	0x3f, r0	; 63
    8120:	0f 90       	pop	r0
    8122:	1f 90       	pop	r1
    8124:	18 95       	reti

00008126 <__vector_2>:

SIGNAL(INT1_vect) {
    8126:	1f 92       	push	r1
    8128:	0f 92       	push	r0
    812a:	0f b6       	in	r0, 0x3f	; 63
    812c:	0f 92       	push	r0
    812e:	0b b6       	in	r0, 0x3b	; 59
    8130:	0f 92       	push	r0
    8132:	11 24       	eor	r1, r1
    8134:	2f 93       	push	r18
    8136:	3f 93       	push	r19
    8138:	4f 93       	push	r20
    813a:	5f 93       	push	r21
    813c:	6f 93       	push	r22
    813e:	7f 93       	push	r23
    8140:	8f 93       	push	r24
    8142:	9f 93       	push	r25
    8144:	af 93       	push	r26
    8146:	bf 93       	push	r27
    8148:	ef 93       	push	r30
    814a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    814c:	80 91 bd 0e 	lds	r24, 0x0EBD
    8150:	90 91 be 0e 	lds	r25, 0x0EBE
    8154:	00 97       	sbiw	r24, 0x00	; 0
    8156:	29 f0       	breq	.+10     	; 0x8162 <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    8158:	e0 91 bd 0e 	lds	r30, 0x0EBD
    815c:	f0 91 be 0e 	lds	r31, 0x0EBE
    8160:	09 95       	icall
}
    8162:	ff 91       	pop	r31
    8164:	ef 91       	pop	r30
    8166:	bf 91       	pop	r27
    8168:	af 91       	pop	r26
    816a:	9f 91       	pop	r25
    816c:	8f 91       	pop	r24
    816e:	7f 91       	pop	r23
    8170:	6f 91       	pop	r22
    8172:	5f 91       	pop	r21
    8174:	4f 91       	pop	r20
    8176:	3f 91       	pop	r19
    8178:	2f 91       	pop	r18
    817a:	0f 90       	pop	r0
    817c:	0b be       	out	0x3b, r0	; 59
    817e:	0f 90       	pop	r0
    8180:	0f be       	out	0x3f, r0	; 63
    8182:	0f 90       	pop	r0
    8184:	1f 90       	pop	r1
    8186:	18 95       	reti

00008188 <__vector_3>:

SIGNAL(INT2_vect) {
    8188:	1f 92       	push	r1
    818a:	0f 92       	push	r0
    818c:	0f b6       	in	r0, 0x3f	; 63
    818e:	0f 92       	push	r0
    8190:	0b b6       	in	r0, 0x3b	; 59
    8192:	0f 92       	push	r0
    8194:	11 24       	eor	r1, r1
    8196:	2f 93       	push	r18
    8198:	3f 93       	push	r19
    819a:	4f 93       	push	r20
    819c:	5f 93       	push	r21
    819e:	6f 93       	push	r22
    81a0:	7f 93       	push	r23
    81a2:	8f 93       	push	r24
    81a4:	9f 93       	push	r25
    81a6:	af 93       	push	r26
    81a8:	bf 93       	push	r27
    81aa:	ef 93       	push	r30
    81ac:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    81ae:	80 91 bf 0e 	lds	r24, 0x0EBF
    81b2:	90 91 c0 0e 	lds	r25, 0x0EC0
    81b6:	00 97       	sbiw	r24, 0x00	; 0
    81b8:	29 f0       	breq	.+10     	; 0x81c4 <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    81ba:	e0 91 bf 0e 	lds	r30, 0x0EBF
    81be:	f0 91 c0 0e 	lds	r31, 0x0EC0
    81c2:	09 95       	icall
}
    81c4:	ff 91       	pop	r31
    81c6:	ef 91       	pop	r30
    81c8:	bf 91       	pop	r27
    81ca:	af 91       	pop	r26
    81cc:	9f 91       	pop	r25
    81ce:	8f 91       	pop	r24
    81d0:	7f 91       	pop	r23
    81d2:	6f 91       	pop	r22
    81d4:	5f 91       	pop	r21
    81d6:	4f 91       	pop	r20
    81d8:	3f 91       	pop	r19
    81da:	2f 91       	pop	r18
    81dc:	0f 90       	pop	r0
    81de:	0b be       	out	0x3b, r0	; 59
    81e0:	0f 90       	pop	r0
    81e2:	0f be       	out	0x3f, r0	; 63
    81e4:	0f 90       	pop	r0
    81e6:	1f 90       	pop	r1
    81e8:	18 95       	reti

000081ea <__vector_4>:

SIGNAL(INT3_vect) {
    81ea:	1f 92       	push	r1
    81ec:	0f 92       	push	r0
    81ee:	0f b6       	in	r0, 0x3f	; 63
    81f0:	0f 92       	push	r0
    81f2:	0b b6       	in	r0, 0x3b	; 59
    81f4:	0f 92       	push	r0
    81f6:	11 24       	eor	r1, r1
    81f8:	2f 93       	push	r18
    81fa:	3f 93       	push	r19
    81fc:	4f 93       	push	r20
    81fe:	5f 93       	push	r21
    8200:	6f 93       	push	r22
    8202:	7f 93       	push	r23
    8204:	8f 93       	push	r24
    8206:	9f 93       	push	r25
    8208:	af 93       	push	r26
    820a:	bf 93       	push	r27
    820c:	ef 93       	push	r30
    820e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    8210:	80 91 c1 0e 	lds	r24, 0x0EC1
    8214:	90 91 c2 0e 	lds	r25, 0x0EC2
    8218:	00 97       	sbiw	r24, 0x00	; 0
    821a:	29 f0       	breq	.+10     	; 0x8226 <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    821c:	e0 91 c1 0e 	lds	r30, 0x0EC1
    8220:	f0 91 c2 0e 	lds	r31, 0x0EC2
    8224:	09 95       	icall
}
    8226:	ff 91       	pop	r31
    8228:	ef 91       	pop	r30
    822a:	bf 91       	pop	r27
    822c:	af 91       	pop	r26
    822e:	9f 91       	pop	r25
    8230:	8f 91       	pop	r24
    8232:	7f 91       	pop	r23
    8234:	6f 91       	pop	r22
    8236:	5f 91       	pop	r21
    8238:	4f 91       	pop	r20
    823a:	3f 91       	pop	r19
    823c:	2f 91       	pop	r18
    823e:	0f 90       	pop	r0
    8240:	0b be       	out	0x3b, r0	; 59
    8242:	0f 90       	pop	r0
    8244:	0f be       	out	0x3f, r0	; 63
    8246:	0f 90       	pop	r0
    8248:	1f 90       	pop	r1
    824a:	18 95       	reti

0000824c <__vector_5>:

SIGNAL(INT4_vect) {
    824c:	1f 92       	push	r1
    824e:	0f 92       	push	r0
    8250:	0f b6       	in	r0, 0x3f	; 63
    8252:	0f 92       	push	r0
    8254:	0b b6       	in	r0, 0x3b	; 59
    8256:	0f 92       	push	r0
    8258:	11 24       	eor	r1, r1
    825a:	2f 93       	push	r18
    825c:	3f 93       	push	r19
    825e:	4f 93       	push	r20
    8260:	5f 93       	push	r21
    8262:	6f 93       	push	r22
    8264:	7f 93       	push	r23
    8266:	8f 93       	push	r24
    8268:	9f 93       	push	r25
    826a:	af 93       	push	r26
    826c:	bf 93       	push	r27
    826e:	ef 93       	push	r30
    8270:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    8272:	80 91 b7 0e 	lds	r24, 0x0EB7
    8276:	90 91 b8 0e 	lds	r25, 0x0EB8
    827a:	00 97       	sbiw	r24, 0x00	; 0
    827c:	29 f0       	breq	.+10     	; 0x8288 <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    827e:	e0 91 b7 0e 	lds	r30, 0x0EB7
    8282:	f0 91 b8 0e 	lds	r31, 0x0EB8
    8286:	09 95       	icall
}
    8288:	ff 91       	pop	r31
    828a:	ef 91       	pop	r30
    828c:	bf 91       	pop	r27
    828e:	af 91       	pop	r26
    8290:	9f 91       	pop	r25
    8292:	8f 91       	pop	r24
    8294:	7f 91       	pop	r23
    8296:	6f 91       	pop	r22
    8298:	5f 91       	pop	r21
    829a:	4f 91       	pop	r20
    829c:	3f 91       	pop	r19
    829e:	2f 91       	pop	r18
    82a0:	0f 90       	pop	r0
    82a2:	0b be       	out	0x3b, r0	; 59
    82a4:	0f 90       	pop	r0
    82a6:	0f be       	out	0x3f, r0	; 63
    82a8:	0f 90       	pop	r0
    82aa:	1f 90       	pop	r1
    82ac:	18 95       	reti

000082ae <__vector_6>:

SIGNAL(INT5_vect) {
    82ae:	1f 92       	push	r1
    82b0:	0f 92       	push	r0
    82b2:	0f b6       	in	r0, 0x3f	; 63
    82b4:	0f 92       	push	r0
    82b6:	0b b6       	in	r0, 0x3b	; 59
    82b8:	0f 92       	push	r0
    82ba:	11 24       	eor	r1, r1
    82bc:	2f 93       	push	r18
    82be:	3f 93       	push	r19
    82c0:	4f 93       	push	r20
    82c2:	5f 93       	push	r21
    82c4:	6f 93       	push	r22
    82c6:	7f 93       	push	r23
    82c8:	8f 93       	push	r24
    82ca:	9f 93       	push	r25
    82cc:	af 93       	push	r26
    82ce:	bf 93       	push	r27
    82d0:	ef 93       	push	r30
    82d2:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    82d4:	80 91 b9 0e 	lds	r24, 0x0EB9
    82d8:	90 91 ba 0e 	lds	r25, 0x0EBA
    82dc:	00 97       	sbiw	r24, 0x00	; 0
    82de:	29 f0       	breq	.+10     	; 0x82ea <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    82e0:	e0 91 b9 0e 	lds	r30, 0x0EB9
    82e4:	f0 91 ba 0e 	lds	r31, 0x0EBA
    82e8:	09 95       	icall
}
    82ea:	ff 91       	pop	r31
    82ec:	ef 91       	pop	r30
    82ee:	bf 91       	pop	r27
    82f0:	af 91       	pop	r26
    82f2:	9f 91       	pop	r25
    82f4:	8f 91       	pop	r24
    82f6:	7f 91       	pop	r23
    82f8:	6f 91       	pop	r22
    82fa:	5f 91       	pop	r21
    82fc:	4f 91       	pop	r20
    82fe:	3f 91       	pop	r19
    8300:	2f 91       	pop	r18
    8302:	0f 90       	pop	r0
    8304:	0b be       	out	0x3b, r0	; 59
    8306:	0f 90       	pop	r0
    8308:	0f be       	out	0x3f, r0	; 63
    830a:	0f 90       	pop	r0
    830c:	1f 90       	pop	r1
    830e:	18 95       	reti

00008310 <__vector_7>:

SIGNAL(INT6_vect) {
    8310:	1f 92       	push	r1
    8312:	0f 92       	push	r0
    8314:	0f b6       	in	r0, 0x3f	; 63
    8316:	0f 92       	push	r0
    8318:	0b b6       	in	r0, 0x3b	; 59
    831a:	0f 92       	push	r0
    831c:	11 24       	eor	r1, r1
    831e:	2f 93       	push	r18
    8320:	3f 93       	push	r19
    8322:	4f 93       	push	r20
    8324:	5f 93       	push	r21
    8326:	6f 93       	push	r22
    8328:	7f 93       	push	r23
    832a:	8f 93       	push	r24
    832c:	9f 93       	push	r25
    832e:	af 93       	push	r26
    8330:	bf 93       	push	r27
    8332:	ef 93       	push	r30
    8334:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    8336:	80 91 c3 0e 	lds	r24, 0x0EC3
    833a:	90 91 c4 0e 	lds	r25, 0x0EC4
    833e:	00 97       	sbiw	r24, 0x00	; 0
    8340:	29 f0       	breq	.+10     	; 0x834c <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    8342:	e0 91 c3 0e 	lds	r30, 0x0EC3
    8346:	f0 91 c4 0e 	lds	r31, 0x0EC4
    834a:	09 95       	icall
}
    834c:	ff 91       	pop	r31
    834e:	ef 91       	pop	r30
    8350:	bf 91       	pop	r27
    8352:	af 91       	pop	r26
    8354:	9f 91       	pop	r25
    8356:	8f 91       	pop	r24
    8358:	7f 91       	pop	r23
    835a:	6f 91       	pop	r22
    835c:	5f 91       	pop	r21
    835e:	4f 91       	pop	r20
    8360:	3f 91       	pop	r19
    8362:	2f 91       	pop	r18
    8364:	0f 90       	pop	r0
    8366:	0b be       	out	0x3b, r0	; 59
    8368:	0f 90       	pop	r0
    836a:	0f be       	out	0x3f, r0	; 63
    836c:	0f 90       	pop	r0
    836e:	1f 90       	pop	r1
    8370:	18 95       	reti

00008372 <__vector_8>:

SIGNAL(INT7_vect) {
    8372:	1f 92       	push	r1
    8374:	0f 92       	push	r0
    8376:	0f b6       	in	r0, 0x3f	; 63
    8378:	0f 92       	push	r0
    837a:	0b b6       	in	r0, 0x3b	; 59
    837c:	0f 92       	push	r0
    837e:	11 24       	eor	r1, r1
    8380:	2f 93       	push	r18
    8382:	3f 93       	push	r19
    8384:	4f 93       	push	r20
    8386:	5f 93       	push	r21
    8388:	6f 93       	push	r22
    838a:	7f 93       	push	r23
    838c:	8f 93       	push	r24
    838e:	9f 93       	push	r25
    8390:	af 93       	push	r26
    8392:	bf 93       	push	r27
    8394:	ef 93       	push	r30
    8396:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    8398:	80 91 c5 0e 	lds	r24, 0x0EC5
    839c:	90 91 c6 0e 	lds	r25, 0x0EC6
    83a0:	00 97       	sbiw	r24, 0x00	; 0
    83a2:	29 f0       	breq	.+10     	; 0x83ae <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    83a4:	e0 91 c5 0e 	lds	r30, 0x0EC5
    83a8:	f0 91 c6 0e 	lds	r31, 0x0EC6
    83ac:	09 95       	icall
}
    83ae:	ff 91       	pop	r31
    83b0:	ef 91       	pop	r30
    83b2:	bf 91       	pop	r27
    83b4:	af 91       	pop	r26
    83b6:	9f 91       	pop	r25
    83b8:	8f 91       	pop	r24
    83ba:	7f 91       	pop	r23
    83bc:	6f 91       	pop	r22
    83be:	5f 91       	pop	r21
    83c0:	4f 91       	pop	r20
    83c2:	3f 91       	pop	r19
    83c4:	2f 91       	pop	r18
    83c6:	0f 90       	pop	r0
    83c8:	0b be       	out	0x3b, r0	; 59
    83ca:	0f 90       	pop	r0
    83cc:	0f be       	out	0x3f, r0	; 63
    83ce:	0f 90       	pop	r0
    83d0:	1f 90       	pop	r1
    83d2:	18 95       	reti

000083d4 <main>:
#include "Arduino.h"

int main(void)
{
    83d4:	cf 93       	push	r28
    83d6:	df 93       	push	r29
	init();
    83d8:	0e 94 a0 42 	call	0x8540	; 0x8540 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
    83dc:	0e 94 bf 1c 	call	0x397e	; 0x397e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    83e0:	c0 ed       	ldi	r28, 0xD0	; 208
    83e2:	d9 e3       	ldi	r29, 0x39	; 57
#endif
	
	setup();
    
	for (;;) {
		loop();
    83e4:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <loop>
		if (serialEventRun) serialEventRun();
    83e8:	20 97       	sbiw	r28, 0x00	; 0
    83ea:	e1 f3       	breq	.-8      	; 0x83e4 <main+0x10>
    83ec:	0e 94 d0 39 	call	0x73a0	; 0x73a0 <_Z14serialEventRunv>
    83f0:	f9 cf       	rjmp	.-14     	; 0x83e4 <main+0x10>

000083f2 <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
    83f2:	0e 94 9a 48 	call	0x9134	; 0x9134 <free>
} 
    83f6:	08 95       	ret

000083f8 <__cxa_pure_virtual>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
    83f8:	08 95       	ret

000083fa <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    83fa:	1f 92       	push	r1
    83fc:	0f 92       	push	r0
    83fe:	0f b6       	in	r0, 0x3f	; 63
    8400:	0f 92       	push	r0
    8402:	11 24       	eor	r1, r1
    8404:	2f 93       	push	r18
    8406:	3f 93       	push	r19
    8408:	8f 93       	push	r24
    840a:	9f 93       	push	r25
    840c:	af 93       	push	r26
    840e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    8410:	80 91 cb 0e 	lds	r24, 0x0ECB
    8414:	90 91 cc 0e 	lds	r25, 0x0ECC
    8418:	a0 91 cd 0e 	lds	r26, 0x0ECD
    841c:	b0 91 ce 0e 	lds	r27, 0x0ECE
	unsigned char f = timer0_fract;
    8420:	30 91 cf 0e 	lds	r19, 0x0ECF

	m += MILLIS_INC;
    8424:	01 96       	adiw	r24, 0x01	; 1
    8426:	a1 1d       	adc	r26, r1
    8428:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    842a:	23 2f       	mov	r18, r19
    842c:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    842e:	2d 37       	cpi	r18, 0x7D	; 125
    8430:	20 f0       	brcs	.+8      	; 0x843a <__vector_23+0x40>
		f -= FRACT_MAX;
    8432:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    8434:	01 96       	adiw	r24, 0x01	; 1
    8436:	a1 1d       	adc	r26, r1
    8438:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    843a:	20 93 cf 0e 	sts	0x0ECF, r18
	timer0_millis = m;
    843e:	80 93 cb 0e 	sts	0x0ECB, r24
    8442:	90 93 cc 0e 	sts	0x0ECC, r25
    8446:	a0 93 cd 0e 	sts	0x0ECD, r26
    844a:	b0 93 ce 0e 	sts	0x0ECE, r27
	timer0_overflow_count++;
    844e:	80 91 c7 0e 	lds	r24, 0x0EC7
    8452:	90 91 c8 0e 	lds	r25, 0x0EC8
    8456:	a0 91 c9 0e 	lds	r26, 0x0EC9
    845a:	b0 91 ca 0e 	lds	r27, 0x0ECA
    845e:	01 96       	adiw	r24, 0x01	; 1
    8460:	a1 1d       	adc	r26, r1
    8462:	b1 1d       	adc	r27, r1
    8464:	80 93 c7 0e 	sts	0x0EC7, r24
    8468:	90 93 c8 0e 	sts	0x0EC8, r25
    846c:	a0 93 c9 0e 	sts	0x0EC9, r26
    8470:	b0 93 ca 0e 	sts	0x0ECA, r27
}
    8474:	bf 91       	pop	r27
    8476:	af 91       	pop	r26
    8478:	9f 91       	pop	r25
    847a:	8f 91       	pop	r24
    847c:	3f 91       	pop	r19
    847e:	2f 91       	pop	r18
    8480:	0f 90       	pop	r0
    8482:	0f be       	out	0x3f, r0	; 63
    8484:	0f 90       	pop	r0
    8486:	1f 90       	pop	r1
    8488:	18 95       	reti

0000848a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    848a:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    848c:	f8 94       	cli
	m = timer0_millis;
    848e:	20 91 cb 0e 	lds	r18, 0x0ECB
    8492:	30 91 cc 0e 	lds	r19, 0x0ECC
    8496:	40 91 cd 0e 	lds	r20, 0x0ECD
    849a:	50 91 ce 0e 	lds	r21, 0x0ECE
	SREG = oldSREG;
    849e:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    84a0:	b9 01       	movw	r22, r18
    84a2:	ca 01       	movw	r24, r20
    84a4:	08 95       	ret

000084a6 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    84a6:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    84a8:	f8 94       	cli
	m = timer0_overflow_count;
    84aa:	20 91 c7 0e 	lds	r18, 0x0EC7
    84ae:	30 91 c8 0e 	lds	r19, 0x0EC8
    84b2:	40 91 c9 0e 	lds	r20, 0x0EC9
    84b6:	50 91 ca 0e 	lds	r21, 0x0ECA
#if defined(TCNT0)
	t = TCNT0;
    84ba:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    84bc:	a8 9b       	sbis	0x15, 0	; 21
    84be:	06 c0       	rjmp	.+12     	; 0x84cc <micros+0x26>
    84c0:	8f 3f       	cpi	r24, 0xFF	; 255
    84c2:	21 f0       	breq	.+8      	; 0x84cc <micros+0x26>
		m++;
    84c4:	2f 5f       	subi	r18, 0xFF	; 255
    84c6:	3f 4f       	sbci	r19, 0xFF	; 255
    84c8:	4f 4f       	sbci	r20, 0xFF	; 255
    84ca:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    84cc:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    84ce:	54 2f       	mov	r21, r20
    84d0:	43 2f       	mov	r20, r19
    84d2:	32 2f       	mov	r19, r18
    84d4:	22 27       	eor	r18, r18
    84d6:	28 0f       	add	r18, r24
    84d8:	31 1d       	adc	r19, r1
    84da:	41 1d       	adc	r20, r1
    84dc:	51 1d       	adc	r21, r1
    84de:	82 e0       	ldi	r24, 0x02	; 2
    84e0:	22 0f       	add	r18, r18
    84e2:	33 1f       	adc	r19, r19
    84e4:	44 1f       	adc	r20, r20
    84e6:	55 1f       	adc	r21, r21
    84e8:	8a 95       	dec	r24
    84ea:	d1 f7       	brne	.-12     	; 0x84e0 <micros+0x3a>
}
    84ec:	b9 01       	movw	r22, r18
    84ee:	ca 01       	movw	r24, r20
    84f0:	08 95       	ret

000084f2 <delay>:

void delay(unsigned long ms)
{
    84f2:	ef 92       	push	r14
    84f4:	ff 92       	push	r15
    84f6:	0f 93       	push	r16
    84f8:	1f 93       	push	r17
    84fa:	cf 93       	push	r28
    84fc:	df 93       	push	r29
    84fe:	7b 01       	movw	r14, r22
    8500:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    8502:	0e 94 53 42 	call	0x84a6	; 0x84a6 <micros>
    8506:	eb 01       	movw	r28, r22

	while (ms > 0) {
    8508:	0f c0       	rjmp	.+30     	; 0x8528 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
    850a:	0e 94 53 42 	call	0x84a6	; 0x84a6 <micros>
    850e:	6c 1b       	sub	r22, r28
    8510:	7d 0b       	sbc	r23, r29
    8512:	83 e0       	ldi	r24, 0x03	; 3
    8514:	68 3e       	cpi	r22, 0xE8	; 232
    8516:	78 07       	cpc	r23, r24
    8518:	38 f0       	brcs	.+14     	; 0x8528 <delay+0x36>
			ms--;
    851a:	08 94       	sec
    851c:	e1 08       	sbc	r14, r1
    851e:	f1 08       	sbc	r15, r1
    8520:	01 09       	sbc	r16, r1
    8522:	11 09       	sbc	r17, r1
			start += 1000;
    8524:	c8 51       	subi	r28, 0x18	; 24
    8526:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    8528:	e1 14       	cp	r14, r1
    852a:	f1 04       	cpc	r15, r1
    852c:	01 05       	cpc	r16, r1
    852e:	11 05       	cpc	r17, r1
    8530:	61 f7       	brne	.-40     	; 0x850a <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    8532:	df 91       	pop	r29
    8534:	cf 91       	pop	r28
    8536:	1f 91       	pop	r17
    8538:	0f 91       	pop	r16
    853a:	ff 90       	pop	r15
    853c:	ef 90       	pop	r14
    853e:	08 95       	ret

00008540 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    8540:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    8542:	84 b5       	in	r24, 0x24	; 36
    8544:	82 60       	ori	r24, 0x02	; 2
    8546:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    8548:	84 b5       	in	r24, 0x24	; 36
    854a:	81 60       	ori	r24, 0x01	; 1
    854c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    854e:	85 b5       	in	r24, 0x25	; 37
    8550:	82 60       	ori	r24, 0x02	; 2
    8552:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    8554:	85 b5       	in	r24, 0x25	; 37
    8556:	81 60       	ori	r24, 0x01	; 1
    8558:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    855a:	ee e6       	ldi	r30, 0x6E	; 110
    855c:	f0 e0       	ldi	r31, 0x00	; 0
    855e:	80 81       	ld	r24, Z
    8560:	81 60       	ori	r24, 0x01	; 1
    8562:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    8564:	e1 e8       	ldi	r30, 0x81	; 129
    8566:	f0 e0       	ldi	r31, 0x00	; 0
    8568:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    856a:	80 81       	ld	r24, Z
    856c:	82 60       	ori	r24, 0x02	; 2
    856e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    8570:	80 81       	ld	r24, Z
    8572:	81 60       	ori	r24, 0x01	; 1
    8574:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    8576:	e0 e8       	ldi	r30, 0x80	; 128
    8578:	f0 e0       	ldi	r31, 0x00	; 0
    857a:	80 81       	ld	r24, Z
    857c:	81 60       	ori	r24, 0x01	; 1
    857e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    8580:	e1 eb       	ldi	r30, 0xB1	; 177
    8582:	f0 e0       	ldi	r31, 0x00	; 0
    8584:	80 81       	ld	r24, Z
    8586:	84 60       	ori	r24, 0x04	; 4
    8588:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    858a:	e0 eb       	ldi	r30, 0xB0	; 176
    858c:	f0 e0       	ldi	r31, 0x00	; 0
    858e:	80 81       	ld	r24, Z
    8590:	81 60       	ori	r24, 0x01	; 1
    8592:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    8594:	e1 e9       	ldi	r30, 0x91	; 145
    8596:	f0 e0       	ldi	r31, 0x00	; 0
    8598:	80 81       	ld	r24, Z
    859a:	82 60       	ori	r24, 0x02	; 2
    859c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    859e:	80 81       	ld	r24, Z
    85a0:	81 60       	ori	r24, 0x01	; 1
    85a2:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    85a4:	e0 e9       	ldi	r30, 0x90	; 144
    85a6:	f0 e0       	ldi	r31, 0x00	; 0
    85a8:	80 81       	ld	r24, Z
    85aa:	81 60       	ori	r24, 0x01	; 1
    85ac:	80 83       	st	Z, r24
#endif
	
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    85ae:	e1 ea       	ldi	r30, 0xA1	; 161
    85b0:	f0 e0       	ldi	r31, 0x00	; 0
    85b2:	80 81       	ld	r24, Z
    85b4:	82 60       	ori	r24, 0x02	; 2
    85b6:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    85b8:	80 81       	ld	r24, Z
    85ba:	81 60       	ori	r24, 0x01	; 1
    85bc:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    85be:	e0 ea       	ldi	r30, 0xA0	; 160
    85c0:	f0 e0       	ldi	r31, 0x00	; 0
    85c2:	80 81       	ld	r24, Z
    85c4:	81 60       	ori	r24, 0x01	; 1
    85c6:	80 83       	st	Z, r24
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    85c8:	e1 e2       	ldi	r30, 0x21	; 33
    85ca:	f1 e0       	ldi	r31, 0x01	; 1
    85cc:	80 81       	ld	r24, Z
    85ce:	82 60       	ori	r24, 0x02	; 2
    85d0:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    85d2:	80 81       	ld	r24, Z
    85d4:	81 60       	ori	r24, 0x01	; 1
    85d6:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    85d8:	e0 e2       	ldi	r30, 0x20	; 32
    85da:	f1 e0       	ldi	r31, 0x01	; 1
    85dc:	80 81       	ld	r24, Z
    85de:	81 60       	ori	r24, 0x01	; 1
    85e0:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    85e2:	ea e7       	ldi	r30, 0x7A	; 122
    85e4:	f0 e0       	ldi	r31, 0x00	; 0
    85e6:	80 81       	ld	r24, Z
    85e8:	84 60       	ori	r24, 0x04	; 4
    85ea:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    85ec:	80 81       	ld	r24, Z
    85ee:	82 60       	ori	r24, 0x02	; 2
    85f0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    85f2:	80 81       	ld	r24, Z
    85f4:	81 60       	ori	r24, 0x01	; 1
    85f6:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    85f8:	80 81       	ld	r24, Z
    85fa:	80 68       	ori	r24, 0x80	; 128
    85fc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    85fe:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    8602:	08 95       	ret

00008604 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    8604:	89 30       	cpi	r24, 0x09	; 9
    8606:	09 f4       	brne	.+2      	; 0x860a <turnOffPWM+0x6>
    8608:	49 c0       	rjmp	.+146    	; 0x869c <turnOffPWM+0x98>
    860a:	8a 30       	cpi	r24, 0x0A	; 10
    860c:	a0 f4       	brcc	.+40     	; 0x8636 <turnOffPWM+0x32>
    860e:	84 30       	cpi	r24, 0x04	; 4
    8610:	51 f1       	breq	.+84     	; 0x8666 <turnOffPWM+0x62>
    8612:	85 30       	cpi	r24, 0x05	; 5
    8614:	40 f4       	brcc	.+16     	; 0x8626 <turnOffPWM+0x22>
    8616:	82 30       	cpi	r24, 0x02	; 2
    8618:	79 f1       	breq	.+94     	; 0x8678 <turnOffPWM+0x74>
    861a:	83 30       	cpi	r24, 0x03	; 3
    861c:	00 f5       	brcc	.+64     	; 0x865e <turnOffPWM+0x5a>
    861e:	81 30       	cpi	r24, 0x01	; 1
    8620:	09 f0       	breq	.+2      	; 0x8624 <turnOffPWM+0x20>
    8622:	63 c0       	rjmp	.+198    	; 0x86ea <turnOffPWM+0xe6>
    8624:	26 c0       	rjmp	.+76     	; 0x8672 <turnOffPWM+0x6e>
    8626:	87 30       	cpi	r24, 0x07	; 7
    8628:	79 f1       	breq	.+94     	; 0x8688 <turnOffPWM+0x84>
    862a:	88 30       	cpi	r24, 0x08	; 8
    862c:	98 f5       	brcc	.+102    	; 0x8694 <turnOffPWM+0x90>
    862e:	86 30       	cpi	r24, 0x06	; 6
    8630:	09 f0       	breq	.+2      	; 0x8634 <turnOffPWM+0x30>
    8632:	5b c0       	rjmp	.+182    	; 0x86ea <turnOffPWM+0xe6>
    8634:	25 c0       	rjmp	.+74     	; 0x8680 <turnOffPWM+0x7c>
    8636:	8d 30       	cpi	r24, 0x0D	; 13
    8638:	09 f4       	brne	.+2      	; 0x863c <turnOffPWM+0x38>
    863a:	42 c0       	rjmp	.+132    	; 0x86c0 <turnOffPWM+0xbc>
    863c:	8e 30       	cpi	r24, 0x0E	; 14
    863e:	28 f4       	brcc	.+10     	; 0x864a <turnOffPWM+0x46>
    8640:	8b 30       	cpi	r24, 0x0B	; 11
    8642:	b1 f1       	breq	.+108    	; 0x86b0 <turnOffPWM+0xac>
    8644:	8c 30       	cpi	r24, 0x0C	; 12
    8646:	c0 f5       	brcc	.+112    	; 0x86b8 <turnOffPWM+0xb4>
    8648:	2d c0       	rjmp	.+90     	; 0x86a4 <turnOffPWM+0xa0>
    864a:	80 31       	cpi	r24, 0x10	; 16
    864c:	09 f4       	brne	.+2      	; 0x8650 <turnOffPWM+0x4c>
    864e:	42 c0       	rjmp	.+132    	; 0x86d4 <turnOffPWM+0xd0>
    8650:	81 31       	cpi	r24, 0x11	; 17
    8652:	09 f4       	brne	.+2      	; 0x8656 <turnOffPWM+0x52>
    8654:	45 c0       	rjmp	.+138    	; 0x86e0 <turnOffPWM+0xdc>
    8656:	8f 30       	cpi	r24, 0x0F	; 15
    8658:	09 f0       	breq	.+2      	; 0x865c <turnOffPWM+0x58>
    865a:	47 c0       	rjmp	.+142    	; 0x86ea <turnOffPWM+0xe6>
    865c:	37 c0       	rjmp	.+110    	; 0x86cc <turnOffPWM+0xc8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    865e:	80 91 80 00 	lds	r24, 0x0080
    8662:	8f 77       	andi	r24, 0x7F	; 127
    8664:	03 c0       	rjmp	.+6      	; 0x866c <turnOffPWM+0x68>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    8666:	80 91 80 00 	lds	r24, 0x0080
    866a:	8f 7d       	andi	r24, 0xDF	; 223
    866c:	80 93 80 00 	sts	0x0080, r24
    8670:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    8672:	84 b5       	in	r24, 0x24	; 36
    8674:	8f 77       	andi	r24, 0x7F	; 127
    8676:	02 c0       	rjmp	.+4      	; 0x867c <turnOffPWM+0x78>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    8678:	84 b5       	in	r24, 0x24	; 36
    867a:	8f 7d       	andi	r24, 0xDF	; 223
    867c:	84 bd       	out	0x24, r24	; 36
    867e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    8680:	80 91 b0 00 	lds	r24, 0x00B0
    8684:	8f 77       	andi	r24, 0x7F	; 127
    8686:	03 c0       	rjmp	.+6      	; 0x868e <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    8688:	80 91 b0 00 	lds	r24, 0x00B0
    868c:	8f 7d       	andi	r24, 0xDF	; 223
    868e:	80 93 b0 00 	sts	0x00B0, r24
    8692:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    8694:	80 91 90 00 	lds	r24, 0x0090
    8698:	8f 77       	andi	r24, 0x7F	; 127
    869a:	07 c0       	rjmp	.+14     	; 0x86aa <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    869c:	80 91 90 00 	lds	r24, 0x0090
    86a0:	8f 7d       	andi	r24, 0xDF	; 223
    86a2:	03 c0       	rjmp	.+6      	; 0x86aa <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    86a4:	80 91 90 00 	lds	r24, 0x0090
    86a8:	87 7f       	andi	r24, 0xF7	; 247
    86aa:	80 93 90 00 	sts	0x0090, r24
    86ae:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    86b0:	80 91 a0 00 	lds	r24, 0x00A0
    86b4:	8f 77       	andi	r24, 0x7F	; 127
    86b6:	07 c0       	rjmp	.+14     	; 0x86c6 <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    86b8:	80 91 a0 00 	lds	r24, 0x00A0
    86bc:	8f 7d       	andi	r24, 0xDF	; 223
    86be:	03 c0       	rjmp	.+6      	; 0x86c6 <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    86c0:	80 91 a0 00 	lds	r24, 0x00A0
    86c4:	87 7f       	andi	r24, 0xF7	; 247
    86c6:	80 93 a0 00 	sts	0x00A0, r24
    86ca:	08 95       	ret
		#endif
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    86cc:	80 91 20 01 	lds	r24, 0x0120
    86d0:	8f 77       	andi	r24, 0x7F	; 127
    86d2:	03 c0       	rjmp	.+6      	; 0x86da <turnOffPWM+0xd6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    86d4:	80 91 20 01 	lds	r24, 0x0120
    86d8:	8f 7d       	andi	r24, 0xDF	; 223
    86da:	80 93 20 01 	sts	0x0120, r24
    86de:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    86e0:	80 91 20 01 	lds	r24, 0x0120
    86e4:	87 7f       	andi	r24, 0xF7	; 247
    86e6:	80 93 20 01 	sts	0x0120, r24
    86ea:	08 95       	ret

000086ec <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    86ec:	90 e0       	ldi	r25, 0x00	; 0
    86ee:	fc 01       	movw	r30, r24
    86f0:	ed 5a       	subi	r30, 0xAD	; 173
    86f2:	fd 4f       	sbci	r31, 0xFD	; 253
    86f4:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    86f6:	fc 01       	movw	r30, r24
    86f8:	e3 5f       	subi	r30, 0xF3	; 243
    86fa:	fd 4f       	sbci	r31, 0xFD	; 253
    86fc:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    86fe:	ee 23       	and	r30, r30
    8700:	c1 f0       	breq	.+48     	; 0x8732 <pinMode+0x46>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    8702:	f0 e0       	ldi	r31, 0x00	; 0
    8704:	ee 0f       	add	r30, r30
    8706:	ff 1f       	adc	r31, r31
    8708:	e1 54       	subi	r30, 0x41	; 65
    870a:	fe 4f       	sbci	r31, 0xFE	; 254
    870c:	85 91       	lpm	r24, Z+
    870e:	94 91       	lpm	r25, Z+
    8710:	dc 01       	movw	r26, r24

	if (mode == INPUT) { 
    8712:	66 23       	and	r22, r22
    8714:	41 f4       	brne	.+16     	; 0x8726 <pinMode+0x3a>
		uint8_t oldSREG = SREG;
    8716:	9f b7       	in	r25, 0x3f	; 63
                cli();
    8718:	f8 94       	cli
		*reg &= ~bit;
    871a:	8c 91       	ld	r24, X
    871c:	20 95       	com	r18
    871e:	82 23       	and	r24, r18
    8720:	8c 93       	st	X, r24
		SREG = oldSREG;
    8722:	9f bf       	out	0x3f, r25	; 63
    8724:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    8726:	9f b7       	in	r25, 0x3f	; 63
                cli();
    8728:	f8 94       	cli
		*reg |= bit;
    872a:	8c 91       	ld	r24, X
    872c:	82 2b       	or	r24, r18
    872e:	8c 93       	st	X, r24
		SREG = oldSREG;
    8730:	9f bf       	out	0x3f, r25	; 63
    8732:	08 95       	ret

00008734 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    8734:	0f 93       	push	r16
    8736:	1f 93       	push	r17
    8738:	df 93       	push	r29
    873a:	cf 93       	push	r28
    873c:	0f 92       	push	r0
    873e:	cd b7       	in	r28, 0x3d	; 61
    8740:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    8742:	28 2f       	mov	r18, r24
    8744:	30 e0       	ldi	r19, 0x00	; 0
    8746:	f9 01       	movw	r30, r18
    8748:	e7 56       	subi	r30, 0x67	; 103
    874a:	fd 4f       	sbci	r31, 0xFD	; 253
    874c:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    874e:	f9 01       	movw	r30, r18
    8750:	ed 5a       	subi	r30, 0xAD	; 173
    8752:	fd 4f       	sbci	r31, 0xFD	; 253
    8754:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    8756:	23 5f       	subi	r18, 0xF3	; 243
    8758:	3d 4f       	sbci	r19, 0xFD	; 253
    875a:	f9 01       	movw	r30, r18
    875c:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    875e:	00 23       	and	r16, r16
    8760:	d9 f0       	breq	.+54     	; 0x8798 <digitalWrite+0x64>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    8762:	88 23       	and	r24, r24
    8764:	21 f0       	breq	.+8      	; 0x876e <digitalWrite+0x3a>
    8766:	69 83       	std	Y+1, r22	; 0x01
    8768:	0e 94 02 43 	call	0x8604	; 0x8604 <turnOffPWM>
    876c:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    876e:	e0 2f       	mov	r30, r16
    8770:	f0 e0       	ldi	r31, 0x00	; 0
    8772:	ee 0f       	add	r30, r30
    8774:	ff 1f       	adc	r31, r31
    8776:	e7 52       	subi	r30, 0x27	; 39
    8778:	fe 4f       	sbci	r31, 0xFE	; 254
    877a:	85 91       	lpm	r24, Z+
    877c:	94 91       	lpm	r25, Z+
    877e:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    8780:	9f b7       	in	r25, 0x3f	; 63
	cli();
    8782:	f8 94       	cli

	if (val == LOW) {
    8784:	66 23       	and	r22, r22
    8786:	21 f4       	brne	.+8      	; 0x8790 <digitalWrite+0x5c>
		*out &= ~bit;
    8788:	8c 91       	ld	r24, X
    878a:	10 95       	com	r17
    878c:	81 23       	and	r24, r17
    878e:	02 c0       	rjmp	.+4      	; 0x8794 <digitalWrite+0x60>
	} else {
		*out |= bit;
    8790:	8c 91       	ld	r24, X
    8792:	81 2b       	or	r24, r17
    8794:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    8796:	9f bf       	out	0x3f, r25	; 63
}
    8798:	0f 90       	pop	r0
    879a:	cf 91       	pop	r28
    879c:	df 91       	pop	r29
    879e:	1f 91       	pop	r17
    87a0:	0f 91       	pop	r16
    87a2:	08 95       	ret

000087a4 <__subsf3>:
    87a4:	50 58       	subi	r21, 0x80	; 128

000087a6 <__addsf3>:
    87a6:	bb 27       	eor	r27, r27
    87a8:	aa 27       	eor	r26, r26
    87aa:	0e d0       	rcall	.+28     	; 0x87c8 <__addsf3x>
    87ac:	63 c2       	rjmp	.+1222   	; 0x8c74 <__fp_round>
    87ae:	2c d2       	rcall	.+1112   	; 0x8c08 <__fp_pscA>
    87b0:	30 f0       	brcs	.+12     	; 0x87be <__addsf3+0x18>
    87b2:	31 d2       	rcall	.+1122   	; 0x8c16 <__fp_pscB>
    87b4:	20 f0       	brcs	.+8      	; 0x87be <__addsf3+0x18>
    87b6:	31 f4       	brne	.+12     	; 0x87c4 <__addsf3+0x1e>
    87b8:	9f 3f       	cpi	r25, 0xFF	; 255
    87ba:	11 f4       	brne	.+4      	; 0x87c0 <__addsf3+0x1a>
    87bc:	1e f4       	brtc	.+6      	; 0x87c4 <__addsf3+0x1e>
    87be:	fc c1       	rjmp	.+1016   	; 0x8bb8 <__fp_nan>
    87c0:	0e f4       	brtc	.+2      	; 0x87c4 <__addsf3+0x1e>
    87c2:	e0 95       	com	r30
    87c4:	e7 fb       	bst	r30, 7
    87c6:	c9 c1       	rjmp	.+914    	; 0x8b5a <__fp_inf>

000087c8 <__addsf3x>:
    87c8:	e9 2f       	mov	r30, r25
    87ca:	76 d2       	rcall	.+1260   	; 0x8cb8 <__fp_split3>
    87cc:	80 f3       	brcs	.-32     	; 0x87ae <__addsf3+0x8>
    87ce:	ba 17       	cp	r27, r26
    87d0:	62 07       	cpc	r22, r18
    87d2:	73 07       	cpc	r23, r19
    87d4:	84 07       	cpc	r24, r20
    87d6:	95 07       	cpc	r25, r21
    87d8:	18 f0       	brcs	.+6      	; 0x87e0 <__addsf3x+0x18>
    87da:	71 f4       	brne	.+28     	; 0x87f8 <__addsf3x+0x30>
    87dc:	9e f5       	brtc	.+102    	; 0x8844 <__addsf3x+0x7c>
    87de:	a5 c2       	rjmp	.+1354   	; 0x8d2a <__fp_zero>
    87e0:	0e f4       	brtc	.+2      	; 0x87e4 <__addsf3x+0x1c>
    87e2:	e0 95       	com	r30
    87e4:	0b 2e       	mov	r0, r27
    87e6:	ba 2f       	mov	r27, r26
    87e8:	a0 2d       	mov	r26, r0
    87ea:	0b 01       	movw	r0, r22
    87ec:	b9 01       	movw	r22, r18
    87ee:	90 01       	movw	r18, r0
    87f0:	0c 01       	movw	r0, r24
    87f2:	ca 01       	movw	r24, r20
    87f4:	a0 01       	movw	r20, r0
    87f6:	11 24       	eor	r1, r1
    87f8:	ff 27       	eor	r31, r31
    87fa:	59 1b       	sub	r21, r25
    87fc:	99 f0       	breq	.+38     	; 0x8824 <__addsf3x+0x5c>
    87fe:	59 3f       	cpi	r21, 0xF9	; 249
    8800:	50 f4       	brcc	.+20     	; 0x8816 <__addsf3x+0x4e>
    8802:	50 3e       	cpi	r21, 0xE0	; 224
    8804:	68 f1       	brcs	.+90     	; 0x8860 <__addsf3x+0x98>
    8806:	1a 16       	cp	r1, r26
    8808:	f0 40       	sbci	r31, 0x00	; 0
    880a:	a2 2f       	mov	r26, r18
    880c:	23 2f       	mov	r18, r19
    880e:	34 2f       	mov	r19, r20
    8810:	44 27       	eor	r20, r20
    8812:	58 5f       	subi	r21, 0xF8	; 248
    8814:	f3 cf       	rjmp	.-26     	; 0x87fc <__addsf3x+0x34>
    8816:	46 95       	lsr	r20
    8818:	37 95       	ror	r19
    881a:	27 95       	ror	r18
    881c:	a7 95       	ror	r26
    881e:	f0 40       	sbci	r31, 0x00	; 0
    8820:	53 95       	inc	r21
    8822:	c9 f7       	brne	.-14     	; 0x8816 <__addsf3x+0x4e>
    8824:	7e f4       	brtc	.+30     	; 0x8844 <__addsf3x+0x7c>
    8826:	1f 16       	cp	r1, r31
    8828:	ba 0b       	sbc	r27, r26
    882a:	62 0b       	sbc	r22, r18
    882c:	73 0b       	sbc	r23, r19
    882e:	84 0b       	sbc	r24, r20
    8830:	ba f0       	brmi	.+46     	; 0x8860 <__addsf3x+0x98>
    8832:	91 50       	subi	r25, 0x01	; 1
    8834:	a1 f0       	breq	.+40     	; 0x885e <__addsf3x+0x96>
    8836:	ff 0f       	add	r31, r31
    8838:	bb 1f       	adc	r27, r27
    883a:	66 1f       	adc	r22, r22
    883c:	77 1f       	adc	r23, r23
    883e:	88 1f       	adc	r24, r24
    8840:	c2 f7       	brpl	.-16     	; 0x8832 <__addsf3x+0x6a>
    8842:	0e c0       	rjmp	.+28     	; 0x8860 <__addsf3x+0x98>
    8844:	ba 0f       	add	r27, r26
    8846:	62 1f       	adc	r22, r18
    8848:	73 1f       	adc	r23, r19
    884a:	84 1f       	adc	r24, r20
    884c:	48 f4       	brcc	.+18     	; 0x8860 <__addsf3x+0x98>
    884e:	87 95       	ror	r24
    8850:	77 95       	ror	r23
    8852:	67 95       	ror	r22
    8854:	b7 95       	ror	r27
    8856:	f7 95       	ror	r31
    8858:	9e 3f       	cpi	r25, 0xFE	; 254
    885a:	08 f0       	brcs	.+2      	; 0x885e <__addsf3x+0x96>
    885c:	b3 cf       	rjmp	.-154    	; 0x87c4 <__addsf3+0x1e>
    885e:	93 95       	inc	r25
    8860:	88 0f       	add	r24, r24
    8862:	08 f0       	brcs	.+2      	; 0x8866 <__addsf3x+0x9e>
    8864:	99 27       	eor	r25, r25
    8866:	ee 0f       	add	r30, r30
    8868:	97 95       	ror	r25
    886a:	87 95       	ror	r24
    886c:	08 95       	ret
    886e:	cc d1       	rcall	.+920    	; 0x8c08 <__fp_pscA>
    8870:	58 f0       	brcs	.+22     	; 0x8888 <__addsf3x+0xc0>
    8872:	80 e8       	ldi	r24, 0x80	; 128
    8874:	91 e0       	ldi	r25, 0x01	; 1
    8876:	09 f4       	brne	.+2      	; 0x887a <__addsf3x+0xb2>
    8878:	9e ef       	ldi	r25, 0xFE	; 254
    887a:	cd d1       	rcall	.+922    	; 0x8c16 <__fp_pscB>
    887c:	28 f0       	brcs	.+10     	; 0x8888 <__addsf3x+0xc0>
    887e:	40 e8       	ldi	r20, 0x80	; 128
    8880:	51 e0       	ldi	r21, 0x01	; 1
    8882:	59 f4       	brne	.+22     	; 0x889a <atan2+0xe>
    8884:	5e ef       	ldi	r21, 0xFE	; 254
    8886:	09 c0       	rjmp	.+18     	; 0x889a <atan2+0xe>
    8888:	97 c1       	rjmp	.+814    	; 0x8bb8 <__fp_nan>
    888a:	4f c2       	rjmp	.+1182   	; 0x8d2a <__fp_zero>

0000888c <atan2>:
    888c:	e9 2f       	mov	r30, r25
    888e:	e0 78       	andi	r30, 0x80	; 128
    8890:	13 d2       	rcall	.+1062   	; 0x8cb8 <__fp_split3>
    8892:	68 f3       	brcs	.-38     	; 0x886e <__addsf3x+0xa6>
    8894:	09 2e       	mov	r0, r25
    8896:	05 2a       	or	r0, r21
    8898:	c1 f3       	breq	.-16     	; 0x888a <__addsf3x+0xc2>
    889a:	26 17       	cp	r18, r22
    889c:	37 07       	cpc	r19, r23
    889e:	48 07       	cpc	r20, r24
    88a0:	59 07       	cpc	r21, r25
    88a2:	38 f0       	brcs	.+14     	; 0x88b2 <atan2+0x26>
    88a4:	0e 2e       	mov	r0, r30
    88a6:	07 f8       	bld	r0, 7
    88a8:	e0 25       	eor	r30, r0
    88aa:	69 f0       	breq	.+26     	; 0x88c6 <atan2+0x3a>
    88ac:	e0 25       	eor	r30, r0
    88ae:	e0 64       	ori	r30, 0x40	; 64
    88b0:	0a c0       	rjmp	.+20     	; 0x88c6 <atan2+0x3a>
    88b2:	ef 63       	ori	r30, 0x3F	; 63
    88b4:	07 f8       	bld	r0, 7
    88b6:	00 94       	com	r0
    88b8:	07 fa       	bst	r0, 7
    88ba:	db 01       	movw	r26, r22
    88bc:	b9 01       	movw	r22, r18
    88be:	9d 01       	movw	r18, r26
    88c0:	dc 01       	movw	r26, r24
    88c2:	ca 01       	movw	r24, r20
    88c4:	ad 01       	movw	r20, r26
    88c6:	ef 93       	push	r30
    88c8:	4a d0       	rcall	.+148    	; 0x895e <__divsf3_pse>
    88ca:	d4 d1       	rcall	.+936    	; 0x8c74 <__fp_round>
    88cc:	0a d0       	rcall	.+20     	; 0x88e2 <atan>
    88ce:	5f 91       	pop	r21
    88d0:	55 23       	and	r21, r21
    88d2:	31 f0       	breq	.+12     	; 0x88e0 <atan2+0x54>
    88d4:	2b ed       	ldi	r18, 0xDB	; 219
    88d6:	3f e0       	ldi	r19, 0x0F	; 15
    88d8:	49 e4       	ldi	r20, 0x49	; 73
    88da:	50 fd       	sbrc	r21, 0
    88dc:	49 ec       	ldi	r20, 0xC9	; 201
    88de:	63 cf       	rjmp	.-314    	; 0x87a6 <__addsf3>
    88e0:	08 95       	ret

000088e2 <atan>:
    88e2:	df 93       	push	r29
    88e4:	dd 27       	eor	r29, r29
    88e6:	b9 2f       	mov	r27, r25
    88e8:	bf 77       	andi	r27, 0x7F	; 127
    88ea:	40 e8       	ldi	r20, 0x80	; 128
    88ec:	5f e3       	ldi	r21, 0x3F	; 63
    88ee:	16 16       	cp	r1, r22
    88f0:	17 06       	cpc	r1, r23
    88f2:	48 07       	cpc	r20, r24
    88f4:	5b 07       	cpc	r21, r27
    88f6:	10 f4       	brcc	.+4      	; 0x88fc <atan+0x1a>
    88f8:	d9 2f       	mov	r29, r25
    88fa:	22 d2       	rcall	.+1092   	; 0x8d40 <inverse>
    88fc:	9f 93       	push	r25
    88fe:	8f 93       	push	r24
    8900:	7f 93       	push	r23
    8902:	6f 93       	push	r22
    8904:	cf d2       	rcall	.+1438   	; 0x8ea4 <square>
    8906:	e4 ee       	ldi	r30, 0xE4	; 228
    8908:	f0 e0       	ldi	r31, 0x00	; 0
    890a:	59 d1       	rcall	.+690    	; 0x8bbe <__fp_powser>
    890c:	b3 d1       	rcall	.+870    	; 0x8c74 <__fp_round>
    890e:	2f 91       	pop	r18
    8910:	3f 91       	pop	r19
    8912:	4f 91       	pop	r20
    8914:	5f 91       	pop	r21
    8916:	27 d2       	rcall	.+1102   	; 0x8d66 <__mulsf3x>
    8918:	dd 23       	and	r29, r29
    891a:	49 f0       	breq	.+18     	; 0x892e <atan+0x4c>
    891c:	90 58       	subi	r25, 0x80	; 128
    891e:	a2 ea       	ldi	r26, 0xA2	; 162
    8920:	2a ed       	ldi	r18, 0xDA	; 218
    8922:	3f e0       	ldi	r19, 0x0F	; 15
    8924:	49 ec       	ldi	r20, 0xC9	; 201
    8926:	5f e3       	ldi	r21, 0x3F	; 63
    8928:	d0 78       	andi	r29, 0x80	; 128
    892a:	5d 27       	eor	r21, r29
    892c:	4d df       	rcall	.-358    	; 0x87c8 <__addsf3x>
    892e:	df 91       	pop	r29
    8930:	a1 c1       	rjmp	.+834    	; 0x8c74 <__fp_round>

00008932 <__cmpsf2>:
    8932:	ef d0       	rcall	.+478    	; 0x8b12 <__fp_cmp>
    8934:	08 f4       	brcc	.+2      	; 0x8938 <__cmpsf2+0x6>
    8936:	81 e0       	ldi	r24, 0x01	; 1
    8938:	08 95       	ret

0000893a <cos>:
    893a:	75 d1       	rcall	.+746    	; 0x8c26 <__fp_rempio2>
    893c:	e3 95       	inc	r30
    893e:	ab c1       	rjmp	.+854    	; 0x8c96 <__fp_sinus>

00008940 <__divsf3>:
    8940:	0c d0       	rcall	.+24     	; 0x895a <__divsf3x>
    8942:	98 c1       	rjmp	.+816    	; 0x8c74 <__fp_round>
    8944:	68 d1       	rcall	.+720    	; 0x8c16 <__fp_pscB>
    8946:	40 f0       	brcs	.+16     	; 0x8958 <__divsf3+0x18>
    8948:	5f d1       	rcall	.+702    	; 0x8c08 <__fp_pscA>
    894a:	30 f0       	brcs	.+12     	; 0x8958 <__divsf3+0x18>
    894c:	21 f4       	brne	.+8      	; 0x8956 <__divsf3+0x16>
    894e:	5f 3f       	cpi	r21, 0xFF	; 255
    8950:	19 f0       	breq	.+6      	; 0x8958 <__divsf3+0x18>
    8952:	03 c1       	rjmp	.+518    	; 0x8b5a <__fp_inf>
    8954:	51 11       	cpse	r21, r1
    8956:	ea c1       	rjmp	.+980    	; 0x8d2c <__fp_szero>
    8958:	2f c1       	rjmp	.+606    	; 0x8bb8 <__fp_nan>

0000895a <__divsf3x>:
    895a:	ae d1       	rcall	.+860    	; 0x8cb8 <__fp_split3>
    895c:	98 f3       	brcs	.-26     	; 0x8944 <__divsf3+0x4>

0000895e <__divsf3_pse>:
    895e:	99 23       	and	r25, r25
    8960:	c9 f3       	breq	.-14     	; 0x8954 <__divsf3+0x14>
    8962:	55 23       	and	r21, r21
    8964:	b1 f3       	breq	.-20     	; 0x8952 <__divsf3+0x12>
    8966:	95 1b       	sub	r25, r21
    8968:	55 0b       	sbc	r21, r21
    896a:	bb 27       	eor	r27, r27
    896c:	aa 27       	eor	r26, r26
    896e:	62 17       	cp	r22, r18
    8970:	73 07       	cpc	r23, r19
    8972:	84 07       	cpc	r24, r20
    8974:	38 f0       	brcs	.+14     	; 0x8984 <__divsf3_pse+0x26>
    8976:	9f 5f       	subi	r25, 0xFF	; 255
    8978:	5f 4f       	sbci	r21, 0xFF	; 255
    897a:	22 0f       	add	r18, r18
    897c:	33 1f       	adc	r19, r19
    897e:	44 1f       	adc	r20, r20
    8980:	aa 1f       	adc	r26, r26
    8982:	a9 f3       	breq	.-22     	; 0x896e <__divsf3_pse+0x10>
    8984:	33 d0       	rcall	.+102    	; 0x89ec <__divsf3_pse+0x8e>
    8986:	0e 2e       	mov	r0, r30
    8988:	3a f0       	brmi	.+14     	; 0x8998 <__divsf3_pse+0x3a>
    898a:	e0 e8       	ldi	r30, 0x80	; 128
    898c:	30 d0       	rcall	.+96     	; 0x89ee <__divsf3_pse+0x90>
    898e:	91 50       	subi	r25, 0x01	; 1
    8990:	50 40       	sbci	r21, 0x00	; 0
    8992:	e6 95       	lsr	r30
    8994:	00 1c       	adc	r0, r0
    8996:	ca f7       	brpl	.-14     	; 0x898a <__divsf3_pse+0x2c>
    8998:	29 d0       	rcall	.+82     	; 0x89ec <__divsf3_pse+0x8e>
    899a:	fe 2f       	mov	r31, r30
    899c:	27 d0       	rcall	.+78     	; 0x89ec <__divsf3_pse+0x8e>
    899e:	66 0f       	add	r22, r22
    89a0:	77 1f       	adc	r23, r23
    89a2:	88 1f       	adc	r24, r24
    89a4:	bb 1f       	adc	r27, r27
    89a6:	26 17       	cp	r18, r22
    89a8:	37 07       	cpc	r19, r23
    89aa:	48 07       	cpc	r20, r24
    89ac:	ab 07       	cpc	r26, r27
    89ae:	b0 e8       	ldi	r27, 0x80	; 128
    89b0:	09 f0       	breq	.+2      	; 0x89b4 <__divsf3_pse+0x56>
    89b2:	bb 0b       	sbc	r27, r27
    89b4:	80 2d       	mov	r24, r0
    89b6:	bf 01       	movw	r22, r30
    89b8:	ff 27       	eor	r31, r31
    89ba:	93 58       	subi	r25, 0x83	; 131
    89bc:	5f 4f       	sbci	r21, 0xFF	; 255
    89be:	2a f0       	brmi	.+10     	; 0x89ca <__divsf3_pse+0x6c>
    89c0:	9e 3f       	cpi	r25, 0xFE	; 254
    89c2:	51 05       	cpc	r21, r1
    89c4:	68 f0       	brcs	.+26     	; 0x89e0 <__divsf3_pse+0x82>
    89c6:	c9 c0       	rjmp	.+402    	; 0x8b5a <__fp_inf>
    89c8:	b1 c1       	rjmp	.+866    	; 0x8d2c <__fp_szero>
    89ca:	5f 3f       	cpi	r21, 0xFF	; 255
    89cc:	ec f3       	brlt	.-6      	; 0x89c8 <__divsf3_pse+0x6a>
    89ce:	98 3e       	cpi	r25, 0xE8	; 232
    89d0:	dc f3       	brlt	.-10     	; 0x89c8 <__divsf3_pse+0x6a>
    89d2:	86 95       	lsr	r24
    89d4:	77 95       	ror	r23
    89d6:	67 95       	ror	r22
    89d8:	b7 95       	ror	r27
    89da:	f7 95       	ror	r31
    89dc:	9f 5f       	subi	r25, 0xFF	; 255
    89de:	c9 f7       	brne	.-14     	; 0x89d2 <__divsf3_pse+0x74>
    89e0:	88 0f       	add	r24, r24
    89e2:	91 1d       	adc	r25, r1
    89e4:	96 95       	lsr	r25
    89e6:	87 95       	ror	r24
    89e8:	97 f9       	bld	r25, 7
    89ea:	08 95       	ret
    89ec:	e1 e0       	ldi	r30, 0x01	; 1
    89ee:	66 0f       	add	r22, r22
    89f0:	77 1f       	adc	r23, r23
    89f2:	88 1f       	adc	r24, r24
    89f4:	bb 1f       	adc	r27, r27
    89f6:	62 17       	cp	r22, r18
    89f8:	73 07       	cpc	r23, r19
    89fa:	84 07       	cpc	r24, r20
    89fc:	ba 07       	cpc	r27, r26
    89fe:	20 f0       	brcs	.+8      	; 0x8a08 <__divsf3_pse+0xaa>
    8a00:	62 1b       	sub	r22, r18
    8a02:	73 0b       	sbc	r23, r19
    8a04:	84 0b       	sbc	r24, r20
    8a06:	ba 0b       	sbc	r27, r26
    8a08:	ee 1f       	adc	r30, r30
    8a0a:	88 f7       	brcc	.-30     	; 0x89ee <__divsf3_pse+0x90>
    8a0c:	e0 95       	com	r30
    8a0e:	08 95       	ret

00008a10 <__fixsfsi>:
    8a10:	04 d0       	rcall	.+8      	; 0x8a1a <__fixunssfsi>
    8a12:	68 94       	set
    8a14:	b1 11       	cpse	r27, r1
    8a16:	8a c1       	rjmp	.+788    	; 0x8d2c <__fp_szero>
    8a18:	08 95       	ret

00008a1a <__fixunssfsi>:
    8a1a:	56 d1       	rcall	.+684    	; 0x8cc8 <__fp_splitA>
    8a1c:	88 f0       	brcs	.+34     	; 0x8a40 <__fixunssfsi+0x26>
    8a1e:	9f 57       	subi	r25, 0x7F	; 127
    8a20:	90 f0       	brcs	.+36     	; 0x8a46 <__fixunssfsi+0x2c>
    8a22:	b9 2f       	mov	r27, r25
    8a24:	99 27       	eor	r25, r25
    8a26:	b7 51       	subi	r27, 0x17	; 23
    8a28:	a0 f0       	brcs	.+40     	; 0x8a52 <__fixunssfsi+0x38>
    8a2a:	d1 f0       	breq	.+52     	; 0x8a60 <__fixunssfsi+0x46>
    8a2c:	66 0f       	add	r22, r22
    8a2e:	77 1f       	adc	r23, r23
    8a30:	88 1f       	adc	r24, r24
    8a32:	99 1f       	adc	r25, r25
    8a34:	1a f0       	brmi	.+6      	; 0x8a3c <__fixunssfsi+0x22>
    8a36:	ba 95       	dec	r27
    8a38:	c9 f7       	brne	.-14     	; 0x8a2c <__fixunssfsi+0x12>
    8a3a:	12 c0       	rjmp	.+36     	; 0x8a60 <__fixunssfsi+0x46>
    8a3c:	b1 30       	cpi	r27, 0x01	; 1
    8a3e:	81 f0       	breq	.+32     	; 0x8a60 <__fixunssfsi+0x46>
    8a40:	74 d1       	rcall	.+744    	; 0x8d2a <__fp_zero>
    8a42:	b1 e0       	ldi	r27, 0x01	; 1
    8a44:	08 95       	ret
    8a46:	71 c1       	rjmp	.+738    	; 0x8d2a <__fp_zero>
    8a48:	67 2f       	mov	r22, r23
    8a4a:	78 2f       	mov	r23, r24
    8a4c:	88 27       	eor	r24, r24
    8a4e:	b8 5f       	subi	r27, 0xF8	; 248
    8a50:	39 f0       	breq	.+14     	; 0x8a60 <__fixunssfsi+0x46>
    8a52:	b9 3f       	cpi	r27, 0xF9	; 249
    8a54:	cc f3       	brlt	.-14     	; 0x8a48 <__fixunssfsi+0x2e>
    8a56:	86 95       	lsr	r24
    8a58:	77 95       	ror	r23
    8a5a:	67 95       	ror	r22
    8a5c:	b3 95       	inc	r27
    8a5e:	d9 f7       	brne	.-10     	; 0x8a56 <__fixunssfsi+0x3c>
    8a60:	3e f4       	brtc	.+14     	; 0x8a70 <__fixunssfsi+0x56>
    8a62:	90 95       	com	r25
    8a64:	80 95       	com	r24
    8a66:	70 95       	com	r23
    8a68:	61 95       	neg	r22
    8a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    8a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    8a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    8a70:	08 95       	ret

00008a72 <__floatunsisf>:
    8a72:	e8 94       	clt
    8a74:	09 c0       	rjmp	.+18     	; 0x8a88 <__floatsisf+0x12>

00008a76 <__floatsisf>:
    8a76:	97 fb       	bst	r25, 7
    8a78:	3e f4       	brtc	.+14     	; 0x8a88 <__floatsisf+0x12>
    8a7a:	90 95       	com	r25
    8a7c:	80 95       	com	r24
    8a7e:	70 95       	com	r23
    8a80:	61 95       	neg	r22
    8a82:	7f 4f       	sbci	r23, 0xFF	; 255
    8a84:	8f 4f       	sbci	r24, 0xFF	; 255
    8a86:	9f 4f       	sbci	r25, 0xFF	; 255
    8a88:	99 23       	and	r25, r25
    8a8a:	a9 f0       	breq	.+42     	; 0x8ab6 <__floatsisf+0x40>
    8a8c:	f9 2f       	mov	r31, r25
    8a8e:	96 e9       	ldi	r25, 0x96	; 150
    8a90:	bb 27       	eor	r27, r27
    8a92:	93 95       	inc	r25
    8a94:	f6 95       	lsr	r31
    8a96:	87 95       	ror	r24
    8a98:	77 95       	ror	r23
    8a9a:	67 95       	ror	r22
    8a9c:	b7 95       	ror	r27
    8a9e:	f1 11       	cpse	r31, r1
    8aa0:	f8 cf       	rjmp	.-16     	; 0x8a92 <__floatsisf+0x1c>
    8aa2:	fa f4       	brpl	.+62     	; 0x8ae2 <__floatsisf+0x6c>
    8aa4:	bb 0f       	add	r27, r27
    8aa6:	11 f4       	brne	.+4      	; 0x8aac <__floatsisf+0x36>
    8aa8:	60 ff       	sbrs	r22, 0
    8aaa:	1b c0       	rjmp	.+54     	; 0x8ae2 <__floatsisf+0x6c>
    8aac:	6f 5f       	subi	r22, 0xFF	; 255
    8aae:	7f 4f       	sbci	r23, 0xFF	; 255
    8ab0:	8f 4f       	sbci	r24, 0xFF	; 255
    8ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    8ab4:	16 c0       	rjmp	.+44     	; 0x8ae2 <__floatsisf+0x6c>
    8ab6:	88 23       	and	r24, r24
    8ab8:	11 f0       	breq	.+4      	; 0x8abe <__floatsisf+0x48>
    8aba:	96 e9       	ldi	r25, 0x96	; 150
    8abc:	11 c0       	rjmp	.+34     	; 0x8ae0 <__floatsisf+0x6a>
    8abe:	77 23       	and	r23, r23
    8ac0:	21 f0       	breq	.+8      	; 0x8aca <__floatsisf+0x54>
    8ac2:	9e e8       	ldi	r25, 0x8E	; 142
    8ac4:	87 2f       	mov	r24, r23
    8ac6:	76 2f       	mov	r23, r22
    8ac8:	05 c0       	rjmp	.+10     	; 0x8ad4 <__floatsisf+0x5e>
    8aca:	66 23       	and	r22, r22
    8acc:	71 f0       	breq	.+28     	; 0x8aea <__floatsisf+0x74>
    8ace:	96 e8       	ldi	r25, 0x86	; 134
    8ad0:	86 2f       	mov	r24, r22
    8ad2:	70 e0       	ldi	r23, 0x00	; 0
    8ad4:	60 e0       	ldi	r22, 0x00	; 0
    8ad6:	2a f0       	brmi	.+10     	; 0x8ae2 <__floatsisf+0x6c>
    8ad8:	9a 95       	dec	r25
    8ada:	66 0f       	add	r22, r22
    8adc:	77 1f       	adc	r23, r23
    8ade:	88 1f       	adc	r24, r24
    8ae0:	da f7       	brpl	.-10     	; 0x8ad8 <__floatsisf+0x62>
    8ae2:	88 0f       	add	r24, r24
    8ae4:	96 95       	lsr	r25
    8ae6:	87 95       	ror	r24
    8ae8:	97 f9       	bld	r25, 7
    8aea:	08 95       	ret

00008aec <floor>:
    8aec:	07 d1       	rcall	.+526    	; 0x8cfc <__fp_trunc>
    8aee:	80 f0       	brcs	.+32     	; 0x8b10 <floor+0x24>
    8af0:	9f 37       	cpi	r25, 0x7F	; 127
    8af2:	40 f4       	brcc	.+16     	; 0x8b04 <floor+0x18>
    8af4:	91 11       	cpse	r25, r1
    8af6:	0e f0       	brts	.+2      	; 0x8afa <floor+0xe>
    8af8:	19 c1       	rjmp	.+562    	; 0x8d2c <__fp_szero>
    8afa:	60 e0       	ldi	r22, 0x00	; 0
    8afc:	70 e0       	ldi	r23, 0x00	; 0
    8afe:	80 e8       	ldi	r24, 0x80	; 128
    8b00:	9f eb       	ldi	r25, 0xBF	; 191
    8b02:	08 95       	ret
    8b04:	26 f4       	brtc	.+8      	; 0x8b0e <floor+0x22>
    8b06:	1b 16       	cp	r1, r27
    8b08:	61 1d       	adc	r22, r1
    8b0a:	71 1d       	adc	r23, r1
    8b0c:	81 1d       	adc	r24, r1
    8b0e:	2b c0       	rjmp	.+86     	; 0x8b66 <__fp_mintl>
    8b10:	45 c0       	rjmp	.+138    	; 0x8b9c <__fp_mpack>

00008b12 <__fp_cmp>:
    8b12:	99 0f       	add	r25, r25
    8b14:	00 08       	sbc	r0, r0
    8b16:	55 0f       	add	r21, r21
    8b18:	aa 0b       	sbc	r26, r26
    8b1a:	e0 e8       	ldi	r30, 0x80	; 128
    8b1c:	fe ef       	ldi	r31, 0xFE	; 254
    8b1e:	16 16       	cp	r1, r22
    8b20:	17 06       	cpc	r1, r23
    8b22:	e8 07       	cpc	r30, r24
    8b24:	f9 07       	cpc	r31, r25
    8b26:	c0 f0       	brcs	.+48     	; 0x8b58 <__fp_cmp+0x46>
    8b28:	12 16       	cp	r1, r18
    8b2a:	13 06       	cpc	r1, r19
    8b2c:	e4 07       	cpc	r30, r20
    8b2e:	f5 07       	cpc	r31, r21
    8b30:	98 f0       	brcs	.+38     	; 0x8b58 <__fp_cmp+0x46>
    8b32:	62 1b       	sub	r22, r18
    8b34:	73 0b       	sbc	r23, r19
    8b36:	84 0b       	sbc	r24, r20
    8b38:	95 0b       	sbc	r25, r21
    8b3a:	39 f4       	brne	.+14     	; 0x8b4a <__fp_cmp+0x38>
    8b3c:	0a 26       	eor	r0, r26
    8b3e:	61 f0       	breq	.+24     	; 0x8b58 <__fp_cmp+0x46>
    8b40:	23 2b       	or	r18, r19
    8b42:	24 2b       	or	r18, r20
    8b44:	25 2b       	or	r18, r21
    8b46:	21 f4       	brne	.+8      	; 0x8b50 <__fp_cmp+0x3e>
    8b48:	08 95       	ret
    8b4a:	0a 26       	eor	r0, r26
    8b4c:	09 f4       	brne	.+2      	; 0x8b50 <__fp_cmp+0x3e>
    8b4e:	a1 40       	sbci	r26, 0x01	; 1
    8b50:	a6 95       	lsr	r26
    8b52:	8f ef       	ldi	r24, 0xFF	; 255
    8b54:	81 1d       	adc	r24, r1
    8b56:	81 1d       	adc	r24, r1
    8b58:	08 95       	ret

00008b5a <__fp_inf>:
    8b5a:	97 f9       	bld	r25, 7
    8b5c:	9f 67       	ori	r25, 0x7F	; 127
    8b5e:	80 e8       	ldi	r24, 0x80	; 128
    8b60:	70 e0       	ldi	r23, 0x00	; 0
    8b62:	60 e0       	ldi	r22, 0x00	; 0
    8b64:	08 95       	ret

00008b66 <__fp_mintl>:
    8b66:	88 23       	and	r24, r24
    8b68:	71 f4       	brne	.+28     	; 0x8b86 <__fp_mintl+0x20>
    8b6a:	77 23       	and	r23, r23
    8b6c:	21 f0       	breq	.+8      	; 0x8b76 <__fp_mintl+0x10>
    8b6e:	98 50       	subi	r25, 0x08	; 8
    8b70:	87 2b       	or	r24, r23
    8b72:	76 2f       	mov	r23, r22
    8b74:	07 c0       	rjmp	.+14     	; 0x8b84 <__fp_mintl+0x1e>
    8b76:	66 23       	and	r22, r22
    8b78:	11 f4       	brne	.+4      	; 0x8b7e <__fp_mintl+0x18>
    8b7a:	99 27       	eor	r25, r25
    8b7c:	0d c0       	rjmp	.+26     	; 0x8b98 <__fp_mintl+0x32>
    8b7e:	90 51       	subi	r25, 0x10	; 16
    8b80:	86 2b       	or	r24, r22
    8b82:	70 e0       	ldi	r23, 0x00	; 0
    8b84:	60 e0       	ldi	r22, 0x00	; 0
    8b86:	2a f0       	brmi	.+10     	; 0x8b92 <__fp_mintl+0x2c>
    8b88:	9a 95       	dec	r25
    8b8a:	66 0f       	add	r22, r22
    8b8c:	77 1f       	adc	r23, r23
    8b8e:	88 1f       	adc	r24, r24
    8b90:	da f7       	brpl	.-10     	; 0x8b88 <__fp_mintl+0x22>
    8b92:	88 0f       	add	r24, r24
    8b94:	96 95       	lsr	r25
    8b96:	87 95       	ror	r24
    8b98:	97 f9       	bld	r25, 7
    8b9a:	08 95       	ret

00008b9c <__fp_mpack>:
    8b9c:	9f 3f       	cpi	r25, 0xFF	; 255
    8b9e:	31 f0       	breq	.+12     	; 0x8bac <__fp_mpack_finite+0xc>

00008ba0 <__fp_mpack_finite>:
    8ba0:	91 50       	subi	r25, 0x01	; 1
    8ba2:	20 f4       	brcc	.+8      	; 0x8bac <__fp_mpack_finite+0xc>
    8ba4:	87 95       	ror	r24
    8ba6:	77 95       	ror	r23
    8ba8:	67 95       	ror	r22
    8baa:	b7 95       	ror	r27
    8bac:	88 0f       	add	r24, r24
    8bae:	91 1d       	adc	r25, r1
    8bb0:	96 95       	lsr	r25
    8bb2:	87 95       	ror	r24
    8bb4:	97 f9       	bld	r25, 7
    8bb6:	08 95       	ret

00008bb8 <__fp_nan>:
    8bb8:	9f ef       	ldi	r25, 0xFF	; 255
    8bba:	80 ec       	ldi	r24, 0xC0	; 192
    8bbc:	08 95       	ret

00008bbe <__fp_powser>:
    8bbe:	df 93       	push	r29
    8bc0:	cf 93       	push	r28
    8bc2:	1f 93       	push	r17
    8bc4:	0f 93       	push	r16
    8bc6:	ff 92       	push	r15
    8bc8:	ef 92       	push	r14
    8bca:	df 92       	push	r13
    8bcc:	7b 01       	movw	r14, r22
    8bce:	8c 01       	movw	r16, r24
    8bd0:	68 94       	set
    8bd2:	05 c0       	rjmp	.+10     	; 0x8bde <__fp_powser+0x20>
    8bd4:	da 2e       	mov	r13, r26
    8bd6:	ef 01       	movw	r28, r30
    8bd8:	c6 d0       	rcall	.+396    	; 0x8d66 <__mulsf3x>
    8bda:	fe 01       	movw	r30, r28
    8bdc:	e8 94       	clt
    8bde:	a5 91       	lpm	r26, Z+
    8be0:	25 91       	lpm	r18, Z+
    8be2:	35 91       	lpm	r19, Z+
    8be4:	45 91       	lpm	r20, Z+
    8be6:	55 91       	lpm	r21, Z+
    8be8:	ae f3       	brts	.-22     	; 0x8bd4 <__fp_powser+0x16>
    8bea:	ef 01       	movw	r28, r30
    8bec:	ed dd       	rcall	.-1062   	; 0x87c8 <__addsf3x>
    8bee:	fe 01       	movw	r30, r28
    8bf0:	97 01       	movw	r18, r14
    8bf2:	a8 01       	movw	r20, r16
    8bf4:	da 94       	dec	r13
    8bf6:	79 f7       	brne	.-34     	; 0x8bd6 <__fp_powser+0x18>
    8bf8:	df 90       	pop	r13
    8bfa:	ef 90       	pop	r14
    8bfc:	ff 90       	pop	r15
    8bfe:	0f 91       	pop	r16
    8c00:	1f 91       	pop	r17
    8c02:	cf 91       	pop	r28
    8c04:	df 91       	pop	r29
    8c06:	08 95       	ret

00008c08 <__fp_pscA>:
    8c08:	00 24       	eor	r0, r0
    8c0a:	0a 94       	dec	r0
    8c0c:	16 16       	cp	r1, r22
    8c0e:	17 06       	cpc	r1, r23
    8c10:	18 06       	cpc	r1, r24
    8c12:	09 06       	cpc	r0, r25
    8c14:	08 95       	ret

00008c16 <__fp_pscB>:
    8c16:	00 24       	eor	r0, r0
    8c18:	0a 94       	dec	r0
    8c1a:	12 16       	cp	r1, r18
    8c1c:	13 06       	cpc	r1, r19
    8c1e:	14 06       	cpc	r1, r20
    8c20:	05 06       	cpc	r0, r21
    8c22:	08 95       	ret
    8c24:	c9 cf       	rjmp	.-110    	; 0x8bb8 <__fp_nan>

00008c26 <__fp_rempio2>:
    8c26:	50 d0       	rcall	.+160    	; 0x8cc8 <__fp_splitA>
    8c28:	e8 f3       	brcs	.-6      	; 0x8c24 <__fp_pscB+0xe>
    8c2a:	e8 94       	clt
    8c2c:	e0 e0       	ldi	r30, 0x00	; 0
    8c2e:	bb 27       	eor	r27, r27
    8c30:	9f 57       	subi	r25, 0x7F	; 127
    8c32:	f0 f0       	brcs	.+60     	; 0x8c70 <__fp_rempio2+0x4a>
    8c34:	2a ed       	ldi	r18, 0xDA	; 218
    8c36:	3f e0       	ldi	r19, 0x0F	; 15
    8c38:	49 ec       	ldi	r20, 0xC9	; 201
    8c3a:	06 c0       	rjmp	.+12     	; 0x8c48 <__fp_rempio2+0x22>
    8c3c:	ee 0f       	add	r30, r30
    8c3e:	bb 0f       	add	r27, r27
    8c40:	66 1f       	adc	r22, r22
    8c42:	77 1f       	adc	r23, r23
    8c44:	88 1f       	adc	r24, r24
    8c46:	28 f0       	brcs	.+10     	; 0x8c52 <__fp_rempio2+0x2c>
    8c48:	b2 3a       	cpi	r27, 0xA2	; 162
    8c4a:	62 07       	cpc	r22, r18
    8c4c:	73 07       	cpc	r23, r19
    8c4e:	84 07       	cpc	r24, r20
    8c50:	28 f0       	brcs	.+10     	; 0x8c5c <__fp_rempio2+0x36>
    8c52:	b2 5a       	subi	r27, 0xA2	; 162
    8c54:	62 0b       	sbc	r22, r18
    8c56:	73 0b       	sbc	r23, r19
    8c58:	84 0b       	sbc	r24, r20
    8c5a:	e3 95       	inc	r30
    8c5c:	9a 95       	dec	r25
    8c5e:	72 f7       	brpl	.-36     	; 0x8c3c <__fp_rempio2+0x16>
    8c60:	80 38       	cpi	r24, 0x80	; 128
    8c62:	30 f4       	brcc	.+12     	; 0x8c70 <__fp_rempio2+0x4a>
    8c64:	9a 95       	dec	r25
    8c66:	bb 0f       	add	r27, r27
    8c68:	66 1f       	adc	r22, r22
    8c6a:	77 1f       	adc	r23, r23
    8c6c:	88 1f       	adc	r24, r24
    8c6e:	d2 f7       	brpl	.-12     	; 0x8c64 <__fp_rempio2+0x3e>
    8c70:	90 48       	sbci	r25, 0x80	; 128
    8c72:	96 cf       	rjmp	.-212    	; 0x8ba0 <__fp_mpack_finite>

00008c74 <__fp_round>:
    8c74:	09 2e       	mov	r0, r25
    8c76:	03 94       	inc	r0
    8c78:	00 0c       	add	r0, r0
    8c7a:	11 f4       	brne	.+4      	; 0x8c80 <__fp_round+0xc>
    8c7c:	88 23       	and	r24, r24
    8c7e:	52 f0       	brmi	.+20     	; 0x8c94 <__fp_round+0x20>
    8c80:	bb 0f       	add	r27, r27
    8c82:	40 f4       	brcc	.+16     	; 0x8c94 <__fp_round+0x20>
    8c84:	bf 2b       	or	r27, r31
    8c86:	11 f4       	brne	.+4      	; 0x8c8c <__fp_round+0x18>
    8c88:	60 ff       	sbrs	r22, 0
    8c8a:	04 c0       	rjmp	.+8      	; 0x8c94 <__fp_round+0x20>
    8c8c:	6f 5f       	subi	r22, 0xFF	; 255
    8c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    8c90:	8f 4f       	sbci	r24, 0xFF	; 255
    8c92:	9f 4f       	sbci	r25, 0xFF	; 255
    8c94:	08 95       	ret

00008c96 <__fp_sinus>:
    8c96:	ef 93       	push	r30
    8c98:	e0 ff       	sbrs	r30, 0
    8c9a:	06 c0       	rjmp	.+12     	; 0x8ca8 <__fp_sinus+0x12>
    8c9c:	a2 ea       	ldi	r26, 0xA2	; 162
    8c9e:	2a ed       	ldi	r18, 0xDA	; 218
    8ca0:	3f e0       	ldi	r19, 0x0F	; 15
    8ca2:	49 ec       	ldi	r20, 0xC9	; 201
    8ca4:	5f eb       	ldi	r21, 0xBF	; 191
    8ca6:	90 dd       	rcall	.-1248   	; 0x87c8 <__addsf3x>
    8ca8:	e5 df       	rcall	.-54     	; 0x8c74 <__fp_round>
    8caa:	0f 90       	pop	r0
    8cac:	03 94       	inc	r0
    8cae:	01 fc       	sbrc	r0, 1
    8cb0:	90 58       	subi	r25, 0x80	; 128
    8cb2:	e1 e1       	ldi	r30, 0x11	; 17
    8cb4:	f1 e0       	ldi	r31, 0x01	; 1
    8cb6:	00 c1       	rjmp	.+512    	; 0x8eb8 <__fp_powsodd>

00008cb8 <__fp_split3>:
    8cb8:	57 fd       	sbrc	r21, 7
    8cba:	90 58       	subi	r25, 0x80	; 128
    8cbc:	44 0f       	add	r20, r20
    8cbe:	55 1f       	adc	r21, r21
    8cc0:	59 f0       	breq	.+22     	; 0x8cd8 <__fp_splitA+0x10>
    8cc2:	5f 3f       	cpi	r21, 0xFF	; 255
    8cc4:	71 f0       	breq	.+28     	; 0x8ce2 <__fp_splitA+0x1a>
    8cc6:	47 95       	ror	r20

00008cc8 <__fp_splitA>:
    8cc8:	88 0f       	add	r24, r24
    8cca:	97 fb       	bst	r25, 7
    8ccc:	99 1f       	adc	r25, r25
    8cce:	61 f0       	breq	.+24     	; 0x8ce8 <__fp_splitA+0x20>
    8cd0:	9f 3f       	cpi	r25, 0xFF	; 255
    8cd2:	79 f0       	breq	.+30     	; 0x8cf2 <__fp_splitA+0x2a>
    8cd4:	87 95       	ror	r24
    8cd6:	08 95       	ret
    8cd8:	12 16       	cp	r1, r18
    8cda:	13 06       	cpc	r1, r19
    8cdc:	14 06       	cpc	r1, r20
    8cde:	55 1f       	adc	r21, r21
    8ce0:	f2 cf       	rjmp	.-28     	; 0x8cc6 <__fp_split3+0xe>
    8ce2:	46 95       	lsr	r20
    8ce4:	f1 df       	rcall	.-30     	; 0x8cc8 <__fp_splitA>
    8ce6:	08 c0       	rjmp	.+16     	; 0x8cf8 <__fp_splitA+0x30>
    8ce8:	16 16       	cp	r1, r22
    8cea:	17 06       	cpc	r1, r23
    8cec:	18 06       	cpc	r1, r24
    8cee:	99 1f       	adc	r25, r25
    8cf0:	f1 cf       	rjmp	.-30     	; 0x8cd4 <__fp_splitA+0xc>
    8cf2:	86 95       	lsr	r24
    8cf4:	71 05       	cpc	r23, r1
    8cf6:	61 05       	cpc	r22, r1
    8cf8:	08 94       	sec
    8cfa:	08 95       	ret

00008cfc <__fp_trunc>:
    8cfc:	e5 df       	rcall	.-54     	; 0x8cc8 <__fp_splitA>
    8cfe:	a0 f0       	brcs	.+40     	; 0x8d28 <__fp_trunc+0x2c>
    8d00:	be e7       	ldi	r27, 0x7E	; 126
    8d02:	b9 17       	cp	r27, r25
    8d04:	88 f4       	brcc	.+34     	; 0x8d28 <__fp_trunc+0x2c>
    8d06:	bb 27       	eor	r27, r27
    8d08:	9f 38       	cpi	r25, 0x8F	; 143
    8d0a:	60 f4       	brcc	.+24     	; 0x8d24 <__fp_trunc+0x28>
    8d0c:	16 16       	cp	r1, r22
    8d0e:	b1 1d       	adc	r27, r1
    8d10:	67 2f       	mov	r22, r23
    8d12:	78 2f       	mov	r23, r24
    8d14:	88 27       	eor	r24, r24
    8d16:	98 5f       	subi	r25, 0xF8	; 248
    8d18:	f7 cf       	rjmp	.-18     	; 0x8d08 <__fp_trunc+0xc>
    8d1a:	86 95       	lsr	r24
    8d1c:	77 95       	ror	r23
    8d1e:	67 95       	ror	r22
    8d20:	b1 1d       	adc	r27, r1
    8d22:	93 95       	inc	r25
    8d24:	96 39       	cpi	r25, 0x96	; 150
    8d26:	c8 f3       	brcs	.-14     	; 0x8d1a <__fp_trunc+0x1e>
    8d28:	08 95       	ret

00008d2a <__fp_zero>:
    8d2a:	e8 94       	clt

00008d2c <__fp_szero>:
    8d2c:	bb 27       	eor	r27, r27
    8d2e:	66 27       	eor	r22, r22
    8d30:	77 27       	eor	r23, r23
    8d32:	cb 01       	movw	r24, r22
    8d34:	97 f9       	bld	r25, 7
    8d36:	08 95       	ret

00008d38 <__gesf2>:
    8d38:	ec de       	rcall	.-552    	; 0x8b12 <__fp_cmp>
    8d3a:	08 f4       	brcc	.+2      	; 0x8d3e <__gesf2+0x6>
    8d3c:	8f ef       	ldi	r24, 0xFF	; 255
    8d3e:	08 95       	ret

00008d40 <inverse>:
    8d40:	9b 01       	movw	r18, r22
    8d42:	ac 01       	movw	r20, r24
    8d44:	60 e0       	ldi	r22, 0x00	; 0
    8d46:	70 e0       	ldi	r23, 0x00	; 0
    8d48:	80 e8       	ldi	r24, 0x80	; 128
    8d4a:	9f e3       	ldi	r25, 0x3F	; 63
    8d4c:	f9 cd       	rjmp	.-1038   	; 0x8940 <__divsf3>

00008d4e <__mulsf3>:
    8d4e:	0b d0       	rcall	.+22     	; 0x8d66 <__mulsf3x>
    8d50:	91 cf       	rjmp	.-222    	; 0x8c74 <__fp_round>
    8d52:	5a df       	rcall	.-332    	; 0x8c08 <__fp_pscA>
    8d54:	28 f0       	brcs	.+10     	; 0x8d60 <__mulsf3+0x12>
    8d56:	5f df       	rcall	.-322    	; 0x8c16 <__fp_pscB>
    8d58:	18 f0       	brcs	.+6      	; 0x8d60 <__mulsf3+0x12>
    8d5a:	95 23       	and	r25, r21
    8d5c:	09 f0       	breq	.+2      	; 0x8d60 <__mulsf3+0x12>
    8d5e:	fd ce       	rjmp	.-518    	; 0x8b5a <__fp_inf>
    8d60:	2b cf       	rjmp	.-426    	; 0x8bb8 <__fp_nan>
    8d62:	11 24       	eor	r1, r1
    8d64:	e3 cf       	rjmp	.-58     	; 0x8d2c <__fp_szero>

00008d66 <__mulsf3x>:
    8d66:	a8 df       	rcall	.-176    	; 0x8cb8 <__fp_split3>
    8d68:	a0 f3       	brcs	.-24     	; 0x8d52 <__mulsf3+0x4>

00008d6a <__mulsf3_pse>:
    8d6a:	95 9f       	mul	r25, r21
    8d6c:	d1 f3       	breq	.-12     	; 0x8d62 <__mulsf3+0x14>
    8d6e:	95 0f       	add	r25, r21
    8d70:	50 e0       	ldi	r21, 0x00	; 0
    8d72:	55 1f       	adc	r21, r21
    8d74:	62 9f       	mul	r22, r18
    8d76:	f0 01       	movw	r30, r0
    8d78:	72 9f       	mul	r23, r18
    8d7a:	bb 27       	eor	r27, r27
    8d7c:	f0 0d       	add	r31, r0
    8d7e:	b1 1d       	adc	r27, r1
    8d80:	63 9f       	mul	r22, r19
    8d82:	aa 27       	eor	r26, r26
    8d84:	f0 0d       	add	r31, r0
    8d86:	b1 1d       	adc	r27, r1
    8d88:	aa 1f       	adc	r26, r26
    8d8a:	64 9f       	mul	r22, r20
    8d8c:	66 27       	eor	r22, r22
    8d8e:	b0 0d       	add	r27, r0
    8d90:	a1 1d       	adc	r26, r1
    8d92:	66 1f       	adc	r22, r22
    8d94:	82 9f       	mul	r24, r18
    8d96:	22 27       	eor	r18, r18
    8d98:	b0 0d       	add	r27, r0
    8d9a:	a1 1d       	adc	r26, r1
    8d9c:	62 1f       	adc	r22, r18
    8d9e:	73 9f       	mul	r23, r19
    8da0:	b0 0d       	add	r27, r0
    8da2:	a1 1d       	adc	r26, r1
    8da4:	62 1f       	adc	r22, r18
    8da6:	83 9f       	mul	r24, r19
    8da8:	a0 0d       	add	r26, r0
    8daa:	61 1d       	adc	r22, r1
    8dac:	22 1f       	adc	r18, r18
    8dae:	74 9f       	mul	r23, r20
    8db0:	33 27       	eor	r19, r19
    8db2:	a0 0d       	add	r26, r0
    8db4:	61 1d       	adc	r22, r1
    8db6:	23 1f       	adc	r18, r19
    8db8:	84 9f       	mul	r24, r20
    8dba:	60 0d       	add	r22, r0
    8dbc:	21 1d       	adc	r18, r1
    8dbe:	82 2f       	mov	r24, r18
    8dc0:	76 2f       	mov	r23, r22
    8dc2:	6a 2f       	mov	r22, r26
    8dc4:	11 24       	eor	r1, r1
    8dc6:	9f 57       	subi	r25, 0x7F	; 127
    8dc8:	50 40       	sbci	r21, 0x00	; 0
    8dca:	8a f0       	brmi	.+34     	; 0x8dee <__mulsf3_pse+0x84>
    8dcc:	e1 f0       	breq	.+56     	; 0x8e06 <__mulsf3_pse+0x9c>
    8dce:	88 23       	and	r24, r24
    8dd0:	4a f0       	brmi	.+18     	; 0x8de4 <__mulsf3_pse+0x7a>
    8dd2:	ee 0f       	add	r30, r30
    8dd4:	ff 1f       	adc	r31, r31
    8dd6:	bb 1f       	adc	r27, r27
    8dd8:	66 1f       	adc	r22, r22
    8dda:	77 1f       	adc	r23, r23
    8ddc:	88 1f       	adc	r24, r24
    8dde:	91 50       	subi	r25, 0x01	; 1
    8de0:	50 40       	sbci	r21, 0x00	; 0
    8de2:	a9 f7       	brne	.-22     	; 0x8dce <__mulsf3_pse+0x64>
    8de4:	9e 3f       	cpi	r25, 0xFE	; 254
    8de6:	51 05       	cpc	r21, r1
    8de8:	70 f0       	brcs	.+28     	; 0x8e06 <__mulsf3_pse+0x9c>
    8dea:	b7 ce       	rjmp	.-658    	; 0x8b5a <__fp_inf>
    8dec:	9f cf       	rjmp	.-194    	; 0x8d2c <__fp_szero>
    8dee:	5f 3f       	cpi	r21, 0xFF	; 255
    8df0:	ec f3       	brlt	.-6      	; 0x8dec <__mulsf3_pse+0x82>
    8df2:	98 3e       	cpi	r25, 0xE8	; 232
    8df4:	dc f3       	brlt	.-10     	; 0x8dec <__mulsf3_pse+0x82>
    8df6:	86 95       	lsr	r24
    8df8:	77 95       	ror	r23
    8dfa:	67 95       	ror	r22
    8dfc:	b7 95       	ror	r27
    8dfe:	f7 95       	ror	r31
    8e00:	e7 95       	ror	r30
    8e02:	9f 5f       	subi	r25, 0xFF	; 255
    8e04:	c1 f7       	brne	.-16     	; 0x8df6 <__mulsf3_pse+0x8c>
    8e06:	fe 2b       	or	r31, r30
    8e08:	88 0f       	add	r24, r24
    8e0a:	91 1d       	adc	r25, r1
    8e0c:	96 95       	lsr	r25
    8e0e:	87 95       	ror	r24
    8e10:	97 f9       	bld	r25, 7
    8e12:	08 95       	ret

00008e14 <sin>:
    8e14:	9f 93       	push	r25
    8e16:	07 df       	rcall	.-498    	; 0x8c26 <__fp_rempio2>
    8e18:	0f 90       	pop	r0
    8e1a:	07 fc       	sbrc	r0, 7
    8e1c:	ee 5f       	subi	r30, 0xFE	; 254
    8e1e:	3b cf       	rjmp	.-394    	; 0x8c96 <__fp_sinus>
    8e20:	11 f4       	brne	.+4      	; 0x8e26 <sin+0x12>
    8e22:	0e f4       	brtc	.+2      	; 0x8e26 <sin+0x12>
    8e24:	c9 ce       	rjmp	.-622    	; 0x8bb8 <__fp_nan>
    8e26:	ba ce       	rjmp	.-652    	; 0x8b9c <__fp_mpack>

00008e28 <sqrt>:
    8e28:	4f df       	rcall	.-354    	; 0x8cc8 <__fp_splitA>
    8e2a:	d0 f3       	brcs	.-12     	; 0x8e20 <sin+0xc>
    8e2c:	99 23       	and	r25, r25
    8e2e:	d9 f3       	breq	.-10     	; 0x8e26 <sin+0x12>
    8e30:	ce f3       	brts	.-14     	; 0x8e24 <sin+0x10>
    8e32:	9f 57       	subi	r25, 0x7F	; 127
    8e34:	55 0b       	sbc	r21, r21
    8e36:	87 ff       	sbrs	r24, 7
    8e38:	38 d0       	rcall	.+112    	; 0x8eaa <__fp_norm2>
    8e3a:	00 24       	eor	r0, r0
    8e3c:	a0 e6       	ldi	r26, 0x60	; 96
    8e3e:	40 ea       	ldi	r20, 0xA0	; 160
    8e40:	90 01       	movw	r18, r0
    8e42:	80 58       	subi	r24, 0x80	; 128
    8e44:	56 95       	lsr	r21
    8e46:	97 95       	ror	r25
    8e48:	28 f4       	brcc	.+10     	; 0x8e54 <sqrt+0x2c>
    8e4a:	80 5c       	subi	r24, 0xC0	; 192
    8e4c:	66 0f       	add	r22, r22
    8e4e:	77 1f       	adc	r23, r23
    8e50:	88 1f       	adc	r24, r24
    8e52:	20 f0       	brcs	.+8      	; 0x8e5c <sqrt+0x34>
    8e54:	26 17       	cp	r18, r22
    8e56:	37 07       	cpc	r19, r23
    8e58:	48 07       	cpc	r20, r24
    8e5a:	30 f4       	brcc	.+12     	; 0x8e68 <sqrt+0x40>
    8e5c:	62 1b       	sub	r22, r18
    8e5e:	73 0b       	sbc	r23, r19
    8e60:	84 0b       	sbc	r24, r20
    8e62:	20 29       	or	r18, r0
    8e64:	31 29       	or	r19, r1
    8e66:	4a 2b       	or	r20, r26
    8e68:	a6 95       	lsr	r26
    8e6a:	17 94       	ror	r1
    8e6c:	07 94       	ror	r0
    8e6e:	20 25       	eor	r18, r0
    8e70:	31 25       	eor	r19, r1
    8e72:	4a 27       	eor	r20, r26
    8e74:	58 f7       	brcc	.-42     	; 0x8e4c <sqrt+0x24>
    8e76:	66 0f       	add	r22, r22
    8e78:	77 1f       	adc	r23, r23
    8e7a:	88 1f       	adc	r24, r24
    8e7c:	20 f0       	brcs	.+8      	; 0x8e86 <sqrt+0x5e>
    8e7e:	26 17       	cp	r18, r22
    8e80:	37 07       	cpc	r19, r23
    8e82:	48 07       	cpc	r20, r24
    8e84:	30 f4       	brcc	.+12     	; 0x8e92 <sqrt+0x6a>
    8e86:	62 0b       	sbc	r22, r18
    8e88:	73 0b       	sbc	r23, r19
    8e8a:	84 0b       	sbc	r24, r20
    8e8c:	20 0d       	add	r18, r0
    8e8e:	31 1d       	adc	r19, r1
    8e90:	41 1d       	adc	r20, r1
    8e92:	a0 95       	com	r26
    8e94:	81 f7       	brne	.-32     	; 0x8e76 <sqrt+0x4e>
    8e96:	b9 01       	movw	r22, r18
    8e98:	84 2f       	mov	r24, r20
    8e9a:	91 58       	subi	r25, 0x81	; 129
    8e9c:	88 0f       	add	r24, r24
    8e9e:	96 95       	lsr	r25
    8ea0:	87 95       	ror	r24
    8ea2:	08 95       	ret

00008ea4 <square>:
    8ea4:	9b 01       	movw	r18, r22
    8ea6:	ac 01       	movw	r20, r24
    8ea8:	52 cf       	rjmp	.-348    	; 0x8d4e <__mulsf3>

00008eaa <__fp_norm2>:
    8eaa:	91 50       	subi	r25, 0x01	; 1
    8eac:	50 40       	sbci	r21, 0x00	; 0
    8eae:	66 0f       	add	r22, r22
    8eb0:	77 1f       	adc	r23, r23
    8eb2:	88 1f       	adc	r24, r24
    8eb4:	d2 f7       	brpl	.-12     	; 0x8eaa <__fp_norm2>
    8eb6:	08 95       	ret

00008eb8 <__fp_powsodd>:
    8eb8:	9f 93       	push	r25
    8eba:	8f 93       	push	r24
    8ebc:	7f 93       	push	r23
    8ebe:	6f 93       	push	r22
    8ec0:	ff 93       	push	r31
    8ec2:	ef 93       	push	r30
    8ec4:	9b 01       	movw	r18, r22
    8ec6:	ac 01       	movw	r20, r24
    8ec8:	42 df       	rcall	.-380    	; 0x8d4e <__mulsf3>
    8eca:	ef 91       	pop	r30
    8ecc:	ff 91       	pop	r31
    8ece:	77 de       	rcall	.-786    	; 0x8bbe <__fp_powser>
    8ed0:	2f 91       	pop	r18
    8ed2:	3f 91       	pop	r19
    8ed4:	4f 91       	pop	r20
    8ed6:	5f 91       	pop	r21
    8ed8:	3a cf       	rjmp	.-396    	; 0x8d4e <__mulsf3>

00008eda <__mulsi3>:
    8eda:	62 9f       	mul	r22, r18
    8edc:	d0 01       	movw	r26, r0
    8ede:	73 9f       	mul	r23, r19
    8ee0:	f0 01       	movw	r30, r0
    8ee2:	82 9f       	mul	r24, r18
    8ee4:	e0 0d       	add	r30, r0
    8ee6:	f1 1d       	adc	r31, r1
    8ee8:	64 9f       	mul	r22, r20
    8eea:	e0 0d       	add	r30, r0
    8eec:	f1 1d       	adc	r31, r1
    8eee:	92 9f       	mul	r25, r18
    8ef0:	f0 0d       	add	r31, r0
    8ef2:	83 9f       	mul	r24, r19
    8ef4:	f0 0d       	add	r31, r0
    8ef6:	74 9f       	mul	r23, r20
    8ef8:	f0 0d       	add	r31, r0
    8efa:	65 9f       	mul	r22, r21
    8efc:	f0 0d       	add	r31, r0
    8efe:	99 27       	eor	r25, r25
    8f00:	72 9f       	mul	r23, r18
    8f02:	b0 0d       	add	r27, r0
    8f04:	e1 1d       	adc	r30, r1
    8f06:	f9 1f       	adc	r31, r25
    8f08:	63 9f       	mul	r22, r19
    8f0a:	b0 0d       	add	r27, r0
    8f0c:	e1 1d       	adc	r30, r1
    8f0e:	f9 1f       	adc	r31, r25
    8f10:	bd 01       	movw	r22, r26
    8f12:	cf 01       	movw	r24, r30
    8f14:	11 24       	eor	r1, r1
    8f16:	08 95       	ret

00008f18 <__udivmodqi4>:
    8f18:	99 1b       	sub	r25, r25
    8f1a:	79 e0       	ldi	r23, 0x09	; 9
    8f1c:	04 c0       	rjmp	.+8      	; 0x8f26 <__udivmodqi4_ep>

00008f1e <__udivmodqi4_loop>:
    8f1e:	99 1f       	adc	r25, r25
    8f20:	96 17       	cp	r25, r22
    8f22:	08 f0       	brcs	.+2      	; 0x8f26 <__udivmodqi4_ep>
    8f24:	96 1b       	sub	r25, r22

00008f26 <__udivmodqi4_ep>:
    8f26:	88 1f       	adc	r24, r24
    8f28:	7a 95       	dec	r23
    8f2a:	c9 f7       	brne	.-14     	; 0x8f1e <__udivmodqi4_loop>
    8f2c:	80 95       	com	r24
    8f2e:	08 95       	ret

00008f30 <__divmodhi4>:
    8f30:	97 fb       	bst	r25, 7
    8f32:	09 2e       	mov	r0, r25
    8f34:	07 26       	eor	r0, r23
    8f36:	0a d0       	rcall	.+20     	; 0x8f4c <__divmodhi4_neg1>
    8f38:	77 fd       	sbrc	r23, 7
    8f3a:	04 d0       	rcall	.+8      	; 0x8f44 <__divmodhi4_neg2>
    8f3c:	49 d0       	rcall	.+146    	; 0x8fd0 <__udivmodhi4>
    8f3e:	06 d0       	rcall	.+12     	; 0x8f4c <__divmodhi4_neg1>
    8f40:	00 20       	and	r0, r0
    8f42:	1a f4       	brpl	.+6      	; 0x8f4a <__divmodhi4_exit>

00008f44 <__divmodhi4_neg2>:
    8f44:	70 95       	com	r23
    8f46:	61 95       	neg	r22
    8f48:	7f 4f       	sbci	r23, 0xFF	; 255

00008f4a <__divmodhi4_exit>:
    8f4a:	08 95       	ret

00008f4c <__divmodhi4_neg1>:
    8f4c:	f6 f7       	brtc	.-4      	; 0x8f4a <__divmodhi4_exit>
    8f4e:	90 95       	com	r25
    8f50:	81 95       	neg	r24
    8f52:	9f 4f       	sbci	r25, 0xFF	; 255
    8f54:	08 95       	ret

00008f56 <__udivmodsi4>:
    8f56:	a1 e2       	ldi	r26, 0x21	; 33
    8f58:	1a 2e       	mov	r1, r26
    8f5a:	aa 1b       	sub	r26, r26
    8f5c:	bb 1b       	sub	r27, r27
    8f5e:	fd 01       	movw	r30, r26
    8f60:	0d c0       	rjmp	.+26     	; 0x8f7c <__udivmodsi4_ep>

00008f62 <__udivmodsi4_loop>:
    8f62:	aa 1f       	adc	r26, r26
    8f64:	bb 1f       	adc	r27, r27
    8f66:	ee 1f       	adc	r30, r30
    8f68:	ff 1f       	adc	r31, r31
    8f6a:	a2 17       	cp	r26, r18
    8f6c:	b3 07       	cpc	r27, r19
    8f6e:	e4 07       	cpc	r30, r20
    8f70:	f5 07       	cpc	r31, r21
    8f72:	20 f0       	brcs	.+8      	; 0x8f7c <__udivmodsi4_ep>
    8f74:	a2 1b       	sub	r26, r18
    8f76:	b3 0b       	sbc	r27, r19
    8f78:	e4 0b       	sbc	r30, r20
    8f7a:	f5 0b       	sbc	r31, r21

00008f7c <__udivmodsi4_ep>:
    8f7c:	66 1f       	adc	r22, r22
    8f7e:	77 1f       	adc	r23, r23
    8f80:	88 1f       	adc	r24, r24
    8f82:	99 1f       	adc	r25, r25
    8f84:	1a 94       	dec	r1
    8f86:	69 f7       	brne	.-38     	; 0x8f62 <__udivmodsi4_loop>
    8f88:	60 95       	com	r22
    8f8a:	70 95       	com	r23
    8f8c:	80 95       	com	r24
    8f8e:	90 95       	com	r25
    8f90:	9b 01       	movw	r18, r22
    8f92:	ac 01       	movw	r20, r24
    8f94:	bd 01       	movw	r22, r26
    8f96:	cf 01       	movw	r24, r30
    8f98:	08 95       	ret

00008f9a <__divmodsi4>:
    8f9a:	97 fb       	bst	r25, 7
    8f9c:	09 2e       	mov	r0, r25
    8f9e:	05 26       	eor	r0, r21
    8fa0:	0e d0       	rcall	.+28     	; 0x8fbe <__divmodsi4_neg1>
    8fa2:	57 fd       	sbrc	r21, 7
    8fa4:	04 d0       	rcall	.+8      	; 0x8fae <__divmodsi4_neg2>
    8fa6:	d7 df       	rcall	.-82     	; 0x8f56 <__udivmodsi4>
    8fa8:	0a d0       	rcall	.+20     	; 0x8fbe <__divmodsi4_neg1>
    8faa:	00 1c       	adc	r0, r0
    8fac:	38 f4       	brcc	.+14     	; 0x8fbc <__divmodsi4_exit>

00008fae <__divmodsi4_neg2>:
    8fae:	50 95       	com	r21
    8fb0:	40 95       	com	r20
    8fb2:	30 95       	com	r19
    8fb4:	21 95       	neg	r18
    8fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    8fb8:	4f 4f       	sbci	r20, 0xFF	; 255
    8fba:	5f 4f       	sbci	r21, 0xFF	; 255

00008fbc <__divmodsi4_exit>:
    8fbc:	08 95       	ret

00008fbe <__divmodsi4_neg1>:
    8fbe:	f6 f7       	brtc	.-4      	; 0x8fbc <__divmodsi4_exit>
    8fc0:	90 95       	com	r25
    8fc2:	80 95       	com	r24
    8fc4:	70 95       	com	r23
    8fc6:	61 95       	neg	r22
    8fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    8fca:	8f 4f       	sbci	r24, 0xFF	; 255
    8fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    8fce:	08 95       	ret

00008fd0 <__udivmodhi4>:
    8fd0:	aa 1b       	sub	r26, r26
    8fd2:	bb 1b       	sub	r27, r27
    8fd4:	51 e1       	ldi	r21, 0x11	; 17
    8fd6:	07 c0       	rjmp	.+14     	; 0x8fe6 <__udivmodhi4_ep>

00008fd8 <__udivmodhi4_loop>:
    8fd8:	aa 1f       	adc	r26, r26
    8fda:	bb 1f       	adc	r27, r27
    8fdc:	a6 17       	cp	r26, r22
    8fde:	b7 07       	cpc	r27, r23
    8fe0:	10 f0       	brcs	.+4      	; 0x8fe6 <__udivmodhi4_ep>
    8fe2:	a6 1b       	sub	r26, r22
    8fe4:	b7 0b       	sbc	r27, r23

00008fe6 <__udivmodhi4_ep>:
    8fe6:	88 1f       	adc	r24, r24
    8fe8:	99 1f       	adc	r25, r25
    8fea:	5a 95       	dec	r21
    8fec:	a9 f7       	brne	.-22     	; 0x8fd8 <__udivmodhi4_loop>
    8fee:	80 95       	com	r24
    8ff0:	90 95       	com	r25
    8ff2:	bc 01       	movw	r22, r24
    8ff4:	cd 01       	movw	r24, r26
    8ff6:	08 95       	ret

00008ff8 <__tablejump_elpm__>:
    8ff8:	07 90       	elpm	r0, Z+
    8ffa:	f6 91       	elpm	r31, Z+
    8ffc:	e0 2d       	mov	r30, r0
    8ffe:	09 94       	ijmp

00009000 <malloc>:
    9000:	cf 93       	push	r28
    9002:	df 93       	push	r29
    9004:	82 30       	cpi	r24, 0x02	; 2
    9006:	91 05       	cpc	r25, r1
    9008:	10 f4       	brcc	.+4      	; 0x900e <malloc+0xe>
    900a:	82 e0       	ldi	r24, 0x02	; 2
    900c:	90 e0       	ldi	r25, 0x00	; 0
    900e:	e0 91 d2 0e 	lds	r30, 0x0ED2
    9012:	f0 91 d3 0e 	lds	r31, 0x0ED3
    9016:	40 e0       	ldi	r20, 0x00	; 0
    9018:	50 e0       	ldi	r21, 0x00	; 0
    901a:	20 e0       	ldi	r18, 0x00	; 0
    901c:	30 e0       	ldi	r19, 0x00	; 0
    901e:	26 c0       	rjmp	.+76     	; 0x906c <malloc+0x6c>
    9020:	60 81       	ld	r22, Z
    9022:	71 81       	ldd	r23, Z+1	; 0x01
    9024:	68 17       	cp	r22, r24
    9026:	79 07       	cpc	r23, r25
    9028:	e0 f0       	brcs	.+56     	; 0x9062 <malloc+0x62>
    902a:	68 17       	cp	r22, r24
    902c:	79 07       	cpc	r23, r25
    902e:	81 f4       	brne	.+32     	; 0x9050 <malloc+0x50>
    9030:	82 81       	ldd	r24, Z+2	; 0x02
    9032:	93 81       	ldd	r25, Z+3	; 0x03
    9034:	21 15       	cp	r18, r1
    9036:	31 05       	cpc	r19, r1
    9038:	31 f0       	breq	.+12     	; 0x9046 <malloc+0x46>
    903a:	d9 01       	movw	r26, r18
    903c:	13 96       	adiw	r26, 0x03	; 3
    903e:	9c 93       	st	X, r25
    9040:	8e 93       	st	-X, r24
    9042:	12 97       	sbiw	r26, 0x02	; 2
    9044:	2b c0       	rjmp	.+86     	; 0x909c <malloc+0x9c>
    9046:	90 93 d3 0e 	sts	0x0ED3, r25
    904a:	80 93 d2 0e 	sts	0x0ED2, r24
    904e:	26 c0       	rjmp	.+76     	; 0x909c <malloc+0x9c>
    9050:	41 15       	cp	r20, r1
    9052:	51 05       	cpc	r21, r1
    9054:	19 f0       	breq	.+6      	; 0x905c <malloc+0x5c>
    9056:	64 17       	cp	r22, r20
    9058:	75 07       	cpc	r23, r21
    905a:	18 f4       	brcc	.+6      	; 0x9062 <malloc+0x62>
    905c:	ab 01       	movw	r20, r22
    905e:	e9 01       	movw	r28, r18
    9060:	df 01       	movw	r26, r30
    9062:	9f 01       	movw	r18, r30
    9064:	72 81       	ldd	r23, Z+2	; 0x02
    9066:	63 81       	ldd	r22, Z+3	; 0x03
    9068:	e7 2f       	mov	r30, r23
    906a:	f6 2f       	mov	r31, r22
    906c:	30 97       	sbiw	r30, 0x00	; 0
    906e:	c1 f6       	brne	.-80     	; 0x9020 <malloc+0x20>
    9070:	41 15       	cp	r20, r1
    9072:	51 05       	cpc	r21, r1
    9074:	01 f1       	breq	.+64     	; 0x90b6 <malloc+0xb6>
    9076:	48 1b       	sub	r20, r24
    9078:	59 0b       	sbc	r21, r25
    907a:	44 30       	cpi	r20, 0x04	; 4
    907c:	51 05       	cpc	r21, r1
    907e:	80 f4       	brcc	.+32     	; 0x90a0 <malloc+0xa0>
    9080:	12 96       	adiw	r26, 0x02	; 2
    9082:	8d 91       	ld	r24, X+
    9084:	9c 91       	ld	r25, X
    9086:	13 97       	sbiw	r26, 0x03	; 3
    9088:	20 97       	sbiw	r28, 0x00	; 0
    908a:	19 f0       	breq	.+6      	; 0x9092 <malloc+0x92>
    908c:	9b 83       	std	Y+3, r25	; 0x03
    908e:	8a 83       	std	Y+2, r24	; 0x02
    9090:	04 c0       	rjmp	.+8      	; 0x909a <malloc+0x9a>
    9092:	90 93 d3 0e 	sts	0x0ED3, r25
    9096:	80 93 d2 0e 	sts	0x0ED2, r24
    909a:	fd 01       	movw	r30, r26
    909c:	32 96       	adiw	r30, 0x02	; 2
    909e:	46 c0       	rjmp	.+140    	; 0x912c <malloc+0x12c>
    90a0:	fd 01       	movw	r30, r26
    90a2:	e4 0f       	add	r30, r20
    90a4:	f5 1f       	adc	r31, r21
    90a6:	81 93       	st	Z+, r24
    90a8:	91 93       	st	Z+, r25
    90aa:	42 50       	subi	r20, 0x02	; 2
    90ac:	50 40       	sbci	r21, 0x00	; 0
    90ae:	11 96       	adiw	r26, 0x01	; 1
    90b0:	5c 93       	st	X, r21
    90b2:	4e 93       	st	-X, r20
    90b4:	3b c0       	rjmp	.+118    	; 0x912c <malloc+0x12c>
    90b6:	20 91 d0 0e 	lds	r18, 0x0ED0
    90ba:	30 91 d1 0e 	lds	r19, 0x0ED1
    90be:	21 15       	cp	r18, r1
    90c0:	31 05       	cpc	r19, r1
    90c2:	41 f4       	brne	.+16     	; 0x90d4 <malloc+0xd4>
    90c4:	20 91 ea 06 	lds	r18, 0x06EA
    90c8:	30 91 eb 06 	lds	r19, 0x06EB
    90cc:	30 93 d1 0e 	sts	0x0ED1, r19
    90d0:	20 93 d0 0e 	sts	0x0ED0, r18
    90d4:	20 91 ec 06 	lds	r18, 0x06EC
    90d8:	30 91 ed 06 	lds	r19, 0x06ED
    90dc:	21 15       	cp	r18, r1
    90de:	31 05       	cpc	r19, r1
    90e0:	41 f4       	brne	.+16     	; 0x90f2 <malloc+0xf2>
    90e2:	2d b7       	in	r18, 0x3d	; 61
    90e4:	3e b7       	in	r19, 0x3e	; 62
    90e6:	40 91 e8 06 	lds	r20, 0x06E8
    90ea:	50 91 e9 06 	lds	r21, 0x06E9
    90ee:	24 1b       	sub	r18, r20
    90f0:	35 0b       	sbc	r19, r21
    90f2:	e0 91 d0 0e 	lds	r30, 0x0ED0
    90f6:	f0 91 d1 0e 	lds	r31, 0x0ED1
    90fa:	e2 17       	cp	r30, r18
    90fc:	f3 07       	cpc	r31, r19
    90fe:	a0 f4       	brcc	.+40     	; 0x9128 <malloc+0x128>
    9100:	2e 1b       	sub	r18, r30
    9102:	3f 0b       	sbc	r19, r31
    9104:	28 17       	cp	r18, r24
    9106:	39 07       	cpc	r19, r25
    9108:	78 f0       	brcs	.+30     	; 0x9128 <malloc+0x128>
    910a:	ac 01       	movw	r20, r24
    910c:	4e 5f       	subi	r20, 0xFE	; 254
    910e:	5f 4f       	sbci	r21, 0xFF	; 255
    9110:	24 17       	cp	r18, r20
    9112:	35 07       	cpc	r19, r21
    9114:	48 f0       	brcs	.+18     	; 0x9128 <malloc+0x128>
    9116:	4e 0f       	add	r20, r30
    9118:	5f 1f       	adc	r21, r31
    911a:	50 93 d1 0e 	sts	0x0ED1, r21
    911e:	40 93 d0 0e 	sts	0x0ED0, r20
    9122:	81 93       	st	Z+, r24
    9124:	91 93       	st	Z+, r25
    9126:	02 c0       	rjmp	.+4      	; 0x912c <malloc+0x12c>
    9128:	e0 e0       	ldi	r30, 0x00	; 0
    912a:	f0 e0       	ldi	r31, 0x00	; 0
    912c:	cf 01       	movw	r24, r30
    912e:	df 91       	pop	r29
    9130:	cf 91       	pop	r28
    9132:	08 95       	ret

00009134 <free>:
    9134:	cf 93       	push	r28
    9136:	df 93       	push	r29
    9138:	00 97       	sbiw	r24, 0x00	; 0
    913a:	09 f4       	brne	.+2      	; 0x913e <free+0xa>
    913c:	91 c0       	rjmp	.+290    	; 0x9260 <free+0x12c>
    913e:	fc 01       	movw	r30, r24
    9140:	32 97       	sbiw	r30, 0x02	; 2
    9142:	13 82       	std	Z+3, r1	; 0x03
    9144:	12 82       	std	Z+2, r1	; 0x02
    9146:	60 91 d2 0e 	lds	r22, 0x0ED2
    914a:	70 91 d3 0e 	lds	r23, 0x0ED3
    914e:	61 15       	cp	r22, r1
    9150:	71 05       	cpc	r23, r1
    9152:	81 f4       	brne	.+32     	; 0x9174 <free+0x40>
    9154:	20 81       	ld	r18, Z
    9156:	31 81       	ldd	r19, Z+1	; 0x01
    9158:	28 0f       	add	r18, r24
    915a:	39 1f       	adc	r19, r25
    915c:	80 91 d0 0e 	lds	r24, 0x0ED0
    9160:	90 91 d1 0e 	lds	r25, 0x0ED1
    9164:	82 17       	cp	r24, r18
    9166:	93 07       	cpc	r25, r19
    9168:	99 f5       	brne	.+102    	; 0x91d0 <free+0x9c>
    916a:	f0 93 d1 0e 	sts	0x0ED1, r31
    916e:	e0 93 d0 0e 	sts	0x0ED0, r30
    9172:	76 c0       	rjmp	.+236    	; 0x9260 <free+0x12c>
    9174:	db 01       	movw	r26, r22
    9176:	80 e0       	ldi	r24, 0x00	; 0
    9178:	90 e0       	ldi	r25, 0x00	; 0
    917a:	02 c0       	rjmp	.+4      	; 0x9180 <free+0x4c>
    917c:	cd 01       	movw	r24, r26
    917e:	d9 01       	movw	r26, r18
    9180:	ae 17       	cp	r26, r30
    9182:	bf 07       	cpc	r27, r31
    9184:	48 f4       	brcc	.+18     	; 0x9198 <free+0x64>
    9186:	12 96       	adiw	r26, 0x02	; 2
    9188:	2d 91       	ld	r18, X+
    918a:	3c 91       	ld	r19, X
    918c:	13 97       	sbiw	r26, 0x03	; 3
    918e:	21 15       	cp	r18, r1
    9190:	31 05       	cpc	r19, r1
    9192:	a1 f7       	brne	.-24     	; 0x917c <free+0x48>
    9194:	cd 01       	movw	r24, r26
    9196:	21 c0       	rjmp	.+66     	; 0x91da <free+0xa6>
    9198:	b3 83       	std	Z+3, r27	; 0x03
    919a:	a2 83       	std	Z+2, r26	; 0x02
    919c:	ef 01       	movw	r28, r30
    919e:	49 91       	ld	r20, Y+
    91a0:	59 91       	ld	r21, Y+
    91a2:	9e 01       	movw	r18, r28
    91a4:	24 0f       	add	r18, r20
    91a6:	35 1f       	adc	r19, r21
    91a8:	a2 17       	cp	r26, r18
    91aa:	b3 07       	cpc	r27, r19
    91ac:	79 f4       	brne	.+30     	; 0x91cc <free+0x98>
    91ae:	2d 91       	ld	r18, X+
    91b0:	3c 91       	ld	r19, X
    91b2:	11 97       	sbiw	r26, 0x01	; 1
    91b4:	24 0f       	add	r18, r20
    91b6:	35 1f       	adc	r19, r21
    91b8:	2e 5f       	subi	r18, 0xFE	; 254
    91ba:	3f 4f       	sbci	r19, 0xFF	; 255
    91bc:	31 83       	std	Z+1, r19	; 0x01
    91be:	20 83       	st	Z, r18
    91c0:	12 96       	adiw	r26, 0x02	; 2
    91c2:	2d 91       	ld	r18, X+
    91c4:	3c 91       	ld	r19, X
    91c6:	13 97       	sbiw	r26, 0x03	; 3
    91c8:	33 83       	std	Z+3, r19	; 0x03
    91ca:	22 83       	std	Z+2, r18	; 0x02
    91cc:	00 97       	sbiw	r24, 0x00	; 0
    91ce:	29 f4       	brne	.+10     	; 0x91da <free+0xa6>
    91d0:	f0 93 d3 0e 	sts	0x0ED3, r31
    91d4:	e0 93 d2 0e 	sts	0x0ED2, r30
    91d8:	43 c0       	rjmp	.+134    	; 0x9260 <free+0x12c>
    91da:	dc 01       	movw	r26, r24
    91dc:	13 96       	adiw	r26, 0x03	; 3
    91de:	fc 93       	st	X, r31
    91e0:	ee 93       	st	-X, r30
    91e2:	12 97       	sbiw	r26, 0x02	; 2
    91e4:	4d 91       	ld	r20, X+
    91e6:	5d 91       	ld	r21, X+
    91e8:	a4 0f       	add	r26, r20
    91ea:	b5 1f       	adc	r27, r21
    91ec:	ea 17       	cp	r30, r26
    91ee:	fb 07       	cpc	r31, r27
    91f0:	69 f4       	brne	.+26     	; 0x920c <free+0xd8>
    91f2:	20 81       	ld	r18, Z
    91f4:	31 81       	ldd	r19, Z+1	; 0x01
    91f6:	24 0f       	add	r18, r20
    91f8:	35 1f       	adc	r19, r21
    91fa:	2e 5f       	subi	r18, 0xFE	; 254
    91fc:	3f 4f       	sbci	r19, 0xFF	; 255
    91fe:	ec 01       	movw	r28, r24
    9200:	39 83       	std	Y+1, r19	; 0x01
    9202:	28 83       	st	Y, r18
    9204:	22 81       	ldd	r18, Z+2	; 0x02
    9206:	33 81       	ldd	r19, Z+3	; 0x03
    9208:	3b 83       	std	Y+3, r19	; 0x03
    920a:	2a 83       	std	Y+2, r18	; 0x02
    920c:	e0 e0       	ldi	r30, 0x00	; 0
    920e:	f0 e0       	ldi	r31, 0x00	; 0
    9210:	02 c0       	rjmp	.+4      	; 0x9216 <free+0xe2>
    9212:	fb 01       	movw	r30, r22
    9214:	bc 01       	movw	r22, r24
    9216:	db 01       	movw	r26, r22
    9218:	12 96       	adiw	r26, 0x02	; 2
    921a:	8d 91       	ld	r24, X+
    921c:	9c 91       	ld	r25, X
    921e:	13 97       	sbiw	r26, 0x03	; 3
    9220:	00 97       	sbiw	r24, 0x00	; 0
    9222:	b9 f7       	brne	.-18     	; 0x9212 <free+0xde>
    9224:	9b 01       	movw	r18, r22
    9226:	2e 5f       	subi	r18, 0xFE	; 254
    9228:	3f 4f       	sbci	r19, 0xFF	; 255
    922a:	8d 91       	ld	r24, X+
    922c:	9c 91       	ld	r25, X
    922e:	11 97       	sbiw	r26, 0x01	; 1
    9230:	82 0f       	add	r24, r18
    9232:	93 1f       	adc	r25, r19
    9234:	40 91 d0 0e 	lds	r20, 0x0ED0
    9238:	50 91 d1 0e 	lds	r21, 0x0ED1
    923c:	48 17       	cp	r20, r24
    923e:	59 07       	cpc	r21, r25
    9240:	79 f4       	brne	.+30     	; 0x9260 <free+0x12c>
    9242:	30 97       	sbiw	r30, 0x00	; 0
    9244:	29 f4       	brne	.+10     	; 0x9250 <free+0x11c>
    9246:	10 92 d3 0e 	sts	0x0ED3, r1
    924a:	10 92 d2 0e 	sts	0x0ED2, r1
    924e:	02 c0       	rjmp	.+4      	; 0x9254 <free+0x120>
    9250:	13 82       	std	Z+3, r1	; 0x03
    9252:	12 82       	std	Z+2, r1	; 0x02
    9254:	22 50       	subi	r18, 0x02	; 2
    9256:	30 40       	sbci	r19, 0x00	; 0
    9258:	30 93 d1 0e 	sts	0x0ED1, r19
    925c:	20 93 d0 0e 	sts	0x0ED0, r18
    9260:	df 91       	pop	r29
    9262:	cf 91       	pop	r28
    9264:	08 95       	ret

00009266 <__eerd_byte_m1280>:
    9266:	f9 99       	sbic	0x1f, 1	; 31
    9268:	fe cf       	rjmp	.-4      	; 0x9266 <__eerd_byte_m1280>
    926a:	92 bd       	out	0x22, r25	; 34
    926c:	81 bd       	out	0x21, r24	; 33
    926e:	f8 9a       	sbi	0x1f, 0	; 31
    9270:	99 27       	eor	r25, r25
    9272:	80 b5       	in	r24, 0x20	; 32
    9274:	08 95       	ret

00009276 <__eewr_byte_m1280>:
    9276:	26 2f       	mov	r18, r22

00009278 <__eewr_r18_m1280>:
    9278:	f9 99       	sbic	0x1f, 1	; 31
    927a:	fe cf       	rjmp	.-4      	; 0x9278 <__eewr_r18_m1280>
    927c:	1f ba       	out	0x1f, r1	; 31
    927e:	92 bd       	out	0x22, r25	; 34
    9280:	81 bd       	out	0x21, r24	; 33
    9282:	20 bd       	out	0x20, r18	; 32
    9284:	0f b6       	in	r0, 0x3f	; 63
    9286:	f8 94       	cli
    9288:	fa 9a       	sbi	0x1f, 2	; 31
    928a:	f9 9a       	sbi	0x1f, 1	; 31
    928c:	0f be       	out	0x3f, r0	; 63
    928e:	01 96       	adiw	r24, 0x01	; 1
    9290:	08 95       	ret

00009292 <__do_global_dtors>:
    9292:	12 e0       	ldi	r17, 0x02	; 2
    9294:	cc ee       	ldi	r28, 0xEC	; 236
    9296:	d2 e0       	ldi	r29, 0x02	; 2
    9298:	00 e0       	ldi	r16, 0x00	; 0
    929a:	06 c0       	rjmp	.+12     	; 0x92a8 <__do_global_dtors+0x16>
    929c:	22 97       	sbiw	r28, 0x02	; 2
    929e:	01 09       	sbc	r16, r1
    92a0:	fe 01       	movw	r30, r28
    92a2:	0b bf       	out	0x3b, r16	; 59
    92a4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <__tablejump_elpm__>
    92a8:	c0 3f       	cpi	r28, 0xF0	; 240
    92aa:	d1 07       	cpc	r29, r17
    92ac:	80 e0       	ldi	r24, 0x00	; 0
    92ae:	08 07       	cpc	r16, r24
    92b0:	a9 f7       	brne	.-22     	; 0x929c <__do_global_dtors+0xa>
    92b2:	f8 94       	cli

000092b4 <__stop_program>:
    92b4:	ff cf       	rjmp	.-2      	; 0x92b4 <__stop_program>
