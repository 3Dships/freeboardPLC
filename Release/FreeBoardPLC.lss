
FreeBoardPLC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000358  00800200  000065ac  00006640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000065ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b8e  00800558  00800558  00006998  2**0
                  ALLOC
  3 .stab         00019fbc  00000000  00000000  00006998  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000324ce  00000000  00000000  00020954  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 01 	jmp	0x262	; 0x262 <__dtors_end>
       4:	0c 94 b7 29 	jmp	0x536e	; 0x536e <__vector_1>
       8:	0c 94 e8 29 	jmp	0x53d0	; 0x53d0 <__vector_2>
       c:	0c 94 19 2a 	jmp	0x5432	; 0x5432 <__vector_3>
      10:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <__vector_4>
      14:	0c 94 7b 2a 	jmp	0x54f6	; 0x54f6 <__vector_5>
      18:	0c 94 ac 2a 	jmp	0x5558	; 0x5558 <__vector_6>
      1c:	0c 94 dd 2a 	jmp	0x55ba	; 0x55ba <__vector_7>
      20:	0c 94 0e 2b 	jmp	0x561c	; 0x561c <__vector_8>
      24:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      28:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      2c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_11>
      30:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      34:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      38:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      3c:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__vector_15>
      40:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      44:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      48:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      4c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      50:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      54:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      58:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      5c:	0c 94 51 2b 	jmp	0x56a2	; 0x56a2 <__vector_23>
      60:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      64:	0c 94 e4 22 	jmp	0x45c8	; 0x45c8 <__vector_25>
      68:	0c 94 b8 23 	jmp	0x4770	; 0x4770 <__vector_26>
      6c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      70:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      74:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      78:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      7c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      80:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      84:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      88:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      8c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      90:	0c 94 11 23 	jmp	0x4622	; 0x4622 <__vector_36>
      94:	0c 94 f7 23 	jmp	0x47ee	; 0x47ee <__vector_37>
      98:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      9c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      a0:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      a4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      a8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      ac:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      b0:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      b4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      b8:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <__vector_46>
      bc:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__vector_47>
      c0:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__vector_48>
      c4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      c8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      cc:	0c 94 3e 23 	jmp	0x467c	; 0x467c <__vector_51>
      d0:	0c 94 36 24 	jmp	0x486c	; 0x486c <__vector_52>
      d4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      d8:	0c 94 6b 23 	jmp	0x46d6	; 0x46d6 <__vector_54>
      dc:	0c 94 75 24 	jmp	0x48ea	; 0x48ea <__vector_55>
      e0:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

0000012f <port_to_mode_PGM>:
     12f:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     13f:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000149 <port_to_output_PGM>:
     149:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     159:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000163 <port_to_input_PGM>:
     163:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     173:	00 01 00 00 03 01 06 01 09 01                       ..........

0000017d <digital_pin_to_port_PGM>:
     17d:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     18d:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     19d:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1ad:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1bd:	0b 0b 0b 0b 0b 0b                                   ......

000001c3 <digital_pin_to_bit_mask_PGM>:
     1c3:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1d3:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1e3:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1f3:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     203:	04 08 10 20 40 80                                   ... @.

00000209 <digital_pin_to_timer_PGM>:
     209:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     235:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000250 <__ctors_start>:
     250:	24 02       	muls	r18, r20
     252:	d1 0b       	sbc	r29, r17
     254:	31 1a       	sub	r3, r17
     256:	2b 1d       	adc	r18, r11
     258:	52 1d       	adc	r21, r2
     25a:	d4 21       	and	r29, r4
     25c:	63 26       	eor	r6, r19

0000025e <__ctors_end>:
     25e:	29 02       	muls	r18, r25
     260:	36 1a       	sub	r3, r22

00000262 <__dtors_end>:
     262:	11 24       	eor	r1, r1
     264:	1f be       	out	0x3f, r1	; 63
     266:	cf ef       	ldi	r28, 0xFF	; 255
     268:	d1 e2       	ldi	r29, 0x21	; 33
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	cd bf       	out	0x3d, r28	; 61

0000026e <__do_copy_data>:
     26e:	15 e0       	ldi	r17, 0x05	; 5
     270:	a0 e0       	ldi	r26, 0x00	; 0
     272:	b2 e0       	ldi	r27, 0x02	; 2
     274:	ec ea       	ldi	r30, 0xAC	; 172
     276:	f5 e6       	ldi	r31, 0x65	; 101
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	0b bf       	out	0x3b, r16	; 59
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x14>
     27e:	07 90       	elpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	a8 35       	cpi	r26, 0x58	; 88
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0x10>

00000288 <__do_clear_bss>:
     288:	10 e1       	ldi	r17, 0x10	; 16
     28a:	a8 e5       	ldi	r26, 0x58	; 88
     28c:	b5 e0       	ldi	r27, 0x05	; 5
     28e:	01 c0       	rjmp	.+2      	; 0x292 <.do_clear_bss_start>

00000290 <.do_clear_bss_loop>:
     290:	1d 92       	st	X+, r1

00000292 <.do_clear_bss_start>:
     292:	a6 3e       	cpi	r26, 0xE6	; 230
     294:	b1 07       	cpc	r27, r17
     296:	e1 f7       	brne	.-8      	; 0x290 <.do_clear_bss_loop>

00000298 <__do_global_ctors>:
     298:	12 e0       	ldi	r17, 0x02	; 2
     29a:	ce e5       	ldi	r28, 0x5E	; 94
     29c:	d2 e0       	ldi	r29, 0x02	; 2
     29e:	00 e0       	ldi	r16, 0x00	; 0
     2a0:	06 c0       	rjmp	.+12     	; 0x2ae <__do_global_ctors+0x16>
     2a2:	22 97       	sbiw	r28, 0x02	; 2
     2a4:	01 09       	sbc	r16, r1
     2a6:	fe 01       	movw	r30, r28
     2a8:	0b bf       	out	0x3b, r16	; 59
     2aa:	0e 94 77 31 	call	0x62ee	; 0x62ee <__tablejump_elpm__>
     2ae:	c0 35       	cpi	r28, 0x50	; 80
     2b0:	d1 07       	cpc	r29, r17
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	08 07       	cpc	r16, r24
     2b6:	a9 f7       	brne	.-22     	; 0x2a2 <__do_global_ctors+0xa>
     2b8:	0e 94 3f 2b 	call	0x567e	; 0x567e <main>
     2bc:	0c 94 c4 32 	jmp	0x6588	; 0x6588 <__do_global_dtors>

000002c0 <__bad_interrupt>:
     2c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002c4 <_ZN15PinCatcher_implC1Ev>:

#include <Arduino.h>

//--- cosntructors/destructor ------------------------------------------------------------------------------------------

PinCatcher_impl::PinCatcher_impl() :
     2c4:	ef 92       	push	r14
     2c6:	ff 92       	push	r15
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	dc 01       	movw	r26, r24
		pins0_(*portInputRegister(0)), pins1_(*portInputRegister(9)), pins2_(
     2ce:	23 e6       	ldi	r18, 0x63	; 99
     2d0:	31 e0       	ldi	r19, 0x01	; 1
     2d2:	f9 01       	movw	r30, r18
     2d4:	45 91       	lpm	r20, Z+
     2d6:	54 91       	lpm	r21, Z+
				*portInputRegister(11)), last0_(
				pins0_), last1_(pins1_), last2_(pins2_),  mask0_(
				0), mask1_(0), mask2_(0) {
     2d8:	ca 01       	movw	r24, r20
     2da:	91 96       	adiw	r26, 0x21	; 33
     2dc:	5c 93       	st	X, r21
     2de:	4e 93       	st	-X, r20
     2e0:	90 97       	sbiw	r26, 0x20	; 32
#include <Arduino.h>

//--- cosntructors/destructor ------------------------------------------------------------------------------------------

PinCatcher_impl::PinCatcher_impl() :
		pins0_(*portInputRegister(0)), pins1_(*portInputRegister(9)), pins2_(
     2e2:	f9 01       	movw	r30, r18
     2e4:	72 96       	adiw	r30, 0x12	; 18
     2e6:	45 91       	lpm	r20, Z+
     2e8:	54 91       	lpm	r21, Z+
				*portInputRegister(11)), last0_(
				pins0_), last1_(pins1_), last2_(pins2_),  mask0_(
				0), mask1_(0), mask2_(0) {
     2ea:	e4 2e       	mov	r14, r20
     2ec:	e7 01       	movw	r28, r14
     2ee:	7e 01       	movw	r14, r28
     2f0:	f5 2e       	mov	r15, r21
     2f2:	e7 01       	movw	r28, r14
     2f4:	93 96       	adiw	r26, 0x23	; 35
     2f6:	fc 92       	st	X, r15
     2f8:	ee 92       	st	-X, r14
     2fa:	92 97       	sbiw	r26, 0x22	; 34

//--- cosntructors/destructor ------------------------------------------------------------------------------------------

PinCatcher_impl::PinCatcher_impl() :
		pins0_(*portInputRegister(0)), pins1_(*portInputRegister(9)), pins2_(
				*portInputRegister(11)), last0_(
     2fc:	2a 5e       	subi	r18, 0xEA	; 234
     2fe:	3f 4f       	sbci	r19, 0xFF	; 255
     300:	f9 01       	movw	r30, r18
     302:	45 91       	lpm	r20, Z+
     304:	54 91       	lpm	r21, Z+
				pins0_), last1_(pins1_), last2_(pins2_),  mask0_(
				0), mask1_(0), mask2_(0) {
     306:	95 96       	adiw	r26, 0x25	; 37
     308:	5c 93       	st	X, r21
     30a:	4e 93       	st	-X, r20
     30c:	94 97       	sbiw	r26, 0x24	; 36
     30e:	fc 01       	movw	r30, r24
     310:	80 81       	ld	r24, Z
     312:	96 96       	adiw	r26, 0x26	; 38
     314:	8c 93       	st	X, r24
     316:	96 97       	sbiw	r26, 0x26	; 38
     318:	88 81       	ld	r24, Y
     31a:	97 96       	adiw	r26, 0x27	; 39
     31c:	8c 93       	st	X, r24
     31e:	97 97       	sbiw	r26, 0x27	; 39
     320:	fa 01       	movw	r30, r20
     322:	80 81       	ld	r24, Z
     324:	98 96       	adiw	r26, 0x28	; 40
     326:	8c 93       	st	X, r24
     328:	98 97       	sbiw	r26, 0x28	; 40
     32a:	99 96       	adiw	r26, 0x29	; 41
     32c:	1c 92       	st	X, r1
     32e:	99 97       	sbiw	r26, 0x29	; 41
     330:	9a 96       	adiw	r26, 0x2a	; 42
     332:	1c 92       	st	X, r1
     334:	9a 97       	sbiw	r26, 0x2a	; 42
     336:	9b 96       	adiw	r26, 0x2b	; 43
     338:	1c 92       	st	X, r1
     33a:	9b 97       	sbiw	r26, 0x2b	; 43
	// need to clear the who slots.
	memset(who_, 0, (sizeof(PinCatcher*) * 8));
     33c:	80 e1       	ldi	r24, 0x10	; 16
     33e:	1d 92       	st	X+, r1
     340:	8a 95       	dec	r24
     342:	e9 f7       	brne	.-6      	; 0x33e <_ZN15PinCatcher_implC1Ev+0x7a>
}
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	ff 90       	pop	r15
     34a:	ef 90       	pop	r14
     34c:	08 95       	ret

0000034e <_ZN15PinCatcher_implD1Ev>:

PinCatcher_impl::~PinCatcher_impl() {
	PCICR = 0;
     34e:	10 92 68 00 	sts	0x0068, r1
	PCMSK0 = 0;
     352:	10 92 6b 00 	sts	0x006B, r1
	PCMSK1 = 0;
     356:	10 92 6c 00 	sts	0x006C, r1
	PCMSK2 = 0;
     35a:	10 92 6d 00 	sts	0x006D, r1
}
     35e:	08 95       	ret

00000360 <_Z41__static_initialization_and_destruction_0ii.clone.0>:
//}

ISR(PCINT2_vect)
{
	handlePins2_isr();
}
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	91 05       	cpc	r25, r1
     364:	29 f4       	brne	.+10     	; 0x370 <_Z41__static_initialization_and_destruction_0ii.clone.0+0x10>
//--- implementation details ----------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------------
// this is THE pin catcher implementation
PinCatcher_impl pc_i;
     366:	88 e5       	ldi	r24, 0x58	; 88
     368:	95 e0       	ldi	r25, 0x05	; 5
     36a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_ZN15PinCatcher_implC1Ev>
     36e:	08 95       	ret
     370:	00 97       	sbiw	r24, 0x00	; 0
     372:	21 f4       	brne	.+8      	; 0x37c <_Z41__static_initialization_and_destruction_0ii.clone.0+0x1c>
     374:	88 e5       	ldi	r24, 0x58	; 88
     376:	95 e0       	ldi	r25, 0x05	; 5
     378:	0e 94 a7 01 	call	0x34e	; 0x34e <_ZN15PinCatcher_implD1Ev>
     37c:	08 95       	ret

0000037e <_ZN15PinCatcher_impl11handlePins2Ev>:
	}
}



void PinCatcher_impl::handlePins2() {
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	ec 01       	movw	r28, r24
	// see handlePins0_ for comments
	//Serial.print("ISR fired");
	uint8_t curr = pins2_;
     38c:	ec a1       	ldd	r30, Y+36	; 0x24
     38e:	fd a1       	ldd	r31, Y+37	; 0x25
     390:	f0 80       	ld	r15, Z
//	Serial.print(", pins2_=");
//	Serial.print(pins2_, BIN);
//	Serial.print(", last2_=");
//	Serial.print(last2_, BIN);
	uint8_t changed = mask2_ & (curr ^ last2_);
     392:	08 a5       	ldd	r16, Y+40	; 0x28
     394:	0f 25       	eor	r16, r15
     396:	8b a5       	ldd	r24, Y+43	; 0x2b
     398:	08 23       	and	r16, r24
	last2_ = curr;
     39a:	f8 a6       	std	Y+40, r15	; 0x28
//	Serial.print(", mask2_=");
//	Serial.print(mask2_, BIN);
//
//	Serial.print(", changed mask=");
//	Serial.println(changed, BIN);
	uint8_t count = 62; //pins 62-69
     39c:	2e e3       	ldi	r18, 0x3E	; 62
     39e:	e2 2e       	mov	r14, r18
	while (changed) {
     3a0:	1d c0       	rjmp	.+58     	; 0x3dc <_ZN15PinCatcher_impl11handlePins2Ev+0x5e>
		if (changed & 0x01)
     3a2:	10 e0       	ldi	r17, 0x00	; 0
     3a4:	00 ff       	sbrs	r16, 0
     3a6:	16 c0       	rjmp	.+44     	; 0x3d4 <_ZN15PinCatcher_impl11handlePins2Ev+0x56>
			who_[count-54]->handle(count, (curr & 0x01));
     3a8:	ee 2d       	mov	r30, r14
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	f6 97       	sbiw	r30, 0x36	; 54
     3ae:	ee 0f       	add	r30, r30
     3b0:	ff 1f       	adc	r31, r31
     3b2:	ec 0f       	add	r30, r28
     3b4:	fd 1f       	adc	r31, r29
     3b6:	80 81       	ld	r24, Z
     3b8:	91 81       	ldd	r25, Z+1	; 0x01
     3ba:	dc 01       	movw	r26, r24
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	4f 2d       	mov	r20, r15
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	41 70       	andi	r20, 0x01	; 1
     3c6:	50 70       	andi	r21, 0x00	; 0
     3c8:	01 90       	ld	r0, Z+
     3ca:	f0 81       	ld	r31, Z
     3cc:	e0 2d       	mov	r30, r0
     3ce:	6e 2d       	mov	r22, r14
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	09 95       	icall
		changed >>= 1;
     3d4:	15 95       	asr	r17
     3d6:	07 95       	ror	r16
		curr >>= 1;
     3d8:	f6 94       	lsr	r15
		++count;
     3da:	e3 94       	inc	r14
//	Serial.print(mask2_, BIN);
//
//	Serial.print(", changed mask=");
//	Serial.println(changed, BIN);
	uint8_t count = 62; //pins 62-69
	while (changed) {
     3dc:	00 23       	and	r16, r16
     3de:	09 f7       	brne	.-62     	; 0x3a2 <_ZN15PinCatcher_impl11handlePins2Ev+0x24>
			who_[count-54]->handle(count, (curr & 0x01));
		changed >>= 1;
		curr >>= 1;
		++count;
	}
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	ff 90       	pop	r15
     3ea:	ef 90       	pop	r14
     3ec:	08 95       	ret

000003ee <_Z15handlePins2_isrv>:
void handlePins1_isr() {
	pc_i.handlePins1();
}

void handlePins2_isr() {
	pc_i.handlePins2();
     3ee:	88 e5       	ldi	r24, 0x58	; 88
     3f0:	95 e0       	ldi	r25, 0x05	; 5
     3f2:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN15PinCatcher_impl11handlePins2Ev>
}
     3f6:	08 95       	ret

000003f8 <__vector_11>:
//{
//   handlePins2_isr();
//}

ISR(PCINT2_vect)
{
     3f8:	1f 92       	push	r1
     3fa:	0f 92       	push	r0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	0f 92       	push	r0
     400:	0b b6       	in	r0, 0x3b	; 59
     402:	0f 92       	push	r0
     404:	11 24       	eor	r1, r1
     406:	2f 93       	push	r18
     408:	3f 93       	push	r19
     40a:	4f 93       	push	r20
     40c:	5f 93       	push	r21
     40e:	6f 93       	push	r22
     410:	7f 93       	push	r23
     412:	8f 93       	push	r24
     414:	9f 93       	push	r25
     416:	af 93       	push	r26
     418:	bf 93       	push	r27
     41a:	ef 93       	push	r30
     41c:	ff 93       	push	r31
	handlePins2_isr();
     41e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_Z15handlePins2_isrv>
}
     422:	ff 91       	pop	r31
     424:	ef 91       	pop	r30
     426:	bf 91       	pop	r27
     428:	af 91       	pop	r26
     42a:	9f 91       	pop	r25
     42c:	8f 91       	pop	r24
     42e:	7f 91       	pop	r23
     430:	6f 91       	pop	r22
     432:	5f 91       	pop	r21
     434:	4f 91       	pop	r20
     436:	3f 91       	pop	r19
     438:	2f 91       	pop	r18
     43a:	0f 90       	pop	r0
     43c:	0b be       	out	0x3b, r0	; 59
     43e:	0f 90       	pop	r0
     440:	0f be       	out	0x3f, r0	; 63
     442:	0f 90       	pop	r0
     444:	1f 90       	pop	r1
     446:	18 95       	reti

00000448 <_GLOBAL__I__ZN15PinCatcher_implC2Ev>:
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 b0 01 	call	0x360	; 0x360 <_Z41__static_initialization_and_destruction_0ii.clone.0>
     450:	08 95       	ret

00000452 <_GLOBAL__D__ZN15PinCatcher_implC2Ev>:
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 b0 01 	call	0x360	; 0x360 <_Z41__static_initialization_and_destruction_0ii.clone.0>
     45a:	08 95       	ret

0000045c <_ZN7PString5writeEh>:
  if (_size > 0)
    _buf[0] = '\0';
}

size_t PString::write(uint8_t b)
{
     45c:	fc 01       	movw	r30, r24
  if (_cur + 1 < _buf + _size)
     45e:	a6 81       	ldd	r26, Z+6	; 0x06
     460:	b7 81       	ldd	r27, Z+7	; 0x07
     462:	9d 01       	movw	r18, r26
     464:	2f 5f       	subi	r18, 0xFF	; 255
     466:	3f 4f       	sbci	r19, 0xFF	; 255
     468:	84 81       	ldd	r24, Z+4	; 0x04
     46a:	95 81       	ldd	r25, Z+5	; 0x05
     46c:	40 85       	ldd	r20, Z+8	; 0x08
     46e:	51 85       	ldd	r21, Z+9	; 0x09
     470:	84 0f       	add	r24, r20
     472:	95 1f       	adc	r25, r21
     474:	28 17       	cp	r18, r24
     476:	39 07       	cpc	r19, r25
     478:	30 f4       	brcc	.+12     	; 0x486 <_ZN7PString5writeEh+0x2a>
  {
    *_cur++ = (char)b;
     47a:	6c 93       	st	X, r22
     47c:	37 83       	std	Z+7, r19	; 0x07
     47e:	26 83       	std	Z+6, r18	; 0x06
    *_cur = '\0';
     480:	11 96       	adiw	r26, 0x01	; 1
     482:	1c 92       	st	X, r1
     484:	11 97       	sbiw	r26, 0x01	; 1
  }
  return 1;
}
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	08 95       	ret

0000048c <_ZN7PString5beginEv>:
*/

#include "PString.h"

void PString::begin()
{
     48c:	fc 01       	movw	r30, r24
  _cur = _buf;
     48e:	a4 81       	ldd	r26, Z+4	; 0x04
     490:	b5 81       	ldd	r27, Z+5	; 0x05
     492:	b7 83       	std	Z+7, r27	; 0x07
     494:	a6 83       	std	Z+6, r26	; 0x06
  if (_size > 0)
     496:	80 85       	ldd	r24, Z+8	; 0x08
     498:	91 85       	ldd	r25, Z+9	; 0x09
     49a:	00 97       	sbiw	r24, 0x00	; 0
     49c:	09 f0       	breq	.+2      	; 0x4a0 <_ZN7PString5beginEv+0x14>
    _buf[0] = '\0';
     49e:	1c 92       	st	X, r1
     4a0:	08 95       	ret

000004a2 <_ZN3PIDC1Ev>:
  #include "WProgram.h"
#endif

#include <PID_v1/PID_v1.h>

PID::PID(){};
     4a2:	08 95       	ret

000004a4 <_ZN3PID7ComputeEv>:
 *     This, as they say, is where the magic happens.  this function should be called
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed
 **********************************************************************************/ 
void PID::Compute()
{
     4a4:	2f 92       	push	r2
     4a6:	3f 92       	push	r3
     4a8:	4f 92       	push	r4
     4aa:	5f 92       	push	r5
     4ac:	6f 92       	push	r6
     4ae:	7f 92       	push	r7
     4b0:	8f 92       	push	r8
     4b2:	9f 92       	push	r9
     4b4:	af 92       	push	r10
     4b6:	bf 92       	push	r11
     4b8:	cf 92       	push	r12
     4ba:	df 92       	push	r13
     4bc:	ef 92       	push	r14
     4be:	ff 92       	push	r15
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	2a 97       	sbiw	r28, 0x0a	; 10
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
     4d8:	9a 87       	std	Y+10, r25	; 0x0a
     4da:	89 87       	std	Y+9, r24	; 0x09
   if(!inAuto) return;
     4dc:	dc 01       	movw	r26, r24
     4de:	d6 96       	adiw	r26, 0x36	; 54
     4e0:	8c 91       	ld	r24, X
     4e2:	d6 97       	sbiw	r26, 0x36	; 54
     4e4:	88 23       	and	r24, r24
     4e6:	09 f4       	brne	.+2      	; 0x4ea <_ZN3PID7ComputeEv+0x46>
     4e8:	19 c1       	rjmp	.+562    	; 0x71c <_ZN3PID7ComputeEv+0x278>
   unsigned long now = millis();
     4ea:	0e 94 99 2b 	call	0x5732	; 0x5732 <millis>
     4ee:	6d 83       	std	Y+5, r22	; 0x05
     4f0:	7e 83       	std	Y+6, r23	; 0x06
     4f2:	8f 83       	std	Y+7, r24	; 0x07
     4f4:	98 87       	std	Y+8, r25	; 0x08
   int timeChange = (now - lastTime);
     4f6:	e9 85       	ldd	r30, Y+9	; 0x09
     4f8:	fa 85       	ldd	r31, Y+10	; 0x0a
     4fa:	80 a1       	ldd	r24, Z+32	; 0x20
     4fc:	91 a1       	ldd	r25, Z+33	; 0x21
     4fe:	2d 81       	ldd	r18, Y+5	; 0x05
     500:	3e 81       	ldd	r19, Y+6	; 0x06
     502:	28 1b       	sub	r18, r24
     504:	39 0b       	sbc	r19, r25
   if(timeChange>=SampleTime)
     506:	84 a5       	ldd	r24, Z+44	; 0x2c
     508:	95 a5       	ldd	r25, Z+45	; 0x2d
     50a:	28 17       	cp	r18, r24
     50c:	39 07       	cpc	r19, r25
     50e:	0c f4       	brge	.+2      	; 0x512 <_ZN3PID7ComputeEv+0x6e>
     510:	05 c1       	rjmp	.+522    	; 0x71c <_ZN3PID7ComputeEv+0x278>
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
     512:	22 8d       	ldd	r18, Z+26	; 0x1a
     514:	33 8d       	ldd	r19, Z+27	; 0x1b
     516:	d9 01       	movw	r26, r18
     518:	8d 91       	ld	r24, X+
     51a:	9d 91       	ld	r25, X+
     51c:	0d 90       	ld	r0, X+
     51e:	bc 91       	ld	r27, X
     520:	a0 2d       	mov	r26, r0
     522:	89 83       	std	Y+1, r24	; 0x01
     524:	9a 83       	std	Y+2, r25	; 0x02
     526:	ab 83       	std	Y+3, r26	; 0x03
     528:	bc 83       	std	Y+4, r27	; 0x04
      double error = *mySetpoint - input;
     52a:	06 8c       	ldd	r0, Z+30	; 0x1e
     52c:	f7 8d       	ldd	r31, Z+31	; 0x1f
     52e:	e0 2d       	mov	r30, r0
     530:	60 81       	ld	r22, Z
     532:	71 81       	ldd	r23, Z+1	; 0x01
     534:	82 81       	ldd	r24, Z+2	; 0x02
     536:	93 81       	ldd	r25, Z+3	; 0x03
     538:	29 81       	ldd	r18, Y+1	; 0x01
     53a:	3a 81       	ldd	r19, Y+2	; 0x02
     53c:	4b 81       	ldd	r20, Y+3	; 0x03
     53e:	5c 81       	ldd	r21, Y+4	; 0x04
     540:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
     544:	56 2e       	mov	r5, r22
     546:	47 2e       	mov	r4, r23
     548:	38 2e       	mov	r3, r24
     54a:	29 2e       	mov	r2, r25
      ITerm+= (ki * error);
     54c:	a2 01       	movw	r20, r4
     54e:	91 01       	movw	r18, r2
     550:	65 2f       	mov	r22, r21
     552:	74 2f       	mov	r23, r20
     554:	83 2f       	mov	r24, r19
     556:	92 2f       	mov	r25, r18
     558:	e9 85       	ldd	r30, Y+9	; 0x09
     55a:	fa 85       	ldd	r31, Y+10	; 0x0a
     55c:	20 89       	ldd	r18, Z+16	; 0x10
     55e:	31 89       	ldd	r19, Z+17	; 0x11
     560:	42 89       	ldd	r20, Z+18	; 0x12
     562:	53 89       	ldd	r21, Z+19	; 0x13
     564:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
     568:	a9 85       	ldd	r26, Y+9	; 0x09
     56a:	ba 85       	ldd	r27, Y+10	; 0x0a
     56c:	94 96       	adiw	r26, 0x24	; 36
     56e:	2d 91       	ld	r18, X+
     570:	3d 91       	ld	r19, X+
     572:	4d 91       	ld	r20, X+
     574:	5c 91       	ld	r21, X
     576:	97 97       	sbiw	r26, 0x27	; 39
     578:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
     57c:	d6 2e       	mov	r13, r22
     57e:	c7 2e       	mov	r12, r23
     580:	b8 2e       	mov	r11, r24
     582:	a9 2e       	mov	r10, r25
     584:	a6 01       	movw	r20, r12
     586:	95 01       	movw	r18, r10
     588:	85 2f       	mov	r24, r21
     58a:	94 2f       	mov	r25, r20
     58c:	a3 2f       	mov	r26, r19
     58e:	b2 2f       	mov	r27, r18
     590:	e9 85       	ldd	r30, Y+9	; 0x09
     592:	fa 85       	ldd	r31, Y+10	; 0x0a
     594:	84 a3       	std	Z+36, r24	; 0x24
     596:	95 a3       	std	Z+37, r25	; 0x25
     598:	a6 a3       	std	Z+38, r26	; 0x26
     59a:	b7 a3       	std	Z+39, r27	; 0x27
      if(ITerm > outMax) ITerm= outMax;
     59c:	02 a9       	ldd	r16, Z+50	; 0x32
     59e:	13 a9       	ldd	r17, Z+51	; 0x33
     5a0:	f4 a8       	ldd	r15, Z+52	; 0x34
     5a2:	e5 a8       	ldd	r14, Z+53	; 0x35
     5a4:	65 2f       	mov	r22, r21
     5a6:	74 2f       	mov	r23, r20
     5a8:	83 2f       	mov	r24, r19
     5aa:	92 2f       	mov	r25, r18
     5ac:	f7 01       	movw	r30, r14
     5ae:	20 2f       	mov	r18, r16
     5b0:	31 2f       	mov	r19, r17
     5b2:	4f 2f       	mov	r20, r31
     5b4:	5e 2f       	mov	r21, r30
     5b6:	0e 94 17 30 	call	0x602e	; 0x602e <__gesf2>
     5ba:	18 16       	cp	r1, r24
     5bc:	64 f4       	brge	.+24     	; 0x5d6 <_ZN3PID7ComputeEv+0x132>
     5be:	97 01       	movw	r18, r14
     5c0:	80 2f       	mov	r24, r16
     5c2:	91 2f       	mov	r25, r17
     5c4:	a3 2f       	mov	r26, r19
     5c6:	b2 2f       	mov	r27, r18
     5c8:	e9 85       	ldd	r30, Y+9	; 0x09
     5ca:	fa 85       	ldd	r31, Y+10	; 0x0a
     5cc:	84 a3       	std	Z+36, r24	; 0x24
     5ce:	95 a3       	std	Z+37, r25	; 0x25
     5d0:	a6 a3       	std	Z+38, r26	; 0x26
     5d2:	b7 a3       	std	Z+39, r27	; 0x27
     5d4:	1a c0       	rjmp	.+52     	; 0x60a <_ZN3PID7ComputeEv+0x166>
      else if(ITerm < outMin) ITerm= outMin;
     5d6:	a9 85       	ldd	r26, Y+9	; 0x09
     5d8:	ba 85       	ldd	r27, Y+10	; 0x0a
     5da:	9e 96       	adiw	r26, 0x2e	; 46
     5dc:	6d 90       	ld	r6, X+
     5de:	7d 90       	ld	r7, X+
     5e0:	8d 90       	ld	r8, X+
     5e2:	9c 90       	ld	r9, X
     5e4:	d1 97       	sbiw	r26, 0x31	; 49
     5e6:	a6 01       	movw	r20, r12
     5e8:	95 01       	movw	r18, r10
     5ea:	65 2f       	mov	r22, r21
     5ec:	74 2f       	mov	r23, r20
     5ee:	83 2f       	mov	r24, r19
     5f0:	92 2f       	mov	r25, r18
     5f2:	a4 01       	movw	r20, r8
     5f4:	93 01       	movw	r18, r6
     5f6:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__cmpsf2>
     5fa:	87 ff       	sbrs	r24, 7
     5fc:	06 c0       	rjmp	.+12     	; 0x60a <_ZN3PID7ComputeEv+0x166>
     5fe:	e9 85       	ldd	r30, Y+9	; 0x09
     600:	fa 85       	ldd	r31, Y+10	; 0x0a
     602:	64 a2       	std	Z+36, r6	; 0x24
     604:	75 a2       	std	Z+37, r7	; 0x25
     606:	86 a2       	std	Z+38, r8	; 0x26
     608:	97 a2       	std	Z+39, r9	; 0x27
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
     60a:	a2 01       	movw	r20, r4
     60c:	91 01       	movw	r18, r2
     60e:	65 2f       	mov	r22, r21
     610:	74 2d       	mov	r23, r4
     612:	83 2f       	mov	r24, r19
     614:	92 2d       	mov	r25, r2
     616:	a9 85       	ldd	r26, Y+9	; 0x09
     618:	ba 85       	ldd	r27, Y+10	; 0x0a
     61a:	1c 96       	adiw	r26, 0x0c	; 12
     61c:	2d 91       	ld	r18, X+
     61e:	3d 91       	ld	r19, X+
     620:	4d 91       	ld	r20, X+
     622:	5c 91       	ld	r21, X
     624:	1f 97       	sbiw	r26, 0x0f	; 15
     626:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
     62a:	e9 85       	ldd	r30, Y+9	; 0x09
     62c:	fa 85       	ldd	r31, Y+10	; 0x0a
     62e:	24 a1       	ldd	r18, Z+36	; 0x24
     630:	35 a1       	ldd	r19, Z+37	; 0x25
     632:	46 a1       	ldd	r20, Z+38	; 0x26
     634:	57 a1       	ldd	r21, Z+39	; 0x27
     636:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
     63a:	5b 01       	movw	r10, r22
     63c:	6c 01       	movw	r12, r24
	  double input = *myInput;
      double error = *mySetpoint - input;
      ITerm+= (ki * error);
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
     63e:	69 81       	ldd	r22, Y+1	; 0x01
     640:	7a 81       	ldd	r23, Y+2	; 0x02
     642:	8b 81       	ldd	r24, Y+3	; 0x03
     644:	9c 81       	ldd	r25, Y+4	; 0x04
     646:	a9 85       	ldd	r26, Y+9	; 0x09
     648:	ba 85       	ldd	r27, Y+10	; 0x0a
     64a:	98 96       	adiw	r26, 0x28	; 40
     64c:	2d 91       	ld	r18, X+
     64e:	3d 91       	ld	r19, X+
     650:	4d 91       	ld	r20, X+
     652:	5c 91       	ld	r21, X
     654:	9b 97       	sbiw	r26, 0x2b	; 43
     656:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
     65a:	e9 85       	ldd	r30, Y+9	; 0x09
     65c:	fa 85       	ldd	r31, Y+10	; 0x0a
     65e:	24 89       	ldd	r18, Z+20	; 0x14
     660:	35 89       	ldd	r19, Z+21	; 0x15
     662:	46 89       	ldd	r20, Z+22	; 0x16
     664:	57 89       	ldd	r21, Z+23	; 0x17
     666:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
     66a:	9b 01       	movw	r18, r22
     66c:	ac 01       	movw	r20, r24
     66e:	c6 01       	movw	r24, r12
     670:	b5 01       	movw	r22, r10
     672:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
     676:	d6 2e       	mov	r13, r22
     678:	c7 2e       	mov	r12, r23
     67a:	b8 2e       	mov	r11, r24
     67c:	a9 2e       	mov	r10, r25
      
	  if(output > outMax) output = outMax;
     67e:	a6 01       	movw	r20, r12
     680:	95 01       	movw	r18, r10
     682:	65 2f       	mov	r22, r21
     684:	74 2f       	mov	r23, r20
     686:	83 2f       	mov	r24, r19
     688:	92 2f       	mov	r25, r18
     68a:	f7 01       	movw	r30, r14
     68c:	20 2f       	mov	r18, r16
     68e:	31 2f       	mov	r19, r17
     690:	4f 2f       	mov	r20, r31
     692:	5e 2d       	mov	r21, r14
     694:	0e 94 17 30 	call	0x602e	; 0x602e <__gesf2>
     698:	18 16       	cp	r1, r24
     69a:	fc f0       	brlt	.+62     	; 0x6da <_ZN3PID7ComputeEv+0x236>
      else if(output < outMin) output = outMin;
     69c:	a9 85       	ldd	r26, Y+9	; 0x09
     69e:	ba 85       	ldd	r27, Y+10	; 0x0a
     6a0:	9e 96       	adiw	r26, 0x2e	; 46
     6a2:	0c 91       	ld	r16, X
     6a4:	9e 97       	sbiw	r26, 0x2e	; 46
     6a6:	9f 96       	adiw	r26, 0x2f	; 47
     6a8:	1c 91       	ld	r17, X
     6aa:	9f 97       	sbiw	r26, 0x2f	; 47
     6ac:	d0 96       	adiw	r26, 0x30	; 48
     6ae:	fc 90       	ld	r15, X
     6b0:	d0 97       	sbiw	r26, 0x30	; 48
     6b2:	d1 96       	adiw	r26, 0x31	; 49
     6b4:	ec 90       	ld	r14, X
     6b6:	a6 01       	movw	r20, r12
     6b8:	95 01       	movw	r18, r10
     6ba:	65 2f       	mov	r22, r21
     6bc:	74 2f       	mov	r23, r20
     6be:	83 2f       	mov	r24, r19
     6c0:	92 2f       	mov	r25, r18
     6c2:	f7 01       	movw	r30, r14
     6c4:	20 2f       	mov	r18, r16
     6c6:	31 2f       	mov	r19, r17
     6c8:	4f 2f       	mov	r20, r31
     6ca:	5e 2f       	mov	r21, r30
     6cc:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__cmpsf2>
     6d0:	87 fd       	sbrc	r24, 7
     6d2:	03 c0       	rjmp	.+6      	; 0x6da <_ZN3PID7ComputeEv+0x236>
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
     6d4:	0d 2d       	mov	r16, r13
     6d6:	1c 2d       	mov	r17, r12
     6d8:	75 01       	movw	r14, r10
      
	  if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	  *myOutput = output;
     6da:	a9 85       	ldd	r26, Y+9	; 0x09
     6dc:	ba 85       	ldd	r27, Y+10	; 0x0a
     6de:	5c 96       	adiw	r26, 0x1c	; 28
     6e0:	ed 91       	ld	r30, X+
     6e2:	fc 91       	ld	r31, X
     6e4:	5d 97       	sbiw	r26, 0x1d	; 29
     6e6:	97 01       	movw	r18, r14
     6e8:	80 2f       	mov	r24, r16
     6ea:	91 2f       	mov	r25, r17
     6ec:	a3 2f       	mov	r26, r19
     6ee:	be 2d       	mov	r27, r14
     6f0:	80 83       	st	Z, r24
     6f2:	91 83       	std	Z+1, r25	; 0x01
     6f4:	a2 83       	std	Z+2, r26	; 0x02
     6f6:	b3 83       	std	Z+3, r27	; 0x03
	  
      /*Remember some variables for next time*/
      lastInput = input;
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	9a 81       	ldd	r25, Y+2	; 0x02
     6fc:	ab 81       	ldd	r26, Y+3	; 0x03
     6fe:	bc 81       	ldd	r27, Y+4	; 0x04
     700:	e9 85       	ldd	r30, Y+9	; 0x09
     702:	fa 85       	ldd	r31, Y+10	; 0x0a
     704:	80 a7       	std	Z+40, r24	; 0x28
     706:	91 a7       	std	Z+41, r25	; 0x29
     708:	a2 a7       	std	Z+42, r26	; 0x2a
     70a:	b3 a7       	std	Z+43, r27	; 0x2b
      lastTime = now;
     70c:	8d 81       	ldd	r24, Y+5	; 0x05
     70e:	9e 81       	ldd	r25, Y+6	; 0x06
     710:	af 81       	ldd	r26, Y+7	; 0x07
     712:	b8 85       	ldd	r27, Y+8	; 0x08
     714:	80 a3       	std	Z+32, r24	; 0x20
     716:	91 a3       	std	Z+33, r25	; 0x21
     718:	a2 a3       	std	Z+34, r26	; 0x22
     71a:	b3 a3       	std	Z+35, r27	; 0x23
   }
}
     71c:	2a 96       	adiw	r28, 0x0a	; 10
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
     728:	cf 91       	pop	r28
     72a:	df 91       	pop	r29
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	ff 90       	pop	r15
     732:	ef 90       	pop	r14
     734:	df 90       	pop	r13
     736:	cf 90       	pop	r12
     738:	bf 90       	pop	r11
     73a:	af 90       	pop	r10
     73c:	9f 90       	pop	r9
     73e:	8f 90       	pop	r8
     740:	7f 90       	pop	r7
     742:	6f 90       	pop	r6
     744:	5f 90       	pop	r5
     746:	4f 90       	pop	r4
     748:	3f 90       	pop	r3
     74a:	2f 90       	pop	r2
     74c:	08 95       	ret

0000074e <_ZN3PID10SetTuningsEddd>:
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
     74e:	2f 92       	push	r2
     750:	3f 92       	push	r3
     752:	4f 92       	push	r4
     754:	5f 92       	push	r5
     756:	6f 92       	push	r6
     758:	7f 92       	push	r7
     75a:	8f 92       	push	r8
     75c:	9f 92       	push	r9
     75e:	af 92       	push	r10
     760:	bf 92       	push	r11
     762:	cf 92       	push	r12
     764:	df 92       	push	r13
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	ec 01       	movw	r28, r24
     774:	2a 01       	movw	r4, r20
     776:	3b 01       	movw	r6, r22
     778:	48 01       	movw	r8, r16
     77a:	59 01       	movw	r10, r18
   if (Kp<0 || Ki<0 || Kd<0) return;
     77c:	cb 01       	movw	r24, r22
     77e:	ba 01       	movw	r22, r20
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	a9 01       	movw	r20, r18
     786:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__cmpsf2>
     78a:	87 fd       	sbrc	r24, 7
     78c:	8a c0       	rjmp	.+276    	; 0x8a2 <_ZN3PID10SetTuningsEddd+0x154>
     78e:	c5 01       	movw	r24, r10
     790:	b4 01       	movw	r22, r8
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	a9 01       	movw	r20, r18
     798:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__cmpsf2>
     79c:	87 fd       	sbrc	r24, 7
     79e:	81 c0       	rjmp	.+258    	; 0x8a2 <_ZN3PID10SetTuningsEddd+0x154>
     7a0:	c7 01       	movw	r24, r14
     7a2:	b6 01       	movw	r22, r12
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	a9 01       	movw	r20, r18
     7aa:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__cmpsf2>
     7ae:	87 fd       	sbrc	r24, 7
     7b0:	78 c0       	rjmp	.+240    	; 0x8a2 <_ZN3PID10SetTuningsEddd+0x154>
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
     7b2:	48 82       	st	Y, r4
     7b4:	59 82       	std	Y+1, r5	; 0x01
     7b6:	6a 82       	std	Y+2, r6	; 0x02
     7b8:	7b 82       	std	Y+3, r7	; 0x03
     7ba:	8c 82       	std	Y+4, r8	; 0x04
     7bc:	9d 82       	std	Y+5, r9	; 0x05
     7be:	ae 82       	std	Y+6, r10	; 0x06
     7c0:	bf 82       	std	Y+7, r11	; 0x07
     7c2:	c8 86       	std	Y+8, r12	; 0x08
     7c4:	d9 86       	std	Y+9, r13	; 0x09
     7c6:	ea 86       	std	Y+10, r14	; 0x0a
     7c8:	fb 86       	std	Y+11, r15	; 0x0b
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
     7ca:	6c a5       	ldd	r22, Y+44	; 0x2c
     7cc:	7d a5       	ldd	r23, Y+45	; 0x2d
     7ce:	88 27       	eor	r24, r24
     7d0:	77 fd       	sbrc	r23, 7
     7d2:	80 95       	com	r24
     7d4:	98 2f       	mov	r25, r24
     7d6:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__floatsisf>
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	4a e7       	ldi	r20, 0x7A	; 122
     7e0:	54 e4       	ldi	r21, 0x44	; 68
     7e2:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <__divsf3>
     7e6:	16 2f       	mov	r17, r22
     7e8:	07 2f       	mov	r16, r23
     7ea:	38 2e       	mov	r3, r24
     7ec:	29 2e       	mov	r2, r25
   kp = Kp;
     7ee:	4c 86       	std	Y+12, r4	; 0x0c
     7f0:	5d 86       	std	Y+13, r5	; 0x0d
     7f2:	6e 86       	std	Y+14, r6	; 0x0e
     7f4:	7f 86       	std	Y+15, r7	; 0x0f
   ki = Ki * SampleTimeInSec;
     7f6:	c5 01       	movw	r24, r10
     7f8:	b4 01       	movw	r22, r8
     7fa:	d8 01       	movw	r26, r16
     7fc:	f1 01       	movw	r30, r2
     7fe:	2b 2f       	mov	r18, r27
     800:	3a 2f       	mov	r19, r26
     802:	4f 2f       	mov	r20, r31
     804:	5e 2f       	mov	r21, r30
     806:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
     80a:	86 2e       	mov	r8, r22
     80c:	b7 2e       	mov	r11, r23
     80e:	a8 2e       	mov	r10, r24
     810:	99 2e       	mov	r9, r25
     812:	86 2f       	mov	r24, r22
     814:	9b 2d       	mov	r25, r11
     816:	aa 2d       	mov	r26, r10
     818:	b9 2d       	mov	r27, r9
     81a:	88 8b       	std	Y+16, r24	; 0x10
     81c:	99 8b       	std	Y+17, r25	; 0x11
     81e:	aa 8b       	std	Y+18, r26	; 0x12
     820:	bb 8b       	std	Y+19, r27	; 0x13
   kd = Kd / SampleTimeInSec;
     822:	c7 01       	movw	r24, r14
     824:	b6 01       	movw	r22, r12
     826:	d8 01       	movw	r26, r16
     828:	f1 01       	movw	r30, r2
     82a:	2b 2f       	mov	r18, r27
     82c:	3a 2f       	mov	r19, r26
     82e:	4f 2f       	mov	r20, r31
     830:	5e 2f       	mov	r21, r30
     832:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <__divsf3>
     836:	c6 2e       	mov	r12, r22
     838:	17 2f       	mov	r17, r23
     83a:	08 2f       	mov	r16, r24
     83c:	f9 2e       	mov	r15, r25
     83e:	86 2f       	mov	r24, r22
     840:	91 2f       	mov	r25, r17
     842:	a0 2f       	mov	r26, r16
     844:	bf 2d       	mov	r27, r15
     846:	8c 8b       	std	Y+20, r24	; 0x14
     848:	9d 8b       	std	Y+21, r25	; 0x15
     84a:	ae 8b       	std	Y+22, r26	; 0x16
     84c:	bf 8b       	std	Y+23, r27	; 0x17
 
  if(controllerDirection ==REVERSE)
     84e:	88 8d       	ldd	r24, Y+24	; 0x18
     850:	99 8d       	ldd	r25, Y+25	; 0x19
     852:	81 30       	cpi	r24, 0x01	; 1
     854:	91 05       	cpc	r25, r1
     856:	29 f5       	brne	.+74     	; 0x8a2 <_ZN3PID10SetTuningsEddd+0x154>
   {
      kp = (0 - kp);
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	cb 01       	movw	r24, r22
     85e:	a3 01       	movw	r20, r6
     860:	92 01       	movw	r18, r4
     862:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
     866:	6c 87       	std	Y+12, r22	; 0x0c
     868:	7d 87       	std	Y+13, r23	; 0x0d
     86a:	8e 87       	std	Y+14, r24	; 0x0e
     86c:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	cb 01       	movw	r24, r22
     874:	28 2d       	mov	r18, r8
     876:	3b 2d       	mov	r19, r11
     878:	4a 2d       	mov	r20, r10
     87a:	59 2d       	mov	r21, r9
     87c:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
     880:	68 8b       	std	Y+16, r22	; 0x10
     882:	79 8b       	std	Y+17, r23	; 0x11
     884:	8a 8b       	std	Y+18, r24	; 0x12
     886:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	cb 01       	movw	r24, r22
     88e:	2c 2d       	mov	r18, r12
     890:	31 2f       	mov	r19, r17
     892:	40 2f       	mov	r20, r16
     894:	5f 2d       	mov	r21, r15
     896:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
     89a:	6c 8b       	std	Y+20, r22	; 0x14
     89c:	7d 8b       	std	Y+21, r23	; 0x15
     89e:	8e 8b       	std	Y+22, r24	; 0x16
     8a0:	9f 8b       	std	Y+23, r25	; 0x17
   }
}
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	ff 90       	pop	r15
     8ac:	ef 90       	pop	r14
     8ae:	df 90       	pop	r13
     8b0:	cf 90       	pop	r12
     8b2:	bf 90       	pop	r11
     8b4:	af 90       	pop	r10
     8b6:	9f 90       	pop	r9
     8b8:	8f 90       	pop	r8
     8ba:	7f 90       	pop	r7
     8bc:	6f 90       	pop	r6
     8be:	5f 90       	pop	r5
     8c0:	4f 90       	pop	r4
     8c2:	3f 90       	pop	r3
     8c4:	2f 90       	pop	r2
     8c6:	08 95       	ret

000008c8 <_ZN3PID13SetSampleTimeEi>:
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
     8c8:	cf 92       	push	r12
     8ca:	df 92       	push	r13
     8cc:	ef 92       	push	r14
     8ce:	ff 92       	push	r15
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	ec 01       	movw	r28, r24
     8da:	6b 01       	movw	r12, r22
   if (NewSampleTime > 0)
     8dc:	16 16       	cp	r1, r22
     8de:	17 06       	cpc	r1, r23
     8e0:	ec f5       	brge	.+122    	; 0x95c <_ZN3PID13SetSampleTimeEi+0x94>
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
     8e2:	b6 01       	movw	r22, r12
     8e4:	88 27       	eor	r24, r24
     8e6:	77 fd       	sbrc	r23, 7
     8e8:	80 95       	com	r24
     8ea:	98 2f       	mov	r25, r24
     8ec:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__floatsisf>
     8f0:	7b 01       	movw	r14, r22
     8f2:	8c 01       	movw	r16, r24
     8f4:	6c a5       	ldd	r22, Y+44	; 0x2c
     8f6:	7d a5       	ldd	r23, Y+45	; 0x2d
     8f8:	88 27       	eor	r24, r24
     8fa:	77 fd       	sbrc	r23, 7
     8fc:	80 95       	com	r24
     8fe:	98 2f       	mov	r25, r24
     900:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__floatsisf>
     904:	9b 01       	movw	r18, r22
     906:	ac 01       	movw	r20, r24
     908:	c8 01       	movw	r24, r16
     90a:	b7 01       	movw	r22, r14
     90c:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <__divsf3>
     910:	16 2f       	mov	r17, r22
     912:	07 2f       	mov	r16, r23
     914:	f8 2e       	mov	r15, r24
     916:	e9 2e       	mov	r14, r25
      ki *= ratio;
     918:	68 89       	ldd	r22, Y+16	; 0x10
     91a:	79 89       	ldd	r23, Y+17	; 0x11
     91c:	8a 89       	ldd	r24, Y+18	; 0x12
     91e:	9b 89       	ldd	r25, Y+19	; 0x13
     920:	d8 01       	movw	r26, r16
     922:	f7 01       	movw	r30, r14
     924:	2b 2f       	mov	r18, r27
     926:	3a 2f       	mov	r19, r26
     928:	4f 2f       	mov	r20, r31
     92a:	5e 2f       	mov	r21, r30
     92c:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
     930:	68 8b       	std	Y+16, r22	; 0x10
     932:	79 8b       	std	Y+17, r23	; 0x11
     934:	8a 8b       	std	Y+18, r24	; 0x12
     936:	9b 8b       	std	Y+19, r25	; 0x13
      kd /= ratio;
     938:	6c 89       	ldd	r22, Y+20	; 0x14
     93a:	7d 89       	ldd	r23, Y+21	; 0x15
     93c:	8e 89       	ldd	r24, Y+22	; 0x16
     93e:	9f 89       	ldd	r25, Y+23	; 0x17
     940:	d8 01       	movw	r26, r16
     942:	f7 01       	movw	r30, r14
     944:	2b 2f       	mov	r18, r27
     946:	3a 2f       	mov	r19, r26
     948:	4f 2f       	mov	r20, r31
     94a:	5e 2f       	mov	r21, r30
     94c:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <__divsf3>
     950:	6c 8b       	std	Y+20, r22	; 0x14
     952:	7d 8b       	std	Y+21, r23	; 0x15
     954:	8e 8b       	std	Y+22, r24	; 0x16
     956:	9f 8b       	std	Y+23, r25	; 0x17
      SampleTime = (unsigned long)NewSampleTime;
     958:	dd a6       	std	Y+45, r13	; 0x2d
     95a:	cc a6       	std	Y+44, r12	; 0x2c
   }
}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	df 90       	pop	r13
     96a:	cf 90       	pop	r12
     96c:	08 95       	ret

0000096e <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
     96e:	4f 92       	push	r4
     970:	5f 92       	push	r5
     972:	6f 92       	push	r6
     974:	7f 92       	push	r7
     976:	8f 92       	push	r8
     978:	9f 92       	push	r9
     97a:	af 92       	push	r10
     97c:	bf 92       	push	r11
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	ec 01       	movw	r28, r24
     990:	5a 01       	movw	r10, r20
     992:	6b 01       	movw	r12, r22
     994:	78 01       	movw	r14, r16
     996:	89 01       	movw	r16, r18
   if(Min >= Max) return;
     998:	cb 01       	movw	r24, r22
     99a:	ba 01       	movw	r22, r20
     99c:	a8 01       	movw	r20, r16
     99e:	97 01       	movw	r18, r14
     9a0:	0e 94 17 30 	call	0x602e	; 0x602e <__gesf2>
     9a4:	87 ff       	sbrs	r24, 7
     9a6:	4e c0       	rjmp	.+156    	; 0xa44 <_ZN3PID15SetOutputLimitsEdd+0xd6>
   outMin = Min;
     9a8:	ae a6       	std	Y+46, r10	; 0x2e
     9aa:	bf a6       	std	Y+47, r11	; 0x2f
     9ac:	c8 aa       	std	Y+48, r12	; 0x30
     9ae:	d9 aa       	std	Y+49, r13	; 0x31
   outMax = Max;
     9b0:	ea aa       	std	Y+50, r14	; 0x32
     9b2:	fb aa       	std	Y+51, r15	; 0x33
     9b4:	0c ab       	std	Y+52, r16	; 0x34
     9b6:	1d ab       	std	Y+53, r17	; 0x35
 
   if(inAuto)
     9b8:	8e a9       	ldd	r24, Y+54	; 0x36
     9ba:	88 23       	and	r24, r24
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <_ZN3PID15SetOutputLimitsEdd+0x52>
     9be:	42 c0       	rjmp	.+132    	; 0xa44 <_ZN3PID15SetOutputLimitsEdd+0xd6>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
     9c0:	8c 8c       	ldd	r8, Y+28	; 0x1c
     9c2:	9d 8c       	ldd	r9, Y+29	; 0x1d
     9c4:	f4 01       	movw	r30, r8
     9c6:	40 80       	ld	r4, Z
     9c8:	51 80       	ldd	r5, Z+1	; 0x01
     9ca:	62 80       	ldd	r6, Z+2	; 0x02
     9cc:	73 80       	ldd	r7, Z+3	; 0x03
     9ce:	c3 01       	movw	r24, r6
     9d0:	b2 01       	movw	r22, r4
     9d2:	a8 01       	movw	r20, r16
     9d4:	97 01       	movw	r18, r14
     9d6:	0e 94 17 30 	call	0x602e	; 0x602e <__gesf2>
     9da:	18 16       	cp	r1, r24
     9dc:	34 f4       	brge	.+12     	; 0x9ea <_ZN3PID15SetOutputLimitsEdd+0x7c>
     9de:	f4 01       	movw	r30, r8
     9e0:	e0 82       	st	Z, r14
     9e2:	f1 82       	std	Z+1, r15	; 0x01
     9e4:	02 83       	std	Z+2, r16	; 0x02
     9e6:	13 83       	std	Z+3, r17	; 0x03
     9e8:	0d c0       	rjmp	.+26     	; 0xa04 <_ZN3PID15SetOutputLimitsEdd+0x96>
	   else if(*myOutput < outMin) *myOutput = outMin;
     9ea:	c3 01       	movw	r24, r6
     9ec:	b2 01       	movw	r22, r4
     9ee:	a6 01       	movw	r20, r12
     9f0:	95 01       	movw	r18, r10
     9f2:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__cmpsf2>
     9f6:	87 ff       	sbrs	r24, 7
     9f8:	05 c0       	rjmp	.+10     	; 0xa04 <_ZN3PID15SetOutputLimitsEdd+0x96>
     9fa:	f4 01       	movw	r30, r8
     9fc:	a0 82       	st	Z, r10
     9fe:	b1 82       	std	Z+1, r11	; 0x01
     a00:	c2 82       	std	Z+2, r12	; 0x02
     a02:	d3 82       	std	Z+3, r13	; 0x03
	 
	   if(ITerm > outMax) ITerm= outMax;
     a04:	ac a0       	ldd	r10, Y+36	; 0x24
     a06:	bd a0       	ldd	r11, Y+37	; 0x25
     a08:	ce a0       	ldd	r12, Y+38	; 0x26
     a0a:	df a0       	ldd	r13, Y+39	; 0x27
     a0c:	ea a8       	ldd	r14, Y+50	; 0x32
     a0e:	fb a8       	ldd	r15, Y+51	; 0x33
     a10:	0c a9       	ldd	r16, Y+52	; 0x34
     a12:	1d a9       	ldd	r17, Y+53	; 0x35
     a14:	c6 01       	movw	r24, r12
     a16:	b5 01       	movw	r22, r10
     a18:	a8 01       	movw	r20, r16
     a1a:	97 01       	movw	r18, r14
     a1c:	0e 94 17 30 	call	0x602e	; 0x602e <__gesf2>
     a20:	18 16       	cp	r1, r24
     a22:	64 f0       	brlt	.+24     	; 0xa3c <_ZN3PID15SetOutputLimitsEdd+0xce>
	   else if(ITerm < outMin) ITerm= outMin;
     a24:	ee a4       	ldd	r14, Y+46	; 0x2e
     a26:	ff a4       	ldd	r15, Y+47	; 0x2f
     a28:	08 a9       	ldd	r16, Y+48	; 0x30
     a2a:	19 a9       	ldd	r17, Y+49	; 0x31
     a2c:	c6 01       	movw	r24, r12
     a2e:	b5 01       	movw	r22, r10
     a30:	a8 01       	movw	r20, r16
     a32:	97 01       	movw	r18, r14
     a34:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__cmpsf2>
     a38:	87 ff       	sbrs	r24, 7
     a3a:	04 c0       	rjmp	.+8      	; 0xa44 <_ZN3PID15SetOutputLimitsEdd+0xd6>
     a3c:	ec a2       	std	Y+36, r14	; 0x24
     a3e:	fd a2       	std	Y+37, r15	; 0x25
     a40:	0e a3       	std	Y+38, r16	; 0x26
     a42:	1f a3       	std	Y+39, r17	; 0x27
   }
}
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	df 90       	pop	r13
     a52:	cf 90       	pop	r12
     a54:	bf 90       	pop	r11
     a56:	af 90       	pop	r10
     a58:	9f 90       	pop	r9
     a5a:	8f 90       	pop	r8
     a5c:	7f 90       	pop	r7
     a5e:	6f 90       	pop	r6
     a60:	5f 90       	pop	r5
     a62:	4f 90       	pop	r4
     a64:	08 95       	ret

00000a66 <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
     a66:	af 92       	push	r10
     a68:	bf 92       	push	r11
     a6a:	cf 92       	push	r12
     a6c:	df 92       	push	r13
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	ec 01       	movw	r28, r24
   ITerm = *myOutput;
     a7c:	ec 8d       	ldd	r30, Y+28	; 0x1c
     a7e:	fd 8d       	ldd	r31, Y+29	; 0x1d
     a80:	e0 80       	ld	r14, Z
     a82:	f1 80       	ldd	r15, Z+1	; 0x01
     a84:	02 81       	ldd	r16, Z+2	; 0x02
     a86:	13 81       	ldd	r17, Z+3	; 0x03
     a88:	ec a2       	std	Y+36, r14	; 0x24
     a8a:	fd a2       	std	Y+37, r15	; 0x25
     a8c:	0e a3       	std	Y+38, r16	; 0x26
     a8e:	1f a3       	std	Y+39, r17	; 0x27
   lastInput = *myInput;
     a90:	ea 8d       	ldd	r30, Y+26	; 0x1a
     a92:	fb 8d       	ldd	r31, Y+27	; 0x1b
     a94:	80 81       	ld	r24, Z
     a96:	91 81       	ldd	r25, Z+1	; 0x01
     a98:	a2 81       	ldd	r26, Z+2	; 0x02
     a9a:	b3 81       	ldd	r27, Z+3	; 0x03
     a9c:	88 a7       	std	Y+40, r24	; 0x28
     a9e:	99 a7       	std	Y+41, r25	; 0x29
     aa0:	aa a7       	std	Y+42, r26	; 0x2a
     aa2:	bb a7       	std	Y+43, r27	; 0x2b
   if(ITerm > outMax) ITerm = outMax;
     aa4:	aa a8       	ldd	r10, Y+50	; 0x32
     aa6:	bb a8       	ldd	r11, Y+51	; 0x33
     aa8:	cc a8       	ldd	r12, Y+52	; 0x34
     aaa:	dd a8       	ldd	r13, Y+53	; 0x35
     aac:	c8 01       	movw	r24, r16
     aae:	b7 01       	movw	r22, r14
     ab0:	a6 01       	movw	r20, r12
     ab2:	95 01       	movw	r18, r10
     ab4:	0e 94 17 30 	call	0x602e	; 0x602e <__gesf2>
     ab8:	18 16       	cp	r1, r24
     aba:	64 f0       	brlt	.+24     	; 0xad4 <_ZN3PID10InitializeEv+0x6e>
   else if(ITerm < outMin) ITerm = outMin;
     abc:	ae a4       	ldd	r10, Y+46	; 0x2e
     abe:	bf a4       	ldd	r11, Y+47	; 0x2f
     ac0:	c8 a8       	ldd	r12, Y+48	; 0x30
     ac2:	d9 a8       	ldd	r13, Y+49	; 0x31
     ac4:	c8 01       	movw	r24, r16
     ac6:	b7 01       	movw	r22, r14
     ac8:	a6 01       	movw	r20, r12
     aca:	95 01       	movw	r18, r10
     acc:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__cmpsf2>
     ad0:	87 ff       	sbrs	r24, 7
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <_ZN3PID10InitializeEv+0x76>
     ad4:	ac a2       	std	Y+36, r10	; 0x24
     ad6:	bd a2       	std	Y+37, r11	; 0x25
     ad8:	ce a2       	std	Y+38, r12	; 0x26
     ada:	df a2       	std	Y+39, r13	; 0x27
}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	bf 90       	pop	r11
     aee:	af 90       	pop	r10
     af0:	08 95       	ret

00000af2 <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/ 
void PID::SetMode(int Mode)
{
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
     afa:	11 e0       	ldi	r17, 0x01	; 1
     afc:	61 30       	cpi	r22, 0x01	; 1
     afe:	71 05       	cpc	r23, r1
     b00:	09 f0       	breq	.+2      	; 0xb04 <_ZN3PID7SetModeEi+0x12>
     b02:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto == !inAuto)
     b04:	8e a9       	ldd	r24, Y+54	; 0x36
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	89 27       	eor	r24, r25
     b0a:	18 17       	cp	r17, r24
     b0c:	19 f4       	brne	.+6      	; 0xb14 <_ZN3PID7SetModeEi+0x22>
    {  /*we just went from manual to auto*/
        PID::Initialize();
     b0e:	ce 01       	movw	r24, r28
     b10:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
     b14:	1e ab       	std	Y+54, r17	; 0x36
}
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	08 95       	ret

00000b1e <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	ec 01       	movw	r28, r24
     b28:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
     b2a:	8e a9       	ldd	r24, Y+54	; 0x36
     b2c:	88 23       	and	r24, r24
     b2e:	61 f1       	breq	.+88     	; 0xb88 <_ZN3PID22SetControllerDirectionEi+0x6a>
     b30:	88 8d       	ldd	r24, Y+24	; 0x18
     b32:	99 8d       	ldd	r25, Y+25	; 0x19
     b34:	68 17       	cp	r22, r24
     b36:	79 07       	cpc	r23, r25
     b38:	39 f1       	breq	.+78     	; 0xb88 <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	  kp = (0 - kp);
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	cb 01       	movw	r24, r22
     b40:	2c 85       	ldd	r18, Y+12	; 0x0c
     b42:	3d 85       	ldd	r19, Y+13	; 0x0d
     b44:	4e 85       	ldd	r20, Y+14	; 0x0e
     b46:	5f 85       	ldd	r21, Y+15	; 0x0f
     b48:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
     b4c:	6c 87       	std	Y+12, r22	; 0x0c
     b4e:	7d 87       	std	Y+13, r23	; 0x0d
     b50:	8e 87       	std	Y+14, r24	; 0x0e
     b52:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	cb 01       	movw	r24, r22
     b5a:	28 89       	ldd	r18, Y+16	; 0x10
     b5c:	39 89       	ldd	r19, Y+17	; 0x11
     b5e:	4a 89       	ldd	r20, Y+18	; 0x12
     b60:	5b 89       	ldd	r21, Y+19	; 0x13
     b62:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
     b66:	68 8b       	std	Y+16, r22	; 0x10
     b68:	79 8b       	std	Y+17, r23	; 0x11
     b6a:	8a 8b       	std	Y+18, r24	; 0x12
     b6c:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	cb 01       	movw	r24, r22
     b74:	2c 89       	ldd	r18, Y+20	; 0x14
     b76:	3d 89       	ldd	r19, Y+21	; 0x15
     b78:	4e 89       	ldd	r20, Y+22	; 0x16
     b7a:	5f 89       	ldd	r21, Y+23	; 0x17
     b7c:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
     b80:	6c 8b       	std	Y+20, r22	; 0x14
     b82:	7d 8b       	std	Y+21, r23	; 0x15
     b84:	8e 8b       	std	Y+22, r24	; 0x16
     b86:	9f 8b       	std	Y+23, r25	; 0x17
   }   
   controllerDirection = Direction;
     b88:	19 8f       	std	Y+25, r17	; 0x19
     b8a:	08 8f       	std	Y+24, r16	; 0x18
}
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	08 95       	ret

00000b96 <_ZN3PIDC1EPdS0_S0_dddi>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
     b96:	2f 92       	push	r2
     b98:	3f 92       	push	r3
     b9a:	4f 92       	push	r4
     b9c:	5f 92       	push	r5
     b9e:	6f 92       	push	r6
     ba0:	7f 92       	push	r7
     ba2:	8f 92       	push	r8
     ba4:	9f 92       	push	r9
     ba6:	af 92       	push	r10
     ba8:	bf 92       	push	r11
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <_ZN3PIDC1EPdS0_S0_dddi+0x26>
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <_ZN3PIDC1EPdS0_S0_dddi+0x28>
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	4c 01       	movw	r8, r24
     bc4:	7a 83       	std	Y+2, r23	; 0x02
     bc6:	69 83       	std	Y+1, r22	; 0x01
     bc8:	1a 01       	movw	r2, r20
     bca:	3c 83       	std	Y+4, r19	; 0x04
     bcc:	2b 83       	std	Y+3, r18	; 0x03
     bce:	27 01       	movw	r4, r14
     bd0:	38 01       	movw	r6, r16
        double Kp, double Ki, double Kd, int ControllerDirection)
{
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
     bd2:	40 e0       	ldi	r20, 0x00	; 0
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	ba 01       	movw	r22, r20
     bd8:	00 e0       	ldi	r16, 0x00	; 0
     bda:	10 e0       	ldi	r17, 0x00	; 0
     bdc:	2f e7       	ldi	r18, 0x7F	; 127
     bde:	33 e4       	ldi	r19, 0x43	; 67
     be0:	0e 94 b7 04 	call	0x96e	; 0x96e <_ZN3PID15SetOutputLimitsEdd>
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
     be4:	84 e6       	ldi	r24, 0x64	; 100
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	f4 01       	movw	r30, r8
     bea:	95 a7       	std	Z+45, r25	; 0x2d
     bec:	84 a7       	std	Z+44, r24	; 0x2c

    PID::SetControllerDirection(ControllerDirection);
     bee:	c4 01       	movw	r24, r8
     bf0:	6d 8d       	ldd	r22, Y+29	; 0x1d
     bf2:	7e 8d       	ldd	r23, Y+30	; 0x1e
     bf4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd);
     bf8:	c4 01       	movw	r24, r8
     bfa:	b3 01       	movw	r22, r6
     bfc:	a2 01       	movw	r20, r4
     bfe:	96 01       	movw	r18, r12
     c00:	85 01       	movw	r16, r10
     c02:	c9 8c       	ldd	r12, Y+25	; 0x19
     c04:	da 8c       	ldd	r13, Y+26	; 0x1a
     c06:	eb 8c       	ldd	r14, Y+27	; 0x1b
     c08:	fc 8c       	ldd	r15, Y+28	; 0x1c
     c0a:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN3PID10SetTuningsEddd>

    lastTime = millis()-SampleTime;				
     c0e:	0e 94 99 2b 	call	0x5732	; 0x5732 <millis>
     c12:	f4 01       	movw	r30, r8
     c14:	24 a5       	ldd	r18, Z+44	; 0x2c
     c16:	35 a5       	ldd	r19, Z+45	; 0x2d
     c18:	44 27       	eor	r20, r20
     c1a:	37 fd       	sbrc	r19, 7
     c1c:	40 95       	com	r20
     c1e:	54 2f       	mov	r21, r20
     c20:	62 1b       	sub	r22, r18
     c22:	73 0b       	sbc	r23, r19
     c24:	84 0b       	sbc	r24, r20
     c26:	95 0b       	sbc	r25, r21
     c28:	60 a3       	std	Z+32, r22	; 0x20
     c2a:	71 a3       	std	Z+33, r23	; 0x21
     c2c:	82 a3       	std	Z+34, r24	; 0x22
     c2e:	93 a3       	std	Z+35, r25	; 0x23
    inAuto = false;
     c30:	16 aa       	std	Z+54, r1	; 0x36
    myOutput = Output;
     c32:	35 8e       	std	Z+29, r3	; 0x1d
     c34:	24 8e       	std	Z+28, r2	; 0x1c
    myInput = Input;
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	93 8f       	std	Z+27, r25	; 0x1b
     c3c:	82 8f       	std	Z+26, r24	; 0x1a
    mySetpoint = Setpoint;
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	9c 81       	ldd	r25, Y+4	; 0x04
     c42:	97 8f       	std	Z+31, r25	; 0x1f
     c44:	86 8f       	std	Z+30, r24	; 0x1e
		
}
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	df 90       	pop	r13
     c5c:	cf 90       	pop	r12
     c5e:	bf 90       	pop	r11
     c60:	af 90       	pop	r10
     c62:	9f 90       	pop	r9
     c64:	8f 90       	pop	r8
     c66:	7f 90       	pop	r7
     c68:	6f 90       	pop	r6
     c6a:	5f 90       	pop	r5
     c6c:	4f 90       	pop	r4
     c6e:	3f 90       	pop	r3
     c70:	2f 90       	pop	r2
     c72:	08 95       	ret

00000c74 <_ZN4NMEAC1Ei>:

//
// constructor method
//

NMEA::NMEA(int connect)
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	fc 01       	movw	r30, r24
{
	// private properties
	_gprmc_only = connect;
     c82:	71 83       	std	Z+1, r23	; 0x01
     c84:	60 83       	st	Z, r22
	_gprmc_utc = 0.0;
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	a9 01       	movw	r20, r18
     c8c:	22 83       	std	Z+2, r18	; 0x02
     c8e:	33 83       	std	Z+3, r19	; 0x03
     c90:	44 83       	std	Z+4, r20	; 0x04
     c92:	55 83       	std	Z+5, r21	; 0x05
	_gprmc_status = 'V';
     c94:	86 e5       	ldi	r24, 0x56	; 86
     c96:	86 83       	std	Z+6, r24	; 0x06
	_gprmc_lat = 0.0;
     c98:	27 83       	std	Z+7, r18	; 0x07
     c9a:	30 87       	std	Z+8, r19	; 0x08
     c9c:	41 87       	std	Z+9, r20	; 0x09
     c9e:	52 87       	std	Z+10, r21	; 0x0a
	_gprmc_long = 0.0;
     ca0:	23 87       	std	Z+11, r18	; 0x0b
     ca2:	34 87       	std	Z+12, r19	; 0x0c
     ca4:	45 87       	std	Z+13, r20	; 0x0d
     ca6:	56 87       	std	Z+14, r21	; 0x0e
	_gprmc_speed = 0.0;
     ca8:	27 87       	std	Z+15, r18	; 0x0f
     caa:	30 8b       	std	Z+16, r19	; 0x10
     cac:	41 8b       	std	Z+17, r20	; 0x11
     cae:	52 8b       	std	Z+18, r21	; 0x12
	_gprmc_angle = 0.0;
     cb0:	23 8b       	std	Z+19, r18	; 0x13
     cb2:	34 8b       	std	Z+20, r19	; 0x14
     cb4:	45 8b       	std	Z+21, r20	; 0x15
     cb6:	56 8b       	std	Z+22, r21	; 0x16
	_terms = 0;
     cb8:	df 01       	movw	r26, r30
     cba:	a7 54       	subi	r26, 0x47	; 71
     cbc:	bf 4f       	sbci	r27, 0xFF	; 255
     cbe:	1d 92       	st	X+, r1
     cc0:	1c 92       	st	X, r1
	n = 0;
     cc2:	df 01       	movw	r26, r30
     cc4:	a5 5a       	subi	r26, 0xA5	; 165
     cc6:	be 4f       	sbci	r27, 0xFE	; 254
     cc8:	1d 92       	st	X+, r1
     cca:	1c 92       	st	X, r1
	_state = 0;
     ccc:	df 01       	movw	r26, r30
     cce:	a1 5a       	subi	r26, 0xA1	; 161
     cd0:	be 4f       	sbci	r27, 0xFE	; 254
     cd2:	1d 92       	st	X+, r1
     cd4:	1c 92       	st	X, r1
	_parity = 0;
     cd6:	df 01       	movw	r26, r30
     cd8:	af 59       	subi	r26, 0x9F	; 159
     cda:	be 4f       	sbci	r27, 0xFE	; 254
     cdc:	1d 92       	st	X+, r1
     cde:	1c 92       	st	X, r1
	_nt = 0;
     ce0:	df 01       	movw	r26, r30
     ce2:	ad 59       	subi	r26, 0x9D	; 157
     ce4:	be 4f       	sbci	r27, 0xFE	; 254
     ce6:	1d 92       	st	X+, r1
     ce8:	1c 92       	st	X, r1

	f_sentence[0] = 0;
     cea:	17 8a       	std	Z+23, r1	; 0x17
	f_terms = 0;
     cec:	df 01       	movw	r26, r30
     cee:	a9 54       	subi	r26, 0x49	; 73
     cf0:	bf 4f       	sbci	r27, 0xFF	; 255
     cf2:	1d 92       	st	X+, r1
     cf4:	1c 92       	st	X, r1

//
// constructor method
//

NMEA::NMEA(int connect)
     cf6:	ef 01       	movw	r28, r30
     cf8:	c1 5e       	subi	r28, 0xE1	; 225
     cfa:	de 4f       	sbci	r29, 0xFE	; 254
     cfc:	8b e7       	ldi	r24, 0x7B	; 123
     cfe:	e8 2e       	mov	r14, r24
     d00:	f1 2c       	mov	r15, r1
     d02:	ee 0e       	add	r14, r30
     d04:	ff 1e       	adc	r15, r31
     d06:	0e e1       	ldi	r16, 0x1E	; 30
     d08:	10 e0       	ldi	r17, 0x00	; 0

	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
     d0a:	8f e0       	ldi	r24, 0x0F	; 15
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <malloc>
     d12:	88 83       	st	Y, r24
     d14:	99 83       	std	Y+1, r25	; 0x01
     d16:	22 96       	adiw	r28, 0x02	; 2
    f_term[t] = (char*) malloc (15 * sizeof(char));
     d18:	8f e0       	ldi	r24, 0x0F	; 15
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <malloc>
     d20:	fc 01       	movw	r30, r24
     d22:	d7 01       	movw	r26, r14
     d24:	8d 93       	st	X+, r24
     d26:	9d 93       	st	X+, r25
     d28:	7d 01       	movw	r14, r26
    (f_term[t])[0] = 0;
     d2a:	10 82       	st	Z, r1
     d2c:	01 50       	subi	r16, 0x01	; 1
     d2e:	10 40       	sbci	r17, 0x00	; 0
	_nt = 0;

	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
     d30:	61 f7       	brne	.-40     	; 0xd0a <_ZN4NMEAC1Ei+0x96>
    _term[t] = (char*) malloc (15 * sizeof(char));
    f_term[t] = (char*) malloc (15 * sizeof(char));
    (f_term[t])[0] = 0;
  }
}
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	08 95       	ret

00000d40 <_ZN4NMEA9gprmc_utcEv>:
    break;
  }
  return 0;
}

float NMEA::gprmc_utc() {
     d40:	fc 01       	movw	r30, r24
	// returns decimal value of UTC term of last-known GPRMC sentence
	return _gprmc_utc;
}
     d42:	52 81       	ldd	r21, Z+2	; 0x02
     d44:	43 81       	ldd	r20, Z+3	; 0x03
     d46:	34 81       	ldd	r19, Z+4	; 0x04
     d48:	25 81       	ldd	r18, Z+5	; 0x05
     d4a:	65 2f       	mov	r22, r21
     d4c:	74 2f       	mov	r23, r20
     d4e:	83 2f       	mov	r24, r19
     d50:	92 2f       	mov	r25, r18
     d52:	08 95       	ret

00000d54 <_ZN4NMEA12gprmc_statusEv>:

char NMEA::gprmc_status() {
	// returns status character of last-known GPRMC sentence ('A' or 'V')
	return _gprmc_status;
}
     d54:	fc 01       	movw	r30, r24
     d56:	86 81       	ldd	r24, Z+6	; 0x06
     d58:	08 95       	ret

00000d5a <_ZN4NMEA14gprmc_latitudeEv>:

float NMEA::gprmc_latitude() {
     d5a:	fc 01       	movw	r30, r24
	// returns signed degree-decimal latitude value of last-known GPRMC position
	return _gprmc_lat;
}
     d5c:	57 81       	ldd	r21, Z+7	; 0x07
     d5e:	40 85       	ldd	r20, Z+8	; 0x08
     d60:	31 85       	ldd	r19, Z+9	; 0x09
     d62:	22 85       	ldd	r18, Z+10	; 0x0a
     d64:	65 2f       	mov	r22, r21
     d66:	74 2f       	mov	r23, r20
     d68:	83 2f       	mov	r24, r19
     d6a:	92 2f       	mov	r25, r18
     d6c:	08 95       	ret

00000d6e <_ZN4NMEA15gprmc_longitudeEv>:

float NMEA::gprmc_longitude() {
     d6e:	fc 01       	movw	r30, r24
	// returns signed degree-decimal longitude value of last-known GPRMC position
	return _gprmc_long;
}
     d70:	53 85       	ldd	r21, Z+11	; 0x0b
     d72:	44 85       	ldd	r20, Z+12	; 0x0c
     d74:	35 85       	ldd	r19, Z+13	; 0x0d
     d76:	26 85       	ldd	r18, Z+14	; 0x0e
     d78:	65 2f       	mov	r22, r21
     d7a:	74 2f       	mov	r23, r20
     d7c:	83 2f       	mov	r24, r19
     d7e:	92 2f       	mov	r25, r18
     d80:	08 95       	ret

00000d82 <_ZN4NMEA11gprmc_speedEf>:

float NMEA::gprmc_speed(float unit) {
     d82:	fc 01       	movw	r30, r24
     d84:	cb 01       	movw	r24, r22
     d86:	ba 01       	movw	r22, r20
	// returns speed-over-ground from last-known GPRMC sentence
	return (_gprmc_speed * unit);
     d88:	27 85       	ldd	r18, Z+15	; 0x0f
     d8a:	30 89       	ldd	r19, Z+16	; 0x10
     d8c:	41 89       	ldd	r20, Z+17	; 0x11
     d8e:	52 89       	ldd	r21, Z+18	; 0x12
     d90:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
}
     d94:	08 95       	ret

00000d96 <_ZN4NMEA12gprmc_courseEv>:

float NMEA::gprmc_course() {
     d96:	fc 01       	movw	r30, r24
	// returns decimal value of track-angle-made-good term in last-known GPRMC sentence - 0-360 deg
	return _gprmc_angle;
}
     d98:	53 89       	ldd	r21, Z+19	; 0x13
     d9a:	44 89       	ldd	r20, Z+20	; 0x14
     d9c:	35 89       	ldd	r19, Z+21	; 0x15
     d9e:	26 89       	ldd	r18, Z+22	; 0x16
     da0:	65 2f       	mov	r22, r21
     da2:	74 2f       	mov	r23, r20
     da4:	83 2f       	mov	r24, r19
     da6:	92 2f       	mov	r25, r18
     da8:	08 95       	ret

00000daa <_ZN4NMEA8sentenceEv>:
//	return rc;
//}

char* NMEA::sentence() {
	// returns last received full sentence as zero terminated string
  return f_sentence;
     daa:	9c 01       	movw	r18, r24
     dac:	29 5e       	subi	r18, 0xE9	; 233
     dae:	3f 4f       	sbci	r19, 0xFF	; 255
}
     db0:	c9 01       	movw	r24, r18
     db2:	08 95       	ret

00000db4 <_ZN4NMEA4termEi>:
int NMEA::terms() {
	// returns number of terms (including data type and checksum) in last received full sentence
  return f_terms;
}

char* NMEA::term(int t) {
     db4:	fb 01       	movw	r30, r22
	// returns term t of last received full sentence as zero terminated string
  return f_term[t];
     db6:	ee 0f       	add	r30, r30
     db8:	ff 1f       	adc	r31, r31
     dba:	e8 0f       	add	r30, r24
     dbc:	f9 1f       	adc	r31, r25
     dbe:	e5 58       	subi	r30, 0x85	; 133
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
}
     dc2:	80 81       	ld	r24, Z
     dc4:	91 81       	ldd	r25, Z+1	; 0x01
     dc6:	08 95       	ret

00000dc8 <_ZN4NMEA8_decimalEPc>:
  else {
    return int(a)-48;
  }
}

float NMEA::_decimal(char* s) {
     dc8:	2f 92       	push	r2
     dca:	3f 92       	push	r3
     dcc:	4f 92       	push	r4
     dce:	5f 92       	push	r5
     dd0:	6f 92       	push	r6
     dd2:	7f 92       	push	r7
     dd4:	8f 92       	push	r8
     dd6:	9f 92       	push	r9
     dd8:	af 92       	push	r10
     dda:	bf 92       	push	r11
     ddc:	cf 92       	push	r12
     dde:	df 92       	push	r13
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
  float rr = 0.0;
  float rb = 0.1;
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
     dec:	fb 01       	movw	r30, r22
     dee:	40 80       	ld	r4, Z
     df0:	f4 2d       	mov	r31, r4
     df2:	fd 32       	cpi	r31, 0x2D	; 45
     df4:	39 f0       	breq	.+14     	; 0xe04 <_ZN4NMEA8_decimalEPc+0x3c>
	// does not trap invalid strings!
  long  rl = 0;
  float rr = 0.0;
  float rb = 0.1;
  boolean dec = false;
  int i = 0;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	fb 32       	cpi	r31, 0x2B	; 43
     dfc:	29 f0       	breq	.+10     	; 0xe08 <_ZN4NMEA8_decimalEPc+0x40>
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <_ZN4NMEA8_decimalEPc+0x40>

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
  else {
    return int(a)-48;
  }
}

float NMEA::_decimal(char* s) {
     e08:	1b 01       	movw	r2, r22
     e0a:	28 0e       	add	r2, r24
     e0c:	39 1e       	adc	r3, r25
     e0e:	dd 24       	eor	r13, r13
     e10:	6d ec       	ldi	r22, 0xCD	; 205
     e12:	c6 2e       	mov	r12, r22
     e14:	5c ec       	ldi	r21, 0xCC	; 204
     e16:	85 2e       	mov	r8, r21
     e18:	4c ec       	ldi	r20, 0xCC	; 204
     e1a:	74 2e       	mov	r7, r20
     e1c:	3d e3       	ldi	r19, 0x3D	; 61
     e1e:	63 2e       	mov	r6, r19
     e20:	bb 24       	eor	r11, r11
     e22:	aa 24       	eor	r10, r10
     e24:	99 24       	eor	r9, r9
     e26:	55 24       	eor	r5, r5
     e28:	ee 24       	eor	r14, r14
     e2a:	ff 24       	eor	r15, r15
     e2c:	87 01       	movw	r16, r14
     e2e:	4d c0       	rjmp	.+154    	; 0xeca <_ZN4NMEA8_decimalEPc+0x102>
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    if (s[i] == '.') {
     e30:	8e 32       	cpi	r24, 0x2E	; 46
     e32:	09 f4       	brne	.+2      	; 0xe36 <_ZN4NMEA8_decimalEPc+0x6e>
     e34:	48 c0       	rjmp	.+144    	; 0xec6 <_ZN4NMEA8_decimalEPc+0xfe>
     e36:	c8 2f       	mov	r28, r24
     e38:	dd 27       	eor	r29, r29
     e3a:	c7 fd       	sbrc	r28, 7
     e3c:	d0 95       	com	r29
      dec = true;
    }
    else{
      if (!dec) {
     e3e:	dd 20       	and	r13, r13
     e40:	a9 f4       	brne	.+42     	; 0xe6c <_ZN4NMEA8_decimalEPc+0xa4>
        rl = (10 * rl) + (s[i] - 48);
     e42:	c8 01       	movw	r24, r16
     e44:	b7 01       	movw	r22, r14
     e46:	2a e0       	ldi	r18, 0x0A	; 10
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e0       	ldi	r20, 0x00	; 0
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <__mulsi3>
     e52:	7b 01       	movw	r14, r22
     e54:	8c 01       	movw	r16, r24
     e56:	e0 97       	sbiw	r28, 0x30	; 48
     e58:	ce 01       	movw	r24, r28
     e5a:	aa 27       	eor	r26, r26
     e5c:	97 fd       	sbrc	r25, 7
     e5e:	a0 95       	com	r26
     e60:	ba 2f       	mov	r27, r26
     e62:	e8 0e       	add	r14, r24
     e64:	f9 1e       	adc	r15, r25
     e66:	0a 1f       	adc	r16, r26
     e68:	1b 1f       	adc	r17, r27
     e6a:	2f c0       	rjmp	.+94     	; 0xeca <_ZN4NMEA8_decimalEPc+0x102>
      }
      else {
        rr += rb * (float)(s[i] - 48);
     e6c:	e0 97       	sbiw	r28, 0x30	; 48
     e6e:	be 01       	movw	r22, r28
     e70:	88 27       	eor	r24, r24
     e72:	77 fd       	sbrc	r23, 7
     e74:	80 95       	com	r24
     e76:	98 2f       	mov	r25, r24
     e78:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__floatsisf>
     e7c:	9b 01       	movw	r18, r22
     e7e:	ac 01       	movw	r20, r24
     e80:	f3 01       	movw	r30, r6
     e82:	6c 2d       	mov	r22, r12
     e84:	78 2d       	mov	r23, r8
     e86:	8f 2f       	mov	r24, r31
     e88:	96 2d       	mov	r25, r6
     e8a:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
     e8e:	9b 01       	movw	r18, r22
     e90:	ac 01       	movw	r20, r24
     e92:	d5 01       	movw	r26, r10
     e94:	6b 2f       	mov	r22, r27
     e96:	7a 2d       	mov	r23, r10
     e98:	89 2d       	mov	r24, r9
     e9a:	95 2d       	mov	r25, r5
     e9c:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
     ea0:	b6 2e       	mov	r11, r22
     ea2:	a7 2e       	mov	r10, r23
     ea4:	98 2e       	mov	r9, r24
     ea6:	59 2e       	mov	r5, r25
        rb /= 10.0;
     ea8:	93 01       	movw	r18, r6
     eaa:	6c 2d       	mov	r22, r12
     eac:	78 2d       	mov	r23, r8
     eae:	83 2f       	mov	r24, r19
     eb0:	96 2d       	mov	r25, r6
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e2       	ldi	r20, 0x20	; 32
     eb8:	51 e4       	ldi	r21, 0x41	; 65
     eba:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <__divsf3>
     ebe:	c6 2e       	mov	r12, r22
     ec0:	87 2e       	mov	r8, r23
     ec2:	78 2e       	mov	r7, r24
     ec4:	69 2e       	mov	r6, r25
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    if (s[i] == '.') {
      dec = true;
     ec6:	dd 24       	eor	r13, r13
     ec8:	d3 94       	inc	r13
  float rb = 0.1;
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
     eca:	f1 01       	movw	r30, r2
     ecc:	81 91       	ld	r24, Z+
     ece:	1f 01       	movw	r2, r30
     ed0:	88 23       	and	r24, r24
     ed2:	09 f0       	breq	.+2      	; 0xed6 <_ZN4NMEA8_decimalEPc+0x10e>
     ed4:	ad cf       	rjmp	.-166    	; 0xe30 <_ZN4NMEA8_decimalEPc+0x68>
        rb /= 10.0;
      }
    }
    i++;
  }
  rr += (float)rl;
     ed6:	c8 01       	movw	r24, r16
     ed8:	b7 01       	movw	r22, r14
     eda:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__floatsisf>
     ede:	9b 01       	movw	r18, r22
     ee0:	ac 01       	movw	r20, r24
     ee2:	d5 01       	movw	r26, r10
     ee4:	6b 2f       	mov	r22, r27
     ee6:	7a 2d       	mov	r23, r10
     ee8:	89 2d       	mov	r24, r9
     eea:	95 2d       	mov	r25, r5
     eec:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
     ef0:	56 2f       	mov	r21, r22
     ef2:	47 2f       	mov	r20, r23
     ef4:	38 2f       	mov	r19, r24
     ef6:	29 2f       	mov	r18, r25
  if (s[0] == '-') {
     ef8:	f4 2d       	mov	r31, r4
     efa:	fd 32       	cpi	r31, 0x2D	; 45
     efc:	79 f4       	brne	.+30     	; 0xf1c <_ZN4NMEA8_decimalEPc+0x154>
    rr = 0.0 - rr;
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	cb 01       	movw	r24, r22
     f04:	da 01       	movw	r26, r20
     f06:	f9 01       	movw	r30, r18
     f08:	2b 2f       	mov	r18, r27
     f0a:	3a 2f       	mov	r19, r26
     f0c:	4f 2f       	mov	r20, r31
     f0e:	5e 2f       	mov	r21, r30
     f10:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
     f14:	56 2f       	mov	r21, r22
     f16:	47 2f       	mov	r20, r23
     f18:	38 2f       	mov	r19, r24
     f1a:	29 2f       	mov	r18, r25
  }
  return rr;
}
     f1c:	da 01       	movw	r26, r20
     f1e:	f9 01       	movw	r30, r18
     f20:	6b 2f       	mov	r22, r27
     f22:	74 2f       	mov	r23, r20
     f24:	8f 2f       	mov	r24, r31
     f26:	92 2f       	mov	r25, r18
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	ff 90       	pop	r15
     f32:	ef 90       	pop	r14
     f34:	df 90       	pop	r13
     f36:	cf 90       	pop	r12
     f38:	bf 90       	pop	r11
     f3a:	af 90       	pop	r10
     f3c:	9f 90       	pop	r9
     f3e:	8f 90       	pop	r8
     f40:	7f 90       	pop	r7
     f42:	6f 90       	pop	r6
     f44:	5f 90       	pop	r5
     f46:	4f 90       	pop	r4
     f48:	3f 90       	pop	r3
     f4a:	2f 90       	pop	r2
     f4c:	08 95       	ret

00000f4e <_ZN4NMEA6decodeEc>:

//
// public methods
//

int NMEA::decode(char c) {
     f4e:	af 92       	push	r10
     f50:	bf 92       	push	r11
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	ec 01       	movw	r28, r24
  // avoid runaway sentences (>99 chars or >29 terms) and terms (>14 chars)
  if ((n >= 100) || (_terms >= 30) || (_nt >= 15)) { _state = 0; }
     f64:	fc 01       	movw	r30, r24
     f66:	e5 5a       	subi	r30, 0xA5	; 165
     f68:	fe 4f       	sbci	r31, 0xFE	; 254
     f6a:	80 81       	ld	r24, Z
     f6c:	91 81       	ldd	r25, Z+1	; 0x01
     f6e:	84 36       	cpi	r24, 0x64	; 100
     f70:	91 05       	cpc	r25, r1
     f72:	84 f4       	brge	.+32     	; 0xf94 <_ZN4NMEA6decodeEc+0x46>
     f74:	fe 01       	movw	r30, r28
     f76:	e7 54       	subi	r30, 0x47	; 71
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	20 81       	ld	r18, Z
     f7c:	31 81       	ldd	r19, Z+1	; 0x01
     f7e:	2e 31       	cpi	r18, 0x1E	; 30
     f80:	31 05       	cpc	r19, r1
     f82:	44 f4       	brge	.+16     	; 0xf94 <_ZN4NMEA6decodeEc+0x46>
     f84:	fe 01       	movw	r30, r28
     f86:	ed 59       	subi	r30, 0x9D	; 157
     f88:	fe 4f       	sbci	r31, 0xFE	; 254
     f8a:	20 81       	ld	r18, Z
     f8c:	31 81       	ldd	r19, Z+1	; 0x01
     f8e:	2f 30       	cpi	r18, 0x0F	; 15
     f90:	31 05       	cpc	r19, r1
     f92:	2c f0       	brlt	.+10     	; 0xf9e <_ZN4NMEA6decodeEc+0x50>
     f94:	fe 01       	movw	r30, r28
     f96:	e1 5a       	subi	r30, 0xA1	; 161
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	11 82       	std	Z+1, r1	; 0x01
     f9c:	10 82       	st	Z, r1
  // LF and CR always reset parser
  if ((c == 0x0A) || (c == 0x0D)) { _state = 0; }
     f9e:	6a 30       	cpi	r22, 0x0A	; 10
     fa0:	11 f0       	breq	.+4      	; 0xfa6 <_ZN4NMEA6decodeEc+0x58>
     fa2:	6d 30       	cpi	r22, 0x0D	; 13
     fa4:	29 f4       	brne	.+10     	; 0xfb0 <_ZN4NMEA6decodeEc+0x62>
     fa6:	fe 01       	movw	r30, r28
     fa8:	e1 5a       	subi	r30, 0xA1	; 161
     faa:	fe 4f       	sbci	r31, 0xFE	; 254
     fac:	11 82       	std	Z+1, r1	; 0x01
     fae:	10 82       	st	Z, r1
     fb0:	8e 01       	movw	r16, r28
     fb2:	01 5a       	subi	r16, 0xA1	; 161
     fb4:	1e 4f       	sbci	r17, 0xFE	; 254
  // '$' always starts a new sentence
  if (c == '$') {
     fb6:	64 32       	cpi	r22, 0x24	; 36
     fb8:	19 f5       	brne	.+70     	; 0x1000 <_ZN4NMEA6decodeEc+0xb2>
    _gprmc_tag = 0;
     fba:	fe 01       	movw	r30, r28
     fbc:	e3 5a       	subi	r30, 0xA3	; 163
     fbe:	fe 4f       	sbci	r31, 0xFE	; 254
     fc0:	11 82       	std	Z+1, r1	; 0x01
     fc2:	10 82       	st	Z, r1
    _parity = 0;
     fc4:	fe 01       	movw	r30, r28
     fc6:	ef 59       	subi	r30, 0x9F	; 159
     fc8:	fe 4f       	sbci	r31, 0xFE	; 254
     fca:	11 82       	std	Z+1, r1	; 0x01
     fcc:	10 82       	st	Z, r1
    _terms = 0;
     fce:	fe 01       	movw	r30, r28
     fd0:	e7 54       	subi	r30, 0x47	; 71
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	11 82       	std	Z+1, r1	; 0x01
     fd6:	10 82       	st	Z, r1
    _nt = 0;
     fd8:	fe 01       	movw	r30, r28
     fda:	ed 59       	subi	r30, 0x9D	; 157
     fdc:	fe 4f       	sbci	r31, 0xFE	; 254
     fde:	11 82       	std	Z+1, r1	; 0x01
     fe0:	10 82       	st	Z, r1
    _sentence[0] = c;
     fe2:	fe 01       	movw	r30, r28
     fe4:	e5 54       	subi	r30, 0x45	; 69
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	60 83       	st	Z, r22
    n = 1;
     fea:	c5 5a       	subi	r28, 0xA5	; 165
     fec:	de 4f       	sbci	r29, 0xFE	; 254
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	99 83       	std	Y+1, r25	; 0x01
     ff4:	88 83       	st	Y, r24
    _state = 1;
     ff6:	d8 01       	movw	r26, r16
     ff8:	11 96       	adiw	r26, 0x01	; 1
     ffa:	9c 93       	st	X, r25
     ffc:	8e 93       	st	-X, r24
     ffe:	b5 c2       	rjmp	.+1386   	; 0x156a <_ZN4NMEA6decodeEc+0x61c>
    return 0;
  }
  // parse other chars according to parser state
  switch(_state) {
    1000:	f8 01       	movw	r30, r16
    1002:	20 81       	ld	r18, Z
    1004:	31 81       	ldd	r19, Z+1	; 0x01
    1006:	21 30       	cpi	r18, 0x01	; 1
    1008:	31 05       	cpc	r19, r1
    100a:	89 f0       	breq	.+34     	; 0x102e <_ZN4NMEA6decodeEc+0xe0>
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	2c f4       	brge	.+10     	; 0x101c <_ZN4NMEA6decodeEc+0xce>
    1012:	21 15       	cp	r18, r1
    1014:	31 05       	cpc	r19, r1
    1016:	09 f4       	brne	.+2      	; 0x101a <_ZN4NMEA6decodeEc+0xcc>
    1018:	a8 c2       	rjmp	.+1360   	; 0x156a <_ZN4NMEA6decodeEc+0x61c>
    101a:	a3 c2       	rjmp	.+1350   	; 0x1562 <_ZN4NMEA6decodeEc+0x614>
    101c:	22 30       	cpi	r18, 0x02	; 2
    101e:	31 05       	cpc	r19, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <_ZN4NMEA6decodeEc+0xd6>
    1022:	9b c0       	rjmp	.+310    	; 0x115a <_ZN4NMEA6decodeEc+0x20c>
    1024:	23 30       	cpi	r18, 0x03	; 3
    1026:	31 05       	cpc	r19, r1
    1028:	09 f0       	breq	.+2      	; 0x102c <_ZN4NMEA6decodeEc+0xde>
    102a:	9b c2       	rjmp	.+1334   	; 0x1562 <_ZN4NMEA6decodeEc+0x614>
    102c:	e2 c0       	rjmp	.+452    	; 0x11f2 <_ZN4NMEA6decodeEc+0x2a4>
  case 0:
    // waiting for '$', do nothing
    break;
  case 1:
  	// decode chars after '$' and before '*' found
    if (n < 7) {
    102e:	87 30       	cpi	r24, 0x07	; 7
    1030:	91 05       	cpc	r25, r1
    1032:	7c f4       	brge	.+30     	; 0x1052 <_ZN4NMEA6decodeEc+0x104>
    	// see if first seven chars match "$GPRMC,"
    	if (c == _GPRMC_TERM[n]) { _gprmc_tag++; }
    1034:	fc 01       	movw	r30, r24
    1036:	e0 50       	subi	r30, 0x00	; 0
    1038:	fe 4f       	sbci	r31, 0xFE	; 254
    103a:	20 81       	ld	r18, Z
    103c:	62 17       	cp	r22, r18
    103e:	49 f4       	brne	.+18     	; 0x1052 <_ZN4NMEA6decodeEc+0x104>
    1040:	fe 01       	movw	r30, r28
    1042:	e3 5a       	subi	r30, 0xA3	; 163
    1044:	fe 4f       	sbci	r31, 0xFE	; 254
    1046:	20 81       	ld	r18, Z
    1048:	31 81       	ldd	r19, Z+1	; 0x01
    104a:	2f 5f       	subi	r18, 0xFF	; 255
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
    104e:	31 83       	std	Z+1, r19	; 0x01
    1050:	20 83       	st	Z, r18
    }
    // add received char to sentence
    _sentence[n++] = c;
    1052:	fe 01       	movw	r30, r28
    1054:	e8 0f       	add	r30, r24
    1056:	f9 1f       	adc	r31, r25
    1058:	e5 54       	subi	r30, 0x45	; 69
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	60 83       	st	Z, r22
    105e:	fe 01       	movw	r30, r28
    1060:	e5 5a       	subi	r30, 0xA5	; 165
    1062:	fe 4f       	sbci	r31, 0xFE	; 254
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	91 83       	std	Z+1, r25	; 0x01
    1068:	80 83       	st	Z, r24
    switch (c) {
    106a:	6a 32       	cpi	r22, 0x2A	; 42
    106c:	89 f1       	breq	.+98     	; 0x10d0 <_ZN4NMEA6decodeEc+0x182>
    106e:	9e 01       	movw	r18, r28
    1070:	27 54       	subi	r18, 0x47	; 71
    1072:	3f 4f       	sbci	r19, 0xFF	; 255
    1074:	ce 01       	movw	r24, r28
    1076:	8d 59       	subi	r24, 0x9D	; 157
    1078:	9e 4f       	sbci	r25, 0xFE	; 254
    107a:	8e 01       	movw	r16, r28
    107c:	0f 59       	subi	r16, 0x9F	; 159
    107e:	1e 4f       	sbci	r17, 0xFE	; 254
    1080:	6c 32       	cpi	r22, 0x2C	; 44
    1082:	09 f0       	breq	.+2      	; 0x1086 <_ZN4NMEA6decodeEc+0x138>
    1084:	47 c0       	rjmp	.+142    	; 0x1114 <_ZN4NMEA6decodeEc+0x1c6>
    case ',':
    	// ',' delimits the individual terms
      (_term[_terms++])[_nt] = 0;
    1086:	d9 01       	movw	r26, r18
    1088:	4d 91       	ld	r20, X+
    108a:	5c 91       	ld	r21, X
    108c:	11 97       	sbiw	r26, 0x01	; 1
    108e:	fa 01       	movw	r30, r20
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	ec 0f       	add	r30, r28
    1096:	fd 1f       	adc	r31, r29
    1098:	e1 5e       	subi	r30, 0xE1	; 225
    109a:	fe 4f       	sbci	r31, 0xFE	; 254
    109c:	01 90       	ld	r0, Z+
    109e:	f0 81       	ld	r31, Z
    10a0:	e0 2d       	mov	r30, r0
    10a2:	ec 01       	movw	r28, r24
    10a4:	68 81       	ld	r22, Y
    10a6:	79 81       	ldd	r23, Y+1	; 0x01
    10a8:	e6 0f       	add	r30, r22
    10aa:	f7 1f       	adc	r31, r23
    10ac:	10 82       	st	Z, r1
    10ae:	4f 5f       	subi	r20, 0xFF	; 255
    10b0:	5f 4f       	sbci	r21, 0xFF	; 255
    10b2:	11 96       	adiw	r26, 0x01	; 1
    10b4:	5c 93       	st	X, r21
    10b6:	4e 93       	st	-X, r20
      _nt = 0;
    10b8:	19 82       	std	Y+1, r1	; 0x01
    10ba:	18 82       	st	Y, r1
      _parity = _parity ^ c;
    10bc:	f8 01       	movw	r30, r16
    10be:	80 81       	ld	r24, Z
    10c0:	91 81       	ldd	r25, Z+1	; 0x01
    10c2:	2c e2       	ldi	r18, 0x2C	; 44
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	82 27       	eor	r24, r18
    10c8:	93 27       	eor	r25, r19
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	80 83       	st	Z, r24
    10ce:	4d c2       	rjmp	.+1178   	; 0x156a <_ZN4NMEA6decodeEc+0x61c>
      break;
    case '*':
    	// '*' delimits term and precedes checksum term
      (_term[_terms++])[_nt] = 0;
    10d0:	ce 01       	movw	r24, r28
    10d2:	87 54       	subi	r24, 0x47	; 71
    10d4:	9f 4f       	sbci	r25, 0xFF	; 255
    10d6:	dc 01       	movw	r26, r24
    10d8:	2d 91       	ld	r18, X+
    10da:	3c 91       	ld	r19, X
    10dc:	f9 01       	movw	r30, r18
    10de:	ee 0f       	add	r30, r30
    10e0:	ff 1f       	adc	r31, r31
    10e2:	ec 0f       	add	r30, r28
    10e4:	fd 1f       	adc	r31, r29
    10e6:	e1 5e       	subi	r30, 0xE1	; 225
    10e8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ea:	01 90       	ld	r0, Z+
    10ec:	f0 81       	ld	r31, Z
    10ee:	e0 2d       	mov	r30, r0
    10f0:	de 01       	movw	r26, r28
    10f2:	ad 59       	subi	r26, 0x9D	; 157
    10f4:	be 4f       	sbci	r27, 0xFE	; 254
    10f6:	4d 91       	ld	r20, X+
    10f8:	5c 91       	ld	r21, X
    10fa:	11 97       	sbiw	r26, 0x01	; 1
    10fc:	e4 0f       	add	r30, r20
    10fe:	f5 1f       	adc	r31, r21
    1100:	10 82       	st	Z, r1
    1102:	2f 5f       	subi	r18, 0xFF	; 255
    1104:	3f 4f       	sbci	r19, 0xFF	; 255
    1106:	fc 01       	movw	r30, r24
    1108:	31 83       	std	Z+1, r19	; 0x01
    110a:	20 83       	st	Z, r18
      _nt = 0;
    110c:	11 96       	adiw	r26, 0x01	; 1
    110e:	1c 92       	st	X, r1
    1110:	1e 92       	st	-X, r1
    1112:	67 c0       	rjmp	.+206    	; 0x11e2 <_ZN4NMEA6decodeEc+0x294>
      _state++;
      break;
    default:
    	// all other chars between '$' and '*' are part of a term
      (_term[_terms])[_nt++] = c;
    1114:	dc 01       	movw	r26, r24
    1116:	4d 91       	ld	r20, X+
    1118:	5c 91       	ld	r21, X
    111a:	d9 01       	movw	r26, r18
    111c:	ed 91       	ld	r30, X+
    111e:	fc 91       	ld	r31, X
    1120:	11 97       	sbiw	r26, 0x01	; 1
    1122:	ee 0f       	add	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	ec 0f       	add	r30, r28
    1128:	fd 1f       	adc	r31, r29
    112a:	e1 5e       	subi	r30, 0xE1	; 225
    112c:	fe 4f       	sbci	r31, 0xFE	; 254
    112e:	01 90       	ld	r0, Z+
    1130:	f0 81       	ld	r31, Z
    1132:	e0 2d       	mov	r30, r0
    1134:	e4 0f       	add	r30, r20
    1136:	f5 1f       	adc	r31, r21
    1138:	60 83       	st	Z, r22
    113a:	4f 5f       	subi	r20, 0xFF	; 255
    113c:	5f 4f       	sbci	r21, 0xFF	; 255
    113e:	ec 01       	movw	r28, r24
    1140:	59 83       	std	Y+1, r21	; 0x01
    1142:	48 83       	st	Y, r20
      _parity = _parity ^ c;
    1144:	77 27       	eor	r23, r23
    1146:	67 fd       	sbrc	r22, 7
    1148:	70 95       	com	r23
    114a:	f8 01       	movw	r30, r16
    114c:	80 81       	ld	r24, Z
    114e:	91 81       	ldd	r25, Z+1	; 0x01
    1150:	68 27       	eor	r22, r24
    1152:	79 27       	eor	r23, r25
    1154:	71 83       	std	Z+1, r23	; 0x01
    1156:	60 83       	st	Z, r22
    1158:	08 c2       	rjmp	.+1040   	; 0x156a <_ZN4NMEA6decodeEc+0x61c>
      break;
    }
    break;
  case 2:
  	// first char following '*' is checksum MSB
    _sentence[n++] = c;
    115a:	fe 01       	movw	r30, r28
    115c:	e8 0f       	add	r30, r24
    115e:	f9 1f       	adc	r31, r25
    1160:	e5 54       	subi	r30, 0x45	; 69
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	60 83       	st	Z, r22
    1166:	fe 01       	movw	r30, r28
    1168:	e5 5a       	subi	r30, 0xA5	; 165
    116a:	fe 4f       	sbci	r31, 0xFE	; 254
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	91 83       	std	Z+1, r25	; 0x01
    1170:	80 83       	st	Z, r24
    (_term[_terms])[_nt++] = c;
    1172:	de 01       	movw	r26, r28
    1174:	ad 59       	subi	r26, 0x9D	; 157
    1176:	be 4f       	sbci	r27, 0xFE	; 254
    1178:	8d 91       	ld	r24, X+
    117a:	9c 91       	ld	r25, X
    117c:	11 97       	sbiw	r26, 0x01	; 1
    117e:	fe 01       	movw	r30, r28
    1180:	e7 54       	subi	r30, 0x47	; 71
    1182:	ff 4f       	sbci	r31, 0xFF	; 255
    1184:	01 90       	ld	r0, Z+
    1186:	f0 81       	ld	r31, Z
    1188:	e0 2d       	mov	r30, r0
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	ec 0f       	add	r30, r28
    1190:	fd 1f       	adc	r31, r29
    1192:	e1 5e       	subi	r30, 0xE1	; 225
    1194:	fe 4f       	sbci	r31, 0xFE	; 254
    1196:	01 90       	ld	r0, Z+
    1198:	f0 81       	ld	r31, Z
    119a:	e0 2d       	mov	r30, r0
    119c:	e8 0f       	add	r30, r24
    119e:	f9 1f       	adc	r31, r25
    11a0:	60 83       	st	Z, r22
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	11 96       	adiw	r26, 0x01	; 1
    11a6:	9c 93       	st	X, r25
    11a8:	8e 93       	st	-X, r24
    _parity = _parity - (16 * _dehex(c));		// replace with bitshift?
    11aa:	fe 01       	movw	r30, r28
    11ac:	ef 59       	subi	r30, 0x9F	; 159
    11ae:	fe 4f       	sbci	r31, 0xFE	; 254
    11b0:	40 81       	ld	r20, Z
    11b2:	51 81       	ldd	r21, Z+1	; 0x01
    11b4:	86 2f       	mov	r24, r22
    11b6:	99 27       	eor	r25, r25
    11b8:	87 fd       	sbrc	r24, 7
    11ba:	90 95       	com	r25
}

int NMEA::_dehex(char a) {
	// returns base-16 value of chars '0'-'9' and 'A'-'F';
	// does not trap invalid chars!
  if (int(a) >= 65) {
    11bc:	61 34       	cpi	r22, 0x41	; 65
    11be:	14 f0       	brlt	.+4      	; 0x11c4 <_ZN4NMEA6decodeEc+0x276>
    return int(a)-55;
    11c0:	c7 97       	sbiw	r24, 0x37	; 55
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <_ZN4NMEA6decodeEc+0x278>
  }
  else {
    return int(a)-48;
    11c4:	c0 97       	sbiw	r24, 0x30	; 48
    break;
  case 2:
  	// first char following '*' is checksum MSB
    _sentence[n++] = c;
    (_term[_terms])[_nt++] = c;
    _parity = _parity - (16 * _dehex(c));		// replace with bitshift?
    11c6:	fe 01       	movw	r30, r28
    11c8:	ef 59       	subi	r30, 0x9F	; 159
    11ca:	fe 4f       	sbci	r31, 0xFE	; 254
    11cc:	9c 01       	movw	r18, r24
    11ce:	a4 e0       	ldi	r26, 0x04	; 4
    11d0:	22 0f       	add	r18, r18
    11d2:	33 1f       	adc	r19, r19
    11d4:	aa 95       	dec	r26
    11d6:	e1 f7       	brne	.-8      	; 0x11d0 <_ZN4NMEA6decodeEc+0x282>
    11d8:	ca 01       	movw	r24, r20
    11da:	82 1b       	sub	r24, r18
    11dc:	93 0b       	sbc	r25, r19
    11de:	91 83       	std	Z+1, r25	; 0x01
    11e0:	80 83       	st	Z, r24
    _state++;
    11e2:	c1 5a       	subi	r28, 0xA1	; 161
    11e4:	de 4f       	sbci	r29, 0xFE	; 254
    11e6:	88 81       	ld	r24, Y
    11e8:	99 81       	ldd	r25, Y+1	; 0x01
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	99 83       	std	Y+1, r25	; 0x01
    11ee:	88 83       	st	Y, r24
    11f0:	bc c1       	rjmp	.+888    	; 0x156a <_ZN4NMEA6decodeEc+0x61c>
    break;
  case 3:
  	// second char after '*' completes the checksum (LSB)
    _sentence[n++] = c;
    11f2:	fe 01       	movw	r30, r28
    11f4:	e8 0f       	add	r30, r24
    11f6:	f9 1f       	adc	r31, r25
    11f8:	e5 54       	subi	r30, 0x45	; 69
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	60 83       	st	Z, r22
    11fe:	01 96       	adiw	r24, 0x01	; 1
    _sentence[n++] = 0;
    1200:	fe 01       	movw	r30, r28
    1202:	e8 0f       	add	r30, r24
    1204:	f9 1f       	adc	r31, r25
    1206:	e5 54       	subi	r30, 0x45	; 69
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	10 82       	st	Z, r1
    120c:	fe 01       	movw	r30, r28
    120e:	e5 5a       	subi	r30, 0xA5	; 165
    1210:	fe 4f       	sbci	r31, 0xFE	; 254
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	91 83       	std	Z+1, r25	; 0x01
    1216:	80 83       	st	Z, r24
    (_term[_terms])[_nt++] = c;
    1218:	9e 01       	movw	r18, r28
    121a:	2d 59       	subi	r18, 0x9D	; 157
    121c:	3e 4f       	sbci	r19, 0xFE	; 254
    121e:	d9 01       	movw	r26, r18
    1220:	4d 91       	ld	r20, X+
    1222:	5c 91       	ld	r21, X
    1224:	ce 01       	movw	r24, r28
    1226:	87 54       	subi	r24, 0x47	; 71
    1228:	9f 4f       	sbci	r25, 0xFF	; 255
    122a:	dc 01       	movw	r26, r24
    122c:	ed 91       	ld	r30, X+
    122e:	fc 91       	ld	r31, X
    1230:	11 97       	sbiw	r26, 0x01	; 1
    1232:	ee 0f       	add	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	ec 0f       	add	r30, r28
    1238:	fd 1f       	adc	r31, r29
    123a:	e1 5e       	subi	r30, 0xE1	; 225
    123c:	fe 4f       	sbci	r31, 0xFE	; 254
    123e:	01 90       	ld	r0, Z+
    1240:	f0 81       	ld	r31, Z
    1242:	e0 2d       	mov	r30, r0
    1244:	e4 0f       	add	r30, r20
    1246:	f5 1f       	adc	r31, r21
    1248:	60 83       	st	Z, r22
    124a:	4f 5f       	subi	r20, 0xFF	; 255
    124c:	5f 4f       	sbci	r21, 0xFF	; 255
    124e:	f9 01       	movw	r30, r18
    1250:	51 83       	std	Z+1, r21	; 0x01
    1252:	40 83       	st	Z, r20
    (_term[_terms++])[_nt] = 0;
    1254:	2d 91       	ld	r18, X+
    1256:	3c 91       	ld	r19, X
    1258:	11 97       	sbiw	r26, 0x01	; 1
    125a:	f9 01       	movw	r30, r18
    125c:	ee 0f       	add	r30, r30
    125e:	ff 1f       	adc	r31, r31
    1260:	ec 0f       	add	r30, r28
    1262:	fd 1f       	adc	r31, r29
    1264:	e1 5e       	subi	r30, 0xE1	; 225
    1266:	fe 4f       	sbci	r31, 0xFE	; 254
    1268:	01 90       	ld	r0, Z+
    126a:	f0 81       	ld	r31, Z
    126c:	e0 2d       	mov	r30, r0
    126e:	e4 0f       	add	r30, r20
    1270:	f5 1f       	adc	r31, r21
    1272:	10 82       	st	Z, r1
    1274:	2f 5f       	subi	r18, 0xFF	; 255
    1276:	3f 4f       	sbci	r19, 0xFF	; 255
    1278:	2d 93       	st	X+, r18
    127a:	3c 93       	st	X, r19
    _state = 0;
    127c:	d8 01       	movw	r26, r16
    127e:	11 96       	adiw	r26, 0x01	; 1
    1280:	1c 92       	st	X, r1
    1282:	1e 92       	st	-X, r1
    _parity = _parity - _dehex(c);
    1284:	fe 01       	movw	r30, r28
    1286:	ef 59       	subi	r30, 0x9F	; 159
    1288:	fe 4f       	sbci	r31, 0xFE	; 254
    128a:	20 81       	ld	r18, Z
    128c:	31 81       	ldd	r19, Z+1	; 0x01
    128e:	86 2f       	mov	r24, r22
    1290:	99 27       	eor	r25, r25
    1292:	87 fd       	sbrc	r24, 7
    1294:	90 95       	com	r25
}

int NMEA::_dehex(char a) {
	// returns base-16 value of chars '0'-'9' and 'A'-'F';
	// does not trap invalid chars!
  if (int(a) >= 65) {
    1296:	61 34       	cpi	r22, 0x41	; 65
    1298:	14 f0       	brlt	.+4      	; 0x129e <_ZN4NMEA6decodeEc+0x350>
    return int(a)-55;
    129a:	c7 97       	sbiw	r24, 0x37	; 55
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <_ZN4NMEA6decodeEc+0x352>
  }
  else {
    return int(a)-48;
    129e:	c0 97       	sbiw	r24, 0x30	; 48
    _sentence[n++] = c;
    _sentence[n++] = 0;
    (_term[_terms])[_nt++] = c;
    (_term[_terms++])[_nt] = 0;
    _state = 0;
    _parity = _parity - _dehex(c);
    12a0:	f9 01       	movw	r30, r18
    12a2:	e8 1b       	sub	r30, r24
    12a4:	f9 0b       	sbc	r31, r25
    12a6:	cf 01       	movw	r24, r30
    12a8:	fe 01       	movw	r30, r28
    12aa:	ef 59       	subi	r30, 0x9F	; 159
    12ac:	fe 4f       	sbci	r31, 0xFE	; 254
    12ae:	91 83       	std	Z+1, r25	; 0x01
    12b0:	80 83       	st	Z, r24
    // when parity is zero, checksum was correct!
    if (_parity == 0) {
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <_ZN4NMEA6decodeEc+0x36a>
    12b6:	59 c1       	rjmp	.+690    	; 0x156a <_ZN4NMEA6decodeEc+0x61c>
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
    12b8:	88 81       	ld	r24, Y
    12ba:	99 81       	ldd	r25, Y+1	; 0x01
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	79 f4       	brne	.+30     	; 0x12de <_ZN4NMEA6decodeEc+0x390>
    12c0:	fe 01       	movw	r30, r28
    12c2:	e5 5a       	subi	r30, 0xA5	; 165
    12c4:	fe 4f       	sbci	r31, 0xFE	; 254
    12c6:	80 81       	ld	r24, Z
    12c8:	91 81       	ldd	r25, Z+1	; 0x01

//
// public methods
//

int NMEA::decode(char c) {
    12ca:	dc 01       	movw	r26, r24
    12cc:	a5 54       	subi	r26, 0x45	; 69
    12ce:	bf 4f       	sbci	r27, 0xFF	; 255
    12d0:	ac 0f       	add	r26, r28
    12d2:	bd 1f       	adc	r27, r29
    12d4:	fc 01       	movw	r30, r24
    12d6:	77 96       	adiw	r30, 0x17	; 23
    12d8:	ec 0f       	add	r30, r28
    12da:	fd 1f       	adc	r31, r29
    12dc:	0c c0       	rjmp	.+24     	; 0x12f6 <_ZN4NMEA6decodeEc+0x3a8>
    _state = 0;
    _parity = _parity - _dehex(c);
    // when parity is zero, checksum was correct!
    if (_parity == 0) {
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
    12de:	fe 01       	movw	r30, r28
    12e0:	e3 5a       	subi	r30, 0xA3	; 163
    12e2:	fe 4f       	sbci	r31, 0xFE	; 254
    12e4:	80 81       	ld	r24, Z
    12e6:	91 81       	ldd	r25, Z+1	; 0x01
    12e8:	86 30       	cpi	r24, 0x06	; 6
    12ea:	91 05       	cpc	r25, r1
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <_ZN4NMEA6decodeEc+0x3a2>
    12ee:	3d c1       	rjmp	.+634    	; 0x156a <_ZN4NMEA6decodeEc+0x61c>
    12f0:	e7 cf       	rjmp	.-50     	; 0x12c0 <_ZN4NMEA6decodeEc+0x372>
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
    12f2:	2e 91       	ld	r18, -X
    12f4:	22 93       	st	-Z, r18

//
// public methods
//

int NMEA::decode(char c) {
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    // when parity is zero, checksum was correct!
    if (_parity == 0) {
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
    12f8:	97 ff       	sbrs	r25, 7
    12fa:	fb cf       	rjmp	.-10     	; 0x12f2 <_ZN4NMEA6decodeEc+0x3a4>
    12fc:	fe 01       	movw	r30, r28
    12fe:	e5 5a       	subi	r30, 0xA5	; 165
    1300:	fe 4f       	sbci	r31, 0xFE	; 254
    1302:	91 83       	std	Z+1, r25	; 0x01
    1304:	80 83       	st	Z, r24
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    1306:	de 01       	movw	r26, r28
    1308:	a9 54       	subi	r26, 0x49	; 73
    130a:	bf 4f       	sbci	r27, 0xFF	; 255
    130c:	11 96       	adiw	r26, 0x01	; 1
    130e:	1c 92       	st	X, r1
    1310:	1e 92       	st	-X, r1
    1312:	bd 01       	movw	r22, r26
    1314:	8e 01       	movw	r16, r28
    1316:	07 54       	subi	r16, 0x47	; 71
    1318:	1f 4f       	sbci	r17, 0xFF	; 255
	      	_nt = 0;
    131a:	83 e6       	ldi	r24, 0x63	; 99
    131c:	e8 2e       	mov	r14, r24
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	f8 2e       	mov	r15, r24
    1322:	ec 0e       	add	r14, r28
    1324:	fd 1e       	adc	r15, r29
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    1326:	37 c0       	rjmp	.+110    	; 0x1396 <_ZN4NMEA6decodeEc+0x448>
	      	_nt = 0;
    1328:	f7 01       	movw	r30, r14
    132a:	11 82       	std	Z+1, r1	; 0x01
    132c:	10 82       	st	Z, r1
	      	while ((_term[f_terms])[_nt]) {
    132e:	0d c0       	rjmp	.+26     	; 0x134a <_ZN4NMEA6decodeEc+0x3fc>
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
    1330:	fc 01       	movw	r30, r24
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01
    1336:	82 0f       	add	r24, r18
    1338:	93 1f       	adc	r25, r19
    133a:	fc 01       	movw	r30, r24
    133c:	40 83       	st	Z, r20
	        	_nt++;
    133e:	f7 01       	movw	r30, r14
    1340:	80 81       	ld	r24, Z
    1342:	91 81       	ldd	r25, Z+1	; 0x01
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	91 83       	std	Z+1, r25	; 0x01
    1348:	80 83       	st	Z, r24
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
	      	_nt = 0;
	      	while ((_term[f_terms])[_nt]) {
    134a:	fb 01       	movw	r30, r22
    134c:	80 81       	ld	r24, Z
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	f7 01       	movw	r30, r14
    1352:	20 81       	ld	r18, Z
    1354:	31 81       	ldd	r19, Z+1	; 0x01
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	8c 0f       	add	r24, r28
    135c:	9d 1f       	adc	r25, r29
    135e:	ac 01       	movw	r20, r24
    1360:	41 5e       	subi	r20, 0xE1	; 225
    1362:	5e 4f       	sbci	r21, 0xFE	; 254
    1364:	fa 01       	movw	r30, r20
    1366:	40 81       	ld	r20, Z
    1368:	51 81       	ldd	r21, Z+1	; 0x01
    136a:	42 0f       	add	r20, r18
    136c:	53 1f       	adc	r21, r19
    136e:	fa 01       	movw	r30, r20
    1370:	40 81       	ld	r20, Z
    1372:	85 58       	subi	r24, 0x85	; 133
    1374:	9f 4f       	sbci	r25, 0xFF	; 255
    1376:	44 23       	and	r20, r20
    1378:	d9 f6       	brne	.-74     	; 0x1330 <_ZN4NMEA6decodeEc+0x3e2>
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
	        	_nt++;
	        }
	        (f_term[f_terms])[_nt] = 0;
    137a:	fc 01       	movw	r30, r24
    137c:	80 81       	ld	r24, Z
    137e:	91 81       	ldd	r25, Z+1	; 0x01
    1380:	82 0f       	add	r24, r18
    1382:	93 1f       	adc	r25, r19
    1384:	fc 01       	movw	r30, r24
    1386:	10 82       	st	Z, r1
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    1388:	8d 91       	ld	r24, X+
    138a:	9c 91       	ld	r25, X
    138c:	11 97       	sbiw	r26, 0x01	; 1
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	11 96       	adiw	r26, 0x01	; 1
    1392:	9c 93       	st	X, r25
    1394:	8e 93       	st	-X, r24
    1396:	fb 01       	movw	r30, r22
    1398:	20 81       	ld	r18, Z
    139a:	31 81       	ldd	r19, Z+1	; 0x01
    139c:	f8 01       	movw	r30, r16
    139e:	80 81       	ld	r24, Z
    13a0:	91 81       	ldd	r25, Z+1	; 0x01
    13a2:	28 17       	cp	r18, r24
    13a4:	39 07       	cpc	r19, r25
    13a6:	0c f4       	brge	.+2      	; 0x13aa <_ZN4NMEA6decodeEc+0x45c>
    13a8:	bf cf       	rjmp	.-130    	; 0x1328 <_ZN4NMEA6decodeEc+0x3da>
	        	_nt++;
	        }
	        (f_term[f_terms])[_nt] = 0;
	      }
	      // when sentence is of datatype GPRMC
	      if (_gprmc_tag == 6) {
    13aa:	fe 01       	movw	r30, r28
    13ac:	e3 5a       	subi	r30, 0xA3	; 163
    13ae:	fe 4f       	sbci	r31, 0xFE	; 254
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	86 30       	cpi	r24, 0x06	; 6
    13b6:	91 05       	cpc	r25, r1
    13b8:	09 f0       	breq	.+2      	; 0x13bc <_ZN4NMEA6decodeEc+0x46e>
    13ba:	da c0       	rjmp	.+436    	; 0x1570 <_ZN4NMEA6decodeEc+0x622>
	      	// store values of relevant GPRMC terms
	      	_gprmc_utc = _decimal(_term[1]);
    13bc:	fe 01       	movw	r30, r28
    13be:	ef 5d       	subi	r30, 0xDF	; 223
    13c0:	fe 4f       	sbci	r31, 0xFE	; 254
    13c2:	60 81       	ld	r22, Z
    13c4:	71 81       	ldd	r23, Z+1	; 0x01
    13c6:	ce 01       	movw	r24, r28
    13c8:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN4NMEA8_decimalEPc>
    13cc:	6a 83       	std	Y+2, r22	; 0x02
    13ce:	7b 83       	std	Y+3, r23	; 0x03
    13d0:	8c 83       	std	Y+4, r24	; 0x04
    13d2:	9d 83       	std	Y+5, r25	; 0x05
	      	_gprmc_status = (_term[2])[0];
    13d4:	fe 01       	movw	r30, r28
    13d6:	ed 5d       	subi	r30, 0xDD	; 221
    13d8:	fe 4f       	sbci	r31, 0xFE	; 254
    13da:	01 90       	ld	r0, Z+
    13dc:	f0 81       	ld	r31, Z
    13de:	e0 2d       	mov	r30, r0
    13e0:	80 81       	ld	r24, Z
    13e2:	8e 83       	std	Y+6, r24	; 0x06
	        // calculate signed degree-decimal value of latitude term
	        _gprmc_lat = _decimal(_term[3]) / 100.0;
    13e4:	fe 01       	movw	r30, r28
    13e6:	eb 5d       	subi	r30, 0xDB	; 219
    13e8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ea:	60 81       	ld	r22, Z
    13ec:	71 81       	ldd	r23, Z+1	; 0x01
    13ee:	ce 01       	movw	r24, r28
    13f0:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN4NMEA8_decimalEPc>
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	48 ec       	ldi	r20, 0xC8	; 200
    13fa:	52 e4       	ldi	r21, 0x42	; 66
    13fc:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <__divsf3>
    1400:	5b 01       	movw	r10, r22
    1402:	6c 01       	movw	r12, r24
	        _degs = floor(_gprmc_lat);
    1404:	7b 2d       	mov	r23, r11
    1406:	9d 2d       	mov	r25, r13
    1408:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <floor>
    140c:	7b 01       	movw	r14, r22
    140e:	8c 01       	movw	r16, r24
    1410:	fe 01       	movw	r30, r28
    1412:	eb 59       	subi	r30, 0x9B	; 155
    1414:	fe 4f       	sbci	r31, 0xFE	; 254
    1416:	60 83       	st	Z, r22
    1418:	71 83       	std	Z+1, r23	; 0x01
    141a:	82 83       	std	Z+2, r24	; 0x02
    141c:	93 83       	std	Z+3, r25	; 0x03
	        _gprmc_lat = (100.0 * (_gprmc_lat - _degs)) / 60.0;
    141e:	6a 2d       	mov	r22, r10
    1420:	7b 2d       	mov	r23, r11
    1422:	8c 2d       	mov	r24, r12
    1424:	9d 2d       	mov	r25, r13
    1426:	a8 01       	movw	r20, r16
    1428:	97 01       	movw	r18, r14
    142a:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	48 ec       	ldi	r20, 0xC8	; 200
    1434:	52 e4       	ldi	r21, 0x42	; 66
    1436:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e7       	ldi	r20, 0x70	; 112
    1440:	52 e4       	ldi	r21, 0x42	; 66
    1442:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <__divsf3>
	        _gprmc_lat += _degs;
    1446:	a8 01       	movw	r20, r16
    1448:	97 01       	movw	r18, r14
    144a:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    144e:	6b 01       	movw	r12, r22
    1450:	e8 2e       	mov	r14, r24
    1452:	09 2f       	mov	r16, r25
    1454:	76 2f       	mov	r23, r22
    1456:	27 2f       	mov	r18, r23
    1458:	3d 2d       	mov	r19, r13
    145a:	4e 2d       	mov	r20, r14
    145c:	50 2f       	mov	r21, r16
    145e:	2f 83       	std	Y+7, r18	; 0x07
    1460:	38 87       	std	Y+8, r19	; 0x08
    1462:	49 87       	std	Y+9, r20	; 0x09
    1464:	5a 87       	std	Y+10, r21	; 0x0a
	        // southern hemisphere is negative-valued
	        if ((_term[4])[0] == 'S') {
    1466:	fe 01       	movw	r30, r28
    1468:	e9 5d       	subi	r30, 0xD9	; 217
    146a:	fe 4f       	sbci	r31, 0xFE	; 254
    146c:	01 90       	ld	r0, Z+
    146e:	f0 81       	ld	r31, Z
    1470:	e0 2d       	mov	r30, r0
    1472:	80 81       	ld	r24, Z
    1474:	83 35       	cpi	r24, 0x53	; 83
    1476:	49 f4       	brne	.+18     	; 0x148a <_ZN4NMEA6decodeEc+0x53c>
	          _gprmc_lat = 0.0 - _gprmc_lat;
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	cb 01       	movw	r24, r22
    147e:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
    1482:	6f 83       	std	Y+7, r22	; 0x07
    1484:	78 87       	std	Y+8, r23	; 0x08
    1486:	89 87       	std	Y+9, r24	; 0x09
    1488:	9a 87       	std	Y+10, r25	; 0x0a
	        }
	        // calculate signed degree-decimal value of longitude term
	        _gprmc_long = _decimal(_term[5]) / 100.0;
    148a:	fe 01       	movw	r30, r28
    148c:	e7 5d       	subi	r30, 0xD7	; 215
    148e:	fe 4f       	sbci	r31, 0xFE	; 254
    1490:	60 81       	ld	r22, Z
    1492:	71 81       	ldd	r23, Z+1	; 0x01
    1494:	ce 01       	movw	r24, r28
    1496:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN4NMEA8_decimalEPc>
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	48 ec       	ldi	r20, 0xC8	; 200
    14a0:	52 e4       	ldi	r21, 0x42	; 66
    14a2:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <__divsf3>
    14a6:	5b 01       	movw	r10, r22
    14a8:	6c 01       	movw	r12, r24
	        _degs = floor(_gprmc_long);
    14aa:	7b 2d       	mov	r23, r11
    14ac:	9d 2d       	mov	r25, r13
    14ae:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <floor>
    14b2:	7b 01       	movw	r14, r22
    14b4:	8c 01       	movw	r16, r24
    14b6:	fe 01       	movw	r30, r28
    14b8:	eb 59       	subi	r30, 0x9B	; 155
    14ba:	fe 4f       	sbci	r31, 0xFE	; 254
    14bc:	60 83       	st	Z, r22
    14be:	71 83       	std	Z+1, r23	; 0x01
    14c0:	82 83       	std	Z+2, r24	; 0x02
    14c2:	93 83       	std	Z+3, r25	; 0x03
	        _gprmc_long = (100.0 * (_gprmc_long - _degs)) / 60.0;
    14c4:	6a 2d       	mov	r22, r10
    14c6:	7b 2d       	mov	r23, r11
    14c8:	8c 2d       	mov	r24, r12
    14ca:	9d 2d       	mov	r25, r13
    14cc:	a8 01       	movw	r20, r16
    14ce:	97 01       	movw	r18, r14
    14d0:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	48 ec       	ldi	r20, 0xC8	; 200
    14da:	52 e4       	ldi	r21, 0x42	; 66
    14dc:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e7       	ldi	r20, 0x70	; 112
    14e6:	52 e4       	ldi	r21, 0x42	; 66
    14e8:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <__divsf3>
	        _gprmc_long += _degs;
    14ec:	a8 01       	movw	r20, r16
    14ee:	97 01       	movw	r18, r14
    14f0:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    14f4:	6b 01       	movw	r12, r22
    14f6:	e8 2e       	mov	r14, r24
    14f8:	09 2f       	mov	r16, r25
    14fa:	76 2f       	mov	r23, r22
    14fc:	27 2f       	mov	r18, r23
    14fe:	3d 2d       	mov	r19, r13
    1500:	4e 2d       	mov	r20, r14
    1502:	50 2f       	mov	r21, r16
    1504:	2b 87       	std	Y+11, r18	; 0x0b
    1506:	3c 87       	std	Y+12, r19	; 0x0c
    1508:	4d 87       	std	Y+13, r20	; 0x0d
    150a:	5e 87       	std	Y+14, r21	; 0x0e
	        // western hemisphere is negative-valued
	        if ((_term[6])[0] == 'W') {
    150c:	fe 01       	movw	r30, r28
    150e:	e5 5d       	subi	r30, 0xD5	; 213
    1510:	fe 4f       	sbci	r31, 0xFE	; 254
    1512:	01 90       	ld	r0, Z+
    1514:	f0 81       	ld	r31, Z
    1516:	e0 2d       	mov	r30, r0
    1518:	80 81       	ld	r24, Z
    151a:	87 35       	cpi	r24, 0x57	; 87
    151c:	49 f4       	brne	.+18     	; 0x1530 <_ZN4NMEA6decodeEc+0x5e2>
	          _gprmc_long = 0.0 - _gprmc_long;
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	cb 01       	movw	r24, r22
    1524:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
    1528:	6b 87       	std	Y+11, r22	; 0x0b
    152a:	7c 87       	std	Y+12, r23	; 0x0c
    152c:	8d 87       	std	Y+13, r24	; 0x0d
    152e:	9e 87       	std	Y+14, r25	; 0x0e
	        }
	        _gprmc_speed = _decimal(_term[7]);
    1530:	fe 01       	movw	r30, r28
    1532:	e3 5d       	subi	r30, 0xD3	; 211
    1534:	fe 4f       	sbci	r31, 0xFE	; 254
    1536:	60 81       	ld	r22, Z
    1538:	71 81       	ldd	r23, Z+1	; 0x01
    153a:	ce 01       	movw	r24, r28
    153c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN4NMEA8_decimalEPc>
    1540:	6f 87       	std	Y+15, r22	; 0x0f
    1542:	78 8b       	std	Y+16, r23	; 0x10
    1544:	89 8b       	std	Y+17, r24	; 0x11
    1546:	9a 8b       	std	Y+18, r25	; 0x12
	        _gprmc_angle = _decimal(_term[8]);
    1548:	fe 01       	movw	r30, r28
    154a:	e1 5d       	subi	r30, 0xD1	; 209
    154c:	fe 4f       	sbci	r31, 0xFE	; 254
    154e:	60 81       	ld	r22, Z
    1550:	71 81       	ldd	r23, Z+1	; 0x01
    1552:	ce 01       	movw	r24, r28
    1554:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN4NMEA8_decimalEPc>
    1558:	6b 8b       	std	Y+19, r22	; 0x13
    155a:	7c 8b       	std	Y+20, r23	; 0x14
    155c:	8d 8b       	std	Y+21, r24	; 0x15
    155e:	9e 8b       	std	Y+22, r25	; 0x16
    1560:	07 c0       	rjmp	.+14     	; 0x1570 <_ZN4NMEA6decodeEc+0x622>
      	return 1;
      }
    }
    break;
  default:
    _state = 0;
    1562:	c1 5a       	subi	r28, 0xA1	; 161
    1564:	de 4f       	sbci	r29, 0xFE	; 254
    1566:	19 82       	std	Y+1, r1	; 0x01
    1568:	18 82       	st	Y, r1
    break;
  }
  return 0;
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <_ZN4NMEA6decodeEc+0x626>
	        }
	        _gprmc_speed = _decimal(_term[7]);
	        _gprmc_angle = _decimal(_term[8]);
	      }
      	// sentence accepted!
      	return 1;
    1570:	21 e0       	ldi	r18, 0x01	; 1
    1572:	30 e0       	ldi	r19, 0x00	; 0
  default:
    _state = 0;
    break;
  }
  return 0;
}
    1574:	c9 01       	movw	r24, r18
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	df 90       	pop	r13
    1584:	cf 90       	pop	r12
    1586:	bf 90       	pop	r11
    1588:	af 90       	pop	r10
    158a:	08 95       	ret

0000158c <_ZN11FlexiTimer23setEmdPFvvE>:
/**
 * @param resolution
 *   0.001 implies a 1 ms (1/1000s = 0.001s = 1ms) resolution. Therefore,
 *   0.0005 implies a 0.5 ms (1/2000s) resolution. And so on.
 */
void FlexiTimer2::set(unsigned long units, double resolution, void (*f)()) {
    158c:	cf 92       	push	r12
    158e:	df 92       	push	r13
    1590:	ef 92       	push	r14
    1592:	ff 92       	push	r15
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	6b 01       	movw	r12, r22
    159a:	7c 01       	movw	r14, r24
    159c:	ca 01       	movw	r24, r20
    159e:	b9 01       	movw	r22, r18
	float prescaler = 0.0;
	
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TIMSK2 &= ~(1<<TOIE2);
    15a0:	20 91 70 00 	lds	r18, 0x0070
    15a4:	2e 7f       	andi	r18, 0xFE	; 254
    15a6:	20 93 70 00 	sts	0x0070, r18
	TCCR2A &= ~((1<<WGM21) | (1<<WGM20));
    15aa:	20 91 b0 00 	lds	r18, 0x00B0
    15ae:	2c 7f       	andi	r18, 0xFC	; 252
    15b0:	20 93 b0 00 	sts	0x00B0, r18
	TCCR2B &= ~(1<<WGM22);
    15b4:	20 91 b1 00 	lds	r18, 0x00B1
    15b8:	27 7f       	andi	r18, 0xF7	; 247
    15ba:	20 93 b1 00 	sts	0x00B1, r18
	ASSR &= ~(1<<AS2);
    15be:	20 91 b6 00 	lds	r18, 0x00B6
    15c2:	2f 7d       	andi	r18, 0xDF	; 223
    15c4:	20 93 b6 00 	sts	0x00B6, r18
	TIMSK2 &= ~(1<<OCIE2A);
    15c8:	20 91 70 00 	lds	r18, 0x0070
    15cc:	2d 7f       	andi	r18, 0xFD	; 253
    15ce:	20 93 70 00 	sts	0x0070, r18
	
	if ((F_CPU >= 1000000UL) && (F_CPU <= 16000000UL)) {	// prescaler set to 64
		TCCR2B |= (1<<CS22);
    15d2:	20 91 b1 00 	lds	r18, 0x00B1
    15d6:	24 60       	ori	r18, 0x04	; 4
    15d8:	20 93 b1 00 	sts	0x00B1, r18
		TCCR2B &= ~((1<<CS21) | (1<<CS20));
    15dc:	20 91 b1 00 	lds	r18, 0x00B1
    15e0:	2c 7f       	andi	r18, 0xFC	; 252
    15e2:	20 93 b1 00 	sts	0x00B1, r18
		TCCR2 &= ~((1<<CS21) | (1<<CS20));
		prescaler = 256.0;
	}
#endif
	
	tcnt2 = 256 - (int)((float)F_CPU * resolution / prescaler);
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	34 e2       	ldi	r19, 0x24	; 36
    15ea:	44 e7       	ldi	r20, 0x74	; 116
    15ec:	5b e4       	ldi	r21, 0x4B	; 75
    15ee:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e8       	ldi	r20, 0x80	; 128
    15f8:	5c e3       	ldi	r21, 0x3C	; 60
    15fa:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    15fe:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__fixsfsi>
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	91 e0       	ldi	r25, 0x01	; 1
    1606:	86 1b       	sub	r24, r22
    1608:	97 0b       	sbc	r25, r23
    160a:	90 93 90 05 	sts	0x0590, r25
    160e:	80 93 8f 05 	sts	0x058F, r24
	
	if (units == 0)
    1612:	c1 14       	cp	r12, r1
    1614:	d1 04       	cpc	r13, r1
    1616:	e1 04       	cpc	r14, r1
    1618:	f1 04       	cpc	r15, r1
    161a:	69 f4       	brne	.+26     	; 0x1636 <_ZN11FlexiTimer23setEmdPFvvE+0xaa>
		time_units = 1;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	a0 e0       	ldi	r26, 0x00	; 0
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	80 93 84 05 	sts	0x0584, r24
    1628:	90 93 85 05 	sts	0x0585, r25
    162c:	a0 93 86 05 	sts	0x0586, r26
    1630:	b0 93 87 05 	sts	0x0587, r27
    1634:	08 c0       	rjmp	.+16     	; 0x1646 <_ZN11FlexiTimer23setEmdPFvvE+0xba>
	else
		time_units = units;
    1636:	c0 92 84 05 	sts	0x0584, r12
    163a:	d0 92 85 05 	sts	0x0585, r13
    163e:	e0 92 86 05 	sts	0x0586, r14
    1642:	f0 92 87 05 	sts	0x0587, r15
		
	func = f;
    1646:	10 93 89 05 	sts	0x0589, r17
    164a:	00 93 88 05 	sts	0x0588, r16
}
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	ff 90       	pop	r15
    1654:	ef 90       	pop	r14
    1656:	df 90       	pop	r13
    1658:	cf 90       	pop	r12
    165a:	08 95       	ret

0000165c <_ZN11FlexiTimer23setEmPFvvE>:
void (*FlexiTimer2::func)();
volatile unsigned long FlexiTimer2::count;
volatile char FlexiTimer2::overflowing;
volatile unsigned int FlexiTimer2::tcnt2;

void FlexiTimer2::set(unsigned long ms, void (*f)()) {
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	8a 01       	movw	r16, r20
    FlexiTimer2::set(ms, 0.001, f);
    1662:	2f e6       	ldi	r18, 0x6F	; 111
    1664:	32 e1       	ldi	r19, 0x12	; 18
    1666:	43 e8       	ldi	r20, 0x83	; 131
    1668:	5a e3       	ldi	r21, 0x3A	; 58
    166a:	0e 94 c6 0a 	call	0x158c	; 0x158c <_ZN11FlexiTimer23setEmdPFvvE>
}
    166e:	1f 91       	pop	r17
    1670:	0f 91       	pop	r16
    1672:	08 95       	ret

00001674 <_ZN11FlexiTimer25startEv>:
		
	func = f;
}

void FlexiTimer2::start() {
	count = 0;
    1674:	10 92 8a 05 	sts	0x058A, r1
    1678:	10 92 8b 05 	sts	0x058B, r1
    167c:	10 92 8c 05 	sts	0x058C, r1
    1680:	10 92 8d 05 	sts	0x058D, r1
	overflowing = 0;
    1684:	10 92 8e 05 	sts	0x058E, r1
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TCNT2 = tcnt2;
    1688:	80 91 8f 05 	lds	r24, 0x058F
    168c:	90 91 90 05 	lds	r25, 0x0590
    1690:	80 93 b2 00 	sts	0x00B2, r24
	TIMSK2 |= (1<<TOIE2);
    1694:	e0 e7       	ldi	r30, 0x70	; 112
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	81 60       	ori	r24, 0x01	; 1
    169c:	80 83       	st	Z, r24
	TIMSK |= (1<<TOIE2);
#elif defined (__AVR_ATmega8__)
	TCNT2 = tcnt2;
	TIMSK |= (1<<TOIE2);
#endif
}
    169e:	08 95       	ret

000016a0 <_ZN11FlexiTimer29_overflowEv>:
	TIMSK &= ~(1<<TOIE2);
#endif
}

void FlexiTimer2::_overflow() {
	count += 1;
    16a0:	80 91 8a 05 	lds	r24, 0x058A
    16a4:	90 91 8b 05 	lds	r25, 0x058B
    16a8:	a0 91 8c 05 	lds	r26, 0x058C
    16ac:	b0 91 8d 05 	lds	r27, 0x058D
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	a1 1d       	adc	r26, r1
    16b4:	b1 1d       	adc	r27, r1
    16b6:	80 93 8a 05 	sts	0x058A, r24
    16ba:	90 93 8b 05 	sts	0x058B, r25
    16be:	a0 93 8c 05 	sts	0x058C, r26
    16c2:	b0 93 8d 05 	sts	0x058D, r27
	
	if (count >= time_units && !overflowing) {
    16c6:	20 91 8a 05 	lds	r18, 0x058A
    16ca:	30 91 8b 05 	lds	r19, 0x058B
    16ce:	40 91 8c 05 	lds	r20, 0x058C
    16d2:	50 91 8d 05 	lds	r21, 0x058D
    16d6:	80 91 84 05 	lds	r24, 0x0584
    16da:	90 91 85 05 	lds	r25, 0x0585
    16de:	a0 91 86 05 	lds	r26, 0x0586
    16e2:	b0 91 87 05 	lds	r27, 0x0587
    16e6:	28 17       	cp	r18, r24
    16e8:	39 07       	cpc	r19, r25
    16ea:	4a 07       	cpc	r20, r26
    16ec:	5b 07       	cpc	r21, r27
    16ee:	b0 f0       	brcs	.+44     	; 0x171c <_ZN11FlexiTimer29_overflowEv+0x7c>
    16f0:	80 91 8e 05 	lds	r24, 0x058E
    16f4:	88 23       	and	r24, r24
    16f6:	91 f4       	brne	.+36     	; 0x171c <_ZN11FlexiTimer29_overflowEv+0x7c>
		overflowing = 1;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	80 93 8e 05 	sts	0x058E, r24
		count = 0;
    16fe:	10 92 8a 05 	sts	0x058A, r1
    1702:	10 92 8b 05 	sts	0x058B, r1
    1706:	10 92 8c 05 	sts	0x058C, r1
    170a:	10 92 8d 05 	sts	0x058D, r1
		(*func)();
    170e:	e0 91 88 05 	lds	r30, 0x0588
    1712:	f0 91 89 05 	lds	r31, 0x0589
    1716:	09 95       	icall
		overflowing = 0;
    1718:	10 92 8e 05 	sts	0x058E, r1
    171c:	08 95       	ret

0000171e <__vector_15>:
	}
}

ISR(TIMER2_OVF_vect) {
    171e:	1f 92       	push	r1
    1720:	0f 92       	push	r0
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	0f 92       	push	r0
    1726:	0b b6       	in	r0, 0x3b	; 59
    1728:	0f 92       	push	r0
    172a:	11 24       	eor	r1, r1
    172c:	2f 93       	push	r18
    172e:	3f 93       	push	r19
    1730:	4f 93       	push	r20
    1732:	5f 93       	push	r21
    1734:	6f 93       	push	r22
    1736:	7f 93       	push	r23
    1738:	8f 93       	push	r24
    173a:	9f 93       	push	r25
    173c:	af 93       	push	r26
    173e:	bf 93       	push	r27
    1740:	ef 93       	push	r30
    1742:	ff 93       	push	r31
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TCNT2 = FlexiTimer2::tcnt2;
    1744:	80 91 8f 05 	lds	r24, 0x058F
    1748:	90 91 90 05 	lds	r25, 0x0590
    174c:	80 93 b2 00 	sts	0x00B2, r24
#elif defined (__AVR_ATmega128__)
	TCNT2 = FlexiTimer2::tcnt2;
#elif defined (__AVR_ATmega8__)
	TCNT2 = FlexiTimer2::tcnt2;
#endif
	FlexiTimer2::_overflow();
    1750:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <_ZN11FlexiTimer29_overflowEv>
}
    1754:	ff 91       	pop	r31
    1756:	ef 91       	pop	r30
    1758:	bf 91       	pop	r27
    175a:	af 91       	pop	r26
    175c:	9f 91       	pop	r25
    175e:	8f 91       	pop	r24
    1760:	7f 91       	pop	r23
    1762:	6f 91       	pop	r22
    1764:	5f 91       	pop	r21
    1766:	4f 91       	pop	r20
    1768:	3f 91       	pop	r19
    176a:	2f 91       	pop	r18
    176c:	0f 90       	pop	r0
    176e:	0b be       	out	0x3b, r0	; 59
    1770:	0f 90       	pop	r0
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	0f 90       	pop	r0
    1776:	1f 90       	pop	r1
    1778:	18 95       	reti

0000177a <_ZN12FirmataClass11systemResetEv>:



// resets the system state upon a SYSTEM_RESET message from the host software
void FirmataClass::systemReset(void)
{
    177a:	fc 01       	movw	r30, r24
  byte i;

  waitForData = 0; // this flag says the next serial input will be data
    177c:	15 82       	std	Z+5, r1	; 0x05
  executeMultiByteCommand = 0; // execute this after getting multi-byte data
    177e:	16 82       	std	Z+6, r1	; 0x06
  multiByteChannel = 0; // channel data for multiByteCommands
    1780:	17 82       	std	Z+7, r1	; 0x07
//******************************************************************************



// resets the system state upon a SYSTEM_RESET message from the host software
void FirmataClass::systemReset(void)
    1782:	dc 01       	movw	r26, r24
    1784:	18 96       	adiw	r26, 0x08	; 8
    1786:	80 e2       	ldi	r24, 0x20	; 32
  executeMultiByteCommand = 0; // execute this after getting multi-byte data
  multiByteChannel = 0; // channel data for multiByteCommands


  for(i=0; i<MAX_DATA_BYTES; i++) {
    storedInputData[i] = 0;
    1788:	1d 92       	st	X+, r1
    178a:	81 50       	subi	r24, 0x01	; 1
  waitForData = 0; // this flag says the next serial input will be data
  executeMultiByteCommand = 0; // execute this after getting multi-byte data
  multiByteChannel = 0; // channel data for multiByteCommands


  for(i=0; i<MAX_DATA_BYTES; i++) {
    178c:	e9 f7       	brne	.-6      	; 0x1788 <_ZN12FirmataClass11systemResetEv+0xe>
    storedInputData[i] = 0;
  }

  parsingSysex = false;
    178e:	10 a6       	std	Z+40, r1	; 0x28
  sysexBytesRead = 0;
    1790:	12 a6       	std	Z+42, r1	; 0x2a
    1792:	11 a6       	std	Z+41, r1	; 0x29

  if(currentSystemResetCallback)
    1794:	05 a8       	ldd	r0, Z+53	; 0x35
    1796:	f6 a9       	ldd	r31, Z+54	; 0x36
    1798:	e0 2d       	mov	r30, r0
    179a:	30 97       	sbiw	r30, 0x00	; 0
    179c:	09 f0       	breq	.+2      	; 0x17a0 <_ZN12FirmataClass11systemResetEv+0x26>
    (*currentSystemResetCallback)();
    179e:	09 95       	icall
    17a0:	08 95       	ret

000017a2 <_GLOBAL__I__ZN12FirmataClass23sendValueAsTwo7bitBytesEi>:

//******************************************************************************
//* Constructors
//******************************************************************************

FirmataClass::FirmataClass(Stream &s) : FirmataSerial(s)
    17a2:	89 e3       	ldi	r24, 0x39	; 57
    17a4:	90 e1       	ldi	r25, 0x10	; 16
    17a6:	90 93 92 05 	sts	0x0592, r25
    17aa:	80 93 91 05 	sts	0x0591, r24
{
  firmwareVersionCount = 0;
    17ae:	10 92 93 05 	sts	0x0593, r1
  systemReset();
    17b2:	81 e9       	ldi	r24, 0x91	; 145
    17b4:	95 e0       	ldi	r25, 0x05	; 5
    17b6:	0e 94 bd 0b 	call	0x177a	; 0x177a <_ZN12FirmataClass11systemResetEv>
  }
}


// make one instance for the user to use
FirmataClass Firmata(Serial);
    17ba:	08 95       	ret

000017bc <_ZN11EEPROMClass4readEi>:
/******************************************************************************
 * User API
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
    17bc:	cb 01       	movw	r24, r22
	return eeprom_read_byte((unsigned char *) address);
    17be:	0e 94 ae 32 	call	0x655c	; 0x655c <__eerd_byte_m1280>
}
    17c2:	08 95       	ret

000017c4 <_ZN11EEPROMClass5writeEih>:

void EEPROMClass::write(int address, uint8_t value)
{
    17c4:	cb 01       	movw	r24, r22
	eeprom_write_byte((unsigned char *) address, value);
    17c6:	64 2f       	mov	r22, r20
    17c8:	0e 94 b6 32 	call	0x656c	; 0x656c <__eewr_byte_m1280>
}
    17cc:	08 95       	ret

000017ce <_ZN13AltSoftSerial4readEv>:

int AltSoftSerial::read(void)
{
	uint8_t head, tail, out;

	head = rx_buffer_head;
    17ce:	90 91 cf 05 	lds	r25, 0x05CF
	tail = rx_buffer_tail;
    17d2:	80 91 ce 05 	lds	r24, 0x05CE
	if (head == tail) return -1;
    17d6:	98 17       	cp	r25, r24
    17d8:	69 f0       	breq	.+26     	; 0x17f4 <_ZN13AltSoftSerial4readEv+0x26>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    17da:	8f 5f       	subi	r24, 0xFF	; 255
    17dc:	80 35       	cpi	r24, 0x50	; 80
    17de:	08 f0       	brcs	.+2      	; 0x17e2 <_ZN13AltSoftSerial4readEv+0x14>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
	out = rx_buffer[tail];
    17e2:	e8 2f       	mov	r30, r24
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	e0 53       	subi	r30, 0x30	; 48
    17e8:	fa 4f       	sbci	r31, 0xFA	; 250
    17ea:	20 81       	ld	r18, Z
	rx_buffer_tail = tail;
    17ec:	80 93 ce 05 	sts	0x05CE, r24
	return out;
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <_ZN13AltSoftSerial4readEv+0x2a>
{
	uint8_t head, tail, out;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    17f4:	2f ef       	ldi	r18, 0xFF	; 255
    17f6:	3f ef       	ldi	r19, 0xFF	; 255
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	out = rx_buffer[tail];
	rx_buffer_tail = tail;
	return out;
}
    17f8:	c9 01       	movw	r24, r18
    17fa:	08 95       	ret

000017fc <_ZN13AltSoftSerial4peekEv>:

int AltSoftSerial::peek(void)
{
	uint8_t head, tail;

	head = rx_buffer_head;
    17fc:	80 91 cf 05 	lds	r24, 0x05CF
	tail = rx_buffer_tail;
    1800:	e0 91 ce 05 	lds	r30, 0x05CE
	if (head == tail) return -1;
    1804:	8e 17       	cp	r24, r30
    1806:	31 f0       	breq	.+12     	; 0x1814 <_ZN13AltSoftSerial4peekEv+0x18>
	return rx_buffer[tail];
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	e0 53       	subi	r30, 0x30	; 48
    180c:	fa 4f       	sbci	r31, 0xFA	; 250
    180e:	20 81       	ld	r18, Z
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <_ZN13AltSoftSerial4peekEv+0x1c>
{
	uint8_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    1814:	2f ef       	ldi	r18, 0xFF	; 255
    1816:	3f ef       	ldi	r19, 0xFF	; 255
	return rx_buffer[tail];
}
    1818:	c9 01       	movw	r24, r18
    181a:	08 95       	ret

0000181c <_ZN13AltSoftSerial9availableEv>:

int AltSoftSerial::available(void)
{
	uint8_t head, tail;

	head = rx_buffer_head;
    181c:	50 91 cf 05 	lds	r21, 0x05CF
	tail = rx_buffer_tail;
    1820:	40 91 ce 05 	lds	r20, 0x05CE
    1824:	25 2f       	mov	r18, r21
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	84 2f       	mov	r24, r20
    182a:	90 e0       	ldi	r25, 0x00	; 0
	if (head >= tail) return head - tail;
    182c:	54 17       	cp	r21, r20
    182e:	10 f4       	brcc	.+4      	; 0x1834 <_ZN13AltSoftSerial9availableEv+0x18>
	return RX_BUFFER_SIZE + head - tail;
    1830:	20 5b       	subi	r18, 0xB0	; 176
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	28 1b       	sub	r18, r24
    1836:	39 0b       	sbc	r19, r25
}
    1838:	c9 01       	movw	r24, r18
    183a:	08 95       	ret

0000183c <_ZN13AltSoftSerial4initEm>:
#define INPUT_PULLUP INPUT
#endif

void AltSoftSerial::init(uint32_t cycles_per_bit)
{
	if (cycles_per_bit < 7085) {
    183c:	6d 3a       	cpi	r22, 0xAD	; 173
    183e:	2b e1       	ldi	r18, 0x1B	; 27
    1840:	72 07       	cpc	r23, r18
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	82 07       	cpc	r24, r18
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	92 07       	cpc	r25, r18
    184a:	30 f4       	brcc	.+12     	; 0x1858 <_ZN13AltSoftSerial4initEm+0x1c>
		CONFIG_TIMER_NOPRESCALE();
    184c:	10 92 73 00 	sts	0x0073, r1
    1850:	10 92 20 01 	sts	0x0120, r1
    1854:	21 e8       	ldi	r18, 0x81	; 129
    1856:	14 c0       	rjmp	.+40     	; 0x1880 <_ZN13AltSoftSerial4initEm+0x44>
	} else {
		cycles_per_bit /= 8;
    1858:	33 e0       	ldi	r19, 0x03	; 3
    185a:	96 95       	lsr	r25
    185c:	87 95       	ror	r24
    185e:	77 95       	ror	r23
    1860:	67 95       	ror	r22
    1862:	3a 95       	dec	r19
    1864:	d1 f7       	brne	.-12     	; 0x185a <_ZN13AltSoftSerial4initEm+0x1e>
		if (cycles_per_bit < 7085) {
    1866:	6d 3a       	cpi	r22, 0xAD	; 173
    1868:	2b e1       	ldi	r18, 0x1B	; 27
    186a:	72 07       	cpc	r23, r18
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	82 07       	cpc	r24, r18
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	92 07       	cpc	r25, r18
    1874:	c0 f5       	brcc	.+112    	; 0x18e6 <_ZN13AltSoftSerial4initEm+0xaa>
			CONFIG_TIMER_PRESCALE_8();
    1876:	10 92 73 00 	sts	0x0073, r1
    187a:	10 92 20 01 	sts	0x0120, r1
    187e:	22 e8       	ldi	r18, 0x82	; 130
    1880:	20 93 21 01 	sts	0x0121, r18
		} else {
			return; // minimum 283 baud at 16 MHz clock
		}
	}
	ticks_per_bit = cycles_per_bit;
    1884:	70 93 36 06 	sts	0x0636, r23
    1888:	60 93 35 06 	sts	0x0635, r22
	rx_stop_ticks = cycles_per_bit * 37 / 4;
    188c:	25 e2       	ldi	r18, 0x25	; 37
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <__mulsi3>
    1898:	22 e0       	ldi	r18, 0x02	; 2
    189a:	96 95       	lsr	r25
    189c:	87 95       	ror	r24
    189e:	77 95       	ror	r23
    18a0:	67 95       	ror	r22
    18a2:	2a 95       	dec	r18
    18a4:	d1 f7       	brne	.-12     	; 0x189a <_ZN13AltSoftSerial4initEm+0x5e>
    18a6:	70 93 38 06 	sts	0x0638, r23
    18aa:	60 93 37 06 	sts	0x0637, r22
	pinMode(INPUT_CAPTURE_PIN, INPUT_PULLUP);
    18ae:	80 e3       	ldi	r24, 0x30	; 48
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	0e 94 a3 2c 	call	0x5946	; 0x5946 <pinMode>
	digitalWrite(OUTPUT_COMPARE_A_PIN, HIGH);
    18b6:	8e e2       	ldi	r24, 0x2E	; 46
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	0e 94 c7 2c 	call	0x598e	; 0x598e <digitalWrite>
	pinMode(OUTPUT_COMPARE_A_PIN, OUTPUT);
    18be:	8e e2       	ldi	r24, 0x2E	; 46
    18c0:	61 e0       	ldi	r22, 0x01	; 1
    18c2:	0e 94 a3 2c 	call	0x5946	; 0x5946 <pinMode>
	rx_count = 0;
    18c6:	10 92 20 06 	sts	0x0620, r1
	rx_buffer_head = 0;
    18ca:	10 92 cf 05 	sts	0x05CF, r1
	rx_buffer_tail = 0;
    18ce:	10 92 ce 05 	sts	0x05CE, r1
	tx_state = 0;
    18d2:	10 92 39 06 	sts	0x0639, r1
	tx_buffer_head = 0;
    18d6:	10 92 3c 06 	sts	0x063C, r1
	tx_buffer_tail = 0;
    18da:	10 92 3d 06 	sts	0x063D, r1
	ENABLE_INT_INPUT_CAPTURE();
    18de:	80 e2       	ldi	r24, 0x20	; 32
    18e0:	8a bb       	out	0x1a, r24	; 26
    18e2:	80 93 73 00 	sts	0x0073, r24
    18e6:	08 95       	ret

000018e8 <_ZN13AltSoftSerial9writeByteEh>:

void AltSoftSerial::writeByte(uint8_t b)
{
	uint8_t intr_state, head;

	head = tx_buffer_head + 1;
    18e8:	90 91 3c 06 	lds	r25, 0x063C
    18ec:	9f 5f       	subi	r25, 0xFF	; 255
	if (head >= TX_BUFFER_SIZE) head = 0;
    18ee:	94 34       	cpi	r25, 0x44	; 68
    18f0:	08 f0       	brcs	.+2      	; 0x18f4 <_ZN13AltSoftSerial9writeByteEh+0xc>
    18f2:	90 e0       	ldi	r25, 0x00	; 0
	while (tx_buffer_tail == head) ; // wait until space in buffer
    18f4:	20 91 3d 06 	lds	r18, 0x063D
    18f8:	29 17       	cp	r18, r25
    18fa:	e1 f3       	breq	.-8      	; 0x18f4 <_ZN13AltSoftSerial9writeByteEh+0xc>
	intr_state = SREG;
    18fc:	2f b7       	in	r18, 0x3f	; 63
	cli();
    18fe:	f8 94       	cli
	if (tx_state) {
    1900:	30 91 39 06 	lds	r19, 0x0639
    1904:	33 23       	and	r19, r19
    1906:	41 f0       	breq	.+16     	; 0x1918 <_ZN13AltSoftSerial9writeByteEh+0x30>
		tx_buffer[head] = b;
    1908:	e9 2f       	mov	r30, r25
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	e2 5c       	subi	r30, 0xC2	; 194
    190e:	f9 4f       	sbci	r31, 0xF9	; 249
    1910:	80 83       	st	Z, r24
		tx_buffer_head = head;
    1912:	90 93 3c 06 	sts	0x063C, r25
    1916:	1d c0       	rjmp	.+58     	; 0x1952 <_ZN13AltSoftSerial9writeByteEh+0x6a>
	} else {
		tx_state = 1;
    1918:	91 e0       	ldi	r25, 0x01	; 1
    191a:	90 93 39 06 	sts	0x0639, r25
		tx_byte = b;
    191e:	80 93 3a 06 	sts	0x063A, r24
		tx_bit = 0;
    1922:	10 92 3b 06 	sts	0x063B, r1
		ENABLE_INT_COMPARE_A();
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	8a bb       	out	0x1a, r24	; 26
    192a:	80 91 73 00 	lds	r24, 0x0073
    192e:	82 60       	ori	r24, 0x02	; 2
    1930:	80 93 73 00 	sts	0x0073, r24
		CONFIG_MATCH_CLEAR();
    1934:	80 91 20 01 	lds	r24, 0x0120
    1938:	8f 73       	andi	r24, 0x3F	; 63
    193a:	80 68       	ori	r24, 0x80	; 128
    193c:	80 93 20 01 	sts	0x0120, r24
		SET_COMPARE_A(GET_TIMER_COUNT() + 16);
    1940:	80 91 24 01 	lds	r24, 0x0124
    1944:	90 91 25 01 	lds	r25, 0x0125
    1948:	40 96       	adiw	r24, 0x10	; 16
    194a:	90 93 29 01 	sts	0x0129, r25
    194e:	80 93 28 01 	sts	0x0128, r24
	}
	SREG = intr_state;
    1952:	2f bf       	out	0x3f, r18	; 63
}
    1954:	08 95       	ret

00001956 <_ZN13AltSoftSerial5writeEh>:
    1956:	86 2f       	mov	r24, r22
    1958:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN13AltSoftSerial9writeByteEh>
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	08 95       	ret

00001962 <__vector_47>:


ISR(COMPARE_A_INTERRUPT)
{
    1962:	1f 92       	push	r1
    1964:	0f 92       	push	r0
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	0f 92       	push	r0
    196a:	0b b6       	in	r0, 0x3b	; 59
    196c:	0f 92       	push	r0
    196e:	11 24       	eor	r1, r1
    1970:	2f 93       	push	r18
    1972:	3f 93       	push	r19
    1974:	4f 93       	push	r20
    1976:	5f 93       	push	r21
    1978:	6f 93       	push	r22
    197a:	7f 93       	push	r23
    197c:	8f 93       	push	r24
    197e:	9f 93       	push	r25
    1980:	ef 93       	push	r30
    1982:	ff 93       	push	r31
	uint8_t state, byte, bit, head, tail;
	uint16_t target;

	state = tx_state;
    1984:	40 91 39 06 	lds	r20, 0x0639
	byte = tx_byte;
    1988:	50 91 3a 06 	lds	r21, 0x063A
	target = GET_COMPARE_A();
    198c:	80 91 28 01 	lds	r24, 0x0128
    1990:	90 91 29 01 	lds	r25, 0x0129
	while (state < 9) {
		target += ticks_per_bit;
    1994:	20 91 35 06 	lds	r18, 0x0635
    1998:	30 91 36 06 	lds	r19, 0x0636
		bit = byte & 1;
		byte >>= 1;
		state++;
		if (bit != tx_bit) {
    199c:	70 91 3b 06 	lds	r23, 0x063B
	uint16_t target;

	state = tx_state;
	byte = tx_byte;
	target = GET_COMPARE_A();
	while (state < 9) {
    19a0:	1f c0       	rjmp	.+62     	; 0x19e0 <__vector_47+0x7e>
		target += ticks_per_bit;
    19a2:	82 0f       	add	r24, r18
    19a4:	93 1f       	adc	r25, r19
		bit = byte & 1;
    19a6:	65 2f       	mov	r22, r21
    19a8:	61 70       	andi	r22, 0x01	; 1
		byte >>= 1;
    19aa:	56 95       	lsr	r21
		state++;
    19ac:	4f 5f       	subi	r20, 0xFF	; 255
		if (bit != tx_bit) {
    19ae:	67 17       	cp	r22, r23
    19b0:	b9 f0       	breq	.+46     	; 0x19e0 <__vector_47+0x7e>
			if (bit) {
    19b2:	66 23       	and	r22, r22
    19b4:	21 f0       	breq	.+8      	; 0x19be <__vector_47+0x5c>
				CONFIG_MATCH_SET();
    19b6:	20 91 20 01 	lds	r18, 0x0120
    19ba:	20 6c       	ori	r18, 0xC0	; 192
    19bc:	04 c0       	rjmp	.+8      	; 0x19c6 <__vector_47+0x64>
			} else {
				CONFIG_MATCH_CLEAR();
    19be:	20 91 20 01 	lds	r18, 0x0120
    19c2:	2f 73       	andi	r18, 0x3F	; 63
    19c4:	20 68       	ori	r18, 0x80	; 128
    19c6:	20 93 20 01 	sts	0x0120, r18
			}
			SET_COMPARE_A(target);
    19ca:	90 93 29 01 	sts	0x0129, r25
    19ce:	80 93 28 01 	sts	0x0128, r24
			tx_bit = bit;
    19d2:	60 93 3b 06 	sts	0x063B, r22
			tx_byte = byte;
    19d6:	50 93 3a 06 	sts	0x063A, r21
			tx_state = state;
    19da:	40 93 39 06 	sts	0x0639, r20
			// TODO: how to detect timing_error?
			return;
    19de:	3f c0       	rjmp	.+126    	; 0x1a5e <__vector_47+0xfc>
	uint16_t target;

	state = tx_state;
	byte = tx_byte;
	target = GET_COMPARE_A();
	while (state < 9) {
    19e0:	49 30       	cpi	r20, 0x09	; 9
    19e2:	f8 f2       	brcs	.-66     	; 0x19a2 <__vector_47+0x40>
			tx_state = state;
			// TODO: how to detect timing_error?
			return;
		}
	}
	if (state == 9) {
    19e4:	49 30       	cpi	r20, 0x09	; 9
    19e6:	39 f4       	brne	.+14     	; 0x19f6 <__vector_47+0x94>
		tx_state = 10;
    19e8:	2a e0       	ldi	r18, 0x0A	; 10
    19ea:	20 93 39 06 	sts	0x0639, r18
		CONFIG_MATCH_SET();
    19ee:	20 91 20 01 	lds	r18, 0x0120
    19f2:	20 6c       	ori	r18, 0xC0	; 192
    19f4:	28 c0       	rjmp	.+80     	; 0x1a46 <__vector_47+0xe4>
		SET_COMPARE_A(target + ticks_per_bit);
		return;
	}
	head = tx_buffer_head;
    19f6:	20 91 3c 06 	lds	r18, 0x063C
	tail = tx_buffer_tail;
    19fa:	e0 91 3d 06 	lds	r30, 0x063D
	if (head == tail) {
    19fe:	2e 17       	cp	r18, r30
    1a00:	69 f4       	brne	.+26     	; 0x1a1c <__vector_47+0xba>
		tx_state = 0;
    1a02:	10 92 39 06 	sts	0x0639, r1
		CONFIG_MATCH_NORMAL();
    1a06:	80 91 20 01 	lds	r24, 0x0120
    1a0a:	8f 73       	andi	r24, 0x3F	; 63
    1a0c:	80 93 20 01 	sts	0x0120, r24
		DISABLE_INT_COMPARE_A();
    1a10:	80 91 73 00 	lds	r24, 0x0073
    1a14:	8d 7f       	andi	r24, 0xFD	; 253
    1a16:	80 93 73 00 	sts	0x0073, r24
    1a1a:	21 c0       	rjmp	.+66     	; 0x1a5e <__vector_47+0xfc>
	} else {
		tx_state = 1;
    1a1c:	21 e0       	ldi	r18, 0x01	; 1
    1a1e:	20 93 39 06 	sts	0x0639, r18
		if (++tail >= TX_BUFFER_SIZE) tail = 0;
    1a22:	ef 5f       	subi	r30, 0xFF	; 255
    1a24:	e4 34       	cpi	r30, 0x44	; 68
    1a26:	08 f0       	brcs	.+2      	; 0x1a2a <__vector_47+0xc8>
    1a28:	e0 e0       	ldi	r30, 0x00	; 0
		tx_buffer_tail = tail;
    1a2a:	e0 93 3d 06 	sts	0x063D, r30
		tx_byte = tx_buffer[tail];
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	e2 5c       	subi	r30, 0xC2	; 194
    1a32:	f9 4f       	sbci	r31, 0xF9	; 249
    1a34:	20 81       	ld	r18, Z
    1a36:	20 93 3a 06 	sts	0x063A, r18
		tx_bit = 0;
    1a3a:	10 92 3b 06 	sts	0x063B, r1
		CONFIG_MATCH_CLEAR();
    1a3e:	20 91 20 01 	lds	r18, 0x0120
    1a42:	2f 73       	andi	r18, 0x3F	; 63
    1a44:	20 68       	ori	r18, 0x80	; 128
    1a46:	20 93 20 01 	sts	0x0120, r18
		SET_COMPARE_A(target + ticks_per_bit);
    1a4a:	20 91 35 06 	lds	r18, 0x0635
    1a4e:	30 91 36 06 	lds	r19, 0x0636
    1a52:	28 0f       	add	r18, r24
    1a54:	39 1f       	adc	r19, r25
    1a56:	30 93 29 01 	sts	0x0129, r19
    1a5a:	20 93 28 01 	sts	0x0128, r18
		// TODO: how to detect timing_error?
	}
}
    1a5e:	ff 91       	pop	r31
    1a60:	ef 91       	pop	r30
    1a62:	9f 91       	pop	r25
    1a64:	8f 91       	pop	r24
    1a66:	7f 91       	pop	r23
    1a68:	6f 91       	pop	r22
    1a6a:	5f 91       	pop	r21
    1a6c:	4f 91       	pop	r20
    1a6e:	3f 91       	pop	r19
    1a70:	2f 91       	pop	r18
    1a72:	0f 90       	pop	r0
    1a74:	0b be       	out	0x3b, r0	; 59
    1a76:	0f 90       	pop	r0
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	0f 90       	pop	r0
    1a7c:	1f 90       	pop	r1
    1a7e:	18 95       	reti

00001a80 <_ZN13AltSoftSerial11flushOutputEv>:

void AltSoftSerial::flushOutput(void)
{
	while (tx_state) /* wait */ ;
    1a80:	80 91 39 06 	lds	r24, 0x0639
    1a84:	88 23       	and	r24, r24
    1a86:	e1 f7       	brne	.-8      	; 0x1a80 <_ZN13AltSoftSerial11flushOutputEv>
}
    1a88:	08 95       	ret

00001a8a <_ZN13AltSoftSerial5flushEv>:
    1a8a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <_ZN13AltSoftSerial11flushOutputEv>
    1a8e:	08 95       	ret

00001a90 <__vector_46>:
/****************************************/
/**            Reception               **/
/****************************************/

ISR(CAPTURE_INTERRUPT)
{
    1a90:	1f 92       	push	r1
    1a92:	0f 92       	push	r0
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	0f 92       	push	r0
    1a98:	0b b6       	in	r0, 0x3b	; 59
    1a9a:	0f 92       	push	r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	2f 93       	push	r18
    1aa0:	3f 93       	push	r19
    1aa2:	4f 93       	push	r20
    1aa4:	8f 93       	push	r24
    1aa6:	9f 93       	push	r25
    1aa8:	ef 93       	push	r30
    1aaa:	ff 93       	push	r31
	uint8_t count;
	uint16_t capture, current;

	capture = GET_INPUT_CAPTURE();
    1aac:	80 91 26 01 	lds	r24, 0x0126
    1ab0:	90 91 27 01 	lds	r25, 0x0127
	count = rx_count;
    1ab4:	40 91 20 06 	lds	r20, 0x0620
	if (count & 1) {
    1ab8:	e4 2f       	mov	r30, r20
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	40 ff       	sbrs	r20, 0
    1abe:	06 c0       	rjmp	.+12     	; 0x1acc <__vector_46+0x3c>
		CONFIG_CAPTURE_FALLING_EDGE();
    1ac0:	20 91 21 01 	lds	r18, 0x0121
    1ac4:	2f 7b       	andi	r18, 0xBF	; 191
    1ac6:	20 93 21 01 	sts	0x0121, r18
    1aca:	1d c0       	rjmp	.+58     	; 0x1b06 <__vector_46+0x76>
	} else {
		CONFIG_CAPTURE_RISING_EDGE();
    1acc:	20 91 21 01 	lds	r18, 0x0121
    1ad0:	20 64       	ori	r18, 0x40	; 64
    1ad2:	20 93 21 01 	sts	0x0121, r18
	}
	if (count == 0) {
    1ad6:	44 23       	and	r20, r20
    1ad8:	b1 f4       	brne	.+44     	; 0x1b06 <__vector_46+0x76>
		SET_COMPARE_B(capture + rx_stop_ticks);
    1ada:	20 91 37 06 	lds	r18, 0x0637
    1ade:	30 91 38 06 	lds	r19, 0x0638
    1ae2:	28 0f       	add	r18, r24
    1ae4:	39 1f       	adc	r19, r25
    1ae6:	30 93 2b 01 	sts	0x012B, r19
    1aea:	20 93 2a 01 	sts	0x012A, r18
		ENABLE_INT_COMPARE_B();
    1aee:	24 e0       	ldi	r18, 0x04	; 4
    1af0:	2a bb       	out	0x1a, r18	; 26
    1af2:	20 91 73 00 	lds	r18, 0x0073
    1af6:	24 60       	ori	r18, 0x04	; 4
    1af8:	20 93 73 00 	sts	0x0073, r18
		rx_event[0] = capture;
    1afc:	90 93 22 06 	sts	0x0622, r25
    1b00:	80 93 21 06 	sts	0x0621, r24
    1b04:	08 c0       	rjmp	.+16     	; 0x1b16 <__vector_46+0x86>
	} else if (count < MAX_RX_EVENTS) {
    1b06:	4a 30       	cpi	r20, 0x0A	; 10
    1b08:	30 f4       	brcc	.+12     	; 0x1b16 <__vector_46+0x86>
		rx_event[count] = capture;
    1b0a:	ee 0f       	add	r30, r30
    1b0c:	ff 1f       	adc	r31, r31
    1b0e:	ef 5d       	subi	r30, 0xDF	; 223
    1b10:	f9 4f       	sbci	r31, 0xF9	; 249
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	80 83       	st	Z, r24
	}
	rx_count = count + 1;
    1b16:	4f 5f       	subi	r20, 0xFF	; 255
    1b18:	40 93 20 06 	sts	0x0620, r20
	if (GET_TIMER_COUNT() - capture > ticks_per_bit) {
    1b1c:	20 91 24 01 	lds	r18, 0x0124
    1b20:	30 91 25 01 	lds	r19, 0x0125
    1b24:	28 1b       	sub	r18, r24
    1b26:	39 0b       	sbc	r19, r25
    1b28:	80 91 35 06 	lds	r24, 0x0635
    1b2c:	90 91 36 06 	lds	r25, 0x0636
    1b30:	82 17       	cp	r24, r18
    1b32:	93 07       	cpc	r25, r19
    1b34:	18 f4       	brcc	.+6      	; 0x1b3c <__vector_46+0xac>
		AltSoftSerial::timing_error = true;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	80 93 cd 05 	sts	0x05CD, r24
	}
}
    1b3c:	ff 91       	pop	r31
    1b3e:	ef 91       	pop	r30
    1b40:	9f 91       	pop	r25
    1b42:	8f 91       	pop	r24
    1b44:	4f 91       	pop	r20
    1b46:	3f 91       	pop	r19
    1b48:	2f 91       	pop	r18
    1b4a:	0f 90       	pop	r0
    1b4c:	0b be       	out	0x3b, r0	; 59
    1b4e:	0f 90       	pop	r0
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	0f 90       	pop	r0
    1b54:	1f 90       	pop	r1
    1b56:	18 95       	reti

00001b58 <__vector_48>:
	}
	return out;
}

ISR(COMPARE_B_INTERRUPT)
{
    1b58:	1f 92       	push	r1
    1b5a:	0f 92       	push	r0
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	0f 92       	push	r0
    1b60:	0b b6       	in	r0, 0x3b	; 59
    1b62:	0f 92       	push	r0
    1b64:	11 24       	eor	r1, r1
    1b66:	af 92       	push	r10
    1b68:	bf 92       	push	r11
    1b6a:	cf 92       	push	r12
    1b6c:	df 92       	push	r13
    1b6e:	ef 92       	push	r14
    1b70:	ff 92       	push	r15
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	2f 93       	push	r18
    1b78:	3f 93       	push	r19
    1b7a:	4f 93       	push	r20
    1b7c:	5f 93       	push	r21
    1b7e:	6f 93       	push	r22
    1b80:	7f 93       	push	r23
    1b82:	8f 93       	push	r24
    1b84:	9f 93       	push	r25
    1b86:	af 93       	push	r26
    1b88:	bf 93       	push	r27
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	ef 93       	push	r30
    1b90:	ff 93       	push	r31
	uint8_t head;

	DISABLE_INT_COMPARE_B();
    1b92:	80 91 73 00 	lds	r24, 0x0073
    1b96:	8b 7f       	andi	r24, 0xFB	; 251
    1b98:	80 93 73 00 	sts	0x0073, r24
	CONFIG_CAPTURE_FALLING_EDGE();
    1b9c:	80 91 21 01 	lds	r24, 0x0121
    1ba0:	8f 7b       	andi	r24, 0xBF	; 191
    1ba2:	80 93 21 01 	sts	0x0121, r24
	head = rx_buffer_head + 1;
    1ba6:	10 91 cf 05 	lds	r17, 0x05CF
    1baa:	1f 5f       	subi	r17, 0xFF	; 255
	if (head >= RX_BUFFER_SIZE) head = 0;
    1bac:	10 35       	cpi	r17, 0x50	; 80
    1bae:	08 f0       	brcs	.+2      	; 0x1bb2 <__vector_48+0x5a>
    1bb0:	10 e0       	ldi	r17, 0x00	; 0
	if (head != rx_buffer_tail) {
    1bb2:	80 91 ce 05 	lds	r24, 0x05CE
    1bb6:	18 17       	cp	r17, r24
    1bb8:	e9 f1       	breq	.+122    	; 0x1c34 <__vector_48+0xdc>
		rx_buffer[head] = analyze(rx_count);
    1bba:	c1 2f       	mov	r28, r17
    1bbc:	d0 e0       	ldi	r29, 0x00	; 0
    1bbe:	00 91 20 06 	lds	r16, 0x0620
    1bc2:	0b 30       	cpi	r16, 0x0B	; 11
    1bc4:	08 f0       	brcs	.+2      	; 0x1bc8 <__vector_48+0x70>
    1bc6:	0a e0       	ldi	r16, 0x0A	; 10
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
    1bc8:	60 91 21 06 	lds	r22, 0x0621
    1bcc:	70 91 22 06 	lds	r23, 0x0622
	target = ticks_per_bit + ticks_per_bit / 2;
    1bd0:	40 91 35 06 	lds	r20, 0x0635
    1bd4:	50 91 36 06 	lds	r21, 0x0636
    1bd8:	ca 01       	movw	r24, r20
    1bda:	96 95       	lsr	r25
    1bdc:	87 95       	ror	r24
    1bde:	84 0f       	add	r24, r20
    1be0:	95 1f       	adc	r25, r21

static inline uint8_t analyze(uint8_t count)
{
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
	uint16_t begin, tmp, target, now=0;
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
}

static inline uint8_t analyze(uint8_t count)
{
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
    1be6:	dd 24       	eor	r13, r13
    1be8:	ee 24       	eor	r14, r14
    1bea:	e3 94       	inc	r14
    1bec:	ff 24       	eor	r15, r15
    1bee:	fa 94       	dec	r15
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
    1bf0:	e3 e2       	ldi	r30, 0x23	; 35
    1bf2:	f6 e0       	ldi	r31, 0x06	; 6
		while (now >= target) {
			if (state == 0) out &= ~mask;
			mask <<= 1;
			target += ticks_per_bit;
		}
		state ^= 1;
    1bf4:	cc 24       	eor	r12, r12
    1bf6:	c3 94       	inc	r12
    1bf8:	15 c0       	rjmp	.+42     	; 0x1c24 <__vector_48+0xcc>

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
    1bfa:	a1 91       	ld	r26, Z+
    1bfc:	b1 91       	ld	r27, Z+
		now += tmp - begin;
    1bfe:	5d 01       	movw	r10, r26
    1c00:	a6 1a       	sub	r10, r22
    1c02:	b7 0a       	sbc	r11, r23
    1c04:	2a 0d       	add	r18, r10
    1c06:	3b 1d       	adc	r19, r11
    1c08:	08 c0       	rjmp	.+16     	; 0x1c1a <__vector_48+0xc2>
		begin = tmp;
		while (now >= target) {
			if (state == 0) out &= ~mask;
    1c0a:	dd 20       	and	r13, r13
    1c0c:	19 f4       	brne	.+6      	; 0x1c14 <__vector_48+0xbc>
    1c0e:	6e 2d       	mov	r22, r14
    1c10:	60 95       	com	r22
    1c12:	f6 22       	and	r15, r22
			mask <<= 1;
    1c14:	ee 0c       	add	r14, r14
			target += ticks_per_bit;
    1c16:	84 0f       	add	r24, r20
    1c18:	95 1f       	adc	r25, r21
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
		now += tmp - begin;
		begin = tmp;
		while (now >= target) {
    1c1a:	28 17       	cp	r18, r24
    1c1c:	39 07       	cpc	r19, r25
    1c1e:	a8 f7       	brcc	.-22     	; 0x1c0a <__vector_48+0xb2>
			if (state == 0) out &= ~mask;
			mask <<= 1;
			target += ticks_per_bit;
		}
		state ^= 1;
    1c20:	dc 24       	eor	r13, r12
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
		now += tmp - begin;
		begin = tmp;
    1c22:	bd 01       	movw	r22, r26
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
    1c24:	01 50       	subi	r16, 0x01	; 1
    1c26:	49 f7       	brne	.-46     	; 0x1bfa <__vector_48+0xa2>
	DISABLE_INT_COMPARE_B();
	CONFIG_CAPTURE_FALLING_EDGE();
	head = rx_buffer_head + 1;
	if (head >= RX_BUFFER_SIZE) head = 0;
	if (head != rx_buffer_tail) {
		rx_buffer[head] = analyze(rx_count);
    1c28:	fe 01       	movw	r30, r28
    1c2a:	e0 53       	subi	r30, 0x30	; 48
    1c2c:	fa 4f       	sbci	r31, 0xFA	; 250
    1c2e:	f0 82       	st	Z, r15
		rx_buffer_head = head;
    1c30:	10 93 cf 05 	sts	0x05CF, r17
	}
	rx_count = 0;
    1c34:	10 92 20 06 	sts	0x0620, r1
}
    1c38:	ff 91       	pop	r31
    1c3a:	ef 91       	pop	r30
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	bf 91       	pop	r27
    1c42:	af 91       	pop	r26
    1c44:	9f 91       	pop	r25
    1c46:	8f 91       	pop	r24
    1c48:	7f 91       	pop	r23
    1c4a:	6f 91       	pop	r22
    1c4c:	5f 91       	pop	r21
    1c4e:	4f 91       	pop	r20
    1c50:	3f 91       	pop	r19
    1c52:	2f 91       	pop	r18
    1c54:	1f 91       	pop	r17
    1c56:	0f 91       	pop	r16
    1c58:	ff 90       	pop	r15
    1c5a:	ef 90       	pop	r14
    1c5c:	df 90       	pop	r13
    1c5e:	cf 90       	pop	r12
    1c60:	bf 90       	pop	r11
    1c62:	af 90       	pop	r10
    1c64:	0f 90       	pop	r0
    1c66:	0b be       	out	0x3b, r0	; 59
    1c68:	0f 90       	pop	r0
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	0f 90       	pop	r0
    1c6e:	1f 90       	pop	r1
    1c70:	18 95       	reti

00001c72 <_ZN13AltSoftSerial10flushInputEv>:
	return RX_BUFFER_SIZE + head - tail;
}

void AltSoftSerial::flushInput(void)
{
	rx_buffer_head = rx_buffer_tail;
    1c72:	80 91 ce 05 	lds	r24, 0x05CE
    1c76:	80 93 cf 05 	sts	0x05CF, r24
}
    1c7a:	08 95       	ret

00001c7c <_ZN13AltSoftSerial3endEv>:
	tx_buffer_tail = 0;
	ENABLE_INT_INPUT_CAPTURE();
}

void AltSoftSerial::end(void)
{
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
	DISABLE_INT_COMPARE_B();
    1c80:	c3 e7       	ldi	r28, 0x73	; 115
    1c82:	d0 e0       	ldi	r29, 0x00	; 0
    1c84:	88 81       	ld	r24, Y
    1c86:	8b 7f       	andi	r24, 0xFB	; 251
    1c88:	88 83       	st	Y, r24
	DISABLE_INT_INPUT_CAPTURE();
    1c8a:	88 81       	ld	r24, Y
    1c8c:	8f 7d       	andi	r24, 0xDF	; 223
    1c8e:	88 83       	st	Y, r24
	flushInput();
    1c90:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_ZN13AltSoftSerial10flushInputEv>
	flushOutput();
    1c94:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <_ZN13AltSoftSerial11flushOutputEv>
	DISABLE_INT_COMPARE_A();
    1c98:	88 81       	ld	r24, Y
    1c9a:	8d 7f       	andi	r24, 0xFD	; 253
    1c9c:	88 83       	st	Y, r24
	// TODO: restore timer to original settings?
}
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	08 95       	ret

00001ca4 <_ZN5AlarmD1Ev>:
	pinMode(alarmPin1, OUTPUT);
	pinMode(alarmPin2, OUTPUT);
	pinMode(alarmPin3, OUTPUT);
}

Alarm::~Alarm() {
    1ca4:	2d e1       	ldi	r18, 0x1D	; 29
    1ca6:	35 e0       	ldi	r19, 0x05	; 5
    1ca8:	fc 01       	movw	r30, r24
    1caa:	31 83       	std	Z+1, r19	; 0x01
    1cac:	20 83       	st	Z, r18

}
    1cae:	08 95       	ret

00001cb0 <_ZN5AlarmD0Ev>:
	pinMode(alarmPin1, OUTPUT);
	pinMode(alarmPin2, OUTPUT);
	pinMode(alarmPin3, OUTPUT);
}

Alarm::~Alarm() {
    1cb0:	2d e1       	ldi	r18, 0x1D	; 29
    1cb2:	35 e0       	ldi	r19, 0x05	; 5
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	31 83       	std	Z+1, r19	; 0x01
    1cb8:	20 83       	st	Z, r18

}
    1cba:	0e 94 4e 2b 	call	0x569c	; 0x569c <_ZdlPv>
    1cbe:	08 95       	ret

00001cc0 <_ZN5AlarmC1EP14FreeBoardModel>:
 *      Author: robert
 */

#include "Alarm.h"

Alarm::Alarm(FreeBoardModel* model) {
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	2d e1       	ldi	r18, 0x1D	; 29
    1cc6:	35 e0       	ldi	r19, 0x05	; 5
    1cc8:	31 83       	std	Z+1, r19	; 0x01
    1cca:	20 83       	st	Z, r18
	this->model=model;
    1ccc:	73 83       	std	Z+3, r23	; 0x03
    1cce:	62 83       	std	Z+2, r22	; 0x02
	alarmBeepState=false;
    1cd0:	14 82       	std	Z+4, r1	; 0x04
	model->setAlarmLast(0);
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	ba 01       	movw	r22, r20
    1cd8:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <_ZN14FreeBoardModel12setAlarmLastEm>
	pinMode(alarmPin0, OUTPUT);
    1cdc:	86 e1       	ldi	r24, 0x16	; 22
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	0e 94 a3 2c 	call	0x5946	; 0x5946 <pinMode>
	pinMode(alarmPin1, OUTPUT);
    1ce4:	87 e1       	ldi	r24, 0x17	; 23
    1ce6:	61 e0       	ldi	r22, 0x01	; 1
    1ce8:	0e 94 a3 2c 	call	0x5946	; 0x5946 <pinMode>
	pinMode(alarmPin2, OUTPUT);
    1cec:	88 e1       	ldi	r24, 0x18	; 24
    1cee:	61 e0       	ldi	r22, 0x01	; 1
    1cf0:	0e 94 a3 2c 	call	0x5946	; 0x5946 <pinMode>
	pinMode(alarmPin3, OUTPUT);
    1cf4:	89 e1       	ldi	r24, 0x19	; 25
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
    1cf8:	0e 94 a3 2c 	call	0x5946	; 0x5946 <pinMode>
}
    1cfc:	08 95       	ret

00001cfe <_ZN5Alarm14alarmTriggeredEv>:

Alarm::~Alarm() {

}

bool Alarm::alarmTriggered() {
    1cfe:	ef 92       	push	r14
    1d00:	ff 92       	push	r15
    1d02:	0f 93       	push	r16
    1d04:	1f 93       	push	r17
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	ec 01       	movw	r28, r24
	return model->isAlarmTriggered() && model->getAlarmSnooze() < millis() ;
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d10:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_ZNK14FreeBoardModel16isAlarmTriggeredEv>
    1d14:	88 23       	and	r24, r24
    1d16:	71 f0       	breq	.+28     	; 0x1d34 <_ZN5Alarm14alarmTriggeredEv+0x36>
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1c:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZNK14FreeBoardModel14getAlarmSnoozeEv>
    1d20:	7b 01       	movw	r14, r22
    1d22:	8c 01       	movw	r16, r24
    1d24:	0e 94 99 2b 	call	0x5732	; 0x5732 <millis>

Alarm::~Alarm() {

}

bool Alarm::alarmTriggered() {
    1d28:	21 e0       	ldi	r18, 0x01	; 1
    1d2a:	e6 16       	cp	r14, r22
    1d2c:	f7 06       	cpc	r15, r23
    1d2e:	08 07       	cpc	r16, r24
    1d30:	19 07       	cpc	r17, r25
    1d32:	08 f0       	brcs	.+2      	; 0x1d36 <_ZN5Alarm14alarmTriggeredEv+0x38>
	return model->isAlarmTriggered() && model->getAlarmSnooze() < millis() ;
    1d34:	20 e0       	ldi	r18, 0x00	; 0
}
    1d36:	82 2f       	mov	r24, r18
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	1f 91       	pop	r17
    1d3e:	0f 91       	pop	r16
    1d40:	ff 90       	pop	r15
    1d42:	ef 90       	pop	r14
    1d44:	08 95       	ret

00001d46 <_ZN5Alarm11checkAlarmsEv>:


/* Take action if alarms are triggered*/
void Alarm::checkAlarms() {
    1d46:	ef 92       	push	r14
    1d48:	ff 92       	push	r15
    1d4a:	0f 93       	push	r16
    1d4c:	1f 93       	push	r17
    1d4e:	cf 93       	push	r28
    1d50:	df 93       	push	r29
    1d52:	ec 01       	movw	r28, r24
	if (alarmTriggered()) {
    1d54:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN5Alarm14alarmTriggeredEv>
    1d58:	88 23       	and	r24, r24
    1d5a:	a1 f1       	breq	.+104    	; 0x1dc4 <_ZN5Alarm11checkAlarmsEv+0x7e>
		//alarm beeps on off on off
		//once in the alarm state, hitting any button will give a 5 minute respite from the beeping, eg snooze
		if (millis() - model->getAlarmLast() > 1000) {
    1d5c:	0e 94 99 2b 	call	0x5732	; 0x5732 <millis>
    1d60:	7b 01       	movw	r14, r22
    1d62:	8c 01       	movw	r16, r24
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	9b 81       	ldd	r25, Y+3	; 0x03
    1d68:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <_ZNK14FreeBoardModel12getAlarmLastEv>
    1d6c:	e6 1a       	sub	r14, r22
    1d6e:	f7 0a       	sbc	r15, r23
    1d70:	08 0b       	sbc	r16, r24
    1d72:	19 0b       	sbc	r17, r25
    1d74:	89 ee       	ldi	r24, 0xE9	; 233
    1d76:	e8 16       	cp	r14, r24
    1d78:	83 e0       	ldi	r24, 0x03	; 3
    1d7a:	f8 06       	cpc	r15, r24
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	08 07       	cpc	r16, r24
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	18 07       	cpc	r17, r24
    1d84:	78 f1       	brcs	.+94     	; 0x1de4 <_ZN5Alarm11checkAlarmsEv+0x9e>
			digitalWrite(alarmPin0, alarmBeepState);
    1d86:	86 e1       	ldi	r24, 0x16	; 22
    1d88:	6c 81       	ldd	r22, Y+4	; 0x04
    1d8a:	0e 94 c7 2c 	call	0x598e	; 0x598e <digitalWrite>
			digitalWrite(alarmPin1, alarmBeepState);
    1d8e:	87 e1       	ldi	r24, 0x17	; 23
    1d90:	6c 81       	ldd	r22, Y+4	; 0x04
    1d92:	0e 94 c7 2c 	call	0x598e	; 0x598e <digitalWrite>
			digitalWrite(alarmPin2, alarmBeepState);
    1d96:	88 e1       	ldi	r24, 0x18	; 24
    1d98:	6c 81       	ldd	r22, Y+4	; 0x04
    1d9a:	0e 94 c7 2c 	call	0x598e	; 0x598e <digitalWrite>
			digitalWrite(alarmPin3, alarmBeepState);
    1d9e:	89 e1       	ldi	r24, 0x19	; 25
    1da0:	6c 81       	ldd	r22, Y+4	; 0x04
    1da2:	0e 94 c7 2c 	call	0x598e	; 0x598e <digitalWrite>
			alarmBeepState = !alarmBeepState;
    1da6:	8c 81       	ldd	r24, Y+4	; 0x04
    1da8:	91 e0       	ldi	r25, 0x01	; 1
    1daa:	89 27       	eor	r24, r25
    1dac:	8c 83       	std	Y+4, r24	; 0x04
			model->setAlarmLast(millis());
    1dae:	0a 80       	ldd	r0, Y+2	; 0x02
    1db0:	db 81       	ldd	r29, Y+3	; 0x03
    1db2:	c0 2d       	mov	r28, r0
    1db4:	0e 94 99 2b 	call	0x5732	; 0x5732 <millis>
    1db8:	ab 01       	movw	r20, r22
    1dba:	bc 01       	movw	r22, r24
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <_ZN14FreeBoardModel12setAlarmLastEm>
    1dc2:	10 c0       	rjmp	.+32     	; 0x1de4 <_ZN5Alarm11checkAlarmsEv+0x9e>
			//model->setAlarmSnooze(0); //5 minute alarm snooze
		}
	} else {
		//no alarm
		digitalWrite(alarmPin0, LOW);
    1dc4:	86 e1       	ldi	r24, 0x16	; 22
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	0e 94 c7 2c 	call	0x598e	; 0x598e <digitalWrite>
		digitalWrite(alarmPin1, LOW);
    1dcc:	87 e1       	ldi	r24, 0x17	; 23
    1dce:	60 e0       	ldi	r22, 0x00	; 0
    1dd0:	0e 94 c7 2c 	call	0x598e	; 0x598e <digitalWrite>
		digitalWrite(alarmPin2, LOW);
    1dd4:	88 e1       	ldi	r24, 0x18	; 24
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	0e 94 c7 2c 	call	0x598e	; 0x598e <digitalWrite>
		digitalWrite(alarmPin3, LOW);
    1ddc:	89 e1       	ldi	r24, 0x19	; 25
    1dde:	60 e0       	ldi	r22, 0x00	; 0
    1de0:	0e 94 c7 2c 	call	0x598e	; 0x598e <digitalWrite>
	}
}
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	1f 91       	pop	r17
    1dea:	0f 91       	pop	r16
    1dec:	ff 90       	pop	r15
    1dee:	ef 90       	pop	r14
    1df0:	08 95       	ret

00001df2 <_ZN5Alarm14checkWindAlarmEv>:

void Alarm::checkWindAlarm(){
    1df2:	0f 93       	push	r16
    1df4:	1f 93       	push	r17
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	ec 01       	movw	r28, r24
	//check alarm val
		if (model->isWindAlarmOn() && model->getWindAlarmSpeed() > 0
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1e00:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZNK14FreeBoardModel13isWindAlarmOnEv>
    1e04:	88 23       	and	r24, r24
    1e06:	b9 f0       	breq	.+46     	; 0x1e36 <_ZN5Alarm14checkWindAlarmEv+0x44>
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0c:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <_ZNK14FreeBoardModel17getWindAlarmSpeedEv>
    1e10:	18 16       	cp	r1, r24
    1e12:	19 06       	cpc	r1, r25
    1e14:	84 f4       	brge	.+32     	; 0x1e36 <_ZN5Alarm14checkWindAlarmEv+0x44>
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	9b 81       	ldd	r25, Y+3	; 0x03
    1e1a:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <_ZNK14FreeBoardModel14getWindAverageEv>
    1e1e:	8c 01       	movw	r16, r24
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	9b 81       	ldd	r25, Y+3	; 0x03
    1e24:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <_ZNK14FreeBoardModel17getWindAlarmSpeedEv>
	}
}

void Alarm::checkWindAlarm(){
	//check alarm val
		if (model->isWindAlarmOn() && model->getWindAlarmSpeed() > 0
    1e28:	80 17       	cp	r24, r16
    1e2a:	91 07       	cpc	r25, r17
    1e2c:	24 f4       	brge	.+8      	; 0x1e36 <_ZN5Alarm14checkWindAlarmEv+0x44>
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
			//TODO: Alarm snooze, better handling of this
			//setSnoozeAlarm(0);
			model->setWindAlarmTriggered(true);
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	9b 81       	ldd	r25, Y+3	; 0x03
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	03 c0       	rjmp	.+6      	; 0x1e3c <_ZN5Alarm14checkWindAlarmEv+0x4a>
		} else {
			model->setWindAlarmTriggered(false);
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <_ZN14FreeBoardModel21setWindAlarmTriggeredEb>
		}
}
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	08 95       	ret

00001e4a <_ZN6AnchorD1Ev>:

	this->model=model;
	resetAnchorBox(model->getAnchorLat(), model->getAnchorLon());
}

Anchor::~Anchor(){
    1e4a:	25 e2       	ldi	r18, 0x25	; 37
    1e4c:	35 e0       	ldi	r19, 0x05	; 5
    1e4e:	fc 01       	movw	r30, r24
    1e50:	31 83       	std	Z+1, r19	; 0x01
    1e52:	20 83       	st	Z, r18

}
    1e54:	08 95       	ret

00001e56 <_ZN6AnchorD0Ev>:

	this->model=model;
	resetAnchorBox(model->getAnchorLat(), model->getAnchorLon());
}

Anchor::~Anchor(){
    1e56:	25 e2       	ldi	r18, 0x25	; 37
    1e58:	35 e0       	ldi	r19, 0x05	; 5
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	31 83       	std	Z+1, r19	; 0x01
    1e5e:	20 83       	st	Z, r18

}
    1e60:	0e 94 4e 2b 	call	0x569c	; 0x569c <_ZdlPv>
    1e64:	08 95       	ret

00001e66 <_ZN6Anchor15updateAnchorBoxEff>:


/* Adjust the size of the anchor box. Will not go smaller than MINMTRS */
void Anchor::updateAnchorBox(float laty, float lonx) {
    1e66:	2f 92       	push	r2
    1e68:	3f 92       	push	r3
    1e6a:	4f 92       	push	r4
    1e6c:	5f 92       	push	r5
    1e6e:	6f 92       	push	r6
    1e70:	7f 92       	push	r7
    1e72:	8f 92       	push	r8
    1e74:	9f 92       	push	r9
    1e76:	af 92       	push	r10
    1e78:	bf 92       	push	r11
    1e7a:	cf 92       	push	r12
    1e7c:	df 92       	push	r13
    1e7e:	ef 92       	push	r14
    1e80:	ff 92       	push	r15
    1e82:	0f 93       	push	r16
    1e84:	1f 93       	push	r17
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <_ZN6Anchor15updateAnchorBoxEff+0x26>
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <_ZN6Anchor15updateAnchorBoxEff+0x28>
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <_ZN6Anchor15updateAnchorBoxEff+0x2a>
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	8d 83       	std	Y+5, r24	; 0x05
    1e98:	5a 01       	movw	r10, r20
    1e9a:	6b 01       	movw	r12, r22
    1e9c:	38 01       	movw	r6, r16
    1e9e:	49 01       	movw	r8, r18
	//TODO: error testing around 0, 90, 180deg

	float n = laty + model->getAnchorRadiusDeg();
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	12 96       	adiw	r26, 0x02	; 2
    1ea4:	8d 91       	ld	r24, X+
    1ea6:	9c 91       	ld	r25, X
    1ea8:	13 97       	sbiw	r26, 0x03	; 3
    1eaa:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_ZNK14FreeBoardModel18getAnchorRadiusDegEv>
    1eae:	9b 01       	movw	r18, r22
    1eb0:	ac 01       	movw	r20, r24
    1eb2:	c6 01       	movw	r24, r12
    1eb4:	b5 01       	movw	r22, r10
    1eb6:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    1eba:	e6 2e       	mov	r14, r22
    1ebc:	17 2f       	mov	r17, r23
    1ebe:	08 2f       	mov	r16, r24
    1ec0:	f9 2e       	mov	r15, r25
	float s = laty - model->getAnchorRadiusDeg();
    1ec2:	ed 81       	ldd	r30, Y+5	; 0x05
    1ec4:	fe 81       	ldd	r31, Y+6	; 0x06
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_ZNK14FreeBoardModel18getAnchorRadiusDegEv>
    1ece:	9b 01       	movw	r18, r22
    1ed0:	ac 01       	movw	r20, r24
    1ed2:	c6 01       	movw	r24, r12
    1ed4:	b5 01       	movw	r22, r10
    1ed6:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
    1eda:	56 2e       	mov	r5, r22
    1edc:	47 2e       	mov	r4, r23
    1ede:	38 2e       	mov	r3, r24
    1ee0:	29 2e       	mov	r2, r25
	float e = lonx + model->getAnchorRadiusDeg();
    1ee2:	ad 81       	ldd	r26, Y+5	; 0x05
    1ee4:	be 81       	ldd	r27, Y+6	; 0x06
    1ee6:	12 96       	adiw	r26, 0x02	; 2
    1ee8:	8d 91       	ld	r24, X+
    1eea:	9c 91       	ld	r25, X
    1eec:	13 97       	sbiw	r26, 0x03	; 3
    1eee:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_ZNK14FreeBoardModel18getAnchorRadiusDegEv>
    1ef2:	9b 01       	movw	r18, r22
    1ef4:	ac 01       	movw	r20, r24
    1ef6:	c4 01       	movw	r24, r8
    1ef8:	b3 01       	movw	r22, r6
    1efa:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    1efe:	69 83       	std	Y+1, r22	; 0x01
    1f00:	7a 83       	std	Y+2, r23	; 0x02
    1f02:	8b 83       	std	Y+3, r24	; 0x03
    1f04:	9c 83       	std	Y+4, r25	; 0x04
	float w = lonx - model->getAnchorRadiusDeg();
    1f06:	ed 81       	ldd	r30, Y+5	; 0x05
    1f08:	fe 81       	ldd	r31, Y+6	; 0x06
    1f0a:	82 81       	ldd	r24, Z+2	; 0x02
    1f0c:	93 81       	ldd	r25, Z+3	; 0x03
    1f0e:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_ZNK14FreeBoardModel18getAnchorRadiusDegEv>
    1f12:	9b 01       	movw	r18, r22
    1f14:	ac 01       	movw	r20, r24
    1f16:	c4 01       	movw	r24, r8
    1f18:	b3 01       	movw	r22, r6
    1f1a:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
    1f1e:	96 2e       	mov	r9, r22
    1f20:	67 2e       	mov	r6, r23
    1f22:	88 2e       	mov	r8, r24
    1f24:	79 2e       	mov	r7, r25
	//shrink anchor box if we can
	if ((n - MINMTRS) > model->getAnchorS() && n < model->getAnchorN())
    1f26:	ad 81       	ldd	r26, Y+5	; 0x05
    1f28:	be 81       	ldd	r27, Y+6	; 0x06
    1f2a:	12 96       	adiw	r26, 0x02	; 2
    1f2c:	8d 91       	ld	r24, X+
    1f2e:	9c 91       	ld	r25, X
    1f30:	13 97       	sbiw	r26, 0x03	; 3
    1f32:	0e 94 79 15 	call	0x2af2	; 0x2af2 <_ZNK14FreeBoardModel10getAnchorSEv>
    1f36:	5b 01       	movw	r10, r22
    1f38:	6c 01       	movw	r12, r24
    1f3a:	6e 2d       	mov	r22, r14
    1f3c:	71 2f       	mov	r23, r17
    1f3e:	80 2f       	mov	r24, r16
    1f40:	9f 2d       	mov	r25, r15
    1f42:	24 e8       	ldi	r18, 0x84	; 132
    1f44:	3a eb       	ldi	r19, 0xBA	; 186
    1f46:	4c e3       	ldi	r20, 0x3C	; 60
    1f48:	58 e3       	ldi	r21, 0x38	; 56
    1f4a:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
    1f4e:	a6 01       	movw	r20, r12
    1f50:	95 01       	movw	r18, r10
    1f52:	0e 94 17 30 	call	0x602e	; 0x602e <__gesf2>
    1f56:	18 16       	cp	r1, r24
    1f58:	e4 f4       	brge	.+56     	; 0x1f92 <_ZN6Anchor15updateAnchorBoxEff+0x12c>
    1f5a:	ed 81       	ldd	r30, Y+5	; 0x05
    1f5c:	fe 81       	ldd	r31, Y+6	; 0x06
    1f5e:	82 81       	ldd	r24, Z+2	; 0x02
    1f60:	93 81       	ldd	r25, Z+3	; 0x03
    1f62:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <_ZNK14FreeBoardModel10getAnchorNEv>
    1f66:	9b 01       	movw	r18, r22
    1f68:	ac 01       	movw	r20, r24
    1f6a:	6e 2d       	mov	r22, r14
    1f6c:	71 2f       	mov	r23, r17
    1f6e:	80 2f       	mov	r24, r16
    1f70:	9f 2d       	mov	r25, r15
    1f72:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__cmpsf2>
    1f76:	87 ff       	sbrs	r24, 7
    1f78:	0c c0       	rjmp	.+24     	; 0x1f92 <_ZN6Anchor15updateAnchorBoxEff+0x12c>
		model->setAnchorN(n);
    1f7a:	ad 81       	ldd	r26, Y+5	; 0x05
    1f7c:	be 81       	ldd	r27, Y+6	; 0x06
    1f7e:	12 96       	adiw	r26, 0x02	; 2
    1f80:	8d 91       	ld	r24, X+
    1f82:	9c 91       	ld	r25, X
    1f84:	13 97       	sbiw	r26, 0x03	; 3
    1f86:	4e 2d       	mov	r20, r14
    1f88:	51 2f       	mov	r21, r17
    1f8a:	60 2f       	mov	r22, r16
    1f8c:	7f 2d       	mov	r23, r15
    1f8e:	0e 94 30 16 	call	0x2c60	; 0x2c60 <_ZN14FreeBoardModel10setAnchorNEf>
	if ((s + MINMTRS) < model->getAnchorN() && s > model->getAnchorS())
    1f92:	ed 81       	ldd	r30, Y+5	; 0x05
    1f94:	fe 81       	ldd	r31, Y+6	; 0x06
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <_ZNK14FreeBoardModel10getAnchorNEv>
    1f9e:	7b 01       	movw	r14, r22
    1fa0:	8c 01       	movw	r16, r24
    1fa2:	a2 01       	movw	r20, r4
    1fa4:	91 01       	movw	r18, r2
    1fa6:	65 2f       	mov	r22, r21
    1fa8:	74 2d       	mov	r23, r4
    1faa:	83 2f       	mov	r24, r19
    1fac:	92 2d       	mov	r25, r2
    1fae:	24 e8       	ldi	r18, 0x84	; 132
    1fb0:	3a eb       	ldi	r19, 0xBA	; 186
    1fb2:	4c e3       	ldi	r20, 0x3C	; 60
    1fb4:	58 e3       	ldi	r21, 0x38	; 56
    1fb6:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    1fba:	a8 01       	movw	r20, r16
    1fbc:	97 01       	movw	r18, r14
    1fbe:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__cmpsf2>
    1fc2:	87 ff       	sbrs	r24, 7
    1fc4:	20 c0       	rjmp	.+64     	; 0x2006 <_ZN6Anchor15updateAnchorBoxEff+0x1a0>
    1fc6:	ad 81       	ldd	r26, Y+5	; 0x05
    1fc8:	be 81       	ldd	r27, Y+6	; 0x06
    1fca:	12 96       	adiw	r26, 0x02	; 2
    1fcc:	8d 91       	ld	r24, X+
    1fce:	9c 91       	ld	r25, X
    1fd0:	13 97       	sbiw	r26, 0x03	; 3
    1fd2:	0e 94 79 15 	call	0x2af2	; 0x2af2 <_ZNK14FreeBoardModel10getAnchorSEv>
    1fd6:	9b 01       	movw	r18, r22
    1fd8:	ac 01       	movw	r20, r24
    1fda:	d2 01       	movw	r26, r4
    1fdc:	f1 01       	movw	r30, r2
    1fde:	6b 2f       	mov	r22, r27
    1fe0:	74 2d       	mov	r23, r4
    1fe2:	8f 2f       	mov	r24, r31
    1fe4:	92 2d       	mov	r25, r2
    1fe6:	0e 94 17 30 	call	0x602e	; 0x602e <__gesf2>
    1fea:	18 16       	cp	r1, r24
    1fec:	64 f4       	brge	.+24     	; 0x2006 <_ZN6Anchor15updateAnchorBoxEff+0x1a0>
		model->setAnchorS(s);
    1fee:	ed 81       	ldd	r30, Y+5	; 0x05
    1ff0:	fe 81       	ldd	r31, Y+6	; 0x06
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	f2 01       	movw	r30, r4
    1ff8:	91 01       	movw	r18, r2
    1ffa:	4f 2f       	mov	r20, r31
    1ffc:	54 2d       	mov	r21, r4
    1ffe:	63 2f       	mov	r22, r19
    2000:	72 2d       	mov	r23, r2
    2002:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <_ZN14FreeBoardModel10setAnchorSEf>
	if ((e - MINMTRS) > model->getAnchorW() && e < model->getAnchorE())
    2006:	ad 81       	ldd	r26, Y+5	; 0x05
    2008:	be 81       	ldd	r27, Y+6	; 0x06
    200a:	12 96       	adiw	r26, 0x02	; 2
    200c:	8d 91       	ld	r24, X+
    200e:	9c 91       	ld	r25, X
    2010:	13 97       	sbiw	r26, 0x03	; 3
    2012:	0e 94 83 15 	call	0x2b06	; 0x2b06 <_ZNK14FreeBoardModel10getAnchorWEv>
    2016:	7b 01       	movw	r14, r22
    2018:	8c 01       	movw	r16, r24
    201a:	59 81       	ldd	r21, Y+1	; 0x01
    201c:	4a 81       	ldd	r20, Y+2	; 0x02
    201e:	3b 81       	ldd	r19, Y+3	; 0x03
    2020:	2c 81       	ldd	r18, Y+4	; 0x04
    2022:	65 2f       	mov	r22, r21
    2024:	74 2f       	mov	r23, r20
    2026:	83 2f       	mov	r24, r19
    2028:	92 2f       	mov	r25, r18
    202a:	24 e8       	ldi	r18, 0x84	; 132
    202c:	3a eb       	ldi	r19, 0xBA	; 186
    202e:	4c e3       	ldi	r20, 0x3C	; 60
    2030:	58 e3       	ldi	r21, 0x38	; 56
    2032:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
    2036:	a8 01       	movw	r20, r16
    2038:	97 01       	movw	r18, r14
    203a:	0e 94 17 30 	call	0x602e	; 0x602e <__gesf2>
    203e:	18 16       	cp	r1, r24
    2040:	1c f5       	brge	.+70     	; 0x2088 <_ZN6Anchor15updateAnchorBoxEff+0x222>
    2042:	ed 81       	ldd	r30, Y+5	; 0x05
    2044:	fe 81       	ldd	r31, Y+6	; 0x06
    2046:	82 81       	ldd	r24, Z+2	; 0x02
    2048:	93 81       	ldd	r25, Z+3	; 0x03
    204a:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZNK14FreeBoardModel10getAnchorEEv>
    204e:	9b 01       	movw	r18, r22
    2050:	ac 01       	movw	r20, r24
    2052:	b9 81       	ldd	r27, Y+1	; 0x01
    2054:	aa 81       	ldd	r26, Y+2	; 0x02
    2056:	1b 81       	ldd	r17, Y+3	; 0x03
    2058:	0c 81       	ldd	r16, Y+4	; 0x04
    205a:	6b 2f       	mov	r22, r27
    205c:	7a 2f       	mov	r23, r26
    205e:	81 2f       	mov	r24, r17
    2060:	90 2f       	mov	r25, r16
    2062:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__cmpsf2>
    2066:	87 ff       	sbrs	r24, 7
    2068:	0f c0       	rjmp	.+30     	; 0x2088 <_ZN6Anchor15updateAnchorBoxEff+0x222>
		model->setAnchorE(e);
    206a:	ad 81       	ldd	r26, Y+5	; 0x05
    206c:	be 81       	ldd	r27, Y+6	; 0x06
    206e:	12 96       	adiw	r26, 0x02	; 2
    2070:	8d 91       	ld	r24, X+
    2072:	9c 91       	ld	r25, X
    2074:	13 97       	sbiw	r26, 0x03	; 3
    2076:	f9 81       	ldd	r31, Y+1	; 0x01
    2078:	ea 81       	ldd	r30, Y+2	; 0x02
    207a:	98 01       	movw	r18, r16
    207c:	4f 2f       	mov	r20, r31
    207e:	5e 2f       	mov	r21, r30
    2080:	63 2f       	mov	r22, r19
    2082:	72 2f       	mov	r23, r18
    2084:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN14FreeBoardModel10setAnchorEEf>
	if ((w + MINMTRS) < model->getAnchorE() && w > model->getAnchorW())
    2088:	ed 81       	ldd	r30, Y+5	; 0x05
    208a:	fe 81       	ldd	r31, Y+6	; 0x06
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZNK14FreeBoardModel10getAnchorEEv>
    2094:	7b 01       	movw	r14, r22
    2096:	8c 01       	movw	r16, r24
    2098:	69 2d       	mov	r22, r9
    209a:	76 2d       	mov	r23, r6
    209c:	88 2d       	mov	r24, r8
    209e:	97 2d       	mov	r25, r7
    20a0:	24 e8       	ldi	r18, 0x84	; 132
    20a2:	3a eb       	ldi	r19, 0xBA	; 186
    20a4:	4c e3       	ldi	r20, 0x3C	; 60
    20a6:	58 e3       	ldi	r21, 0x38	; 56
    20a8:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    20ac:	a8 01       	movw	r20, r16
    20ae:	97 01       	movw	r18, r14
    20b0:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__cmpsf2>
    20b4:	87 ff       	sbrs	r24, 7
    20b6:	1c c0       	rjmp	.+56     	; 0x20f0 <_ZN6Anchor15updateAnchorBoxEff+0x28a>
    20b8:	ad 81       	ldd	r26, Y+5	; 0x05
    20ba:	be 81       	ldd	r27, Y+6	; 0x06
    20bc:	12 96       	adiw	r26, 0x02	; 2
    20be:	8d 91       	ld	r24, X+
    20c0:	9c 91       	ld	r25, X
    20c2:	13 97       	sbiw	r26, 0x03	; 3
    20c4:	0e 94 83 15 	call	0x2b06	; 0x2b06 <_ZNK14FreeBoardModel10getAnchorWEv>
    20c8:	9b 01       	movw	r18, r22
    20ca:	ac 01       	movw	r20, r24
    20cc:	69 2d       	mov	r22, r9
    20ce:	76 2d       	mov	r23, r6
    20d0:	88 2d       	mov	r24, r8
    20d2:	97 2d       	mov	r25, r7
    20d4:	0e 94 17 30 	call	0x602e	; 0x602e <__gesf2>
    20d8:	18 16       	cp	r1, r24
    20da:	54 f4       	brge	.+20     	; 0x20f0 <_ZN6Anchor15updateAnchorBoxEff+0x28a>
		model->setAnchorW(w);
    20dc:	ed 81       	ldd	r30, Y+5	; 0x05
    20de:	fe 81       	ldd	r31, Y+6	; 0x06
    20e0:	82 81       	ldd	r24, Z+2	; 0x02
    20e2:	93 81       	ldd	r25, Z+3	; 0x03
    20e4:	49 2d       	mov	r20, r9
    20e6:	56 2d       	mov	r21, r6
    20e8:	68 2d       	mov	r22, r8
    20ea:	77 2d       	mov	r23, r7
    20ec:	0e 94 42 16 	call	0x2c84	; 0x2c84 <_ZN14FreeBoardModel10setAnchorWEf>

}
    20f0:	26 96       	adiw	r28, 0x06	; 6
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	1f 91       	pop	r17
    2102:	0f 91       	pop	r16
    2104:	ff 90       	pop	r15
    2106:	ef 90       	pop	r14
    2108:	df 90       	pop	r13
    210a:	cf 90       	pop	r12
    210c:	bf 90       	pop	r11
    210e:	af 90       	pop	r10
    2110:	9f 90       	pop	r9
    2112:	8f 90       	pop	r8
    2114:	7f 90       	pop	r7
    2116:	6f 90       	pop	r6
    2118:	5f 90       	pop	r5
    211a:	4f 90       	pop	r4
    211c:	3f 90       	pop	r3
    211e:	2f 90       	pop	r2
    2120:	08 95       	ret

00002122 <_ZN6Anchor14resetAnchorBoxEff>:

void Anchor::resetAnchorBox(float laty, float lonx) {
    2122:	8f 92       	push	r8
    2124:	9f 92       	push	r9
    2126:	af 92       	push	r10
    2128:	bf 92       	push	r11
    212a:	cf 92       	push	r12
    212c:	df 92       	push	r13
    212e:	ef 92       	push	r14
    2130:	ff 92       	push	r15
    2132:	0f 93       	push	r16
    2134:	1f 93       	push	r17
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	ec 01       	movw	r28, r24
    213c:	4a 01       	movw	r8, r20
    213e:	5b 01       	movw	r10, r22
    2140:	68 01       	movw	r12, r16
    2142:	79 01       	movw	r14, r18
	model->setAnchorN(90.0);
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	9b 81       	ldd	r25, Y+3	; 0x03
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	50 e0       	ldi	r21, 0x00	; 0
    214c:	64 eb       	ldi	r22, 0xB4	; 180
    214e:	72 e4       	ldi	r23, 0x42	; 66
    2150:	0e 94 30 16 	call	0x2c60	; 0x2c60 <_ZN14FreeBoardModel10setAnchorNEf>
	model->setAnchorS(-90.0);
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	9b 81       	ldd	r25, Y+3	; 0x03
    2158:	40 e0       	ldi	r20, 0x00	; 0
    215a:	50 e0       	ldi	r21, 0x00	; 0
    215c:	64 eb       	ldi	r22, 0xB4	; 180
    215e:	72 ec       	ldi	r23, 0xC2	; 194
    2160:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <_ZN14FreeBoardModel10setAnchorSEf>
	model->setAnchorE(180.0);
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	9b 81       	ldd	r25, Y+3	; 0x03
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	50 e0       	ldi	r21, 0x00	; 0
    216c:	64 e3       	ldi	r22, 0x34	; 52
    216e:	73 e4       	ldi	r23, 0x43	; 67
    2170:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN14FreeBoardModel10setAnchorEEf>
	model->setAnchorW(-180.0);
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	9b 81       	ldd	r25, Y+3	; 0x03
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	64 e3       	ldi	r22, 0x34	; 52
    217e:	73 ec       	ldi	r23, 0xC3	; 195
    2180:	0e 94 42 16 	call	0x2c84	; 0x2c84 <_ZN14FreeBoardModel10setAnchorWEf>
	model->setAnchorRadiusDeg(model->getAnchorRadius() * LLMTRS);
    2184:	0a 81       	ldd	r16, Y+2	; 0x02
    2186:	1b 81       	ldd	r17, Y+3	; 0x03
    2188:	c8 01       	movw	r24, r16
    218a:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <_ZNK14FreeBoardModel15getAnchorRadiusEv>
    218e:	2d e9       	ldi	r18, 0x9D	; 157
    2190:	3b ef       	ldi	r19, 0xFB	; 251
    2192:	46 e1       	ldi	r20, 0x16	; 22
    2194:	57 e3       	ldi	r21, 0x37	; 55
    2196:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    219a:	ab 01       	movw	r20, r22
    219c:	bc 01       	movw	r22, r24
    219e:	c8 01       	movw	r24, r16
    21a0:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <_ZN14FreeBoardModel18setAnchorRadiusDegEf>
	updateAnchorBox(laty, lonx);
    21a4:	ce 01       	movw	r24, r28
    21a6:	b5 01       	movw	r22, r10
    21a8:	a4 01       	movw	r20, r8
    21aa:	97 01       	movw	r18, r14
    21ac:	86 01       	movw	r16, r12
    21ae:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <_ZN6Anchor15updateAnchorBoxEff>
}
    21b2:	df 91       	pop	r29
    21b4:	cf 91       	pop	r28
    21b6:	1f 91       	pop	r17
    21b8:	0f 91       	pop	r16
    21ba:	ff 90       	pop	r15
    21bc:	ef 90       	pop	r14
    21be:	df 90       	pop	r13
    21c0:	cf 90       	pop	r12
    21c2:	bf 90       	pop	r11
    21c4:	af 90       	pop	r10
    21c6:	9f 90       	pop	r9
    21c8:	8f 90       	pop	r8
    21ca:	08 95       	ret

000021cc <_ZN6AnchorC1EP14FreeBoardModel>:

#include "Anchor.h"



Anchor::Anchor(FreeBoardModel* model) {
    21cc:	cf 92       	push	r12
    21ce:	df 92       	push	r13
    21d0:	ef 92       	push	r14
    21d2:	ff 92       	push	r15
    21d4:	0f 93       	push	r16
    21d6:	1f 93       	push	r17
    21d8:	cf 93       	push	r28
    21da:	df 93       	push	r29
    21dc:	ec 01       	movw	r28, r24
    21de:	8b 01       	movw	r16, r22
    21e0:	85 e2       	ldi	r24, 0x25	; 37
    21e2:	95 e0       	ldi	r25, 0x05	; 5
    21e4:	99 83       	std	Y+1, r25	; 0x01
    21e6:	88 83       	st	Y, r24


	this->model=model;
    21e8:	7b 83       	std	Y+3, r23	; 0x03
    21ea:	6a 83       	std	Y+2, r22	; 0x02
	resetAnchorBox(model->getAnchorLat(), model->getAnchorLon());
    21ec:	cb 01       	movw	r24, r22
    21ee:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_ZNK14FreeBoardModel12getAnchorLatEv>
    21f2:	6b 01       	movw	r12, r22
    21f4:	7c 01       	movw	r14, r24
    21f6:	c8 01       	movw	r24, r16
    21f8:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZNK14FreeBoardModel12getAnchorLonEv>
    21fc:	8b 01       	movw	r16, r22
    21fe:	9c 01       	movw	r18, r24
    2200:	ce 01       	movw	r24, r28
    2202:	b7 01       	movw	r22, r14
    2204:	a6 01       	movw	r20, r12
    2206:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN6Anchor14resetAnchorBoxEff>
}
    220a:	df 91       	pop	r29
    220c:	cf 91       	pop	r28
    220e:	1f 91       	pop	r17
    2210:	0f 91       	pop	r16
    2212:	ff 90       	pop	r15
    2214:	ef 90       	pop	r14
    2216:	df 90       	pop	r13
    2218:	cf 90       	pop	r12
    221a:	08 95       	ret

0000221c <_ZN6Anchor11checkAnchorEv>:
		model->setAnchorW(model->getAnchorW() - change);

	}
}
/*calc all params, and set alarm buzzer state*/
void Anchor::checkAnchor() {
    221c:	2f 92       	push	r2
    221e:	3f 92       	push	r3
    2220:	4f 92       	push	r4
    2222:	5f 92       	push	r5
    2224:	6f 92       	push	r6
    2226:	7f 92       	push	r7
    2228:	8f 92       	push	r8
    222a:	9f 92       	push	r9
    222c:	af 92       	push	r10
    222e:	bf 92       	push	r11
    2230:	cf 92       	push	r12
    2232:	df 92       	push	r13
    2234:	ef 92       	push	r14
    2236:	ff 92       	push	r15
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	00 d0       	rcall	.+0      	; 0x2242 <_ZN6Anchor11checkAnchorEv+0x26>
    2242:	00 d0       	rcall	.+0      	; 0x2244 <_ZN6Anchor11checkAnchorEv+0x28>
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	9c 83       	std	Y+4, r25	; 0x04
    224a:	8b 83       	std	Y+3, r24	; 0x03

	//we dont need to do this if the anchor alarm is off
	if(model->isAnchorAlarmOn()){
    224c:	fc 01       	movw	r30, r24
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	93 81       	ldd	r25, Z+3	; 0x03
    2252:	0e 94 00 16 	call	0x2c00	; 0x2c00 <_ZNK14FreeBoardModel15isAnchorAlarmOnEv>
    2256:	88 23       	and	r24, r24
    2258:	09 f4       	brne	.+2      	; 0x225c <_ZN6Anchor11checkAnchorEv+0x40>
    225a:	d4 c0       	rjmp	.+424    	; 0x2404 <_ZN6Anchor11checkAnchorEv+0x1e8>
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
    225c:	0e 94 99 2b 	call	0x5732	; 0x5732 <millis>
    2260:	7b 01       	movw	r14, r22
    2262:	8c 01       	movw	r16, r24
    2264:	eb 81       	ldd	r30, Y+3	; 0x03
    2266:	fc 81       	ldd	r31, Y+4	; 0x04
    2268:	82 81       	ldd	r24, Z+2	; 0x02
    226a:	93 81       	ldd	r25, Z+3	; 0x03
    226c:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <_ZNK14FreeBoardModel13getGpsLastFixEv>
    2270:	e6 1a       	sub	r14, r22
    2272:	f7 0a       	sbc	r15, r23
    2274:	08 0b       	sbc	r16, r24
    2276:	19 0b       	sbc	r17, r25
    2278:	f1 ee       	ldi	r31, 0xE1	; 225
    227a:	ef 16       	cp	r14, r31
    227c:	f3 e9       	ldi	r31, 0x93	; 147
    227e:	ff 06       	cpc	r15, r31
    2280:	f4 e0       	ldi	r31, 0x04	; 4
    2282:	0f 07       	cpc	r16, r31
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	1f 07       	cpc	r17, r31
    2288:	c0 f0       	brcs	.+48     	; 0x22ba <_ZN6Anchor11checkAnchorEv+0x9e>
				&& model->isAnchorAlarmOn()) {
    228a:	eb 81       	ldd	r30, Y+3	; 0x03
    228c:	fc 81       	ldd	r31, Y+4	; 0x04
    228e:	82 81       	ldd	r24, Z+2	; 0x02
    2290:	93 81       	ldd	r25, Z+3	; 0x03
    2292:	0e 94 00 16 	call	0x2c00	; 0x2c00 <_ZNK14FreeBoardModel15isAnchorAlarmOnEv>

	//we dont need to do this if the anchor alarm is off
	if(model->isAnchorAlarmOn()){
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
    2296:	88 23       	and	r24, r24
    2298:	81 f0       	breq	.+32     	; 0x22ba <_ZN6Anchor11checkAnchorEv+0x9e>
				&& model->isAnchorAlarmOn()) {
			model->setAlarmSnooze(0);
    229a:	eb 81       	ldd	r30, Y+3	; 0x03
    229c:	fc 81       	ldd	r31, Y+4	; 0x04
    229e:	82 81       	ldd	r24, Z+2	; 0x02
    22a0:	93 81       	ldd	r25, Z+3	; 0x03
    22a2:	40 e0       	ldi	r20, 0x00	; 0
    22a4:	50 e0       	ldi	r21, 0x00	; 0
    22a6:	ba 01       	movw	r22, r20
    22a8:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <_ZN14FreeBoardModel14setAlarmSnoozeEm>
			model->setAnchorAlarmTriggered(true);
    22ac:	eb 81       	ldd	r30, Y+3	; 0x03
    22ae:	fc 81       	ldd	r31, Y+4	; 0x04
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	93 81       	ldd	r25, Z+3	; 0x03
    22b4:	61 e0       	ldi	r22, 0x01	; 1
    22b6:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>
		}
		//now check position
		if (model->getGpsStatus()) {
    22ba:	eb 81       	ldd	r30, Y+3	; 0x03
    22bc:	fc 81       	ldd	r31, Y+4	; 0x04
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	0e 94 d7 15 	call	0x2bae	; 0x2bae <_ZNK14FreeBoardModel12getGpsStatusEv>
    22c6:	88 23       	and	r24, r24
    22c8:	09 f4       	brne	.+2      	; 0x22cc <_ZN6Anchor11checkAnchorEv+0xb0>
    22ca:	9c c0       	rjmp	.+312    	; 0x2404 <_ZN6Anchor11checkAnchorEv+0x1e8>
			model->setAnchorDistance(Gps::getMetersTo(model->getAnchorLat(), model->getAnchorLon(),model->getGpsLatitude(),model->getGpsLongitude()));
    22cc:	eb 81       	ldd	r30, Y+3	; 0x03
    22ce:	fc 81       	ldd	r31, Y+4	; 0x04
    22d0:	82 81       	ldd	r24, Z+2	; 0x02
    22d2:	93 81       	ldd	r25, Z+3	; 0x03
    22d4:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_ZNK14FreeBoardModel12getAnchorLatEv>
    22d8:	3b 01       	movw	r6, r22
    22da:	4c 01       	movw	r8, r24
    22dc:	eb 81       	ldd	r30, Y+3	; 0x03
    22de:	fc 81       	ldd	r31, Y+4	; 0x04
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	93 81       	ldd	r25, Z+3	; 0x03
    22e4:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZNK14FreeBoardModel12getAnchorLonEv>
    22e8:	1b 01       	movw	r2, r22
    22ea:	2c 01       	movw	r4, r24
    22ec:	eb 81       	ldd	r30, Y+3	; 0x03
    22ee:	fc 81       	ldd	r31, Y+4	; 0x04
    22f0:	82 81       	ldd	r24, Z+2	; 0x02
    22f2:	93 81       	ldd	r25, Z+3	; 0x03
    22f4:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <_ZNK14FreeBoardModel14getGpsLatitudeEv>
    22f8:	7b 01       	movw	r14, r22
    22fa:	8c 01       	movw	r16, r24
    22fc:	eb 81       	ldd	r30, Y+3	; 0x03
    22fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2300:	02 80       	ldd	r0, Z+2	; 0x02
    2302:	f3 81       	ldd	r31, Z+3	; 0x03
    2304:	e0 2d       	mov	r30, r0
    2306:	fa 83       	std	Y+2, r31	; 0x02
    2308:	e9 83       	std	Y+1, r30	; 0x01
    230a:	cf 01       	movw	r24, r30
    230c:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <_ZNK14FreeBoardModel15getGpsLongitudeEv>
    2310:	5b 01       	movw	r10, r22
    2312:	6c 01       	movw	r12, r24
    2314:	c4 01       	movw	r24, r8
    2316:	b3 01       	movw	r22, r6
    2318:	a2 01       	movw	r20, r4
    231a:	91 01       	movw	r18, r2
    231c:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <_ZN3Gps11getMetersToEffff>
    2320:	ab 01       	movw	r20, r22
    2322:	bc 01       	movw	r22, r24
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	9a 81       	ldd	r25, Y+2	; 0x02
    2328:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZN14FreeBoardModel17setAnchorDistanceEf>
			if (model->getAnchorDistance() > model->getAnchorMaxDistance())
    232c:	eb 81       	ldd	r30, Y+3	; 0x03
    232e:	fc 81       	ldd	r31, Y+4	; 0x04
    2330:	82 81       	ldd	r24, Z+2	; 0x02
    2332:	93 81       	ldd	r25, Z+3	; 0x03
    2334:	0e 94 23 15 	call	0x2a46	; 0x2a46 <_ZNK14FreeBoardModel17getAnchorDistanceEv>
    2338:	7b 01       	movw	r14, r22
    233a:	8c 01       	movw	r16, r24
    233c:	eb 81       	ldd	r30, Y+3	; 0x03
    233e:	fc 81       	ldd	r31, Y+4	; 0x04
    2340:	82 81       	ldd	r24, Z+2	; 0x02
    2342:	93 81       	ldd	r25, Z+3	; 0x03
    2344:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZNK14FreeBoardModel20getAnchorMaxDistanceEv>
    2348:	9b 01       	movw	r18, r22
    234a:	ac 01       	movw	r20, r24
    234c:	c8 01       	movw	r24, r16
    234e:	b7 01       	movw	r22, r14
    2350:	0e 94 17 30 	call	0x602e	; 0x602e <__gesf2>
    2354:	18 16       	cp	r1, r24
    2356:	64 f4       	brge	.+24     	; 0x2370 <_ZN6Anchor11checkAnchorEv+0x154>
				model->setAnchorMaxDistance(model->getAnchorDistance());
    2358:	eb 81       	ldd	r30, Y+3	; 0x03
    235a:	fc 81       	ldd	r31, Y+4	; 0x04
    235c:	02 81       	ldd	r16, Z+2	; 0x02
    235e:	13 81       	ldd	r17, Z+3	; 0x03
    2360:	c8 01       	movw	r24, r16
    2362:	0e 94 23 15 	call	0x2a46	; 0x2a46 <_ZNK14FreeBoardModel17getAnchorDistanceEv>
    2366:	ab 01       	movw	r20, r22
    2368:	bc 01       	movw	r22, r24
    236a:	c8 01       	movw	r24, r16
    236c:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>

			//update the anchor box
			updateAnchorBox(model->getGpsLatitude(), model->getGpsLongitude());
    2370:	eb 81       	ldd	r30, Y+3	; 0x03
    2372:	fc 81       	ldd	r31, Y+4	; 0x04
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <_ZNK14FreeBoardModel14getGpsLatitudeEv>
    237c:	6b 01       	movw	r12, r22
    237e:	7c 01       	movw	r14, r24
    2380:	eb 81       	ldd	r30, Y+3	; 0x03
    2382:	fc 81       	ldd	r31, Y+4	; 0x04
    2384:	82 81       	ldd	r24, Z+2	; 0x02
    2386:	93 81       	ldd	r25, Z+3	; 0x03
    2388:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <_ZNK14FreeBoardModel15getGpsLongitudeEv>
    238c:	8b 01       	movw	r16, r22
    238e:	9c 01       	movw	r18, r24
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	9c 81       	ldd	r25, Y+4	; 0x04
    2394:	b7 01       	movw	r22, r14
    2396:	a6 01       	movw	r20, r12
    2398:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <_ZN6Anchor15updateAnchorBoxEff>

			// read distance to anchorPoint in meters and set anchorAlarm accordingly
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (model->isAnchorAlarmOn() && model->getAnchorDistance() > model->getAnchorRadius()) {
    239c:	eb 81       	ldd	r30, Y+3	; 0x03
    239e:	fc 81       	ldd	r31, Y+4	; 0x04
    23a0:	82 81       	ldd	r24, Z+2	; 0x02
    23a2:	93 81       	ldd	r25, Z+3	; 0x03
    23a4:	0e 94 00 16 	call	0x2c00	; 0x2c00 <_ZNK14FreeBoardModel15isAnchorAlarmOnEv>
    23a8:	88 23       	and	r24, r24
    23aa:	29 f1       	breq	.+74     	; 0x23f6 <_ZN6Anchor11checkAnchorEv+0x1da>
    23ac:	eb 81       	ldd	r30, Y+3	; 0x03
    23ae:	fc 81       	ldd	r31, Y+4	; 0x04
    23b0:	82 81       	ldd	r24, Z+2	; 0x02
    23b2:	93 81       	ldd	r25, Z+3	; 0x03
    23b4:	0e 94 23 15 	call	0x2a46	; 0x2a46 <_ZNK14FreeBoardModel17getAnchorDistanceEv>
    23b8:	7b 01       	movw	r14, r22
    23ba:	8c 01       	movw	r16, r24
    23bc:	eb 81       	ldd	r30, Y+3	; 0x03
    23be:	fc 81       	ldd	r31, Y+4	; 0x04
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <_ZNK14FreeBoardModel15getAnchorRadiusEv>
    23c8:	9b 01       	movw	r18, r22
    23ca:	ac 01       	movw	r20, r24
    23cc:	c8 01       	movw	r24, r16
    23ce:	b7 01       	movw	r22, r14
    23d0:	0e 94 17 30 	call	0x602e	; 0x602e <__gesf2>
    23d4:	18 16       	cp	r1, r24
    23d6:	7c f4       	brge	.+30     	; 0x23f6 <_ZN6Anchor11checkAnchorEv+0x1da>
				model->setAlarmSnooze(0);
    23d8:	eb 81       	ldd	r30, Y+3	; 0x03
    23da:	fc 81       	ldd	r31, Y+4	; 0x04
    23dc:	82 81       	ldd	r24, Z+2	; 0x02
    23de:	93 81       	ldd	r25, Z+3	; 0x03
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	50 e0       	ldi	r21, 0x00	; 0
    23e4:	ba 01       	movw	r22, r20
    23e6:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <_ZN14FreeBoardModel14setAlarmSnoozeEm>
				model->setAnchorAlarmTriggered(true);
    23ea:	eb 81       	ldd	r30, Y+3	; 0x03
    23ec:	fc 81       	ldd	r31, Y+4	; 0x04
    23ee:	82 81       	ldd	r24, Z+2	; 0x02
    23f0:	93 81       	ldd	r25, Z+3	; 0x03
    23f2:	61 e0       	ldi	r22, 0x01	; 1
    23f4:	05 c0       	rjmp	.+10     	; 0x2400 <_ZN6Anchor11checkAnchorEv+0x1e4>
			} else {
				model->setAnchorAlarmTriggered(false);
    23f6:	eb 81       	ldd	r30, Y+3	; 0x03
    23f8:	fc 81       	ldd	r31, Y+4	; 0x04
    23fa:	82 81       	ldd	r24, Z+2	; 0x02
    23fc:	93 81       	ldd	r25, Z+3	; 0x03
    23fe:	60 e0       	ldi	r22, 0x00	; 0
    2400:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>
			}
		}
	}

}
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	1f 91       	pop	r17
    2412:	0f 91       	pop	r16
    2414:	ff 90       	pop	r15
    2416:	ef 90       	pop	r14
    2418:	df 90       	pop	r13
    241a:	cf 90       	pop	r12
    241c:	bf 90       	pop	r11
    241e:	af 90       	pop	r10
    2420:	9f 90       	pop	r9
    2422:	8f 90       	pop	r8
    2424:	7f 90       	pop	r7
    2426:	6f 90       	pop	r6
    2428:	5f 90       	pop	r5
    242a:	4f 90       	pop	r4
    242c:	3f 90       	pop	r3
    242e:	2f 90       	pop	r2
    2430:	08 95       	ret

00002432 <_ZN9AutopilotC1EP14FreeBoardModel>:
 * I_Param : Integral Parameter. Must be non-negative.
 * D_Param : Derivative Parameter. Must be non-negative.
 */
#include "Autopilot.h"

Autopilot::Autopilot(FreeBoardModel* model) {
    2432:	6f 92       	push	r6
    2434:	7f 92       	push	r7
    2436:	8f 92       	push	r8
    2438:	9f 92       	push	r9
    243a:	af 92       	push	r10
    243c:	bf 92       	push	r11
    243e:	cf 92       	push	r12
    2440:	df 92       	push	r13
    2442:	ef 92       	push	r14
    2444:	ff 92       	push	r15
    2446:	0f 93       	push	r16
    2448:	1f 93       	push	r17
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	e7 97       	sbiw	r28, 0x37	; 55
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	8c 01       	movw	r16, r24
    2460:	7b 01       	movw	r14, r22
    2462:	8e e0       	ldi	r24, 0x0E	; 14
    2464:	88 2e       	mov	r8, r24
    2466:	91 2c       	mov	r9, r1
    2468:	80 0e       	add	r8, r16
    246a:	91 1e       	adc	r9, r17
    246c:	c4 01       	movw	r24, r8
    246e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN3PIDC1Ev>
	this->model = model;
    2472:	f8 01       	movw	r30, r16
    2474:	f5 86       	std	Z+13, r15	; 0x0d
    2476:	e4 86       	std	Z+12, r14	; 0x0c
	autopilotTargetHeading=model->getAutopilotTargetHeading()+720;
    2478:	c7 01       	movw	r24, r14
    247a:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	44 e3       	ldi	r20, 0x34	; 52
    2484:	54 e4       	ldi	r21, 0x44	; 68
    2486:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    248a:	b6 2e       	mov	r11, r22
    248c:	c7 2e       	mov	r12, r23
    248e:	d8 2e       	mov	r13, r24
    2490:	69 2e       	mov	r6, r25
    2492:	86 2f       	mov	r24, r22
    2494:	9c 2d       	mov	r25, r12
    2496:	ad 2d       	mov	r26, r13
    2498:	b6 2d       	mov	r27, r6
    249a:	f8 01       	movw	r30, r16
    249c:	80 83       	st	Z, r24
    249e:	91 83       	std	Z+1, r25	; 0x01
    24a0:	a2 83       	std	Z+2, r26	; 0x02
    24a2:	b3 83       	std	Z+3, r27	; 0x03
	autopilotCurrentHeading = autopilotTargetHeading + model->getAutopilotOffCourse();
    24a4:	c7 01       	movw	r24, r14
    24a6:	0e 94 c2 14 	call	0x2984	; 0x2984 <_ZN14FreeBoardModel21getAutopilotOffCourseEv>
    24aa:	9b 01       	movw	r18, r22
    24ac:	ac 01       	movw	r20, r24
    24ae:	6b 2d       	mov	r22, r11
    24b0:	7c 2d       	mov	r23, r12
    24b2:	8d 2d       	mov	r24, r13
    24b4:	96 2d       	mov	r25, r6
    24b6:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    24ba:	f8 01       	movw	r30, r16
    24bc:	64 83       	std	Z+4, r22	; 0x04
    24be:	75 83       	std	Z+5, r23	; 0x05
    24c0:	86 83       	std	Z+6, r24	; 0x06
    24c2:	97 83       	std	Z+7, r25	; 0x07
	autopilotRudderCommand=model->getAutopilotRudderCommand();
    24c4:	c7 01       	movw	r24, r14
    24c6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN14FreeBoardModel25getAutopilotRudderCommandEv>
    24ca:	f8 01       	movw	r30, r16
    24cc:	60 87       	std	Z+8, r22	; 0x08
    24ce:	71 87       	std	Z+9, r23	; 0x09
    24d0:	82 87       	std	Z+10, r24	; 0x0a
    24d2:	93 87       	std	Z+11, r25	; 0x0b
	this->headingPid = PID(&autopilotCurrentHeading, &autopilotRudderCommand, &autopilotTargetHeading, P_Param, I_Param, D_Param, DIRECT);
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <_ZN9AutopilotC1EP14FreeBoardModel+0xa4>
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <_ZN9AutopilotC1EP14FreeBoardModel+0xa6>
    24d8:	00 d0       	rcall	.+0      	; 0x24da <_ZN9AutopilotC1EP14FreeBoardModel+0xa8>
    24da:	b8 01       	movw	r22, r16
    24dc:	6c 5f       	subi	r22, 0xFC	; 252
    24de:	7f 4f       	sbci	r23, 0xFF	; 255
    24e0:	a8 01       	movw	r20, r16
    24e2:	48 5f       	subi	r20, 0xF8	; 248
    24e4:	5f 4f       	sbci	r21, 0xFF	; 255
    24e6:	8a e9       	ldi	r24, 0x9A	; 154
    24e8:	99 e9       	ldi	r25, 0x99	; 153
    24ea:	a9 e9       	ldi	r26, 0x99	; 153
    24ec:	be e3       	ldi	r27, 0x3E	; 62
    24ee:	ed b7       	in	r30, 0x3d	; 61
    24f0:	fe b7       	in	r31, 0x3e	; 62
    24f2:	81 83       	std	Z+1, r24	; 0x01
    24f4:	92 83       	std	Z+2, r25	; 0x02
    24f6:	a3 83       	std	Z+3, r26	; 0x03
    24f8:	b4 83       	std	Z+4, r27	; 0x04
    24fa:	16 82       	std	Z+6, r1	; 0x06
    24fc:	15 82       	std	Z+5, r1	; 0x05
    24fe:	3e 01       	movw	r6, r28
    2500:	08 94       	sec
    2502:	61 1c       	adc	r6, r1
    2504:	71 1c       	adc	r7, r1
    2506:	c3 01       	movw	r24, r6
    2508:	98 01       	movw	r18, r16
    250a:	0f 2e       	mov	r0, r31
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	ef 2e       	mov	r14, r31
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	ff 2e       	mov	r15, r31
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	0f 2f       	mov	r16, r31
    2518:	f0 e4       	ldi	r31, 0x40	; 64
    251a:	1f 2f       	mov	r17, r31
    251c:	f0 2d       	mov	r31, r0
    251e:	0f 2e       	mov	r0, r31
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	af 2e       	mov	r10, r31
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	bf 2e       	mov	r11, r31
    2528:	f0 ea       	ldi	r31, 0xA0	; 160
    252a:	cf 2e       	mov	r12, r31
    252c:	f0 e4       	ldi	r31, 0x40	; 64
    252e:	df 2e       	mov	r13, r31
    2530:	f0 2d       	mov	r31, r0
    2532:	0e 94 cb 05 	call	0xb96	; 0xb96 <_ZN3PIDC1EPdS0_S0_dddi>
    2536:	d4 01       	movw	r26, r8
    2538:	f3 01       	movw	r30, r6
    253a:	87 e3       	ldi	r24, 0x37	; 55
    253c:	01 90       	ld	r0, Z+
    253e:	0d 92       	st	X+, r0
    2540:	81 50       	subi	r24, 0x01	; 1
    2542:	e1 f7       	brne	.-8      	; 0x253c <_ZN9AutopilotC1EP14FreeBoardModel+0x10a>

	headingPid.SetOutputLimits(0,66); //output limits
    2544:	8d b7       	in	r24, 0x3d	; 61
    2546:	9e b7       	in	r25, 0x3e	; 62
    2548:	06 96       	adiw	r24, 0x06	; 6
    254a:	0f b6       	in	r0, 0x3f	; 63
    254c:	f8 94       	cli
    254e:	9e bf       	out	0x3e, r25	; 62
    2550:	0f be       	out	0x3f, r0	; 63
    2552:	8d bf       	out	0x3d, r24	; 61
    2554:	c4 01       	movw	r24, r8
    2556:	40 e0       	ldi	r20, 0x00	; 0
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	ba 01       	movw	r22, r20
    255c:	00 e0       	ldi	r16, 0x00	; 0
    255e:	10 e0       	ldi	r17, 0x00	; 0
    2560:	24 e8       	ldi	r18, 0x84	; 132
    2562:	32 e4       	ldi	r19, 0x42	; 66
    2564:	0e 94 b7 04 	call	0x96e	; 0x96e <_ZN3PID15SetOutputLimitsEdd>
	headingPid.SetSampleTime(100);
    2568:	c4 01       	movw	r24, r8
    256a:	64 e6       	ldi	r22, 0x64	; 100
    256c:	70 e0       	ldi	r23, 0x00	; 0
    256e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN3PID13SetSampleTimeEi>

}
    2572:	e7 96       	adiw	r28, 0x37	; 55
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	1f 91       	pop	r17
    2584:	0f 91       	pop	r16
    2586:	ff 90       	pop	r15
    2588:	ef 90       	pop	r14
    258a:	df 90       	pop	r13
    258c:	cf 90       	pop	r12
    258e:	bf 90       	pop	r11
    2590:	af 90       	pop	r10
    2592:	9f 90       	pop	r9
    2594:	8f 90       	pop	r8
    2596:	7f 90       	pop	r7
    2598:	6f 90       	pop	r6
    259a:	08 95       	ret

0000259c <_ZN9AutopilotD1Ev>:
Autopilot::~Autopilot() {

}
    259c:	08 95       	ret

0000259e <_ZN9Autopilot13calcAutoPilotEv>:



void Autopilot::calcAutoPilot() {
    259e:	cf 92       	push	r12
    25a0:	df 92       	push	r13
    25a2:	ef 92       	push	r14
    25a4:	ff 92       	push	r15
    25a6:	0f 93       	push	r16
    25a8:	1f 93       	push	r17
    25aa:	cf 93       	push	r28
    25ac:	df 93       	push	r29
    25ae:	ec 01       	movw	r28, r24
	//we dont do this if the autopilot is MANUAL
	if (model->isAutopilotOn()){
    25b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    25b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    25b4:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_ZNK14FreeBoardModel13isAutopilotOnEv>
    25b8:	8e 01       	movw	r16, r28
    25ba:	02 5f       	subi	r16, 0xF2	; 242
    25bc:	1f 4f       	sbci	r17, 0xFF	; 255
    25be:	88 23       	and	r24, r24
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <_ZN9Autopilot13calcAutoPilotEv+0x26>
    25c2:	8f c0       	rjmp	.+286    	; 0x26e2 <_ZN9Autopilot13calcAutoPilotEv+0x144>
		//does nothing if its already on, inits if off
		headingPid.SetMode(AUTOMATIC);
    25c4:	c8 01       	movw	r24, r16
    25c6:	61 e0       	ldi	r22, 0x01	; 1
    25c8:	70 e0       	ldi	r23, 0x00	; 0
    25ca:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN3PID7SetModeEi>
		autopilotTargetHeading=model->getAutopilotTargetHeading()+720;
    25ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    25d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    25d2:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	44 e3       	ldi	r20, 0x34	; 52
    25dc:	54 e4       	ldi	r21, 0x44	; 68
    25de:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    25e2:	d6 2e       	mov	r13, r22
    25e4:	e7 2e       	mov	r14, r23
    25e6:	f8 2e       	mov	r15, r24
    25e8:	c9 2e       	mov	r12, r25
    25ea:	86 2f       	mov	r24, r22
    25ec:	9e 2d       	mov	r25, r14
    25ee:	af 2d       	mov	r26, r15
    25f0:	bc 2d       	mov	r27, r12
    25f2:	88 83       	st	Y, r24
    25f4:	99 83       	std	Y+1, r25	; 0x01
    25f6:	aa 83       	std	Y+2, r26	; 0x02
    25f8:	bb 83       	std	Y+3, r27	; 0x03
		autopilotCurrentHeading = autopilotTargetHeading + model->getAutopilotOffCourse();
    25fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    25fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    25fe:	0e 94 c2 14 	call	0x2984	; 0x2984 <_ZN14FreeBoardModel21getAutopilotOffCourseEv>
    2602:	9b 01       	movw	r18, r22
    2604:	ac 01       	movw	r20, r24
    2606:	6d 2d       	mov	r22, r13
    2608:	7e 2d       	mov	r23, r14
    260a:	8f 2d       	mov	r24, r15
    260c:	9c 2d       	mov	r25, r12
    260e:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    2612:	6c 83       	std	Y+4, r22	; 0x04
    2614:	7d 83       	std	Y+5, r23	; 0x05
    2616:	8e 83       	std	Y+6, r24	; 0x06
    2618:	9f 83       	std	Y+7, r25	; 0x07
		headingPid.Compute();
    261a:	c8 01       	movw	r24, r16
    261c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN3PID7ComputeEv>
		if (DEBUG ) {
					Serial.print("Target deg = ");
    2620:	89 e3       	ldi	r24, 0x39	; 57
    2622:	90 e1       	ldi	r25, 0x10	; 16
    2624:	68 e0       	ldi	r22, 0x08	; 8
    2626:	72 e0       	ldi	r23, 0x02	; 2
    2628:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_ZN5Print5printEPKc>
					Serial.print(model->getAutopilotTargetHeading());
    262c:	8c 85       	ldd	r24, Y+12	; 0x0c
    262e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2630:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    2634:	ab 01       	movw	r20, r22
    2636:	bc 01       	movw	r22, r24
    2638:	89 e3       	ldi	r24, 0x39	; 57
    263a:	90 e1       	ldi	r25, 0x10	; 16
    263c:	22 e0       	ldi	r18, 0x02	; 2
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	0e 94 27 29 	call	0x524e	; 0x524e <_ZN5Print5printEdi>
					Serial.print("Heading deg = ");
    2644:	89 e3       	ldi	r24, 0x39	; 57
    2646:	90 e1       	ldi	r25, 0x10	; 16
    2648:	66 e1       	ldi	r22, 0x16	; 22
    264a:	72 e0       	ldi	r23, 0x02	; 2
    264c:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_ZN5Print5printEPKc>
					Serial.print(model->getAutopilotCurrentHeading());
    2650:	8c 85       	ldd	r24, Y+12	; 0x0c
    2652:	9d 85       	ldd	r25, Y+13	; 0x0d
    2654:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>
    2658:	ab 01       	movw	r20, r22
    265a:	bc 01       	movw	r22, r24
    265c:	89 e3       	ldi	r24, 0x39	; 57
    265e:	90 e1       	ldi	r25, 0x10	; 16
    2660:	22 e0       	ldi	r18, 0x02	; 2
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	0e 94 27 29 	call	0x524e	; 0x524e <_ZN5Print5printEdi>
					Serial.print(", Rudder = ");
    2668:	89 e3       	ldi	r24, 0x39	; 57
    266a:	90 e1       	ldi	r25, 0x10	; 16
    266c:	65 e2       	ldi	r22, 0x25	; 37
    266e:	72 e0       	ldi	r23, 0x02	; 2
    2670:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_ZN5Print5printEPKc>
					Serial.println(model->getAutopilotRudderCommand());
    2674:	8c 85       	ldd	r24, Y+12	; 0x0c
    2676:	9d 85       	ldd	r25, Y+13	; 0x0d
    2678:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN14FreeBoardModel25getAutopilotRudderCommandEv>
    267c:	ab 01       	movw	r20, r22
    267e:	bc 01       	movw	r22, r24
    2680:	89 e3       	ldi	r24, 0x39	; 57
    2682:	90 e1       	ldi	r25, 0x10	; 16
    2684:	22 e0       	ldi	r18, 0x02	; 2
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	0e 94 2a 29 	call	0x5254	; 0x5254 <_ZN5Print7printlnEdi>
					model->setAutopilotCurrentHeading(model->getAutopilotCurrentHeading()+(0.1*(model->getAutopilotRudderCommand()-33)));
    268c:	8c 85       	ldd	r24, Y+12	; 0x0c
    268e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2690:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>
    2694:	6b 01       	movw	r12, r22
    2696:	7c 01       	movw	r14, r24
    2698:	0c 85       	ldd	r16, Y+12	; 0x0c
    269a:	1d 85       	ldd	r17, Y+13	; 0x0d
    269c:	c8 01       	movw	r24, r16
    269e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN14FreeBoardModel25getAutopilotRudderCommandEv>
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	44 e0       	ldi	r20, 0x04	; 4
    26a8:	52 e4       	ldi	r21, 0x42	; 66
    26aa:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
    26ae:	2d ec       	ldi	r18, 0xCD	; 205
    26b0:	3c ec       	ldi	r19, 0xCC	; 204
    26b2:	4c ec       	ldi	r20, 0xCC	; 204
    26b4:	5d e3       	ldi	r21, 0x3D	; 61
    26b6:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    26ba:	9b 01       	movw	r18, r22
    26bc:	ac 01       	movw	r20, r24
    26be:	c7 01       	movw	r24, r14
    26c0:	b6 01       	movw	r22, r12
    26c2:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    26c6:	ab 01       	movw	r20, r22
    26c8:	bc 01       	movw	r22, r24
    26ca:	c8 01       	movw	r24, r16
    26cc:	0e 94 48 16 	call	0x2c90	; 0x2c90 <_ZN14FreeBoardModel26setAutopilotCurrentHeadingEd>
				}
		model->setAutopilotRudderCommand(autopilotRudderCommand);
    26d0:	48 85       	ldd	r20, Y+8	; 0x08
    26d2:	59 85       	ldd	r21, Y+9	; 0x09
    26d4:	6a 85       	ldd	r22, Y+10	; 0x0a
    26d6:	7b 85       	ldd	r23, Y+11	; 0x0b
    26d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    26da:	9d 85       	ldd	r25, Y+13	; 0x0d
    26dc:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <_ZN14FreeBoardModel25setAutopilotRudderCommandEd>
    26e0:	05 c0       	rjmp	.+10     	; 0x26ec <_ZN9Autopilot13calcAutoPilotEv+0x14e>

	}else{
		headingPid.SetMode(MANUAL);
    26e2:	c8 01       	movw	r24, r16
    26e4:	60 e0       	ldi	r22, 0x00	; 0
    26e6:	70 e0       	ldi	r23, 0x00	; 0
    26e8:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN3PID7SetModeEi>
	}
}
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	1f 91       	pop	r17
    26f2:	0f 91       	pop	r16
    26f4:	ff 90       	pop	r15
    26f6:	ef 90       	pop	r14
    26f8:	df 90       	pop	r13
    26fa:	cf 90       	pop	r12
    26fc:	08 95       	ret

000026fe <_ZN14FreeBoardModelC1Ev>:
 *      Author: robert
 */

#include "FreeBoardModel.h"

FreeBoardModel::FreeBoardModel(){
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
    2702:	fc 01       	movw	r30, r24
	alarmLast=0; //millis time of last beep state change
    2704:	10 82       	st	Z, r1
    2706:	11 82       	std	Z+1, r1	; 0x01
    2708:	12 82       	std	Z+2, r1	; 0x02
    270a:	13 82       	std	Z+3, r1	; 0x03
	alarmSnooze=0; //5 minute alarm snooze
    270c:	14 82       	std	Z+4, r1	; 0x04
    270e:	15 82       	std	Z+5, r1	; 0x05
    2710:	16 82       	std	Z+6, r1	; 0x06
    2712:	17 82       	std	Z+7, r1	; 0x07
	//unsigned long alarmTriggered ; //true if any alarm is triggered - derived

	//anchor
	//float anchorRadius; //anchor alarm radius in meters
	anchorRadiusDeg=0.0; //anchor alarm radius in decimal degrees, eg 1deg = 60NM.
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	a9 01       	movw	r20, r18
    271a:	20 87       	std	Z+8, r18	; 0x08
    271c:	31 87       	std	Z+9, r19	; 0x09
    271e:	42 87       	std	Z+10, r20	; 0x0a
    2720:	53 87       	std	Z+11, r21	; 0x0b

	//anchor alarm data
	//float anchorLat; // variable for reading the anchor latitude
	//float anchorLon; // variable for reading the anchor longitude
	anchorDistance=0.0;
    2722:	24 87       	std	Z+12, r18	; 0x0c
    2724:	35 87       	std	Z+13, r19	; 0x0d
    2726:	46 87       	std	Z+14, r20	; 0x0e
    2728:	57 87       	std	Z+15, r21	; 0x0f
	anchorMaxDistance=0.0;
    272a:	20 8b       	std	Z+16, r18	; 0x10
    272c:	31 8b       	std	Z+17, r19	; 0x11
    272e:	42 8b       	std	Z+18, r20	; 0x12
    2730:	53 8b       	std	Z+19, r21	; 0x13
	//bool anchorAlarmOn; //flag to turn anchor alarm on/off toggle
	anchorAlarmTriggered=false; //set to true to trigger anchor alarm
    2732:	14 8a       	std	Z+20, r1	; 0x14

	//a box around the anchor, shrinks with every GPS reading to home in on the anchor itself
	anchorN=90.0;
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	a4 eb       	ldi	r26, 0xB4	; 180
    273a:	b2 e4       	ldi	r27, 0x42	; 66
    273c:	85 8b       	std	Z+21, r24	; 0x15
    273e:	96 8b       	std	Z+22, r25	; 0x16
    2740:	a7 8b       	std	Z+23, r26	; 0x17
    2742:	b0 8f       	std	Z+24, r27	; 0x18
	anchorS=-90.0;
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	a4 eb       	ldi	r26, 0xB4	; 180
    274a:	b2 ec       	ldi	r27, 0xC2	; 194
    274c:	81 8f       	std	Z+25, r24	; 0x19
    274e:	92 8f       	std	Z+26, r25	; 0x1a
    2750:	a3 8f       	std	Z+27, r26	; 0x1b
    2752:	b4 8f       	std	Z+28, r27	; 0x1c
	anchorE=180.0;
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	a4 e3       	ldi	r26, 0x34	; 52
    275a:	b3 e4       	ldi	r27, 0x43	; 67
    275c:	85 8f       	std	Z+29, r24	; 0x1d
    275e:	96 8f       	std	Z+30, r25	; 0x1e
    2760:	a7 8f       	std	Z+31, r26	; 0x1f
    2762:	b0 a3       	std	Z+32, r27	; 0x20
	anchorW=-180.0;
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	a4 e3       	ldi	r26, 0x34	; 52
    276a:	b3 ec       	ldi	r27, 0xC3	; 195
    276c:	81 a3       	std	Z+33, r24	; 0x21
    276e:	92 a3       	std	Z+34, r25	; 0x22
    2770:	a3 a3       	std	Z+35, r26	; 0x23
    2772:	b4 a3       	std	Z+36, r27	; 0x24

	//autopilot
	//bool autopilotOn;
	autopilotReference=AUTOPILOT_COMPASS;
    2774:	12 a6       	std	Z+42, r1	; 0x2a
    2776:	11 a6       	std	Z+41, r1	; 0x29
	autopilotCurrentHeading=0; //Input
    2778:	23 a7       	std	Z+43, r18	; 0x2b
    277a:	34 a7       	std	Z+44, r19	; 0x2c
    277c:	45 a7       	std	Z+45, r20	; 0x2d
    277e:	56 a7       	std	Z+46, r21	; 0x2e
	autopilotTargetHeading=0; //Setpoint
    2780:	27 a7       	std	Z+47, r18	; 0x2f
    2782:	30 ab       	std	Z+48, r19	; 0x30
    2784:	41 ab       	std	Z+49, r20	; 0x31
    2786:	52 ab       	std	Z+50, r21	; 0x32
	autopilotRudderCommand=33; //Output (rudder central)
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	a4 e0       	ldi	r26, 0x04	; 4
    278e:	b2 e4       	ldi	r27, 0x42	; 66
    2790:	83 ab       	std	Z+51, r24	; 0x33
    2792:	94 ab       	std	Z+52, r25	; 0x34
    2794:	a5 ab       	std	Z+53, r26	; 0x35
    2796:	b6 ab       	std	Z+54, r27	; 0x36
	//bool autopilotAlarmOn;
	autopilotAlarmTriggered=false;
    2798:	17 aa       	std	Z+55, r1	; 0x37
	autopilotAlarmMaxXTError=100; // +/- meters cross track error
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	a8 ec       	ldi	r26, 0xC8	; 200
    27a0:	b2 e4       	ldi	r27, 0x42	; 66
    27a2:	80 af       	std	Z+56, r24	; 0x38
    27a4:	91 af       	std	Z+57, r25	; 0x39
    27a6:	a2 af       	std	Z+58, r26	; 0x3a
    27a8:	b3 af       	std	Z+59, r27	; 0x3b
	autopilotAlarmMaxWindError=10; // +/- wind angle change, for over 1 minute
    27aa:	60 e0       	ldi	r22, 0x00	; 0
    27ac:	70 e0       	ldi	r23, 0x00	; 0
    27ae:	80 e2       	ldi	r24, 0x20	; 32
    27b0:	91 e4       	ldi	r25, 0x41	; 65
    27b2:	64 af       	std	Z+60, r22	; 0x3c
    27b4:	75 af       	std	Z+61, r23	; 0x3d
    27b6:	86 af       	std	Z+62, r24	; 0x3e
    27b8:	97 af       	std	Z+63, r25	; 0x3f
	autopilotAlarmMaxCourseError=10; // +/- course error, for over 1 minute
    27ba:	df 01       	movw	r26, r30
    27bc:	a0 5c       	subi	r26, 0xC0	; 192
    27be:	bf 4f       	sbci	r27, 0xFF	; 255
    27c0:	6d 93       	st	X+, r22
    27c2:	7d 93       	st	X+, r23
    27c4:	8d 93       	st	X+, r24
    27c6:	9c 93       	st	X, r25
    27c8:	13 97       	sbiw	r26, 0x03	; 3

	//gps
	gpsDecode=false; //flag to indicate a new sentence was decoded.
    27ca:	df 01       	movw	r26, r30
    27cc:	ac 5b       	subi	r26, 0xBC	; 188
    27ce:	bf 4f       	sbci	r27, 0xFF	; 255
    27d0:	1c 92       	st	X, r1
	gpsLastFix=0; //time of last good gps fix.
    27d2:	df 01       	movw	r26, r30
    27d4:	ab 5b       	subi	r26, 0xBB	; 187
    27d6:	bf 4f       	sbci	r27, 0xFF	; 255
    27d8:	1d 92       	st	X+, r1
    27da:	1d 92       	st	X+, r1
    27dc:	1d 92       	st	X+, r1
    27de:	1c 92       	st	X, r1
    27e0:	13 97       	sbiw	r26, 0x03	; 3
	gpsUtc=0; // decimal value of UTC term in last full GPRMC sentence
    27e2:	df 01       	movw	r26, r30
    27e4:	a7 5b       	subi	r26, 0xB7	; 183
    27e6:	bf 4f       	sbci	r27, 0xFF	; 255
    27e8:	2d 93       	st	X+, r18
    27ea:	3d 93       	st	X+, r19
    27ec:	4d 93       	st	X+, r20
    27ee:	5c 93       	st	X, r21
    27f0:	13 97       	sbiw	r26, 0x03	; 3
	gpsStatus='V'; //  status character in last full GPRMC sentence ('A' or 'V')
    27f2:	df 01       	movw	r26, r30
    27f4:	a3 5b       	subi	r26, 0xB3	; 179
    27f6:	bf 4f       	sbci	r27, 0xFF	; 255
    27f8:	86 e5       	ldi	r24, 0x56	; 86
    27fa:	8c 93       	st	X, r24
	gpsLatitude=0.0; // signed degree-decimal value of latitude terms in last full GPRMC sentence
    27fc:	df 01       	movw	r26, r30
    27fe:	a2 5b       	subi	r26, 0xB2	; 178
    2800:	bf 4f       	sbci	r27, 0xFF	; 255
    2802:	2d 93       	st	X+, r18
    2804:	3d 93       	st	X+, r19
    2806:	4d 93       	st	X+, r20
    2808:	5c 93       	st	X, r21
    280a:	13 97       	sbiw	r26, 0x03	; 3
	gpsLongitude=0.0; // signed degree-decimal value of longitude terms in last full GPRMC sentence
    280c:	df 01       	movw	r26, r30
    280e:	ae 5a       	subi	r26, 0xAE	; 174
    2810:	bf 4f       	sbci	r27, 0xFF	; 255
    2812:	2d 93       	st	X+, r18
    2814:	3d 93       	st	X+, r19
    2816:	4d 93       	st	X+, r20
    2818:	5c 93       	st	X, r21
    281a:	13 97       	sbiw	r26, 0x03	; 3
	//float gpsSpeedUnit; //unit multiplier for gpsSpeed. 1.0 = KNT,1.1507794	=MPH, see nmea.h
	gpsSpeed=0.0; // speed-on-ground term in last full GPRMC sentence
    281c:	df 01       	movw	r26, r30
    281e:	aa 5a       	subi	r26, 0xAA	; 170
    2820:	bf 4f       	sbci	r27, 0xFF	; 255
    2822:	2d 93       	st	X+, r18
    2824:	3d 93       	st	X+, r19
    2826:	4d 93       	st	X+, r20
    2828:	5c 93       	st	X, r21
    282a:	13 97       	sbiw	r26, 0x03	; 3
	gpsCourse=0.0; // track-angle-made-good term in last full GPRMC sentence
    282c:	df 01       	movw	r26, r30
    282e:	a6 5a       	subi	r26, 0xA6	; 166
    2830:	bf 4f       	sbci	r27, 0xFF	; 255
    2832:	2d 93       	st	X+, r18
    2834:	3d 93       	st	X+, r19
    2836:	4d 93       	st	X+, r20
    2838:	5c 93       	st	X, r21
    283a:	13 97       	sbiw	r26, 0x03	; 3
	//bool gpsAlarmOn; //true to engage alarm
	gpsAlarmTriggered=false; //set to true to trigger gps alarm
    283c:	df 01       	movw	r26, r30
    283e:	a2 5a       	subi	r26, 0xA2	; 162
    2840:	bf 4f       	sbci	r27, 0xFF	; 255
    2842:	1c 92       	st	X, r1
	//double gpsAlarmFixTime; //max time in millis without fix

	//lcd
	lcdLastUpdate=0;
    2844:	df 01       	movw	r26, r30
    2846:	a1 5a       	subi	r26, 0xA1	; 161
    2848:	bf 4f       	sbci	r27, 0xFF	; 255
    284a:	1d 92       	st	X+, r1
    284c:	1d 92       	st	X+, r1
    284e:	1d 92       	st	X+, r1
    2850:	1c 92       	st	X, r1
    2852:	13 97       	sbiw	r26, 0x03	; 3

	//menu
	menuState=GPS; //default, show gps data
    2854:	df 01       	movw	r26, r30
    2856:	ad 59       	subi	r26, 0x9D	; 157
    2858:	bf 4f       	sbci	r27, 0xFF	; 255
    285a:	11 96       	adiw	r26, 0x01	; 1
    285c:	1c 92       	st	X, r1
    285e:	1e 92       	st	-X, r1
	menuLevel=0;
    2860:	df 01       	movw	r26, r30
    2862:	ab 59       	subi	r26, 0x9B	; 155
    2864:	bf 4f       	sbci	r27, 0xFF	; 255
    2866:	11 96       	adiw	r26, 0x01	; 1
    2868:	1c 92       	st	X, r1
    286a:	1e 92       	st	-X, r1

	//seatalk
	//volatile bool radarAlarmOn; //set to true to enable radar alarm
	radarAlarmTriggered=false; //set to true to trigger radar alarm
    286c:	df 01       	movw	r26, r30
    286e:	a9 59       	subi	r26, 0x99	; 153
    2870:	bf 4f       	sbci	r27, 0xFF	; 255
    2872:	1c 92       	st	X, r1
	//volatile bool mobAlarmOn; //set to true to enable mob alarm
	mobAlarmTriggered=false; //set to true to trigger MOB alarm
    2874:	df 01       	movw	r26, r30
    2876:	a8 59       	subi	r26, 0x98	; 152
    2878:	bf 4f       	sbci	r27, 0xFF	; 255
    287a:	1c 92       	st	X, r1

	//wind
	windLastUpdate=0;
    287c:	df 01       	movw	r26, r30
    287e:	a7 59       	subi	r26, 0x97	; 151
    2880:	bf 4f       	sbci	r27, 0xFF	; 255
    2882:	1d 92       	st	X+, r1
    2884:	1d 92       	st	X+, r1
    2886:	1d 92       	st	X+, r1
    2888:	1c 92       	st	X, r1
    288a:	13 97       	sbiw	r26, 0x03	; 3
	windAverage=0;
    288c:	df 01       	movw	r26, r30
    288e:	a3 59       	subi	r26, 0x93	; 147
    2890:	bf 4f       	sbci	r27, 0xFF	; 255
    2892:	1d 92       	st	X+, r1
    2894:	1c 92       	st	X, r1
	//float windFactor;
	windMax=0;
    2896:	df 01       	movw	r26, r30
    2898:	a1 59       	subi	r26, 0x91	; 145
    289a:	bf 4f       	sbci	r27, 0xFF	; 255
    289c:	1d 92       	st	X+, r1
    289e:	1c 92       	st	X, r1
	windApparentDir=0;
    28a0:	df 01       	movw	r26, r30
    28a2:	af 58       	subi	r26, 0x8F	; 143
    28a4:	bf 4f       	sbci	r27, 0xFF	; 255
    28a6:	1d 92       	st	X+, r1
    28a8:	1c 92       	st	X, r1
	//int windAlarmSpeed;
	//bool windAlarmOn;
	windAlarmTriggered=false;
    28aa:	df 01       	movw	r26, r30
    28ac:	ad 58       	subi	r26, 0x8D	; 141
    28ae:	bf 4f       	sbci	r27, 0xFF	; 255
    28b0:	1c 92       	st	X, r1

	//struct Configuration{
		config.anchorLat=0.0;
    28b2:	df 01       	movw	r26, r30
    28b4:	ac 58       	subi	r26, 0x8C	; 140
    28b6:	bf 4f       	sbci	r27, 0xFF	; 255
    28b8:	2d 93       	st	X+, r18
    28ba:	3d 93       	st	X+, r19
    28bc:	4d 93       	st	X+, r20
    28be:	5c 93       	st	X, r21
    28c0:	13 97       	sbiw	r26, 0x03	; 3
		config.anchorLon=0.0;
    28c2:	df 01       	movw	r26, r30
    28c4:	a8 58       	subi	r26, 0x88	; 136
    28c6:	bf 4f       	sbci	r27, 0xFF	; 255
    28c8:	2d 93       	st	X+, r18
    28ca:	3d 93       	st	X+, r19
    28cc:	4d 93       	st	X+, r20
    28ce:	5c 93       	st	X, r21
    28d0:	13 97       	sbiw	r26, 0x03	; 3
		config.anchorRadius=40.0;
    28d2:	ef 01       	movw	r28, r30
    28d4:	c4 58       	subi	r28, 0x84	; 132
    28d6:	df 4f       	sbci	r29, 0xFF	; 255
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	a0 e2       	ldi	r26, 0x20	; 32
    28de:	b2 e4       	ldi	r27, 0x42	; 66
    28e0:	88 83       	st	Y, r24
    28e2:	99 83       	std	Y+1, r25	; 0x01
    28e4:	aa 83       	std	Y+2, r26	; 0x02
    28e6:	bb 83       	std	Y+3, r27	; 0x03
		config.anchorAlarmOn=false;
    28e8:	df 01       	movw	r26, r30
    28ea:	a0 58       	subi	r26, 0x80	; 128
    28ec:	bf 4f       	sbci	r27, 0xFF	; 255
    28ee:	1c 92       	st	X, r1
		config.autopilotOn=false;
    28f0:	df 01       	movw	r26, r30
    28f2:	af 57       	subi	r26, 0x7F	; 127
    28f4:	bf 4f       	sbci	r27, 0xFF	; 255
    28f6:	1c 92       	st	X, r1
		config.autopilotAlarmOn=false;
    28f8:	df 01       	movw	r26, r30
    28fa:	ae 57       	subi	r26, 0x7E	; 126
    28fc:	bf 4f       	sbci	r27, 0xFF	; 255
    28fe:	1c 92       	st	X, r1
		config.gpsSpeedUnit=KTS;
    2900:	ef 01       	movw	r28, r30
    2902:	cd 57       	subi	r28, 0x7D	; 125
    2904:	df 4f       	sbci	r29, 0xFF	; 255
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	a0 e8       	ldi	r26, 0x80	; 128
    290c:	bf e3       	ldi	r27, 0x3F	; 63
    290e:	88 83       	st	Y, r24
    2910:	99 83       	std	Y+1, r25	; 0x01
    2912:	aa 83       	std	Y+2, r26	; 0x02
    2914:	bb 83       	std	Y+3, r27	; 0x03
		config.gpsAlarmOn=false;
    2916:	df 01       	movw	r26, r30
    2918:	a9 57       	subi	r26, 0x79	; 121
    291a:	bf 4f       	sbci	r27, 0xFF	; 255
    291c:	1c 92       	st	X, r1
		config.gpsAlarmFixTime=1000l*60*5; //5 min
    291e:	ef 01       	movw	r28, r30
    2920:	c8 57       	subi	r28, 0x78	; 120
    2922:	df 4f       	sbci	r29, 0xFF	; 255
    2924:	80 ee       	ldi	r24, 0xE0	; 224
    2926:	93 e9       	ldi	r25, 0x93	; 147
    2928:	a4 e0       	ldi	r26, 0x04	; 4
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	88 83       	st	Y, r24
    292e:	99 83       	std	Y+1, r25	; 0x01
    2930:	aa 83       	std	Y+2, r26	; 0x02
    2932:	bb 83       	std	Y+3, r27	; 0x03
		config.radarAlarmOn=false;
    2934:	df 01       	movw	r26, r30
    2936:	a4 57       	subi	r26, 0x74	; 116
    2938:	bf 4f       	sbci	r27, 0xFF	; 255
    293a:	1c 92       	st	X, r1
		config.mobAlarmOn=false;
    293c:	df 01       	movw	r26, r30
    293e:	a3 57       	subi	r26, 0x73	; 115
    2940:	bf 4f       	sbci	r27, 0xFF	; 255
    2942:	1c 92       	st	X, r1
		config.windAlarmSpeed=99;
    2944:	df 01       	movw	r26, r30
    2946:	a2 57       	subi	r26, 0x72	; 114
    2948:	bf 4f       	sbci	r27, 0xFF	; 255
    294a:	83 e6       	ldi	r24, 0x63	; 99
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	8d 93       	st	X+, r24
    2950:	9c 93       	st	X, r25
		config.windAlarmOn=false;
    2952:	df 01       	movw	r26, r30
    2954:	a0 57       	subi	r26, 0x70	; 112
    2956:	bf 4f       	sbci	r27, 0xFF	; 255
    2958:	1c 92       	st	X, r1
		config.windFactor=1000000;
    295a:	df 01       	movw	r26, r30
    295c:	af 56       	subi	r26, 0x6F	; 111
    295e:	bf 4f       	sbci	r27, 0xFF	; 255
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	34 e2       	ldi	r19, 0x24	; 36
    2964:	44 e7       	ldi	r20, 0x74	; 116
    2966:	59 e4       	ldi	r21, 0x49	; 73
    2968:	2d 93       	st	X+, r18
    296a:	3d 93       	st	X+, r19
    296c:	4d 93       	st	X+, r20
    296e:	5c 93       	st	X, r21
    2970:	13 97       	sbiw	r26, 0x03	; 3
	//}config;
//we change this if we change the struct so we can tell before reloading incompatible versions
	version=1;
    2972:	eb 56       	subi	r30, 0x6B	; 107
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	91 83       	std	Z+1, r25	; 0x01
    297c:	80 83       	st	Z, r24
}
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	08 95       	ret

00002984 <_ZN14FreeBoardModel21getAutopilotOffCourseEv>:

/*
 * Returns -179 to +180 as the degrees off course
 */
double FreeBoardModel::getAutopilotOffCourse(){
    2984:	ef 92       	push	r14
    2986:	ff 92       	push	r15
    2988:	0f 93       	push	r16
    298a:	1f 93       	push	r17
    298c:	cf 93       	push	r28
    298e:	df 93       	push	r29
    2990:	ec 01       	movw	r28, r24
	//get degrees between
	autopilotOffCourse=(getAutopilotTargetHeading()+360)- (getAutopilotCurrentHeading()+360);
    2992:	6f a5       	ldd	r22, Y+47	; 0x2f
    2994:	78 a9       	ldd	r23, Y+48	; 0x30
    2996:	89 a9       	ldd	r24, Y+49	; 0x31
    2998:	9a a9       	ldd	r25, Y+50	; 0x32
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	44 eb       	ldi	r20, 0xB4	; 180
    29a0:	53 e4       	ldi	r21, 0x43	; 67
    29a2:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    29a6:	7b 01       	movw	r14, r22
    29a8:	8c 01       	movw	r16, r24
    29aa:	6b a5       	ldd	r22, Y+43	; 0x2b
    29ac:	7c a5       	ldd	r23, Y+44	; 0x2c
    29ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    29b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	44 eb       	ldi	r20, 0xB4	; 180
    29b8:	53 e4       	ldi	r21, 0x43	; 67
    29ba:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    29be:	9b 01       	movw	r18, r22
    29c0:	ac 01       	movw	r20, r24
    29c2:	c8 01       	movw	r24, r16
    29c4:	b7 01       	movw	r22, r14
    29c6:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
	autopilotOffCourse=fmod(autopilotOffCourse,360.0);
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	44 eb       	ldi	r20, 0xB4	; 180
    29d0:	53 e4       	ldi	r21, 0x43	; 67
    29d2:	0e 94 bd 2e 	call	0x5d7a	; 0x5d7a <fmod>
    29d6:	7b 01       	movw	r14, r22
    29d8:	8c 01       	movw	r16, r24
    29da:	ed a2       	std	Y+37, r14	; 0x25
    29dc:	fe a2       	std	Y+38, r15	; 0x26
    29de:	0f a3       	std	Y+39, r16	; 0x27
    29e0:	18 a7       	std	Y+40, r17	; 0x28
	//if its >abs(180), then we want to go the -ve (shorter) direction
	if(fabs(autopilotOffCourse)>180)autopilotOffCourse=autopilotOffCourse-360;
    29e2:	c8 01       	movw	r24, r16
    29e4:	b7 01       	movw	r22, r14
    29e6:	9f 77       	andi	r25, 0x7F	; 127
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	44 e3       	ldi	r20, 0x34	; 52
    29ee:	53 e4       	ldi	r21, 0x43	; 67
    29f0:	0e 94 17 30 	call	0x602e	; 0x602e <__gesf2>
    29f4:	18 16       	cp	r1, r24
    29f6:	64 f4       	brge	.+24     	; 0x2a10 <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x8c>
    29f8:	c8 01       	movw	r24, r16
    29fa:	b7 01       	movw	r22, r14
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	44 eb       	ldi	r20, 0xB4	; 180
    2a02:	53 e4       	ldi	r21, 0x43	; 67
    2a04:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
    2a08:	6d a3       	std	Y+37, r22	; 0x25
    2a0a:	7e a3       	std	Y+38, r23	; 0x26
    2a0c:	8f a3       	std	Y+39, r24	; 0x27
    2a0e:	98 a7       	std	Y+40, r25	; 0x28
	return autopilotOffCourse;
}
    2a10:	5d a1       	ldd	r21, Y+37	; 0x25
    2a12:	4e a1       	ldd	r20, Y+38	; 0x26
    2a14:	3f a1       	ldd	r19, Y+39	; 0x27
    2a16:	28 a5       	ldd	r18, Y+40	; 0x28
    2a18:	65 2f       	mov	r22, r21
    2a1a:	74 2f       	mov	r23, r20
    2a1c:	83 2f       	mov	r24, r19
    2a1e:	92 2f       	mov	r25, r18
    2a20:	df 91       	pop	r29
    2a22:	cf 91       	pop	r28
    2a24:	1f 91       	pop	r17
    2a26:	0f 91       	pop	r16
    2a28:	ff 90       	pop	r15
    2a2a:	ef 90       	pop	r14
    2a2c:	08 95       	ret

00002a2e <_ZNK14FreeBoardModel12getAlarmLastEv>:
{
    return windAlarmTriggered;
}

unsigned long FreeBoardModel::getAlarmLast() const
{
    2a2e:	fc 01       	movw	r30, r24
    2a30:	60 81       	ld	r22, Z
    2a32:	71 81       	ldd	r23, Z+1	; 0x01
    return alarmLast;
}
    2a34:	82 81       	ldd	r24, Z+2	; 0x02
    2a36:	93 81       	ldd	r25, Z+3	; 0x03
    2a38:	08 95       	ret

00002a3a <_ZNK14FreeBoardModel14getAlarmSnoozeEv>:

unsigned long FreeBoardModel::getAlarmSnooze() const
{
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	64 81       	ldd	r22, Z+4	; 0x04
    2a3e:	75 81       	ldd	r23, Z+5	; 0x05
    return alarmSnooze;
}
    2a40:	86 81       	ldd	r24, Z+6	; 0x06
    2a42:	97 81       	ldd	r25, Z+7	; 0x07
    2a44:	08 95       	ret

00002a46 <_ZNK14FreeBoardModel17getAnchorDistanceEv>:

float FreeBoardModel::getAnchorDistance() const
{
    2a46:	fc 01       	movw	r30, r24
    return anchorDistance;
}
    2a48:	54 85       	ldd	r21, Z+12	; 0x0c
    2a4a:	45 85       	ldd	r20, Z+13	; 0x0d
    2a4c:	36 85       	ldd	r19, Z+14	; 0x0e
    2a4e:	27 85       	ldd	r18, Z+15	; 0x0f
    2a50:	65 2f       	mov	r22, r21
    2a52:	74 2f       	mov	r23, r20
    2a54:	83 2f       	mov	r24, r19
    2a56:	92 2f       	mov	r25, r18
    2a58:	08 95       	ret

00002a5a <_ZNK14FreeBoardModel10getAnchorEEv>:

float FreeBoardModel::getAnchorE() const
{
    2a5a:	fc 01       	movw	r30, r24
    return anchorE;
}
    2a5c:	55 8d       	ldd	r21, Z+29	; 0x1d
    2a5e:	46 8d       	ldd	r20, Z+30	; 0x1e
    2a60:	37 8d       	ldd	r19, Z+31	; 0x1f
    2a62:	20 a1       	ldd	r18, Z+32	; 0x20
    2a64:	65 2f       	mov	r22, r21
    2a66:	74 2f       	mov	r23, r20
    2a68:	83 2f       	mov	r24, r19
    2a6a:	92 2f       	mov	r25, r18
    2a6c:	08 95       	ret

00002a6e <_ZNK14FreeBoardModel12getAnchorLatEv>:

float FreeBoardModel::getAnchorLat() const
{
    return config.anchorLat;
    2a6e:	fc 01       	movw	r30, r24
    2a70:	ec 58       	subi	r30, 0x8C	; 140
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
}
    2a74:	50 81       	ld	r21, Z
    2a76:	41 81       	ldd	r20, Z+1	; 0x01
    2a78:	32 81       	ldd	r19, Z+2	; 0x02
    2a7a:	23 81       	ldd	r18, Z+3	; 0x03
    2a7c:	65 2f       	mov	r22, r21
    2a7e:	74 2f       	mov	r23, r20
    2a80:	83 2f       	mov	r24, r19
    2a82:	92 2f       	mov	r25, r18
    2a84:	08 95       	ret

00002a86 <_ZNK14FreeBoardModel12getAnchorLonEv>:

float FreeBoardModel::getAnchorLon() const
{
    return config.anchorLon;
    2a86:	fc 01       	movw	r30, r24
    2a88:	e8 58       	subi	r30, 0x88	; 136
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
}
    2a8c:	50 81       	ld	r21, Z
    2a8e:	41 81       	ldd	r20, Z+1	; 0x01
    2a90:	32 81       	ldd	r19, Z+2	; 0x02
    2a92:	23 81       	ldd	r18, Z+3	; 0x03
    2a94:	65 2f       	mov	r22, r21
    2a96:	74 2f       	mov	r23, r20
    2a98:	83 2f       	mov	r24, r19
    2a9a:	92 2f       	mov	r25, r18
    2a9c:	08 95       	ret

00002a9e <_ZNK14FreeBoardModel20getAnchorMaxDistanceEv>:

float FreeBoardModel::getAnchorMaxDistance() const
{
    2a9e:	fc 01       	movw	r30, r24
    return anchorMaxDistance;
}
    2aa0:	50 89       	ldd	r21, Z+16	; 0x10
    2aa2:	41 89       	ldd	r20, Z+17	; 0x11
    2aa4:	32 89       	ldd	r19, Z+18	; 0x12
    2aa6:	23 89       	ldd	r18, Z+19	; 0x13
    2aa8:	65 2f       	mov	r22, r21
    2aaa:	74 2f       	mov	r23, r20
    2aac:	83 2f       	mov	r24, r19
    2aae:	92 2f       	mov	r25, r18
    2ab0:	08 95       	ret

00002ab2 <_ZNK14FreeBoardModel10getAnchorNEv>:

float FreeBoardModel::getAnchorN() const
{
    2ab2:	fc 01       	movw	r30, r24
    return anchorN;
}
    2ab4:	55 89       	ldd	r21, Z+21	; 0x15
    2ab6:	46 89       	ldd	r20, Z+22	; 0x16
    2ab8:	37 89       	ldd	r19, Z+23	; 0x17
    2aba:	20 8d       	ldd	r18, Z+24	; 0x18
    2abc:	65 2f       	mov	r22, r21
    2abe:	74 2f       	mov	r23, r20
    2ac0:	83 2f       	mov	r24, r19
    2ac2:	92 2f       	mov	r25, r18
    2ac4:	08 95       	ret

00002ac6 <_ZNK14FreeBoardModel15getAnchorRadiusEv>:

float FreeBoardModel::getAnchorRadius() const
{
    return config.anchorRadius;
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	e4 58       	subi	r30, 0x84	; 132
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
}
    2acc:	50 81       	ld	r21, Z
    2ace:	41 81       	ldd	r20, Z+1	; 0x01
    2ad0:	32 81       	ldd	r19, Z+2	; 0x02
    2ad2:	23 81       	ldd	r18, Z+3	; 0x03
    2ad4:	65 2f       	mov	r22, r21
    2ad6:	74 2f       	mov	r23, r20
    2ad8:	83 2f       	mov	r24, r19
    2ada:	92 2f       	mov	r25, r18
    2adc:	08 95       	ret

00002ade <_ZNK14FreeBoardModel18getAnchorRadiusDegEv>:

float FreeBoardModel::getAnchorRadiusDeg() const
{
    2ade:	fc 01       	movw	r30, r24
    return anchorRadiusDeg;
}
    2ae0:	50 85       	ldd	r21, Z+8	; 0x08
    2ae2:	41 85       	ldd	r20, Z+9	; 0x09
    2ae4:	32 85       	ldd	r19, Z+10	; 0x0a
    2ae6:	23 85       	ldd	r18, Z+11	; 0x0b
    2ae8:	65 2f       	mov	r22, r21
    2aea:	74 2f       	mov	r23, r20
    2aec:	83 2f       	mov	r24, r19
    2aee:	92 2f       	mov	r25, r18
    2af0:	08 95       	ret

00002af2 <_ZNK14FreeBoardModel10getAnchorSEv>:

float FreeBoardModel::getAnchorS() const
{
    2af2:	fc 01       	movw	r30, r24
    return anchorS;
}
    2af4:	51 8d       	ldd	r21, Z+25	; 0x19
    2af6:	42 8d       	ldd	r20, Z+26	; 0x1a
    2af8:	33 8d       	ldd	r19, Z+27	; 0x1b
    2afa:	24 8d       	ldd	r18, Z+28	; 0x1c
    2afc:	65 2f       	mov	r22, r21
    2afe:	74 2f       	mov	r23, r20
    2b00:	83 2f       	mov	r24, r19
    2b02:	92 2f       	mov	r25, r18
    2b04:	08 95       	ret

00002b06 <_ZNK14FreeBoardModel10getAnchorWEv>:

float FreeBoardModel::getAnchorW() const
{
    2b06:	fc 01       	movw	r30, r24
    return anchorW;
}
    2b08:	51 a1       	ldd	r21, Z+33	; 0x21
    2b0a:	42 a1       	ldd	r20, Z+34	; 0x22
    2b0c:	33 a1       	ldd	r19, Z+35	; 0x23
    2b0e:	24 a1       	ldd	r18, Z+36	; 0x24
    2b10:	65 2f       	mov	r22, r21
    2b12:	74 2f       	mov	r23, r20
    2b14:	83 2f       	mov	r24, r19
    2b16:	92 2f       	mov	r25, r18
    2b18:	08 95       	ret

00002b1a <_ZN14FreeBoardModel25getAutopilotRudderCommandEv>:
    return autopilotAlarmMaxXTError;
}


double FreeBoardModel::getAutopilotRudderCommand()
{
    2b1a:	fc 01       	movw	r30, r24
    return autopilotRudderCommand;
}
    2b1c:	53 a9       	ldd	r21, Z+51	; 0x33
    2b1e:	44 a9       	ldd	r20, Z+52	; 0x34
    2b20:	35 a9       	ldd	r19, Z+53	; 0x35
    2b22:	26 a9       	ldd	r18, Z+54	; 0x36
    2b24:	65 2f       	mov	r22, r21
    2b26:	74 2f       	mov	r23, r20
    2b28:	83 2f       	mov	r24, r19
    2b2a:	92 2f       	mov	r25, r18
    2b2c:	08 95       	ret

00002b2e <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>:

double FreeBoardModel::getAutopilotTargetHeading()
{
    2b2e:	fc 01       	movw	r30, r24
    return autopilotTargetHeading;
}
    2b30:	57 a5       	ldd	r21, Z+47	; 0x2f
    2b32:	40 a9       	ldd	r20, Z+48	; 0x30
    2b34:	31 a9       	ldd	r19, Z+49	; 0x31
    2b36:	22 a9       	ldd	r18, Z+50	; 0x32
    2b38:	65 2f       	mov	r22, r21
    2b3a:	74 2f       	mov	r23, r20
    2b3c:	83 2f       	mov	r24, r19
    2b3e:	92 2f       	mov	r25, r18
    2b40:	08 95       	ret

00002b42 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>:
double FreeBoardModel::getAutopilotCurrentHeading()
{
    2b42:	fc 01       	movw	r30, r24
    return autopilotCurrentHeading;
}
    2b44:	53 a5       	ldd	r21, Z+43	; 0x2b
    2b46:	44 a5       	ldd	r20, Z+44	; 0x2c
    2b48:	35 a5       	ldd	r19, Z+45	; 0x2d
    2b4a:	26 a5       	ldd	r18, Z+46	; 0x2e
    2b4c:	65 2f       	mov	r22, r21
    2b4e:	74 2f       	mov	r23, r20
    2b50:	83 2f       	mov	r24, r19
    2b52:	92 2f       	mov	r25, r18
    2b54:	08 95       	ret

00002b56 <_ZNK14FreeBoardModel13getGpsLastFixEv>:
    return gpsCourse;
}

unsigned long FreeBoardModel::getGpsLastFix() const
{
    return gpsLastFix;
    2b56:	fc 01       	movw	r30, r24
    2b58:	eb 5b       	subi	r30, 0xBB	; 187
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
{
    return gpsCourse;
}

unsigned long FreeBoardModel::getGpsLastFix() const
{
    2b5c:	60 81       	ld	r22, Z
    2b5e:	71 81       	ldd	r23, Z+1	; 0x01
    return gpsLastFix;
}
    2b60:	82 81       	ldd	r24, Z+2	; 0x02
    2b62:	93 81       	ldd	r25, Z+3	; 0x03
    2b64:	08 95       	ret

00002b66 <_ZNK14FreeBoardModel14getGpsLatitudeEv>:

float FreeBoardModel::getGpsLatitude() const
{
    return gpsLatitude;
    2b66:	fc 01       	movw	r30, r24
    2b68:	e2 5b       	subi	r30, 0xB2	; 178
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
}
    2b6c:	50 81       	ld	r21, Z
    2b6e:	41 81       	ldd	r20, Z+1	; 0x01
    2b70:	32 81       	ldd	r19, Z+2	; 0x02
    2b72:	23 81       	ldd	r18, Z+3	; 0x03
    2b74:	65 2f       	mov	r22, r21
    2b76:	74 2f       	mov	r23, r20
    2b78:	83 2f       	mov	r24, r19
    2b7a:	92 2f       	mov	r25, r18
    2b7c:	08 95       	ret

00002b7e <_ZNK14FreeBoardModel15getGpsLongitudeEv>:

float FreeBoardModel::getGpsLongitude() const
{
    return gpsLongitude;
    2b7e:	fc 01       	movw	r30, r24
    2b80:	ee 5a       	subi	r30, 0xAE	; 174
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
}
    2b84:	50 81       	ld	r21, Z
    2b86:	41 81       	ldd	r20, Z+1	; 0x01
    2b88:	32 81       	ldd	r19, Z+2	; 0x02
    2b8a:	23 81       	ldd	r18, Z+3	; 0x03
    2b8c:	65 2f       	mov	r22, r21
    2b8e:	74 2f       	mov	r23, r20
    2b90:	83 2f       	mov	r24, r19
    2b92:	92 2f       	mov	r25, r18
    2b94:	08 95       	ret

00002b96 <_ZNK14FreeBoardModel15getGpsSpeedUnitEv>:
    return gpsSpeed;
}

float FreeBoardModel::getGpsSpeedUnit() const
{
    return config.gpsSpeedUnit;
    2b96:	fc 01       	movw	r30, r24
    2b98:	ed 57       	subi	r30, 0x7D	; 125
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
}
    2b9c:	50 81       	ld	r21, Z
    2b9e:	41 81       	ldd	r20, Z+1	; 0x01
    2ba0:	32 81       	ldd	r19, Z+2	; 0x02
    2ba2:	23 81       	ldd	r18, Z+3	; 0x03
    2ba4:	65 2f       	mov	r22, r21
    2ba6:	74 2f       	mov	r23, r20
    2ba8:	83 2f       	mov	r24, r19
    2baa:	92 2f       	mov	r25, r18
    2bac:	08 95       	ret

00002bae <_ZNK14FreeBoardModel12getGpsStatusEv>:

char FreeBoardModel::getGpsStatus() const
{
    return gpsStatus;
    2bae:	fc 01       	movw	r30, r24
    2bb0:	e3 5b       	subi	r30, 0xB3	; 179
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
}
    2bb4:	80 81       	ld	r24, Z
    2bb6:	08 95       	ret

00002bb8 <_ZNK14FreeBoardModel17getWindAlarmSpeedEv>:
    return radarAlarmTriggered;
}

int FreeBoardModel::getWindAlarmSpeed() const
{
    return config.windAlarmSpeed;
    2bb8:	fc 01       	movw	r30, r24
    2bba:	e2 57       	subi	r30, 0x72	; 114
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
}
    2bbe:	80 81       	ld	r24, Z
    2bc0:	91 81       	ldd	r25, Z+1	; 0x01
    2bc2:	08 95       	ret

00002bc4 <_ZNK14FreeBoardModel18getWindApparentDirEv>:

int FreeBoardModel::getWindApparentDir() const
{
    return windApparentDir;
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	ef 58       	subi	r30, 0x8F	; 143
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
}
    2bca:	80 81       	ld	r24, Z
    2bcc:	91 81       	ldd	r25, Z+1	; 0x01
    2bce:	08 95       	ret

00002bd0 <_ZNK14FreeBoardModel14getWindAverageEv>:

int FreeBoardModel::getWindAverage() const
{
    return windAverage;
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	e3 59       	subi	r30, 0x93	; 147
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
}
    2bd6:	80 81       	ld	r24, Z
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
    2bda:	08 95       	ret

00002bdc <_ZNK14FreeBoardModel13getWindFactorEv>:

float FreeBoardModel::getWindFactor() const
{
    return config.windFactor;
    2bdc:	fc 01       	movw	r30, r24
    2bde:	ef 56       	subi	r30, 0x6F	; 111
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
}
    2be2:	50 81       	ld	r21, Z
    2be4:	41 81       	ldd	r20, Z+1	; 0x01
    2be6:	32 81       	ldd	r19, Z+2	; 0x02
    2be8:	23 81       	ldd	r18, Z+3	; 0x03
    2bea:	65 2f       	mov	r22, r21
    2bec:	74 2f       	mov	r23, r20
    2bee:	83 2f       	mov	r24, r19
    2bf0:	92 2f       	mov	r25, r18
    2bf2:	08 95       	ret

00002bf4 <_ZNK14FreeBoardModel10getWindMaxEv>:
    return windLastUpdate;
}

int FreeBoardModel::getWindMax() const
{
    return windMax;
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	e1 59       	subi	r30, 0x91	; 145
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
}
    2bfa:	80 81       	ld	r24, Z
    2bfc:	91 81       	ldd	r25, Z+1	; 0x01
    2bfe:	08 95       	ret

00002c00 <_ZNK14FreeBoardModel15isAnchorAlarmOnEv>:


bool FreeBoardModel::isAnchorAlarmOn() const
{
    return config.anchorAlarmOn;
    2c00:	fc 01       	movw	r30, r24
    2c02:	e0 58       	subi	r30, 0x80	; 128
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
}
    2c06:	80 81       	ld	r24, Z
    2c08:	08 95       	ret

00002c0a <_ZNK14FreeBoardModel11isGpsDecodeEv>:
    return gpsAlarmTriggered;
}

bool FreeBoardModel::isGpsDecode() const
{
    return gpsDecode;
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	ec 5b       	subi	r30, 0xBC	; 188
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
}
    2c10:	80 81       	ld	r24, Z
    2c12:	08 95       	ret

00002c14 <_ZNK14FreeBoardModel13isWindAlarmOnEv>:

bool FreeBoardModel::isWindAlarmOn() const
{
    return config.windAlarmOn;
    2c14:	fc 01       	movw	r30, r24
    2c16:	e0 57       	subi	r30, 0x70	; 112
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
}
    2c1a:	80 81       	ld	r24, Z
    2c1c:	08 95       	ret

00002c1e <_ZN14FreeBoardModel12setAlarmLastEm>:


void FreeBoardModel::setAlarmLast(unsigned long  alarmLast)
{
    this->alarmLast = alarmLast;
    2c1e:	fc 01       	movw	r30, r24
    2c20:	40 83       	st	Z, r20
    2c22:	51 83       	std	Z+1, r21	; 0x01
    2c24:	62 83       	std	Z+2, r22	; 0x02
    2c26:	73 83       	std	Z+3, r23	; 0x03
}
    2c28:	08 95       	ret

00002c2a <_ZN14FreeBoardModel14setAlarmSnoozeEm>:

void FreeBoardModel::setAlarmSnooze(unsigned long  alarmSnooze)
{
    this->alarmSnooze = alarmSnooze;
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	44 83       	std	Z+4, r20	; 0x04
    2c2e:	55 83       	std	Z+5, r21	; 0x05
    2c30:	66 83       	std	Z+6, r22	; 0x06
    2c32:	77 83       	std	Z+7, r23	; 0x07
}
    2c34:	08 95       	ret

00002c36 <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>:
    this->config.anchorAlarmOn = anchorAlarmOn;
}

void FreeBoardModel::setAnchorAlarmTriggered(bool anchorAlarmTriggered)
{
    this->anchorAlarmTriggered = anchorAlarmTriggered;
    2c36:	fc 01       	movw	r30, r24
    2c38:	64 8b       	std	Z+20, r22	; 0x14
}
    2c3a:	08 95       	ret

00002c3c <_ZN14FreeBoardModel17setAnchorDistanceEf>:

void FreeBoardModel::setAnchorDistance(float anchorDistance)
{
    this->anchorDistance = anchorDistance;
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	44 87       	std	Z+12, r20	; 0x0c
    2c40:	55 87       	std	Z+13, r21	; 0x0d
    2c42:	66 87       	std	Z+14, r22	; 0x0e
    2c44:	77 87       	std	Z+15, r23	; 0x0f
}
    2c46:	08 95       	ret

00002c48 <_ZN14FreeBoardModel10setAnchorEEf>:

void FreeBoardModel::setAnchorE(float anchorE)
{
    this->anchorE = anchorE;
    2c48:	fc 01       	movw	r30, r24
    2c4a:	45 8f       	std	Z+29, r20	; 0x1d
    2c4c:	56 8f       	std	Z+30, r21	; 0x1e
    2c4e:	67 8f       	std	Z+31, r22	; 0x1f
    2c50:	70 a3       	std	Z+32, r23	; 0x20
}
    2c52:	08 95       	ret

00002c54 <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>:
    this->config.anchorLon = anchorLon;
}

void FreeBoardModel::setAnchorMaxDistance(float anchorMaxDistance)
{
    this->anchorMaxDistance = anchorMaxDistance;
    2c54:	fc 01       	movw	r30, r24
    2c56:	40 8b       	std	Z+16, r20	; 0x10
    2c58:	51 8b       	std	Z+17, r21	; 0x11
    2c5a:	62 8b       	std	Z+18, r22	; 0x12
    2c5c:	73 8b       	std	Z+19, r23	; 0x13
}
    2c5e:	08 95       	ret

00002c60 <_ZN14FreeBoardModel10setAnchorNEf>:

void FreeBoardModel::setAnchorN(float anchorN)
{
    this->anchorN = anchorN;
    2c60:	fc 01       	movw	r30, r24
    2c62:	45 8b       	std	Z+21, r20	; 0x15
    2c64:	56 8b       	std	Z+22, r21	; 0x16
    2c66:	67 8b       	std	Z+23, r22	; 0x17
    2c68:	70 8f       	std	Z+24, r23	; 0x18
}
    2c6a:	08 95       	ret

00002c6c <_ZN14FreeBoardModel18setAnchorRadiusDegEf>:
    this->config.anchorRadius = anchorRadius;
}

void FreeBoardModel::setAnchorRadiusDeg(float anchorRadiusDeg)
{
    this->anchorRadiusDeg = anchorRadiusDeg;
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	40 87       	std	Z+8, r20	; 0x08
    2c70:	51 87       	std	Z+9, r21	; 0x09
    2c72:	62 87       	std	Z+10, r22	; 0x0a
    2c74:	73 87       	std	Z+11, r23	; 0x0b
}
    2c76:	08 95       	ret

00002c78 <_ZN14FreeBoardModel10setAnchorSEf>:

void FreeBoardModel::setAnchorS(float anchorS)
{
    this->anchorS = anchorS;
    2c78:	fc 01       	movw	r30, r24
    2c7a:	41 8f       	std	Z+25, r20	; 0x19
    2c7c:	52 8f       	std	Z+26, r21	; 0x1a
    2c7e:	63 8f       	std	Z+27, r22	; 0x1b
    2c80:	74 8f       	std	Z+28, r23	; 0x1c
}
    2c82:	08 95       	ret

00002c84 <_ZN14FreeBoardModel10setAnchorWEf>:

void FreeBoardModel::setAnchorW(float anchorW)
{
    this->anchorW = anchorW;
    2c84:	fc 01       	movw	r30, r24
    2c86:	41 a3       	std	Z+33, r20	; 0x21
    2c88:	52 a3       	std	Z+34, r21	; 0x22
    2c8a:	63 a3       	std	Z+35, r22	; 0x23
    2c8c:	74 a3       	std	Z+36, r23	; 0x24
}
    2c8e:	08 95       	ret

00002c90 <_ZN14FreeBoardModel26setAutopilotCurrentHeadingEd>:
}


void FreeBoardModel::setAutopilotCurrentHeading(double autopilotCurrentHeading)
{
    this->autopilotCurrentHeading = autopilotCurrentHeading;
    2c90:	fc 01       	movw	r30, r24
    2c92:	43 a7       	std	Z+43, r20	; 0x2b
    2c94:	54 a7       	std	Z+44, r21	; 0x2c
    2c96:	65 a7       	std	Z+45, r22	; 0x2d
    2c98:	76 a7       	std	Z+46, r23	; 0x2e
}
    2c9a:	08 95       	ret

00002c9c <_ZN14FreeBoardModel25setAutopilotRudderCommandEd>:

void FreeBoardModel::setAutopilotRudderCommand(double autopilotRudderCommand)
{
    this->autopilotRudderCommand = autopilotRudderCommand;
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	43 ab       	std	Z+51, r20	; 0x33
    2ca0:	54 ab       	std	Z+52, r21	; 0x34
    2ca2:	65 ab       	std	Z+53, r22	; 0x35
    2ca4:	76 ab       	std	Z+54, r23	; 0x36
}
    2ca6:	08 95       	ret

00002ca8 <_ZN14FreeBoardModel25setAutopilotTargetHeadingEd>:



void FreeBoardModel::setAutopilotTargetHeading(double autopilotTargetHeading)
{
    this->autopilotTargetHeading = autopilotTargetHeading;
    2ca8:	fc 01       	movw	r30, r24
    2caa:	47 a7       	std	Z+47, r20	; 0x2f
    2cac:	50 ab       	std	Z+48, r21	; 0x30
    2cae:	61 ab       	std	Z+49, r22	; 0x31
    2cb0:	72 ab       	std	Z+50, r23	; 0x32
}
    2cb2:	08 95       	ret

00002cb4 <_ZN14FreeBoardModel12setGpsCourseEf>:
    this->gpsAlarmTriggered = gpsAlarmTriggered;
}

void FreeBoardModel::setGpsCourse(float gpsCourse)
{
    this->gpsCourse = gpsCourse;
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	e6 5a       	subi	r30, 0xA6	; 166
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	40 83       	st	Z, r20
    2cbc:	51 83       	std	Z+1, r21	; 0x01
    2cbe:	62 83       	std	Z+2, r22	; 0x02
    2cc0:	73 83       	std	Z+3, r23	; 0x03
}
    2cc2:	08 95       	ret

00002cc4 <_ZN14FreeBoardModel12setGpsDecodeEb>:

void FreeBoardModel::setGpsDecode(bool gpsDecode)
{
    this->gpsDecode = gpsDecode;
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	ec 5b       	subi	r30, 0xBC	; 188
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	60 83       	st	Z, r22
}
    2ccc:	08 95       	ret

00002cce <_ZN14FreeBoardModel13setGpsLastFixEm>:

void FreeBoardModel::setGpsLastFix(unsigned long  gpsLastFix)
{
    this->gpsLastFix = gpsLastFix;
    2cce:	fc 01       	movw	r30, r24
    2cd0:	eb 5b       	subi	r30, 0xBB	; 187
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	40 83       	st	Z, r20
    2cd6:	51 83       	std	Z+1, r21	; 0x01
    2cd8:	62 83       	std	Z+2, r22	; 0x02
    2cda:	73 83       	std	Z+3, r23	; 0x03
}
    2cdc:	08 95       	ret

00002cde <_ZN14FreeBoardModel14setGpsLatitudeEf>:

void FreeBoardModel::setGpsLatitude(float gpsLatitude)
{
    this->gpsLatitude = gpsLatitude;
    2cde:	fc 01       	movw	r30, r24
    2ce0:	e2 5b       	subi	r30, 0xB2	; 178
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	40 83       	st	Z, r20
    2ce6:	51 83       	std	Z+1, r21	; 0x01
    2ce8:	62 83       	std	Z+2, r22	; 0x02
    2cea:	73 83       	std	Z+3, r23	; 0x03
}
    2cec:	08 95       	ret

00002cee <_ZN14FreeBoardModel15setGpsLongitudeEf>:

void FreeBoardModel::setGpsLongitude(float gpsLongitude)
{
    this->gpsLongitude = gpsLongitude;
    2cee:	fc 01       	movw	r30, r24
    2cf0:	ee 5a       	subi	r30, 0xAE	; 174
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	40 83       	st	Z, r20
    2cf6:	51 83       	std	Z+1, r21	; 0x01
    2cf8:	62 83       	std	Z+2, r22	; 0x02
    2cfa:	73 83       	std	Z+3, r23	; 0x03
}
    2cfc:	08 95       	ret

00002cfe <_ZN14FreeBoardModel11setGpsSpeedEf>:

void FreeBoardModel::setGpsSpeed(float gpsSpeed)
{
    this->gpsSpeed = gpsSpeed;
    2cfe:	fc 01       	movw	r30, r24
    2d00:	ea 5a       	subi	r30, 0xAA	; 170
    2d02:	ff 4f       	sbci	r31, 0xFF	; 255
    2d04:	40 83       	st	Z, r20
    2d06:	51 83       	std	Z+1, r21	; 0x01
    2d08:	62 83       	std	Z+2, r22	; 0x02
    2d0a:	73 83       	std	Z+3, r23	; 0x03
}
    2d0c:	08 95       	ret

00002d0e <_ZN14FreeBoardModel12setGpsStatusEc>:
    this->config.gpsSpeedUnit = gpsSpeedUnit;
}

void FreeBoardModel::setGpsStatus(char gpsStatus)
{
    this->gpsStatus = gpsStatus;
    2d0e:	fc 01       	movw	r30, r24
    2d10:	e3 5b       	subi	r30, 0xB3	; 179
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	60 83       	st	Z, r22
}
    2d16:	08 95       	ret

00002d18 <_ZN14FreeBoardModel9setGpsUtcEf>:

void FreeBoardModel::setGpsUtc(float gpsUtc)
{
    this->gpsUtc = gpsUtc;
    2d18:	fc 01       	movw	r30, r24
    2d1a:	e7 5b       	subi	r30, 0xB7	; 183
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	40 83       	st	Z, r20
    2d20:	51 83       	std	Z+1, r21	; 0x01
    2d22:	62 83       	std	Z+2, r22	; 0x02
    2d24:	73 83       	std	Z+3, r23	; 0x03
}
    2d26:	08 95       	ret

00002d28 <_ZN14FreeBoardModel17setWindAlarmSpeedEi>:
    this->config.windAlarmOn = windAlarmOn;
}

void FreeBoardModel::setWindAlarmSpeed(int windAlarmSpeed)
{
    this->config.windAlarmSpeed = windAlarmSpeed;
    2d28:	fc 01       	movw	r30, r24
    2d2a:	e2 57       	subi	r30, 0x72	; 114
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	71 83       	std	Z+1, r23	; 0x01
    2d30:	60 83       	st	Z, r22
}
    2d32:	08 95       	ret

00002d34 <_ZN14FreeBoardModel18setWindApparentDirEi>:

void FreeBoardModel::setWindApparentDir(int windApparentDir)
{
    this->windApparentDir = windApparentDir;
    2d34:	fc 01       	movw	r30, r24
    2d36:	ef 58       	subi	r30, 0x8F	; 143
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	71 83       	std	Z+1, r23	; 0x01
    2d3c:	60 83       	st	Z, r22
}
    2d3e:	08 95       	ret

00002d40 <_ZN14FreeBoardModel14setWindAverageEi>:

void FreeBoardModel::setWindAverage(int windAverage)
{
    this->windAverage = windAverage;
    2d40:	fc 01       	movw	r30, r24
    2d42:	e3 59       	subi	r30, 0x93	; 147
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	71 83       	std	Z+1, r23	; 0x01
    2d48:	60 83       	st	Z, r22
}
    2d4a:	08 95       	ret

00002d4c <_ZN14FreeBoardModel17setWindLastUpdateEm>:
    this->config.windFactor = windFactor;
}

void FreeBoardModel::setWindLastUpdate(unsigned long  windLastUpdate)
{
    this->windLastUpdate = windLastUpdate;
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	e7 59       	subi	r30, 0x97	; 151
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	40 83       	st	Z, r20
    2d54:	51 83       	std	Z+1, r21	; 0x01
    2d56:	62 83       	std	Z+2, r22	; 0x02
    2d58:	73 83       	std	Z+3, r23	; 0x03
}
    2d5a:	08 95       	ret

00002d5c <_ZNK14FreeBoardModel16isAlarmTriggeredEv>:

volatile bool FreeBoardModel::isAlarmTriggered() const
{
    2d5c:	fc 01       	movw	r30, r24
    return windAlarmTriggered && radarAlarmTriggered && gpsAlarmTriggered
    		&& anchorAlarmTriggered && autopilotAlarmTriggered && mobAlarmTriggered;
    2d5e:	dc 01       	movw	r26, r24
    2d60:	ad 58       	subi	r26, 0x8D	; 141
    2d62:	bf 4f       	sbci	r27, 0xFF	; 255
    2d64:	8c 91       	ld	r24, X
    2d66:	88 23       	and	r24, r24
    2d68:	b1 f0       	breq	.+44     	; 0x2d96 <_ZNK14FreeBoardModel16isAlarmTriggeredEv+0x3a>
    2d6a:	df 01       	movw	r26, r30
    2d6c:	a9 59       	subi	r26, 0x99	; 153
    2d6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d70:	8c 91       	ld	r24, X
    2d72:	88 23       	and	r24, r24
    2d74:	81 f0       	breq	.+32     	; 0x2d96 <_ZNK14FreeBoardModel16isAlarmTriggeredEv+0x3a>
    2d76:	df 01       	movw	r26, r30
    2d78:	a2 5a       	subi	r26, 0xA2	; 162
    2d7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d7c:	8c 91       	ld	r24, X
    2d7e:	88 23       	and	r24, r24
    2d80:	51 f0       	breq	.+20     	; 0x2d96 <_ZNK14FreeBoardModel16isAlarmTriggeredEv+0x3a>
    2d82:	84 89       	ldd	r24, Z+20	; 0x14
    2d84:	88 23       	and	r24, r24
    2d86:	39 f0       	breq	.+14     	; 0x2d96 <_ZNK14FreeBoardModel16isAlarmTriggeredEv+0x3a>
    2d88:	87 a9       	ldd	r24, Z+55	; 0x37
    2d8a:	88 23       	and	r24, r24
    2d8c:	31 f0       	breq	.+12     	; 0x2d9a <_ZNK14FreeBoardModel16isAlarmTriggeredEv+0x3e>
    2d8e:	e8 59       	subi	r30, 0x98	; 152
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	80 81       	ld	r24, Z
    2d94:	08 95       	ret
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	08 95       	ret
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
}
    2d9c:	08 95       	ret

00002d9e <_ZNK14FreeBoardModel13isAutopilotOnEv>:
    this->config.mobAlarmOn = mobAlarmOn;
}

bool FreeBoardModel::isAutopilotOn() const
{
    return config.autopilotOn;
    2d9e:	fc 01       	movw	r30, r24
    2da0:	ef 57       	subi	r30, 0x7F	; 127
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
}
    2da4:	80 81       	ld	r24, Z
    2da6:	08 95       	ret

00002da8 <_ZN14FreeBoardModel14setAutopilotOnEb>:

void FreeBoardModel::setAutopilotOn(bool autopilotOn)
{
    this->config.autopilotOn = autopilotOn;
    2da8:	fc 01       	movw	r30, r24
    2daa:	ef 57       	subi	r30, 0x7F	; 127
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	60 83       	st	Z, r22
}
    2db0:	08 95       	ret

00002db2 <_ZN14FreeBoardModel10setWindMaxEi>:
    this->config.radarAlarmOn = radarAlarmOn;
}

void FreeBoardModel::setWindMax(int windMax)
{
    this->windMax = windMax;
    2db2:	fc 01       	movw	r30, r24
    2db4:	e1 59       	subi	r30, 0x91	; 145
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	71 83       	std	Z+1, r23	; 0x01
    2dba:	60 83       	st	Z, r22
}
    2dbc:	08 95       	ret

00002dbe <_ZN14FreeBoardModel21setWindAlarmTriggeredEb>:

void FreeBoardModel::setWindAlarmTriggered(bool windAlarmTriggered)
{
    this->windAlarmTriggered = windAlarmTriggered;
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	ed 58       	subi	r30, 0x8D	; 141
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	60 83       	st	Z, r22
}
    2dc6:	08 95       	ret

00002dc8 <_Z20EEPROM_writeAnythingIiEiiRKT_>:
	//if its >abs(180), then we want to go the -ve (shorter) direction
	if(fabs(autopilotOffCourse)>180)autopilotOffCourse=autopilotOffCourse-360;
	return autopilotOffCourse;
}

template<class T> int EEPROM_writeAnything(int ee, const T& value) {
    2dc8:	ef 92       	push	r14
    2dca:	ff 92       	push	r15
    2dcc:	0f 93       	push	r16
    2dce:	1f 93       	push	r17
    2dd0:	cf 93       	push	r28
    2dd2:	df 93       	push	r29
    2dd4:	ec 01       	movw	r28, r24
	const unsigned char* p = (const unsigned char*) (const void*) &value;
    2dd6:	7b 01       	movw	r14, r22
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		EEPROM.write(ee++, *p++);
    2dd8:	0c ec       	ldi	r16, 0xCC	; 204
    2dda:	15 e0       	ldi	r17, 0x05	; 5
    2ddc:	c8 01       	movw	r24, r16
    2dde:	be 01       	movw	r22, r28
    2de0:	f7 01       	movw	r30, r14
    2de2:	40 81       	ld	r20, Z
    2de4:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <_ZN11EEPROMClass5writeEih>
    2de8:	be 01       	movw	r22, r28
    2dea:	6f 5f       	subi	r22, 0xFF	; 255
    2dec:	7f 4f       	sbci	r23, 0xFF	; 255
    2dee:	c8 01       	movw	r24, r16
    2df0:	f7 01       	movw	r30, r14
    2df2:	41 81       	ldd	r20, Z+1	; 0x01
    2df4:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <_ZN11EEPROMClass5writeEih>
	return i;
}
    2df8:	82 e0       	ldi	r24, 0x02	; 2
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	df 91       	pop	r29
    2dfe:	cf 91       	pop	r28
    2e00:	1f 91       	pop	r17
    2e02:	0f 91       	pop	r16
    2e04:	ff 90       	pop	r15
    2e06:	ef 90       	pop	r14
    2e08:	08 95       	ret

00002e0a <_Z20EEPROM_writeAnythingIN14FreeBoardModel13ConfigurationEEiiRKT_>:
	//if its >abs(180), then we want to go the -ve (shorter) direction
	if(fabs(autopilotOffCourse)>180)autopilotOffCourse=autopilotOffCourse-360;
	return autopilotOffCourse;
}

template<class T> int EEPROM_writeAnything(int ee, const T& value) {
    2e0a:	ef 92       	push	r14
    2e0c:	ff 92       	push	r15
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	cf 93       	push	r28
    2e14:	df 93       	push	r29
    2e16:	9c 01       	movw	r18, r24
    2e18:	eb 01       	movw	r28, r22
    2e1a:	81 e2       	ldi	r24, 0x21	; 33
    2e1c:	e8 2e       	mov	r14, r24
    2e1e:	f1 2c       	mov	r15, r1
    2e20:	e6 0e       	add	r14, r22
    2e22:	f7 1e       	adc	r15, r23
    2e24:	01 c0       	rjmp	.+2      	; 0x2e28 <_Z20EEPROM_writeAnythingIN14FreeBoardModel13ConfigurationEEiiRKT_+0x1e>
	const unsigned char* p = (const unsigned char*) (const void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		EEPROM.write(ee++, *p++);
    2e26:	98 01       	movw	r18, r16
    2e28:	89 01       	movw	r16, r18
    2e2a:	0f 5f       	subi	r16, 0xFF	; 255
    2e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e2e:	49 91       	ld	r20, Y+
    2e30:	8c ec       	ldi	r24, 0xCC	; 204
    2e32:	95 e0       	ldi	r25, 0x05	; 5
    2e34:	b9 01       	movw	r22, r18
    2e36:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <_ZN11EEPROMClass5writeEih>
}

template<class T> int EEPROM_writeAnything(int ee, const T& value) {
	const unsigned char* p = (const unsigned char*) (const void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
    2e3a:	ce 15       	cp	r28, r14
    2e3c:	df 05       	cpc	r29, r15
    2e3e:	99 f7       	brne	.-26     	; 0x2e26 <_Z20EEPROM_writeAnythingIN14FreeBoardModel13ConfigurationEEiiRKT_+0x1c>
		EEPROM.write(ee++, *p++);
	return i;
}
    2e40:	81 e2       	ldi	r24, 0x21	; 33
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	df 91       	pop	r29
    2e46:	cf 91       	pop	r28
    2e48:	1f 91       	pop	r17
    2e4a:	0f 91       	pop	r16
    2e4c:	ff 90       	pop	r15
    2e4e:	ef 90       	pop	r14
    2e50:	08 95       	ret

00002e52 <_ZN14FreeBoardModel10saveConfigEv>:
	for (i = 0; i < sizeof(value); i++)
		*p++ = EEPROM.read(ee++);
	return i;
}
void FreeBoardModel::saveConfig()
{
    2e52:	cf 93       	push	r28
    2e54:	df 93       	push	r29
    2e56:	ec 01       	movw	r28, r24
	//write out a current version
	EEPROM_writeAnything(0,version);
    2e58:	bc 01       	movw	r22, r24
    2e5a:	6b 56       	subi	r22, 0x6B	; 107
    2e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e5e:	80 e0       	ldi	r24, 0x00	; 0
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <_Z20EEPROM_writeAnythingIiEiiRKT_>
	//write data
	EEPROM_writeAnything(4,config);
    2e66:	be 01       	movw	r22, r28
    2e68:	6c 58       	subi	r22, 0x8C	; 140
    2e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e6c:	84 e0       	ldi	r24, 0x04	; 4
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <_Z20EEPROM_writeAnythingIN14FreeBoardModel13ConfigurationEEiiRKT_>
}
    2e74:	df 91       	pop	r29
    2e76:	cf 91       	pop	r28
    2e78:	08 95       	ret

00002e7a <_Z19EEPROM_readAnythingIiEiiRT_>:
	for (i = 0; i < sizeof(value); i++)
		EEPROM.write(ee++, *p++);
	return i;
}
//saving
template<class T> int EEPROM_readAnything(int ee, T& value) {
    2e7a:	ef 92       	push	r14
    2e7c:	ff 92       	push	r15
    2e7e:	0f 93       	push	r16
    2e80:	1f 93       	push	r17
    2e82:	cf 93       	push	r28
    2e84:	df 93       	push	r29
    2e86:	ec 01       	movw	r28, r24
	unsigned char* p = (unsigned char*) (void*) &value;
    2e88:	7b 01       	movw	r14, r22
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		*p++ = EEPROM.read(ee++);
    2e8a:	0c ec       	ldi	r16, 0xCC	; 204
    2e8c:	15 e0       	ldi	r17, 0x05	; 5
    2e8e:	c8 01       	movw	r24, r16
    2e90:	be 01       	movw	r22, r28
    2e92:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_ZN11EEPROMClass4readEi>
    2e96:	f7 01       	movw	r30, r14
    2e98:	80 83       	st	Z, r24
    2e9a:	be 01       	movw	r22, r28
    2e9c:	6f 5f       	subi	r22, 0xFF	; 255
    2e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea0:	c8 01       	movw	r24, r16
    2ea2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_ZN11EEPROMClass4readEi>
    2ea6:	f7 01       	movw	r30, r14
    2ea8:	81 83       	std	Z+1, r24	; 0x01
	return i;
}
    2eaa:	82 e0       	ldi	r24, 0x02	; 2
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	df 91       	pop	r29
    2eb0:	cf 91       	pop	r28
    2eb2:	1f 91       	pop	r17
    2eb4:	0f 91       	pop	r16
    2eb6:	ff 90       	pop	r15
    2eb8:	ef 90       	pop	r14
    2eba:	08 95       	ret

00002ebc <_Z19EEPROM_readAnythingIN14FreeBoardModel13ConfigurationEEiiRT_>:
	for (i = 0; i < sizeof(value); i++)
		EEPROM.write(ee++, *p++);
	return i;
}
//saving
template<class T> int EEPROM_readAnything(int ee, T& value) {
    2ebc:	ef 92       	push	r14
    2ebe:	ff 92       	push	r15
    2ec0:	0f 93       	push	r16
    2ec2:	1f 93       	push	r17
    2ec4:	cf 93       	push	r28
    2ec6:	df 93       	push	r29
    2ec8:	9c 01       	movw	r18, r24
    2eca:	8b 01       	movw	r16, r22
    2ecc:	91 e2       	ldi	r25, 0x21	; 33
    2ece:	e9 2e       	mov	r14, r25
    2ed0:	f1 2c       	mov	r15, r1
    2ed2:	e6 0e       	add	r14, r22
    2ed4:	f7 1e       	adc	r15, r23
    2ed6:	01 c0       	rjmp	.+2      	; 0x2eda <_Z19EEPROM_readAnythingIN14FreeBoardModel13ConfigurationEEiiRT_+0x1e>
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		*p++ = EEPROM.read(ee++);
    2ed8:	9e 01       	movw	r18, r28
    2eda:	e9 01       	movw	r28, r18
    2edc:	21 96       	adiw	r28, 0x01	; 1
    2ede:	8c ec       	ldi	r24, 0xCC	; 204
    2ee0:	95 e0       	ldi	r25, 0x05	; 5
    2ee2:	b9 01       	movw	r22, r18
    2ee4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_ZN11EEPROMClass4readEi>
    2ee8:	f8 01       	movw	r30, r16
    2eea:	81 93       	st	Z+, r24
    2eec:	8f 01       	movw	r16, r30
}
//saving
template<class T> int EEPROM_readAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
    2eee:	ee 15       	cp	r30, r14
    2ef0:	ff 05       	cpc	r31, r15
    2ef2:	91 f7       	brne	.-28     	; 0x2ed8 <_Z19EEPROM_readAnythingIN14FreeBoardModel13ConfigurationEEiiRT_+0x1c>
		*p++ = EEPROM.read(ee++);
	return i;
}
    2ef4:	81 e2       	ldi	r24, 0x21	; 33
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	df 91       	pop	r29
    2efa:	cf 91       	pop	r28
    2efc:	1f 91       	pop	r17
    2efe:	0f 91       	pop	r16
    2f00:	ff 90       	pop	r15
    2f02:	ef 90       	pop	r14
    2f04:	08 95       	ret

00002f06 <_ZN14FreeBoardModel10readConfigEv>:
	//write data
	EEPROM_writeAnything(4,config);
}

void FreeBoardModel::readConfig()
{
    2f06:	0f 93       	push	r16
    2f08:	1f 93       	push	r17
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	00 d0       	rcall	.+0      	; 0x2f10 <_ZN14FreeBoardModel10readConfigEv+0xa>
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	8c 01       	movw	r16, r24
	//check versions here
	int ver;
	EEPROM_readAnything(0,ver);
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	be 01       	movw	r22, r28
    2f1c:	6f 5f       	subi	r22, 0xFF	; 255
    2f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f20:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <_Z19EEPROM_readAnythingIiEiiRT_>
	if(ver!=version){
    2f24:	f8 01       	movw	r30, r16
    2f26:	eb 56       	subi	r30, 0x6B	; 107
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	29 81       	ldd	r18, Y+1	; 0x01
    2f2c:	3a 81       	ldd	r19, Y+2	; 0x02
    2f2e:	80 81       	ld	r24, Z
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	28 17       	cp	r18, r24
    2f34:	39 07       	cpc	r19, r25
    2f36:	19 f0       	breq	.+6      	; 0x2f3e <_ZN14FreeBoardModel10readConfigEv+0x38>
		//do any conversion of old data here
		//save
		saveConfig();
    2f38:	c8 01       	movw	r24, r16
    2f3a:	0e 94 29 17 	call	0x2e52	; 0x2e52 <_ZN14FreeBoardModel10saveConfigEv>
	}
	//now we know its compatible
	EEPROM_readAnything(4,config);
    2f3e:	b8 01       	movw	r22, r16
    2f40:	6c 58       	subi	r22, 0x8C	; 140
    2f42:	7f 4f       	sbci	r23, 0xFF	; 255
    2f44:	84 e0       	ldi	r24, 0x04	; 4
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <_Z19EEPROM_readAnythingIN14FreeBoardModel13ConfigurationEEiiRT_>


}
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	1f 91       	pop	r17
    2f56:	0f 91       	pop	r16
    2f58:	08 95       	ret

00002f5a <_Z9calculatev>:
 * Timer interrupt driven method to do time sensitive calculations
 * The calc flag causes the main loop to execute other less sensitive calls.
 */
void calculate() {
	//we create 100ms pings here
	execute = true;
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	80 93 8e 06 	sts	0x068E, r24
	//we record the ping count out to 2 secs
	interval++;
    2f60:	80 91 8f 06 	lds	r24, 0x068F
    2f64:	90 91 90 06 	lds	r25, 0x0690
    2f68:	01 96       	adiw	r24, 0x01	; 1
    2f6a:	90 93 90 06 	sts	0x0690, r25
    2f6e:	80 93 8f 06 	sts	0x068F, r24
	interval = interval % 20;
    2f72:	80 91 8f 06 	lds	r24, 0x068F
    2f76:	90 91 90 06 	lds	r25, 0x0690
    2f7a:	64 e1       	ldi	r22, 0x14	; 20
    2f7c:	70 e0       	ldi	r23, 0x00	; 0
    2f7e:	0e 94 13 31 	call	0x6226	; 0x6226 <__divmodhi4>
    2f82:	90 93 90 06 	sts	0x0690, r25
    2f86:	80 93 8f 06 	sts	0x068F, r24
}
    2f8a:	08 95       	ret

00002f8c <_Z7readWDDv>:
void readWDS() {
	wind.readWindDataSpeed();
}

void readWDD() {
	wind.readWindDataDir();
    2f8c:	86 e0       	ldi	r24, 0x06	; 6
    2f8e:	9d e0       	ldi	r25, 0x0D	; 13
    2f90:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <_ZN4Wind15readWindDataDirEv>
}
    2f94:	08 95       	ret

00002f96 <_Z7readWDSv>:
	interval++;
	interval = interval % 20;
}

void readWDS() {
	wind.readWindDataSpeed();
    2f96:	86 e0       	ldi	r24, 0x06	; 6
    2f98:	9d e0       	ldi	r25, 0x0D	; 13
    2f9a:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <_ZN4Wind17readWindDataSpeedEv>
}
    2f9e:	08 95       	ret

00002fa0 <_Z41__static_initialization_and_destruction_0ii.clone.0>:
	 s.append(", stack: ");
	 s.append((int)stackptr);
	 if(DEBUG)Serial.println(s);
	 */

}
    2fa0:	cf 93       	push	r28
    2fa2:	df 93       	push	r29
    2fa4:	81 30       	cpi	r24, 0x01	; 1
    2fa6:	91 05       	cpc	r25, r1
    2fa8:	09 f0       	breq	.+2      	; 0x2fac <_Z41__static_initialization_and_destruction_0ii.clone.0+0xc>
    2faa:	5a c0       	rjmp	.+180    	; 0x3060 <_Z41__static_initialization_and_destruction_0ii.clone.0+0xc0>
int inByteSerial2;
int inByteSerial3;
char input;

//freeboard model
FreeBoardModel model;
    2fac:	c8 e9       	ldi	r28, 0x98	; 152
    2fae:	d6 e0       	ldi	r29, 0x06	; 6
    2fb0:	ce 01       	movw	r24, r28
    2fb2:	0e 94 7f 13 	call	0x26fe	; 0x26fe <_ZN14FreeBoardModelC1Ev>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2fb6:	10 92 32 07 	sts	0x0732, r1
    2fba:	10 92 31 07 	sts	0x0731, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2fbe:	88 ee       	ldi	r24, 0xE8	; 232
    2fc0:	93 e0       	ldi	r25, 0x03	; 3
    2fc2:	a0 e0       	ldi	r26, 0x00	; 0
    2fc4:	b0 e0       	ldi	r27, 0x00	; 0
    2fc6:	80 93 33 07 	sts	0x0733, r24
    2fca:	90 93 34 07 	sts	0x0734, r25
    2fce:	a0 93 35 07 	sts	0x0735, r26
    2fd2:	b0 93 36 07 	sts	0x0736, r27
#include "FreeBoardConstants.h"
#include "FreeBoardModel.h"

class NmeaSerial: AltSoftSerial {
public:
	NmeaSerial(FreeBoardModel* model):model(model){};
    2fd6:	85 e3       	ldi	r24, 0x35	; 53
    2fd8:	95 e0       	ldi	r25, 0x05	; 5
    2fda:	90 93 30 07 	sts	0x0730, r25
    2fde:	80 93 2f 07 	sts	0x072F, r24
    2fe2:	d0 93 3c 07 	sts	0x073C, r29
    2fe6:	c0 93 3b 07 	sts	0x073B, r28
// See http://forums.parallax.com/forums/default.aspx?f=19&m=50925
// See http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=63469&start=0
NmeaSerial nmea(&model);

//NMEA ports
NMEA gpsSource(ALL);
    2fea:	8d e5       	ldi	r24, 0x5D	; 93
    2fec:	97 e0       	ldi	r25, 0x07	; 7
    2fee:	60 e0       	ldi	r22, 0x00	; 0
    2ff0:	70 e0       	ldi	r23, 0x00	; 0
    2ff2:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZN4NMEAC1Ei>
NMEA talker0(ALL);
    2ff6:	86 ec       	ldi	r24, 0xC6	; 198
    2ff8:	98 e0       	ldi	r25, 0x08	; 8
    2ffa:	60 e0       	ldi	r22, 0x00	; 0
    2ffc:	70 e0       	ldi	r23, 0x00	; 0
    2ffe:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZN4NMEAC1Ei>
NMEA talker2(ALL);
    3002:	8f e2       	ldi	r24, 0x2F	; 47
    3004:	9a e0       	ldi	r25, 0x0A	; 10
    3006:	60 e0       	ldi	r22, 0x00	; 0
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZN4NMEAC1Ei>
NMEA talker3(ALL);
    300e:	88 e9       	ldi	r24, 0x98	; 152
    3010:	9b e0       	ldi	r25, 0x0B	; 11
    3012:	60 e0       	ldi	r22, 0x00	; 0
    3014:	70 e0       	ldi	r23, 0x00	; 0
    3016:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZN4NMEAC1Ei>


//alarm
Alarm alarm(&model);
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	9d e0       	ldi	r25, 0x0D	; 13
    301e:	be 01       	movw	r22, r28
    3020:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN5AlarmC1EP14FreeBoardModel>

//wind
Wind wind( &model);
    3024:	86 e0       	ldi	r24, 0x06	; 6
    3026:	9d e0       	ldi	r25, 0x0D	; 13
    3028:	be 01       	movw	r22, r28
    302a:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN4WindC1EP14FreeBoardModel>

//Gps
Gps gps(&gpsSource, &model);
    302e:	88 e0       	ldi	r24, 0x08	; 8
    3030:	9d e0       	ldi	r25, 0x0D	; 13
    3032:	6d e5       	ldi	r22, 0x5D	; 93
    3034:	77 e0       	ldi	r23, 0x07	; 7
    3036:	ae 01       	movw	r20, r28
    3038:	0e 94 49 1a 	call	0x3492	; 0x3492 <_ZN3GpsC1EP4NMEAP14FreeBoardModel>

//Autopilot
Autopilot autopilot(&model);
    303c:	8e e0       	ldi	r24, 0x0E	; 14
    303e:	9d e0       	ldi	r25, 0x0D	; 13
    3040:	be 01       	movw	r22, r28
    3042:	0e 94 19 12 	call	0x2432	; 0x2432 <_ZN9AutopilotC1EP14FreeBoardModel>

//Anchor
Anchor anchor(&model);
    3046:	83 e5       	ldi	r24, 0x53	; 83
    3048:	9d e0       	ldi	r25, 0x0D	; 13
    304a:	be 01       	movw	r22, r28
    304c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <_ZN6AnchorC1EP14FreeBoardModel>

Seatalk seatalk( &Serial2, &model);
    3050:	87 e5       	ldi	r24, 0x57	; 87
    3052:	9d e0       	ldi	r25, 0x0D	; 13
    3054:	61 e8       	ldi	r22, 0x81	; 129
    3056:	70 e1       	ldi	r23, 0x10	; 16
    3058:	ae 01       	movw	r20, r28
    305a:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <_ZN7SeatalkC1EP14HardwareSerialP14FreeBoardModel>
    305e:	16 c0       	rjmp	.+44     	; 0x308c <_Z41__static_initialization_and_destruction_0ii.clone.0+0xec>
    3060:	00 97       	sbiw	r24, 0x00	; 0
    3062:	a1 f4       	brne	.+40     	; 0x308c <_Z41__static_initialization_and_destruction_0ii.clone.0+0xec>

//Autopilot
Autopilot autopilot(&model);

//Anchor
Anchor anchor(&model);
    3064:	83 e5       	ldi	r24, 0x53	; 83
    3066:	9d e0       	ldi	r25, 0x0D	; 13
    3068:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <_ZN6AnchorD1Ev>

//Gps
Gps gps(&gpsSource, &model);

//Autopilot
Autopilot autopilot(&model);
    306c:	8e e0       	ldi	r24, 0x0E	; 14
    306e:	9d e0       	ldi	r25, 0x0D	; 13
    3070:	0e 94 ce 12 	call	0x259c	; 0x259c <_ZN9AutopilotD1Ev>

//wind
Wind wind( &model);

//Gps
Gps gps(&gpsSource, &model);
    3074:	88 e0       	ldi	r24, 0x08	; 8
    3076:	9d e0       	ldi	r25, 0x0D	; 13
    3078:	0e 94 3b 1a 	call	0x3476	; 0x3476 <_ZN3GpsD1Ev>
NMEA talker2(ALL);
NMEA talker3(ALL);


//alarm
Alarm alarm(&model);
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	9d e0       	ldi	r25, 0x0D	; 13
    3080:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <_ZN5AlarmD1Ev>

//NMEA output - The arduino puts out TTL, NMEA is RS232. They are different V and amps. The +-5V levels may need inverting or you get
// garbage.
// See http://forums.parallax.com/forums/default.aspx?f=19&m=50925
// See http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=63469&start=0
NmeaSerial nmea(&model);
    3084:	8f e2       	ldi	r24, 0x2F	; 47
    3086:	97 e0       	ldi	r25, 0x07	; 7
    3088:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <_ZN10NmeaSerialD1Ev>
	 s.append(", stack: ");
	 s.append((int)stackptr);
	 if(DEBUG)Serial.println(s);
	 */

}
    308c:	df 91       	pop	r29
    308e:	cf 91       	pop	r28
    3090:	08 95       	ret

00003092 <setup>:



//re-enable ISR2 in SoftwareSerial.cpp line 314 if you stop using ButtonCatcher

void setup() {
    3092:	ef 92       	push	r14
    3094:	0f 93       	push	r16
    3096:	cf 93       	push	r28
    3098:	df 93       	push	r29
	model.readConfig();
    309a:	88 e9       	ldi	r24, 0x98	; 152
    309c:	96 e0       	ldi	r25, 0x06	; 6
    309e:	0e 94 83 17 	call	0x2f06	; 0x2f06 <_ZN14FreeBoardModel10readConfigEv>
	// initialize  serial ports:
	Serial.begin(38400, 8, 1, 0);
    30a2:	c9 e3       	ldi	r28, 0x39	; 57
    30a4:	d0 e1       	ldi	r29, 0x10	; 16
    30a6:	ce 01       	movw	r24, r28
    30a8:	40 e0       	ldi	r20, 0x00	; 0
    30aa:	56 e9       	ldi	r21, 0x96	; 150
    30ac:	60 e0       	ldi	r22, 0x00	; 0
    30ae:	70 e0       	ldi	r23, 0x00	; 0
    30b0:	28 e0       	ldi	r18, 0x08	; 8
    30b2:	01 e0       	ldi	r16, 0x01	; 1
    30b4:	ee 24       	eor	r14, r14
    30b6:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN14HardwareSerial5beginEmhhh>
	if (DEBUG)
		Serial.println("Initializing..");
    30ba:	ce 01       	movw	r24, r28
    30bc:	61 e3       	ldi	r22, 0x31	; 49
    30be:	72 e0       	ldi	r23, 0x02	; 2
    30c0:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>

	//lcd.setupLcd();

	//start gps on serial1, autobaud
	if (DEBUG)
		Serial.println("Start gps..");
    30c4:	ce 01       	movw	r24, r28
    30c6:	60 e4       	ldi	r22, 0x40	; 64
    30c8:	72 e0       	ldi	r23, 0x02	; 2
    30ca:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	gps.setupGps();
    30ce:	88 e0       	ldi	r24, 0x08	; 8
    30d0:	9d e0       	ldi	r25, 0x0D	; 13
    30d2:	0e 94 3c 1b 	call	0x3678	; 0x3678 <_ZN3Gps8setupGpsEv>

	if (DEBUG)
		Serial.println("Start seatalk - serial2..");
    30d6:	ce 01       	movw	r24, r28
    30d8:	6c e4       	ldi	r22, 0x4C	; 76
    30da:	72 e0       	ldi	r23, 0x02	; 2
    30dc:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	Serial2.begin(4800, 9, 1, 0); //Seatalk interface
    30e0:	81 e8       	ldi	r24, 0x81	; 129
    30e2:	90 e1       	ldi	r25, 0x10	; 16
    30e4:	40 ec       	ldi	r20, 0xC0	; 192
    30e6:	52 e1       	ldi	r21, 0x12	; 18
    30e8:	60 e0       	ldi	r22, 0x00	; 0
    30ea:	70 e0       	ldi	r23, 0x00	; 0
    30ec:	29 e0       	ldi	r18, 0x09	; 9
    30ee:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN14HardwareSerial5beginEmhhh>

	if (DEBUG)
		Serial.println("Start nmea Rx - serial3..");
    30f2:	ce 01       	movw	r24, r28
    30f4:	66 e6       	ldi	r22, 0x66	; 102
    30f6:	72 e0       	ldi	r23, 0x02	; 2
    30f8:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	Serial3.begin(4800, 8, 1, 0); //talker2
    30fc:	85 ea       	ldi	r24, 0xA5	; 165
    30fe:	90 e1       	ldi	r25, 0x10	; 16
    3100:	40 ec       	ldi	r20, 0xC0	; 192
    3102:	52 e1       	ldi	r21, 0x12	; 18
    3104:	60 e0       	ldi	r22, 0x00	; 0
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	28 e0       	ldi	r18, 0x08	; 8
    310a:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN14HardwareSerial5beginEmhhh>

	if (DEBUG)
		Serial.println("Start nmea Tx..");
    310e:	ce 01       	movw	r24, r28
    3110:	60 e8       	ldi	r22, 0x80	; 128
    3112:	72 e0       	ldi	r23, 0x02	; 2
    3114:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	pinMode(nmeaRxPin, INPUT);
    3118:	84 e3       	ldi	r24, 0x34	; 52
    311a:	60 e0       	ldi	r22, 0x00	; 0
    311c:	0e 94 a3 2c 	call	0x5946	; 0x5946 <pinMode>
	pinMode(nmeaTxPin, OUTPUT);
    3120:	85 e3       	ldi	r24, 0x35	; 53
    3122:	61 e0       	ldi	r22, 0x01	; 1
    3124:	0e 94 a3 2c 	call	0x5946	; 0x5946 <pinMode>
	nmea.begin(4800);
    3128:	8f e2       	ldi	r24, 0x2F	; 47
    312a:	97 e0       	ldi	r25, 0x07	; 7
    312c:	40 ec       	ldi	r20, 0xC0	; 192
    312e:	52 e1       	ldi	r21, 0x12	; 18
    3130:	60 e0       	ldi	r22, 0x00	; 0
    3132:	70 e0       	ldi	r23, 0x00	; 0
    3134:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <_ZN10NmeaSerial5beginEl>

	//setup interrupts to windPins
	if (DEBUG)
		Serial.println("Start wind..");
    3138:	ce 01       	movw	r24, r28
    313a:	60 e9       	ldi	r22, 0x90	; 144
    313c:	72 e0       	ldi	r23, 0x02	; 2
    313e:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	pinMode(windSpeedPin, INPUT);
    3142:	85 e1       	ldi	r24, 0x15	; 21
    3144:	60 e0       	ldi	r22, 0x00	; 0
    3146:	0e 94 a3 2c 	call	0x5946	; 0x5946 <pinMode>
	attachInterrupt(windSpeedInterrupt, readWDS, FALLING);
    314a:	82 e0       	ldi	r24, 0x02	; 2
    314c:	6b ec       	ldi	r22, 0xCB	; 203
    314e:	77 e1       	ldi	r23, 0x17	; 23
    3150:	42 e0       	ldi	r20, 0x02	; 2
    3152:	50 e0       	ldi	r21, 0x00	; 0
    3154:	0e 94 3d 29 	call	0x527a	; 0x527a <attachInterrupt>
	pinMode(windDirPin, INPUT);
    3158:	84 e1       	ldi	r24, 0x14	; 20
    315a:	60 e0       	ldi	r22, 0x00	; 0
    315c:	0e 94 a3 2c 	call	0x5946	; 0x5946 <pinMode>
	attachInterrupt(windDirInterrupt, readWDD, FALLING);
    3160:	83 e0       	ldi	r24, 0x03	; 3
    3162:	66 ec       	ldi	r22, 0xC6	; 198
    3164:	77 e1       	ldi	r23, 0x17	; 23
    3166:	42 e0       	ldi	r20, 0x02	; 2
    3168:	50 e0       	ldi	r21, 0x00	; 0
    316a:	0e 94 3d 29 	call	0x527a	; 0x527a <attachInterrupt>

	if (DEBUG)
		Serial.println("Start button interrupts..");
    316e:	ce 01       	movw	r24, r28
    3170:	6d e9       	ldi	r22, 0x9D	; 157
    3172:	72 e0       	ldi	r23, 0x02	; 2
    3174:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>

	pinMode(button0, INPUT);
    3178:	8f e3       	ldi	r24, 0x3F	; 63
    317a:	60 e0       	ldi	r22, 0x00	; 0
    317c:	0e 94 a3 2c 	call	0x5946	; 0x5946 <pinMode>
	pinMode(button1, INPUT);
    3180:	80 e4       	ldi	r24, 0x40	; 64
    3182:	60 e0       	ldi	r22, 0x00	; 0
    3184:	0e 94 a3 2c 	call	0x5946	; 0x5946 <pinMode>
	pinMode(button2, INPUT);
    3188:	81 e4       	ldi	r24, 0x41	; 65
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	0e 94 a3 2c 	call	0x5946	; 0x5946 <pinMode>
	//pinMode(button3, INPUT);


//	//setup timers
	if (DEBUG)
		Serial.println("Start timer..");
    3190:	ce 01       	movw	r24, r28
    3192:	67 eb       	ldi	r22, 0xB7	; 183
    3194:	72 e0       	ldi	r23, 0x02	; 2
    3196:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	FlexiTimer2::set(100, calculate); // 100ms period
    319a:	64 e6       	ldi	r22, 0x64	; 100
    319c:	70 e0       	ldi	r23, 0x00	; 0
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	4d ea       	ldi	r20, 0xAD	; 173
    31a4:	57 e1       	ldi	r21, 0x17	; 23
    31a6:	0e 94 2e 0b 	call	0x165c	; 0x165c <_ZN11FlexiTimer23setEmPFvvE>
	FlexiTimer2::start();
    31aa:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN11FlexiTimer25startEv>
	//lcd.clearLcd();

	if (DEBUG)
		Serial.println("Setup complete..");
    31ae:	ce 01       	movw	r24, r28
    31b0:	65 ec       	ldi	r22, 0xC5	; 197
    31b2:	72 e0       	ldi	r23, 0x02	; 2
    31b4:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
//	autopilot.enableAutoPilot();
//	autopilot.setTargetHeading(50);
}
    31b8:	df 91       	pop	r29
    31ba:	cf 91       	pop	r28
    31bc:	0f 91       	pop	r16
    31be:	ef 90       	pop	r14
    31c0:	08 95       	ret

000031c2 <loop>:
void readWDD() {
	wind.readWindDataDir();
}


void loop() {
    31c2:	1f 93       	push	r17
		}
		if (input == '+') {
			Serial.println("Autopilot heading + 5");
			model.setAutopilotTargetHeading(model.getAutopilotTargetHeading() + 5);
		}
		input = ' ';
    31c4:	10 e2       	ldi	r17, 0x20	; 32

	if (DEBUG)
		//Serial.println("Looping..");
	//dont get caught endlessly reading/writing
	//allow single character commands
	while (Serial.available() > 0) {
    31c6:	62 c0       	rjmp	.+196    	; 0x328c <loop+0xca>
		input = Serial.read();
    31c8:	89 e3       	ldi	r24, 0x39	; 57
    31ca:	90 e1       	ldi	r25, 0x10	; 16
    31cc:	0e 94 1d 22 	call	0x443a	; 0x443a <_ZN14HardwareSerial4readEv>
    31d0:	80 93 97 06 	sts	0x0697, r24
		if (input == 'a') {
    31d4:	81 36       	cpi	r24, 0x61	; 97
    31d6:	a9 f4       	brne	.+42     	; 0x3202 <loop+0x40>
			Serial.println("Enable autopilot..");
    31d8:	89 e3       	ldi	r24, 0x39	; 57
    31da:	90 e1       	ldi	r25, 0x10	; 16
    31dc:	66 ed       	ldi	r22, 0xD6	; 214
    31de:	72 e0       	ldi	r23, 0x02	; 2
    31e0:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
			model.setAutopilotTargetHeading(model.getAutopilotCurrentHeading());
    31e4:	88 e9       	ldi	r24, 0x98	; 152
    31e6:	96 e0       	ldi	r25, 0x06	; 6
    31e8:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>
    31ec:	ab 01       	movw	r20, r22
    31ee:	bc 01       	movw	r22, r24
    31f0:	88 e9       	ldi	r24, 0x98	; 152
    31f2:	96 e0       	ldi	r25, 0x06	; 6
    31f4:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <_ZN14FreeBoardModel25setAutopilotTargetHeadingEd>
			model.setAutopilotOn(true);
    31f8:	88 e9       	ldi	r24, 0x98	; 152
    31fa:	96 e0       	ldi	r25, 0x06	; 6
    31fc:	61 e0       	ldi	r22, 0x01	; 1
    31fe:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <_ZN14FreeBoardModel14setAutopilotOnEb>
		}
		if (input == 'd') {
    3202:	80 91 97 06 	lds	r24, 0x0697
    3206:	84 36       	cpi	r24, 0x64	; 100
    3208:	59 f4       	brne	.+22     	; 0x3220 <loop+0x5e>
			Serial.println("Disable autopilot..");
    320a:	89 e3       	ldi	r24, 0x39	; 57
    320c:	90 e1       	ldi	r25, 0x10	; 16
    320e:	69 ee       	ldi	r22, 0xE9	; 233
    3210:	72 e0       	ldi	r23, 0x02	; 2
    3212:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
			model.setAutopilotOn(false);
    3216:	88 e9       	ldi	r24, 0x98	; 152
    3218:	96 e0       	ldi	r25, 0x06	; 6
    321a:	60 e0       	ldi	r22, 0x00	; 0
    321c:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <_ZN14FreeBoardModel14setAutopilotOnEb>
		}
		if (input == '-') {
    3220:	80 91 97 06 	lds	r24, 0x0697
    3224:	8d 32       	cpi	r24, 0x2D	; 45
    3226:	b1 f4       	brne	.+44     	; 0x3254 <loop+0x92>
			Serial.println("Autopilot heading - 5");
    3228:	89 e3       	ldi	r24, 0x39	; 57
    322a:	90 e1       	ldi	r25, 0x10	; 16
    322c:	6d ef       	ldi	r22, 0xFD	; 253
    322e:	72 e0       	ldi	r23, 0x02	; 2
    3230:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
			//TODO: consider the 0-360 circle, cant be neg
			model.setAutopilotTargetHeading(model.getAutopilotTargetHeading() - 5);
    3234:	88 e9       	ldi	r24, 0x98	; 152
    3236:	96 e0       	ldi	r25, 0x06	; 6
    3238:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 ea       	ldi	r20, 0xA0	; 160
    3242:	50 e4       	ldi	r21, 0x40	; 64
    3244:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
    3248:	ab 01       	movw	r20, r22
    324a:	bc 01       	movw	r22, r24
    324c:	88 e9       	ldi	r24, 0x98	; 152
    324e:	96 e0       	ldi	r25, 0x06	; 6
    3250:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <_ZN14FreeBoardModel25setAutopilotTargetHeadingEd>
		}
		if (input == '+') {
    3254:	80 91 97 06 	lds	r24, 0x0697
    3258:	8b 32       	cpi	r24, 0x2B	; 43
    325a:	b1 f4       	brne	.+44     	; 0x3288 <loop+0xc6>
			Serial.println("Autopilot heading + 5");
    325c:	89 e3       	ldi	r24, 0x39	; 57
    325e:	90 e1       	ldi	r25, 0x10	; 16
    3260:	63 e1       	ldi	r22, 0x13	; 19
    3262:	73 e0       	ldi	r23, 0x03	; 3
    3264:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
			model.setAutopilotTargetHeading(model.getAutopilotTargetHeading() + 5);
    3268:	88 e9       	ldi	r24, 0x98	; 152
    326a:	96 e0       	ldi	r25, 0x06	; 6
    326c:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	40 ea       	ldi	r20, 0xA0	; 160
    3276:	50 e4       	ldi	r21, 0x40	; 64
    3278:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    327c:	ab 01       	movw	r20, r22
    327e:	bc 01       	movw	r22, r24
    3280:	88 e9       	ldi	r24, 0x98	; 152
    3282:	96 e0       	ldi	r25, 0x06	; 6
    3284:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <_ZN14FreeBoardModel25setAutopilotTargetHeadingEd>
		}
		input = ' ';
    3288:	10 93 97 06 	sts	0x0697, r17

	if (DEBUG)
		//Serial.println("Looping..");
	//dont get caught endlessly reading/writing
	//allow single character commands
	while (Serial.available() > 0) {
    328c:	89 e3       	ldi	r24, 0x39	; 57
    328e:	90 e1       	ldi	r25, 0x10	; 16
    3290:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN14HardwareSerial9availableEv>
    3294:	18 16       	cp	r1, r24
    3296:	19 06       	cpc	r1, r25
    3298:	0c f4       	brge	.+2      	; 0x329c <loop+0xda>
    329a:	96 cf       	rjmp	.-212    	; 0x31c8 <loop+0x6>
    329c:	22 c0       	rjmp	.+68     	; 0x32e2 <loop+0x120>
		}
		input = ' ';
	}
	// read from port 1, send to port 0:
	while (Serial1.available() > 0) {
		inByteSerial1 = Serial1.read();
    329e:	8d e5       	ldi	r24, 0x5D	; 93
    32a0:	90 e1       	ldi	r25, 0x10	; 16
    32a2:	0e 94 1d 22 	call	0x443a	; 0x443a <_ZN14HardwareSerial4readEv>
    32a6:	68 2f       	mov	r22, r24
    32a8:	80 93 91 06 	sts	0x0691, r24
    32ac:	90 93 92 06 	sts	0x0692, r25
		//if(DEBUG)Serial.print(inByte);

		if (gps.decode(inByteSerial1)) {
    32b0:	88 e0       	ldi	r24, 0x08	; 8
    32b2:	9d e0       	ldi	r25, 0x0D	; 13
    32b4:	0e 94 8d 1c 	call	0x391a	; 0x391a <_ZN3Gps6decodeEh>
    32b8:	88 23       	and	r24, r24
    32ba:	99 f0       	breq	.+38     	; 0x32e2 <loop+0x120>
			if (MUX) {
				nmea.printNmea(gpsSource.sentence());
    32bc:	8d e5       	ldi	r24, 0x5D	; 93
    32be:	97 e0       	ldi	r25, 0x07	; 7
    32c0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN4NMEA8sentenceEv>
    32c4:	bc 01       	movw	r22, r24
    32c6:	8f e2       	ldi	r24, 0x2F	; 47
    32c8:	97 e0       	ldi	r25, 0x07	; 7
    32ca:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <_ZN10NmeaSerial9printNmeaEPc>
			}
			if (MUX && DEBUG)
				Serial.println(gpsSource.sentence());
    32ce:	8d e5       	ldi	r24, 0x5D	; 93
    32d0:	97 e0       	ldi	r25, 0x07	; 7
    32d2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN4NMEA8sentenceEv>
    32d6:	bc 01       	movw	r22, r24
    32d8:	89 e3       	ldi	r24, 0x39	; 57
    32da:	90 e1       	ldi	r25, 0x10	; 16
    32dc:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
			break; //every sentence
    32e0:	15 c0       	rjmp	.+42     	; 0x330c <loop+0x14a>
			model.setAutopilotTargetHeading(model.getAutopilotTargetHeading() + 5);
		}
		input = ' ';
	}
	// read from port 1, send to port 0:
	while (Serial1.available() > 0) {
    32e2:	8d e5       	ldi	r24, 0x5D	; 93
    32e4:	90 e1       	ldi	r25, 0x10	; 16
    32e6:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN14HardwareSerial9availableEv>
    32ea:	18 16       	cp	r1, r24
    32ec:	19 06       	cpc	r1, r25
    32ee:	bc f2       	brlt	.-82     	; 0x329e <loop+0xdc>
    32f0:	0d c0       	rjmp	.+26     	; 0x330c <loop+0x14a>
		}

	}

	while (Serial2.available() > 0) {
  	inByteSerial2=Serial2.read();
    32f2:	81 e8       	ldi	r24, 0x81	; 129
    32f4:	90 e1       	ldi	r25, 0x10	; 16
    32f6:	0e 94 1d 22 	call	0x443a	; 0x443a <_ZN14HardwareSerial4readEv>
    32fa:	68 2f       	mov	r22, r24
    32fc:	80 93 93 06 	sts	0x0693, r24
    3300:	90 93 94 06 	sts	0x0694, r25
		seatalk.processSeaTalkByte(inByteSerial2);
    3304:	87 e5       	ldi	r24, 0x57	; 87
    3306:	9d e0       	ldi	r25, 0x0D	; 13
    3308:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <_ZN7Seatalk18processSeaTalkByteEh>
			break; //every sentence
		}

	}

	while (Serial2.available() > 0) {
    330c:	81 e8       	ldi	r24, 0x81	; 129
    330e:	90 e1       	ldi	r25, 0x10	; 16
    3310:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN14HardwareSerial9availableEv>
    3314:	18 16       	cp	r1, r24
    3316:	19 06       	cpc	r1, r25
    3318:	64 f3       	brlt	.-40     	; 0x32f2 <loop+0x130>
    331a:	2a c0       	rjmp	.+84     	; 0x3370 <loop+0x1ae>
  	inByteSerial2=Serial2.read();
		seatalk.processSeaTalkByte(inByteSerial2);
	}

	while (Serial3.available() > 0) {
		inByteSerial3=Serial3.read();
    331c:	85 ea       	ldi	r24, 0xA5	; 165
    331e:	90 e1       	ldi	r25, 0x10	; 16
    3320:	0e 94 1d 22 	call	0x443a	; 0x443a <_ZN14HardwareSerial4readEv>
    3324:	bc 01       	movw	r22, r24
    3326:	90 93 96 06 	sts	0x0696, r25
    332a:	80 93 95 06 	sts	0x0695, r24
		// check if the character completes a valid NMEA sentence
		if(DEBUG)Serial.print(inByteSerial3);
    332e:	89 e3       	ldi	r24, 0x39	; 57
    3330:	90 e1       	ldi	r25, 0x10	; 16
    3332:	4a e0       	ldi	r20, 0x0A	; 10
    3334:	50 e0       	ldi	r21, 0x00	; 0
    3336:	0e 94 67 28 	call	0x50ce	; 0x50ce <_ZN5Print5printEii>
		if (talker3.decode(inByteSerial3) && MUX) {
    333a:	88 e9       	ldi	r24, 0x98	; 152
    333c:	9b e0       	ldi	r25, 0x0B	; 11
    333e:	60 91 95 06 	lds	r22, 0x0695
    3342:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN4NMEA6decodeEc>
    3346:	00 97       	sbiw	r24, 0x00	; 0
    3348:	49 f0       	breq	.+18     	; 0x335c <loop+0x19a>
			nmea.printNmea(talker3.sentence());
    334a:	88 e9       	ldi	r24, 0x98	; 152
    334c:	9b e0       	ldi	r25, 0x0B	; 11
    334e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN4NMEA8sentenceEv>
    3352:	bc 01       	movw	r22, r24
    3354:	8f e2       	ldi	r24, 0x2F	; 47
    3356:	97 e0       	ldi	r25, 0x07	; 7
    3358:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <_ZN10NmeaSerial9printNmeaEPc>
		}
		if(MUX && DEBUG)Serial.println(talker3.sentence());
    335c:	88 e9       	ldi	r24, 0x98	; 152
    335e:	9b e0       	ldi	r25, 0x0B	; 11
    3360:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN4NMEA8sentenceEv>
    3364:	bc 01       	movw	r22, r24
    3366:	89 e3       	ldi	r24, 0x39	; 57
    3368:	90 e1       	ldi	r25, 0x10	; 16
    336a:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
		break;//every sentence
    336e:	07 c0       	rjmp	.+14     	; 0x337e <loop+0x1bc>
	while (Serial2.available() > 0) {
  	inByteSerial2=Serial2.read();
		seatalk.processSeaTalkByte(inByteSerial2);
	}

	while (Serial3.available() > 0) {
    3370:	85 ea       	ldi	r24, 0xA5	; 165
    3372:	90 e1       	ldi	r25, 0x10	; 16
    3374:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN14HardwareSerial9availableEv>
    3378:	18 16       	cp	r1, r24
    337a:	19 06       	cpc	r1, r25
    337c:	7c f2       	brlt	.-98     	; 0x331c <loop+0x15a>
			nmea.printNmea(talker3.sentence());
		}
		if(MUX && DEBUG)Serial.println(talker3.sentence());
		break;//every sentence
	}
	if (execute) {
    337e:	80 91 8e 06 	lds	r24, 0x068E
    3382:	88 23       	and	r24, r24
    3384:	09 f4       	brne	.+2      	; 0x3388 <loop+0x1c6>
    3386:	6b c0       	rjmp	.+214    	; 0x345e <loop+0x29c>
		//timer ping
		//do these every 100ms
		autopilot.calcAutoPilot();
    3388:	8e e0       	ldi	r24, 0x0E	; 14
    338a:	9d e0       	ldi	r25, 0x0D	; 13
    338c:	0e 94 cf 12 	call	0x259e	; 0x259e <_ZN9Autopilot13calcAutoPilotEv>

//		if (interval % 2 == 0) {
//			//do every 200ms
//		}
		if (interval % 5 == 0) {
    3390:	80 91 8f 06 	lds	r24, 0x068F
    3394:	90 91 90 06 	lds	r25, 0x0690
    3398:	65 e0       	ldi	r22, 0x05	; 5
    339a:	70 e0       	ldi	r23, 0x00	; 0
    339c:	0e 94 13 31 	call	0x6226	; 0x6226 <__divmodhi4>
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	21 f4       	brne	.+8      	; 0x33ac <loop+0x1ea>
			//do every 500ms

			//fire any alarms
			alarm.checkAlarms();
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	9d e0       	ldi	r25, 0x0D	; 13
    33a8:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <_ZN5Alarm11checkAlarmsEv>

		}
		if (interval % 10 == 0) {
    33ac:	80 91 8f 06 	lds	r24, 0x068F
    33b0:	90 91 90 06 	lds	r25, 0x0690
    33b4:	6a e0       	ldi	r22, 0x0A	; 10
    33b6:	70 e0       	ldi	r23, 0x00	; 0
    33b8:	0e 94 13 31 	call	0x6226	; 0x6226 <__divmodhi4>
    33bc:	00 97       	sbiw	r24, 0x00	; 0
    33be:	09 f0       	breq	.+2      	; 0x33c2 <loop+0x200>
    33c0:	4c c0       	rjmp	.+152    	; 0x345a <loop+0x298>
			//do every 1000ms
			wind.calcWindData();
    33c2:	86 e0       	ldi	r24, 0x06	; 6
    33c4:	9d e0       	ldi	r25, 0x0D	; 13
    33c6:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <_ZN4Wind12calcWindDataEv>
			if (DEBUG && model.isAutopilotOn()) {
    33ca:	88 e9       	ldi	r24, 0x98	; 152
    33cc:	96 e0       	ldi	r25, 0x06	; 6
    33ce:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_ZNK14FreeBoardModel13isAutopilotOnEv>
    33d2:	88 23       	and	r24, r24
    33d4:	b1 f1       	breq	.+108    	; 0x3442 <loop+0x280>
					Serial.print("From model: Target deg = ");
    33d6:	89 e3       	ldi	r24, 0x39	; 57
    33d8:	90 e1       	ldi	r25, 0x10	; 16
    33da:	69 e2       	ldi	r22, 0x29	; 41
    33dc:	73 e0       	ldi	r23, 0x03	; 3
    33de:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_ZN5Print5printEPKc>
					Serial.print(model.getAutopilotTargetHeading());
    33e2:	88 e9       	ldi	r24, 0x98	; 152
    33e4:	96 e0       	ldi	r25, 0x06	; 6
    33e6:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    33ea:	ab 01       	movw	r20, r22
    33ec:	bc 01       	movw	r22, r24
    33ee:	89 e3       	ldi	r24, 0x39	; 57
    33f0:	90 e1       	ldi	r25, 0x10	; 16
    33f2:	22 e0       	ldi	r18, 0x02	; 2
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	0e 94 27 29 	call	0x524e	; 0x524e <_ZN5Print5printEdi>
					Serial.print("Heading deg = ");
    33fa:	89 e3       	ldi	r24, 0x39	; 57
    33fc:	90 e1       	ldi	r25, 0x10	; 16
    33fe:	63 e4       	ldi	r22, 0x43	; 67
    3400:	73 e0       	ldi	r23, 0x03	; 3
    3402:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_ZN5Print5printEPKc>
					Serial.print(model.getAutopilotCurrentHeading());
    3406:	88 e9       	ldi	r24, 0x98	; 152
    3408:	96 e0       	ldi	r25, 0x06	; 6
    340a:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>
    340e:	ab 01       	movw	r20, r22
    3410:	bc 01       	movw	r22, r24
    3412:	89 e3       	ldi	r24, 0x39	; 57
    3414:	90 e1       	ldi	r25, 0x10	; 16
    3416:	22 e0       	ldi	r18, 0x02	; 2
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	0e 94 27 29 	call	0x524e	; 0x524e <_ZN5Print5printEdi>
					Serial.print(", Rudder = ");
    341e:	89 e3       	ldi	r24, 0x39	; 57
    3420:	90 e1       	ldi	r25, 0x10	; 16
    3422:	62 e5       	ldi	r22, 0x52	; 82
    3424:	73 e0       	ldi	r23, 0x03	; 3
    3426:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_ZN5Print5printEPKc>
					Serial.println(model.getAutopilotRudderCommand());
    342a:	88 e9       	ldi	r24, 0x98	; 152
    342c:	96 e0       	ldi	r25, 0x06	; 6
    342e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN14FreeBoardModel25getAutopilotRudderCommandEv>
    3432:	ab 01       	movw	r20, r22
    3434:	bc 01       	movw	r22, r24
    3436:	89 e3       	ldi	r24, 0x39	; 57
    3438:	90 e1       	ldi	r25, 0x10	; 16
    343a:	22 e0       	ldi	r18, 0x02	; 2
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	0e 94 2a 29 	call	0x5254	; 0x5254 <_ZN5Print7printlnEdi>
					//model.setAutopilotCurrentHeading(model.getAutopilotCurrentHeading()+(0.2*(model.getAutopilotRudderCommand()-33)));
				}
			anchor.checkAnchor();
    3442:	83 e5       	ldi	r24, 0x53	; 83
    3444:	9d e0       	ldi	r25, 0x0D	; 13
    3446:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN6Anchor11checkAnchorEv>
			alarm.checkWindAlarm();
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	9d e0       	ldi	r25, 0x0D	; 13
    344e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN5Alarm14checkWindAlarmEv>
			nmea.printWindNmea();
    3452:	8f e2       	ldi	r24, 0x2F	; 47
    3454:	97 e0       	ldi	r25, 0x07	; 7
    3456:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <_ZN10NmeaSerial13printWindNmeaEv>
		}
		//if (interval % 20 == 0) {
			//do every 2000ms
		//}

		execute = false;
    345a:	10 92 8e 06 	sts	0x068E, r1
	 s.append(", stack: ");
	 s.append((int)stackptr);
	 if(DEBUG)Serial.println(s);
	 */

}
    345e:	1f 91       	pop	r17
    3460:	08 95       	ret

00003462 <_GLOBAL__I_execute>:
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <_Z41__static_initialization_and_destruction_0ii.clone.0>
    346a:	08 95       	ret

0000346c <_GLOBAL__D_execute>:
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <_Z41__static_initialization_and_destruction_0ii.clone.0>
    3474:	08 95       	ret

00003476 <_ZN3GpsD1Ev>:
#include "Gps.h"
char gpsBuffer[40];
PString gpsStr(gpsBuffer, sizeof(gpsBuffer));

Gps::~Gps() {
    3476:	2d e2       	ldi	r18, 0x2D	; 45
    3478:	35 e0       	ldi	r19, 0x05	; 5
    347a:	fc 01       	movw	r30, r24
    347c:	31 83       	std	Z+1, r19	; 0x01
    347e:	20 83       	st	Z, r18
}
    3480:	08 95       	ret

00003482 <_ZN3GpsD0Ev>:
#include "Gps.h"
char gpsBuffer[40];
PString gpsStr(gpsBuffer, sizeof(gpsBuffer));

Gps::~Gps() {
    3482:	2d e2       	ldi	r18, 0x2D	; 45
    3484:	35 e0       	ldi	r19, 0x05	; 5
    3486:	fc 01       	movw	r30, r24
    3488:	31 83       	std	Z+1, r19	; 0x01
    348a:	20 83       	st	Z, r18
}
    348c:	0e 94 4e 2b 	call	0x569c	; 0x569c <_ZdlPv>
    3490:	08 95       	ret

00003492 <_ZN3GpsC1EP4NMEAP14FreeBoardModel>:
Gps::Gps(NMEA* gpsSource,FreeBoardModel* model) {
    3492:	fc 01       	movw	r30, r24
    3494:	8d e2       	ldi	r24, 0x2D	; 45
    3496:	95 e0       	ldi	r25, 0x05	; 5
    3498:	91 83       	std	Z+1, r25	; 0x01
    349a:	80 83       	st	Z, r24

	this->model=model;
    349c:	55 83       	std	Z+5, r21	; 0x05
    349e:	44 83       	std	Z+4, r20	; 0x04
	this->gpsSource = gpsSource;
    34a0:	73 83       	std	Z+3, r23	; 0x03
    34a2:	62 83       	std	Z+2, r22	; 0x02
	//setupGps();
}
    34a4:	08 95       	ret

000034a6 <_ZN3Gps7testMsgEv>:

bool Gps::testMsg(){
    34a6:	df 92       	push	r13
    34a8:	ef 92       	push	r14
    34aa:	ff 92       	push	r15
    34ac:	0f 93       	push	r16
    34ae:	1f 93       	push	r17
    34b0:	cf 93       	push	r28
    34b2:	df 93       	push	r29
	//clear buffer of rubbish
	int x =0;
    34b4:	c0 e0       	ldi	r28, 0x00	; 0
    34b6:	d0 e0       	ldi	r29, 0x00	; 0
	while( x<100){
		if(Serial1.available()){
    34b8:	8d e5       	ldi	r24, 0x5D	; 93
    34ba:	90 e1       	ldi	r25, 0x10	; 16
    34bc:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN14HardwareSerial9availableEv>
    34c0:	00 97       	sbiw	r24, 0x00	; 0
    34c2:	d1 f3       	breq	.-12     	; 0x34b8 <_ZN3Gps7testMsgEv+0x12>
			Serial1.read();
    34c4:	8d e5       	ldi	r24, 0x5D	; 93
    34c6:	90 e1       	ldi	r25, 0x10	; 16
    34c8:	0e 94 1d 22 	call	0x443a	; 0x443a <_ZN14HardwareSerial4readEv>
			x++;
    34cc:	21 96       	adiw	r28, 0x01	; 1
}

bool Gps::testMsg(){
	//clear buffer of rubbish
	int x =0;
	while( x<100){
    34ce:	c4 36       	cpi	r28, 0x64	; 100
    34d0:	d1 05       	cpc	r29, r1
    34d2:	91 f7       	brne	.-28     	; 0x34b8 <_ZN3Gps7testMsgEv+0x12>
			Serial1.read();
			x++;
		}
	}
	//5 secs
	unsigned long now = millis();
    34d4:	0e 94 99 2b 	call	0x5732	; 0x5732 <millis>
    34d8:	7b 01       	movw	r14, r22
    34da:	8c 01       	movw	r16, r24
	bool valid=true;
    34dc:	dd 24       	eor	r13, r13
    34de:	d3 94       	inc	r13
	while(now+5000>millis() && valid){
    34e0:	88 e8       	ldi	r24, 0x88	; 136
    34e2:	93 e1       	ldi	r25, 0x13	; 19
    34e4:	a0 e0       	ldi	r26, 0x00	; 0
    34e6:	b0 e0       	ldi	r27, 0x00	; 0
    34e8:	e8 0e       	add	r14, r24
    34ea:	f9 1e       	adc	r15, r25
    34ec:	0a 1f       	adc	r16, r26
    34ee:	1b 1f       	adc	r17, r27
    34f0:	0a c0       	rjmp	.+20     	; 0x3506 <_ZN3Gps7testMsgEv+0x60>
		if(Serial1.available()){
			int c = Serial1.read();
    34f2:	8d e5       	ldi	r24, 0x5D	; 93
    34f4:	90 e1       	ldi	r25, 0x10	; 16
    34f6:	0e 94 1d 22 	call	0x443a	; 0x443a <_ZN14HardwareSerial4readEv>
	this->model=model;
	this->gpsSource = gpsSource;
	//setupGps();
}

bool Gps::testMsg(){
    34fa:	dd 24       	eor	r13, r13
    34fc:	d3 94       	inc	r13
    34fe:	81 38       	cpi	r24, 0x81	; 129
    3500:	91 05       	cpc	r25, r1
    3502:	0c f0       	brlt	.+2      	; 0x3506 <_ZN3Gps7testMsgEv+0x60>
    3504:	dd 24       	eor	r13, r13
		}
	}
	//5 secs
	unsigned long now = millis();
	bool valid=true;
	while(now+5000>millis() && valid){
    3506:	0e 94 99 2b 	call	0x5732	; 0x5732 <millis>
    350a:	6e 15       	cp	r22, r14
    350c:	7f 05       	cpc	r23, r15
    350e:	80 07       	cpc	r24, r16
    3510:	91 07       	cpc	r25, r17
    3512:	48 f4       	brcc	.+18     	; 0x3526 <_ZN3Gps7testMsgEv+0x80>
    3514:	dd 20       	and	r13, r13
    3516:	81 f0       	breq	.+32     	; 0x3538 <_ZN3Gps7testMsgEv+0x92>
		if(Serial1.available()){
    3518:	8d e5       	ldi	r24, 0x5D	; 93
    351a:	90 e1       	ldi	r25, 0x10	; 16
    351c:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN14HardwareSerial9availableEv>
    3520:	00 97       	sbiw	r24, 0x00	; 0
    3522:	89 f3       	breq	.-30     	; 0x3506 <_ZN3Gps7testMsgEv+0x60>
    3524:	e6 cf       	rjmp	.-52     	; 0x34f2 <_ZN3Gps7testMsgEv+0x4c>
			//not Cntrl-n or printable so invalid
			if( c>128)valid=false;
		}
	}
	if(DEBUG){
		if(valid)
    3526:	dd 20       	and	r13, r13
    3528:	39 f0       	breq	.+14     	; 0x3538 <_ZN3Gps7testMsgEv+0x92>
			Serial.println("OK");
    352a:	89 e3       	ldi	r24, 0x39	; 57
    352c:	90 e1       	ldi	r25, 0x10	; 16
    352e:	6e e5       	ldi	r22, 0x5E	; 94
    3530:	73 e0       	ldi	r23, 0x03	; 3
    3532:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
    3536:	07 c0       	rjmp	.+14     	; 0x3546 <_ZN3Gps7testMsgEv+0xa0>
		else
			Serial.println("FAIL");
    3538:	89 e3       	ldi	r24, 0x39	; 57
    353a:	90 e1       	ldi	r25, 0x10	; 16
    353c:	61 e6       	ldi	r22, 0x61	; 97
    353e:	73 e0       	ldi	r23, 0x03	; 3
    3540:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
    3544:	dd 24       	eor	r13, r13
	}
	return valid;
}
    3546:	8d 2d       	mov	r24, r13
    3548:	df 91       	pop	r29
    354a:	cf 91       	pop	r28
    354c:	1f 91       	pop	r17
    354e:	0f 91       	pop	r16
    3550:	ff 90       	pop	r15
    3552:	ef 90       	pop	r14
    3554:	df 90       	pop	r13
    3556:	08 95       	ret

00003558 <_ZN3Gps8autoBaudEv>:

int Gps::autoBaud(){
    3558:	cf 93       	push	r28
    355a:	df 93       	push	r29
    355c:	ec 01       	movw	r28, r24
	//try the various baud rates until one makes sense
	//should only output simple NMEA [$A-Z0-9*\r\c]


	if(DEBUG)Serial.println("   try autobaud 4800..");
    355e:	89 e3       	ldi	r24, 0x39	; 57
    3560:	90 e1       	ldi	r25, 0x10	; 16
    3562:	66 e6       	ldi	r22, 0x66	; 102
    3564:	73 e0       	ldi	r23, 0x03	; 3
    3566:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	Serial1.begin(4800);
    356a:	8d e5       	ldi	r24, 0x5D	; 93
    356c:	90 e1       	ldi	r25, 0x10	; 16
    356e:	40 ec       	ldi	r20, 0xC0	; 192
    3570:	52 e1       	ldi	r21, 0x12	; 18
    3572:	60 e0       	ldi	r22, 0x00	; 0
    3574:	70 e0       	ldi	r23, 0x00	; 0
    3576:	0e 94 b4 24 	call	0x4968	; 0x4968 <_ZN14HardwareSerial5beginEm>
	if(testMsg())return 4800;
    357a:	ce 01       	movw	r24, r28
    357c:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <_ZN3Gps7testMsgEv>
    3580:	88 23       	and	r24, r24
    3582:	09 f0       	breq	.+2      	; 0x3586 <_ZN3Gps8autoBaudEv+0x2e>
    3584:	67 c0       	rjmp	.+206    	; 0x3654 <_ZN3Gps8autoBaudEv+0xfc>
	Serial1.end();
    3586:	8d e5       	ldi	r24, 0x5D	; 93
    3588:	90 e1       	ldi	r25, 0x10	; 16
    358a:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <_ZN14HardwareSerial3endEv>
	if(DEBUG)Serial.println("   try autobaud 9600..");
    358e:	89 e3       	ldi	r24, 0x39	; 57
    3590:	90 e1       	ldi	r25, 0x10	; 16
    3592:	6d e7       	ldi	r22, 0x7D	; 125
    3594:	73 e0       	ldi	r23, 0x03	; 3
    3596:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	Serial1.begin(9600);
    359a:	8d e5       	ldi	r24, 0x5D	; 93
    359c:	90 e1       	ldi	r25, 0x10	; 16
    359e:	40 e8       	ldi	r20, 0x80	; 128
    35a0:	55 e2       	ldi	r21, 0x25	; 37
    35a2:	60 e0       	ldi	r22, 0x00	; 0
    35a4:	70 e0       	ldi	r23, 0x00	; 0
    35a6:	0e 94 b4 24 	call	0x4968	; 0x4968 <_ZN14HardwareSerial5beginEm>
	if(testMsg())return 9600;
    35aa:	ce 01       	movw	r24, r28
    35ac:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <_ZN3Gps7testMsgEv>
    35b0:	88 23       	and	r24, r24
    35b2:	09 f0       	breq	.+2      	; 0x35b6 <_ZN3Gps8autoBaudEv+0x5e>
    35b4:	52 c0       	rjmp	.+164    	; 0x365a <_ZN3Gps8autoBaudEv+0x102>
	Serial1.end();
    35b6:	8d e5       	ldi	r24, 0x5D	; 93
    35b8:	90 e1       	ldi	r25, 0x10	; 16
    35ba:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <_ZN14HardwareSerial3endEv>
	if(DEBUG)Serial.println("   try autobaud 19200..");
    35be:	89 e3       	ldi	r24, 0x39	; 57
    35c0:	90 e1       	ldi	r25, 0x10	; 16
    35c2:	64 e9       	ldi	r22, 0x94	; 148
    35c4:	73 e0       	ldi	r23, 0x03	; 3
    35c6:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	Serial1.begin(19200);
    35ca:	8d e5       	ldi	r24, 0x5D	; 93
    35cc:	90 e1       	ldi	r25, 0x10	; 16
    35ce:	40 e0       	ldi	r20, 0x00	; 0
    35d0:	5b e4       	ldi	r21, 0x4B	; 75
    35d2:	60 e0       	ldi	r22, 0x00	; 0
    35d4:	70 e0       	ldi	r23, 0x00	; 0
    35d6:	0e 94 b4 24 	call	0x4968	; 0x4968 <_ZN14HardwareSerial5beginEm>
	if(testMsg())return 19200;
    35da:	ce 01       	movw	r24, r28
    35dc:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <_ZN3Gps7testMsgEv>
    35e0:	88 23       	and	r24, r24
    35e2:	f1 f5       	brne	.+124    	; 0x3660 <_ZN3Gps8autoBaudEv+0x108>
	Serial1.end();
    35e4:	8d e5       	ldi	r24, 0x5D	; 93
    35e6:	90 e1       	ldi	r25, 0x10	; 16
    35e8:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <_ZN14HardwareSerial3endEv>
	if(DEBUG)Serial.println("   try autobaud 38400..");
    35ec:	89 e3       	ldi	r24, 0x39	; 57
    35ee:	90 e1       	ldi	r25, 0x10	; 16
    35f0:	6c ea       	ldi	r22, 0xAC	; 172
    35f2:	73 e0       	ldi	r23, 0x03	; 3
    35f4:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
		Serial1.begin(38400);
    35f8:	8d e5       	ldi	r24, 0x5D	; 93
    35fa:	90 e1       	ldi	r25, 0x10	; 16
    35fc:	40 e0       	ldi	r20, 0x00	; 0
    35fe:	56 e9       	ldi	r21, 0x96	; 150
    3600:	60 e0       	ldi	r22, 0x00	; 0
    3602:	70 e0       	ldi	r23, 0x00	; 0
    3604:	0e 94 b4 24 	call	0x4968	; 0x4968 <_ZN14HardwareSerial5beginEm>
		if(testMsg())return 38400;
    3608:	ce 01       	movw	r24, r28
    360a:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <_ZN3Gps7testMsgEv>
    360e:	88 23       	and	r24, r24
    3610:	51 f5       	brne	.+84     	; 0x3666 <_ZN3Gps8autoBaudEv+0x10e>
	Serial1.end();
    3612:	8d e5       	ldi	r24, 0x5D	; 93
    3614:	90 e1       	ldi	r25, 0x10	; 16
    3616:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <_ZN14HardwareSerial3endEv>
	if(DEBUG)Serial.println("   try autobaud 57600..");
    361a:	89 e3       	ldi	r24, 0x39	; 57
    361c:	90 e1       	ldi	r25, 0x10	; 16
    361e:	64 ec       	ldi	r22, 0xC4	; 196
    3620:	73 e0       	ldi	r23, 0x03	; 3
    3622:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	Serial1.begin(57600);
    3626:	8d e5       	ldi	r24, 0x5D	; 93
    3628:	90 e1       	ldi	r25, 0x10	; 16
    362a:	40 e0       	ldi	r20, 0x00	; 0
    362c:	51 ee       	ldi	r21, 0xE1	; 225
    362e:	60 e0       	ldi	r22, 0x00	; 0
    3630:	70 e0       	ldi	r23, 0x00	; 0
    3632:	0e 94 b4 24 	call	0x4968	; 0x4968 <_ZN14HardwareSerial5beginEm>
	if(testMsg())return 57600;
    3636:	ce 01       	movw	r24, r28
    3638:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <_ZN3Gps7testMsgEv>
    363c:	88 23       	and	r24, r24
    363e:	b1 f4       	brne	.+44     	; 0x366c <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
    3640:	8d e5       	ldi	r24, 0x5D	; 93
    3642:	90 e1       	ldi	r25, 0x10	; 16
    3644:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <_ZN14HardwareSerial3endEv>
	if(DEBUG)Serial.println("   default to 4800..");
    3648:	89 e3       	ldi	r24, 0x39	; 57
    364a:	90 e1       	ldi	r25, 0x10	; 16
    364c:	6c ed       	ldi	r22, 0xDC	; 220
    364e:	73 e0       	ldi	r23, 0x03	; 3
    3650:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	//should only output simple NMEA [$A-Z0-9*\r\c]


	if(DEBUG)Serial.println("   try autobaud 4800..");
	Serial1.begin(4800);
	if(testMsg())return 4800;
    3654:	20 ec       	ldi	r18, 0xC0	; 192
    3656:	32 e1       	ldi	r19, 0x12	; 18
    3658:	0b c0       	rjmp	.+22     	; 0x3670 <_ZN3Gps8autoBaudEv+0x118>
	Serial1.end();
	if(DEBUG)Serial.println("   try autobaud 9600..");
	Serial1.begin(9600);
	if(testMsg())return 9600;
    365a:	20 e8       	ldi	r18, 0x80	; 128
    365c:	35 e2       	ldi	r19, 0x25	; 37
    365e:	08 c0       	rjmp	.+16     	; 0x3670 <_ZN3Gps8autoBaudEv+0x118>
	Serial1.end();
	if(DEBUG)Serial.println("   try autobaud 19200..");
	Serial1.begin(19200);
	if(testMsg())return 19200;
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	3b e4       	ldi	r19, 0x4B	; 75
    3664:	05 c0       	rjmp	.+10     	; 0x3670 <_ZN3Gps8autoBaudEv+0x118>
	Serial1.end();
	if(DEBUG)Serial.println("   try autobaud 38400..");
		Serial1.begin(38400);
		if(testMsg())return 38400;
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	36 e9       	ldi	r19, 0x96	; 150
    366a:	02 c0       	rjmp	.+4      	; 0x3670 <_ZN3Gps8autoBaudEv+0x118>
	Serial1.end();
	if(DEBUG)Serial.println("   try autobaud 57600..");
	Serial1.begin(57600);
	if(testMsg())return 57600;
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	31 ee       	ldi	r19, 0xE1	; 225
	Serial1.end();
	if(DEBUG)Serial.println("   default to 4800..");
	return 4800;
}
    3670:	c9 01       	movw	r24, r18
    3672:	df 91       	pop	r29
    3674:	cf 91       	pop	r28
    3676:	08 95       	ret

00003678 <_ZN3Gps8setupGpsEv>:
//	return gpsDecode;
//}
/*
 Set baud rate and various message frequencies.
 */
void Gps::setupGps() {
    3678:	cf 93       	push	r28
    367a:	df 93       	push	r29
	 6 MSS (If internal beacon is supported)
	 7 Not defined
	 8 ZDA (if 1PPS output is supported)
	 9 Not defined
	 */
	autoBaud();
    367c:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN3Gps8autoBaudEv>
	//Serial1.begin(38400, 8, 1, 0); //gps
	//set debug on
	Serial1.println("$PSRF105,1*3E");
    3680:	cd e5       	ldi	r28, 0x5D	; 93
    3682:	d0 e1       	ldi	r29, 0x10	; 16
    3684:	ce 01       	movw	r24, r28
    3686:	61 ef       	ldi	r22, 0xF1	; 241
    3688:	73 e0       	ldi	r23, 0x03	; 3
    368a:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>

	//set VTG off -  Vector track an Speed over the Ground
	Serial1.println("$PSRF103,05,00,00,01*21");
    368e:	ce 01       	movw	r24, r28
    3690:	6f ef       	ldi	r22, 0xFF	; 255
    3692:	73 e0       	ldi	r23, 0x03	; 3
    3694:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	//set GLL off -  Lat/Lon data
	Serial1.println("$PSRF103,01,00,00,01*25");
    3698:	ce 01       	movw	r24, r28
    369a:	67 e1       	ldi	r22, 0x17	; 23
    369c:	74 e0       	ldi	r23, 0x04	; 4
    369e:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	//set GGA on, 5sec, constant -  Fix information
	Serial1.println("$PSRF103,00,00,05,01*21");
    36a2:	ce 01       	movw	r24, r28
    36a4:	6f e2       	ldi	r22, 0x2F	; 47
    36a6:	74 e0       	ldi	r23, 0x04	; 4
    36a8:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	//set GSA on, 5 sec, constant - Overall Satellite data
	Serial1.println("$PSRF103,02,00,05,01*23");
    36ac:	ce 01       	movw	r24, r28
    36ae:	67 e4       	ldi	r22, 0x47	; 71
    36b0:	74 e0       	ldi	r23, 0x04	; 4
    36b2:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	//set GSV on, 20sec, constant -Detailed Satellite data
	Serial1.println("$PSRF103,03,00,20,01*25");
    36b6:	ce 01       	movw	r24, r28
    36b8:	6f e5       	ldi	r22, 0x5F	; 95
    36ba:	74 e0       	ldi	r23, 0x04	; 4
    36bc:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	//set RMC on, 1sec, constant, Recommended minimum info
	Serial1.println("$PSRF103,04,00,01,01*21");
    36c0:	ce 01       	movw	r24, r28
    36c2:	67 e7       	ldi	r22, 0x77	; 119
    36c4:	74 e0       	ldi	r23, 0x04	; 4
    36c6:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	//delay(1000);
//	while (Serial1.available() > 0) {
//		Serial.print(Serial1.read());
//	}
	//debug off
	Serial1.println("$PSRF105,0*3F");
    36ca:	ce 01       	movw	r24, r28
    36cc:	6f e8       	ldi	r22, 0x8F	; 143
    36ce:	74 e0       	ldi	r23, 0x04	; 4
    36d0:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	//#define SIRF_BAUD_RATE_19200    "$PSRF100,1,19200,8,1,0*38\r\n"
	//#define SIRF_BAUD_RATE_38400    "$PSRF100,1,38400,8,1,0*3D\r\n"
	//#define SIRF_BAUD_RATE_57600    "$PSRF100,1,57600,8,1,0*36\r\n"

	//$PSRF100,1,38400,8,1,0*3D\r\n
	Serial1.print("$PSRF100,1,38400,8,1,0*3D\r\n");
    36d4:	ce 01       	movw	r24, r28
    36d6:	6d e9       	ldi	r22, 0x9D	; 157
    36d8:	74 e0       	ldi	r23, 0x04	; 4
    36da:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_ZN5Print5printEPKc>
	Serial1.flush();
    36de:	ce 01       	movw	r24, r28
    36e0:	0e 94 3f 22 	call	0x447e	; 0x447e <_ZN14HardwareSerial5flushEv>
	Serial1.end();
    36e4:	ce 01       	movw	r24, r28
    36e6:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <_ZN14HardwareSerial3endEv>
	Serial1.begin(38400);
    36ea:	ce 01       	movw	r24, r28
    36ec:	40 e0       	ldi	r20, 0x00	; 0
    36ee:	56 e9       	ldi	r21, 0x96	; 150
    36f0:	60 e0       	ldi	r22, 0x00	; 0
    36f2:	70 e0       	ldi	r23, 0x00	; 0
    36f4:	0e 94 b4 24 	call	0x4968	; 0x4968 <_ZN14HardwareSerial5beginEm>

}
    36f8:	df 91       	pop	r29
    36fa:	cf 91       	pop	r28
    36fc:	08 95       	ret

000036fe <_ZN3Gps11getMetersToEffff>:


float Gps::getMetersTo(float targetLat, float targetLon, float currentLat, float currentLon){
    36fe:	2f 92       	push	r2
    3700:	3f 92       	push	r3
    3702:	4f 92       	push	r4
    3704:	5f 92       	push	r5
    3706:	6f 92       	push	r6
    3708:	7f 92       	push	r7
    370a:	8f 92       	push	r8
    370c:	9f 92       	push	r9
    370e:	af 92       	push	r10
    3710:	bf 92       	push	r11
    3712:	cf 92       	push	r12
    3714:	df 92       	push	r13
    3716:	ef 92       	push	r14
    3718:	ff 92       	push	r15
    371a:	0f 93       	push	r16
    371c:	1f 93       	push	r17
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
    3726:	60 97       	sbiw	r28, 0x10	; 16
    3728:	0f b6       	in	r0, 0x3f	; 63
    372a:	f8 94       	cli
    372c:	de bf       	out	0x3e, r29	; 62
    372e:	0f be       	out	0x3f, r0	; 63
    3730:	cd bf       	out	0x3d, r28	; 61
    3732:	1b 01       	movw	r2, r22
    3734:	2c 01       	movw	r4, r24
    3736:	ca 01       	movw	r24, r20
    3738:	b9 01       	movw	r22, r18
    373a:	37 01       	movw	r6, r14
    373c:	48 01       	movw	r8, r16
    373e:	a6 01       	movw	r20, r12
    3740:	95 01       	movw	r18, r10
		// returns distance in meters between two positions, both specified
		// as signed decimal-degrees latitude and longitude. Uses great-circle
		// distance computation for hypothised sphere of radius 6372795 meters.
		// Because Earth is no exact sphere, rounding errors may be upto 0.5%.
	  float delta = radians(targetLon-currentLon);
    3742:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
    3746:	25 e3       	ldi	r18, 0x35	; 53
    3748:	3a ef       	ldi	r19, 0xFA	; 250
    374a:	4e e8       	ldi	r20, 0x8E	; 142
    374c:	5c e3       	ldi	r21, 0x3C	; 60
    374e:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    3752:	a6 2e       	mov	r10, r22
    3754:	e7 2e       	mov	r14, r23
    3756:	8c 01       	movw	r16, r24
	  float sdlong = sin(delta);
    3758:	76 2f       	mov	r23, r22
    375a:	27 2f       	mov	r18, r23
    375c:	3e 2d       	mov	r19, r14
    375e:	40 2f       	mov	r20, r16
    3760:	51 2f       	mov	r21, r17
    3762:	ca 01       	movw	r24, r20
    3764:	b9 01       	movw	r22, r18
    3766:	0e 94 85 30 	call	0x610a	; 0x610a <sin>
    376a:	6d 87       	std	Y+13, r22	; 0x0d
    376c:	7e 87       	std	Y+14, r23	; 0x0e
    376e:	8f 87       	std	Y+15, r24	; 0x0f
    3770:	98 8b       	std	Y+16, r25	; 0x10
	  float cdlong = cos(delta);
    3772:	6a 2d       	mov	r22, r10
    3774:	7e 2d       	mov	r23, r14
    3776:	80 2f       	mov	r24, r16
    3778:	91 2f       	mov	r25, r17
    377a:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <cos>
    377e:	69 83       	std	Y+1, r22	; 0x01
    3780:	7a 83       	std	Y+2, r23	; 0x02
    3782:	8b 83       	std	Y+3, r24	; 0x03
    3784:	9c 83       	std	Y+4, r25	; 0x04
	  targetLat = radians(targetLat);
    3786:	c2 01       	movw	r24, r4
    3788:	b1 01       	movw	r22, r2
    378a:	25 e3       	ldi	r18, 0x35	; 53
    378c:	3a ef       	ldi	r19, 0xFA	; 250
    378e:	4e e8       	ldi	r20, 0x8E	; 142
    3790:	5c e3       	ldi	r21, 0x3C	; 60
    3792:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    3796:	8b 01       	movw	r16, r22
    3798:	a8 2e       	mov	r10, r24
    379a:	e9 2e       	mov	r14, r25
	  currentLat = radians(currentLat);
    379c:	c4 01       	movw	r24, r8
    379e:	b3 01       	movw	r22, r6
    37a0:	25 e3       	ldi	r18, 0x35	; 53
    37a2:	3a ef       	ldi	r19, 0xFA	; 250
    37a4:	4e e8       	ldi	r20, 0x8E	; 142
    37a6:	5c e3       	ldi	r21, 0x3C	; 60
    37a8:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    37ac:	56 2e       	mov	r5, r22
    37ae:	b7 2e       	mov	r11, r23
    37b0:	6c 01       	movw	r12, r24
	  float slat1 = sin(targetLat);
    37b2:	60 2f       	mov	r22, r16
    37b4:	71 2f       	mov	r23, r17
    37b6:	8a 2d       	mov	r24, r10
    37b8:	9e 2d       	mov	r25, r14
    37ba:	0e 94 85 30 	call	0x610a	; 0x610a <sin>
    37be:	6d 83       	std	Y+5, r22	; 0x05
    37c0:	7e 83       	std	Y+6, r23	; 0x06
    37c2:	8f 83       	std	Y+7, r24	; 0x07
    37c4:	98 87       	std	Y+8, r25	; 0x08
	  float clat1 = cos(targetLat);
    37c6:	60 2f       	mov	r22, r16
    37c8:	71 2f       	mov	r23, r17
    37ca:	8a 2d       	mov	r24, r10
    37cc:	9e 2d       	mov	r25, r14
    37ce:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <cos>
    37d2:	69 87       	std	Y+9, r22	; 0x09
    37d4:	7a 87       	std	Y+10, r23	; 0x0a
    37d6:	8b 87       	std	Y+11, r24	; 0x0b
    37d8:	9c 87       	std	Y+12, r25	; 0x0c
	  float slat2 = sin(currentLat);
    37da:	65 2d       	mov	r22, r5
    37dc:	7b 2d       	mov	r23, r11
    37de:	8c 2d       	mov	r24, r12
    37e0:	9d 2d       	mov	r25, r13
    37e2:	0e 94 85 30 	call	0x610a	; 0x610a <sin>
    37e6:	3b 01       	movw	r6, r22
    37e8:	4c 01       	movw	r8, r24
	  float clat2 = cos(currentLat);
    37ea:	65 2d       	mov	r22, r5
    37ec:	7b 2d       	mov	r23, r11
    37ee:	8c 2d       	mov	r24, r12
    37f0:	9d 2d       	mov	r25, r13
    37f2:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <cos>
    37f6:	7b 01       	movw	r14, r22
    37f8:	8c 01       	movw	r16, r24
	  delta = (clat1 * slat2) - (slat1 * clat2 * cdlong);
    37fa:	69 85       	ldd	r22, Y+9	; 0x09
    37fc:	7a 85       	ldd	r23, Y+10	; 0x0a
    37fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    3800:	9c 85       	ldd	r25, Y+12	; 0x0c
    3802:	a4 01       	movw	r20, r8
    3804:	93 01       	movw	r18, r6
    3806:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    380a:	5b 01       	movw	r10, r22
    380c:	6c 01       	movw	r12, r24
    380e:	6d 81       	ldd	r22, Y+5	; 0x05
    3810:	7e 81       	ldd	r23, Y+6	; 0x06
    3812:	8f 81       	ldd	r24, Y+7	; 0x07
    3814:	98 85       	ldd	r25, Y+8	; 0x08
    3816:	a8 01       	movw	r20, r16
    3818:	97 01       	movw	r18, r14
    381a:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    381e:	29 81       	ldd	r18, Y+1	; 0x01
    3820:	3a 81       	ldd	r19, Y+2	; 0x02
    3822:	4b 81       	ldd	r20, Y+3	; 0x03
    3824:	5c 81       	ldd	r21, Y+4	; 0x04
    3826:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    382a:	9b 01       	movw	r18, r22
    382c:	ac 01       	movw	r20, r24
    382e:	c6 01       	movw	r24, r12
    3830:	b5 01       	movw	r22, r10
    3832:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
    3836:	5b 01       	movw	r10, r22
    3838:	6c 01       	movw	r12, r24
	  delta = sq(delta);
    383a:	76 2f       	mov	r23, r22
    383c:	27 2f       	mov	r18, r23
    383e:	3b 2d       	mov	r19, r11
    3840:	4c 2d       	mov	r20, r12
    3842:	5d 2d       	mov	r21, r13
    3844:	ca 01       	movw	r24, r20
    3846:	b9 01       	movw	r22, r18
    3848:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    384c:	b6 2e       	mov	r11, r22
    384e:	57 2e       	mov	r5, r23
    3850:	48 2e       	mov	r4, r24
    3852:	39 2e       	mov	r3, r25
	  delta += sq(clat2 * sdlong);
    3854:	c8 01       	movw	r24, r16
    3856:	b7 01       	movw	r22, r14
    3858:	2d 85       	ldd	r18, Y+13	; 0x0d
    385a:	3e 85       	ldd	r19, Y+14	; 0x0e
    385c:	4f 85       	ldd	r20, Y+15	; 0x0f
    385e:	58 89       	ldd	r21, Y+16	; 0x10
    3860:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    3864:	6b 01       	movw	r12, r22
    3866:	28 2e       	mov	r2, r24
    3868:	a9 2e       	mov	r10, r25
    386a:	76 2f       	mov	r23, r22
    386c:	27 2f       	mov	r18, r23
    386e:	3d 2d       	mov	r19, r13
    3870:	42 2d       	mov	r20, r2
    3872:	5a 2d       	mov	r21, r10
    3874:	ca 01       	movw	r24, r20
    3876:	b9 01       	movw	r22, r18
    3878:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    387c:	9b 01       	movw	r18, r22
    387e:	ac 01       	movw	r20, r24
    3880:	6b 2d       	mov	r22, r11
    3882:	75 2d       	mov	r23, r5
    3884:	84 2d       	mov	r24, r4
    3886:	93 2d       	mov	r25, r3
    3888:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
	  delta = sqrt(delta);
    388c:	0e 94 8f 30 	call	0x611e	; 0x611e <sqrt>
    3890:	1b 01       	movw	r2, r22
    3892:	2c 01       	movw	r4, r24
	  float denom = (slat1 * slat2) + (clat1 * clat2 * cdlong);
    3894:	6d 81       	ldd	r22, Y+5	; 0x05
    3896:	7e 81       	ldd	r23, Y+6	; 0x06
    3898:	8f 81       	ldd	r24, Y+7	; 0x07
    389a:	98 85       	ldd	r25, Y+8	; 0x08
    389c:	a4 01       	movw	r20, r8
    389e:	93 01       	movw	r18, r6
    38a0:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    38a4:	5b 01       	movw	r10, r22
    38a6:	6c 01       	movw	r12, r24
    38a8:	69 85       	ldd	r22, Y+9	; 0x09
    38aa:	7a 85       	ldd	r23, Y+10	; 0x0a
    38ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    38ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    38b0:	a8 01       	movw	r20, r16
    38b2:	97 01       	movw	r18, r14
    38b4:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    38b8:	29 81       	ldd	r18, Y+1	; 0x01
    38ba:	3a 81       	ldd	r19, Y+2	; 0x02
    38bc:	4b 81       	ldd	r20, Y+3	; 0x03
    38be:	5c 81       	ldd	r21, Y+4	; 0x04
    38c0:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    38c4:	9b 01       	movw	r18, r22
    38c6:	ac 01       	movw	r20, r24
    38c8:	c6 01       	movw	r24, r12
    38ca:	b5 01       	movw	r22, r10
    38cc:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    38d0:	9b 01       	movw	r18, r22
    38d2:	ac 01       	movw	r20, r24
	  delta = atan2(delta, denom);
    38d4:	c2 01       	movw	r24, r4
    38d6:	b1 01       	movw	r22, r2
    38d8:	0e 94 73 2d 	call	0x5ae6	; 0x5ae6 <atan2>
	  return delta * 6372795 * MTR;
    38dc:	26 e7       	ldi	r18, 0x76	; 118
    38de:	3b e7       	ldi	r19, 0x7B	; 123
    38e0:	42 ec       	ldi	r20, 0xC2	; 194
    38e2:	5a e4       	ldi	r21, 0x4A	; 74
    38e4:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
}
    38e8:	60 96       	adiw	r28, 0x10	; 16
    38ea:	0f b6       	in	r0, 0x3f	; 63
    38ec:	f8 94       	cli
    38ee:	de bf       	out	0x3e, r29	; 62
    38f0:	0f be       	out	0x3f, r0	; 63
    38f2:	cd bf       	out	0x3d, r28	; 61
    38f4:	cf 91       	pop	r28
    38f6:	df 91       	pop	r29
    38f8:	1f 91       	pop	r17
    38fa:	0f 91       	pop	r16
    38fc:	ff 90       	pop	r15
    38fe:	ef 90       	pop	r14
    3900:	df 90       	pop	r13
    3902:	cf 90       	pop	r12
    3904:	bf 90       	pop	r11
    3906:	af 90       	pop	r10
    3908:	9f 90       	pop	r9
    390a:	8f 90       	pop	r8
    390c:	7f 90       	pop	r7
    390e:	6f 90       	pop	r6
    3910:	5f 90       	pop	r5
    3912:	4f 90       	pop	r4
    3914:	3f 90       	pop	r3
    3916:	2f 90       	pop	r2
    3918:	08 95       	ret

0000391a <_ZN3Gps6decodeEh>:


bool Gps::decode(byte inByte) {
    391a:	ef 92       	push	r14
    391c:	ff 92       	push	r15
    391e:	0f 93       	push	r16
    3920:	1f 93       	push	r17
    3922:	cf 93       	push	r28
    3924:	df 93       	push	r29
    3926:	ec 01       	movw	r28, r24
	// check if the character completes a valid GPS sentence
	model->setGpsDecode(gpsSource->decode(inByte));
    3928:	0c 81       	ldd	r16, Y+4	; 0x04
    392a:	1d 81       	ldd	r17, Y+5	; 0x05
    392c:	8a 81       	ldd	r24, Y+2	; 0x02
    392e:	9b 81       	ldd	r25, Y+3	; 0x03
    3930:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN4NMEA6decodeEc>
    3934:	61 e0       	ldi	r22, 0x01	; 1
    3936:	00 97       	sbiw	r24, 0x00	; 0
    3938:	09 f4       	brne	.+2      	; 0x393c <_ZN3Gps6decodeEh+0x22>
    393a:	60 e0       	ldi	r22, 0x00	; 0
    393c:	c8 01       	movw	r24, r16
    393e:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <_ZN14FreeBoardModel12setGpsDecodeEb>
	//if(DEBUG)Serial.print(inByte,BYTE);
	if (model->isGpsDecode()) {
    3942:	8c 81       	ldd	r24, Y+4	; 0x04
    3944:	9d 81       	ldd	r25, Y+5	; 0x05
    3946:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <_ZNK14FreeBoardModel11isGpsDecodeEv>
    394a:	88 23       	and	r24, r24
    394c:	09 f4       	brne	.+2      	; 0x3950 <_ZN3Gps6decodeEh+0x36>
    394e:	78 c0       	rjmp	.+240    	; 0x3a40 <_ZN3Gps6decodeEh+0x126>
		model->setGpsStatus(gpsSource->gprmc_status());
    3950:	0c 81       	ldd	r16, Y+4	; 0x04
    3952:	1d 81       	ldd	r17, Y+5	; 0x05
    3954:	8a 81       	ldd	r24, Y+2	; 0x02
    3956:	9b 81       	ldd	r25, Y+3	; 0x03
    3958:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN4NMEA12gprmc_statusEv>
    395c:	68 2f       	mov	r22, r24
    395e:	c8 01       	movw	r24, r16
    3960:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <_ZN14FreeBoardModel12setGpsStatusEc>
		if (gpsSource->gprmc_status() == 'A'
    3964:	8a 81       	ldd	r24, Y+2	; 0x02
    3966:	9b 81       	ldd	r25, Y+3	; 0x03
    3968:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN4NMEA12gprmc_statusEv>
    396c:	81 34       	cpi	r24, 0x41	; 65
    396e:	09 f0       	breq	.+2      	; 0x3972 <_ZN3Gps6decodeEh+0x58>
    3970:	67 c0       	rjmp	.+206    	; 0x3a40 <_ZN3Gps6decodeEh+0x126>
				&& gpsSource->term(0)[2] != 'R' && gpsSource->term(0)[3] != 'M'
    3972:	8a 81       	ldd	r24, Y+2	; 0x02
    3974:	9b 81       	ldd	r25, Y+3	; 0x03
    3976:	60 e0       	ldi	r22, 0x00	; 0
    3978:	70 e0       	ldi	r23, 0x00	; 0
    397a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_ZN4NMEA4termEi>
	// check if the character completes a valid GPS sentence
	model->setGpsDecode(gpsSource->decode(inByte));
	//if(DEBUG)Serial.print(inByte,BYTE);
	if (model->isGpsDecode()) {
		model->setGpsStatus(gpsSource->gprmc_status());
		if (gpsSource->gprmc_status() == 'A'
    397e:	fc 01       	movw	r30, r24
    3980:	82 81       	ldd	r24, Z+2	; 0x02
    3982:	82 35       	cpi	r24, 0x52	; 82
    3984:	09 f4       	brne	.+2      	; 0x3988 <_ZN3Gps6decodeEh+0x6e>
    3986:	5c c0       	rjmp	.+184    	; 0x3a40 <_ZN3Gps6decodeEh+0x126>
				&& gpsSource->term(0)[2] != 'R' && gpsSource->term(0)[3] != 'M'
    3988:	8a 81       	ldd	r24, Y+2	; 0x02
    398a:	9b 81       	ldd	r25, Y+3	; 0x03
    398c:	60 e0       	ldi	r22, 0x00	; 0
    398e:	70 e0       	ldi	r23, 0x00	; 0
    3990:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_ZN4NMEA4termEi>
	// check if the character completes a valid GPS sentence
	model->setGpsDecode(gpsSource->decode(inByte));
	//if(DEBUG)Serial.print(inByte,BYTE);
	if (model->isGpsDecode()) {
		model->setGpsStatus(gpsSource->gprmc_status());
		if (gpsSource->gprmc_status() == 'A'
    3994:	fc 01       	movw	r30, r24
    3996:	83 81       	ldd	r24, Z+3	; 0x03
    3998:	8d 34       	cpi	r24, 0x4D	; 77
    399a:	09 f4       	brne	.+2      	; 0x399e <_ZN3Gps6decodeEh+0x84>
    399c:	51 c0       	rjmp	.+162    	; 0x3a40 <_ZN3Gps6decodeEh+0x126>
				&& gpsSource->term(0)[2] != 'R' && gpsSource->term(0)[3] != 'M'
				&& gpsSource->term(0)[4] != 'C') {
    399e:	8a 81       	ldd	r24, Y+2	; 0x02
    39a0:	9b 81       	ldd	r25, Y+3	; 0x03
    39a2:	60 e0       	ldi	r22, 0x00	; 0
    39a4:	70 e0       	ldi	r23, 0x00	; 0
    39a6:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_ZN4NMEA4termEi>
	// check if the character completes a valid GPS sentence
	model->setGpsDecode(gpsSource->decode(inByte));
	//if(DEBUG)Serial.print(inByte,BYTE);
	if (model->isGpsDecode()) {
		model->setGpsStatus(gpsSource->gprmc_status());
		if (gpsSource->gprmc_status() == 'A'
    39aa:	fc 01       	movw	r30, r24
    39ac:	84 81       	ldd	r24, Z+4	; 0x04
    39ae:	83 34       	cpi	r24, 0x43	; 67
    39b0:	09 f4       	brne	.+2      	; 0x39b4 <_ZN3Gps6decodeEh+0x9a>
    39b2:	46 c0       	rjmp	.+140    	; 0x3a40 <_ZN3Gps6decodeEh+0x126>
				&& gpsSource->term(0)[2] != 'R' && gpsSource->term(0)[3] != 'M'
				&& gpsSource->term(0)[4] != 'C') {
			model->setGpsLastFix(millis());
    39b4:	0c 81       	ldd	r16, Y+4	; 0x04
    39b6:	1d 81       	ldd	r17, Y+5	; 0x05
    39b8:	0e 94 99 2b 	call	0x5732	; 0x5732 <millis>
    39bc:	ab 01       	movw	r20, r22
    39be:	bc 01       	movw	r22, r24
    39c0:	c8 01       	movw	r24, r16
    39c2:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN14FreeBoardModel13setGpsLastFixEm>
			model->setGpsCourse(gpsSource->gprmc_course());
    39c6:	0c 81       	ldd	r16, Y+4	; 0x04
    39c8:	1d 81       	ldd	r17, Y+5	; 0x05
    39ca:	8a 81       	ldd	r24, Y+2	; 0x02
    39cc:	9b 81       	ldd	r25, Y+3	; 0x03
    39ce:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN4NMEA12gprmc_courseEv>
    39d2:	ab 01       	movw	r20, r22
    39d4:	bc 01       	movw	r22, r24
    39d6:	c8 01       	movw	r24, r16
    39d8:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <_ZN14FreeBoardModel12setGpsCourseEf>
			model->setGpsLatitude(gpsSource->gprmc_latitude());
    39dc:	0c 81       	ldd	r16, Y+4	; 0x04
    39de:	1d 81       	ldd	r17, Y+5	; 0x05
    39e0:	8a 81       	ldd	r24, Y+2	; 0x02
    39e2:	9b 81       	ldd	r25, Y+3	; 0x03
    39e4:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN4NMEA14gprmc_latitudeEv>
    39e8:	ab 01       	movw	r20, r22
    39ea:	bc 01       	movw	r22, r24
    39ec:	c8 01       	movw	r24, r16
    39ee:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN14FreeBoardModel14setGpsLatitudeEf>
			model->setGpsLongitude(gpsSource->gprmc_longitude());
    39f2:	0c 81       	ldd	r16, Y+4	; 0x04
    39f4:	1d 81       	ldd	r17, Y+5	; 0x05
    39f6:	8a 81       	ldd	r24, Y+2	; 0x02
    39f8:	9b 81       	ldd	r25, Y+3	; 0x03
    39fa:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN4NMEA15gprmc_longitudeEv>
    39fe:	ab 01       	movw	r20, r22
    3a00:	bc 01       	movw	r22, r24
    3a02:	c8 01       	movw	r24, r16
    3a04:	0e 94 77 16 	call	0x2cee	; 0x2cee <_ZN14FreeBoardModel15setGpsLongitudeEf>
			model->setGpsSpeed(gpsSource->gprmc_speed(model->getGpsSpeedUnit()));
    3a08:	ea 80       	ldd	r14, Y+2	; 0x02
    3a0a:	fb 80       	ldd	r15, Y+3	; 0x03
    3a0c:	0c 81       	ldd	r16, Y+4	; 0x04
    3a0e:	1d 81       	ldd	r17, Y+5	; 0x05
    3a10:	c8 01       	movw	r24, r16
    3a12:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZNK14FreeBoardModel15getGpsSpeedUnitEv>
    3a16:	ab 01       	movw	r20, r22
    3a18:	bc 01       	movw	r22, r24
    3a1a:	c7 01       	movw	r24, r14
    3a1c:	0e 94 c1 06 	call	0xd82	; 0xd82 <_ZN4NMEA11gprmc_speedEf>
    3a20:	ab 01       	movw	r20, r22
    3a22:	bc 01       	movw	r22, r24
    3a24:	c8 01       	movw	r24, r16
    3a26:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <_ZN14FreeBoardModel11setGpsSpeedEf>
			model->setGpsUtc(gpsSource->gprmc_utc());
    3a2a:	0c 81       	ldd	r16, Y+4	; 0x04
    3a2c:	1d 81       	ldd	r17, Y+5	; 0x05
    3a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a30:	9b 81       	ldd	r25, Y+3	; 0x03
    3a32:	0e 94 a0 06 	call	0xd40	; 0xd40 <_ZN4NMEA9gprmc_utcEv>
    3a36:	ab 01       	movw	r20, r22
    3a38:	bc 01       	movw	r22, r24
    3a3a:	c8 01       	movw	r24, r16
    3a3c:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <_ZN14FreeBoardModel9setGpsUtcEf>
		}
	}
	return model->isGpsDecode();
    3a40:	8c 81       	ldd	r24, Y+4	; 0x04
    3a42:	9d 81       	ldd	r25, Y+5	; 0x05
    3a44:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <_ZNK14FreeBoardModel11isGpsDecodeEv>
}
    3a48:	df 91       	pop	r29
    3a4a:	cf 91       	pop	r28
    3a4c:	1f 91       	pop	r17
    3a4e:	0f 91       	pop	r16
    3a50:	ff 90       	pop	r15
    3a52:	ef 90       	pop	r14
    3a54:	08 95       	ret

00003a56 <_GLOBAL__I_gpsBuffer>:
    3a56:	10 92 9c 0d 	sts	0x0D9C, r1
    3a5a:	10 92 9b 0d 	sts	0x0D9B, r1
  virtual size_t write(uint8_t);

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    3a5e:	eb e9       	ldi	r30, 0x9B	; 155
    3a60:	fd e0       	ldi	r31, 0x0D	; 13
    3a62:	85 e0       	ldi	r24, 0x05	; 5
    3a64:	95 e0       	ldi	r25, 0x05	; 5
    3a66:	92 93       	st	-Z, r25
    3a68:	82 93       	st	-Z, r24
    3a6a:	81 e7       	ldi	r24, 0x71	; 113
    3a6c:	9d e0       	ldi	r25, 0x0D	; 13
    3a6e:	95 83       	std	Z+5, r25	; 0x05
    3a70:	84 83       	std	Z+4, r24	; 0x04
    3a72:	88 e2       	ldi	r24, 0x28	; 40
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	91 87       	std	Z+9, r25	; 0x09
    3a78:	80 87       	std	Z+8, r24	; 0x08
  { begin(); }
    3a7a:	cf 01       	movw	r24, r30
    3a7c:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN7PString5beginEv>
	// float absLon = abs(lon);
	//char * rslt = padFloat(absLon,decimals,padding);
	//str.print(printFloat(abs(lon),decimals));

	return str;
}
    3a80:	08 95       	ret

00003a82 <_ZN13AltSoftSerial5beginEm>:
    3a82:	9b 01       	movw	r18, r22
    3a84:	ac 01       	movw	r20, r24
    3a86:	96 95       	lsr	r25
    3a88:	87 95       	ror	r24
    3a8a:	77 95       	ror	r23
    3a8c:	67 95       	ror	r22
    3a8e:	60 50       	subi	r22, 0x00	; 0
    3a90:	7c 4d       	sbci	r23, 0xDC	; 220
    3a92:	8b 40       	sbci	r24, 0x0B	; 11
    3a94:	9f 4f       	sbci	r25, 0xFF	; 255
    3a96:	0e 94 26 31 	call	0x624c	; 0x624c <__udivmodsi4>
    3a9a:	ca 01       	movw	r24, r20
    3a9c:	b9 01       	movw	r22, r18
    3a9e:	0e 94 1e 0c 	call	0x183c	; 0x183c <_ZN13AltSoftSerial4initEm>
    3aa2:	08 95       	ret

00003aa4 <_GLOBAL__I_lcdBuffer>:
    3aa4:	10 92 ce 0d 	sts	0x0DCE, r1
    3aa8:	10 92 cd 0d 	sts	0x0DCD, r1
  virtual size_t write(uint8_t);

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    3aac:	ed ec       	ldi	r30, 0xCD	; 205
    3aae:	fd e0       	ldi	r31, 0x0D	; 13
    3ab0:	85 e0       	ldi	r24, 0x05	; 5
    3ab2:	95 e0       	ldi	r25, 0x05	; 5
    3ab4:	92 93       	st	-Z, r25
    3ab6:	82 93       	st	-Z, r24
    3ab8:	83 ea       	ldi	r24, 0xA3	; 163
    3aba:	9d e0       	ldi	r25, 0x0D	; 13
    3abc:	95 83       	std	Z+5, r25	; 0x05
    3abe:	84 83       	std	Z+4, r24	; 0x04
    3ac0:	88 e2       	ldi	r24, 0x28	; 40
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	91 87       	std	Z+9, r25	; 0x09
    3ac6:	80 87       	std	Z+8, r24	; 0x08
  { begin(); }
    3ac8:	cf 01       	movw	r24, r30
    3aca:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN7PString5beginEv>
			writeButtonLabels(EMPTY,PGDN,PGUP);
			delay(50);
		}

	}
}
    3ace:	08 95       	ret

00003ad0 <_ZN10NmeaSerialD1Ev>:

class AltSoftSerial : public Stream
{
public:
	AltSoftSerial() { }
	~AltSoftSerial() { end(); }
    3ad0:	2d e0       	ldi	r18, 0x0D	; 13
    3ad2:	35 e0       	ldi	r19, 0x05	; 5
    3ad4:	fc 01       	movw	r30, r24
    3ad6:	31 83       	std	Z+1, r19	; 0x01
    3ad8:	20 83       	st	Z, r18
    3ada:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <_ZN13AltSoftSerial3endEv>

#include "NmeaSerial.h"

NmeaSerial::~NmeaSerial(){

}
    3ade:	08 95       	ret

00003ae0 <_ZN10NmeaSerialD0Ev>:
 *      Author: robert
 */

#include "NmeaSerial.h"

NmeaSerial::~NmeaSerial(){
    3ae0:	cf 93       	push	r28
    3ae2:	df 93       	push	r29
    3ae4:	ec 01       	movw	r28, r24
    3ae6:	8d e0       	ldi	r24, 0x0D	; 13
    3ae8:	95 e0       	ldi	r25, 0x05	; 5
    3aea:	99 83       	std	Y+1, r25	; 0x01
    3aec:	88 83       	st	Y, r24
    3aee:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <_ZN13AltSoftSerial3endEv>

}
    3af2:	ce 01       	movw	r24, r28
    3af4:	0e 94 4e 2b 	call	0x569c	; 0x569c <_ZdlPv>
    3af8:	df 91       	pop	r29
    3afa:	cf 91       	pop	r28
    3afc:	08 95       	ret

00003afe <_ZN10NmeaSerial5beginEl>:
void NmeaSerial::begin(long speed){
    3afe:	cb 01       	movw	r24, r22
    3b00:	ba 01       	movw	r22, r20
	//initialise the nmea output
		//pinMode(nmeaRxPin, INPUT);
		//pinMode(nmeaTxPin, OUTPUT);
		AltSoftSerial::begin(speed);
    3b02:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <_ZN13AltSoftSerial5beginEm>
}
    3b06:	08 95       	ret

00003b08 <_ZN10NmeaSerial9printNmeaEPc>:

void NmeaSerial::printNmea(char* sentence){
	//sentence can be up to 80 chars
	  //make it as perfect as possible, as the Raymarine C70 is very touchy
	 // noInterrupts();
	  println(sentence);
    3b08:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
	 // interrupts();
	  //if(DEBUG)Serial.println(sentence);
}
    3b0c:	08 95       	ret

00003b0e <_ZN10NmeaSerial13printWindNmeaEv>:

void NmeaSerial::printWindNmea() {
    3b0e:	cf 92       	push	r12
    3b10:	df 92       	push	r13
    3b12:	ef 92       	push	r14
    3b14:	ff 92       	push	r15
    3b16:	0f 93       	push	r16
    3b18:	1f 93       	push	r17
    3b1a:	df 93       	push	r29
    3b1c:	cf 93       	push	r28
    3b1e:	cd b7       	in	r28, 0x3d	; 61
    3b20:	de b7       	in	r29, 0x3e	; 62
    3b22:	2a 97       	sbiw	r28, 0x0a	; 10
    3b24:	0f b6       	in	r0, 0x3f	; 63
    3b26:	f8 94       	cli
    3b28:	de bf       	out	0x3e, r29	; 62
    3b2a:	0f be       	out	0x3f, r0	; 63
    3b2c:	cd bf       	out	0x3d, r28	; 61
    3b2e:	8c 01       	movw	r16, r24
		//Assemble a sentence of the various parts so that we can calculate the proper checksum

		PString str(windSentence, sizeof(windSentence));
    3b30:	fe e0       	ldi	r31, 0x0E	; 14
    3b32:	cf 2e       	mov	r12, r31
    3b34:	d1 2c       	mov	r13, r1
    3b36:	c8 0e       	add	r12, r24
    3b38:	d9 1e       	adc	r13, r25
    3b3a:	1c 82       	std	Y+4, r1	; 0x04
    3b3c:	1b 82       	std	Y+3, r1	; 0x03
  virtual size_t write(uint8_t);

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    3b3e:	85 e0       	ldi	r24, 0x05	; 5
    3b40:	95 e0       	ldi	r25, 0x05	; 5
    3b42:	9a 83       	std	Y+2, r25	; 0x02
    3b44:	89 83       	std	Y+1, r24	; 0x01
    3b46:	de 82       	std	Y+6, r13	; 0x06
    3b48:	cd 82       	std	Y+5, r12	; 0x05
    3b4a:	8e e1       	ldi	r24, 0x1E	; 30
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	9a 87       	std	Y+10, r25	; 0x0a
    3b50:	89 87       	std	Y+9, r24	; 0x09
  { begin(); }
    3b52:	7e 01       	movw	r14, r28
    3b54:	08 94       	sec
    3b56:	e1 1c       	adc	r14, r1
    3b58:	f1 1c       	adc	r15, r1
    3b5a:	c7 01       	movw	r24, r14
    3b5c:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN7PString5beginEv>
		str.print("$IIMWV,");
    3b60:	c7 01       	movw	r24, r14
    3b62:	63 ee       	ldi	r22, 0xE3	; 227
    3b64:	74 e0       	ldi	r23, 0x04	; 4
    3b66:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_ZN5Print5printEPKc>
		str.print(model->getWindApparentDir());
    3b6a:	d8 01       	movw	r26, r16
    3b6c:	1c 96       	adiw	r26, 0x0c	; 12
    3b6e:	8d 91       	ld	r24, X+
    3b70:	9c 91       	ld	r25, X
    3b72:	1d 97       	sbiw	r26, 0x0d	; 13
    3b74:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <_ZNK14FreeBoardModel18getWindApparentDirEv>
    3b78:	bc 01       	movw	r22, r24
    3b7a:	c7 01       	movw	r24, r14
    3b7c:	4a e0       	ldi	r20, 0x0A	; 10
    3b7e:	50 e0       	ldi	r21, 0x00	; 0
    3b80:	0e 94 67 28 	call	0x50ce	; 0x50ce <_ZN5Print5printEii>
		str.print(".0,R,");
    3b84:	c7 01       	movw	r24, r14
    3b86:	6b ee       	ldi	r22, 0xEB	; 235
    3b88:	74 e0       	ldi	r23, 0x04	; 4
    3b8a:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_ZN5Print5printEPKc>
		str.print(model->getWindAverage());
    3b8e:	f8 01       	movw	r30, r16
    3b90:	84 85       	ldd	r24, Z+12	; 0x0c
    3b92:	95 85       	ldd	r25, Z+13	; 0x0d
    3b94:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <_ZNK14FreeBoardModel14getWindAverageEv>
    3b98:	bc 01       	movw	r22, r24
    3b9a:	c7 01       	movw	r24, r14
    3b9c:	4a e0       	ldi	r20, 0x0A	; 10
    3b9e:	50 e0       	ldi	r21, 0x00	; 0
    3ba0:	0e 94 67 28 	call	0x50ce	; 0x50ce <_ZN5Print5printEii>
		str.print(".0,N,A*");
    3ba4:	c7 01       	movw	r24, r14
    3ba6:	61 ef       	ldi	r22, 0xF1	; 241
    3ba8:	74 e0       	ldi	r23, 0x04	; 4
    3baa:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_ZN5Print5printEPKc>
		//calculate the checksum

		cs = 0; //clear any old checksum
    3bae:	d8 01       	movw	r26, r16
    3bb0:	9d 96       	adiw	r26, 0x2d	; 45
    3bb2:	1c 92       	st	X, r1
    3bb4:	1e 92       	st	-X, r1
    3bb6:	9c 97       	sbiw	r26, 0x2c	; 44
	  println(sentence);
	 // interrupts();
	  //if(DEBUG)Serial.println(sentence);
}

void NmeaSerial::printWindNmea() {
    3bb8:	98 01       	movw	r18, r16
    3bba:	21 5f       	subi	r18, 0xF1	; 241
    3bbc:	3f 4f       	sbci	r19, 0xFF	; 255
		str.print(model->getWindAverage());
		str.print(".0,N,A*");
		//calculate the checksum

		cs = 0; //clear any old checksum
		for (unsigned int n = 1; n < strlen(windSentence) - 1; n++) {
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	0e c0       	rjmp	.+28     	; 0x3be0 <_ZN10NmeaSerial13printWindNmeaEv+0xd2>
			cs ^= windSentence[n]; //calculates the checksum
    3bc4:	f9 01       	movw	r30, r18
    3bc6:	41 91       	ld	r20, Z+
    3bc8:	9f 01       	movw	r18, r30
    3bca:	55 27       	eor	r21, r21
    3bcc:	47 fd       	sbrc	r20, 7
    3bce:	50 95       	com	r21
    3bd0:	46 27       	eor	r20, r22
    3bd2:	57 27       	eor	r21, r23
    3bd4:	d8 01       	movw	r26, r16
    3bd6:	9d 96       	adiw	r26, 0x2d	; 45
    3bd8:	5c 93       	st	X, r21
    3bda:	4e 93       	st	-X, r20
    3bdc:	9c 97       	sbiw	r26, 0x2c	; 44
		str.print(model->getWindAverage());
		str.print(".0,N,A*");
		//calculate the checksum

		cs = 0; //clear any old checksum
		for (unsigned int n = 1; n < strlen(windSentence) - 1; n++) {
    3bde:	01 96       	adiw	r24, 0x01	; 1
    3be0:	f6 01       	movw	r30, r12
    3be2:	01 90       	ld	r0, Z+
    3be4:	00 20       	and	r0, r0
    3be6:	e9 f7       	brne	.-6      	; 0x3be2 <_ZN10NmeaSerial13printWindNmeaEv+0xd4>
    3be8:	ec 19       	sub	r30, r12
    3bea:	fd 09       	sbc	r31, r13
    3bec:	32 97       	sbiw	r30, 0x02	; 2
    3bee:	d8 01       	movw	r26, r16
    3bf0:	9c 96       	adiw	r26, 0x2c	; 44
    3bf2:	6d 91       	ld	r22, X+
    3bf4:	7c 91       	ld	r23, X
    3bf6:	9d 97       	sbiw	r26, 0x2d	; 45
    3bf8:	8e 17       	cp	r24, r30
    3bfa:	9f 07       	cpc	r25, r31
    3bfc:	18 f3       	brcs	.-58     	; 0x3bc4 <_ZN10NmeaSerial13printWindNmeaEv+0xb6>
			cs ^= windSentence[n]; //calculates the checksum
		}
		str.print(cs, HEX); // Assemble the final message and send it out the serial port
    3bfe:	ce 01       	movw	r24, r28
    3c00:	01 96       	adiw	r24, 0x01	; 1
    3c02:	40 e1       	ldi	r20, 0x10	; 16
    3c04:	50 e0       	ldi	r21, 0x00	; 0
    3c06:	0e 94 67 28 	call	0x50ce	; 0x50ce <_ZN5Print5printEii>
		if(DEBUG)Serial.println(windSentence);
    3c0a:	89 e3       	ldi	r24, 0x39	; 57
    3c0c:	90 e1       	ldi	r25, 0x10	; 16
    3c0e:	b6 01       	movw	r22, r12
    3c10:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN5Print7printlnEPKc>
		printNmea(windSentence);
    3c14:	c8 01       	movw	r24, r16
    3c16:	b6 01       	movw	r22, r12
    3c18:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <_ZN10NmeaSerial9printNmeaEPc>

}
    3c1c:	2a 96       	adiw	r28, 0x0a	; 10
    3c1e:	0f b6       	in	r0, 0x3f	; 63
    3c20:	f8 94       	cli
    3c22:	de bf       	out	0x3e, r29	; 62
    3c24:	0f be       	out	0x3f, r0	; 63
    3c26:	cd bf       	out	0x3d, r28	; 61
    3c28:	cf 91       	pop	r28
    3c2a:	df 91       	pop	r29
    3c2c:	1f 91       	pop	r17
    3c2e:	0f 91       	pop	r16
    3c30:	ff 90       	pop	r15
    3c32:	ef 90       	pop	r14
    3c34:	df 90       	pop	r13
    3c36:	cf 90       	pop	r12
    3c38:	08 95       	ret

00003c3a <_ZN7SeatalkC1EP14HardwareSerialP14FreeBoardModel>:

 */

#include "Seatalk.h"

	Seatalk::Seatalk( HardwareSerial* serial, FreeBoardModel* model) {
    3c3a:	fc 01       	movw	r30, r24
	this->model=model;
    3c3c:	57 8b       	std	Z+23, r21	; 0x17
    3c3e:	46 8b       	std	Z+22, r20	; 0x16
	this->serial=serial;
    3c40:	71 8f       	std	Z+25, r23	; 0x19
    3c42:	60 8f       	std	Z+24, r22	; 0x18
	seaTalkPos = 0;
    3c44:	11 82       	std	Z+1, r1	; 0x01
    3c46:	10 82       	st	Z, r1
}
    3c48:	08 95       	ret

00003c4a <_ZN7Seatalk18processSeaTalkByteEh>:
	// Send 36  00  01      Cancel MOB (Man Over Board) condition
	serial->write9(0x36, true);
	serial->write9(0x00, false);
	serial->write9(0x01, false);
}
void Seatalk::processSeaTalkByte(byte inByte) {
    3c4a:	fc 01       	movw	r30, r24
		processSeatalk(seatalkStream);
		seaTalkPos = 0;
		// Serial.print("Command:");
		inByte = inByte - 256;
	}
	seatalkStream[seaTalkPos] = inByte;
    3c4c:	a0 81       	ld	r26, Z
    3c4e:	b1 81       	ldd	r27, Z+1	; 0x01
    3c50:	a8 0f       	add	r26, r24
    3c52:	b9 1f       	adc	r27, r25
    3c54:	12 96       	adiw	r26, 0x02	; 2
    3c56:	6c 93       	st	X, r22
    3c58:	12 97       	sbiw	r26, 0x02	; 2
	if (seaTalkPos < 19)
    3c5a:	80 81       	ld	r24, Z
    3c5c:	91 81       	ldd	r25, Z+1	; 0x01
    3c5e:	83 31       	cpi	r24, 0x13	; 19
    3c60:	91 05       	cpc	r25, r1
    3c62:	2c f4       	brge	.+10     	; 0x3c6e <_ZN7Seatalk18processSeaTalkByteEh+0x24>
		seaTalkPos++;
    3c64:	80 81       	ld	r24, Z
    3c66:	91 81       	ldd	r25, Z+1	; 0x01
    3c68:	01 96       	adiw	r24, 0x01	; 1
    3c6a:	91 83       	std	Z+1, r25	; 0x01
    3c6c:	80 83       	st	Z, r24
    3c6e:	08 95       	ret

00003c70 <_ZN11AverageListIVlE5resetEv>:
			}
			return min;
		}
		
		//reset the AverageList
		void reset(){ 
    3c70:	fc 01       	movw	r30, r24
			currentSize = 0; 
    3c72:	13 82       	std	Z+3, r1	; 0x03
			currentIndex = 0;
    3c74:	14 82       	std	Z+4, r1	; 0x04
			for (byte i=0; i<size; i++){ values[i]=0; }
    3c76:	20 e0       	ldi	r18, 0x00	; 0
    3c78:	10 c0       	rjmp	.+32     	; 0x3c9a <_ZN11AverageListIVlE5resetEv+0x2a>
    3c7a:	82 2f       	mov	r24, r18
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	88 0f       	add	r24, r24
    3c80:	99 1f       	adc	r25, r25
    3c82:	88 0f       	add	r24, r24
    3c84:	99 1f       	adc	r25, r25
    3c86:	a0 81       	ld	r26, Z
    3c88:	b1 81       	ldd	r27, Z+1	; 0x01
    3c8a:	a8 0f       	add	r26, r24
    3c8c:	b9 1f       	adc	r27, r25
    3c8e:	1d 92       	st	X+, r1
    3c90:	1d 92       	st	X+, r1
    3c92:	1d 92       	st	X+, r1
    3c94:	1c 92       	st	X, r1
    3c96:	13 97       	sbiw	r26, 0x03	; 3
    3c98:	2f 5f       	subi	r18, 0xFF	; 255
    3c9a:	82 81       	ldd	r24, Z+2	; 0x02
    3c9c:	28 17       	cp	r18, r24
    3c9e:	68 f3       	brcs	.-38     	; 0x3c7a <_ZN11AverageListIVlE5resetEv+0xa>
		}
    3ca0:	08 95       	ret

00003ca2 <_ZN4WindC1EP14FreeBoardModel>:
val dirStorage[MAX_NUMBER_OF_READINGS] = {0};

AverageList<val> speedList = AverageList<val>( speedStorage, MAX_NUMBER_OF_READINGS );
AverageList<val> dirList = AverageList<val>( dirStorage, MAX_NUMBER_OF_READINGS );

Wind::Wind( FreeBoardModel* model) {
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	eb 01       	movw	r28, r22
	this->model=model;
    3ca8:	fc 01       	movw	r30, r24
    3caa:	71 83       	std	Z+1, r23	; 0x01
    3cac:	60 83       	st	Z, r22
	//initialise the wind interrupt
	//analogReference(INTERNAL); //ref to about 1.1V
	windSpeedDur=0;
    3cae:	10 92 d9 0d 	sts	0x0DD9, r1
    3cb2:	10 92 da 0d 	sts	0x0DDA, r1
    3cb6:	10 92 db 0d 	sts	0x0DDB, r1
    3cba:	10 92 dc 0d 	sts	0x0DDC, r1
	windSpeedMicros=micros();
    3cbe:	0e 94 a7 2b 	call	0x574e	; 0x574e <micros>
    3cc2:	60 93 dd 0d 	sts	0x0DDD, r22
    3cc6:	70 93 de 0d 	sts	0x0DDE, r23
    3cca:	80 93 df 0d 	sts	0x0DDF, r24
    3cce:	90 93 e0 0d 	sts	0x0DE0, r25
	windDirDur=0;
    3cd2:	10 92 e1 0d 	sts	0x0DE1, r1
    3cd6:	10 92 e2 0d 	sts	0x0DE2, r1
    3cda:	10 92 e3 0d 	sts	0x0DE3, r1
    3cde:	10 92 e4 0d 	sts	0x0DE4, r1
	windSpeedFlag=true;
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	80 93 e5 0d 	sts	0x0DE5, r24
	windDirFlag=false;
    3ce8:	10 92 e6 0d 	sts	0x0DE6, r1
	speedList.reset();
    3cec:	8f e0       	ldi	r24, 0x0F	; 15
    3cee:	9e e0       	ldi	r25, 0x0E	; 14
    3cf0:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <_ZN11AverageListIVlE5resetEv>
	dirList.reset();
    3cf4:	84 e1       	ldi	r24, 0x14	; 20
    3cf6:	9e e0       	ldi	r25, 0x0E	; 14
    3cf8:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <_ZN11AverageListIVlE5resetEv>

	// read the last wind alarm values
	if (model->getWindAlarmSpeed() > 99) {
    3cfc:	ce 01       	movw	r24, r28
    3cfe:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <_ZNK14FreeBoardModel17getWindAlarmSpeedEv>
    3d02:	84 36       	cpi	r24, 0x64	; 100
    3d04:	91 05       	cpc	r25, r1
    3d06:	2c f0       	brlt	.+10     	; 0x3d12 <_ZN4WindC1EP14FreeBoardModel+0x70>
		model->setWindAlarmSpeed(99);
    3d08:	ce 01       	movw	r24, r28
    3d0a:	63 e6       	ldi	r22, 0x63	; 99
    3d0c:	70 e0       	ldi	r23, 0x00	; 0
    3d0e:	0e 94 94 16 	call	0x2d28	; 0x2d28 <_ZN14FreeBoardModel17setWindAlarmSpeedEi>
	}

}
    3d12:	df 91       	pop	r29
    3d14:	cf 91       	pop	r28
    3d16:	08 95       	ret

00003d18 <_ZN11AverageListIVlE8addValueEl>:
			currentSize = 0; 
			currentIndex = 0; 
		}
		
		//add a value to the AverageList at the next index, if out of bounds, return false, else return true
		void addValue(datatype value){ 
    3d18:	0f 93       	push	r16
    3d1a:	1f 93       	push	r17
    3d1c:	df 93       	push	r29
    3d1e:	cf 93       	push	r28
    3d20:	00 d0       	rcall	.+0      	; 0x3d22 <_ZN11AverageListIVlE8addValueEl+0xa>
    3d22:	00 d0       	rcall	.+0      	; 0x3d24 <_ZN11AverageListIVlE8addValueEl+0xc>
    3d24:	cd b7       	in	r28, 0x3d	; 61
    3d26:	de b7       	in	r29, 0x3e	; 62
    3d28:	fc 01       	movw	r30, r24
    3d2a:	49 83       	std	Y+1, r20	; 0x01
    3d2c:	5a 83       	std	Y+2, r21	; 0x02
    3d2e:	6b 83       	std	Y+3, r22	; 0x03
    3d30:	7c 83       	std	Y+4, r23	; 0x04
			if (currentSize<size){
    3d32:	73 81       	ldd	r23, Z+3	; 0x03
    3d34:	62 81       	ldd	r22, Z+2	; 0x02
    3d36:	20 81       	ld	r18, Z
    3d38:	31 81       	ldd	r19, Z+1	; 0x01
    3d3a:	76 17       	cp	r23, r22
    3d3c:	d8 f4       	brcc	.+54     	; 0x3d74 <_ZN11AverageListIVlE8addValueEl+0x5c>
				values[currentSize++] = value;
    3d3e:	47 2f       	mov	r20, r23
    3d40:	50 e0       	ldi	r21, 0x00	; 0
    3d42:	44 0f       	add	r20, r20
    3d44:	55 1f       	adc	r21, r21
    3d46:	44 0f       	add	r20, r20
    3d48:	55 1f       	adc	r21, r21
    3d4a:	42 0f       	add	r20, r18
    3d4c:	53 1f       	adc	r21, r19
    3d4e:	09 81       	ldd	r16, Y+1	; 0x01
    3d50:	1a 81       	ldd	r17, Y+2	; 0x02
    3d52:	2b 81       	ldd	r18, Y+3	; 0x03
    3d54:	3c 81       	ldd	r19, Y+4	; 0x04
    3d56:	da 01       	movw	r26, r20
    3d58:	0d 93       	st	X+, r16
    3d5a:	1d 93       	st	X+, r17
    3d5c:	2d 93       	st	X+, r18
    3d5e:	3c 93       	st	X, r19
    3d60:	13 97       	sbiw	r26, 0x03	; 3
    3d62:	67 2f       	mov	r22, r23
    3d64:	6f 5f       	subi	r22, 0xFF	; 255
    3d66:	63 83       	std	Z+3, r22	; 0x03
				currentIndex = ++currentIndex % currentSize;
    3d68:	84 81       	ldd	r24, Z+4	; 0x04
    3d6a:	8f 5f       	subi	r24, 0xFF	; 255
    3d6c:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodqi4>
    3d70:	94 83       	std	Z+4, r25	; 0x04
    3d72:	15 c0       	rjmp	.+42     	; 0x3d9e <_ZN11AverageListIVlE8addValueEl+0x86>
			}else{
				currentIndex = ++currentIndex % size;
    3d74:	84 81       	ldd	r24, Z+4	; 0x04
    3d76:	8f 5f       	subi	r24, 0xFF	; 255
    3d78:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodqi4>
    3d7c:	94 83       	std	Z+4, r25	; 0x04
				values[currentIndex] = value; 
    3d7e:	e9 2f       	mov	r30, r25
    3d80:	f0 e0       	ldi	r31, 0x00	; 0
    3d82:	ee 0f       	add	r30, r30
    3d84:	ff 1f       	adc	r31, r31
    3d86:	ee 0f       	add	r30, r30
    3d88:	ff 1f       	adc	r31, r31
    3d8a:	e2 0f       	add	r30, r18
    3d8c:	f3 1f       	adc	r31, r19
    3d8e:	89 81       	ldd	r24, Y+1	; 0x01
    3d90:	9a 81       	ldd	r25, Y+2	; 0x02
    3d92:	ab 81       	ldd	r26, Y+3	; 0x03
    3d94:	bc 81       	ldd	r27, Y+4	; 0x04
    3d96:	80 83       	st	Z, r24
    3d98:	91 83       	std	Z+1, r25	; 0x01
    3d9a:	a2 83       	std	Z+2, r26	; 0x02
    3d9c:	b3 83       	std	Z+3, r27	; 0x03
			}
		}
    3d9e:	0f 90       	pop	r0
    3da0:	0f 90       	pop	r0
    3da2:	0f 90       	pop	r0
    3da4:	0f 90       	pop	r0
    3da6:	cf 91       	pop	r28
    3da8:	df 91       	pop	r29
    3daa:	1f 91       	pop	r17
    3dac:	0f 91       	pop	r16
    3dae:	08 95       	ret

00003db0 <_ZN4Wind17readWindDataSpeedEv>:


/* NMEA Wind routines and alarm
 */
void Wind::readWindDataSpeed() {
	if(windSpeedFlag){
    3db0:	80 91 e5 0d 	lds	r24, 0x0DE5
    3db4:	88 23       	and	r24, r24
    3db6:	09 f4       	brne	.+2      	; 0x3dba <_ZN4Wind17readWindDataSpeedEv+0xa>
    3db8:	62 c0       	rjmp	.+196    	; 0x3e7e <_ZN4Wind17readWindDataSpeedEv+0xce>
		windSpeedFlag=false;
    3dba:	10 92 e5 0d 	sts	0x0DE5, r1
		windDirFlag=true;
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	80 93 e6 0d 	sts	0x0DE6, r24
		//called by speed pin interrupt
		//micros resets every 50 min, reset if that happens
		//counts clicks, one per rotation, about 2-3 rotations/s =1m/s = 1.94knts
		//therefore about 50/ms = 100knts = 150 rpm = 1000000/150 = 6500 us per pulse
		//at 100 knts about 20us per degree of rotation
		lastPulse=millis();
    3dc4:	0e 94 99 2b 	call	0x5732	; 0x5732 <millis>
    3dc8:	60 93 d5 0d 	sts	0x0DD5, r22
    3dcc:	70 93 d6 0d 	sts	0x0DD6, r23
    3dd0:	80 93 d7 0d 	sts	0x0DD7, r24
    3dd4:	90 93 d8 0d 	sts	0x0DD8, r25
		windSpeedDur=micros()-windSpeedMicros;
    3dd8:	0e 94 a7 2b 	call	0x574e	; 0x574e <micros>
    3ddc:	20 91 dd 0d 	lds	r18, 0x0DDD
    3de0:	30 91 de 0d 	lds	r19, 0x0DDE
    3de4:	40 91 df 0d 	lds	r20, 0x0DDF
    3de8:	50 91 e0 0d 	lds	r21, 0x0DE0
    3dec:	62 1b       	sub	r22, r18
    3dee:	73 0b       	sbc	r23, r19
    3df0:	84 0b       	sbc	r24, r20
    3df2:	95 0b       	sbc	r25, r21
    3df4:	60 93 d9 0d 	sts	0x0DD9, r22
    3df8:	70 93 da 0d 	sts	0x0DDA, r23
    3dfc:	80 93 db 0d 	sts	0x0DDB, r24
    3e00:	90 93 dc 0d 	sts	0x0DDC, r25
		//debounce 5ms
		if(windSpeedDur>0){
    3e04:	80 91 d9 0d 	lds	r24, 0x0DD9
    3e08:	90 91 da 0d 	lds	r25, 0x0DDA
    3e0c:	a0 91 db 0d 	lds	r26, 0x0DDB
    3e10:	b0 91 dc 0d 	lds	r27, 0x0DDC
    3e14:	00 97       	sbiw	r24, 0x00	; 0
    3e16:	a1 05       	cpc	r26, r1
    3e18:	b1 05       	cpc	r27, r1
    3e1a:	b9 f0       	breq	.+46     	; 0x3e4a <_ZN4Wind17readWindDataSpeedEv+0x9a>
			//average a bit
			speedList.addValue(windSpeedDur);
    3e1c:	40 91 d9 0d 	lds	r20, 0x0DD9
    3e20:	50 91 da 0d 	lds	r21, 0x0DDA
    3e24:	60 91 db 0d 	lds	r22, 0x0DDB
    3e28:	70 91 dc 0d 	lds	r23, 0x0DDC
    3e2c:	8f e0       	ldi	r24, 0x0F	; 15
    3e2e:	9e e0       	ldi	r25, 0x0E	; 14
    3e30:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_ZN11AverageListIVlE8addValueEl>
			windSpeedMicros=micros();
    3e34:	0e 94 a7 2b 	call	0x574e	; 0x574e <micros>
    3e38:	60 93 dd 0d 	sts	0x0DDD, r22
    3e3c:	70 93 de 0d 	sts	0x0DDE, r23
    3e40:	80 93 df 0d 	sts	0x0DDF, r24
    3e44:	90 93 e0 0d 	sts	0x0DE0, r25
    3e48:	08 95       	ret
		}else {
			windDirDur=0;
    3e4a:	10 92 e1 0d 	sts	0x0DE1, r1
    3e4e:	10 92 e2 0d 	sts	0x0DE2, r1
    3e52:	10 92 e3 0d 	sts	0x0DE3, r1
    3e56:	10 92 e4 0d 	sts	0x0DE4, r1
			windSpeedDur=0;
    3e5a:	10 92 d9 0d 	sts	0x0DD9, r1
    3e5e:	10 92 da 0d 	sts	0x0DDA, r1
    3e62:	10 92 db 0d 	sts	0x0DDB, r1
    3e66:	10 92 dc 0d 	sts	0x0DDC, r1
			windSpeedMicros=micros();
    3e6a:	0e 94 a7 2b 	call	0x574e	; 0x574e <micros>
    3e6e:	60 93 dd 0d 	sts	0x0DDD, r22
    3e72:	70 93 de 0d 	sts	0x0DDE, r23
    3e76:	80 93 df 0d 	sts	0x0DDF, r24
    3e7a:	90 93 e0 0d 	sts	0x0DE0, r25
    3e7e:	08 95       	ret

00003e80 <_ZN11AverageListIVlE18addRotationalValueEl>:

		//add a circular (0-360) value to the AverageList at the next index, if out of bounds, return false, else return true
		void addRotationalValue(datatype value){
    3e80:	0f 93       	push	r16
    3e82:	1f 93       	push	r17
    3e84:	df 93       	push	r29
    3e86:	cf 93       	push	r28
    3e88:	00 d0       	rcall	.+0      	; 0x3e8a <_ZN11AverageListIVlE18addRotationalValueEl+0xa>
    3e8a:	00 d0       	rcall	.+0      	; 0x3e8c <_ZN11AverageListIVlE18addRotationalValueEl+0xc>
    3e8c:	cd b7       	in	r28, 0x3d	; 61
    3e8e:	de b7       	in	r29, 0x3e	; 62
    3e90:	8c 01       	movw	r16, r24
    3e92:	49 83       	std	Y+1, r20	; 0x01
    3e94:	5a 83       	std	Y+2, r21	; 0x02
    3e96:	6b 83       	std	Y+3, r22	; 0x03
    3e98:	7c 83       	std	Y+4, r23	; 0x04
			value=value%360;
    3e9a:	69 81       	ldd	r22, Y+1	; 0x01
    3e9c:	7a 81       	ldd	r23, Y+2	; 0x02
    3e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ea2:	28 e6       	ldi	r18, 0x68	; 104
    3ea4:	31 e0       	ldi	r19, 0x01	; 1
    3ea6:	40 e0       	ldi	r20, 0x00	; 0
    3ea8:	50 e0       	ldi	r21, 0x00	; 0
    3eaa:	0e 94 48 31 	call	0x6290	; 0x6290 <__divmodsi4>
    3eae:	69 83       	std	Y+1, r22	; 0x01
    3eb0:	7a 83       	std	Y+2, r23	; 0x02
    3eb2:	8b 83       	std	Y+3, r24	; 0x03
    3eb4:	9c 83       	std	Y+4, r25	; 0x04
			value=value-180;
    3eb6:	89 81       	ldd	r24, Y+1	; 0x01
    3eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eba:	ab 81       	ldd	r26, Y+3	; 0x03
    3ebc:	bc 81       	ldd	r27, Y+4	; 0x04
    3ebe:	84 5b       	subi	r24, 0xB4	; 180
    3ec0:	90 40       	sbci	r25, 0x00	; 0
    3ec2:	a0 40       	sbci	r26, 0x00	; 0
    3ec4:	b0 40       	sbci	r27, 0x00	; 0
    3ec6:	89 83       	std	Y+1, r24	; 0x01
    3ec8:	9a 83       	std	Y+2, r25	; 0x02
    3eca:	ab 83       	std	Y+3, r26	; 0x03
    3ecc:	bc 83       	std	Y+4, r27	; 0x04
			if (currentSize<size){
    3ece:	f8 01       	movw	r30, r16
    3ed0:	43 81       	ldd	r20, Z+3	; 0x03
    3ed2:	62 81       	ldd	r22, Z+2	; 0x02
    3ed4:	20 81       	ld	r18, Z
    3ed6:	31 81       	ldd	r19, Z+1	; 0x01
    3ed8:	46 17       	cp	r20, r22
    3eda:	d0 f4       	brcc	.+52     	; 0x3f10 <_ZN11AverageListIVlE18addRotationalValueEl+0x90>
				values[currentSize++] = value;
    3edc:	e4 2f       	mov	r30, r20
    3ede:	f0 e0       	ldi	r31, 0x00	; 0
    3ee0:	ee 0f       	add	r30, r30
    3ee2:	ff 1f       	adc	r31, r31
    3ee4:	ee 0f       	add	r30, r30
    3ee6:	ff 1f       	adc	r31, r31
    3ee8:	e2 0f       	add	r30, r18
    3eea:	f3 1f       	adc	r31, r19
    3eec:	89 81       	ldd	r24, Y+1	; 0x01
    3eee:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef0:	ab 81       	ldd	r26, Y+3	; 0x03
    3ef2:	bc 81       	ldd	r27, Y+4	; 0x04
    3ef4:	80 83       	st	Z, r24
    3ef6:	91 83       	std	Z+1, r25	; 0x01
    3ef8:	a2 83       	std	Z+2, r26	; 0x02
    3efa:	b3 83       	std	Z+3, r27	; 0x03
    3efc:	64 2f       	mov	r22, r20
    3efe:	6f 5f       	subi	r22, 0xFF	; 255
    3f00:	f8 01       	movw	r30, r16
    3f02:	63 83       	std	Z+3, r22	; 0x03
				currentIndex = ++currentIndex % currentSize;
    3f04:	84 81       	ldd	r24, Z+4	; 0x04
    3f06:	8f 5f       	subi	r24, 0xFF	; 255
    3f08:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodqi4>
    3f0c:	94 83       	std	Z+4, r25	; 0x04
    3f0e:	16 c0       	rjmp	.+44     	; 0x3f3c <_ZN11AverageListIVlE18addRotationalValueEl+0xbc>
			}else{
				currentIndex = ++currentIndex % size;
    3f10:	f8 01       	movw	r30, r16
    3f12:	84 81       	ldd	r24, Z+4	; 0x04
    3f14:	8f 5f       	subi	r24, 0xFF	; 255
    3f16:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodqi4>
    3f1a:	94 83       	std	Z+4, r25	; 0x04
				values[currentIndex] = value;
    3f1c:	e9 2f       	mov	r30, r25
    3f1e:	f0 e0       	ldi	r31, 0x00	; 0
    3f20:	ee 0f       	add	r30, r30
    3f22:	ff 1f       	adc	r31, r31
    3f24:	ee 0f       	add	r30, r30
    3f26:	ff 1f       	adc	r31, r31
    3f28:	e2 0f       	add	r30, r18
    3f2a:	f3 1f       	adc	r31, r19
    3f2c:	89 81       	ldd	r24, Y+1	; 0x01
    3f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f30:	ab 81       	ldd	r26, Y+3	; 0x03
    3f32:	bc 81       	ldd	r27, Y+4	; 0x04
    3f34:	80 83       	st	Z, r24
    3f36:	91 83       	std	Z+1, r25	; 0x01
    3f38:	a2 83       	std	Z+2, r26	; 0x02
    3f3a:	b3 83       	std	Z+3, r27	; 0x03
			}
		}
    3f3c:	0f 90       	pop	r0
    3f3e:	0f 90       	pop	r0
    3f40:	0f 90       	pop	r0
    3f42:	0f 90       	pop	r0
    3f44:	cf 91       	pop	r28
    3f46:	df 91       	pop	r29
    3f48:	1f 91       	pop	r17
    3f4a:	0f 91       	pop	r16
    3f4c:	08 95       	ret

00003f4e <_ZN4Wind15readWindDataDirEv>:
		}
	}

}
void Wind::readWindDataDir() {
    3f4e:	af 92       	push	r10
    3f50:	bf 92       	push	r11
    3f52:	cf 92       	push	r12
    3f54:	df 92       	push	r13
    3f56:	ef 92       	push	r14
    3f58:	ff 92       	push	r15
    3f5a:	0f 93       	push	r16
    3f5c:	1f 93       	push	r17
	if(windDirFlag){
    3f5e:	80 91 e6 0d 	lds	r24, 0x0DE6
    3f62:	88 23       	and	r24, r24
    3f64:	09 f4       	brne	.+2      	; 0x3f68 <_ZN4Wind15readWindDataDirEv+0x1a>
    3f66:	89 c0       	rjmp	.+274    	; 0x407a <_ZN4Wind15readWindDataDirEv+0x12c>
		windSpeedFlag=true;
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	80 93 e5 0d 	sts	0x0DE5, r24
		windDirFlag=false;
    3f6e:	10 92 e6 0d 	sts	0x0DE6, r1
		//called by dir pin interrupt
		//micros resets every 50 min, reset if that happens
		//debounce 5ms
		windDirDur=micros()-windSpeedMicros;
    3f72:	0e 94 a7 2b 	call	0x574e	; 0x574e <micros>
    3f76:	20 91 dd 0d 	lds	r18, 0x0DDD
    3f7a:	30 91 de 0d 	lds	r19, 0x0DDE
    3f7e:	40 91 df 0d 	lds	r20, 0x0DDF
    3f82:	50 91 e0 0d 	lds	r21, 0x0DE0
    3f86:	62 1b       	sub	r22, r18
    3f88:	73 0b       	sbc	r23, r19
    3f8a:	84 0b       	sbc	r24, r20
    3f8c:	95 0b       	sbc	r25, r21
    3f8e:	60 93 e1 0d 	sts	0x0DE1, r22
    3f92:	70 93 e2 0d 	sts	0x0DE2, r23
    3f96:	80 93 e3 0d 	sts	0x0DE3, r24
    3f9a:	90 93 e4 0d 	sts	0x0DE4, r25
		// calc direction, degrees clockwise
		//check for 0's and no wind.
		if(windDirDur<1){
    3f9e:	80 91 e1 0d 	lds	r24, 0x0DE1
    3fa2:	90 91 e2 0d 	lds	r25, 0x0DE2
    3fa6:	a0 91 e3 0d 	lds	r26, 0x0DE3
    3faa:	b0 91 e4 0d 	lds	r27, 0x0DE4
    3fae:	00 97       	sbiw	r24, 0x00	; 0
    3fb0:	a1 05       	cpc	r26, r1
    3fb2:	b1 05       	cpc	r27, r1
    3fb4:	89 f4       	brne	.+34     	; 0x3fd8 <_ZN4Wind15readWindDataDirEv+0x8a>
			windDirDur=0;
    3fb6:	10 92 e1 0d 	sts	0x0DE1, r1
    3fba:	10 92 e2 0d 	sts	0x0DE2, r1
    3fbe:	10 92 e3 0d 	sts	0x0DE3, r1
    3fc2:	10 92 e4 0d 	sts	0x0DE4, r1
			windSpeedDur=0;
    3fc6:	10 92 d9 0d 	sts	0x0DD9, r1
    3fca:	10 92 da 0d 	sts	0x0DDA, r1
    3fce:	10 92 db 0d 	sts	0x0DDB, r1
    3fd2:	10 92 dc 0d 	sts	0x0DDC, r1
    3fd6:	51 c0       	rjmp	.+162    	; 0x407a <_ZN4Wind15readWindDataDirEv+0x12c>
		}else{
			if(windSpeedDur>windDirDur && windSpeedDur< (3*1000000)){
    3fd8:	20 91 d9 0d 	lds	r18, 0x0DD9
    3fdc:	30 91 da 0d 	lds	r19, 0x0DDA
    3fe0:	40 91 db 0d 	lds	r20, 0x0DDB
    3fe4:	50 91 dc 0d 	lds	r21, 0x0DDC
    3fe8:	80 91 e1 0d 	lds	r24, 0x0DE1
    3fec:	90 91 e2 0d 	lds	r25, 0x0DE2
    3ff0:	a0 91 e3 0d 	lds	r26, 0x0DE3
    3ff4:	b0 91 e4 0d 	lds	r27, 0x0DE4
    3ff8:	82 17       	cp	r24, r18
    3ffa:	93 07       	cpc	r25, r19
    3ffc:	a4 07       	cpc	r26, r20
    3ffe:	b5 07       	cpc	r27, r21
    4000:	e0 f5       	brcc	.+120    	; 0x407a <_ZN4Wind15readWindDataDirEv+0x12c>
    4002:	80 91 d9 0d 	lds	r24, 0x0DD9
    4006:	90 91 da 0d 	lds	r25, 0x0DDA
    400a:	a0 91 db 0d 	lds	r26, 0x0DDB
    400e:	b0 91 dc 0d 	lds	r27, 0x0DDC
    4012:	80 3c       	cpi	r24, 0xC0	; 192
    4014:	26 ec       	ldi	r18, 0xC6	; 198
    4016:	92 07       	cpc	r25, r18
    4018:	2d e2       	ldi	r18, 0x2D	; 45
    401a:	a2 07       	cpc	r26, r18
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	b2 07       	cpc	r27, r18
    4020:	60 f5       	brcc	.+88     	; 0x407a <_ZN4Wind15readWindDataDirEv+0x12c>
				//total time to rotate = windSpeedDur
				//time to arrow = windDirDur
				//so windDirDur/windSpeedDur gives the fraction of 360deg
				//should round to int, min 1
				dirList.addRotationalValue(360*((float)windDirDur/(float)windSpeedDur));
    4022:	60 91 e1 0d 	lds	r22, 0x0DE1
    4026:	70 91 e2 0d 	lds	r23, 0x0DE2
    402a:	80 91 e3 0d 	lds	r24, 0x0DE3
    402e:	90 91 e4 0d 	lds	r25, 0x0DE4
    4032:	e0 90 d9 0d 	lds	r14, 0x0DD9
    4036:	f0 90 da 0d 	lds	r15, 0x0DDA
    403a:	00 91 db 0d 	lds	r16, 0x0DDB
    403e:	10 91 dc 0d 	lds	r17, 0x0DDC
    4042:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <__floatunsisf>
    4046:	5b 01       	movw	r10, r22
    4048:	6c 01       	movw	r12, r24
    404a:	c8 01       	movw	r24, r16
    404c:	b7 01       	movw	r22, r14
    404e:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <__floatunsisf>
    4052:	9b 01       	movw	r18, r22
    4054:	ac 01       	movw	r20, r24
    4056:	c6 01       	movw	r24, r12
    4058:	b5 01       	movw	r22, r10
    405a:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <__divsf3>
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	44 eb       	ldi	r20, 0xB4	; 180
    4064:	53 e4       	ldi	r21, 0x43	; 67
    4066:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    406a:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__fixsfsi>
    406e:	ab 01       	movw	r20, r22
    4070:	bc 01       	movw	r22, r24
    4072:	84 e1       	ldi	r24, 0x14	; 20
    4074:	9e e0       	ldi	r25, 0x0E	; 14
    4076:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <_ZN11AverageListIVlE18addRotationalValueEl>
			}
		}
	}
}
    407a:	1f 91       	pop	r17
    407c:	0f 91       	pop	r16
    407e:	ff 90       	pop	r15
    4080:	ef 90       	pop	r14
    4082:	df 90       	pop	r13
    4084:	cf 90       	pop	r12
    4086:	bf 90       	pop	r11
    4088:	af 90       	pop	r10
    408a:	08 95       	ret

0000408c <_ZN11AverageListIVlE15getTotalAverageEv>:
			else
				return (datatype)180-buffer;
		}

		//return the average of the entire AverageList, even though all values might not be initialized
		datatype getTotalAverage(){
    408c:	cf 92       	push	r12
    408e:	df 92       	push	r13
    4090:	ff 92       	push	r15
    4092:	0f 93       	push	r16
    4094:	1f 93       	push	r17
    4096:	df 93       	push	r29
    4098:	cf 93       	push	r28
    409a:	00 d0       	rcall	.+0      	; 0x409c <_ZN11AverageListIVlE15getTotalAverageEv+0x10>
    409c:	00 d0       	rcall	.+0      	; 0x409e <_ZN11AverageListIVlE15getTotalAverageEv+0x12>
    409e:	cd b7       	in	r28, 0x3d	; 61
    40a0:	de b7       	in	r29, 0x3e	; 62
			datatype buffer = 0;
    40a2:	19 82       	std	Y+1, r1	; 0x01
    40a4:	1a 82       	std	Y+2, r1	; 0x02
    40a6:	1b 82       	std	Y+3, r1	; 0x03
    40a8:	1c 82       	std	Y+4, r1	; 0x04
			for (byte i=0; i<size; i++){ buffer += values[i]; }
    40aa:	dc 01       	movw	r26, r24
    40ac:	12 96       	adiw	r26, 0x02	; 2
    40ae:	fc 90       	ld	r15, X
    40b0:	12 97       	sbiw	r26, 0x02	; 2
			else
				return (datatype)180-buffer;
		}

		//return the average of the entire AverageList, even though all values might not be initialized
		datatype getTotalAverage(){
    40b2:	cf 2c       	mov	r12, r15
    40b4:	dd 24       	eor	r13, r13
    40b6:	cc 0c       	add	r12, r12
    40b8:	dd 1c       	adc	r13, r13
    40ba:	cc 0c       	add	r12, r12
    40bc:	dd 1c       	adc	r13, r13
			datatype buffer = 0;
			for (byte i=0; i<size; i++){ buffer += values[i]; }
    40be:	e0 e0       	ldi	r30, 0x00	; 0
    40c0:	f0 e0       	ldi	r31, 0x00	; 0
    40c2:	18 c0       	rjmp	.+48     	; 0x40f4 <_ZN11AverageListIVlE15getTotalAverageEv+0x68>
    40c4:	09 81       	ldd	r16, Y+1	; 0x01
    40c6:	1a 81       	ldd	r17, Y+2	; 0x02
    40c8:	2b 81       	ldd	r18, Y+3	; 0x03
    40ca:	3c 81       	ldd	r19, Y+4	; 0x04
    40cc:	dc 01       	movw	r26, r24
    40ce:	4d 91       	ld	r20, X+
    40d0:	5c 91       	ld	r21, X
    40d2:	4e 0f       	add	r20, r30
    40d4:	5f 1f       	adc	r21, r31
    40d6:	da 01       	movw	r26, r20
    40d8:	4d 91       	ld	r20, X+
    40da:	5d 91       	ld	r21, X+
    40dc:	6d 91       	ld	r22, X+
    40de:	7c 91       	ld	r23, X
    40e0:	13 97       	sbiw	r26, 0x03	; 3
    40e2:	40 0f       	add	r20, r16
    40e4:	51 1f       	adc	r21, r17
    40e6:	62 1f       	adc	r22, r18
    40e8:	73 1f       	adc	r23, r19
    40ea:	49 83       	std	Y+1, r20	; 0x01
    40ec:	5a 83       	std	Y+2, r21	; 0x02
    40ee:	6b 83       	std	Y+3, r22	; 0x03
    40f0:	7c 83       	std	Y+4, r23	; 0x04
    40f2:	34 96       	adiw	r30, 0x04	; 4
    40f4:	ec 15       	cp	r30, r12
    40f6:	fd 05       	cpc	r31, r13
    40f8:	29 f7       	brne	.-54     	; 0x40c4 <_ZN11AverageListIVlE15getTotalAverageEv+0x38>
			buffer /= size;
    40fa:	69 81       	ldd	r22, Y+1	; 0x01
    40fc:	7a 81       	ldd	r23, Y+2	; 0x02
    40fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4100:	9c 81       	ldd	r25, Y+4	; 0x04
    4102:	2f 2d       	mov	r18, r15
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	40 e0       	ldi	r20, 0x00	; 0
    4108:	50 e0       	ldi	r21, 0x00	; 0
    410a:	0e 94 48 31 	call	0x6290	; 0x6290 <__divmodsi4>
    410e:	29 83       	std	Y+1, r18	; 0x01
    4110:	3a 83       	std	Y+2, r19	; 0x02
    4112:	4b 83       	std	Y+3, r20	; 0x03
    4114:	5c 83       	std	Y+4, r21	; 0x04
			return buffer;
    4116:	29 81       	ldd	r18, Y+1	; 0x01
    4118:	3a 81       	ldd	r19, Y+2	; 0x02
    411a:	4b 81       	ldd	r20, Y+3	; 0x03
    411c:	5c 81       	ldd	r21, Y+4	; 0x04
		}
    411e:	b9 01       	movw	r22, r18
    4120:	ca 01       	movw	r24, r20
    4122:	0f 90       	pop	r0
    4124:	0f 90       	pop	r0
    4126:	0f 90       	pop	r0
    4128:	0f 90       	pop	r0
    412a:	cf 91       	pop	r28
    412c:	df 91       	pop	r29
    412e:	1f 91       	pop	r17
    4130:	0f 91       	pop	r16
    4132:	ff 90       	pop	r15
    4134:	df 90       	pop	r13
    4136:	cf 90       	pop	r12
    4138:	08 95       	ret

0000413a <_ZN11AverageListIVlE20getRotationalAverageEv>:
			return (datatype)buffer;
		}


		//return the average of all circular (0-360) values added with an addRotationalValue call
		datatype getRotationalAverage(){
    413a:	3f 92       	push	r3
    413c:	4f 92       	push	r4
    413e:	5f 92       	push	r5
    4140:	6f 92       	push	r6
    4142:	7f 92       	push	r7
    4144:	8f 92       	push	r8
    4146:	9f 92       	push	r9
    4148:	af 92       	push	r10
    414a:	bf 92       	push	r11
    414c:	cf 92       	push	r12
    414e:	df 92       	push	r13
    4150:	ef 92       	push	r14
    4152:	ff 92       	push	r15
    4154:	0f 93       	push	r16
    4156:	1f 93       	push	r17
    4158:	cf 93       	push	r28
    415a:	df 93       	push	r29
    415c:	2c 01       	movw	r4, r24
			float buffer = 0;
			float sign = 0;
			for (byte i=0; i<currentSize; i++){
    415e:	fc 01       	movw	r30, r24
    4160:	33 80       	ldd	r3, Z+3	; 0x03
			return (datatype)buffer;
		}


		//return the average of all circular (0-360) values added with an addRotationalValue call
		datatype getRotationalAverage(){
    4162:	a3 2c       	mov	r10, r3
    4164:	bb 24       	eor	r11, r11
    4166:	aa 0c       	add	r10, r10
    4168:	bb 1c       	adc	r11, r11
    416a:	aa 0c       	add	r10, r10
    416c:	bb 1c       	adc	r11, r11
			float buffer = 0;
			float sign = 0;
			for (byte i=0; i<currentSize; i++){
    416e:	00 e0       	ldi	r16, 0x00	; 0
    4170:	10 e0       	ldi	r17, 0x00	; 0


		//return the average of all circular (0-360) values added with an addRotationalValue call
		datatype getRotationalAverage(){
			float buffer = 0;
			float sign = 0;
    4172:	99 24       	eor	r9, r9
    4174:	88 24       	eor	r8, r8
    4176:	77 24       	eor	r7, r7
    4178:	66 24       	eor	r6, r6
		}


		//return the average of all circular (0-360) values added with an addRotationalValue call
		datatype getRotationalAverage(){
			float buffer = 0;
    417a:	ff 24       	eor	r15, r15
    417c:	ee 24       	eor	r14, r14
    417e:	dd 24       	eor	r13, r13
    4180:	cc 24       	eor	r12, r12
			float sign = 0;
			for (byte i=0; i<currentSize; i++){
    4182:	44 c0       	rjmp	.+136    	; 0x420c <_ZN11AverageListIVlE20getRotationalAverageEv+0xd2>
				buffer += (float)abs(values[i]);
    4184:	f2 01       	movw	r30, r4
    4186:	c0 81       	ld	r28, Z
    4188:	d1 81       	ldd	r29, Z+1	; 0x01
    418a:	c0 0f       	add	r28, r16
    418c:	d1 1f       	adc	r29, r17
    418e:	88 81       	ld	r24, Y
    4190:	99 81       	ldd	r25, Y+1	; 0x01
    4192:	aa 81       	ldd	r26, Y+2	; 0x02
    4194:	bb 81       	ldd	r27, Y+3	; 0x03
    4196:	18 16       	cp	r1, r24
    4198:	19 06       	cpc	r1, r25
    419a:	1a 06       	cpc	r1, r26
    419c:	1b 06       	cpc	r1, r27
    419e:	2c f4       	brge	.+10     	; 0x41aa <_ZN11AverageListIVlE20getRotationalAverageEv+0x70>
    41a0:	68 81       	ld	r22, Y
    41a2:	79 81       	ldd	r23, Y+1	; 0x01
    41a4:	8a 81       	ldd	r24, Y+2	; 0x02
    41a6:	9b 81       	ldd	r25, Y+3	; 0x03
    41a8:	0b c0       	rjmp	.+22     	; 0x41c0 <_ZN11AverageListIVlE20getRotationalAverageEv+0x86>
    41aa:	68 81       	ld	r22, Y
    41ac:	79 81       	ldd	r23, Y+1	; 0x01
    41ae:	8a 81       	ldd	r24, Y+2	; 0x02
    41b0:	9b 81       	ldd	r25, Y+3	; 0x03
    41b2:	90 95       	com	r25
    41b4:	80 95       	com	r24
    41b6:	70 95       	com	r23
    41b8:	61 95       	neg	r22
    41ba:	7f 4f       	sbci	r23, 0xFF	; 255
    41bc:	8f 4f       	sbci	r24, 0xFF	; 255
    41be:	9f 4f       	sbci	r25, 0xFF	; 255
    41c0:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__floatsisf>
    41c4:	9b 01       	movw	r18, r22
    41c6:	ac 01       	movw	r20, r24
    41c8:	d7 01       	movw	r26, r14
    41ca:	f6 01       	movw	r30, r12
    41cc:	6b 2f       	mov	r22, r27
    41ce:	7e 2d       	mov	r23, r14
    41d0:	8f 2f       	mov	r24, r31
    41d2:	9c 2d       	mov	r25, r12
    41d4:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    41d8:	f6 2e       	mov	r15, r22
    41da:	e7 2e       	mov	r14, r23
    41dc:	d8 2e       	mov	r13, r24
    41de:	c9 2e       	mov	r12, r25
				sign += (float)values[i];
    41e0:	68 81       	ld	r22, Y
    41e2:	79 81       	ldd	r23, Y+1	; 0x01
    41e4:	8a 81       	ldd	r24, Y+2	; 0x02
    41e6:	9b 81       	ldd	r25, Y+3	; 0x03
    41e8:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__floatsisf>
    41ec:	9b 01       	movw	r18, r22
    41ee:	ac 01       	movw	r20, r24
    41f0:	d4 01       	movw	r26, r8
    41f2:	f3 01       	movw	r30, r6
    41f4:	6b 2f       	mov	r22, r27
    41f6:	78 2d       	mov	r23, r8
    41f8:	8f 2f       	mov	r24, r31
    41fa:	96 2d       	mov	r25, r6
    41fc:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    4200:	96 2e       	mov	r9, r22
    4202:	87 2e       	mov	r8, r23
    4204:	78 2e       	mov	r7, r24
    4206:	69 2e       	mov	r6, r25
    4208:	0c 5f       	subi	r16, 0xFC	; 252
    420a:	1f 4f       	sbci	r17, 0xFF	; 255

		//return the average of all circular (0-360) values added with an addRotationalValue call
		datatype getRotationalAverage(){
			float buffer = 0;
			float sign = 0;
			for (byte i=0; i<currentSize; i++){
    420c:	0a 15       	cp	r16, r10
    420e:	1b 05       	cpc	r17, r11
    4210:	09 f0       	breq	.+2      	; 0x4214 <_ZN11AverageListIVlE20getRotationalAverageEv+0xda>
    4212:	b8 cf       	rjmp	.-144    	; 0x4184 <_ZN11AverageListIVlE20getRotationalAverageEv+0x4a>
				buffer += (float)abs(values[i]);
				sign += (float)values[i];
			}
			buffer /= currentSize;
    4214:	63 2d       	mov	r22, r3
    4216:	70 e0       	ldi	r23, 0x00	; 0
    4218:	88 27       	eor	r24, r24
    421a:	77 fd       	sbrc	r23, 7
    421c:	80 95       	com	r24
    421e:	98 2f       	mov	r25, r24
    4220:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__floatsisf>
    4224:	9b 01       	movw	r18, r22
    4226:	ac 01       	movw	r20, r24
    4228:	d7 01       	movw	r26, r14
    422a:	f6 01       	movw	r30, r12
    422c:	6b 2f       	mov	r22, r27
    422e:	7e 2d       	mov	r23, r14
    4230:	8f 2f       	mov	r24, r31
    4232:	9c 2d       	mov	r25, r12
    4234:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <__divsf3>
    4238:	d6 2e       	mov	r13, r22
    423a:	e7 2e       	mov	r14, r23
    423c:	f8 2e       	mov	r15, r24
    423e:	09 2f       	mov	r16, r25
			if(sign>0)
    4240:	a4 01       	movw	r20, r8
    4242:	93 01       	movw	r18, r6
    4244:	65 2f       	mov	r22, r21
    4246:	78 2d       	mov	r23, r8
    4248:	83 2f       	mov	r24, r19
    424a:	96 2d       	mov	r25, r6
    424c:	20 e0       	ldi	r18, 0x00	; 0
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	a9 01       	movw	r20, r18
    4252:	0e 94 17 30 	call	0x602e	; 0x602e <__gesf2>
    4256:	18 16       	cp	r1, r24
    4258:	6c f4       	brge	.+26     	; 0x4274 <_ZN11AverageListIVlE20getRotationalAverageEv+0x13a>
				return (datatype)buffer+180;
    425a:	6d 2d       	mov	r22, r13
    425c:	7e 2d       	mov	r23, r14
    425e:	8f 2d       	mov	r24, r15
    4260:	90 2f       	mov	r25, r16
    4262:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__fixsfsi>
    4266:	9b 01       	movw	r18, r22
    4268:	ac 01       	movw	r20, r24
    426a:	2c 54       	subi	r18, 0x4C	; 76
    426c:	3f 4f       	sbci	r19, 0xFF	; 255
    426e:	4f 4f       	sbci	r20, 0xFF	; 255
    4270:	5f 4f       	sbci	r21, 0xFF	; 255
    4272:	0e c0       	rjmp	.+28     	; 0x4290 <_ZN11AverageListIVlE20getRotationalAverageEv+0x156>
			else
				return (datatype)180-buffer;
    4274:	60 e0       	ldi	r22, 0x00	; 0
    4276:	70 e0       	ldi	r23, 0x00	; 0
    4278:	84 e3       	ldi	r24, 0x34	; 52
    427a:	93 e4       	ldi	r25, 0x43	; 67
    427c:	2d 2d       	mov	r18, r13
    427e:	3e 2d       	mov	r19, r14
    4280:	4f 2d       	mov	r20, r15
    4282:	50 2f       	mov	r21, r16
    4284:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
    4288:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__fixsfsi>
    428c:	9b 01       	movw	r18, r22
    428e:	ac 01       	movw	r20, r24
		}
    4290:	b9 01       	movw	r22, r18
    4292:	ca 01       	movw	r24, r20
    4294:	df 91       	pop	r29
    4296:	cf 91       	pop	r28
    4298:	1f 91       	pop	r17
    429a:	0f 91       	pop	r16
    429c:	ff 90       	pop	r15
    429e:	ef 90       	pop	r14
    42a0:	df 90       	pop	r13
    42a2:	cf 90       	pop	r12
    42a4:	bf 90       	pop	r11
    42a6:	af 90       	pop	r10
    42a8:	9f 90       	pop	r9
    42aa:	8f 90       	pop	r8
    42ac:	7f 90       	pop	r7
    42ae:	6f 90       	pop	r6
    42b0:	5f 90       	pop	r5
    42b2:	4f 90       	pop	r4
    42b4:	3f 90       	pop	r3
    42b6:	08 95       	ret

000042b8 <_ZN4Wind12calcWindDataEv>:

void Wind::calcWindData() {
    42b8:	cf 92       	push	r12
    42ba:	df 92       	push	r13
    42bc:	ef 92       	push	r14
    42be:	ff 92       	push	r15
    42c0:	0f 93       	push	r16
    42c2:	1f 93       	push	r17
    42c4:	cf 93       	push	r28
    42c6:	df 93       	push	r29
    42c8:	ec 01       	movw	r28, r24
//		Serial.println(windSpeedDur);
//		Serial.print("WindDir list:");
//		Serial.print(dirList.getTotalAverage());
//		Serial.print(", WindDirDur:");
//		Serial.println(windDirDur);
		model->setWindLastUpdate(millis());
    42ca:	08 81       	ld	r16, Y
    42cc:	19 81       	ldd	r17, Y+1	; 0x01
    42ce:	0e 94 99 2b 	call	0x5732	; 0x5732 <millis>
    42d2:	ab 01       	movw	r20, r22
    42d4:	bc 01       	movw	r22, r24
    42d6:	c8 01       	movw	r24, r16
    42d8:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <_ZN14FreeBoardModel17setWindLastUpdateEm>
						Serial.print(dirList.getTotalAverage());
						Serial.print(", Wind speed:");
						Serial.println(speedList.getTotalAverage());
					}*/
		//convert to windAverage
		if(millis()-lastPulse>3000){
    42dc:	0e 94 99 2b 	call	0x5732	; 0x5732 <millis>
    42e0:	20 91 d5 0d 	lds	r18, 0x0DD5
    42e4:	30 91 d6 0d 	lds	r19, 0x0DD6
    42e8:	40 91 d7 0d 	lds	r20, 0x0DD7
    42ec:	50 91 d8 0d 	lds	r21, 0x0DD8
    42f0:	62 1b       	sub	r22, r18
    42f2:	73 0b       	sbc	r23, r19
    42f4:	84 0b       	sbc	r24, r20
    42f6:	95 0b       	sbc	r25, r21
    42f8:	08 81       	ld	r16, Y
    42fa:	19 81       	ldd	r17, Y+1	; 0x01
    42fc:	69 3b       	cpi	r22, 0xB9	; 185
    42fe:	2b e0       	ldi	r18, 0x0B	; 11
    4300:	72 07       	cpc	r23, r18
    4302:	20 e0       	ldi	r18, 0x00	; 0
    4304:	82 07       	cpc	r24, r18
    4306:	20 e0       	ldi	r18, 0x00	; 0
    4308:	92 07       	cpc	r25, r18
    430a:	50 f0       	brcs	.+20     	; 0x4320 <_ZN4Wind12calcWindDataEv+0x68>
			//no rotation, no wind
			model->setWindAverage(0);
    430c:	c8 01       	movw	r24, r16
    430e:	60 e0       	ldi	r22, 0x00	; 0
    4310:	70 e0       	ldi	r23, 0x00	; 0
    4312:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN14FreeBoardModel14setWindAverageEi>
			//Serial.println("Wind speed reset");
			speedList.reset();
    4316:	8f e0       	ldi	r24, 0x0F	; 15
    4318:	9e e0       	ldi	r25, 0x0E	; 14
    431a:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <_ZN11AverageListIVlE5resetEv>
    431e:	2e c0       	rjmp	.+92     	; 0x437c <_ZN4Wind12calcWindDataEv+0xc4>
		}else{
			/*if(DEBUG){
				Serial.print("Wind speed:");
				Serial.println(speedList.getTotalAverage());
			}*/
			model->setWindAverage(model->getWindFactor() / speedList.getTotalAverage()) ;
    4320:	c8 01       	movw	r24, r16
    4322:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <_ZNK14FreeBoardModel13getWindFactorEv>
    4326:	6b 01       	movw	r12, r22
    4328:	7c 01       	movw	r14, r24
    432a:	8f e0       	ldi	r24, 0x0F	; 15
    432c:	9e e0       	ldi	r25, 0x0E	; 14
    432e:	0e 94 46 20 	call	0x408c	; 0x408c <_ZN11AverageListIVlE15getTotalAverageEv>
    4332:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__floatsisf>
    4336:	9b 01       	movw	r18, r22
    4338:	ac 01       	movw	r20, r24
    433a:	c7 01       	movw	r24, r14
    433c:	b6 01       	movw	r22, r12
    433e:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <__divsf3>
    4342:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__fixsfsi>
    4346:	9b 01       	movw	r18, r22
    4348:	ac 01       	movw	r20, r24
    434a:	c8 01       	movw	r24, r16
    434c:	b9 01       	movw	r22, r18
    434e:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN14FreeBoardModel14setWindAverageEi>

			//update gusts
			if (model->getWindAverage() > model->getWindMax())
    4352:	88 81       	ld	r24, Y
    4354:	99 81       	ldd	r25, Y+1	; 0x01
    4356:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <_ZNK14FreeBoardModel14getWindAverageEv>
    435a:	8c 01       	movw	r16, r24
    435c:	88 81       	ld	r24, Y
    435e:	99 81       	ldd	r25, Y+1	; 0x01
    4360:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <_ZNK14FreeBoardModel10getWindMaxEv>
    4364:	80 17       	cp	r24, r16
    4366:	91 07       	cpc	r25, r17
    4368:	4c f4       	brge	.+18     	; 0x437c <_ZN4Wind12calcWindDataEv+0xc4>
				model->setWindMax(model->getWindAverage());
    436a:	08 81       	ld	r16, Y
    436c:	19 81       	ldd	r17, Y+1	; 0x01
    436e:	c8 01       	movw	r24, r16
    4370:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <_ZNK14FreeBoardModel14getWindAverageEv>
    4374:	bc 01       	movw	r22, r24
    4376:	c8 01       	movw	r24, r16
    4378:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <_ZN14FreeBoardModel10setWindMaxEi>
		}

	// calc direction, degrees clockwise
	//should round to int, min 1
		model->setWindApparentDir((int)dirList.getRotationalAverage());
    437c:	09 90       	ld	r0, Y+
    437e:	d8 81       	ld	r29, Y
    4380:	c0 2d       	mov	r28, r0
    4382:	84 e1       	ldi	r24, 0x14	; 20
    4384:	9e e0       	ldi	r25, 0x0E	; 14
    4386:	0e 94 9d 20 	call	0x413a	; 0x413a <_ZN11AverageListIVlE20getRotationalAverageEv>
    438a:	9b 01       	movw	r18, r22
    438c:	ac 01       	movw	r20, r24
    438e:	ce 01       	movw	r24, r28
    4390:	b9 01       	movw	r22, r18
    4392:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <_ZN14FreeBoardModel18setWindApparentDirEi>

}
    4396:	df 91       	pop	r29
    4398:	cf 91       	pop	r28
    439a:	1f 91       	pop	r17
    439c:	0f 91       	pop	r16
    439e:	ff 90       	pop	r15
    43a0:	ef 90       	pop	r14
    43a2:	df 90       	pop	r13
    43a4:	cf 90       	pop	r12
    43a6:	08 95       	ret

000043a8 <_GLOBAL__I_lastPulse>:

template<typename datatype>
class AverageList {
	public:
		//<<constructor>>
		AverageList(datatype* storage, byte storageSize) : values(storage) , size(storageSize) { 
    43a8:	87 ee       	ldi	r24, 0xE7	; 231
    43aa:	9d e0       	ldi	r25, 0x0D	; 13
    43ac:	90 93 10 0e 	sts	0x0E10, r25
    43b0:	80 93 0f 0e 	sts	0x0E0F, r24
    43b4:	25 e0       	ldi	r18, 0x05	; 5
    43b6:	20 93 11 0e 	sts	0x0E11, r18
			currentSize = 0; 
    43ba:	10 92 12 0e 	sts	0x0E12, r1
			currentIndex = 0; 
    43be:	10 92 13 0e 	sts	0x0E13, r1

template<typename datatype>
class AverageList {
	public:
		//<<constructor>>
		AverageList(datatype* storage, byte storageSize) : values(storage) , size(storageSize) { 
    43c2:	8b ef       	ldi	r24, 0xFB	; 251
    43c4:	9d e0       	ldi	r25, 0x0D	; 13
    43c6:	90 93 15 0e 	sts	0x0E15, r25
    43ca:	80 93 14 0e 	sts	0x0E14, r24
    43ce:	20 93 16 0e 	sts	0x0E16, r18
			currentSize = 0; 
    43d2:	10 92 17 0e 	sts	0x0E17, r1
			currentIndex = 0; 
    43d6:	10 92 18 0e 	sts	0x0E18, r1
    43da:	08 95       	ret

000043dc <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    43dc:	fc 01       	movw	r30, r24
    43de:	84 85       	ldd	r24, Z+12	; 0x0c
    43e0:	95 85       	ldd	r25, Z+13	; 0x0d
    43e2:	fc 01       	movw	r30, r24
    43e4:	e0 5c       	subi	r30, 0xC0	; 192
    43e6:	ff 4f       	sbci	r31, 0xFF	; 255
    43e8:	20 81       	ld	r18, Z
    43ea:	31 81       	ldd	r19, Z+1	; 0x01
    43ec:	8e 5b       	subi	r24, 0xBE	; 190
    43ee:	9f 4f       	sbci	r25, 0xFF	; 255
    43f0:	fc 01       	movw	r30, r24
    43f2:	80 81       	ld	r24, Z
    43f4:	91 81       	ldd	r25, Z+1	; 0x01
    43f6:	28 1b       	sub	r18, r24
    43f8:	39 0b       	sbc	r19, r25
    43fa:	2f 73       	andi	r18, 0x3F	; 63
    43fc:	30 70       	andi	r19, 0x00	; 0
}
    43fe:	c9 01       	movw	r24, r18
    4400:	08 95       	ret

00004402 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    4402:	fc 01       	movw	r30, r24
    4404:	84 85       	ldd	r24, Z+12	; 0x0c
    4406:	95 85       	ldd	r25, Z+13	; 0x0d
    4408:	fc 01       	movw	r30, r24
    440a:	e0 5c       	subi	r30, 0xC0	; 192
    440c:	ff 4f       	sbci	r31, 0xFF	; 255
    440e:	40 81       	ld	r20, Z
    4410:	51 81       	ldd	r21, Z+1	; 0x01
    4412:	fc 01       	movw	r30, r24
    4414:	ee 5b       	subi	r30, 0xBE	; 190
    4416:	ff 4f       	sbci	r31, 0xFF	; 255
    4418:	20 81       	ld	r18, Z
    441a:	31 81       	ldd	r19, Z+1	; 0x01
    441c:	42 17       	cp	r20, r18
    441e:	53 07       	cpc	r21, r19
    4420:	41 f0       	breq	.+16     	; 0x4432 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    4422:	01 90       	ld	r0, Z+
    4424:	f0 81       	ld	r31, Z
    4426:	e0 2d       	mov	r30, r0
    4428:	e8 0f       	add	r30, r24
    442a:	f9 1f       	adc	r31, r25
    442c:	20 81       	ld	r18, Z
    442e:	30 e0       	ldi	r19, 0x00	; 0
    4430:	02 c0       	rjmp	.+4      	; 0x4436 <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    4432:	2f ef       	ldi	r18, 0xFF	; 255
    4434:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    4436:	c9 01       	movw	r24, r18
    4438:	08 95       	ret

0000443a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    443a:	fc 01       	movw	r30, r24
    443c:	84 85       	ldd	r24, Z+12	; 0x0c
    443e:	95 85       	ldd	r25, Z+13	; 0x0d
    4440:	fc 01       	movw	r30, r24
    4442:	e0 5c       	subi	r30, 0xC0	; 192
    4444:	ff 4f       	sbci	r31, 0xFF	; 255
    4446:	40 81       	ld	r20, Z
    4448:	51 81       	ldd	r21, Z+1	; 0x01
    444a:	fc 01       	movw	r30, r24
    444c:	ee 5b       	subi	r30, 0xBE	; 190
    444e:	ff 4f       	sbci	r31, 0xFF	; 255
    4450:	20 81       	ld	r18, Z
    4452:	31 81       	ldd	r19, Z+1	; 0x01
    4454:	42 17       	cp	r20, r18
    4456:	53 07       	cpc	r21, r19
    4458:	71 f0       	breq	.+28     	; 0x4476 <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    445a:	a0 81       	ld	r26, Z
    445c:	b1 81       	ldd	r27, Z+1	; 0x01
    445e:	a8 0f       	add	r26, r24
    4460:	b9 1f       	adc	r27, r25
    4462:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    4464:	80 81       	ld	r24, Z
    4466:	91 81       	ldd	r25, Z+1	; 0x01
    4468:	01 96       	adiw	r24, 0x01	; 1
    446a:	8f 73       	andi	r24, 0x3F	; 63
    446c:	90 70       	andi	r25, 0x00	; 0
    446e:	91 83       	std	Z+1, r25	; 0x01
    4470:	80 83       	st	Z, r24
    return c;
    4472:	30 e0       	ldi	r19, 0x00	; 0
    4474:	02 c0       	rjmp	.+4      	; 0x447a <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    4476:	2f ef       	ldi	r18, 0xFF	; 255
    4478:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    447a:	c9 01       	movw	r24, r18
    447c:	08 95       	ret

0000447e <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    447e:	dc 01       	movw	r26, r24
    4480:	1e 96       	adiw	r26, 0x0e	; 14
    4482:	8d 91       	ld	r24, X+
    4484:	9c 91       	ld	r25, X
    4486:	1f 97       	sbiw	r26, 0x0f	; 15
    4488:	fc 01       	movw	r30, r24
    448a:	e0 5c       	subi	r30, 0xC0	; 192
    448c:	ff 4f       	sbci	r31, 0xFF	; 255
    448e:	8e 5b       	subi	r24, 0xBE	; 190
    4490:	9f 4f       	sbci	r25, 0xFF	; 255
    4492:	40 81       	ld	r20, Z
    4494:	51 81       	ldd	r21, Z+1	; 0x01
    4496:	dc 01       	movw	r26, r24
    4498:	2d 91       	ld	r18, X+
    449a:	3c 91       	ld	r19, X
    449c:	11 97       	sbiw	r26, 0x01	; 1
    449e:	42 17       	cp	r20, r18
    44a0:	53 07       	cpc	r21, r19
    44a2:	b9 f7       	brne	.-18     	; 0x4492 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
    44a4:	08 95       	ret

000044a6 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    44a6:	fc 01       	movw	r30, r24
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    44a8:	26 85       	ldd	r18, Z+14	; 0x0e
    44aa:	37 85       	ldd	r19, Z+15	; 0x0f
    44ac:	d9 01       	movw	r26, r18
    44ae:	a0 5c       	subi	r26, 0xC0	; 192
    44b0:	bf 4f       	sbci	r27, 0xFF	; 255
    44b2:	8d 91       	ld	r24, X+
    44b4:	9c 91       	ld	r25, X
    44b6:	01 96       	adiw	r24, 0x01	; 1
    44b8:	8f 73       	andi	r24, 0x3F	; 63
    44ba:	90 70       	andi	r25, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    44bc:	d9 01       	movw	r26, r18
    44be:	ae 5b       	subi	r26, 0xBE	; 190
    44c0:	bf 4f       	sbci	r27, 0xFF	; 255
    44c2:	4d 91       	ld	r20, X+
    44c4:	5c 91       	ld	r21, X
    44c6:	11 97       	sbiw	r26, 0x01	; 1
    44c8:	84 17       	cp	r24, r20
    44ca:	95 07       	cpc	r25, r21
    44cc:	d1 f3       	breq	.-12     	; 0x44c2 <_ZN14HardwareSerial5writeEh+0x1c>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    44ce:	d9 01       	movw	r26, r18
    44d0:	a0 5c       	subi	r26, 0xC0	; 192
    44d2:	bf 4f       	sbci	r27, 0xFF	; 255
    44d4:	0d 90       	ld	r0, X+
    44d6:	bc 91       	ld	r27, X
    44d8:	a0 2d       	mov	r26, r0
    44da:	a2 0f       	add	r26, r18
    44dc:	b3 1f       	adc	r27, r19
    44de:	6c 93       	st	X, r22
  _tx_buffer->head = i;
    44e0:	a6 85       	ldd	r26, Z+14	; 0x0e
    44e2:	b7 85       	ldd	r27, Z+15	; 0x0f
    44e4:	a0 5c       	subi	r26, 0xC0	; 192
    44e6:	bf 4f       	sbci	r27, 0xFF	; 255
    44e8:	11 96       	adiw	r26, 0x01	; 1
    44ea:	9c 93       	st	X, r25
    44ec:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
    44ee:	a6 89       	ldd	r26, Z+22	; 0x16
    44f0:	b7 89       	ldd	r27, Z+23	; 0x17
    44f2:	2c 91       	ld	r18, X
    44f4:	81 e0       	ldi	r24, 0x01	; 1
    44f6:	90 e0       	ldi	r25, 0x00	; 0
    44f8:	07 8c       	ldd	r0, Z+31	; 0x1f
    44fa:	02 c0       	rjmp	.+4      	; 0x4500 <_ZN14HardwareSerial5writeEh+0x5a>
    44fc:	88 0f       	add	r24, r24
    44fe:	99 1f       	adc	r25, r25
    4500:	0a 94       	dec	r0
    4502:	e2 f7       	brpl	.-8      	; 0x44fc <_ZN14HardwareSerial5writeEh+0x56>
    4504:	28 2b       	or	r18, r24
    4506:	2c 93       	st	X, r18
  
  return 1;
}
    4508:	81 e0       	ldi	r24, 0x01	; 1
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	08 95       	ret

0000450e <_ZN14HardwareSerial6write9Ehb>:

//New write method, and setup methods
size_t HardwareSerial::write9(uint8_t c, bool p)
{
    450e:	cf 93       	push	r28
    4510:	df 93       	push	r29
    4512:	fc 01       	movw	r30, r24
	int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4514:	26 85       	ldd	r18, Z+14	; 0x0e
    4516:	37 85       	ldd	r19, Z+15	; 0x0f
    4518:	d9 01       	movw	r26, r18
    451a:	a0 5c       	subi	r26, 0xC0	; 192
    451c:	bf 4f       	sbci	r27, 0xFF	; 255
    451e:	8d 91       	ld	r24, X+
    4520:	9c 91       	ld	r25, X
    4522:	01 96       	adiw	r24, 0x01	; 1
    4524:	8f 73       	andi	r24, 0x3F	; 63
    4526:	90 70       	andi	r25, 0x00	; 0

	  // If the output buffer is full, there's nothing for it other than to
	  // wait for the interrupt handler to empty it a bit
	  // ???: return 0 here instead?
	  while (i == _tx_buffer->tail)
    4528:	d9 01       	movw	r26, r18
    452a:	ae 5b       	subi	r26, 0xBE	; 190
    452c:	bf 4f       	sbci	r27, 0xFF	; 255
    452e:	cd 91       	ld	r28, X+
    4530:	dc 91       	ld	r29, X
    4532:	11 97       	sbiw	r26, 0x01	; 1
    4534:	8c 17       	cp	r24, r28
    4536:	9d 07       	cpc	r25, r29
    4538:	d1 f3       	breq	.-12     	; 0x452e <_ZN14HardwareSerial6write9Ehb+0x20>
	    ;

	  _tx_buffer->buffer[_tx_buffer->head] = c;
    453a:	d9 01       	movw	r26, r18
    453c:	a0 5c       	subi	r26, 0xC0	; 192
    453e:	bf 4f       	sbci	r27, 0xFF	; 255
    4540:	0d 90       	ld	r0, X+
    4542:	bc 91       	ld	r27, X
    4544:	a0 2d       	mov	r26, r0
    4546:	a2 0f       	add	r26, r18
    4548:	b3 1f       	adc	r27, r19
    454a:	6c 93       	st	X, r22
	  _tx_buffer->head = i;
    454c:	a6 85       	ldd	r26, Z+14	; 0x0e
    454e:	b7 85       	ldd	r27, Z+15	; 0x0f
    4550:	a0 5c       	subi	r26, 0xC0	; 192
    4552:	bf 4f       	sbci	r27, 0xFF	; 255
    4554:	11 96       	adiw	r26, 0x01	; 1
    4556:	9c 93       	st	X, r25
    4558:	8e 93       	st	-X, r24
    455a:	a6 89       	ldd	r26, Z+22	; 0x16
    455c:	b7 89       	ldd	r27, Z+23	; 0x17

  //set TXB8 (bit 0) with 1 or 0
  if(p ){
    455e:	44 23       	and	r20, r20
    4560:	19 f0       	breq	.+6      	; 0x4568 <_ZN14HardwareSerial6write9Ehb+0x5a>
    *_ucsrb=*_ucsrb | B00000001;
    4562:	8c 91       	ld	r24, X
    4564:	81 60       	ori	r24, 0x01	; 1
    4566:	02 c0       	rjmp	.+4      	; 0x456c <_ZN14HardwareSerial6write9Ehb+0x5e>
  }else{
    *_ucsrb=*_ucsrb & B11111110;
    4568:	8c 91       	ld	r24, X
    456a:	8e 7f       	andi	r24, 0xFE	; 254
    456c:	8c 93       	st	X, r24
  }
  sbi(*_ucsrb, _udrie);
    456e:	a6 89       	ldd	r26, Z+22	; 0x16
    4570:	b7 89       	ldd	r27, Z+23	; 0x17
    4572:	2c 91       	ld	r18, X
    4574:	81 e0       	ldi	r24, 0x01	; 1
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	07 8c       	ldd	r0, Z+31	; 0x1f
    457a:	02 c0       	rjmp	.+4      	; 0x4580 <_ZN14HardwareSerial6write9Ehb+0x72>
    457c:	88 0f       	add	r24, r24
    457e:	99 1f       	adc	r25, r25
    4580:	0a 94       	dec	r0
    4582:	e2 f7       	brpl	.-8      	; 0x457c <_ZN14HardwareSerial6write9Ehb+0x6e>
    4584:	28 2b       	or	r18, r24
    4586:	2c 93       	st	X, r18

  return 1;
}
    4588:	81 e0       	ldi	r24, 0x01	; 1
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	df 91       	pop	r29
    458e:	cf 91       	pop	r28
    4590:	08 95       	ret

00004592 <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4592:	fb 01       	movw	r30, r22
    4594:	e0 5c       	subi	r30, 0xC0	; 192
    4596:	ff 4f       	sbci	r31, 0xFF	; 255
    4598:	20 81       	ld	r18, Z
    459a:	31 81       	ldd	r19, Z+1	; 0x01
    459c:	2f 5f       	subi	r18, 0xFF	; 255
    459e:	3f 4f       	sbci	r19, 0xFF	; 255
    45a0:	2f 73       	andi	r18, 0x3F	; 63
    45a2:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    45a4:	db 01       	movw	r26, r22
    45a6:	ae 5b       	subi	r26, 0xBE	; 190
    45a8:	bf 4f       	sbci	r27, 0xFF	; 255
    45aa:	4d 91       	ld	r20, X+
    45ac:	5c 91       	ld	r21, X
    45ae:	11 97       	sbiw	r26, 0x01	; 1
    45b0:	24 17       	cp	r18, r20
    45b2:	35 07       	cpc	r19, r21
    45b4:	39 f0       	breq	.+14     	; 0x45c4 <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
    45b6:	a0 81       	ld	r26, Z
    45b8:	b1 81       	ldd	r27, Z+1	; 0x01
    45ba:	a6 0f       	add	r26, r22
    45bc:	b7 1f       	adc	r27, r23
    45be:	8c 93       	st	X, r24
    buffer->head = i;
    45c0:	31 83       	std	Z+1, r19	; 0x01
    45c2:	20 83       	st	Z, r18
    45c4:	08 95       	ret

000045c6 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    45c6:	08 95       	ret

000045c8 <__vector_25>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    45c8:	1f 92       	push	r1
    45ca:	0f 92       	push	r0
    45cc:	0f b6       	in	r0, 0x3f	; 63
    45ce:	0f 92       	push	r0
    45d0:	0b b6       	in	r0, 0x3b	; 59
    45d2:	0f 92       	push	r0
    45d4:	11 24       	eor	r1, r1
    45d6:	2f 93       	push	r18
    45d8:	3f 93       	push	r19
    45da:	4f 93       	push	r20
    45dc:	5f 93       	push	r21
    45de:	6f 93       	push	r22
    45e0:	7f 93       	push	r23
    45e2:	8f 93       	push	r24
    45e4:	9f 93       	push	r25
    45e6:	af 93       	push	r26
    45e8:	bf 93       	push	r27
    45ea:	ef 93       	push	r30
    45ec:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    45ee:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
    45f2:	69 e1       	ldi	r22, 0x19	; 25
    45f4:	7e e0       	ldi	r23, 0x0E	; 14
    45f6:	0e 94 c9 22 	call	0x4592	; 0x4592 <_Z10store_charhP11ring_buffer>
  }
    45fa:	ff 91       	pop	r31
    45fc:	ef 91       	pop	r30
    45fe:	bf 91       	pop	r27
    4600:	af 91       	pop	r26
    4602:	9f 91       	pop	r25
    4604:	8f 91       	pop	r24
    4606:	7f 91       	pop	r23
    4608:	6f 91       	pop	r22
    460a:	5f 91       	pop	r21
    460c:	4f 91       	pop	r20
    460e:	3f 91       	pop	r19
    4610:	2f 91       	pop	r18
    4612:	0f 90       	pop	r0
    4614:	0b be       	out	0x3b, r0	; 59
    4616:	0f 90       	pop	r0
    4618:	0f be       	out	0x3f, r0	; 63
    461a:	0f 90       	pop	r0
    461c:	1f 90       	pop	r1
    461e:	18 95       	reti

00004620 <_Z12serialEvent1v>:
#endif
#endif

#if defined(USART1_RX_vect)
  void serialEvent1() __attribute__((weak));
  void serialEvent1() {}
    4620:	08 95       	ret

00004622 <__vector_36>:
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
  {
    4622:	1f 92       	push	r1
    4624:	0f 92       	push	r0
    4626:	0f b6       	in	r0, 0x3f	; 63
    4628:	0f 92       	push	r0
    462a:	0b b6       	in	r0, 0x3b	; 59
    462c:	0f 92       	push	r0
    462e:	11 24       	eor	r1, r1
    4630:	2f 93       	push	r18
    4632:	3f 93       	push	r19
    4634:	4f 93       	push	r20
    4636:	5f 93       	push	r21
    4638:	6f 93       	push	r22
    463a:	7f 93       	push	r23
    463c:	8f 93       	push	r24
    463e:	9f 93       	push	r25
    4640:	af 93       	push	r26
    4642:	bf 93       	push	r27
    4644:	ef 93       	push	r30
    4646:	ff 93       	push	r31
    unsigned char c = UDR1;
    4648:	80 91 ce 00 	lds	r24, 0x00CE
    store_char(c, &rx_buffer1);
    464c:	61 ea       	ldi	r22, 0xA1	; 161
    464e:	7e e0       	ldi	r23, 0x0E	; 14
    4650:	0e 94 c9 22 	call	0x4592	; 0x4592 <_Z10store_charhP11ring_buffer>
  }
    4654:	ff 91       	pop	r31
    4656:	ef 91       	pop	r30
    4658:	bf 91       	pop	r27
    465a:	af 91       	pop	r26
    465c:	9f 91       	pop	r25
    465e:	8f 91       	pop	r24
    4660:	7f 91       	pop	r23
    4662:	6f 91       	pop	r22
    4664:	5f 91       	pop	r21
    4666:	4f 91       	pop	r20
    4668:	3f 91       	pop	r19
    466a:	2f 91       	pop	r18
    466c:	0f 90       	pop	r0
    466e:	0b be       	out	0x3b, r0	; 59
    4670:	0f 90       	pop	r0
    4672:	0f be       	out	0x3f, r0	; 63
    4674:	0f 90       	pop	r0
    4676:	1f 90       	pop	r1
    4678:	18 95       	reti

0000467a <_Z12serialEvent2v>:
  #error SIG_USART1_RECV
#endif

#if defined(USART2_RX_vect) && defined(UDR2)
  void serialEvent2() __attribute__((weak));
  void serialEvent2() {}
    467a:	08 95       	ret

0000467c <__vector_51>:
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
  {
    467c:	1f 92       	push	r1
    467e:	0f 92       	push	r0
    4680:	0f b6       	in	r0, 0x3f	; 63
    4682:	0f 92       	push	r0
    4684:	0b b6       	in	r0, 0x3b	; 59
    4686:	0f 92       	push	r0
    4688:	11 24       	eor	r1, r1
    468a:	2f 93       	push	r18
    468c:	3f 93       	push	r19
    468e:	4f 93       	push	r20
    4690:	5f 93       	push	r21
    4692:	6f 93       	push	r22
    4694:	7f 93       	push	r23
    4696:	8f 93       	push	r24
    4698:	9f 93       	push	r25
    469a:	af 93       	push	r26
    469c:	bf 93       	push	r27
    469e:	ef 93       	push	r30
    46a0:	ff 93       	push	r31
    unsigned char c = UDR2;
    46a2:	80 91 d6 00 	lds	r24, 0x00D6
    store_char(c, &rx_buffer2);
    46a6:	69 e2       	ldi	r22, 0x29	; 41
    46a8:	7f e0       	ldi	r23, 0x0F	; 15
    46aa:	0e 94 c9 22 	call	0x4592	; 0x4592 <_Z10store_charhP11ring_buffer>
  }
    46ae:	ff 91       	pop	r31
    46b0:	ef 91       	pop	r30
    46b2:	bf 91       	pop	r27
    46b4:	af 91       	pop	r26
    46b6:	9f 91       	pop	r25
    46b8:	8f 91       	pop	r24
    46ba:	7f 91       	pop	r23
    46bc:	6f 91       	pop	r22
    46be:	5f 91       	pop	r21
    46c0:	4f 91       	pop	r20
    46c2:	3f 91       	pop	r19
    46c4:	2f 91       	pop	r18
    46c6:	0f 90       	pop	r0
    46c8:	0b be       	out	0x3b, r0	; 59
    46ca:	0f 90       	pop	r0
    46cc:	0f be       	out	0x3f, r0	; 63
    46ce:	0f 90       	pop	r0
    46d0:	1f 90       	pop	r1
    46d2:	18 95       	reti

000046d4 <_Z12serialEvent3v>:
  #error SIG_USART2_RECV
#endif

#if defined(USART3_RX_vect) && defined(UDR3)
  void serialEvent3() __attribute__((weak));
  void serialEvent3() {}
    46d4:	08 95       	ret

000046d6 <__vector_54>:
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
  {
    46d6:	1f 92       	push	r1
    46d8:	0f 92       	push	r0
    46da:	0f b6       	in	r0, 0x3f	; 63
    46dc:	0f 92       	push	r0
    46de:	0b b6       	in	r0, 0x3b	; 59
    46e0:	0f 92       	push	r0
    46e2:	11 24       	eor	r1, r1
    46e4:	2f 93       	push	r18
    46e6:	3f 93       	push	r19
    46e8:	4f 93       	push	r20
    46ea:	5f 93       	push	r21
    46ec:	6f 93       	push	r22
    46ee:	7f 93       	push	r23
    46f0:	8f 93       	push	r24
    46f2:	9f 93       	push	r25
    46f4:	af 93       	push	r26
    46f6:	bf 93       	push	r27
    46f8:	ef 93       	push	r30
    46fa:	ff 93       	push	r31
    unsigned char c = UDR3;
    46fc:	80 91 36 01 	lds	r24, 0x0136
    store_char(c, &rx_buffer3);
    4700:	61 eb       	ldi	r22, 0xB1	; 177
    4702:	7f e0       	ldi	r23, 0x0F	; 15
    4704:	0e 94 c9 22 	call	0x4592	; 0x4592 <_Z10store_charhP11ring_buffer>
  }
    4708:	ff 91       	pop	r31
    470a:	ef 91       	pop	r30
    470c:	bf 91       	pop	r27
    470e:	af 91       	pop	r26
    4710:	9f 91       	pop	r25
    4712:	8f 91       	pop	r24
    4714:	7f 91       	pop	r23
    4716:	6f 91       	pop	r22
    4718:	5f 91       	pop	r21
    471a:	4f 91       	pop	r20
    471c:	3f 91       	pop	r19
    471e:	2f 91       	pop	r18
    4720:	0f 90       	pop	r0
    4722:	0b be       	out	0x3b, r0	; 59
    4724:	0f 90       	pop	r0
    4726:	0f be       	out	0x3f, r0	; 63
    4728:	0f 90       	pop	r0
    472a:	1f 90       	pop	r1
    472c:	18 95       	reti

0000472e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    472e:	89 e3       	ldi	r24, 0x39	; 57
    4730:	90 e1       	ldi	r25, 0x10	; 16
    4732:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN14HardwareSerial9availableEv>
    4736:	00 97       	sbiw	r24, 0x00	; 0
    4738:	11 f0       	breq	.+4      	; 0x473e <_Z14serialEventRunv+0x10>
    473a:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <_Z11serialEventv>
#endif
#ifdef serialEvent1_implemented
  if (Serial1.available()) serialEvent1();
    473e:	8d e5       	ldi	r24, 0x5D	; 93
    4740:	90 e1       	ldi	r25, 0x10	; 16
    4742:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN14HardwareSerial9availableEv>
    4746:	00 97       	sbiw	r24, 0x00	; 0
    4748:	11 f0       	breq	.+4      	; 0x474e <_Z14serialEventRunv+0x20>
    474a:	0e 94 10 23 	call	0x4620	; 0x4620 <_Z12serialEvent1v>
#endif
#ifdef serialEvent2_implemented
  if (Serial2.available()) serialEvent2();
    474e:	81 e8       	ldi	r24, 0x81	; 129
    4750:	90 e1       	ldi	r25, 0x10	; 16
    4752:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN14HardwareSerial9availableEv>
    4756:	00 97       	sbiw	r24, 0x00	; 0
    4758:	11 f0       	breq	.+4      	; 0x475e <_Z14serialEventRunv+0x30>
    475a:	0e 94 3d 23 	call	0x467a	; 0x467a <_Z12serialEvent2v>
#endif
#ifdef serialEvent3_implemented
  if (Serial3.available()) serialEvent3();
    475e:	85 ea       	ldi	r24, 0xA5	; 165
    4760:	90 e1       	ldi	r25, 0x10	; 16
    4762:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN14HardwareSerial9availableEv>
    4766:	00 97       	sbiw	r24, 0x00	; 0
    4768:	11 f0       	breq	.+4      	; 0x476e <_Z14serialEventRunv+0x40>
    476a:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_Z12serialEvent3v>
    476e:	08 95       	ret

00004770 <__vector_26>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    4770:	1f 92       	push	r1
    4772:	0f 92       	push	r0
    4774:	0f b6       	in	r0, 0x3f	; 63
    4776:	0f 92       	push	r0
    4778:	0b b6       	in	r0, 0x3b	; 59
    477a:	0f 92       	push	r0
    477c:	11 24       	eor	r1, r1
    477e:	2f 93       	push	r18
    4780:	3f 93       	push	r19
    4782:	8f 93       	push	r24
    4784:	9f 93       	push	r25
    4786:	ef 93       	push	r30
    4788:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    478a:	20 91 9d 0e 	lds	r18, 0x0E9D
    478e:	30 91 9e 0e 	lds	r19, 0x0E9E
    4792:	80 91 9f 0e 	lds	r24, 0x0E9F
    4796:	90 91 a0 0e 	lds	r25, 0x0EA0
    479a:	28 17       	cp	r18, r24
    479c:	39 07       	cpc	r19, r25
    479e:	31 f4       	brne	.+12     	; 0x47ac <__vector_26+0x3c>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    47a0:	80 91 c1 00 	lds	r24, 0x00C1
    47a4:	8f 7d       	andi	r24, 0xDF	; 223
    47a6:	80 93 c1 00 	sts	0x00C1, r24
    47aa:	14 c0       	rjmp	.+40     	; 0x47d4 <__vector_26+0x64>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    47ac:	e0 91 9f 0e 	lds	r30, 0x0E9F
    47b0:	f0 91 a0 0e 	lds	r31, 0x0EA0
    47b4:	e3 5a       	subi	r30, 0xA3	; 163
    47b6:	f1 4f       	sbci	r31, 0xF1	; 241
    47b8:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    47ba:	80 91 9f 0e 	lds	r24, 0x0E9F
    47be:	90 91 a0 0e 	lds	r25, 0x0EA0
    47c2:	01 96       	adiw	r24, 0x01	; 1
    47c4:	8f 73       	andi	r24, 0x3F	; 63
    47c6:	90 70       	andi	r25, 0x00	; 0
    47c8:	90 93 a0 0e 	sts	0x0EA0, r25
    47cc:	80 93 9f 0e 	sts	0x0E9F, r24
	
  #if defined(UDR0)
    UDR0 = c;
    47d0:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    47d4:	ff 91       	pop	r31
    47d6:	ef 91       	pop	r30
    47d8:	9f 91       	pop	r25
    47da:	8f 91       	pop	r24
    47dc:	3f 91       	pop	r19
    47de:	2f 91       	pop	r18
    47e0:	0f 90       	pop	r0
    47e2:	0b be       	out	0x3b, r0	; 59
    47e4:	0f 90       	pop	r0
    47e6:	0f be       	out	0x3f, r0	; 63
    47e8:	0f 90       	pop	r0
    47ea:	1f 90       	pop	r1
    47ec:	18 95       	reti

000047ee <__vector_37>:
#endif
#endif

#ifdef USART1_UDRE_vect
ISR(USART1_UDRE_vect)
{
    47ee:	1f 92       	push	r1
    47f0:	0f 92       	push	r0
    47f2:	0f b6       	in	r0, 0x3f	; 63
    47f4:	0f 92       	push	r0
    47f6:	0b b6       	in	r0, 0x3b	; 59
    47f8:	0f 92       	push	r0
    47fa:	11 24       	eor	r1, r1
    47fc:	2f 93       	push	r18
    47fe:	3f 93       	push	r19
    4800:	8f 93       	push	r24
    4802:	9f 93       	push	r25
    4804:	ef 93       	push	r30
    4806:	ff 93       	push	r31
  if (tx_buffer1.head == tx_buffer1.tail) {
    4808:	20 91 25 0f 	lds	r18, 0x0F25
    480c:	30 91 26 0f 	lds	r19, 0x0F26
    4810:	80 91 27 0f 	lds	r24, 0x0F27
    4814:	90 91 28 0f 	lds	r25, 0x0F28
    4818:	28 17       	cp	r18, r24
    481a:	39 07       	cpc	r19, r25
    481c:	31 f4       	brne	.+12     	; 0x482a <__vector_37+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR1B, UDRIE1);
    481e:	80 91 c9 00 	lds	r24, 0x00C9
    4822:	8f 7d       	andi	r24, 0xDF	; 223
    4824:	80 93 c9 00 	sts	0x00C9, r24
    4828:	14 c0       	rjmp	.+40     	; 0x4852 <__vector_37+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
    482a:	e0 91 27 0f 	lds	r30, 0x0F27
    482e:	f0 91 28 0f 	lds	r31, 0x0F28
    4832:	eb 51       	subi	r30, 0x1B	; 27
    4834:	f1 4f       	sbci	r31, 0xF1	; 241
    4836:	20 81       	ld	r18, Z
    tx_buffer1.tail = (tx_buffer1.tail + 1) % SERIAL_BUFFER_SIZE;
    4838:	80 91 27 0f 	lds	r24, 0x0F27
    483c:	90 91 28 0f 	lds	r25, 0x0F28
    4840:	01 96       	adiw	r24, 0x01	; 1
    4842:	8f 73       	andi	r24, 0x3F	; 63
    4844:	90 70       	andi	r25, 0x00	; 0
    4846:	90 93 28 0f 	sts	0x0F28, r25
    484a:	80 93 27 0f 	sts	0x0F27, r24
	
    UDR1 = c;
    484e:	20 93 ce 00 	sts	0x00CE, r18
  }
}
    4852:	ff 91       	pop	r31
    4854:	ef 91       	pop	r30
    4856:	9f 91       	pop	r25
    4858:	8f 91       	pop	r24
    485a:	3f 91       	pop	r19
    485c:	2f 91       	pop	r18
    485e:	0f 90       	pop	r0
    4860:	0b be       	out	0x3b, r0	; 59
    4862:	0f 90       	pop	r0
    4864:	0f be       	out	0x3f, r0	; 63
    4866:	0f 90       	pop	r0
    4868:	1f 90       	pop	r1
    486a:	18 95       	reti

0000486c <__vector_52>:
#endif

#ifdef USART2_UDRE_vect
ISR(USART2_UDRE_vect)
{
    486c:	1f 92       	push	r1
    486e:	0f 92       	push	r0
    4870:	0f b6       	in	r0, 0x3f	; 63
    4872:	0f 92       	push	r0
    4874:	0b b6       	in	r0, 0x3b	; 59
    4876:	0f 92       	push	r0
    4878:	11 24       	eor	r1, r1
    487a:	2f 93       	push	r18
    487c:	3f 93       	push	r19
    487e:	8f 93       	push	r24
    4880:	9f 93       	push	r25
    4882:	ef 93       	push	r30
    4884:	ff 93       	push	r31
  if (tx_buffer2.head == tx_buffer2.tail) {
    4886:	20 91 ad 0f 	lds	r18, 0x0FAD
    488a:	30 91 ae 0f 	lds	r19, 0x0FAE
    488e:	80 91 af 0f 	lds	r24, 0x0FAF
    4892:	90 91 b0 0f 	lds	r25, 0x0FB0
    4896:	28 17       	cp	r18, r24
    4898:	39 07       	cpc	r19, r25
    489a:	31 f4       	brne	.+12     	; 0x48a8 <__vector_52+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR2B, UDRIE2);
    489c:	80 91 d1 00 	lds	r24, 0x00D1
    48a0:	8f 7d       	andi	r24, 0xDF	; 223
    48a2:	80 93 d1 00 	sts	0x00D1, r24
    48a6:	14 c0       	rjmp	.+40     	; 0x48d0 <__vector_52+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
    48a8:	e0 91 af 0f 	lds	r30, 0x0FAF
    48ac:	f0 91 b0 0f 	lds	r31, 0x0FB0
    48b0:	e3 59       	subi	r30, 0x93	; 147
    48b2:	f0 4f       	sbci	r31, 0xF0	; 240
    48b4:	20 81       	ld	r18, Z
    tx_buffer2.tail = (tx_buffer2.tail + 1) % SERIAL_BUFFER_SIZE;
    48b6:	80 91 af 0f 	lds	r24, 0x0FAF
    48ba:	90 91 b0 0f 	lds	r25, 0x0FB0
    48be:	01 96       	adiw	r24, 0x01	; 1
    48c0:	8f 73       	andi	r24, 0x3F	; 63
    48c2:	90 70       	andi	r25, 0x00	; 0
    48c4:	90 93 b0 0f 	sts	0x0FB0, r25
    48c8:	80 93 af 0f 	sts	0x0FAF, r24
	
    UDR2 = c;
    48cc:	20 93 d6 00 	sts	0x00D6, r18
  }
}
    48d0:	ff 91       	pop	r31
    48d2:	ef 91       	pop	r30
    48d4:	9f 91       	pop	r25
    48d6:	8f 91       	pop	r24
    48d8:	3f 91       	pop	r19
    48da:	2f 91       	pop	r18
    48dc:	0f 90       	pop	r0
    48de:	0b be       	out	0x3b, r0	; 59
    48e0:	0f 90       	pop	r0
    48e2:	0f be       	out	0x3f, r0	; 63
    48e4:	0f 90       	pop	r0
    48e6:	1f 90       	pop	r1
    48e8:	18 95       	reti

000048ea <__vector_55>:
#endif

#ifdef USART3_UDRE_vect
ISR(USART3_UDRE_vect)
{
    48ea:	1f 92       	push	r1
    48ec:	0f 92       	push	r0
    48ee:	0f b6       	in	r0, 0x3f	; 63
    48f0:	0f 92       	push	r0
    48f2:	0b b6       	in	r0, 0x3b	; 59
    48f4:	0f 92       	push	r0
    48f6:	11 24       	eor	r1, r1
    48f8:	2f 93       	push	r18
    48fa:	3f 93       	push	r19
    48fc:	8f 93       	push	r24
    48fe:	9f 93       	push	r25
    4900:	ef 93       	push	r30
    4902:	ff 93       	push	r31
  if (tx_buffer3.head == tx_buffer3.tail) {
    4904:	20 91 35 10 	lds	r18, 0x1035
    4908:	30 91 36 10 	lds	r19, 0x1036
    490c:	80 91 37 10 	lds	r24, 0x1037
    4910:	90 91 38 10 	lds	r25, 0x1038
    4914:	28 17       	cp	r18, r24
    4916:	39 07       	cpc	r19, r25
    4918:	31 f4       	brne	.+12     	; 0x4926 <__vector_55+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR3B, UDRIE3);
    491a:	80 91 31 01 	lds	r24, 0x0131
    491e:	8f 7d       	andi	r24, 0xDF	; 223
    4920:	80 93 31 01 	sts	0x0131, r24
    4924:	14 c0       	rjmp	.+40     	; 0x494e <__vector_55+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
    4926:	e0 91 37 10 	lds	r30, 0x1037
    492a:	f0 91 38 10 	lds	r31, 0x1038
    492e:	eb 50       	subi	r30, 0x0B	; 11
    4930:	f0 4f       	sbci	r31, 0xF0	; 240
    4932:	20 81       	ld	r18, Z
    tx_buffer3.tail = (tx_buffer3.tail + 1) % SERIAL_BUFFER_SIZE;
    4934:	80 91 37 10 	lds	r24, 0x1037
    4938:	90 91 38 10 	lds	r25, 0x1038
    493c:	01 96       	adiw	r24, 0x01	; 1
    493e:	8f 73       	andi	r24, 0x3F	; 63
    4940:	90 70       	andi	r25, 0x00	; 0
    4942:	90 93 38 10 	sts	0x1038, r25
    4946:	80 93 37 10 	sts	0x1037, r24
	
    UDR3 = c;
    494a:	20 93 36 01 	sts	0x0136, r18
  }
}
    494e:	ff 91       	pop	r31
    4950:	ef 91       	pop	r30
    4952:	9f 91       	pop	r25
    4954:	8f 91       	pop	r24
    4956:	3f 91       	pop	r19
    4958:	2f 91       	pop	r18
    495a:	0f 90       	pop	r0
    495c:	0b be       	out	0x3b, r0	; 59
    495e:	0f 90       	pop	r0
    4960:	0f be       	out	0x3f, r0	; 63
    4962:	0f 90       	pop	r0
    4964:	1f 90       	pop	r1
    4966:	18 95       	reti

00004968 <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    4968:	df 92       	push	r13
    496a:	ef 92       	push	r14
    496c:	ff 92       	push	r15
    496e:	0f 93       	push	r16
    4970:	1f 93       	push	r17
    4972:	cf 93       	push	r28
    4974:	df 93       	push	r29
    4976:	ec 01       	movw	r28, r24
    4978:	7a 01       	movw	r14, r20
    497a:	8b 01       	movw	r16, r22
  _usbs = usbs;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    497c:	dd 24       	eor	r13, r13
    497e:	d3 94       	inc	r13
    4980:	40 30       	cpi	r20, 0x00	; 0
    4982:	81 ee       	ldi	r24, 0xE1	; 225
    4984:	58 07       	cpc	r21, r24
    4986:	80 e0       	ldi	r24, 0x00	; 0
    4988:	68 07       	cpc	r22, r24
    498a:	80 e0       	ldi	r24, 0x00	; 0
    498c:	78 07       	cpc	r23, r24
    498e:	49 f4       	brne	.+18     	; 0x49a2 <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    4990:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    4992:	ec 89       	ldd	r30, Y+20	; 0x14
    4994:	fd 89       	ldd	r31, Y+21	; 0x15
    4996:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4998:	60 e8       	ldi	r22, 0x80	; 128
    499a:	74 e8       	ldi	r23, 0x84	; 132
    499c:	8e e1       	ldi	r24, 0x1E	; 30
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	0f c0       	rjmp	.+30     	; 0x49c0 <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    49a2:	ec 89       	ldd	r30, Y+20	; 0x14
    49a4:	fd 89       	ldd	r31, Y+21	; 0x15
    49a6:	81 e0       	ldi	r24, 0x01	; 1
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	08 a0       	ldd	r0, Y+32	; 0x20
    49ac:	02 c0       	rjmp	.+4      	; 0x49b2 <_ZN14HardwareSerial5beginEm+0x4a>
    49ae:	88 0f       	add	r24, r24
    49b0:	99 1f       	adc	r25, r25
    49b2:	0a 94       	dec	r0
    49b4:	e2 f7       	brpl	.-8      	; 0x49ae <_ZN14HardwareSerial5beginEm+0x46>
    49b6:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    49b8:	60 e0       	ldi	r22, 0x00	; 0
    49ba:	79 e0       	ldi	r23, 0x09	; 9
    49bc:	8d e3       	ldi	r24, 0x3D	; 61
    49be:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    49c0:	a8 01       	movw	r20, r16
    49c2:	97 01       	movw	r18, r14
    49c4:	0e 94 26 31 	call	0x624c	; 0x624c <__udivmodsi4>
    49c8:	21 50       	subi	r18, 0x01	; 1
    49ca:	30 40       	sbci	r19, 0x00	; 0
    49cc:	40 40       	sbci	r20, 0x00	; 0
    49ce:	50 40       	sbci	r21, 0x00	; 0
    49d0:	56 95       	lsr	r21
    49d2:	47 95       	ror	r20
    49d4:	37 95       	ror	r19
    49d6:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    49d8:	80 e1       	ldi	r24, 0x10	; 16
    49da:	20 30       	cpi	r18, 0x00	; 0
    49dc:	38 07       	cpc	r19, r24
    49de:	10 f0       	brcs	.+4      	; 0x49e4 <_ZN14HardwareSerial5beginEm+0x7c>
    49e0:	dd 20       	and	r13, r13
    49e2:	b1 f6       	brne	.-84     	; 0x4990 <_ZN14HardwareSerial5beginEm+0x28>
  {
    use_u2x = false;
    goto try_again;
  }
  //set 9 bit off in *_ucsrb here to be sure its 0
  *_ucsrb &= 4;
    49e4:	ee 89       	ldd	r30, Y+22	; 0x16
    49e6:	ff 89       	ldd	r31, Y+23	; 0x17
    49e8:	80 81       	ld	r24, Z
    49ea:	84 70       	andi	r24, 0x04	; 4
    49ec:	80 83       	st	Z, r24
  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    49ee:	e8 89       	ldd	r30, Y+16	; 0x10
    49f0:	f9 89       	ldd	r31, Y+17	; 0x11
    49f2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    49f4:	ea 89       	ldd	r30, Y+18	; 0x12
    49f6:	fb 89       	ldd	r31, Y+19	; 0x13
    49f8:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    49fa:	ee 89       	ldd	r30, Y+22	; 0x16
    49fc:	ff 89       	ldd	r31, Y+23	; 0x17
    49fe:	40 81       	ld	r20, Z
    4a00:	81 e0       	ldi	r24, 0x01	; 1
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	9c 01       	movw	r18, r24
    4a06:	0c 8c       	ldd	r0, Y+28	; 0x1c
    4a08:	02 c0       	rjmp	.+4      	; 0x4a0e <_ZN14HardwareSerial5beginEm+0xa6>
    4a0a:	22 0f       	add	r18, r18
    4a0c:	33 1f       	adc	r19, r19
    4a0e:	0a 94       	dec	r0
    4a10:	e2 f7       	brpl	.-8      	; 0x4a0a <_ZN14HardwareSerial5beginEm+0xa2>
    4a12:	42 2b       	or	r20, r18
    4a14:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    4a16:	ee 89       	ldd	r30, Y+22	; 0x16
    4a18:	ff 89       	ldd	r31, Y+23	; 0x17
    4a1a:	40 81       	ld	r20, Z
    4a1c:	9c 01       	movw	r18, r24
    4a1e:	0d 8c       	ldd	r0, Y+29	; 0x1d
    4a20:	02 c0       	rjmp	.+4      	; 0x4a26 <_ZN14HardwareSerial5beginEm+0xbe>
    4a22:	22 0f       	add	r18, r18
    4a24:	33 1f       	adc	r19, r19
    4a26:	0a 94       	dec	r0
    4a28:	e2 f7       	brpl	.-8      	; 0x4a22 <_ZN14HardwareSerial5beginEm+0xba>
    4a2a:	42 2b       	or	r20, r18
    4a2c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    4a2e:	ee 89       	ldd	r30, Y+22	; 0x16
    4a30:	ff 89       	ldd	r31, Y+23	; 0x17
    4a32:	40 81       	ld	r20, Z
    4a34:	9c 01       	movw	r18, r24
    4a36:	0e 8c       	ldd	r0, Y+30	; 0x1e
    4a38:	02 c0       	rjmp	.+4      	; 0x4a3e <_ZN14HardwareSerial5beginEm+0xd6>
    4a3a:	22 0f       	add	r18, r18
    4a3c:	33 1f       	adc	r19, r19
    4a3e:	0a 94       	dec	r0
    4a40:	e2 f7       	brpl	.-8      	; 0x4a3a <_ZN14HardwareSerial5beginEm+0xd2>
    4a42:	42 2b       	or	r20, r18
    4a44:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    4a46:	ee 89       	ldd	r30, Y+22	; 0x16
    4a48:	ff 89       	ldd	r31, Y+23	; 0x17
    4a4a:	20 81       	ld	r18, Z
    4a4c:	0f 8c       	ldd	r0, Y+31	; 0x1f
    4a4e:	02 c0       	rjmp	.+4      	; 0x4a54 <_ZN14HardwareSerial5beginEm+0xec>
    4a50:	88 0f       	add	r24, r24
    4a52:	99 1f       	adc	r25, r25
    4a54:	0a 94       	dec	r0
    4a56:	e2 f7       	brpl	.-8      	; 0x4a50 <_ZN14HardwareSerial5beginEm+0xe8>
    4a58:	80 95       	com	r24
    4a5a:	82 23       	and	r24, r18
    4a5c:	80 83       	st	Z, r24
}
    4a5e:	df 91       	pop	r29
    4a60:	cf 91       	pop	r28
    4a62:	1f 91       	pop	r17
    4a64:	0f 91       	pop	r16
    4a66:	ff 90       	pop	r15
    4a68:	ef 90       	pop	r14
    4a6a:	df 90       	pop	r13
    4a6c:	08 95       	ret

00004a6e <_ZN14HardwareSerial5beginEmhhh>:
//    - stop bits ( 1 or 2 )
//        default = 1
//    - parity ( 0 = none, 1 = odd, 2 = even )
//        default = 0
void HardwareSerial::begin(const uint32_t baud, const uint8_t data_bits, const uint8_t stop_bits, const uint8_t parity)
{
    4a6e:	af 92       	push	r10
    4a70:	bf 92       	push	r11
    4a72:	cf 92       	push	r12
    4a74:	df 92       	push	r13
    4a76:	ef 92       	push	r14
    4a78:	ff 92       	push	r15
    4a7a:	0f 93       	push	r16
    4a7c:	1f 93       	push	r17
    4a7e:	cf 93       	push	r28
    4a80:	df 93       	push	r29
    4a82:	ec 01       	movw	r28, r24
    4a84:	5a 01       	movw	r10, r20
    4a86:	6b 01       	movw	r12, r22
    4a88:	12 2f       	mov	r17, r18
    4a8a:	f0 2e       	mov	r15, r16
//        default = 8
//    - stop bits ( 1 or 2 )
//        default = 1
//    - parity ( 0 = none, 1 = odd, 2 = even )
//        default = 0
void HardwareSerial::begin(const uint32_t baud, const uint8_t data_bits, const uint8_t stop_bits, const uint8_t parity)
    4a8c:	01 e0       	ldi	r16, 0x01	; 1
    4a8e:	40 30       	cpi	r20, 0x00	; 0
    4a90:	81 ee       	ldi	r24, 0xE1	; 225
    4a92:	58 07       	cpc	r21, r24
    4a94:	80 e0       	ldi	r24, 0x00	; 0
    4a96:	68 07       	cpc	r22, r24
    4a98:	80 e0       	ldi	r24, 0x00	; 0
    4a9a:	78 07       	cpc	r23, r24
    4a9c:	09 f4       	brne	.+2      	; 0x4aa0 <_ZN14HardwareSerial5beginEmhhh+0x32>
    4a9e:	00 e0       	ldi	r16, 0x00	; 0
	  if (baud == 57600) {
	    use_u2x = false;
	  }
	#endif
        uint8_t frame_format=0;
        *_ucsrb=0;
    4aa0:	ee 89       	ldd	r30, Y+22	; 0x16
    4aa2:	ff 89       	ldd	r31, Y+23	; 0x17
    4aa4:	10 82       	st	Z, r1
        // U2X mode is needed for baud rates higher than ( Hz / 16 )
        try_again:

          if (use_u2x) {
    4aa6:	00 23       	and	r16, r16
    4aa8:	99 f0       	breq	.+38     	; 0x4ad0 <_ZN14HardwareSerial5beginEmhhh+0x62>
    4aaa:	02 c0       	rjmp	.+4      	; 0x4ab0 <_ZN14HardwareSerial5beginEmhhh+0x42>
            baud_setting = (F_CPU / 8 / baud - 1) / 2;
          }

          if ((baud_setting > 4095) && use_u2x)
          {
            use_u2x = false;
    4aac:	00 e0       	ldi	r16, 0x00	; 0
    4aae:	10 c0       	rjmp	.+32     	; 0x4ad0 <_ZN14HardwareSerial5beginEmhhh+0x62>
        *_ucsrb=0;
        // U2X mode is needed for baud rates higher than ( Hz / 16 )
        try_again:

          if (use_u2x) {
            *_ucsra = 1 << _u2x;
    4ab0:	ec 89       	ldd	r30, Y+20	; 0x14
    4ab2:	fd 89       	ldd	r31, Y+21	; 0x15
    4ab4:	81 e0       	ldi	r24, 0x01	; 1
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	08 a0       	ldd	r0, Y+32	; 0x20
    4aba:	02 c0       	rjmp	.+4      	; 0x4ac0 <_ZN14HardwareSerial5beginEmhhh+0x52>
    4abc:	88 0f       	add	r24, r24
    4abe:	99 1f       	adc	r25, r25
    4ac0:	0a 94       	dec	r0
    4ac2:	e2 f7       	brpl	.-8      	; 0x4abc <_ZN14HardwareSerial5beginEmhhh+0x4e>
    4ac4:	80 83       	st	Z, r24
            baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4ac6:	60 e0       	ldi	r22, 0x00	; 0
    4ac8:	79 e0       	ldi	r23, 0x09	; 9
    4aca:	8d e3       	ldi	r24, 0x3D	; 61
    4acc:	90 e0       	ldi	r25, 0x00	; 0
    4ace:	07 c0       	rjmp	.+14     	; 0x4ade <_ZN14HardwareSerial5beginEmhhh+0x70>
          } else {
            *_ucsra = 0;
    4ad0:	ec 89       	ldd	r30, Y+20	; 0x14
    4ad2:	fd 89       	ldd	r31, Y+21	; 0x15
    4ad4:	10 82       	st	Z, r1
            baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4ad6:	60 e8       	ldi	r22, 0x80	; 128
    4ad8:	74 e8       	ldi	r23, 0x84	; 132
    4ada:	8e e1       	ldi	r24, 0x1E	; 30
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	a6 01       	movw	r20, r12
    4ae0:	95 01       	movw	r18, r10
    4ae2:	0e 94 26 31 	call	0x624c	; 0x624c <__udivmodsi4>
    4ae6:	21 50       	subi	r18, 0x01	; 1
    4ae8:	30 40       	sbci	r19, 0x00	; 0
    4aea:	40 40       	sbci	r20, 0x00	; 0
    4aec:	50 40       	sbci	r21, 0x00	; 0
    4aee:	56 95       	lsr	r21
    4af0:	47 95       	ror	r20
    4af2:	37 95       	ror	r19
    4af4:	27 95       	ror	r18
          }

          if ((baud_setting > 4095) && use_u2x)
    4af6:	80 e1       	ldi	r24, 0x10	; 16
    4af8:	20 30       	cpi	r18, 0x00	; 0
    4afa:	38 07       	cpc	r19, r24
    4afc:	10 f0       	brcs	.+4      	; 0x4b02 <_ZN14HardwareSerial5beginEmhhh+0x94>
    4afe:	00 23       	and	r16, r16
    4b00:	a9 f6       	brne	.-86     	; 0x4aac <_ZN14HardwareSerial5beginEmhhh+0x3e>
            use_u2x = false;
            goto try_again;
          }

        //set 9 bit off in *_ucsrb here to be sure its 0
        *_ucsrb &= 4;
    4b02:	ee 89       	ldd	r30, Y+22	; 0x16
    4b04:	ff 89       	ldd	r31, Y+23	; 0x17
    4b06:	80 81       	ld	r24, Z
    4b08:	84 70       	andi	r24, 0x04	; 4
    4b0a:	80 83       	st	Z, r24
        switch(data_bits) {
    4b0c:	17 30       	cpi	r17, 0x07	; 7
    4b0e:	79 f0       	breq	.+30     	; 0x4b2e <_ZN14HardwareSerial5beginEmhhh+0xc0>
    4b10:	18 30       	cpi	r17, 0x08	; 8
    4b12:	28 f4       	brcc	.+10     	; 0x4b1e <_ZN14HardwareSerial5beginEmhhh+0xb0>
    4b14:	15 30       	cpi	r17, 0x05	; 5
    4b16:	39 f1       	breq	.+78     	; 0x4b66 <_ZN14HardwareSerial5beginEmhhh+0xf8>
    4b18:	16 30       	cpi	r17, 0x06	; 6
    4b1a:	11 f5       	brne	.+68     	; 0x4b60 <_ZN14HardwareSerial5beginEmhhh+0xf2>
    4b1c:	05 c0       	rjmp	.+10     	; 0x4b28 <_ZN14HardwareSerial5beginEmhhh+0xba>
    4b1e:	18 30       	cpi	r17, 0x08	; 8
    4b20:	f9 f0       	breq	.+62     	; 0x4b60 <_ZN14HardwareSerial5beginEmhhh+0xf2>
    4b22:	19 30       	cpi	r17, 0x09	; 9
    4b24:	e9 f4       	brne	.+58     	; 0x4b60 <_ZN14HardwareSerial5beginEmhhh+0xf2>
    4b26:	0d c0       	rjmp	.+26     	; 0x4b42 <_ZN14HardwareSerial5beginEmhhh+0xd4>
                case 5: frame_format = 0; break; // 5 data bits
                case 6: frame_format = (1<<_ucsz0); break; // 6 data bits
    4b28:	81 e0       	ldi	r24, 0x01	; 1
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	02 c0       	rjmp	.+4      	; 0x4b32 <_ZN14HardwareSerial5beginEmhhh+0xc4>
                case 7: frame_format = (2<<_ucsz0); break; // 7 data bits
    4b2e:	82 e0       	ldi	r24, 0x02	; 2
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	09 a0       	ldd	r0, Y+33	; 0x21
    4b34:	02 c0       	rjmp	.+4      	; 0x4b3a <_ZN14HardwareSerial5beginEmhhh+0xcc>
    4b36:	88 0f       	add	r24, r24
    4b38:	99 1f       	adc	r25, r25
    4b3a:	0a 94       	dec	r0
    4b3c:	e2 f7       	brpl	.-8      	; 0x4b36 <_ZN14HardwareSerial5beginEmhhh+0xc8>
    4b3e:	48 2f       	mov	r20, r24
    4b40:	13 c0       	rjmp	.+38     	; 0x4b68 <_ZN14HardwareSerial5beginEmhhh+0xfa>
                case 8: frame_format = (3<<_ucsz0); break;// 8 data bits
                case 9:
                	frame_format = (3<<_ucsz0); // 9 data bits
    4b42:	83 e0       	ldi	r24, 0x03	; 3
    4b44:	90 e0       	ldi	r25, 0x00	; 0
    4b46:	09 a0       	ldd	r0, Y+33	; 0x21
    4b48:	02 c0       	rjmp	.+4      	; 0x4b4e <_ZN14HardwareSerial5beginEmhhh+0xe0>
    4b4a:	88 0f       	add	r24, r24
    4b4c:	99 1f       	adc	r25, r25
    4b4e:	0a 94       	dec	r0
    4b50:	e2 f7       	brpl	.-8      	; 0x4b4a <_ZN14HardwareSerial5beginEmhhh+0xdc>
    4b52:	48 2f       	mov	r20, r24
                	*_ucsrb |= 4;
    4b54:	ee 89       	ldd	r30, Y+22	; 0x16
    4b56:	ff 89       	ldd	r31, Y+23	; 0x17
    4b58:	80 81       	ld	r24, Z
    4b5a:	84 60       	ori	r24, 0x04	; 4
    4b5c:	80 83       	st	Z, r24
                	break;
    4b5e:	04 c0       	rjmp	.+8      	; 0x4b68 <_ZN14HardwareSerial5beginEmhhh+0xfa>
                default: frame_format = (3<<_ucsz0); break;// 8 data bits
    4b60:	83 e0       	ldi	r24, 0x03	; 3
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	e6 cf       	rjmp	.-52     	; 0x4b32 <_ZN14HardwareSerial5beginEmhhh+0xc4>
          }

        //set 9 bit off in *_ucsrb here to be sure its 0
        *_ucsrb &= 4;
        switch(data_bits) {
                case 5: frame_format = 0; break; // 5 data bits
    4b66:	40 e0       	ldi	r20, 0x00	; 0
                	*_ucsrb |= 4;
                	break;
                default: frame_format = (3<<_ucsz0); break;// 8 data bits
        }

        if(stop_bits==2) frame_format |= (1<<_usbs);
    4b68:	8f 2d       	mov	r24, r15
    4b6a:	82 30       	cpi	r24, 0x02	; 2
    4b6c:	49 f4       	brne	.+18     	; 0x4b80 <_ZN14HardwareSerial5beginEmhhh+0x112>
    4b6e:	81 e0       	ldi	r24, 0x01	; 1
    4b70:	90 e0       	ldi	r25, 0x00	; 0
    4b72:	0b a0       	ldd	r0, Y+35	; 0x23
    4b74:	02 c0       	rjmp	.+4      	; 0x4b7a <_ZN14HardwareSerial5beginEmhhh+0x10c>
    4b76:	88 0f       	add	r24, r24
    4b78:	99 1f       	adc	r25, r25
    4b7a:	0a 94       	dec	r0
    4b7c:	e2 f7       	brpl	.-8      	; 0x4b76 <_ZN14HardwareSerial5beginEmhhh+0x108>
    4b7e:	48 2b       	or	r20, r24

        switch(parity) {
    4b80:	8e 2d       	mov	r24, r14
    4b82:	81 30       	cpi	r24, 0x01	; 1
    4b84:	19 f0       	breq	.+6      	; 0x4b8c <_ZN14HardwareSerial5beginEmhhh+0x11e>
    4b86:	82 30       	cpi	r24, 0x02	; 2
    4b88:	69 f4       	brne	.+26     	; 0x4ba4 <_ZN14HardwareSerial5beginEmhhh+0x136>
    4b8a:	03 c0       	rjmp	.+6      	; 0x4b92 <_ZN14HardwareSerial5beginEmhhh+0x124>
                case 1: frame_format |= (3<<_upm0); break; // odd parity
    4b8c:	83 e0       	ldi	r24, 0x03	; 3
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	02 c0       	rjmp	.+4      	; 0x4b96 <_ZN14HardwareSerial5beginEmhhh+0x128>
                case 2: frame_format |= (2<<_upm0); break; // even parity
    4b92:	82 e0       	ldi	r24, 0x02	; 2
    4b94:	90 e0       	ldi	r25, 0x00	; 0
    4b96:	0a a0       	ldd	r0, Y+34	; 0x22
    4b98:	02 c0       	rjmp	.+4      	; 0x4b9e <_ZN14HardwareSerial5beginEmhhh+0x130>
    4b9a:	88 0f       	add	r24, r24
    4b9c:	99 1f       	adc	r25, r25
    4b9e:	0a 94       	dec	r0
    4ba0:	e2 f7       	brpl	.-8      	; 0x4b9a <_ZN14HardwareSerial5beginEmhhh+0x12c>
    4ba2:	48 2b       	or	r20, r24
                default: break; // disabled parity
        }

        // assign the baud_setting, a.k.a. ubbr ( USART Baud Rate Register )
	*_ubrrh = baud_setting >> 8;
    4ba4:	e8 89       	ldd	r30, Y+16	; 0x10
    4ba6:	f9 89       	ldd	r31, Y+17	; 0x11
    4ba8:	30 83       	st	Z, r19
	*_ubrrl = baud_setting;
    4baa:	ea 89       	ldd	r30, Y+18	; 0x12
    4bac:	fb 89       	ldd	r31, Y+19	; 0x13
    4bae:	20 83       	st	Z, r18

        // enable the serial recieve pin, transmit pin, and recieve interrupt
        *_ucsrb |= (1 << _rxen);
    4bb0:	ee 89       	ldd	r30, Y+22	; 0x16
    4bb2:	ff 89       	ldd	r31, Y+23	; 0x17
    4bb4:	50 81       	ld	r21, Z
    4bb6:	81 e0       	ldi	r24, 0x01	; 1
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	9c 01       	movw	r18, r24
    4bbc:	0c 8c       	ldd	r0, Y+28	; 0x1c
    4bbe:	02 c0       	rjmp	.+4      	; 0x4bc4 <_ZN14HardwareSerial5beginEmhhh+0x156>
    4bc0:	22 0f       	add	r18, r18
    4bc2:	33 1f       	adc	r19, r19
    4bc4:	0a 94       	dec	r0
    4bc6:	e2 f7       	brpl	.-8      	; 0x4bc0 <_ZN14HardwareSerial5beginEmhhh+0x152>
    4bc8:	52 2b       	or	r21, r18
    4bca:	50 83       	st	Z, r21
	*_ucsrb |= (1 << _txen) ;
    4bcc:	ee 89       	ldd	r30, Y+22	; 0x16
    4bce:	ff 89       	ldd	r31, Y+23	; 0x17
    4bd0:	50 81       	ld	r21, Z
    4bd2:	9c 01       	movw	r18, r24
    4bd4:	0d 8c       	ldd	r0, Y+29	; 0x1d
    4bd6:	02 c0       	rjmp	.+4      	; 0x4bdc <_ZN14HardwareSerial5beginEmhhh+0x16e>
    4bd8:	22 0f       	add	r18, r18
    4bda:	33 1f       	adc	r19, r19
    4bdc:	0a 94       	dec	r0
    4bde:	e2 f7       	brpl	.-8      	; 0x4bd8 <_ZN14HardwareSerial5beginEmhhh+0x16a>
    4be0:	52 2b       	or	r21, r18
    4be2:	50 83       	st	Z, r21
	*_ucsrb |= (1 << _rxcie);
    4be4:	ee 89       	ldd	r30, Y+22	; 0x16
    4be6:	ff 89       	ldd	r31, Y+23	; 0x17
    4be8:	50 81       	ld	r21, Z
    4bea:	9c 01       	movw	r18, r24
    4bec:	0e 8c       	ldd	r0, Y+30	; 0x1e
    4bee:	02 c0       	rjmp	.+4      	; 0x4bf4 <_ZN14HardwareSerial5beginEmhhh+0x186>
    4bf0:	22 0f       	add	r18, r18
    4bf2:	33 1f       	adc	r19, r19
    4bf4:	0a 94       	dec	r0
    4bf6:	e2 f7       	brpl	.-8      	; 0x4bf0 <_ZN14HardwareSerial5beginEmhhh+0x182>
    4bf8:	52 2b       	or	r21, r18
    4bfa:	50 83       	st	Z, r21

        // Set frame format
        *_ucsrc = frame_format;
    4bfc:	e8 8d       	ldd	r30, Y+24	; 0x18
    4bfe:	f9 8d       	ldd	r31, Y+25	; 0x19
    4c00:	40 83       	st	Z, r20
}
    4c02:	df 91       	pop	r29
    4c04:	cf 91       	pop	r28
    4c06:	1f 91       	pop	r17
    4c08:	0f 91       	pop	r16
    4c0a:	ff 90       	pop	r15
    4c0c:	ef 90       	pop	r14
    4c0e:	df 90       	pop	r13
    4c10:	cf 90       	pop	r12
    4c12:	bf 90       	pop	r11
    4c14:	af 90       	pop	r10
    4c16:	08 95       	ret

00004c18 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
    4c18:	cf 93       	push	r28
    4c1a:	df 93       	push	r29
    4c1c:	fc 01       	movw	r30, r24
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    4c1e:	86 85       	ldd	r24, Z+14	; 0x0e
    4c20:	97 85       	ldd	r25, Z+15	; 0x0f
    4c22:	dc 01       	movw	r26, r24
    4c24:	a0 5c       	subi	r26, 0xC0	; 192
    4c26:	bf 4f       	sbci	r27, 0xFF	; 255
    4c28:	8e 5b       	subi	r24, 0xBE	; 190
    4c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c2c:	4d 91       	ld	r20, X+
    4c2e:	5c 91       	ld	r21, X
    4c30:	11 97       	sbiw	r26, 0x01	; 1
    4c32:	ec 01       	movw	r28, r24
    4c34:	28 81       	ld	r18, Y
    4c36:	39 81       	ldd	r19, Y+1	; 0x01
    4c38:	42 17       	cp	r20, r18
    4c3a:	53 07       	cpc	r21, r19
    4c3c:	b9 f7       	brne	.-18     	; 0x4c2c <_ZN14HardwareSerial3endEv+0x14>
    ;

  cbi(*_ucsrb, _rxen);
    4c3e:	a6 89       	ldd	r26, Z+22	; 0x16
    4c40:	b7 89       	ldd	r27, Z+23	; 0x17
    4c42:	4c 91       	ld	r20, X
    4c44:	81 e0       	ldi	r24, 0x01	; 1
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	9c 01       	movw	r18, r24
    4c4a:	04 8c       	ldd	r0, Z+28	; 0x1c
    4c4c:	02 c0       	rjmp	.+4      	; 0x4c52 <_ZN14HardwareSerial3endEv+0x3a>
    4c4e:	22 0f       	add	r18, r18
    4c50:	33 1f       	adc	r19, r19
    4c52:	0a 94       	dec	r0
    4c54:	e2 f7       	brpl	.-8      	; 0x4c4e <_ZN14HardwareSerial3endEv+0x36>
    4c56:	20 95       	com	r18
    4c58:	24 23       	and	r18, r20
    4c5a:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
    4c5c:	a6 89       	ldd	r26, Z+22	; 0x16
    4c5e:	b7 89       	ldd	r27, Z+23	; 0x17
    4c60:	4c 91       	ld	r20, X
    4c62:	9c 01       	movw	r18, r24
    4c64:	05 8c       	ldd	r0, Z+29	; 0x1d
    4c66:	02 c0       	rjmp	.+4      	; 0x4c6c <_ZN14HardwareSerial3endEv+0x54>
    4c68:	22 0f       	add	r18, r18
    4c6a:	33 1f       	adc	r19, r19
    4c6c:	0a 94       	dec	r0
    4c6e:	e2 f7       	brpl	.-8      	; 0x4c68 <_ZN14HardwareSerial3endEv+0x50>
    4c70:	20 95       	com	r18
    4c72:	24 23       	and	r18, r20
    4c74:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
    4c76:	a6 89       	ldd	r26, Z+22	; 0x16
    4c78:	b7 89       	ldd	r27, Z+23	; 0x17
    4c7a:	4c 91       	ld	r20, X
    4c7c:	9c 01       	movw	r18, r24
    4c7e:	06 8c       	ldd	r0, Z+30	; 0x1e
    4c80:	02 c0       	rjmp	.+4      	; 0x4c86 <_ZN14HardwareSerial3endEv+0x6e>
    4c82:	22 0f       	add	r18, r18
    4c84:	33 1f       	adc	r19, r19
    4c86:	0a 94       	dec	r0
    4c88:	e2 f7       	brpl	.-8      	; 0x4c82 <_ZN14HardwareSerial3endEv+0x6a>
    4c8a:	20 95       	com	r18
    4c8c:	24 23       	and	r18, r20
    4c8e:	2c 93       	st	X, r18
  cbi(*_ucsrb, _udrie);
    4c90:	a6 89       	ldd	r26, Z+22	; 0x16
    4c92:	b7 89       	ldd	r27, Z+23	; 0x17
    4c94:	2c 91       	ld	r18, X
    4c96:	07 8c       	ldd	r0, Z+31	; 0x1f
    4c98:	02 c0       	rjmp	.+4      	; 0x4c9e <_ZN14HardwareSerial3endEv+0x86>
    4c9a:	88 0f       	add	r24, r24
    4c9c:	99 1f       	adc	r25, r25
    4c9e:	0a 94       	dec	r0
    4ca0:	e2 f7       	brpl	.-8      	; 0x4c9a <_ZN14HardwareSerial3endEv+0x82>
    4ca2:	80 95       	com	r24
    4ca4:	82 23       	and	r24, r18
    4ca6:	8c 93       	st	X, r24
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    4ca8:	84 85       	ldd	r24, Z+12	; 0x0c
    4caa:	95 85       	ldd	r25, Z+13	; 0x0d
    4cac:	fc 01       	movw	r30, r24
    4cae:	ee 5b       	subi	r30, 0xBE	; 190
    4cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb2:	20 81       	ld	r18, Z
    4cb4:	31 81       	ldd	r19, Z+1	; 0x01
    4cb6:	80 5c       	subi	r24, 0xC0	; 192
    4cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    4cba:	fc 01       	movw	r30, r24
    4cbc:	31 83       	std	Z+1, r19	; 0x01
    4cbe:	20 83       	st	Z, r18
}
    4cc0:	df 91       	pop	r29
    4cc2:	cf 91       	pop	r28
    4cc4:	08 95       	ret

00004cc6 <_GLOBAL__I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2, UCSZ20, UPM20, USBS2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3, UCSZ30, UPM30, USBS3);
    4cc6:	1f 93       	push	r17
    4cc8:	cf 93       	push	r28
    4cca:	df 93       	push	r29
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4ccc:	10 92 3c 10 	sts	0x103C, r1
    4cd0:	10 92 3b 10 	sts	0x103B, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4cd4:	88 ee       	ldi	r24, 0xE8	; 232
    4cd6:	93 e0       	ldi	r25, 0x03	; 3
    4cd8:	a0 e0       	ldi	r26, 0x00	; 0
    4cda:	b0 e0       	ldi	r27, 0x00	; 0
    4cdc:	80 93 3d 10 	sts	0x103D, r24
    4ce0:	90 93 3e 10 	sts	0x103E, r25
    4ce4:	a0 93 3f 10 	sts	0x103F, r26
    4ce8:	b0 93 40 10 	sts	0x1040, r27
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,volatile uint8_t *ucsrc,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x,
  uint8_t ucsz0,
  uint8_t upm0,
  uint8_t usbs)
    4cec:	eb e3       	ldi	r30, 0x3B	; 59
    4cee:	f0 e1       	ldi	r31, 0x10	; 16
    4cf0:	29 e4       	ldi	r18, 0x49	; 73
    4cf2:	35 e0       	ldi	r19, 0x05	; 5
    4cf4:	32 93       	st	-Z, r19
    4cf6:	22 93       	st	-Z, r18
{
  _rx_buffer = rx_buffer;
    4cf8:	49 e1       	ldi	r20, 0x19	; 25
    4cfa:	5e e0       	ldi	r21, 0x0E	; 14
    4cfc:	55 87       	std	Z+13, r21	; 0x0d
    4cfe:	44 87       	std	Z+12, r20	; 0x0c
  _tx_buffer = tx_buffer;
    4d00:	4d e5       	ldi	r20, 0x5D	; 93
    4d02:	5e e0       	ldi	r21, 0x0E	; 14
    4d04:	57 87       	std	Z+15, r21	; 0x0f
    4d06:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
    4d08:	45 ec       	ldi	r20, 0xC5	; 197
    4d0a:	50 e0       	ldi	r21, 0x00	; 0
    4d0c:	51 8b       	std	Z+17, r21	; 0x11
    4d0e:	40 8b       	std	Z+16, r20	; 0x10
  _ubrrl = ubrrl;
    4d10:	44 ec       	ldi	r20, 0xC4	; 196
    4d12:	50 e0       	ldi	r21, 0x00	; 0
    4d14:	53 8b       	std	Z+19, r21	; 0x13
    4d16:	42 8b       	std	Z+18, r20	; 0x12
  _ucsra = ucsra;
    4d18:	40 ec       	ldi	r20, 0xC0	; 192
    4d1a:	50 e0       	ldi	r21, 0x00	; 0
    4d1c:	55 8b       	std	Z+21, r21	; 0x15
    4d1e:	44 8b       	std	Z+20, r20	; 0x14
  _ucsrb = ucsrb;
    4d20:	41 ec       	ldi	r20, 0xC1	; 193
    4d22:	50 e0       	ldi	r21, 0x00	; 0
    4d24:	57 8b       	std	Z+23, r21	; 0x17
    4d26:	46 8b       	std	Z+22, r20	; 0x16
  _ucsrc = ucsrc;
    4d28:	42 ec       	ldi	r20, 0xC2	; 194
    4d2a:	50 e0       	ldi	r21, 0x00	; 0
    4d2c:	51 8f       	std	Z+25, r21	; 0x19
    4d2e:	40 8f       	std	Z+24, r20	; 0x18
  _udr = udr;
    4d30:	46 ec       	ldi	r20, 0xC6	; 198
    4d32:	50 e0       	ldi	r21, 0x00	; 0
    4d34:	53 8f       	std	Z+27, r21	; 0x1b
    4d36:	42 8f       	std	Z+26, r20	; 0x1a
  _rxen = rxen;
    4d38:	54 e0       	ldi	r21, 0x04	; 4
    4d3a:	54 8f       	std	Z+28, r21	; 0x1c
  _txen = txen;
    4d3c:	43 e0       	ldi	r20, 0x03	; 3
    4d3e:	45 8f       	std	Z+29, r20	; 0x1d
  _rxcie = rxcie;
    4d40:	17 e0       	ldi	r17, 0x07	; 7
    4d42:	16 8f       	std	Z+30, r17	; 0x1e
  _udrie = udrie;
    4d44:	75 e0       	ldi	r23, 0x05	; 5
    4d46:	77 8f       	std	Z+31, r23	; 0x1f
  _u2x = u2x;
    4d48:	61 e0       	ldi	r22, 0x01	; 1
    4d4a:	60 a3       	std	Z+32, r22	; 0x20
  _ucsz0 = ucsz0;
    4d4c:	61 a3       	std	Z+33, r22	; 0x21
  _upm0 = upm0;
    4d4e:	52 a3       	std	Z+34, r21	; 0x22
  _usbs = usbs;
    4d50:	43 a3       	std	Z+35, r20	; 0x23
    4d52:	10 92 60 10 	sts	0x1060, r1
    4d56:	10 92 5f 10 	sts	0x105F, r1
    4d5a:	80 93 61 10 	sts	0x1061, r24
    4d5e:	90 93 62 10 	sts	0x1062, r25
    4d62:	a0 93 63 10 	sts	0x1063, r26
    4d66:	b0 93 64 10 	sts	0x1064, r27
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,volatile uint8_t *ucsrc,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x,
  uint8_t ucsz0,
  uint8_t upm0,
  uint8_t usbs)
    4d6a:	ef e5       	ldi	r30, 0x5F	; 95
    4d6c:	f0 e1       	ldi	r31, 0x10	; 16
    4d6e:	32 93       	st	-Z, r19
    4d70:	22 93       	st	-Z, r18
{
  _rx_buffer = rx_buffer;
    4d72:	c1 ea       	ldi	r28, 0xA1	; 161
    4d74:	de e0       	ldi	r29, 0x0E	; 14
    4d76:	d5 87       	std	Z+13, r29	; 0x0d
    4d78:	c4 87       	std	Z+12, r28	; 0x0c
  _tx_buffer = tx_buffer;
    4d7a:	c5 ee       	ldi	r28, 0xE5	; 229
    4d7c:	de e0       	ldi	r29, 0x0E	; 14
    4d7e:	d7 87       	std	Z+15, r29	; 0x0f
    4d80:	c6 87       	std	Z+14, r28	; 0x0e
  _ubrrh = ubrrh;
    4d82:	cd ec       	ldi	r28, 0xCD	; 205
    4d84:	d0 e0       	ldi	r29, 0x00	; 0
    4d86:	d1 8b       	std	Z+17, r29	; 0x11
    4d88:	c0 8b       	std	Z+16, r28	; 0x10
  _ubrrl = ubrrl;
    4d8a:	cc ec       	ldi	r28, 0xCC	; 204
    4d8c:	d0 e0       	ldi	r29, 0x00	; 0
    4d8e:	d3 8b       	std	Z+19, r29	; 0x13
    4d90:	c2 8b       	std	Z+18, r28	; 0x12
  _ucsra = ucsra;
    4d92:	c8 ec       	ldi	r28, 0xC8	; 200
    4d94:	d0 e0       	ldi	r29, 0x00	; 0
    4d96:	d5 8b       	std	Z+21, r29	; 0x15
    4d98:	c4 8b       	std	Z+20, r28	; 0x14
  _ucsrb = ucsrb;
    4d9a:	c9 ec       	ldi	r28, 0xC9	; 201
    4d9c:	d0 e0       	ldi	r29, 0x00	; 0
    4d9e:	d7 8b       	std	Z+23, r29	; 0x17
    4da0:	c6 8b       	std	Z+22, r28	; 0x16
  _ucsrc = ucsrc;
    4da2:	ca ec       	ldi	r28, 0xCA	; 202
    4da4:	d0 e0       	ldi	r29, 0x00	; 0
    4da6:	d1 8f       	std	Z+25, r29	; 0x19
    4da8:	c0 8f       	std	Z+24, r28	; 0x18
  _udr = udr;
    4daa:	ce ec       	ldi	r28, 0xCE	; 206
    4dac:	d0 e0       	ldi	r29, 0x00	; 0
    4dae:	d3 8f       	std	Z+27, r29	; 0x1b
    4db0:	c2 8f       	std	Z+26, r28	; 0x1a
  _rxen = rxen;
    4db2:	54 8f       	std	Z+28, r21	; 0x1c
  _txen = txen;
    4db4:	45 8f       	std	Z+29, r20	; 0x1d
  _rxcie = rxcie;
    4db6:	16 8f       	std	Z+30, r17	; 0x1e
  _udrie = udrie;
    4db8:	77 8f       	std	Z+31, r23	; 0x1f
  _u2x = u2x;
    4dba:	60 a3       	std	Z+32, r22	; 0x20
  _ucsz0 = ucsz0;
    4dbc:	61 a3       	std	Z+33, r22	; 0x21
  _upm0 = upm0;
    4dbe:	52 a3       	std	Z+34, r21	; 0x22
  _usbs = usbs;
    4dc0:	43 a3       	std	Z+35, r20	; 0x23
    4dc2:	10 92 84 10 	sts	0x1084, r1
    4dc6:	10 92 83 10 	sts	0x1083, r1
    4dca:	80 93 85 10 	sts	0x1085, r24
    4dce:	90 93 86 10 	sts	0x1086, r25
    4dd2:	a0 93 87 10 	sts	0x1087, r26
    4dd6:	b0 93 88 10 	sts	0x1088, r27
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,volatile uint8_t *ucsrc,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x,
  uint8_t ucsz0,
  uint8_t upm0,
  uint8_t usbs)
    4dda:	e3 e8       	ldi	r30, 0x83	; 131
    4ddc:	f0 e1       	ldi	r31, 0x10	; 16
    4dde:	32 93       	st	-Z, r19
    4de0:	22 93       	st	-Z, r18
{
  _rx_buffer = rx_buffer;
    4de2:	c9 e2       	ldi	r28, 0x29	; 41
    4de4:	df e0       	ldi	r29, 0x0F	; 15
    4de6:	d5 87       	std	Z+13, r29	; 0x0d
    4de8:	c4 87       	std	Z+12, r28	; 0x0c
  _tx_buffer = tx_buffer;
    4dea:	cd e6       	ldi	r28, 0x6D	; 109
    4dec:	df e0       	ldi	r29, 0x0F	; 15
    4dee:	d7 87       	std	Z+15, r29	; 0x0f
    4df0:	c6 87       	std	Z+14, r28	; 0x0e
  _ubrrh = ubrrh;
    4df2:	c5 ed       	ldi	r28, 0xD5	; 213
    4df4:	d0 e0       	ldi	r29, 0x00	; 0
    4df6:	d1 8b       	std	Z+17, r29	; 0x11
    4df8:	c0 8b       	std	Z+16, r28	; 0x10
  _ubrrl = ubrrl;
    4dfa:	c4 ed       	ldi	r28, 0xD4	; 212
    4dfc:	d0 e0       	ldi	r29, 0x00	; 0
    4dfe:	d3 8b       	std	Z+19, r29	; 0x13
    4e00:	c2 8b       	std	Z+18, r28	; 0x12
  _ucsra = ucsra;
    4e02:	c0 ed       	ldi	r28, 0xD0	; 208
    4e04:	d0 e0       	ldi	r29, 0x00	; 0
    4e06:	d5 8b       	std	Z+21, r29	; 0x15
    4e08:	c4 8b       	std	Z+20, r28	; 0x14
  _ucsrb = ucsrb;
    4e0a:	c1 ed       	ldi	r28, 0xD1	; 209
    4e0c:	d0 e0       	ldi	r29, 0x00	; 0
    4e0e:	d7 8b       	std	Z+23, r29	; 0x17
    4e10:	c6 8b       	std	Z+22, r28	; 0x16
  _ucsrc = ucsrc;
    4e12:	c2 ed       	ldi	r28, 0xD2	; 210
    4e14:	d0 e0       	ldi	r29, 0x00	; 0
    4e16:	d1 8f       	std	Z+25, r29	; 0x19
    4e18:	c0 8f       	std	Z+24, r28	; 0x18
  _udr = udr;
    4e1a:	c6 ed       	ldi	r28, 0xD6	; 214
    4e1c:	d0 e0       	ldi	r29, 0x00	; 0
    4e1e:	d3 8f       	std	Z+27, r29	; 0x1b
    4e20:	c2 8f       	std	Z+26, r28	; 0x1a
  _rxen = rxen;
    4e22:	54 8f       	std	Z+28, r21	; 0x1c
  _txen = txen;
    4e24:	45 8f       	std	Z+29, r20	; 0x1d
  _rxcie = rxcie;
    4e26:	16 8f       	std	Z+30, r17	; 0x1e
  _udrie = udrie;
    4e28:	77 8f       	std	Z+31, r23	; 0x1f
  _u2x = u2x;
    4e2a:	60 a3       	std	Z+32, r22	; 0x20
  _ucsz0 = ucsz0;
    4e2c:	61 a3       	std	Z+33, r22	; 0x21
  _upm0 = upm0;
    4e2e:	52 a3       	std	Z+34, r21	; 0x22
  _usbs = usbs;
    4e30:	43 a3       	std	Z+35, r20	; 0x23
    4e32:	10 92 a8 10 	sts	0x10A8, r1
    4e36:	10 92 a7 10 	sts	0x10A7, r1
    4e3a:	80 93 a9 10 	sts	0x10A9, r24
    4e3e:	90 93 aa 10 	sts	0x10AA, r25
    4e42:	a0 93 ab 10 	sts	0x10AB, r26
    4e46:	b0 93 ac 10 	sts	0x10AC, r27
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,volatile uint8_t *ucsrc,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x,
  uint8_t ucsz0,
  uint8_t upm0,
  uint8_t usbs)
    4e4a:	e7 ea       	ldi	r30, 0xA7	; 167
    4e4c:	f0 e1       	ldi	r31, 0x10	; 16
    4e4e:	32 93       	st	-Z, r19
    4e50:	22 93       	st	-Z, r18
{
  _rx_buffer = rx_buffer;
    4e52:	81 eb       	ldi	r24, 0xB1	; 177
    4e54:	9f e0       	ldi	r25, 0x0F	; 15
    4e56:	95 87       	std	Z+13, r25	; 0x0d
    4e58:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
    4e5a:	85 ef       	ldi	r24, 0xF5	; 245
    4e5c:	9f e0       	ldi	r25, 0x0F	; 15
    4e5e:	97 87       	std	Z+15, r25	; 0x0f
    4e60:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
    4e62:	85 e3       	ldi	r24, 0x35	; 53
    4e64:	91 e0       	ldi	r25, 0x01	; 1
    4e66:	91 8b       	std	Z+17, r25	; 0x11
    4e68:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
    4e6a:	84 e3       	ldi	r24, 0x34	; 52
    4e6c:	91 e0       	ldi	r25, 0x01	; 1
    4e6e:	93 8b       	std	Z+19, r25	; 0x13
    4e70:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
    4e72:	80 e3       	ldi	r24, 0x30	; 48
    4e74:	91 e0       	ldi	r25, 0x01	; 1
    4e76:	95 8b       	std	Z+21, r25	; 0x15
    4e78:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
    4e7a:	81 e3       	ldi	r24, 0x31	; 49
    4e7c:	91 e0       	ldi	r25, 0x01	; 1
    4e7e:	97 8b       	std	Z+23, r25	; 0x17
    4e80:	86 8b       	std	Z+22, r24	; 0x16
  _ucsrc = ucsrc;
    4e82:	82 e3       	ldi	r24, 0x32	; 50
    4e84:	91 e0       	ldi	r25, 0x01	; 1
    4e86:	91 8f       	std	Z+25, r25	; 0x19
    4e88:	80 8f       	std	Z+24, r24	; 0x18
  _udr = udr;
    4e8a:	86 e3       	ldi	r24, 0x36	; 54
    4e8c:	91 e0       	ldi	r25, 0x01	; 1
    4e8e:	93 8f       	std	Z+27, r25	; 0x1b
    4e90:	82 8f       	std	Z+26, r24	; 0x1a
  _rxen = rxen;
    4e92:	54 8f       	std	Z+28, r21	; 0x1c
  _txen = txen;
    4e94:	45 8f       	std	Z+29, r20	; 0x1d
  _rxcie = rxcie;
    4e96:	16 8f       	std	Z+30, r17	; 0x1e
  _udrie = udrie;
    4e98:	77 8f       	std	Z+31, r23	; 0x1f
  _u2x = u2x;
    4e9a:	60 a3       	std	Z+32, r22	; 0x20
  _ucsz0 = ucsz0;
    4e9c:	61 a3       	std	Z+33, r22	; 0x21
  _upm0 = upm0;
    4e9e:	52 a3       	std	Z+34, r21	; 0x22
  _usbs = usbs;
    4ea0:	43 a3       	std	Z+35, r20	; 0x23
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2, UCSZ20, UPM20, USBS2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3, UCSZ30, UPM30, USBS3);
    4ea2:	df 91       	pop	r29
    4ea4:	cf 91       	pop	r28
    4ea6:	1f 91       	pop	r17
    4ea8:	08 95       	ret

00004eaa <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    4eaa:	cf 92       	push	r12
    4eac:	df 92       	push	r13
    4eae:	ef 92       	push	r14
    4eb0:	ff 92       	push	r15
    4eb2:	0f 93       	push	r16
    4eb4:	1f 93       	push	r17
    4eb6:	cf 93       	push	r28
    4eb8:	df 93       	push	r29
    4eba:	6c 01       	movw	r12, r24
    4ebc:	7b 01       	movw	r14, r22
    4ebe:	8a 01       	movw	r16, r20
  size_t n = 0;
    4ec0:	c0 e0       	ldi	r28, 0x00	; 0
    4ec2:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    4ec4:	0f c0       	rjmp	.+30     	; 0x4ee4 <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
    4ec6:	d7 01       	movw	r26, r14
    4ec8:	6d 91       	ld	r22, X+
    4eca:	7d 01       	movw	r14, r26
    4ecc:	d6 01       	movw	r26, r12
    4ece:	ed 91       	ld	r30, X+
    4ed0:	fc 91       	ld	r31, X
    4ed2:	01 90       	ld	r0, Z+
    4ed4:	f0 81       	ld	r31, Z
    4ed6:	e0 2d       	mov	r30, r0
    4ed8:	c6 01       	movw	r24, r12
    4eda:	09 95       	icall
    4edc:	c8 0f       	add	r28, r24
    4ede:	d9 1f       	adc	r29, r25
    4ee0:	01 50       	subi	r16, 0x01	; 1
    4ee2:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    4ee4:	01 15       	cp	r16, r1
    4ee6:	11 05       	cpc	r17, r1
    4ee8:	71 f7       	brne	.-36     	; 0x4ec6 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    4eea:	ce 01       	movw	r24, r28
    4eec:	df 91       	pop	r29
    4eee:	cf 91       	pop	r28
    4ef0:	1f 91       	pop	r17
    4ef2:	0f 91       	pop	r16
    4ef4:	ff 90       	pop	r15
    4ef6:	ef 90       	pop	r14
    4ef8:	df 90       	pop	r13
    4efa:	cf 90       	pop	r12
    4efc:	08 95       	ret

00004efe <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    4efe:	db 01       	movw	r26, r22
    4f00:	0d 90       	ld	r0, X+
    4f02:	00 20       	and	r0, r0
    4f04:	e9 f7       	brne	.-6      	; 0x4f00 <_ZN5Print5writeEPKc+0x2>
    4f06:	ad 01       	movw	r20, r26
    4f08:	41 50       	subi	r20, 0x01	; 1
    4f0a:	50 40       	sbci	r21, 0x00	; 0
    4f0c:	46 1b       	sub	r20, r22
    4f0e:	57 0b       	sbc	r21, r23
    4f10:	dc 01       	movw	r26, r24
    4f12:	ed 91       	ld	r30, X+
    4f14:	fc 91       	ld	r31, X
    4f16:	02 80       	ldd	r0, Z+2	; 0x02
    4f18:	f3 81       	ldd	r31, Z+3	; 0x03
    4f1a:	e0 2d       	mov	r30, r0
    4f1c:	09 95       	icall
    4f1e:	08 95       	ret

00004f20 <_ZN5Print5printEPKc>:
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    4f20:	0e 94 7f 27 	call	0x4efe	; 0x4efe <_ZN5Print5writeEPKc>
    size_t println(const char[]);
    4f24:	08 95       	ret

00004f26 <_ZN5Print5printEc>:
    size_t println(char);
    size_t println(unsigned char, int = DEC);
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
    4f26:	dc 01       	movw	r26, r24
    4f28:	ed 91       	ld	r30, X+
    4f2a:	fc 91       	ld	r31, X
    4f2c:	01 90       	ld	r0, Z+
    4f2e:	f0 81       	ld	r31, Z
    4f30:	e0 2d       	mov	r30, r0
    4f32:	09 95       	icall
    size_t println(long, int = DEC);
    4f34:	08 95       	ret

00004f36 <_ZN5Print7printlnEv>:
    4f36:	0f 93       	push	r16
    4f38:	1f 93       	push	r17
    4f3a:	cf 93       	push	r28
    4f3c:	df 93       	push	r29
    4f3e:	ec 01       	movw	r28, r24
    4f40:	6d e0       	ldi	r22, 0x0D	; 13
    4f42:	0e 94 93 27 	call	0x4f26	; 0x4f26 <_ZN5Print5printEc>
    4f46:	8c 01       	movw	r16, r24
    4f48:	ce 01       	movw	r24, r28
    4f4a:	6a e0       	ldi	r22, 0x0A	; 10
    4f4c:	0e 94 93 27 	call	0x4f26	; 0x4f26 <_ZN5Print5printEc>
    4f50:	08 0f       	add	r16, r24
    4f52:	19 1f       	adc	r17, r25
    4f54:	c8 01       	movw	r24, r16
    4f56:	df 91       	pop	r29
    4f58:	cf 91       	pop	r28
    4f5a:	1f 91       	pop	r17
    4f5c:	0f 91       	pop	r16
    4f5e:	08 95       	ret

00004f60 <_ZN5Print7printlnEPKc>:
    4f60:	0f 93       	push	r16
    4f62:	1f 93       	push	r17
    4f64:	cf 93       	push	r28
    4f66:	df 93       	push	r29
    4f68:	ec 01       	movw	r28, r24
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    4f6a:	0e 94 7f 27 	call	0x4efe	; 0x4efe <_ZN5Print5writeEPKc>
    4f6e:	8c 01       	movw	r16, r24
    4f70:	ce 01       	movw	r24, r28
    4f72:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN5Print7printlnEv>
    4f76:	08 0f       	add	r16, r24
    4f78:	19 1f       	adc	r17, r25
    4f7a:	c8 01       	movw	r24, r16
    4f7c:	df 91       	pop	r29
    4f7e:	cf 91       	pop	r28
    4f80:	1f 91       	pop	r17
    4f82:	0f 91       	pop	r16
    4f84:	08 95       	ret

00004f86 <_ZN5Print11printNumberEmh>:
    4f86:	8f 92       	push	r8
    4f88:	9f 92       	push	r9
    4f8a:	af 92       	push	r10
    4f8c:	bf 92       	push	r11
    4f8e:	cf 92       	push	r12
    4f90:	df 92       	push	r13
    4f92:	ef 92       	push	r14
    4f94:	ff 92       	push	r15
    4f96:	0f 93       	push	r16
    4f98:	1f 93       	push	r17
    4f9a:	df 93       	push	r29
    4f9c:	cf 93       	push	r28
    4f9e:	cd b7       	in	r28, 0x3d	; 61
    4fa0:	de b7       	in	r29, 0x3e	; 62
    4fa2:	a1 97       	sbiw	r28, 0x21	; 33
    4fa4:	0f b6       	in	r0, 0x3f	; 63
    4fa6:	f8 94       	cli
    4fa8:	de bf       	out	0x3e, r29	; 62
    4faa:	0f be       	out	0x3f, r0	; 63
    4fac:	cd bf       	out	0x3d, r28	; 61
    4fae:	6c 01       	movw	r12, r24
    4fb0:	04 2f       	mov	r16, r20
    4fb2:	e5 2f       	mov	r30, r21
    4fb4:	cb 01       	movw	r24, r22
    4fb6:	12 2f       	mov	r17, r18
    4fb8:	19 a2       	std	Y+33, r1	; 0x21
    4fba:	22 30       	cpi	r18, 0x02	; 2
    4fbc:	08 f4       	brcc	.+2      	; 0x4fc0 <_ZN5Print11printNumberEmh+0x3a>
    4fbe:	1a e0       	ldi	r17, 0x0A	; 10
    4fc0:	21 e2       	ldi	r18, 0x21	; 33
    4fc2:	e2 2e       	mov	r14, r18
    4fc4:	f1 2c       	mov	r15, r1
    4fc6:	ec 0e       	add	r14, r28
    4fc8:	fd 1e       	adc	r15, r29
    4fca:	81 2e       	mov	r8, r17
    4fcc:	99 24       	eor	r9, r9
    4fce:	aa 24       	eor	r10, r10
    4fd0:	bb 24       	eor	r11, r11
    4fd2:	03 c0       	rjmp	.+6      	; 0x4fda <_ZN5Print11printNumberEmh+0x54>
    4fd4:	02 2f       	mov	r16, r18
    4fd6:	e3 2f       	mov	r30, r19
    4fd8:	ca 01       	movw	r24, r20
    4fda:	60 2f       	mov	r22, r16
    4fdc:	7e 2f       	mov	r23, r30
    4fde:	a5 01       	movw	r20, r10
    4fe0:	94 01       	movw	r18, r8
    4fe2:	0e 94 26 31 	call	0x624c	; 0x624c <__udivmodsi4>
    4fe6:	12 9f       	mul	r17, r18
    4fe8:	80 2d       	mov	r24, r0
    4fea:	11 24       	eor	r1, r1
    4fec:	08 1b       	sub	r16, r24
    4fee:	08 94       	sec
    4ff0:	e1 08       	sbc	r14, r1
    4ff2:	f1 08       	sbc	r15, r1
    4ff4:	0a 30       	cpi	r16, 0x0A	; 10
    4ff6:	14 f4       	brge	.+4      	; 0x4ffc <_ZN5Print11printNumberEmh+0x76>
    4ff8:	00 5d       	subi	r16, 0xD0	; 208
    4ffa:	01 c0       	rjmp	.+2      	; 0x4ffe <_ZN5Print11printNumberEmh+0x78>
    4ffc:	09 5c       	subi	r16, 0xC9	; 201
    4ffe:	f7 01       	movw	r30, r14
    5000:	00 83       	st	Z, r16
    5002:	21 15       	cp	r18, r1
    5004:	31 05       	cpc	r19, r1
    5006:	41 05       	cpc	r20, r1
    5008:	51 05       	cpc	r21, r1
    500a:	21 f7       	brne	.-56     	; 0x4fd4 <_ZN5Print11printNumberEmh+0x4e>
    500c:	c6 01       	movw	r24, r12
    500e:	b7 01       	movw	r22, r14
    5010:	0e 94 7f 27 	call	0x4efe	; 0x4efe <_ZN5Print5writeEPKc>
    5014:	a1 96       	adiw	r28, 0x21	; 33
    5016:	0f b6       	in	r0, 0x3f	; 63
    5018:	f8 94       	cli
    501a:	de bf       	out	0x3e, r29	; 62
    501c:	0f be       	out	0x3f, r0	; 63
    501e:	cd bf       	out	0x3d, r28	; 61
    5020:	cf 91       	pop	r28
    5022:	df 91       	pop	r29
    5024:	1f 91       	pop	r17
    5026:	0f 91       	pop	r16
    5028:	ff 90       	pop	r15
    502a:	ef 90       	pop	r14
    502c:	df 90       	pop	r13
    502e:	cf 90       	pop	r12
    5030:	bf 90       	pop	r11
    5032:	af 90       	pop	r10
    5034:	9f 90       	pop	r9
    5036:	8f 90       	pop	r8
    5038:	08 95       	ret

0000503a <_ZN5Print5printEmi>:
    503a:	21 15       	cp	r18, r1
    503c:	31 05       	cpc	r19, r1
    503e:	49 f4       	brne	.+18     	; 0x5052 <_ZN5Print5printEmi+0x18>
    5040:	dc 01       	movw	r26, r24
    5042:	ed 91       	ld	r30, X+
    5044:	fc 91       	ld	r31, X
    5046:	01 90       	ld	r0, Z+
    5048:	f0 81       	ld	r31, Z
    504a:	e0 2d       	mov	r30, r0
    504c:	64 2f       	mov	r22, r20
    504e:	09 95       	icall
    5050:	08 95       	ret
    5052:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <_ZN5Print11printNumberEmh>
    5056:	08 95       	ret

00005058 <_ZN5Print5printEli>:
    5058:	cf 92       	push	r12
    505a:	df 92       	push	r13
    505c:	ef 92       	push	r14
    505e:	ff 92       	push	r15
    5060:	0f 93       	push	r16
    5062:	1f 93       	push	r17
    5064:	cf 93       	push	r28
    5066:	df 93       	push	r29
    5068:	ec 01       	movw	r28, r24
    506a:	7a 01       	movw	r14, r20
    506c:	8b 01       	movw	r16, r22
    506e:	21 15       	cp	r18, r1
    5070:	31 05       	cpc	r19, r1
    5072:	41 f4       	brne	.+16     	; 0x5084 <_ZN5Print5printEli+0x2c>
    5074:	e8 81       	ld	r30, Y
    5076:	f9 81       	ldd	r31, Y+1	; 0x01
    5078:	01 90       	ld	r0, Z+
    507a:	f0 81       	ld	r31, Z
    507c:	e0 2d       	mov	r30, r0
    507e:	64 2f       	mov	r22, r20
    5080:	09 95       	icall
    5082:	1a c0       	rjmp	.+52     	; 0x50b8 <_ZN5Print5printEli+0x60>
    5084:	2a 30       	cpi	r18, 0x0A	; 10
    5086:	31 05       	cpc	r19, r1
    5088:	a9 f4       	brne	.+42     	; 0x50b4 <_ZN5Print5printEli+0x5c>
    508a:	77 ff       	sbrs	r23, 7
    508c:	12 c0       	rjmp	.+36     	; 0x50b2 <_ZN5Print5printEli+0x5a>
    508e:	6d e2       	ldi	r22, 0x2D	; 45
    5090:	0e 94 93 27 	call	0x4f26	; 0x4f26 <_ZN5Print5printEc>
    5094:	6c 01       	movw	r12, r24
    5096:	44 27       	eor	r20, r20
    5098:	55 27       	eor	r21, r21
    509a:	ba 01       	movw	r22, r20
    509c:	4e 19       	sub	r20, r14
    509e:	5f 09       	sbc	r21, r15
    50a0:	60 0b       	sbc	r22, r16
    50a2:	71 0b       	sbc	r23, r17
    50a4:	ce 01       	movw	r24, r28
    50a6:	2a e0       	ldi	r18, 0x0A	; 10
    50a8:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <_ZN5Print11printNumberEmh>
    50ac:	c8 0e       	add	r12, r24
    50ae:	d9 1e       	adc	r13, r25
    50b0:	04 c0       	rjmp	.+8      	; 0x50ba <_ZN5Print5printEli+0x62>
    50b2:	2a e0       	ldi	r18, 0x0A	; 10
    50b4:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <_ZN5Print11printNumberEmh>
    50b8:	6c 01       	movw	r12, r24
    50ba:	c6 01       	movw	r24, r12
    50bc:	df 91       	pop	r29
    50be:	cf 91       	pop	r28
    50c0:	1f 91       	pop	r17
    50c2:	0f 91       	pop	r16
    50c4:	ff 90       	pop	r15
    50c6:	ef 90       	pop	r14
    50c8:	df 90       	pop	r13
    50ca:	cf 90       	pop	r12
    50cc:	08 95       	ret

000050ce <_ZN5Print5printEii>:
    size_t println(const Printable&);
    size_t println(void);
};

#endif
    50ce:	9a 01       	movw	r18, r20
    50d0:	fb 01       	movw	r30, r22
    50d2:	af 01       	movw	r20, r30
    50d4:	66 27       	eor	r22, r22
    50d6:	57 fd       	sbrc	r21, 7
    50d8:	60 95       	com	r22
    50da:	76 2f       	mov	r23, r22
    50dc:	0e 94 2c 28 	call	0x5058	; 0x5058 <_ZN5Print5printEli>
    50e0:	08 95       	ret

000050e2 <_ZN5Print10printFloatEdh>:
    50e2:	6f 92       	push	r6
    50e4:	7f 92       	push	r7
    50e6:	9f 92       	push	r9
    50e8:	af 92       	push	r10
    50ea:	bf 92       	push	r11
    50ec:	cf 92       	push	r12
    50ee:	df 92       	push	r13
    50f0:	ef 92       	push	r14
    50f2:	ff 92       	push	r15
    50f4:	0f 93       	push	r16
    50f6:	1f 93       	push	r17
    50f8:	cf 93       	push	r28
    50fa:	df 93       	push	r29
    50fc:	3c 01       	movw	r6, r24
    50fe:	7a 01       	movw	r14, r20
    5100:	8b 01       	movw	r16, r22
    5102:	c2 2e       	mov	r12, r18
    5104:	cb 01       	movw	r24, r22
    5106:	ba 01       	movw	r22, r20
    5108:	20 e0       	ldi	r18, 0x00	; 0
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	a9 01       	movw	r20, r18
    510e:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__cmpsf2>
    5112:	87 ff       	sbrs	r24, 7
    5114:	0a c0       	rjmp	.+20     	; 0x512a <_ZN5Print10printFloatEdh+0x48>
    5116:	c3 01       	movw	r24, r6
    5118:	6d e2       	ldi	r22, 0x2D	; 45
    511a:	0e 94 93 27 	call	0x4f26	; 0x4f26 <_ZN5Print5printEc>
    511e:	ec 01       	movw	r28, r24
    5120:	17 fb       	bst	r17, 7
    5122:	10 95       	com	r17
    5124:	17 f9       	bld	r17, 7
    5126:	10 95       	com	r17
    5128:	02 c0       	rjmp	.+4      	; 0x512e <_ZN5Print10printFloatEdh+0x4c>
    512a:	c0 e0       	ldi	r28, 0x00	; 0
    512c:	d0 e0       	ldi	r29, 0x00	; 0
    512e:	dd 24       	eor	r13, r13
    5130:	50 e0       	ldi	r21, 0x00	; 0
    5132:	40 e0       	ldi	r20, 0x00	; 0
    5134:	30 e0       	ldi	r19, 0x00	; 0
    5136:	2f e3       	ldi	r18, 0x3F	; 63
    5138:	11 c0       	rjmp	.+34     	; 0x515c <_ZN5Print10printFloatEdh+0x7a>
    513a:	da 01       	movw	r26, r20
    513c:	f9 01       	movw	r30, r18
    513e:	6b 2f       	mov	r22, r27
    5140:	74 2f       	mov	r23, r20
    5142:	8f 2f       	mov	r24, r31
    5144:	92 2f       	mov	r25, r18
    5146:	20 e0       	ldi	r18, 0x00	; 0
    5148:	30 e0       	ldi	r19, 0x00	; 0
    514a:	40 e2       	ldi	r20, 0x20	; 32
    514c:	51 e4       	ldi	r21, 0x41	; 65
    514e:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <__divsf3>
    5152:	56 2f       	mov	r21, r22
    5154:	47 2f       	mov	r20, r23
    5156:	38 2f       	mov	r19, r24
    5158:	29 2f       	mov	r18, r25
    515a:	d3 94       	inc	r13
    515c:	dc 14       	cp	r13, r12
    515e:	68 f3       	brcs	.-38     	; 0x513a <_ZN5Print10printFloatEdh+0x58>
    5160:	c8 01       	movw	r24, r16
    5162:	b7 01       	movw	r22, r14
    5164:	da 01       	movw	r26, r20
    5166:	f9 01       	movw	r30, r18
    5168:	2b 2f       	mov	r18, r27
    516a:	34 2f       	mov	r19, r20
    516c:	4f 2f       	mov	r20, r31
    516e:	5e 2f       	mov	r21, r30
    5170:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__addsf3>
    5174:	5b 01       	movw	r10, r22
    5176:	f8 2e       	mov	r15, r24
    5178:	99 2e       	mov	r9, r25
    517a:	7b 2d       	mov	r23, r11
    517c:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <__fixunssfsi>
    5180:	16 2f       	mov	r17, r22
    5182:	d7 2e       	mov	r13, r23
    5184:	e8 2e       	mov	r14, r24
    5186:	09 2f       	mov	r16, r25
    5188:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <__floatunsisf>
    518c:	9b 01       	movw	r18, r22
    518e:	ac 01       	movw	r20, r24
    5190:	6a 2d       	mov	r22, r10
    5192:	7b 2d       	mov	r23, r11
    5194:	8f 2d       	mov	r24, r15
    5196:	99 2d       	mov	r25, r9
    5198:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
    519c:	96 2e       	mov	r9, r22
    519e:	a7 2e       	mov	r10, r23
    51a0:	b8 2e       	mov	r11, r24
    51a2:	f9 2e       	mov	r15, r25
    51a4:	c3 01       	movw	r24, r6
    51a6:	41 2f       	mov	r20, r17
    51a8:	5d 2d       	mov	r21, r13
    51aa:	6e 2d       	mov	r22, r14
    51ac:	70 2f       	mov	r23, r16
    51ae:	2a e0       	ldi	r18, 0x0A	; 10
    51b0:	30 e0       	ldi	r19, 0x00	; 0
    51b2:	0e 94 1d 28 	call	0x503a	; 0x503a <_ZN5Print5printEmi>
    51b6:	c8 0f       	add	r28, r24
    51b8:	d9 1f       	adc	r29, r25
    51ba:	cc 20       	and	r12, r12
    51bc:	b9 f1       	breq	.+110    	; 0x522c <_ZN5Print10printFloatEdh+0x14a>
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    51be:	c3 01       	movw	r24, r6
    51c0:	69 ef       	ldi	r22, 0xF9	; 249
    51c2:	74 e0       	ldi	r23, 0x04	; 4
    51c4:	0e 94 7f 27 	call	0x4efe	; 0x4efe <_ZN5Print5writeEPKc>
    51c8:	c8 0f       	add	r28, r24
    51ca:	d9 1f       	adc	r29, r25
    51cc:	2f c0       	rjmp	.+94     	; 0x522c <_ZN5Print10printFloatEdh+0x14a>
    51ce:	69 2d       	mov	r22, r9
    51d0:	7a 2d       	mov	r23, r10
    51d2:	8b 2d       	mov	r24, r11
    51d4:	9f 2d       	mov	r25, r15
    51d6:	20 e0       	ldi	r18, 0x00	; 0
    51d8:	30 e0       	ldi	r19, 0x00	; 0
    51da:	40 e2       	ldi	r20, 0x20	; 32
    51dc:	51 e4       	ldi	r21, 0x41	; 65
    51de:	0e 94 22 30 	call	0x6044	; 0x6044 <__mulsf3>
    51e2:	d6 2e       	mov	r13, r22
    51e4:	b7 2e       	mov	r11, r23
    51e6:	a8 2e       	mov	r10, r24
    51e8:	99 2e       	mov	r9, r25
    51ea:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__fixsfsi>
    size_t println(void);
};

#endif
    51ee:	7b 01       	movw	r14, r22
    51f0:	00 27       	eor	r16, r16
    51f2:	f7 fc       	sbrc	r15, 7
    51f4:	00 95       	com	r16
    51f6:	10 2f       	mov	r17, r16
    51f8:	c3 01       	movw	r24, r6
    51fa:	b8 01       	movw	r22, r16
    51fc:	a7 01       	movw	r20, r14
    51fe:	2a e0       	ldi	r18, 0x0A	; 10
    5200:	30 e0       	ldi	r19, 0x00	; 0
    5202:	0e 94 2c 28 	call	0x5058	; 0x5058 <_ZN5Print5printEli>
    5206:	c8 0f       	add	r28, r24
    5208:	d9 1f       	adc	r29, r25
    520a:	c8 01       	movw	r24, r16
    520c:	b7 01       	movw	r22, r14
    520e:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__floatsisf>
    5212:	9b 01       	movw	r18, r22
    5214:	ac 01       	movw	r20, r24
    5216:	6d 2d       	mov	r22, r13
    5218:	7b 2d       	mov	r23, r11
    521a:	8a 2d       	mov	r24, r10
    521c:	99 2d       	mov	r25, r9
    521e:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__subsf3>
    5222:	96 2e       	mov	r9, r22
    5224:	a7 2e       	mov	r10, r23
    5226:	b8 2e       	mov	r11, r24
    5228:	f9 2e       	mov	r15, r25
    522a:	ca 94       	dec	r12
    522c:	cc 20       	and	r12, r12
    522e:	79 f6       	brne	.-98     	; 0x51ce <_ZN5Print10printFloatEdh+0xec>
    5230:	ce 01       	movw	r24, r28
    5232:	df 91       	pop	r29
    5234:	cf 91       	pop	r28
    5236:	1f 91       	pop	r17
    5238:	0f 91       	pop	r16
    523a:	ff 90       	pop	r15
    523c:	ef 90       	pop	r14
    523e:	df 90       	pop	r13
    5240:	cf 90       	pop	r12
    5242:	bf 90       	pop	r11
    5244:	af 90       	pop	r10
    5246:	9f 90       	pop	r9
    5248:	7f 90       	pop	r7
    524a:	6f 90       	pop	r6
    524c:	08 95       	ret

0000524e <_ZN5Print5printEdi>:
    524e:	0e 94 71 28 	call	0x50e2	; 0x50e2 <_ZN5Print10printFloatEdh>
    5252:	08 95       	ret

00005254 <_ZN5Print7printlnEdi>:
    5254:	0f 93       	push	r16
    5256:	1f 93       	push	r17
    5258:	cf 93       	push	r28
    525a:	df 93       	push	r29
    525c:	ec 01       	movw	r28, r24
    525e:	0e 94 71 28 	call	0x50e2	; 0x50e2 <_ZN5Print10printFloatEdh>
    5262:	8c 01       	movw	r16, r24
    5264:	ce 01       	movw	r24, r28
    5266:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN5Print7printlnEv>
    526a:	08 0f       	add	r16, r24
    526c:	19 1f       	adc	r17, r25
    526e:	c8 01       	movw	r24, r16
    5270:	df 91       	pop	r29
    5272:	cf 91       	pop	r28
    5274:	1f 91       	pop	r17
    5276:	0f 91       	pop	r16
    5278:	08 95       	ret

0000527a <attachInterrupt>:

volatile static voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    527a:	88 30       	cpi	r24, 0x08	; 8
    527c:	08 f0       	brcs	.+2      	; 0x5280 <attachInterrupt+0x6>
    527e:	76 c0       	rjmp	.+236    	; 0x536c <attachInterrupt+0xf2>
    intFunc[interruptNum] = userFunc;
    5280:	e8 2f       	mov	r30, r24
    5282:	f0 e0       	ldi	r31, 0x00	; 0
    5284:	ee 0f       	add	r30, r30
    5286:	ff 1f       	adc	r31, r31
    5288:	e7 53       	subi	r30, 0x37	; 55
    528a:	ff 4e       	sbci	r31, 0xEF	; 239
    528c:	71 83       	std	Z+1, r23	; 0x01
    528e:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    5290:	84 30       	cpi	r24, 0x04	; 4
    5292:	29 f1       	breq	.+74     	; 0x52de <attachInterrupt+0x64>
    5294:	85 30       	cpi	r24, 0x05	; 5
    5296:	38 f4       	brcc	.+14     	; 0x52a6 <attachInterrupt+0x2c>
    5298:	82 30       	cpi	r24, 0x02	; 2
    529a:	69 f0       	breq	.+26     	; 0x52b6 <attachInterrupt+0x3c>
    529c:	83 30       	cpi	r24, 0x03	; 3
    529e:	98 f4       	brcc	.+38     	; 0x52c6 <attachInterrupt+0x4c>
    52a0:	81 30       	cpi	r24, 0x01	; 1
    52a2:	b9 f5       	brne	.+110    	; 0x5312 <attachInterrupt+0x98>
    52a4:	3e c0       	rjmp	.+124    	; 0x5322 <attachInterrupt+0xa8>
    52a6:	86 30       	cpi	r24, 0x06	; 6
    52a8:	09 f4       	brne	.+2      	; 0x52ac <attachInterrupt+0x32>
    52aa:	47 c0       	rjmp	.+142    	; 0x533a <attachInterrupt+0xc0>
    52ac:	86 30       	cpi	r24, 0x06	; 6
    52ae:	20 f1       	brcs	.+72     	; 0x52f8 <attachInterrupt+0x7e>
    52b0:	87 30       	cpi	r24, 0x07	; 7
    52b2:	79 f5       	brne	.+94     	; 0x5312 <attachInterrupt+0x98>
    52b4:	4f c0       	rjmp	.+158    	; 0x5354 <attachInterrupt+0xda>
#if defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    52b6:	80 91 69 00 	lds	r24, 0x0069
    52ba:	8c 7f       	andi	r24, 0xFC	; 252
    52bc:	84 2b       	or	r24, r20
    52be:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
    52c2:	e8 9a       	sbi	0x1d, 0	; 29
      break;
    52c4:	08 95       	ret
    case 3:
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    52c6:	80 91 69 00 	lds	r24, 0x0069
    52ca:	44 0f       	add	r20, r20
    52cc:	55 1f       	adc	r21, r21
    52ce:	44 0f       	add	r20, r20
    52d0:	55 1f       	adc	r21, r21
    52d2:	83 7f       	andi	r24, 0xF3	; 243
    52d4:	84 2b       	or	r24, r20
    52d6:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
    52da:	e9 9a       	sbi	0x1d, 1	; 29
      break;
    52dc:	08 95       	ret
    case 4:
      EICRA = (EICRA & ~((1 << ISC20) | (1 << ISC21))) | (mode << ISC20);
    52de:	80 91 69 00 	lds	r24, 0x0069
    52e2:	74 e0       	ldi	r23, 0x04	; 4
    52e4:	44 0f       	add	r20, r20
    52e6:	55 1f       	adc	r21, r21
    52e8:	7a 95       	dec	r23
    52ea:	e1 f7       	brne	.-8      	; 0x52e4 <attachInterrupt+0x6a>
    52ec:	8f 7c       	andi	r24, 0xCF	; 207
    52ee:	84 2b       	or	r24, r20
    52f0:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT2);
    52f4:	ea 9a       	sbi	0x1d, 2	; 29
      break;
    52f6:	08 95       	ret
    case 5:
      EICRA = (EICRA & ~((1 << ISC30) | (1 << ISC31))) | (mode << ISC30);
    52f8:	80 91 69 00 	lds	r24, 0x0069
    52fc:	66 e0       	ldi	r22, 0x06	; 6
    52fe:	44 0f       	add	r20, r20
    5300:	55 1f       	adc	r21, r21
    5302:	6a 95       	dec	r22
    5304:	e1 f7       	brne	.-8      	; 0x52fe <attachInterrupt+0x84>
    5306:	8f 73       	andi	r24, 0x3F	; 63
    5308:	84 2b       	or	r24, r20
    530a:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT3);
    530e:	eb 9a       	sbi	0x1d, 3	; 29
      break;
    5310:	08 95       	ret
    case 0:
      EICRB = (EICRB & ~((1 << ISC40) | (1 << ISC41))) | (mode << ISC40);
    5312:	80 91 6a 00 	lds	r24, 0x006A
    5316:	8c 7f       	andi	r24, 0xFC	; 252
    5318:	84 2b       	or	r24, r20
    531a:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT4);
    531e:	ec 9a       	sbi	0x1d, 4	; 29
      break;
    5320:	08 95       	ret
    case 1:
      EICRB = (EICRB & ~((1 << ISC50) | (1 << ISC51))) | (mode << ISC50);
    5322:	80 91 6a 00 	lds	r24, 0x006A
    5326:	44 0f       	add	r20, r20
    5328:	55 1f       	adc	r21, r21
    532a:	44 0f       	add	r20, r20
    532c:	55 1f       	adc	r21, r21
    532e:	83 7f       	andi	r24, 0xF3	; 243
    5330:	84 2b       	or	r24, r20
    5332:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT5);
    5336:	ed 9a       	sbi	0x1d, 5	; 29
      break;
    5338:	08 95       	ret
    case 6:
      EICRB = (EICRB & ~((1 << ISC60) | (1 << ISC61))) | (mode << ISC60);
    533a:	80 91 6a 00 	lds	r24, 0x006A
    533e:	24 e0       	ldi	r18, 0x04	; 4
    5340:	44 0f       	add	r20, r20
    5342:	55 1f       	adc	r21, r21
    5344:	2a 95       	dec	r18
    5346:	e1 f7       	brne	.-8      	; 0x5340 <attachInterrupt+0xc6>
    5348:	8f 7c       	andi	r24, 0xCF	; 207
    534a:	84 2b       	or	r24, r20
    534c:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT6);
    5350:	ee 9a       	sbi	0x1d, 6	; 29
      break;
    5352:	08 95       	ret
    case 7:
      EICRB = (EICRB & ~((1 << ISC70) | (1 << ISC71))) | (mode << ISC70);
    5354:	80 91 6a 00 	lds	r24, 0x006A
    5358:	96 e0       	ldi	r25, 0x06	; 6
    535a:	44 0f       	add	r20, r20
    535c:	55 1f       	adc	r21, r21
    535e:	9a 95       	dec	r25
    5360:	e1 f7       	brne	.-8      	; 0x535a <attachInterrupt+0xe0>
    5362:	8f 73       	andi	r24, 0x3F	; 63
    5364:	84 2b       	or	r24, r20
    5366:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT7);
    536a:	ef 9a       	sbi	0x1d, 7	; 29
    536c:	08 95       	ret

0000536e <__vector_1>:
}
*/

#if defined(EICRA) && defined(EICRB)

SIGNAL(INT0_vect) {
    536e:	1f 92       	push	r1
    5370:	0f 92       	push	r0
    5372:	0f b6       	in	r0, 0x3f	; 63
    5374:	0f 92       	push	r0
    5376:	0b b6       	in	r0, 0x3b	; 59
    5378:	0f 92       	push	r0
    537a:	11 24       	eor	r1, r1
    537c:	2f 93       	push	r18
    537e:	3f 93       	push	r19
    5380:	4f 93       	push	r20
    5382:	5f 93       	push	r21
    5384:	6f 93       	push	r22
    5386:	7f 93       	push	r23
    5388:	8f 93       	push	r24
    538a:	9f 93       	push	r25
    538c:	af 93       	push	r26
    538e:	bf 93       	push	r27
    5390:	ef 93       	push	r30
    5392:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    5394:	80 91 cd 10 	lds	r24, 0x10CD
    5398:	90 91 ce 10 	lds	r25, 0x10CE
    539c:	00 97       	sbiw	r24, 0x00	; 0
    539e:	29 f0       	breq	.+10     	; 0x53aa <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    53a0:	e0 91 cd 10 	lds	r30, 0x10CD
    53a4:	f0 91 ce 10 	lds	r31, 0x10CE
    53a8:	09 95       	icall
}
    53aa:	ff 91       	pop	r31
    53ac:	ef 91       	pop	r30
    53ae:	bf 91       	pop	r27
    53b0:	af 91       	pop	r26
    53b2:	9f 91       	pop	r25
    53b4:	8f 91       	pop	r24
    53b6:	7f 91       	pop	r23
    53b8:	6f 91       	pop	r22
    53ba:	5f 91       	pop	r21
    53bc:	4f 91       	pop	r20
    53be:	3f 91       	pop	r19
    53c0:	2f 91       	pop	r18
    53c2:	0f 90       	pop	r0
    53c4:	0b be       	out	0x3b, r0	; 59
    53c6:	0f 90       	pop	r0
    53c8:	0f be       	out	0x3f, r0	; 63
    53ca:	0f 90       	pop	r0
    53cc:	1f 90       	pop	r1
    53ce:	18 95       	reti

000053d0 <__vector_2>:

SIGNAL(INT1_vect) {
    53d0:	1f 92       	push	r1
    53d2:	0f 92       	push	r0
    53d4:	0f b6       	in	r0, 0x3f	; 63
    53d6:	0f 92       	push	r0
    53d8:	0b b6       	in	r0, 0x3b	; 59
    53da:	0f 92       	push	r0
    53dc:	11 24       	eor	r1, r1
    53de:	2f 93       	push	r18
    53e0:	3f 93       	push	r19
    53e2:	4f 93       	push	r20
    53e4:	5f 93       	push	r21
    53e6:	6f 93       	push	r22
    53e8:	7f 93       	push	r23
    53ea:	8f 93       	push	r24
    53ec:	9f 93       	push	r25
    53ee:	af 93       	push	r26
    53f0:	bf 93       	push	r27
    53f2:	ef 93       	push	r30
    53f4:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    53f6:	80 91 cf 10 	lds	r24, 0x10CF
    53fa:	90 91 d0 10 	lds	r25, 0x10D0
    53fe:	00 97       	sbiw	r24, 0x00	; 0
    5400:	29 f0       	breq	.+10     	; 0x540c <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    5402:	e0 91 cf 10 	lds	r30, 0x10CF
    5406:	f0 91 d0 10 	lds	r31, 0x10D0
    540a:	09 95       	icall
}
    540c:	ff 91       	pop	r31
    540e:	ef 91       	pop	r30
    5410:	bf 91       	pop	r27
    5412:	af 91       	pop	r26
    5414:	9f 91       	pop	r25
    5416:	8f 91       	pop	r24
    5418:	7f 91       	pop	r23
    541a:	6f 91       	pop	r22
    541c:	5f 91       	pop	r21
    541e:	4f 91       	pop	r20
    5420:	3f 91       	pop	r19
    5422:	2f 91       	pop	r18
    5424:	0f 90       	pop	r0
    5426:	0b be       	out	0x3b, r0	; 59
    5428:	0f 90       	pop	r0
    542a:	0f be       	out	0x3f, r0	; 63
    542c:	0f 90       	pop	r0
    542e:	1f 90       	pop	r1
    5430:	18 95       	reti

00005432 <__vector_3>:

SIGNAL(INT2_vect) {
    5432:	1f 92       	push	r1
    5434:	0f 92       	push	r0
    5436:	0f b6       	in	r0, 0x3f	; 63
    5438:	0f 92       	push	r0
    543a:	0b b6       	in	r0, 0x3b	; 59
    543c:	0f 92       	push	r0
    543e:	11 24       	eor	r1, r1
    5440:	2f 93       	push	r18
    5442:	3f 93       	push	r19
    5444:	4f 93       	push	r20
    5446:	5f 93       	push	r21
    5448:	6f 93       	push	r22
    544a:	7f 93       	push	r23
    544c:	8f 93       	push	r24
    544e:	9f 93       	push	r25
    5450:	af 93       	push	r26
    5452:	bf 93       	push	r27
    5454:	ef 93       	push	r30
    5456:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    5458:	80 91 d1 10 	lds	r24, 0x10D1
    545c:	90 91 d2 10 	lds	r25, 0x10D2
    5460:	00 97       	sbiw	r24, 0x00	; 0
    5462:	29 f0       	breq	.+10     	; 0x546e <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    5464:	e0 91 d1 10 	lds	r30, 0x10D1
    5468:	f0 91 d2 10 	lds	r31, 0x10D2
    546c:	09 95       	icall
}
    546e:	ff 91       	pop	r31
    5470:	ef 91       	pop	r30
    5472:	bf 91       	pop	r27
    5474:	af 91       	pop	r26
    5476:	9f 91       	pop	r25
    5478:	8f 91       	pop	r24
    547a:	7f 91       	pop	r23
    547c:	6f 91       	pop	r22
    547e:	5f 91       	pop	r21
    5480:	4f 91       	pop	r20
    5482:	3f 91       	pop	r19
    5484:	2f 91       	pop	r18
    5486:	0f 90       	pop	r0
    5488:	0b be       	out	0x3b, r0	; 59
    548a:	0f 90       	pop	r0
    548c:	0f be       	out	0x3f, r0	; 63
    548e:	0f 90       	pop	r0
    5490:	1f 90       	pop	r1
    5492:	18 95       	reti

00005494 <__vector_4>:

SIGNAL(INT3_vect) {
    5494:	1f 92       	push	r1
    5496:	0f 92       	push	r0
    5498:	0f b6       	in	r0, 0x3f	; 63
    549a:	0f 92       	push	r0
    549c:	0b b6       	in	r0, 0x3b	; 59
    549e:	0f 92       	push	r0
    54a0:	11 24       	eor	r1, r1
    54a2:	2f 93       	push	r18
    54a4:	3f 93       	push	r19
    54a6:	4f 93       	push	r20
    54a8:	5f 93       	push	r21
    54aa:	6f 93       	push	r22
    54ac:	7f 93       	push	r23
    54ae:	8f 93       	push	r24
    54b0:	9f 93       	push	r25
    54b2:	af 93       	push	r26
    54b4:	bf 93       	push	r27
    54b6:	ef 93       	push	r30
    54b8:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    54ba:	80 91 d3 10 	lds	r24, 0x10D3
    54be:	90 91 d4 10 	lds	r25, 0x10D4
    54c2:	00 97       	sbiw	r24, 0x00	; 0
    54c4:	29 f0       	breq	.+10     	; 0x54d0 <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    54c6:	e0 91 d3 10 	lds	r30, 0x10D3
    54ca:	f0 91 d4 10 	lds	r31, 0x10D4
    54ce:	09 95       	icall
}
    54d0:	ff 91       	pop	r31
    54d2:	ef 91       	pop	r30
    54d4:	bf 91       	pop	r27
    54d6:	af 91       	pop	r26
    54d8:	9f 91       	pop	r25
    54da:	8f 91       	pop	r24
    54dc:	7f 91       	pop	r23
    54de:	6f 91       	pop	r22
    54e0:	5f 91       	pop	r21
    54e2:	4f 91       	pop	r20
    54e4:	3f 91       	pop	r19
    54e6:	2f 91       	pop	r18
    54e8:	0f 90       	pop	r0
    54ea:	0b be       	out	0x3b, r0	; 59
    54ec:	0f 90       	pop	r0
    54ee:	0f be       	out	0x3f, r0	; 63
    54f0:	0f 90       	pop	r0
    54f2:	1f 90       	pop	r1
    54f4:	18 95       	reti

000054f6 <__vector_5>:

SIGNAL(INT4_vect) {
    54f6:	1f 92       	push	r1
    54f8:	0f 92       	push	r0
    54fa:	0f b6       	in	r0, 0x3f	; 63
    54fc:	0f 92       	push	r0
    54fe:	0b b6       	in	r0, 0x3b	; 59
    5500:	0f 92       	push	r0
    5502:	11 24       	eor	r1, r1
    5504:	2f 93       	push	r18
    5506:	3f 93       	push	r19
    5508:	4f 93       	push	r20
    550a:	5f 93       	push	r21
    550c:	6f 93       	push	r22
    550e:	7f 93       	push	r23
    5510:	8f 93       	push	r24
    5512:	9f 93       	push	r25
    5514:	af 93       	push	r26
    5516:	bf 93       	push	r27
    5518:	ef 93       	push	r30
    551a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    551c:	80 91 c9 10 	lds	r24, 0x10C9
    5520:	90 91 ca 10 	lds	r25, 0x10CA
    5524:	00 97       	sbiw	r24, 0x00	; 0
    5526:	29 f0       	breq	.+10     	; 0x5532 <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    5528:	e0 91 c9 10 	lds	r30, 0x10C9
    552c:	f0 91 ca 10 	lds	r31, 0x10CA
    5530:	09 95       	icall
}
    5532:	ff 91       	pop	r31
    5534:	ef 91       	pop	r30
    5536:	bf 91       	pop	r27
    5538:	af 91       	pop	r26
    553a:	9f 91       	pop	r25
    553c:	8f 91       	pop	r24
    553e:	7f 91       	pop	r23
    5540:	6f 91       	pop	r22
    5542:	5f 91       	pop	r21
    5544:	4f 91       	pop	r20
    5546:	3f 91       	pop	r19
    5548:	2f 91       	pop	r18
    554a:	0f 90       	pop	r0
    554c:	0b be       	out	0x3b, r0	; 59
    554e:	0f 90       	pop	r0
    5550:	0f be       	out	0x3f, r0	; 63
    5552:	0f 90       	pop	r0
    5554:	1f 90       	pop	r1
    5556:	18 95       	reti

00005558 <__vector_6>:

SIGNAL(INT5_vect) {
    5558:	1f 92       	push	r1
    555a:	0f 92       	push	r0
    555c:	0f b6       	in	r0, 0x3f	; 63
    555e:	0f 92       	push	r0
    5560:	0b b6       	in	r0, 0x3b	; 59
    5562:	0f 92       	push	r0
    5564:	11 24       	eor	r1, r1
    5566:	2f 93       	push	r18
    5568:	3f 93       	push	r19
    556a:	4f 93       	push	r20
    556c:	5f 93       	push	r21
    556e:	6f 93       	push	r22
    5570:	7f 93       	push	r23
    5572:	8f 93       	push	r24
    5574:	9f 93       	push	r25
    5576:	af 93       	push	r26
    5578:	bf 93       	push	r27
    557a:	ef 93       	push	r30
    557c:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    557e:	80 91 cb 10 	lds	r24, 0x10CB
    5582:	90 91 cc 10 	lds	r25, 0x10CC
    5586:	00 97       	sbiw	r24, 0x00	; 0
    5588:	29 f0       	breq	.+10     	; 0x5594 <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    558a:	e0 91 cb 10 	lds	r30, 0x10CB
    558e:	f0 91 cc 10 	lds	r31, 0x10CC
    5592:	09 95       	icall
}
    5594:	ff 91       	pop	r31
    5596:	ef 91       	pop	r30
    5598:	bf 91       	pop	r27
    559a:	af 91       	pop	r26
    559c:	9f 91       	pop	r25
    559e:	8f 91       	pop	r24
    55a0:	7f 91       	pop	r23
    55a2:	6f 91       	pop	r22
    55a4:	5f 91       	pop	r21
    55a6:	4f 91       	pop	r20
    55a8:	3f 91       	pop	r19
    55aa:	2f 91       	pop	r18
    55ac:	0f 90       	pop	r0
    55ae:	0b be       	out	0x3b, r0	; 59
    55b0:	0f 90       	pop	r0
    55b2:	0f be       	out	0x3f, r0	; 63
    55b4:	0f 90       	pop	r0
    55b6:	1f 90       	pop	r1
    55b8:	18 95       	reti

000055ba <__vector_7>:

SIGNAL(INT6_vect) {
    55ba:	1f 92       	push	r1
    55bc:	0f 92       	push	r0
    55be:	0f b6       	in	r0, 0x3f	; 63
    55c0:	0f 92       	push	r0
    55c2:	0b b6       	in	r0, 0x3b	; 59
    55c4:	0f 92       	push	r0
    55c6:	11 24       	eor	r1, r1
    55c8:	2f 93       	push	r18
    55ca:	3f 93       	push	r19
    55cc:	4f 93       	push	r20
    55ce:	5f 93       	push	r21
    55d0:	6f 93       	push	r22
    55d2:	7f 93       	push	r23
    55d4:	8f 93       	push	r24
    55d6:	9f 93       	push	r25
    55d8:	af 93       	push	r26
    55da:	bf 93       	push	r27
    55dc:	ef 93       	push	r30
    55de:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    55e0:	80 91 d5 10 	lds	r24, 0x10D5
    55e4:	90 91 d6 10 	lds	r25, 0x10D6
    55e8:	00 97       	sbiw	r24, 0x00	; 0
    55ea:	29 f0       	breq	.+10     	; 0x55f6 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    55ec:	e0 91 d5 10 	lds	r30, 0x10D5
    55f0:	f0 91 d6 10 	lds	r31, 0x10D6
    55f4:	09 95       	icall
}
    55f6:	ff 91       	pop	r31
    55f8:	ef 91       	pop	r30
    55fa:	bf 91       	pop	r27
    55fc:	af 91       	pop	r26
    55fe:	9f 91       	pop	r25
    5600:	8f 91       	pop	r24
    5602:	7f 91       	pop	r23
    5604:	6f 91       	pop	r22
    5606:	5f 91       	pop	r21
    5608:	4f 91       	pop	r20
    560a:	3f 91       	pop	r19
    560c:	2f 91       	pop	r18
    560e:	0f 90       	pop	r0
    5610:	0b be       	out	0x3b, r0	; 59
    5612:	0f 90       	pop	r0
    5614:	0f be       	out	0x3f, r0	; 63
    5616:	0f 90       	pop	r0
    5618:	1f 90       	pop	r1
    561a:	18 95       	reti

0000561c <__vector_8>:

SIGNAL(INT7_vect) {
    561c:	1f 92       	push	r1
    561e:	0f 92       	push	r0
    5620:	0f b6       	in	r0, 0x3f	; 63
    5622:	0f 92       	push	r0
    5624:	0b b6       	in	r0, 0x3b	; 59
    5626:	0f 92       	push	r0
    5628:	11 24       	eor	r1, r1
    562a:	2f 93       	push	r18
    562c:	3f 93       	push	r19
    562e:	4f 93       	push	r20
    5630:	5f 93       	push	r21
    5632:	6f 93       	push	r22
    5634:	7f 93       	push	r23
    5636:	8f 93       	push	r24
    5638:	9f 93       	push	r25
    563a:	af 93       	push	r26
    563c:	bf 93       	push	r27
    563e:	ef 93       	push	r30
    5640:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    5642:	80 91 d7 10 	lds	r24, 0x10D7
    5646:	90 91 d8 10 	lds	r25, 0x10D8
    564a:	00 97       	sbiw	r24, 0x00	; 0
    564c:	29 f0       	breq	.+10     	; 0x5658 <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    564e:	e0 91 d7 10 	lds	r30, 0x10D7
    5652:	f0 91 d8 10 	lds	r31, 0x10D8
    5656:	09 95       	icall
}
    5658:	ff 91       	pop	r31
    565a:	ef 91       	pop	r30
    565c:	bf 91       	pop	r27
    565e:	af 91       	pop	r26
    5660:	9f 91       	pop	r25
    5662:	8f 91       	pop	r24
    5664:	7f 91       	pop	r23
    5666:	6f 91       	pop	r22
    5668:	5f 91       	pop	r21
    566a:	4f 91       	pop	r20
    566c:	3f 91       	pop	r19
    566e:	2f 91       	pop	r18
    5670:	0f 90       	pop	r0
    5672:	0b be       	out	0x3b, r0	; 59
    5674:	0f 90       	pop	r0
    5676:	0f be       	out	0x3f, r0	; 63
    5678:	0f 90       	pop	r0
    567a:	1f 90       	pop	r1
    567c:	18 95       	reti

0000567e <main>:
#include "Arduino.h"

int main(void)
{
    567e:	cf 93       	push	r28
    5680:	df 93       	push	r29
	init();
    5682:	0e 94 cd 2b 	call	0x579a	; 0x579a <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
    5686:	0e 94 49 18 	call	0x3092	; 0x3092 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    568a:	c7 e9       	ldi	r28, 0x97	; 151
    568c:	d3 e2       	ldi	r29, 0x23	; 35
#endif
	
	setup();
    
	for (;;) {
		loop();
    568e:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <loop>
		if (serialEventRun) serialEventRun();
    5692:	20 97       	sbiw	r28, 0x00	; 0
    5694:	e1 f3       	breq	.-8      	; 0x568e <main+0x10>
    5696:	0e 94 97 23 	call	0x472e	; 0x472e <_Z14serialEventRunv>
    569a:	f9 cf       	rjmp	.-14     	; 0x568e <main+0x10>

0000569c <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
    569c:	0e 94 15 32 	call	0x642a	; 0x642a <free>
} 
    56a0:	08 95       	ret

000056a2 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    56a2:	1f 92       	push	r1
    56a4:	0f 92       	push	r0
    56a6:	0f b6       	in	r0, 0x3f	; 63
    56a8:	0f 92       	push	r0
    56aa:	11 24       	eor	r1, r1
    56ac:	2f 93       	push	r18
    56ae:	3f 93       	push	r19
    56b0:	8f 93       	push	r24
    56b2:	9f 93       	push	r25
    56b4:	af 93       	push	r26
    56b6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    56b8:	80 91 dd 10 	lds	r24, 0x10DD
    56bc:	90 91 de 10 	lds	r25, 0x10DE
    56c0:	a0 91 df 10 	lds	r26, 0x10DF
    56c4:	b0 91 e0 10 	lds	r27, 0x10E0
	unsigned char f = timer0_fract;
    56c8:	30 91 e1 10 	lds	r19, 0x10E1

	m += MILLIS_INC;
    56cc:	01 96       	adiw	r24, 0x01	; 1
    56ce:	a1 1d       	adc	r26, r1
    56d0:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    56d2:	23 2f       	mov	r18, r19
    56d4:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    56d6:	2d 37       	cpi	r18, 0x7D	; 125
    56d8:	20 f0       	brcs	.+8      	; 0x56e2 <__vector_23+0x40>
		f -= FRACT_MAX;
    56da:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    56dc:	01 96       	adiw	r24, 0x01	; 1
    56de:	a1 1d       	adc	r26, r1
    56e0:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    56e2:	20 93 e1 10 	sts	0x10E1, r18
	timer0_millis = m;
    56e6:	80 93 dd 10 	sts	0x10DD, r24
    56ea:	90 93 de 10 	sts	0x10DE, r25
    56ee:	a0 93 df 10 	sts	0x10DF, r26
    56f2:	b0 93 e0 10 	sts	0x10E0, r27
	timer0_overflow_count++;
    56f6:	80 91 d9 10 	lds	r24, 0x10D9
    56fa:	90 91 da 10 	lds	r25, 0x10DA
    56fe:	a0 91 db 10 	lds	r26, 0x10DB
    5702:	b0 91 dc 10 	lds	r27, 0x10DC
    5706:	01 96       	adiw	r24, 0x01	; 1
    5708:	a1 1d       	adc	r26, r1
    570a:	b1 1d       	adc	r27, r1
    570c:	80 93 d9 10 	sts	0x10D9, r24
    5710:	90 93 da 10 	sts	0x10DA, r25
    5714:	a0 93 db 10 	sts	0x10DB, r26
    5718:	b0 93 dc 10 	sts	0x10DC, r27
}
    571c:	bf 91       	pop	r27
    571e:	af 91       	pop	r26
    5720:	9f 91       	pop	r25
    5722:	8f 91       	pop	r24
    5724:	3f 91       	pop	r19
    5726:	2f 91       	pop	r18
    5728:	0f 90       	pop	r0
    572a:	0f be       	out	0x3f, r0	; 63
    572c:	0f 90       	pop	r0
    572e:	1f 90       	pop	r1
    5730:	18 95       	reti

00005732 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5732:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5734:	f8 94       	cli
	m = timer0_millis;
    5736:	20 91 dd 10 	lds	r18, 0x10DD
    573a:	30 91 de 10 	lds	r19, 0x10DE
    573e:	40 91 df 10 	lds	r20, 0x10DF
    5742:	50 91 e0 10 	lds	r21, 0x10E0
	SREG = oldSREG;
    5746:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    5748:	b9 01       	movw	r22, r18
    574a:	ca 01       	movw	r24, r20
    574c:	08 95       	ret

0000574e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    574e:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    5750:	f8 94       	cli
	m = timer0_overflow_count;
    5752:	20 91 d9 10 	lds	r18, 0x10D9
    5756:	30 91 da 10 	lds	r19, 0x10DA
    575a:	40 91 db 10 	lds	r20, 0x10DB
    575e:	50 91 dc 10 	lds	r21, 0x10DC
#if defined(TCNT0)
	t = TCNT0;
    5762:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5764:	a8 9b       	sbis	0x15, 0	; 21
    5766:	06 c0       	rjmp	.+12     	; 0x5774 <micros+0x26>
    5768:	8f 3f       	cpi	r24, 0xFF	; 255
    576a:	21 f0       	breq	.+8      	; 0x5774 <micros+0x26>
		m++;
    576c:	2f 5f       	subi	r18, 0xFF	; 255
    576e:	3f 4f       	sbci	r19, 0xFF	; 255
    5770:	4f 4f       	sbci	r20, 0xFF	; 255
    5772:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5774:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    5776:	54 2f       	mov	r21, r20
    5778:	43 2f       	mov	r20, r19
    577a:	32 2f       	mov	r19, r18
    577c:	22 27       	eor	r18, r18
    577e:	28 0f       	add	r18, r24
    5780:	31 1d       	adc	r19, r1
    5782:	41 1d       	adc	r20, r1
    5784:	51 1d       	adc	r21, r1
    5786:	82 e0       	ldi	r24, 0x02	; 2
    5788:	22 0f       	add	r18, r18
    578a:	33 1f       	adc	r19, r19
    578c:	44 1f       	adc	r20, r20
    578e:	55 1f       	adc	r21, r21
    5790:	8a 95       	dec	r24
    5792:	d1 f7       	brne	.-12     	; 0x5788 <micros+0x3a>
}
    5794:	b9 01       	movw	r22, r18
    5796:	ca 01       	movw	r24, r20
    5798:	08 95       	ret

0000579a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    579a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    579c:	84 b5       	in	r24, 0x24	; 36
    579e:	82 60       	ori	r24, 0x02	; 2
    57a0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    57a2:	84 b5       	in	r24, 0x24	; 36
    57a4:	81 60       	ori	r24, 0x01	; 1
    57a6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    57a8:	85 b5       	in	r24, 0x25	; 37
    57aa:	82 60       	ori	r24, 0x02	; 2
    57ac:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    57ae:	85 b5       	in	r24, 0x25	; 37
    57b0:	81 60       	ori	r24, 0x01	; 1
    57b2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    57b4:	ee e6       	ldi	r30, 0x6E	; 110
    57b6:	f0 e0       	ldi	r31, 0x00	; 0
    57b8:	80 81       	ld	r24, Z
    57ba:	81 60       	ori	r24, 0x01	; 1
    57bc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    57be:	e1 e8       	ldi	r30, 0x81	; 129
    57c0:	f0 e0       	ldi	r31, 0x00	; 0
    57c2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    57c4:	80 81       	ld	r24, Z
    57c6:	82 60       	ori	r24, 0x02	; 2
    57c8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    57ca:	80 81       	ld	r24, Z
    57cc:	81 60       	ori	r24, 0x01	; 1
    57ce:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    57d0:	e0 e8       	ldi	r30, 0x80	; 128
    57d2:	f0 e0       	ldi	r31, 0x00	; 0
    57d4:	80 81       	ld	r24, Z
    57d6:	81 60       	ori	r24, 0x01	; 1
    57d8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    57da:	e1 eb       	ldi	r30, 0xB1	; 177
    57dc:	f0 e0       	ldi	r31, 0x00	; 0
    57de:	80 81       	ld	r24, Z
    57e0:	84 60       	ori	r24, 0x04	; 4
    57e2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    57e4:	e0 eb       	ldi	r30, 0xB0	; 176
    57e6:	f0 e0       	ldi	r31, 0x00	; 0
    57e8:	80 81       	ld	r24, Z
    57ea:	81 60       	ori	r24, 0x01	; 1
    57ec:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    57ee:	e1 e9       	ldi	r30, 0x91	; 145
    57f0:	f0 e0       	ldi	r31, 0x00	; 0
    57f2:	80 81       	ld	r24, Z
    57f4:	82 60       	ori	r24, 0x02	; 2
    57f6:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    57f8:	80 81       	ld	r24, Z
    57fa:	81 60       	ori	r24, 0x01	; 1
    57fc:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    57fe:	e0 e9       	ldi	r30, 0x90	; 144
    5800:	f0 e0       	ldi	r31, 0x00	; 0
    5802:	80 81       	ld	r24, Z
    5804:	81 60       	ori	r24, 0x01	; 1
    5806:	80 83       	st	Z, r24
#endif
	
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    5808:	e1 ea       	ldi	r30, 0xA1	; 161
    580a:	f0 e0       	ldi	r31, 0x00	; 0
    580c:	80 81       	ld	r24, Z
    580e:	82 60       	ori	r24, 0x02	; 2
    5810:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    5812:	80 81       	ld	r24, Z
    5814:	81 60       	ori	r24, 0x01	; 1
    5816:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    5818:	e0 ea       	ldi	r30, 0xA0	; 160
    581a:	f0 e0       	ldi	r31, 0x00	; 0
    581c:	80 81       	ld	r24, Z
    581e:	81 60       	ori	r24, 0x01	; 1
    5820:	80 83       	st	Z, r24
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    5822:	e1 e2       	ldi	r30, 0x21	; 33
    5824:	f1 e0       	ldi	r31, 0x01	; 1
    5826:	80 81       	ld	r24, Z
    5828:	82 60       	ori	r24, 0x02	; 2
    582a:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    582c:	80 81       	ld	r24, Z
    582e:	81 60       	ori	r24, 0x01	; 1
    5830:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    5832:	e0 e2       	ldi	r30, 0x20	; 32
    5834:	f1 e0       	ldi	r31, 0x01	; 1
    5836:	80 81       	ld	r24, Z
    5838:	81 60       	ori	r24, 0x01	; 1
    583a:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    583c:	ea e7       	ldi	r30, 0x7A	; 122
    583e:	f0 e0       	ldi	r31, 0x00	; 0
    5840:	80 81       	ld	r24, Z
    5842:	84 60       	ori	r24, 0x04	; 4
    5844:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    5846:	80 81       	ld	r24, Z
    5848:	82 60       	ori	r24, 0x02	; 2
    584a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    584c:	80 81       	ld	r24, Z
    584e:	81 60       	ori	r24, 0x01	; 1
    5850:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5852:	80 81       	ld	r24, Z
    5854:	80 68       	ori	r24, 0x80	; 128
    5856:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5858:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    585c:	08 95       	ret

0000585e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    585e:	89 30       	cpi	r24, 0x09	; 9
    5860:	09 f4       	brne	.+2      	; 0x5864 <turnOffPWM+0x6>
    5862:	49 c0       	rjmp	.+146    	; 0x58f6 <turnOffPWM+0x98>
    5864:	8a 30       	cpi	r24, 0x0A	; 10
    5866:	a0 f4       	brcc	.+40     	; 0x5890 <turnOffPWM+0x32>
    5868:	84 30       	cpi	r24, 0x04	; 4
    586a:	51 f1       	breq	.+84     	; 0x58c0 <turnOffPWM+0x62>
    586c:	85 30       	cpi	r24, 0x05	; 5
    586e:	40 f4       	brcc	.+16     	; 0x5880 <turnOffPWM+0x22>
    5870:	82 30       	cpi	r24, 0x02	; 2
    5872:	79 f1       	breq	.+94     	; 0x58d2 <turnOffPWM+0x74>
    5874:	83 30       	cpi	r24, 0x03	; 3
    5876:	00 f5       	brcc	.+64     	; 0x58b8 <turnOffPWM+0x5a>
    5878:	81 30       	cpi	r24, 0x01	; 1
    587a:	09 f0       	breq	.+2      	; 0x587e <turnOffPWM+0x20>
    587c:	63 c0       	rjmp	.+198    	; 0x5944 <turnOffPWM+0xe6>
    587e:	26 c0       	rjmp	.+76     	; 0x58cc <turnOffPWM+0x6e>
    5880:	87 30       	cpi	r24, 0x07	; 7
    5882:	79 f1       	breq	.+94     	; 0x58e2 <turnOffPWM+0x84>
    5884:	88 30       	cpi	r24, 0x08	; 8
    5886:	98 f5       	brcc	.+102    	; 0x58ee <turnOffPWM+0x90>
    5888:	86 30       	cpi	r24, 0x06	; 6
    588a:	09 f0       	breq	.+2      	; 0x588e <turnOffPWM+0x30>
    588c:	5b c0       	rjmp	.+182    	; 0x5944 <turnOffPWM+0xe6>
    588e:	25 c0       	rjmp	.+74     	; 0x58da <turnOffPWM+0x7c>
    5890:	8d 30       	cpi	r24, 0x0D	; 13
    5892:	09 f4       	brne	.+2      	; 0x5896 <turnOffPWM+0x38>
    5894:	42 c0       	rjmp	.+132    	; 0x591a <turnOffPWM+0xbc>
    5896:	8e 30       	cpi	r24, 0x0E	; 14
    5898:	28 f4       	brcc	.+10     	; 0x58a4 <turnOffPWM+0x46>
    589a:	8b 30       	cpi	r24, 0x0B	; 11
    589c:	b1 f1       	breq	.+108    	; 0x590a <turnOffPWM+0xac>
    589e:	8c 30       	cpi	r24, 0x0C	; 12
    58a0:	c0 f5       	brcc	.+112    	; 0x5912 <turnOffPWM+0xb4>
    58a2:	2d c0       	rjmp	.+90     	; 0x58fe <turnOffPWM+0xa0>
    58a4:	80 31       	cpi	r24, 0x10	; 16
    58a6:	09 f4       	brne	.+2      	; 0x58aa <turnOffPWM+0x4c>
    58a8:	42 c0       	rjmp	.+132    	; 0x592e <turnOffPWM+0xd0>
    58aa:	81 31       	cpi	r24, 0x11	; 17
    58ac:	09 f4       	brne	.+2      	; 0x58b0 <turnOffPWM+0x52>
    58ae:	45 c0       	rjmp	.+138    	; 0x593a <turnOffPWM+0xdc>
    58b0:	8f 30       	cpi	r24, 0x0F	; 15
    58b2:	09 f0       	breq	.+2      	; 0x58b6 <turnOffPWM+0x58>
    58b4:	47 c0       	rjmp	.+142    	; 0x5944 <turnOffPWM+0xe6>
    58b6:	37 c0       	rjmp	.+110    	; 0x5926 <turnOffPWM+0xc8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    58b8:	80 91 80 00 	lds	r24, 0x0080
    58bc:	8f 77       	andi	r24, 0x7F	; 127
    58be:	03 c0       	rjmp	.+6      	; 0x58c6 <turnOffPWM+0x68>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    58c0:	80 91 80 00 	lds	r24, 0x0080
    58c4:	8f 7d       	andi	r24, 0xDF	; 223
    58c6:	80 93 80 00 	sts	0x0080, r24
    58ca:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    58cc:	84 b5       	in	r24, 0x24	; 36
    58ce:	8f 77       	andi	r24, 0x7F	; 127
    58d0:	02 c0       	rjmp	.+4      	; 0x58d6 <turnOffPWM+0x78>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    58d2:	84 b5       	in	r24, 0x24	; 36
    58d4:	8f 7d       	andi	r24, 0xDF	; 223
    58d6:	84 bd       	out	0x24, r24	; 36
    58d8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    58da:	80 91 b0 00 	lds	r24, 0x00B0
    58de:	8f 77       	andi	r24, 0x7F	; 127
    58e0:	03 c0       	rjmp	.+6      	; 0x58e8 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    58e2:	80 91 b0 00 	lds	r24, 0x00B0
    58e6:	8f 7d       	andi	r24, 0xDF	; 223
    58e8:	80 93 b0 00 	sts	0x00B0, r24
    58ec:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    58ee:	80 91 90 00 	lds	r24, 0x0090
    58f2:	8f 77       	andi	r24, 0x7F	; 127
    58f4:	07 c0       	rjmp	.+14     	; 0x5904 <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    58f6:	80 91 90 00 	lds	r24, 0x0090
    58fa:	8f 7d       	andi	r24, 0xDF	; 223
    58fc:	03 c0       	rjmp	.+6      	; 0x5904 <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    58fe:	80 91 90 00 	lds	r24, 0x0090
    5902:	87 7f       	andi	r24, 0xF7	; 247
    5904:	80 93 90 00 	sts	0x0090, r24
    5908:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    590a:	80 91 a0 00 	lds	r24, 0x00A0
    590e:	8f 77       	andi	r24, 0x7F	; 127
    5910:	07 c0       	rjmp	.+14     	; 0x5920 <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    5912:	80 91 a0 00 	lds	r24, 0x00A0
    5916:	8f 7d       	andi	r24, 0xDF	; 223
    5918:	03 c0       	rjmp	.+6      	; 0x5920 <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    591a:	80 91 a0 00 	lds	r24, 0x00A0
    591e:	87 7f       	andi	r24, 0xF7	; 247
    5920:	80 93 a0 00 	sts	0x00A0, r24
    5924:	08 95       	ret
		#endif
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    5926:	80 91 20 01 	lds	r24, 0x0120
    592a:	8f 77       	andi	r24, 0x7F	; 127
    592c:	03 c0       	rjmp	.+6      	; 0x5934 <turnOffPWM+0xd6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    592e:	80 91 20 01 	lds	r24, 0x0120
    5932:	8f 7d       	andi	r24, 0xDF	; 223
    5934:	80 93 20 01 	sts	0x0120, r24
    5938:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    593a:	80 91 20 01 	lds	r24, 0x0120
    593e:	87 7f       	andi	r24, 0xF7	; 247
    5940:	80 93 20 01 	sts	0x0120, r24
    5944:	08 95       	ret

00005946 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    5946:	90 e0       	ldi	r25, 0x00	; 0
    5948:	fc 01       	movw	r30, r24
    594a:	ed 53       	subi	r30, 0x3D	; 61
    594c:	fe 4f       	sbci	r31, 0xFE	; 254
    594e:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    5950:	fc 01       	movw	r30, r24
    5952:	e3 58       	subi	r30, 0x83	; 131
    5954:	fe 4f       	sbci	r31, 0xFE	; 254
    5956:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    5958:	ee 23       	and	r30, r30
    595a:	c1 f0       	breq	.+48     	; 0x598c <pinMode+0x46>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    595c:	f0 e0       	ldi	r31, 0x00	; 0
    595e:	ee 0f       	add	r30, r30
    5960:	ff 1f       	adc	r31, r31
    5962:	e1 5d       	subi	r30, 0xD1	; 209
    5964:	fe 4f       	sbci	r31, 0xFE	; 254
    5966:	85 91       	lpm	r24, Z+
    5968:	94 91       	lpm	r25, Z+
    596a:	dc 01       	movw	r26, r24

	if (mode == INPUT) { 
    596c:	66 23       	and	r22, r22
    596e:	41 f4       	brne	.+16     	; 0x5980 <pinMode+0x3a>
		uint8_t oldSREG = SREG;
    5970:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5972:	f8 94       	cli
		*reg &= ~bit;
    5974:	8c 91       	ld	r24, X
    5976:	20 95       	com	r18
    5978:	82 23       	and	r24, r18
    597a:	8c 93       	st	X, r24
		SREG = oldSREG;
    597c:	9f bf       	out	0x3f, r25	; 63
    597e:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    5980:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5982:	f8 94       	cli
		*reg |= bit;
    5984:	8c 91       	ld	r24, X
    5986:	82 2b       	or	r24, r18
    5988:	8c 93       	st	X, r24
		SREG = oldSREG;
    598a:	9f bf       	out	0x3f, r25	; 63
    598c:	08 95       	ret

0000598e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    598e:	0f 93       	push	r16
    5990:	1f 93       	push	r17
    5992:	df 93       	push	r29
    5994:	cf 93       	push	r28
    5996:	0f 92       	push	r0
    5998:	cd b7       	in	r28, 0x3d	; 61
    599a:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    599c:	28 2f       	mov	r18, r24
    599e:	30 e0       	ldi	r19, 0x00	; 0
    59a0:	f9 01       	movw	r30, r18
    59a2:	e7 5f       	subi	r30, 0xF7	; 247
    59a4:	fd 4f       	sbci	r31, 0xFD	; 253
    59a6:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    59a8:	f9 01       	movw	r30, r18
    59aa:	ed 53       	subi	r30, 0x3D	; 61
    59ac:	fe 4f       	sbci	r31, 0xFE	; 254
    59ae:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    59b0:	23 58       	subi	r18, 0x83	; 131
    59b2:	3e 4f       	sbci	r19, 0xFE	; 254
    59b4:	f9 01       	movw	r30, r18
    59b6:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    59b8:	00 23       	and	r16, r16
    59ba:	d9 f0       	breq	.+54     	; 0x59f2 <digitalWrite+0x64>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    59bc:	88 23       	and	r24, r24
    59be:	21 f0       	breq	.+8      	; 0x59c8 <digitalWrite+0x3a>
    59c0:	69 83       	std	Y+1, r22	; 0x01
    59c2:	0e 94 2f 2c 	call	0x585e	; 0x585e <turnOffPWM>
    59c6:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    59c8:	e0 2f       	mov	r30, r16
    59ca:	f0 e0       	ldi	r31, 0x00	; 0
    59cc:	ee 0f       	add	r30, r30
    59ce:	ff 1f       	adc	r31, r31
    59d0:	e7 5b       	subi	r30, 0xB7	; 183
    59d2:	fe 4f       	sbci	r31, 0xFE	; 254
    59d4:	85 91       	lpm	r24, Z+
    59d6:	94 91       	lpm	r25, Z+
    59d8:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    59da:	9f b7       	in	r25, 0x3f	; 63
	cli();
    59dc:	f8 94       	cli

	if (val == LOW) {
    59de:	66 23       	and	r22, r22
    59e0:	21 f4       	brne	.+8      	; 0x59ea <digitalWrite+0x5c>
		*out &= ~bit;
    59e2:	8c 91       	ld	r24, X
    59e4:	10 95       	com	r17
    59e6:	81 23       	and	r24, r17
    59e8:	02 c0       	rjmp	.+4      	; 0x59ee <digitalWrite+0x60>
	} else {
		*out |= bit;
    59ea:	8c 91       	ld	r24, X
    59ec:	81 2b       	or	r24, r17
    59ee:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    59f0:	9f bf       	out	0x3f, r25	; 63
}
    59f2:	0f 90       	pop	r0
    59f4:	cf 91       	pop	r28
    59f6:	df 91       	pop	r29
    59f8:	1f 91       	pop	r17
    59fa:	0f 91       	pop	r16
    59fc:	08 95       	ret

000059fe <__subsf3>:
    59fe:	50 58       	subi	r21, 0x80	; 128

00005a00 <__addsf3>:
    5a00:	bb 27       	eor	r27, r27
    5a02:	aa 27       	eor	r26, r26
    5a04:	0e d0       	rcall	.+28     	; 0x5a22 <__addsf3x>
    5a06:	b1 c2       	rjmp	.+1378   	; 0x5f6a <__fp_round>
    5a08:	7a d2       	rcall	.+1268   	; 0x5efe <__fp_pscA>
    5a0a:	30 f0       	brcs	.+12     	; 0x5a18 <__addsf3+0x18>
    5a0c:	7f d2       	rcall	.+1278   	; 0x5f0c <__fp_pscB>
    5a0e:	20 f0       	brcs	.+8      	; 0x5a18 <__addsf3+0x18>
    5a10:	31 f4       	brne	.+12     	; 0x5a1e <__addsf3+0x1e>
    5a12:	9f 3f       	cpi	r25, 0xFF	; 255
    5a14:	11 f4       	brne	.+4      	; 0x5a1a <__addsf3+0x1a>
    5a16:	1e f4       	brtc	.+6      	; 0x5a1e <__addsf3+0x1e>
    5a18:	4a c2       	rjmp	.+1172   	; 0x5eae <__fp_nan>
    5a1a:	0e f4       	brtc	.+2      	; 0x5a1e <__addsf3+0x1e>
    5a1c:	e0 95       	com	r30
    5a1e:	e7 fb       	bst	r30, 7
    5a20:	17 c2       	rjmp	.+1070   	; 0x5e50 <__fp_inf>

00005a22 <__addsf3x>:
    5a22:	e9 2f       	mov	r30, r25
    5a24:	c4 d2       	rcall	.+1416   	; 0x5fae <__fp_split3>
    5a26:	80 f3       	brcs	.-32     	; 0x5a08 <__addsf3+0x8>
    5a28:	ba 17       	cp	r27, r26
    5a2a:	62 07       	cpc	r22, r18
    5a2c:	73 07       	cpc	r23, r19
    5a2e:	84 07       	cpc	r24, r20
    5a30:	95 07       	cpc	r25, r21
    5a32:	18 f0       	brcs	.+6      	; 0x5a3a <__addsf3x+0x18>
    5a34:	71 f4       	brne	.+28     	; 0x5a52 <__addsf3x+0x30>
    5a36:	9e f5       	brtc	.+102    	; 0x5a9e <__addsf3x+0x7c>
    5a38:	f3 c2       	rjmp	.+1510   	; 0x6020 <__fp_zero>
    5a3a:	0e f4       	brtc	.+2      	; 0x5a3e <__addsf3x+0x1c>
    5a3c:	e0 95       	com	r30
    5a3e:	0b 2e       	mov	r0, r27
    5a40:	ba 2f       	mov	r27, r26
    5a42:	a0 2d       	mov	r26, r0
    5a44:	0b 01       	movw	r0, r22
    5a46:	b9 01       	movw	r22, r18
    5a48:	90 01       	movw	r18, r0
    5a4a:	0c 01       	movw	r0, r24
    5a4c:	ca 01       	movw	r24, r20
    5a4e:	a0 01       	movw	r20, r0
    5a50:	11 24       	eor	r1, r1
    5a52:	ff 27       	eor	r31, r31
    5a54:	59 1b       	sub	r21, r25
    5a56:	99 f0       	breq	.+38     	; 0x5a7e <__addsf3x+0x5c>
    5a58:	59 3f       	cpi	r21, 0xF9	; 249
    5a5a:	50 f4       	brcc	.+20     	; 0x5a70 <__addsf3x+0x4e>
    5a5c:	50 3e       	cpi	r21, 0xE0	; 224
    5a5e:	68 f1       	brcs	.+90     	; 0x5aba <__addsf3x+0x98>
    5a60:	1a 16       	cp	r1, r26
    5a62:	f0 40       	sbci	r31, 0x00	; 0
    5a64:	a2 2f       	mov	r26, r18
    5a66:	23 2f       	mov	r18, r19
    5a68:	34 2f       	mov	r19, r20
    5a6a:	44 27       	eor	r20, r20
    5a6c:	58 5f       	subi	r21, 0xF8	; 248
    5a6e:	f3 cf       	rjmp	.-26     	; 0x5a56 <__addsf3x+0x34>
    5a70:	46 95       	lsr	r20
    5a72:	37 95       	ror	r19
    5a74:	27 95       	ror	r18
    5a76:	a7 95       	ror	r26
    5a78:	f0 40       	sbci	r31, 0x00	; 0
    5a7a:	53 95       	inc	r21
    5a7c:	c9 f7       	brne	.-14     	; 0x5a70 <__addsf3x+0x4e>
    5a7e:	7e f4       	brtc	.+30     	; 0x5a9e <__addsf3x+0x7c>
    5a80:	1f 16       	cp	r1, r31
    5a82:	ba 0b       	sbc	r27, r26
    5a84:	62 0b       	sbc	r22, r18
    5a86:	73 0b       	sbc	r23, r19
    5a88:	84 0b       	sbc	r24, r20
    5a8a:	ba f0       	brmi	.+46     	; 0x5aba <__addsf3x+0x98>
    5a8c:	91 50       	subi	r25, 0x01	; 1
    5a8e:	a1 f0       	breq	.+40     	; 0x5ab8 <__addsf3x+0x96>
    5a90:	ff 0f       	add	r31, r31
    5a92:	bb 1f       	adc	r27, r27
    5a94:	66 1f       	adc	r22, r22
    5a96:	77 1f       	adc	r23, r23
    5a98:	88 1f       	adc	r24, r24
    5a9a:	c2 f7       	brpl	.-16     	; 0x5a8c <__addsf3x+0x6a>
    5a9c:	0e c0       	rjmp	.+28     	; 0x5aba <__addsf3x+0x98>
    5a9e:	ba 0f       	add	r27, r26
    5aa0:	62 1f       	adc	r22, r18
    5aa2:	73 1f       	adc	r23, r19
    5aa4:	84 1f       	adc	r24, r20
    5aa6:	48 f4       	brcc	.+18     	; 0x5aba <__addsf3x+0x98>
    5aa8:	87 95       	ror	r24
    5aaa:	77 95       	ror	r23
    5aac:	67 95       	ror	r22
    5aae:	b7 95       	ror	r27
    5ab0:	f7 95       	ror	r31
    5ab2:	9e 3f       	cpi	r25, 0xFE	; 254
    5ab4:	08 f0       	brcs	.+2      	; 0x5ab8 <__addsf3x+0x96>
    5ab6:	b3 cf       	rjmp	.-154    	; 0x5a1e <__addsf3+0x1e>
    5ab8:	93 95       	inc	r25
    5aba:	88 0f       	add	r24, r24
    5abc:	08 f0       	brcs	.+2      	; 0x5ac0 <__addsf3x+0x9e>
    5abe:	99 27       	eor	r25, r25
    5ac0:	ee 0f       	add	r30, r30
    5ac2:	97 95       	ror	r25
    5ac4:	87 95       	ror	r24
    5ac6:	08 95       	ret
    5ac8:	1a d2       	rcall	.+1076   	; 0x5efe <__fp_pscA>
    5aca:	58 f0       	brcs	.+22     	; 0x5ae2 <__addsf3x+0xc0>
    5acc:	80 e8       	ldi	r24, 0x80	; 128
    5ace:	91 e0       	ldi	r25, 0x01	; 1
    5ad0:	09 f4       	brne	.+2      	; 0x5ad4 <__addsf3x+0xb2>
    5ad2:	9e ef       	ldi	r25, 0xFE	; 254
    5ad4:	1b d2       	rcall	.+1078   	; 0x5f0c <__fp_pscB>
    5ad6:	28 f0       	brcs	.+10     	; 0x5ae2 <__addsf3x+0xc0>
    5ad8:	40 e8       	ldi	r20, 0x80	; 128
    5ada:	51 e0       	ldi	r21, 0x01	; 1
    5adc:	59 f4       	brne	.+22     	; 0x5af4 <atan2+0xe>
    5ade:	5e ef       	ldi	r21, 0xFE	; 254
    5ae0:	09 c0       	rjmp	.+18     	; 0x5af4 <atan2+0xe>
    5ae2:	e5 c1       	rjmp	.+970    	; 0x5eae <__fp_nan>
    5ae4:	9d c2       	rjmp	.+1338   	; 0x6020 <__fp_zero>

00005ae6 <atan2>:
    5ae6:	e9 2f       	mov	r30, r25
    5ae8:	e0 78       	andi	r30, 0x80	; 128
    5aea:	61 d2       	rcall	.+1218   	; 0x5fae <__fp_split3>
    5aec:	68 f3       	brcs	.-38     	; 0x5ac8 <__addsf3x+0xa6>
    5aee:	09 2e       	mov	r0, r25
    5af0:	05 2a       	or	r0, r21
    5af2:	c1 f3       	breq	.-16     	; 0x5ae4 <__addsf3x+0xc2>
    5af4:	26 17       	cp	r18, r22
    5af6:	37 07       	cpc	r19, r23
    5af8:	48 07       	cpc	r20, r24
    5afa:	59 07       	cpc	r21, r25
    5afc:	38 f0       	brcs	.+14     	; 0x5b0c <atan2+0x26>
    5afe:	0e 2e       	mov	r0, r30
    5b00:	07 f8       	bld	r0, 7
    5b02:	e0 25       	eor	r30, r0
    5b04:	69 f0       	breq	.+26     	; 0x5b20 <atan2+0x3a>
    5b06:	e0 25       	eor	r30, r0
    5b08:	e0 64       	ori	r30, 0x40	; 64
    5b0a:	0a c0       	rjmp	.+20     	; 0x5b20 <atan2+0x3a>
    5b0c:	ef 63       	ori	r30, 0x3F	; 63
    5b0e:	07 f8       	bld	r0, 7
    5b10:	00 94       	com	r0
    5b12:	07 fa       	bst	r0, 7
    5b14:	db 01       	movw	r26, r22
    5b16:	b9 01       	movw	r22, r18
    5b18:	9d 01       	movw	r18, r26
    5b1a:	dc 01       	movw	r26, r24
    5b1c:	ca 01       	movw	r24, r20
    5b1e:	ad 01       	movw	r20, r26
    5b20:	ef 93       	push	r30
    5b22:	4a d0       	rcall	.+148    	; 0x5bb8 <__divsf3_pse>
    5b24:	22 d2       	rcall	.+1092   	; 0x5f6a <__fp_round>
    5b26:	0a d0       	rcall	.+20     	; 0x5b3c <atan>
    5b28:	5f 91       	pop	r21
    5b2a:	55 23       	and	r21, r21
    5b2c:	31 f0       	breq	.+12     	; 0x5b3a <atan2+0x54>
    5b2e:	2b ed       	ldi	r18, 0xDB	; 219
    5b30:	3f e0       	ldi	r19, 0x0F	; 15
    5b32:	49 e4       	ldi	r20, 0x49	; 73
    5b34:	50 fd       	sbrc	r21, 0
    5b36:	49 ec       	ldi	r20, 0xC9	; 201
    5b38:	63 cf       	rjmp	.-314    	; 0x5a00 <__addsf3>
    5b3a:	08 95       	ret

00005b3c <atan>:
    5b3c:	df 93       	push	r29
    5b3e:	dd 27       	eor	r29, r29
    5b40:	b9 2f       	mov	r27, r25
    5b42:	bf 77       	andi	r27, 0x7F	; 127
    5b44:	40 e8       	ldi	r20, 0x80	; 128
    5b46:	5f e3       	ldi	r21, 0x3F	; 63
    5b48:	16 16       	cp	r1, r22
    5b4a:	17 06       	cpc	r1, r23
    5b4c:	48 07       	cpc	r20, r24
    5b4e:	5b 07       	cpc	r21, r27
    5b50:	10 f4       	brcc	.+4      	; 0x5b56 <atan+0x1a>
    5b52:	d9 2f       	mov	r29, r25
    5b54:	70 d2       	rcall	.+1248   	; 0x6036 <inverse>
    5b56:	9f 93       	push	r25
    5b58:	8f 93       	push	r24
    5b5a:	7f 93       	push	r23
    5b5c:	6f 93       	push	r22
    5b5e:	1d d3       	rcall	.+1594   	; 0x619a <square>
    5b60:	e4 ee       	ldi	r30, 0xE4	; 228
    5b62:	f0 e0       	ldi	r31, 0x00	; 0
    5b64:	a7 d1       	rcall	.+846    	; 0x5eb4 <__fp_powser>
    5b66:	01 d2       	rcall	.+1026   	; 0x5f6a <__fp_round>
    5b68:	2f 91       	pop	r18
    5b6a:	3f 91       	pop	r19
    5b6c:	4f 91       	pop	r20
    5b6e:	5f 91       	pop	r21
    5b70:	75 d2       	rcall	.+1258   	; 0x605c <__mulsf3x>
    5b72:	dd 23       	and	r29, r29
    5b74:	49 f0       	breq	.+18     	; 0x5b88 <atan+0x4c>
    5b76:	90 58       	subi	r25, 0x80	; 128
    5b78:	a2 ea       	ldi	r26, 0xA2	; 162
    5b7a:	2a ed       	ldi	r18, 0xDA	; 218
    5b7c:	3f e0       	ldi	r19, 0x0F	; 15
    5b7e:	49 ec       	ldi	r20, 0xC9	; 201
    5b80:	5f e3       	ldi	r21, 0x3F	; 63
    5b82:	d0 78       	andi	r29, 0x80	; 128
    5b84:	5d 27       	eor	r21, r29
    5b86:	4d df       	rcall	.-358    	; 0x5a22 <__addsf3x>
    5b88:	df 91       	pop	r29
    5b8a:	ef c1       	rjmp	.+990    	; 0x5f6a <__fp_round>

00005b8c <__cmpsf2>:
    5b8c:	3d d1       	rcall	.+634    	; 0x5e08 <__fp_cmp>
    5b8e:	08 f4       	brcc	.+2      	; 0x5b92 <__cmpsf2+0x6>
    5b90:	81 e0       	ldi	r24, 0x01	; 1
    5b92:	08 95       	ret

00005b94 <cos>:
    5b94:	c3 d1       	rcall	.+902    	; 0x5f1c <__fp_rempio2>
    5b96:	e3 95       	inc	r30
    5b98:	f9 c1       	rjmp	.+1010   	; 0x5f8c <__fp_sinus>

00005b9a <__divsf3>:
    5b9a:	0c d0       	rcall	.+24     	; 0x5bb4 <__divsf3x>
    5b9c:	e6 c1       	rjmp	.+972    	; 0x5f6a <__fp_round>
    5b9e:	b6 d1       	rcall	.+876    	; 0x5f0c <__fp_pscB>
    5ba0:	40 f0       	brcs	.+16     	; 0x5bb2 <__divsf3+0x18>
    5ba2:	ad d1       	rcall	.+858    	; 0x5efe <__fp_pscA>
    5ba4:	30 f0       	brcs	.+12     	; 0x5bb2 <__divsf3+0x18>
    5ba6:	21 f4       	brne	.+8      	; 0x5bb0 <__divsf3+0x16>
    5ba8:	5f 3f       	cpi	r21, 0xFF	; 255
    5baa:	19 f0       	breq	.+6      	; 0x5bb2 <__divsf3+0x18>
    5bac:	51 c1       	rjmp	.+674    	; 0x5e50 <__fp_inf>
    5bae:	51 11       	cpse	r21, r1
    5bb0:	38 c2       	rjmp	.+1136   	; 0x6022 <__fp_szero>
    5bb2:	7d c1       	rjmp	.+762    	; 0x5eae <__fp_nan>

00005bb4 <__divsf3x>:
    5bb4:	fc d1       	rcall	.+1016   	; 0x5fae <__fp_split3>
    5bb6:	98 f3       	brcs	.-26     	; 0x5b9e <__divsf3+0x4>

00005bb8 <__divsf3_pse>:
    5bb8:	99 23       	and	r25, r25
    5bba:	c9 f3       	breq	.-14     	; 0x5bae <__divsf3+0x14>
    5bbc:	55 23       	and	r21, r21
    5bbe:	b1 f3       	breq	.-20     	; 0x5bac <__divsf3+0x12>
    5bc0:	95 1b       	sub	r25, r21
    5bc2:	55 0b       	sbc	r21, r21
    5bc4:	bb 27       	eor	r27, r27
    5bc6:	aa 27       	eor	r26, r26
    5bc8:	62 17       	cp	r22, r18
    5bca:	73 07       	cpc	r23, r19
    5bcc:	84 07       	cpc	r24, r20
    5bce:	38 f0       	brcs	.+14     	; 0x5bde <__divsf3_pse+0x26>
    5bd0:	9f 5f       	subi	r25, 0xFF	; 255
    5bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    5bd4:	22 0f       	add	r18, r18
    5bd6:	33 1f       	adc	r19, r19
    5bd8:	44 1f       	adc	r20, r20
    5bda:	aa 1f       	adc	r26, r26
    5bdc:	a9 f3       	breq	.-22     	; 0x5bc8 <__divsf3_pse+0x10>
    5bde:	33 d0       	rcall	.+102    	; 0x5c46 <__divsf3_pse+0x8e>
    5be0:	0e 2e       	mov	r0, r30
    5be2:	3a f0       	brmi	.+14     	; 0x5bf2 <__divsf3_pse+0x3a>
    5be4:	e0 e8       	ldi	r30, 0x80	; 128
    5be6:	30 d0       	rcall	.+96     	; 0x5c48 <__divsf3_pse+0x90>
    5be8:	91 50       	subi	r25, 0x01	; 1
    5bea:	50 40       	sbci	r21, 0x00	; 0
    5bec:	e6 95       	lsr	r30
    5bee:	00 1c       	adc	r0, r0
    5bf0:	ca f7       	brpl	.-14     	; 0x5be4 <__divsf3_pse+0x2c>
    5bf2:	29 d0       	rcall	.+82     	; 0x5c46 <__divsf3_pse+0x8e>
    5bf4:	fe 2f       	mov	r31, r30
    5bf6:	27 d0       	rcall	.+78     	; 0x5c46 <__divsf3_pse+0x8e>
    5bf8:	66 0f       	add	r22, r22
    5bfa:	77 1f       	adc	r23, r23
    5bfc:	88 1f       	adc	r24, r24
    5bfe:	bb 1f       	adc	r27, r27
    5c00:	26 17       	cp	r18, r22
    5c02:	37 07       	cpc	r19, r23
    5c04:	48 07       	cpc	r20, r24
    5c06:	ab 07       	cpc	r26, r27
    5c08:	b0 e8       	ldi	r27, 0x80	; 128
    5c0a:	09 f0       	breq	.+2      	; 0x5c0e <__divsf3_pse+0x56>
    5c0c:	bb 0b       	sbc	r27, r27
    5c0e:	80 2d       	mov	r24, r0
    5c10:	bf 01       	movw	r22, r30
    5c12:	ff 27       	eor	r31, r31
    5c14:	93 58       	subi	r25, 0x83	; 131
    5c16:	5f 4f       	sbci	r21, 0xFF	; 255
    5c18:	2a f0       	brmi	.+10     	; 0x5c24 <__divsf3_pse+0x6c>
    5c1a:	9e 3f       	cpi	r25, 0xFE	; 254
    5c1c:	51 05       	cpc	r21, r1
    5c1e:	68 f0       	brcs	.+26     	; 0x5c3a <__divsf3_pse+0x82>
    5c20:	17 c1       	rjmp	.+558    	; 0x5e50 <__fp_inf>
    5c22:	ff c1       	rjmp	.+1022   	; 0x6022 <__fp_szero>
    5c24:	5f 3f       	cpi	r21, 0xFF	; 255
    5c26:	ec f3       	brlt	.-6      	; 0x5c22 <__divsf3_pse+0x6a>
    5c28:	98 3e       	cpi	r25, 0xE8	; 232
    5c2a:	dc f3       	brlt	.-10     	; 0x5c22 <__divsf3_pse+0x6a>
    5c2c:	86 95       	lsr	r24
    5c2e:	77 95       	ror	r23
    5c30:	67 95       	ror	r22
    5c32:	b7 95       	ror	r27
    5c34:	f7 95       	ror	r31
    5c36:	9f 5f       	subi	r25, 0xFF	; 255
    5c38:	c9 f7       	brne	.-14     	; 0x5c2c <__divsf3_pse+0x74>
    5c3a:	88 0f       	add	r24, r24
    5c3c:	91 1d       	adc	r25, r1
    5c3e:	96 95       	lsr	r25
    5c40:	87 95       	ror	r24
    5c42:	97 f9       	bld	r25, 7
    5c44:	08 95       	ret
    5c46:	e1 e0       	ldi	r30, 0x01	; 1
    5c48:	66 0f       	add	r22, r22
    5c4a:	77 1f       	adc	r23, r23
    5c4c:	88 1f       	adc	r24, r24
    5c4e:	bb 1f       	adc	r27, r27
    5c50:	62 17       	cp	r22, r18
    5c52:	73 07       	cpc	r23, r19
    5c54:	84 07       	cpc	r24, r20
    5c56:	ba 07       	cpc	r27, r26
    5c58:	20 f0       	brcs	.+8      	; 0x5c62 <__divsf3_pse+0xaa>
    5c5a:	62 1b       	sub	r22, r18
    5c5c:	73 0b       	sbc	r23, r19
    5c5e:	84 0b       	sbc	r24, r20
    5c60:	ba 0b       	sbc	r27, r26
    5c62:	ee 1f       	adc	r30, r30
    5c64:	88 f7       	brcc	.-30     	; 0x5c48 <__divsf3_pse+0x90>
    5c66:	e0 95       	com	r30
    5c68:	08 95       	ret

00005c6a <__fixsfsi>:
    5c6a:	04 d0       	rcall	.+8      	; 0x5c74 <__fixunssfsi>
    5c6c:	68 94       	set
    5c6e:	b1 11       	cpse	r27, r1
    5c70:	d8 c1       	rjmp	.+944    	; 0x6022 <__fp_szero>
    5c72:	08 95       	ret

00005c74 <__fixunssfsi>:
    5c74:	a4 d1       	rcall	.+840    	; 0x5fbe <__fp_splitA>
    5c76:	88 f0       	brcs	.+34     	; 0x5c9a <__fixunssfsi+0x26>
    5c78:	9f 57       	subi	r25, 0x7F	; 127
    5c7a:	90 f0       	brcs	.+36     	; 0x5ca0 <__fixunssfsi+0x2c>
    5c7c:	b9 2f       	mov	r27, r25
    5c7e:	99 27       	eor	r25, r25
    5c80:	b7 51       	subi	r27, 0x17	; 23
    5c82:	a0 f0       	brcs	.+40     	; 0x5cac <__fixunssfsi+0x38>
    5c84:	d1 f0       	breq	.+52     	; 0x5cba <__fixunssfsi+0x46>
    5c86:	66 0f       	add	r22, r22
    5c88:	77 1f       	adc	r23, r23
    5c8a:	88 1f       	adc	r24, r24
    5c8c:	99 1f       	adc	r25, r25
    5c8e:	1a f0       	brmi	.+6      	; 0x5c96 <__fixunssfsi+0x22>
    5c90:	ba 95       	dec	r27
    5c92:	c9 f7       	brne	.-14     	; 0x5c86 <__fixunssfsi+0x12>
    5c94:	12 c0       	rjmp	.+36     	; 0x5cba <__fixunssfsi+0x46>
    5c96:	b1 30       	cpi	r27, 0x01	; 1
    5c98:	81 f0       	breq	.+32     	; 0x5cba <__fixunssfsi+0x46>
    5c9a:	c2 d1       	rcall	.+900    	; 0x6020 <__fp_zero>
    5c9c:	b1 e0       	ldi	r27, 0x01	; 1
    5c9e:	08 95       	ret
    5ca0:	bf c1       	rjmp	.+894    	; 0x6020 <__fp_zero>
    5ca2:	67 2f       	mov	r22, r23
    5ca4:	78 2f       	mov	r23, r24
    5ca6:	88 27       	eor	r24, r24
    5ca8:	b8 5f       	subi	r27, 0xF8	; 248
    5caa:	39 f0       	breq	.+14     	; 0x5cba <__fixunssfsi+0x46>
    5cac:	b9 3f       	cpi	r27, 0xF9	; 249
    5cae:	cc f3       	brlt	.-14     	; 0x5ca2 <__fixunssfsi+0x2e>
    5cb0:	86 95       	lsr	r24
    5cb2:	77 95       	ror	r23
    5cb4:	67 95       	ror	r22
    5cb6:	b3 95       	inc	r27
    5cb8:	d9 f7       	brne	.-10     	; 0x5cb0 <__fixunssfsi+0x3c>
    5cba:	3e f4       	brtc	.+14     	; 0x5cca <__fixunssfsi+0x56>
    5cbc:	90 95       	com	r25
    5cbe:	80 95       	com	r24
    5cc0:	70 95       	com	r23
    5cc2:	61 95       	neg	r22
    5cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    5cc6:	8f 4f       	sbci	r24, 0xFF	; 255
    5cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    5cca:	08 95       	ret

00005ccc <__floatunsisf>:
    5ccc:	e8 94       	clt
    5cce:	09 c0       	rjmp	.+18     	; 0x5ce2 <__floatsisf+0x12>

00005cd0 <__floatsisf>:
    5cd0:	97 fb       	bst	r25, 7
    5cd2:	3e f4       	brtc	.+14     	; 0x5ce2 <__floatsisf+0x12>
    5cd4:	90 95       	com	r25
    5cd6:	80 95       	com	r24
    5cd8:	70 95       	com	r23
    5cda:	61 95       	neg	r22
    5cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    5cde:	8f 4f       	sbci	r24, 0xFF	; 255
    5ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce2:	99 23       	and	r25, r25
    5ce4:	a9 f0       	breq	.+42     	; 0x5d10 <__floatsisf+0x40>
    5ce6:	f9 2f       	mov	r31, r25
    5ce8:	96 e9       	ldi	r25, 0x96	; 150
    5cea:	bb 27       	eor	r27, r27
    5cec:	93 95       	inc	r25
    5cee:	f6 95       	lsr	r31
    5cf0:	87 95       	ror	r24
    5cf2:	77 95       	ror	r23
    5cf4:	67 95       	ror	r22
    5cf6:	b7 95       	ror	r27
    5cf8:	f1 11       	cpse	r31, r1
    5cfa:	f8 cf       	rjmp	.-16     	; 0x5cec <__floatsisf+0x1c>
    5cfc:	fa f4       	brpl	.+62     	; 0x5d3c <__floatsisf+0x6c>
    5cfe:	bb 0f       	add	r27, r27
    5d00:	11 f4       	brne	.+4      	; 0x5d06 <__floatsisf+0x36>
    5d02:	60 ff       	sbrs	r22, 0
    5d04:	1b c0       	rjmp	.+54     	; 0x5d3c <__floatsisf+0x6c>
    5d06:	6f 5f       	subi	r22, 0xFF	; 255
    5d08:	7f 4f       	sbci	r23, 0xFF	; 255
    5d0a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d0e:	16 c0       	rjmp	.+44     	; 0x5d3c <__floatsisf+0x6c>
    5d10:	88 23       	and	r24, r24
    5d12:	11 f0       	breq	.+4      	; 0x5d18 <__floatsisf+0x48>
    5d14:	96 e9       	ldi	r25, 0x96	; 150
    5d16:	11 c0       	rjmp	.+34     	; 0x5d3a <__floatsisf+0x6a>
    5d18:	77 23       	and	r23, r23
    5d1a:	21 f0       	breq	.+8      	; 0x5d24 <__floatsisf+0x54>
    5d1c:	9e e8       	ldi	r25, 0x8E	; 142
    5d1e:	87 2f       	mov	r24, r23
    5d20:	76 2f       	mov	r23, r22
    5d22:	05 c0       	rjmp	.+10     	; 0x5d2e <__floatsisf+0x5e>
    5d24:	66 23       	and	r22, r22
    5d26:	71 f0       	breq	.+28     	; 0x5d44 <__floatsisf+0x74>
    5d28:	96 e8       	ldi	r25, 0x86	; 134
    5d2a:	86 2f       	mov	r24, r22
    5d2c:	70 e0       	ldi	r23, 0x00	; 0
    5d2e:	60 e0       	ldi	r22, 0x00	; 0
    5d30:	2a f0       	brmi	.+10     	; 0x5d3c <__floatsisf+0x6c>
    5d32:	9a 95       	dec	r25
    5d34:	66 0f       	add	r22, r22
    5d36:	77 1f       	adc	r23, r23
    5d38:	88 1f       	adc	r24, r24
    5d3a:	da f7       	brpl	.-10     	; 0x5d32 <__floatsisf+0x62>
    5d3c:	88 0f       	add	r24, r24
    5d3e:	96 95       	lsr	r25
    5d40:	87 95       	ror	r24
    5d42:	97 f9       	bld	r25, 7
    5d44:	08 95       	ret

00005d46 <floor>:
    5d46:	55 d1       	rcall	.+682    	; 0x5ff2 <__fp_trunc>
    5d48:	80 f0       	brcs	.+32     	; 0x5d6a <floor+0x24>
    5d4a:	9f 37       	cpi	r25, 0x7F	; 127
    5d4c:	40 f4       	brcc	.+16     	; 0x5d5e <floor+0x18>
    5d4e:	91 11       	cpse	r25, r1
    5d50:	0e f0       	brts	.+2      	; 0x5d54 <floor+0xe>
    5d52:	67 c1       	rjmp	.+718    	; 0x6022 <__fp_szero>
    5d54:	60 e0       	ldi	r22, 0x00	; 0
    5d56:	70 e0       	ldi	r23, 0x00	; 0
    5d58:	80 e8       	ldi	r24, 0x80	; 128
    5d5a:	9f eb       	ldi	r25, 0xBF	; 191
    5d5c:	08 95       	ret
    5d5e:	26 f4       	brtc	.+8      	; 0x5d68 <floor+0x22>
    5d60:	1b 16       	cp	r1, r27
    5d62:	61 1d       	adc	r22, r1
    5d64:	71 1d       	adc	r23, r1
    5d66:	81 1d       	adc	r24, r1
    5d68:	79 c0       	rjmp	.+242    	; 0x5e5c <__fp_mintl>
    5d6a:	93 c0       	rjmp	.+294    	; 0x5e92 <__fp_mpack>
    5d6c:	c8 d0       	rcall	.+400    	; 0x5efe <__fp_pscA>
    5d6e:	18 f0       	brcs	.+6      	; 0x5d76 <floor+0x30>
    5d70:	11 f0       	breq	.+4      	; 0x5d76 <floor+0x30>
    5d72:	cc d0       	rcall	.+408    	; 0x5f0c <__fp_pscB>
    5d74:	38 f4       	brcc	.+14     	; 0x5d84 <fmod+0xa>
    5d76:	9b c0       	rjmp	.+310    	; 0x5eae <__fp_nan>
    5d78:	54 c1       	rjmp	.+680    	; 0x6022 <__fp_szero>

00005d7a <fmod>:
    5d7a:	e9 2f       	mov	r30, r25
    5d7c:	18 d1       	rcall	.+560    	; 0x5fae <__fp_split3>
    5d7e:	b0 f3       	brcs	.-20     	; 0x5d6c <floor+0x26>
    5d80:	55 23       	and	r21, r21
    5d82:	c9 f3       	breq	.-14     	; 0x5d76 <floor+0x30>
    5d84:	e7 fb       	bst	r30, 7
    5d86:	62 17       	cp	r22, r18
    5d88:	73 07       	cpc	r23, r19
    5d8a:	84 07       	cpc	r24, r20
    5d8c:	95 07       	cpc	r25, r21
    5d8e:	a8 f1       	brcs	.+106    	; 0x5dfa <fmod+0x80>
    5d90:	99 f3       	breq	.-26     	; 0x5d78 <floor+0x32>
    5d92:	e9 2f       	mov	r30, r25
    5d94:	ff 27       	eor	r31, r31
    5d96:	88 23       	and	r24, r24
    5d98:	2a f0       	brmi	.+10     	; 0x5da4 <fmod+0x2a>
    5d9a:	31 97       	sbiw	r30, 0x01	; 1
    5d9c:	66 0f       	add	r22, r22
    5d9e:	77 1f       	adc	r23, r23
    5da0:	88 1f       	adc	r24, r24
    5da2:	da f7       	brpl	.-10     	; 0x5d9a <fmod+0x20>
    5da4:	95 2f       	mov	r25, r21
    5da6:	55 27       	eor	r21, r21
    5da8:	44 23       	and	r20, r20
    5daa:	32 f0       	brmi	.+12     	; 0x5db8 <fmod+0x3e>
    5dac:	91 50       	subi	r25, 0x01	; 1
    5dae:	50 40       	sbci	r21, 0x00	; 0
    5db0:	22 0f       	add	r18, r18
    5db2:	33 1f       	adc	r19, r19
    5db4:	44 1f       	adc	r20, r20
    5db6:	d2 f7       	brpl	.-12     	; 0x5dac <fmod+0x32>
    5db8:	bb 27       	eor	r27, r27
    5dba:	e9 1b       	sub	r30, r25
    5dbc:	f5 0b       	sbc	r31, r21
    5dbe:	62 1b       	sub	r22, r18
    5dc0:	73 0b       	sbc	r23, r19
    5dc2:	84 0b       	sbc	r24, r20
    5dc4:	b1 09       	sbc	r27, r1
    5dc6:	c1 f2       	breq	.-80     	; 0x5d78 <floor+0x32>
    5dc8:	22 f4       	brpl	.+8      	; 0x5dd2 <fmod+0x58>
    5dca:	62 0f       	add	r22, r18
    5dcc:	73 1f       	adc	r23, r19
    5dce:	84 1f       	adc	r24, r20
    5dd0:	b1 1d       	adc	r27, r1
    5dd2:	31 97       	sbiw	r30, 0x01	; 1
    5dd4:	2a f0       	brmi	.+10     	; 0x5de0 <fmod+0x66>
    5dd6:	66 0f       	add	r22, r22
    5dd8:	77 1f       	adc	r23, r23
    5dda:	88 1f       	adc	r24, r24
    5ddc:	bb 1f       	adc	r27, r27
    5dde:	ef cf       	rjmp	.-34     	; 0x5dbe <fmod+0x44>
    5de0:	91 50       	subi	r25, 0x01	; 1
    5de2:	50 40       	sbci	r21, 0x00	; 0
    5de4:	5a f0       	brmi	.+22     	; 0x5dfc <fmod+0x82>
    5de6:	41 f0       	breq	.+16     	; 0x5df8 <fmod+0x7e>
    5de8:	88 23       	and	r24, r24
    5dea:	32 f0       	brmi	.+12     	; 0x5df8 <fmod+0x7e>
    5dec:	66 0f       	add	r22, r22
    5dee:	77 1f       	adc	r23, r23
    5df0:	88 1f       	adc	r24, r24
    5df2:	91 50       	subi	r25, 0x01	; 1
    5df4:	50 40       	sbci	r21, 0x00	; 0
    5df6:	c1 f7       	brne	.-16     	; 0x5de8 <fmod+0x6e>
    5df8:	93 95       	inc	r25
    5dfa:	4b c0       	rjmp	.+150    	; 0x5e92 <__fp_mpack>
    5dfc:	86 95       	lsr	r24
    5dfe:	77 95       	ror	r23
    5e00:	67 95       	ror	r22
    5e02:	9f 5f       	subi	r25, 0xFF	; 255
    5e04:	d9 f7       	brne	.-10     	; 0x5dfc <fmod+0x82>
    5e06:	f8 cf       	rjmp	.-16     	; 0x5df8 <fmod+0x7e>

00005e08 <__fp_cmp>:
    5e08:	99 0f       	add	r25, r25
    5e0a:	00 08       	sbc	r0, r0
    5e0c:	55 0f       	add	r21, r21
    5e0e:	aa 0b       	sbc	r26, r26
    5e10:	e0 e8       	ldi	r30, 0x80	; 128
    5e12:	fe ef       	ldi	r31, 0xFE	; 254
    5e14:	16 16       	cp	r1, r22
    5e16:	17 06       	cpc	r1, r23
    5e18:	e8 07       	cpc	r30, r24
    5e1a:	f9 07       	cpc	r31, r25
    5e1c:	c0 f0       	brcs	.+48     	; 0x5e4e <__fp_cmp+0x46>
    5e1e:	12 16       	cp	r1, r18
    5e20:	13 06       	cpc	r1, r19
    5e22:	e4 07       	cpc	r30, r20
    5e24:	f5 07       	cpc	r31, r21
    5e26:	98 f0       	brcs	.+38     	; 0x5e4e <__fp_cmp+0x46>
    5e28:	62 1b       	sub	r22, r18
    5e2a:	73 0b       	sbc	r23, r19
    5e2c:	84 0b       	sbc	r24, r20
    5e2e:	95 0b       	sbc	r25, r21
    5e30:	39 f4       	brne	.+14     	; 0x5e40 <__fp_cmp+0x38>
    5e32:	0a 26       	eor	r0, r26
    5e34:	61 f0       	breq	.+24     	; 0x5e4e <__fp_cmp+0x46>
    5e36:	23 2b       	or	r18, r19
    5e38:	24 2b       	or	r18, r20
    5e3a:	25 2b       	or	r18, r21
    5e3c:	21 f4       	brne	.+8      	; 0x5e46 <__fp_cmp+0x3e>
    5e3e:	08 95       	ret
    5e40:	0a 26       	eor	r0, r26
    5e42:	09 f4       	brne	.+2      	; 0x5e46 <__fp_cmp+0x3e>
    5e44:	a1 40       	sbci	r26, 0x01	; 1
    5e46:	a6 95       	lsr	r26
    5e48:	8f ef       	ldi	r24, 0xFF	; 255
    5e4a:	81 1d       	adc	r24, r1
    5e4c:	81 1d       	adc	r24, r1
    5e4e:	08 95       	ret

00005e50 <__fp_inf>:
    5e50:	97 f9       	bld	r25, 7
    5e52:	9f 67       	ori	r25, 0x7F	; 127
    5e54:	80 e8       	ldi	r24, 0x80	; 128
    5e56:	70 e0       	ldi	r23, 0x00	; 0
    5e58:	60 e0       	ldi	r22, 0x00	; 0
    5e5a:	08 95       	ret

00005e5c <__fp_mintl>:
    5e5c:	88 23       	and	r24, r24
    5e5e:	71 f4       	brne	.+28     	; 0x5e7c <__fp_mintl+0x20>
    5e60:	77 23       	and	r23, r23
    5e62:	21 f0       	breq	.+8      	; 0x5e6c <__fp_mintl+0x10>
    5e64:	98 50       	subi	r25, 0x08	; 8
    5e66:	87 2b       	or	r24, r23
    5e68:	76 2f       	mov	r23, r22
    5e6a:	07 c0       	rjmp	.+14     	; 0x5e7a <__fp_mintl+0x1e>
    5e6c:	66 23       	and	r22, r22
    5e6e:	11 f4       	brne	.+4      	; 0x5e74 <__fp_mintl+0x18>
    5e70:	99 27       	eor	r25, r25
    5e72:	0d c0       	rjmp	.+26     	; 0x5e8e <__fp_mintl+0x32>
    5e74:	90 51       	subi	r25, 0x10	; 16
    5e76:	86 2b       	or	r24, r22
    5e78:	70 e0       	ldi	r23, 0x00	; 0
    5e7a:	60 e0       	ldi	r22, 0x00	; 0
    5e7c:	2a f0       	brmi	.+10     	; 0x5e88 <__fp_mintl+0x2c>
    5e7e:	9a 95       	dec	r25
    5e80:	66 0f       	add	r22, r22
    5e82:	77 1f       	adc	r23, r23
    5e84:	88 1f       	adc	r24, r24
    5e86:	da f7       	brpl	.-10     	; 0x5e7e <__fp_mintl+0x22>
    5e88:	88 0f       	add	r24, r24
    5e8a:	96 95       	lsr	r25
    5e8c:	87 95       	ror	r24
    5e8e:	97 f9       	bld	r25, 7
    5e90:	08 95       	ret

00005e92 <__fp_mpack>:
    5e92:	9f 3f       	cpi	r25, 0xFF	; 255
    5e94:	31 f0       	breq	.+12     	; 0x5ea2 <__fp_mpack_finite+0xc>

00005e96 <__fp_mpack_finite>:
    5e96:	91 50       	subi	r25, 0x01	; 1
    5e98:	20 f4       	brcc	.+8      	; 0x5ea2 <__fp_mpack_finite+0xc>
    5e9a:	87 95       	ror	r24
    5e9c:	77 95       	ror	r23
    5e9e:	67 95       	ror	r22
    5ea0:	b7 95       	ror	r27
    5ea2:	88 0f       	add	r24, r24
    5ea4:	91 1d       	adc	r25, r1
    5ea6:	96 95       	lsr	r25
    5ea8:	87 95       	ror	r24
    5eaa:	97 f9       	bld	r25, 7
    5eac:	08 95       	ret

00005eae <__fp_nan>:
    5eae:	9f ef       	ldi	r25, 0xFF	; 255
    5eb0:	80 ec       	ldi	r24, 0xC0	; 192
    5eb2:	08 95       	ret

00005eb4 <__fp_powser>:
    5eb4:	df 93       	push	r29
    5eb6:	cf 93       	push	r28
    5eb8:	1f 93       	push	r17
    5eba:	0f 93       	push	r16
    5ebc:	ff 92       	push	r15
    5ebe:	ef 92       	push	r14
    5ec0:	df 92       	push	r13
    5ec2:	7b 01       	movw	r14, r22
    5ec4:	8c 01       	movw	r16, r24
    5ec6:	68 94       	set
    5ec8:	05 c0       	rjmp	.+10     	; 0x5ed4 <__fp_powser+0x20>
    5eca:	da 2e       	mov	r13, r26
    5ecc:	ef 01       	movw	r28, r30
    5ece:	c6 d0       	rcall	.+396    	; 0x605c <__mulsf3x>
    5ed0:	fe 01       	movw	r30, r28
    5ed2:	e8 94       	clt
    5ed4:	a5 91       	lpm	r26, Z+
    5ed6:	25 91       	lpm	r18, Z+
    5ed8:	35 91       	lpm	r19, Z+
    5eda:	45 91       	lpm	r20, Z+
    5edc:	55 91       	lpm	r21, Z+
    5ede:	ae f3       	brts	.-22     	; 0x5eca <__fp_powser+0x16>
    5ee0:	ef 01       	movw	r28, r30
    5ee2:	9f dd       	rcall	.-1218   	; 0x5a22 <__addsf3x>
    5ee4:	fe 01       	movw	r30, r28
    5ee6:	97 01       	movw	r18, r14
    5ee8:	a8 01       	movw	r20, r16
    5eea:	da 94       	dec	r13
    5eec:	79 f7       	brne	.-34     	; 0x5ecc <__fp_powser+0x18>
    5eee:	df 90       	pop	r13
    5ef0:	ef 90       	pop	r14
    5ef2:	ff 90       	pop	r15
    5ef4:	0f 91       	pop	r16
    5ef6:	1f 91       	pop	r17
    5ef8:	cf 91       	pop	r28
    5efa:	df 91       	pop	r29
    5efc:	08 95       	ret

00005efe <__fp_pscA>:
    5efe:	00 24       	eor	r0, r0
    5f00:	0a 94       	dec	r0
    5f02:	16 16       	cp	r1, r22
    5f04:	17 06       	cpc	r1, r23
    5f06:	18 06       	cpc	r1, r24
    5f08:	09 06       	cpc	r0, r25
    5f0a:	08 95       	ret

00005f0c <__fp_pscB>:
    5f0c:	00 24       	eor	r0, r0
    5f0e:	0a 94       	dec	r0
    5f10:	12 16       	cp	r1, r18
    5f12:	13 06       	cpc	r1, r19
    5f14:	14 06       	cpc	r1, r20
    5f16:	05 06       	cpc	r0, r21
    5f18:	08 95       	ret
    5f1a:	c9 cf       	rjmp	.-110    	; 0x5eae <__fp_nan>

00005f1c <__fp_rempio2>:
    5f1c:	50 d0       	rcall	.+160    	; 0x5fbe <__fp_splitA>
    5f1e:	e8 f3       	brcs	.-6      	; 0x5f1a <__fp_pscB+0xe>
    5f20:	e8 94       	clt
    5f22:	e0 e0       	ldi	r30, 0x00	; 0
    5f24:	bb 27       	eor	r27, r27
    5f26:	9f 57       	subi	r25, 0x7F	; 127
    5f28:	f0 f0       	brcs	.+60     	; 0x5f66 <__fp_rempio2+0x4a>
    5f2a:	2a ed       	ldi	r18, 0xDA	; 218
    5f2c:	3f e0       	ldi	r19, 0x0F	; 15
    5f2e:	49 ec       	ldi	r20, 0xC9	; 201
    5f30:	06 c0       	rjmp	.+12     	; 0x5f3e <__fp_rempio2+0x22>
    5f32:	ee 0f       	add	r30, r30
    5f34:	bb 0f       	add	r27, r27
    5f36:	66 1f       	adc	r22, r22
    5f38:	77 1f       	adc	r23, r23
    5f3a:	88 1f       	adc	r24, r24
    5f3c:	28 f0       	brcs	.+10     	; 0x5f48 <__fp_rempio2+0x2c>
    5f3e:	b2 3a       	cpi	r27, 0xA2	; 162
    5f40:	62 07       	cpc	r22, r18
    5f42:	73 07       	cpc	r23, r19
    5f44:	84 07       	cpc	r24, r20
    5f46:	28 f0       	brcs	.+10     	; 0x5f52 <__fp_rempio2+0x36>
    5f48:	b2 5a       	subi	r27, 0xA2	; 162
    5f4a:	62 0b       	sbc	r22, r18
    5f4c:	73 0b       	sbc	r23, r19
    5f4e:	84 0b       	sbc	r24, r20
    5f50:	e3 95       	inc	r30
    5f52:	9a 95       	dec	r25
    5f54:	72 f7       	brpl	.-36     	; 0x5f32 <__fp_rempio2+0x16>
    5f56:	80 38       	cpi	r24, 0x80	; 128
    5f58:	30 f4       	brcc	.+12     	; 0x5f66 <__fp_rempio2+0x4a>
    5f5a:	9a 95       	dec	r25
    5f5c:	bb 0f       	add	r27, r27
    5f5e:	66 1f       	adc	r22, r22
    5f60:	77 1f       	adc	r23, r23
    5f62:	88 1f       	adc	r24, r24
    5f64:	d2 f7       	brpl	.-12     	; 0x5f5a <__fp_rempio2+0x3e>
    5f66:	90 48       	sbci	r25, 0x80	; 128
    5f68:	96 cf       	rjmp	.-212    	; 0x5e96 <__fp_mpack_finite>

00005f6a <__fp_round>:
    5f6a:	09 2e       	mov	r0, r25
    5f6c:	03 94       	inc	r0
    5f6e:	00 0c       	add	r0, r0
    5f70:	11 f4       	brne	.+4      	; 0x5f76 <__fp_round+0xc>
    5f72:	88 23       	and	r24, r24
    5f74:	52 f0       	brmi	.+20     	; 0x5f8a <__fp_round+0x20>
    5f76:	bb 0f       	add	r27, r27
    5f78:	40 f4       	brcc	.+16     	; 0x5f8a <__fp_round+0x20>
    5f7a:	bf 2b       	or	r27, r31
    5f7c:	11 f4       	brne	.+4      	; 0x5f82 <__fp_round+0x18>
    5f7e:	60 ff       	sbrs	r22, 0
    5f80:	04 c0       	rjmp	.+8      	; 0x5f8a <__fp_round+0x20>
    5f82:	6f 5f       	subi	r22, 0xFF	; 255
    5f84:	7f 4f       	sbci	r23, 0xFF	; 255
    5f86:	8f 4f       	sbci	r24, 0xFF	; 255
    5f88:	9f 4f       	sbci	r25, 0xFF	; 255
    5f8a:	08 95       	ret

00005f8c <__fp_sinus>:
    5f8c:	ef 93       	push	r30
    5f8e:	e0 ff       	sbrs	r30, 0
    5f90:	06 c0       	rjmp	.+12     	; 0x5f9e <__fp_sinus+0x12>
    5f92:	a2 ea       	ldi	r26, 0xA2	; 162
    5f94:	2a ed       	ldi	r18, 0xDA	; 218
    5f96:	3f e0       	ldi	r19, 0x0F	; 15
    5f98:	49 ec       	ldi	r20, 0xC9	; 201
    5f9a:	5f eb       	ldi	r21, 0xBF	; 191
    5f9c:	42 dd       	rcall	.-1404   	; 0x5a22 <__addsf3x>
    5f9e:	e5 df       	rcall	.-54     	; 0x5f6a <__fp_round>
    5fa0:	0f 90       	pop	r0
    5fa2:	03 94       	inc	r0
    5fa4:	01 fc       	sbrc	r0, 1
    5fa6:	90 58       	subi	r25, 0x80	; 128
    5fa8:	e1 e1       	ldi	r30, 0x11	; 17
    5faa:	f1 e0       	ldi	r31, 0x01	; 1
    5fac:	00 c1       	rjmp	.+512    	; 0x61ae <__fp_powsodd>

00005fae <__fp_split3>:
    5fae:	57 fd       	sbrc	r21, 7
    5fb0:	90 58       	subi	r25, 0x80	; 128
    5fb2:	44 0f       	add	r20, r20
    5fb4:	55 1f       	adc	r21, r21
    5fb6:	59 f0       	breq	.+22     	; 0x5fce <__fp_splitA+0x10>
    5fb8:	5f 3f       	cpi	r21, 0xFF	; 255
    5fba:	71 f0       	breq	.+28     	; 0x5fd8 <__fp_splitA+0x1a>
    5fbc:	47 95       	ror	r20

00005fbe <__fp_splitA>:
    5fbe:	88 0f       	add	r24, r24
    5fc0:	97 fb       	bst	r25, 7
    5fc2:	99 1f       	adc	r25, r25
    5fc4:	61 f0       	breq	.+24     	; 0x5fde <__fp_splitA+0x20>
    5fc6:	9f 3f       	cpi	r25, 0xFF	; 255
    5fc8:	79 f0       	breq	.+30     	; 0x5fe8 <__fp_splitA+0x2a>
    5fca:	87 95       	ror	r24
    5fcc:	08 95       	ret
    5fce:	12 16       	cp	r1, r18
    5fd0:	13 06       	cpc	r1, r19
    5fd2:	14 06       	cpc	r1, r20
    5fd4:	55 1f       	adc	r21, r21
    5fd6:	f2 cf       	rjmp	.-28     	; 0x5fbc <__fp_split3+0xe>
    5fd8:	46 95       	lsr	r20
    5fda:	f1 df       	rcall	.-30     	; 0x5fbe <__fp_splitA>
    5fdc:	08 c0       	rjmp	.+16     	; 0x5fee <__fp_splitA+0x30>
    5fde:	16 16       	cp	r1, r22
    5fe0:	17 06       	cpc	r1, r23
    5fe2:	18 06       	cpc	r1, r24
    5fe4:	99 1f       	adc	r25, r25
    5fe6:	f1 cf       	rjmp	.-30     	; 0x5fca <__fp_splitA+0xc>
    5fe8:	86 95       	lsr	r24
    5fea:	71 05       	cpc	r23, r1
    5fec:	61 05       	cpc	r22, r1
    5fee:	08 94       	sec
    5ff0:	08 95       	ret

00005ff2 <__fp_trunc>:
    5ff2:	e5 df       	rcall	.-54     	; 0x5fbe <__fp_splitA>
    5ff4:	a0 f0       	brcs	.+40     	; 0x601e <__fp_trunc+0x2c>
    5ff6:	be e7       	ldi	r27, 0x7E	; 126
    5ff8:	b9 17       	cp	r27, r25
    5ffa:	88 f4       	brcc	.+34     	; 0x601e <__fp_trunc+0x2c>
    5ffc:	bb 27       	eor	r27, r27
    5ffe:	9f 38       	cpi	r25, 0x8F	; 143
    6000:	60 f4       	brcc	.+24     	; 0x601a <__fp_trunc+0x28>
    6002:	16 16       	cp	r1, r22
    6004:	b1 1d       	adc	r27, r1
    6006:	67 2f       	mov	r22, r23
    6008:	78 2f       	mov	r23, r24
    600a:	88 27       	eor	r24, r24
    600c:	98 5f       	subi	r25, 0xF8	; 248
    600e:	f7 cf       	rjmp	.-18     	; 0x5ffe <__fp_trunc+0xc>
    6010:	86 95       	lsr	r24
    6012:	77 95       	ror	r23
    6014:	67 95       	ror	r22
    6016:	b1 1d       	adc	r27, r1
    6018:	93 95       	inc	r25
    601a:	96 39       	cpi	r25, 0x96	; 150
    601c:	c8 f3       	brcs	.-14     	; 0x6010 <__fp_trunc+0x1e>
    601e:	08 95       	ret

00006020 <__fp_zero>:
    6020:	e8 94       	clt

00006022 <__fp_szero>:
    6022:	bb 27       	eor	r27, r27
    6024:	66 27       	eor	r22, r22
    6026:	77 27       	eor	r23, r23
    6028:	cb 01       	movw	r24, r22
    602a:	97 f9       	bld	r25, 7
    602c:	08 95       	ret

0000602e <__gesf2>:
    602e:	ec de       	rcall	.-552    	; 0x5e08 <__fp_cmp>
    6030:	08 f4       	brcc	.+2      	; 0x6034 <__gesf2+0x6>
    6032:	8f ef       	ldi	r24, 0xFF	; 255
    6034:	08 95       	ret

00006036 <inverse>:
    6036:	9b 01       	movw	r18, r22
    6038:	ac 01       	movw	r20, r24
    603a:	60 e0       	ldi	r22, 0x00	; 0
    603c:	70 e0       	ldi	r23, 0x00	; 0
    603e:	80 e8       	ldi	r24, 0x80	; 128
    6040:	9f e3       	ldi	r25, 0x3F	; 63
    6042:	ab cd       	rjmp	.-1194   	; 0x5b9a <__divsf3>

00006044 <__mulsf3>:
    6044:	0b d0       	rcall	.+22     	; 0x605c <__mulsf3x>
    6046:	91 cf       	rjmp	.-222    	; 0x5f6a <__fp_round>
    6048:	5a df       	rcall	.-332    	; 0x5efe <__fp_pscA>
    604a:	28 f0       	brcs	.+10     	; 0x6056 <__mulsf3+0x12>
    604c:	5f df       	rcall	.-322    	; 0x5f0c <__fp_pscB>
    604e:	18 f0       	brcs	.+6      	; 0x6056 <__mulsf3+0x12>
    6050:	95 23       	and	r25, r21
    6052:	09 f0       	breq	.+2      	; 0x6056 <__mulsf3+0x12>
    6054:	fd ce       	rjmp	.-518    	; 0x5e50 <__fp_inf>
    6056:	2b cf       	rjmp	.-426    	; 0x5eae <__fp_nan>
    6058:	11 24       	eor	r1, r1
    605a:	e3 cf       	rjmp	.-58     	; 0x6022 <__fp_szero>

0000605c <__mulsf3x>:
    605c:	a8 df       	rcall	.-176    	; 0x5fae <__fp_split3>
    605e:	a0 f3       	brcs	.-24     	; 0x6048 <__mulsf3+0x4>

00006060 <__mulsf3_pse>:
    6060:	95 9f       	mul	r25, r21
    6062:	d1 f3       	breq	.-12     	; 0x6058 <__mulsf3+0x14>
    6064:	95 0f       	add	r25, r21
    6066:	50 e0       	ldi	r21, 0x00	; 0
    6068:	55 1f       	adc	r21, r21
    606a:	62 9f       	mul	r22, r18
    606c:	f0 01       	movw	r30, r0
    606e:	72 9f       	mul	r23, r18
    6070:	bb 27       	eor	r27, r27
    6072:	f0 0d       	add	r31, r0
    6074:	b1 1d       	adc	r27, r1
    6076:	63 9f       	mul	r22, r19
    6078:	aa 27       	eor	r26, r26
    607a:	f0 0d       	add	r31, r0
    607c:	b1 1d       	adc	r27, r1
    607e:	aa 1f       	adc	r26, r26
    6080:	64 9f       	mul	r22, r20
    6082:	66 27       	eor	r22, r22
    6084:	b0 0d       	add	r27, r0
    6086:	a1 1d       	adc	r26, r1
    6088:	66 1f       	adc	r22, r22
    608a:	82 9f       	mul	r24, r18
    608c:	22 27       	eor	r18, r18
    608e:	b0 0d       	add	r27, r0
    6090:	a1 1d       	adc	r26, r1
    6092:	62 1f       	adc	r22, r18
    6094:	73 9f       	mul	r23, r19
    6096:	b0 0d       	add	r27, r0
    6098:	a1 1d       	adc	r26, r1
    609a:	62 1f       	adc	r22, r18
    609c:	83 9f       	mul	r24, r19
    609e:	a0 0d       	add	r26, r0
    60a0:	61 1d       	adc	r22, r1
    60a2:	22 1f       	adc	r18, r18
    60a4:	74 9f       	mul	r23, r20
    60a6:	33 27       	eor	r19, r19
    60a8:	a0 0d       	add	r26, r0
    60aa:	61 1d       	adc	r22, r1
    60ac:	23 1f       	adc	r18, r19
    60ae:	84 9f       	mul	r24, r20
    60b0:	60 0d       	add	r22, r0
    60b2:	21 1d       	adc	r18, r1
    60b4:	82 2f       	mov	r24, r18
    60b6:	76 2f       	mov	r23, r22
    60b8:	6a 2f       	mov	r22, r26
    60ba:	11 24       	eor	r1, r1
    60bc:	9f 57       	subi	r25, 0x7F	; 127
    60be:	50 40       	sbci	r21, 0x00	; 0
    60c0:	8a f0       	brmi	.+34     	; 0x60e4 <__mulsf3_pse+0x84>
    60c2:	e1 f0       	breq	.+56     	; 0x60fc <__mulsf3_pse+0x9c>
    60c4:	88 23       	and	r24, r24
    60c6:	4a f0       	brmi	.+18     	; 0x60da <__mulsf3_pse+0x7a>
    60c8:	ee 0f       	add	r30, r30
    60ca:	ff 1f       	adc	r31, r31
    60cc:	bb 1f       	adc	r27, r27
    60ce:	66 1f       	adc	r22, r22
    60d0:	77 1f       	adc	r23, r23
    60d2:	88 1f       	adc	r24, r24
    60d4:	91 50       	subi	r25, 0x01	; 1
    60d6:	50 40       	sbci	r21, 0x00	; 0
    60d8:	a9 f7       	brne	.-22     	; 0x60c4 <__mulsf3_pse+0x64>
    60da:	9e 3f       	cpi	r25, 0xFE	; 254
    60dc:	51 05       	cpc	r21, r1
    60de:	70 f0       	brcs	.+28     	; 0x60fc <__mulsf3_pse+0x9c>
    60e0:	b7 ce       	rjmp	.-658    	; 0x5e50 <__fp_inf>
    60e2:	9f cf       	rjmp	.-194    	; 0x6022 <__fp_szero>
    60e4:	5f 3f       	cpi	r21, 0xFF	; 255
    60e6:	ec f3       	brlt	.-6      	; 0x60e2 <__mulsf3_pse+0x82>
    60e8:	98 3e       	cpi	r25, 0xE8	; 232
    60ea:	dc f3       	brlt	.-10     	; 0x60e2 <__mulsf3_pse+0x82>
    60ec:	86 95       	lsr	r24
    60ee:	77 95       	ror	r23
    60f0:	67 95       	ror	r22
    60f2:	b7 95       	ror	r27
    60f4:	f7 95       	ror	r31
    60f6:	e7 95       	ror	r30
    60f8:	9f 5f       	subi	r25, 0xFF	; 255
    60fa:	c1 f7       	brne	.-16     	; 0x60ec <__mulsf3_pse+0x8c>
    60fc:	fe 2b       	or	r31, r30
    60fe:	88 0f       	add	r24, r24
    6100:	91 1d       	adc	r25, r1
    6102:	96 95       	lsr	r25
    6104:	87 95       	ror	r24
    6106:	97 f9       	bld	r25, 7
    6108:	08 95       	ret

0000610a <sin>:
    610a:	9f 93       	push	r25
    610c:	07 df       	rcall	.-498    	; 0x5f1c <__fp_rempio2>
    610e:	0f 90       	pop	r0
    6110:	07 fc       	sbrc	r0, 7
    6112:	ee 5f       	subi	r30, 0xFE	; 254
    6114:	3b cf       	rjmp	.-394    	; 0x5f8c <__fp_sinus>
    6116:	11 f4       	brne	.+4      	; 0x611c <sin+0x12>
    6118:	0e f4       	brtc	.+2      	; 0x611c <sin+0x12>
    611a:	c9 ce       	rjmp	.-622    	; 0x5eae <__fp_nan>
    611c:	ba ce       	rjmp	.-652    	; 0x5e92 <__fp_mpack>

0000611e <sqrt>:
    611e:	4f df       	rcall	.-354    	; 0x5fbe <__fp_splitA>
    6120:	d0 f3       	brcs	.-12     	; 0x6116 <sin+0xc>
    6122:	99 23       	and	r25, r25
    6124:	d9 f3       	breq	.-10     	; 0x611c <sin+0x12>
    6126:	ce f3       	brts	.-14     	; 0x611a <sin+0x10>
    6128:	9f 57       	subi	r25, 0x7F	; 127
    612a:	55 0b       	sbc	r21, r21
    612c:	87 ff       	sbrs	r24, 7
    612e:	38 d0       	rcall	.+112    	; 0x61a0 <__fp_norm2>
    6130:	00 24       	eor	r0, r0
    6132:	a0 e6       	ldi	r26, 0x60	; 96
    6134:	40 ea       	ldi	r20, 0xA0	; 160
    6136:	90 01       	movw	r18, r0
    6138:	80 58       	subi	r24, 0x80	; 128
    613a:	56 95       	lsr	r21
    613c:	97 95       	ror	r25
    613e:	28 f4       	brcc	.+10     	; 0x614a <sqrt+0x2c>
    6140:	80 5c       	subi	r24, 0xC0	; 192
    6142:	66 0f       	add	r22, r22
    6144:	77 1f       	adc	r23, r23
    6146:	88 1f       	adc	r24, r24
    6148:	20 f0       	brcs	.+8      	; 0x6152 <sqrt+0x34>
    614a:	26 17       	cp	r18, r22
    614c:	37 07       	cpc	r19, r23
    614e:	48 07       	cpc	r20, r24
    6150:	30 f4       	brcc	.+12     	; 0x615e <sqrt+0x40>
    6152:	62 1b       	sub	r22, r18
    6154:	73 0b       	sbc	r23, r19
    6156:	84 0b       	sbc	r24, r20
    6158:	20 29       	or	r18, r0
    615a:	31 29       	or	r19, r1
    615c:	4a 2b       	or	r20, r26
    615e:	a6 95       	lsr	r26
    6160:	17 94       	ror	r1
    6162:	07 94       	ror	r0
    6164:	20 25       	eor	r18, r0
    6166:	31 25       	eor	r19, r1
    6168:	4a 27       	eor	r20, r26
    616a:	58 f7       	brcc	.-42     	; 0x6142 <sqrt+0x24>
    616c:	66 0f       	add	r22, r22
    616e:	77 1f       	adc	r23, r23
    6170:	88 1f       	adc	r24, r24
    6172:	20 f0       	brcs	.+8      	; 0x617c <sqrt+0x5e>
    6174:	26 17       	cp	r18, r22
    6176:	37 07       	cpc	r19, r23
    6178:	48 07       	cpc	r20, r24
    617a:	30 f4       	brcc	.+12     	; 0x6188 <sqrt+0x6a>
    617c:	62 0b       	sbc	r22, r18
    617e:	73 0b       	sbc	r23, r19
    6180:	84 0b       	sbc	r24, r20
    6182:	20 0d       	add	r18, r0
    6184:	31 1d       	adc	r19, r1
    6186:	41 1d       	adc	r20, r1
    6188:	a0 95       	com	r26
    618a:	81 f7       	brne	.-32     	; 0x616c <sqrt+0x4e>
    618c:	b9 01       	movw	r22, r18
    618e:	84 2f       	mov	r24, r20
    6190:	91 58       	subi	r25, 0x81	; 129
    6192:	88 0f       	add	r24, r24
    6194:	96 95       	lsr	r25
    6196:	87 95       	ror	r24
    6198:	08 95       	ret

0000619a <square>:
    619a:	9b 01       	movw	r18, r22
    619c:	ac 01       	movw	r20, r24
    619e:	52 cf       	rjmp	.-348    	; 0x6044 <__mulsf3>

000061a0 <__fp_norm2>:
    61a0:	91 50       	subi	r25, 0x01	; 1
    61a2:	50 40       	sbci	r21, 0x00	; 0
    61a4:	66 0f       	add	r22, r22
    61a6:	77 1f       	adc	r23, r23
    61a8:	88 1f       	adc	r24, r24
    61aa:	d2 f7       	brpl	.-12     	; 0x61a0 <__fp_norm2>
    61ac:	08 95       	ret

000061ae <__fp_powsodd>:
    61ae:	9f 93       	push	r25
    61b0:	8f 93       	push	r24
    61b2:	7f 93       	push	r23
    61b4:	6f 93       	push	r22
    61b6:	ff 93       	push	r31
    61b8:	ef 93       	push	r30
    61ba:	9b 01       	movw	r18, r22
    61bc:	ac 01       	movw	r20, r24
    61be:	42 df       	rcall	.-380    	; 0x6044 <__mulsf3>
    61c0:	ef 91       	pop	r30
    61c2:	ff 91       	pop	r31
    61c4:	77 de       	rcall	.-786    	; 0x5eb4 <__fp_powser>
    61c6:	2f 91       	pop	r18
    61c8:	3f 91       	pop	r19
    61ca:	4f 91       	pop	r20
    61cc:	5f 91       	pop	r21
    61ce:	3a cf       	rjmp	.-396    	; 0x6044 <__mulsf3>

000061d0 <__mulsi3>:
    61d0:	62 9f       	mul	r22, r18
    61d2:	d0 01       	movw	r26, r0
    61d4:	73 9f       	mul	r23, r19
    61d6:	f0 01       	movw	r30, r0
    61d8:	82 9f       	mul	r24, r18
    61da:	e0 0d       	add	r30, r0
    61dc:	f1 1d       	adc	r31, r1
    61de:	64 9f       	mul	r22, r20
    61e0:	e0 0d       	add	r30, r0
    61e2:	f1 1d       	adc	r31, r1
    61e4:	92 9f       	mul	r25, r18
    61e6:	f0 0d       	add	r31, r0
    61e8:	83 9f       	mul	r24, r19
    61ea:	f0 0d       	add	r31, r0
    61ec:	74 9f       	mul	r23, r20
    61ee:	f0 0d       	add	r31, r0
    61f0:	65 9f       	mul	r22, r21
    61f2:	f0 0d       	add	r31, r0
    61f4:	99 27       	eor	r25, r25
    61f6:	72 9f       	mul	r23, r18
    61f8:	b0 0d       	add	r27, r0
    61fa:	e1 1d       	adc	r30, r1
    61fc:	f9 1f       	adc	r31, r25
    61fe:	63 9f       	mul	r22, r19
    6200:	b0 0d       	add	r27, r0
    6202:	e1 1d       	adc	r30, r1
    6204:	f9 1f       	adc	r31, r25
    6206:	bd 01       	movw	r22, r26
    6208:	cf 01       	movw	r24, r30
    620a:	11 24       	eor	r1, r1
    620c:	08 95       	ret

0000620e <__udivmodqi4>:
    620e:	99 1b       	sub	r25, r25
    6210:	79 e0       	ldi	r23, 0x09	; 9
    6212:	04 c0       	rjmp	.+8      	; 0x621c <__udivmodqi4_ep>

00006214 <__udivmodqi4_loop>:
    6214:	99 1f       	adc	r25, r25
    6216:	96 17       	cp	r25, r22
    6218:	08 f0       	brcs	.+2      	; 0x621c <__udivmodqi4_ep>
    621a:	96 1b       	sub	r25, r22

0000621c <__udivmodqi4_ep>:
    621c:	88 1f       	adc	r24, r24
    621e:	7a 95       	dec	r23
    6220:	c9 f7       	brne	.-14     	; 0x6214 <__udivmodqi4_loop>
    6222:	80 95       	com	r24
    6224:	08 95       	ret

00006226 <__divmodhi4>:
    6226:	97 fb       	bst	r25, 7
    6228:	09 2e       	mov	r0, r25
    622a:	07 26       	eor	r0, r23
    622c:	0a d0       	rcall	.+20     	; 0x6242 <__divmodhi4_neg1>
    622e:	77 fd       	sbrc	r23, 7
    6230:	04 d0       	rcall	.+8      	; 0x623a <__divmodhi4_neg2>
    6232:	49 d0       	rcall	.+146    	; 0x62c6 <__udivmodhi4>
    6234:	06 d0       	rcall	.+12     	; 0x6242 <__divmodhi4_neg1>
    6236:	00 20       	and	r0, r0
    6238:	1a f4       	brpl	.+6      	; 0x6240 <__divmodhi4_exit>

0000623a <__divmodhi4_neg2>:
    623a:	70 95       	com	r23
    623c:	61 95       	neg	r22
    623e:	7f 4f       	sbci	r23, 0xFF	; 255

00006240 <__divmodhi4_exit>:
    6240:	08 95       	ret

00006242 <__divmodhi4_neg1>:
    6242:	f6 f7       	brtc	.-4      	; 0x6240 <__divmodhi4_exit>
    6244:	90 95       	com	r25
    6246:	81 95       	neg	r24
    6248:	9f 4f       	sbci	r25, 0xFF	; 255
    624a:	08 95       	ret

0000624c <__udivmodsi4>:
    624c:	a1 e2       	ldi	r26, 0x21	; 33
    624e:	1a 2e       	mov	r1, r26
    6250:	aa 1b       	sub	r26, r26
    6252:	bb 1b       	sub	r27, r27
    6254:	fd 01       	movw	r30, r26
    6256:	0d c0       	rjmp	.+26     	; 0x6272 <__udivmodsi4_ep>

00006258 <__udivmodsi4_loop>:
    6258:	aa 1f       	adc	r26, r26
    625a:	bb 1f       	adc	r27, r27
    625c:	ee 1f       	adc	r30, r30
    625e:	ff 1f       	adc	r31, r31
    6260:	a2 17       	cp	r26, r18
    6262:	b3 07       	cpc	r27, r19
    6264:	e4 07       	cpc	r30, r20
    6266:	f5 07       	cpc	r31, r21
    6268:	20 f0       	brcs	.+8      	; 0x6272 <__udivmodsi4_ep>
    626a:	a2 1b       	sub	r26, r18
    626c:	b3 0b       	sbc	r27, r19
    626e:	e4 0b       	sbc	r30, r20
    6270:	f5 0b       	sbc	r31, r21

00006272 <__udivmodsi4_ep>:
    6272:	66 1f       	adc	r22, r22
    6274:	77 1f       	adc	r23, r23
    6276:	88 1f       	adc	r24, r24
    6278:	99 1f       	adc	r25, r25
    627a:	1a 94       	dec	r1
    627c:	69 f7       	brne	.-38     	; 0x6258 <__udivmodsi4_loop>
    627e:	60 95       	com	r22
    6280:	70 95       	com	r23
    6282:	80 95       	com	r24
    6284:	90 95       	com	r25
    6286:	9b 01       	movw	r18, r22
    6288:	ac 01       	movw	r20, r24
    628a:	bd 01       	movw	r22, r26
    628c:	cf 01       	movw	r24, r30
    628e:	08 95       	ret

00006290 <__divmodsi4>:
    6290:	97 fb       	bst	r25, 7
    6292:	09 2e       	mov	r0, r25
    6294:	05 26       	eor	r0, r21
    6296:	0e d0       	rcall	.+28     	; 0x62b4 <__divmodsi4_neg1>
    6298:	57 fd       	sbrc	r21, 7
    629a:	04 d0       	rcall	.+8      	; 0x62a4 <__divmodsi4_neg2>
    629c:	d7 df       	rcall	.-82     	; 0x624c <__udivmodsi4>
    629e:	0a d0       	rcall	.+20     	; 0x62b4 <__divmodsi4_neg1>
    62a0:	00 1c       	adc	r0, r0
    62a2:	38 f4       	brcc	.+14     	; 0x62b2 <__divmodsi4_exit>

000062a4 <__divmodsi4_neg2>:
    62a4:	50 95       	com	r21
    62a6:	40 95       	com	r20
    62a8:	30 95       	com	r19
    62aa:	21 95       	neg	r18
    62ac:	3f 4f       	sbci	r19, 0xFF	; 255
    62ae:	4f 4f       	sbci	r20, 0xFF	; 255
    62b0:	5f 4f       	sbci	r21, 0xFF	; 255

000062b2 <__divmodsi4_exit>:
    62b2:	08 95       	ret

000062b4 <__divmodsi4_neg1>:
    62b4:	f6 f7       	brtc	.-4      	; 0x62b2 <__divmodsi4_exit>
    62b6:	90 95       	com	r25
    62b8:	80 95       	com	r24
    62ba:	70 95       	com	r23
    62bc:	61 95       	neg	r22
    62be:	7f 4f       	sbci	r23, 0xFF	; 255
    62c0:	8f 4f       	sbci	r24, 0xFF	; 255
    62c2:	9f 4f       	sbci	r25, 0xFF	; 255
    62c4:	08 95       	ret

000062c6 <__udivmodhi4>:
    62c6:	aa 1b       	sub	r26, r26
    62c8:	bb 1b       	sub	r27, r27
    62ca:	51 e1       	ldi	r21, 0x11	; 17
    62cc:	07 c0       	rjmp	.+14     	; 0x62dc <__udivmodhi4_ep>

000062ce <__udivmodhi4_loop>:
    62ce:	aa 1f       	adc	r26, r26
    62d0:	bb 1f       	adc	r27, r27
    62d2:	a6 17       	cp	r26, r22
    62d4:	b7 07       	cpc	r27, r23
    62d6:	10 f0       	brcs	.+4      	; 0x62dc <__udivmodhi4_ep>
    62d8:	a6 1b       	sub	r26, r22
    62da:	b7 0b       	sbc	r27, r23

000062dc <__udivmodhi4_ep>:
    62dc:	88 1f       	adc	r24, r24
    62de:	99 1f       	adc	r25, r25
    62e0:	5a 95       	dec	r21
    62e2:	a9 f7       	brne	.-22     	; 0x62ce <__udivmodhi4_loop>
    62e4:	80 95       	com	r24
    62e6:	90 95       	com	r25
    62e8:	bc 01       	movw	r22, r24
    62ea:	cd 01       	movw	r24, r26
    62ec:	08 95       	ret

000062ee <__tablejump_elpm__>:
    62ee:	07 90       	elpm	r0, Z+
    62f0:	f6 91       	elpm	r31, Z+
    62f2:	e0 2d       	mov	r30, r0
    62f4:	09 94       	ijmp

000062f6 <malloc>:
    62f6:	cf 93       	push	r28
    62f8:	df 93       	push	r29
    62fa:	82 30       	cpi	r24, 0x02	; 2
    62fc:	91 05       	cpc	r25, r1
    62fe:	10 f4       	brcc	.+4      	; 0x6304 <malloc+0xe>
    6300:	82 e0       	ldi	r24, 0x02	; 2
    6302:	90 e0       	ldi	r25, 0x00	; 0
    6304:	e0 91 e4 10 	lds	r30, 0x10E4
    6308:	f0 91 e5 10 	lds	r31, 0x10E5
    630c:	40 e0       	ldi	r20, 0x00	; 0
    630e:	50 e0       	ldi	r21, 0x00	; 0
    6310:	20 e0       	ldi	r18, 0x00	; 0
    6312:	30 e0       	ldi	r19, 0x00	; 0
    6314:	26 c0       	rjmp	.+76     	; 0x6362 <malloc+0x6c>
    6316:	60 81       	ld	r22, Z
    6318:	71 81       	ldd	r23, Z+1	; 0x01
    631a:	68 17       	cp	r22, r24
    631c:	79 07       	cpc	r23, r25
    631e:	e0 f0       	brcs	.+56     	; 0x6358 <malloc+0x62>
    6320:	68 17       	cp	r22, r24
    6322:	79 07       	cpc	r23, r25
    6324:	81 f4       	brne	.+32     	; 0x6346 <malloc+0x50>
    6326:	82 81       	ldd	r24, Z+2	; 0x02
    6328:	93 81       	ldd	r25, Z+3	; 0x03
    632a:	21 15       	cp	r18, r1
    632c:	31 05       	cpc	r19, r1
    632e:	31 f0       	breq	.+12     	; 0x633c <malloc+0x46>
    6330:	d9 01       	movw	r26, r18
    6332:	13 96       	adiw	r26, 0x03	; 3
    6334:	9c 93       	st	X, r25
    6336:	8e 93       	st	-X, r24
    6338:	12 97       	sbiw	r26, 0x02	; 2
    633a:	2b c0       	rjmp	.+86     	; 0x6392 <malloc+0x9c>
    633c:	90 93 e5 10 	sts	0x10E5, r25
    6340:	80 93 e4 10 	sts	0x10E4, r24
    6344:	26 c0       	rjmp	.+76     	; 0x6392 <malloc+0x9c>
    6346:	41 15       	cp	r20, r1
    6348:	51 05       	cpc	r21, r1
    634a:	19 f0       	breq	.+6      	; 0x6352 <malloc+0x5c>
    634c:	64 17       	cp	r22, r20
    634e:	75 07       	cpc	r23, r21
    6350:	18 f4       	brcc	.+6      	; 0x6358 <malloc+0x62>
    6352:	ab 01       	movw	r20, r22
    6354:	e9 01       	movw	r28, r18
    6356:	df 01       	movw	r26, r30
    6358:	9f 01       	movw	r18, r30
    635a:	72 81       	ldd	r23, Z+2	; 0x02
    635c:	63 81       	ldd	r22, Z+3	; 0x03
    635e:	e7 2f       	mov	r30, r23
    6360:	f6 2f       	mov	r31, r22
    6362:	30 97       	sbiw	r30, 0x00	; 0
    6364:	c1 f6       	brne	.-80     	; 0x6316 <malloc+0x20>
    6366:	41 15       	cp	r20, r1
    6368:	51 05       	cpc	r21, r1
    636a:	01 f1       	breq	.+64     	; 0x63ac <malloc+0xb6>
    636c:	48 1b       	sub	r20, r24
    636e:	59 0b       	sbc	r21, r25
    6370:	44 30       	cpi	r20, 0x04	; 4
    6372:	51 05       	cpc	r21, r1
    6374:	80 f4       	brcc	.+32     	; 0x6396 <malloc+0xa0>
    6376:	12 96       	adiw	r26, 0x02	; 2
    6378:	8d 91       	ld	r24, X+
    637a:	9c 91       	ld	r25, X
    637c:	13 97       	sbiw	r26, 0x03	; 3
    637e:	20 97       	sbiw	r28, 0x00	; 0
    6380:	19 f0       	breq	.+6      	; 0x6388 <malloc+0x92>
    6382:	9b 83       	std	Y+3, r25	; 0x03
    6384:	8a 83       	std	Y+2, r24	; 0x02
    6386:	04 c0       	rjmp	.+8      	; 0x6390 <malloc+0x9a>
    6388:	90 93 e5 10 	sts	0x10E5, r25
    638c:	80 93 e4 10 	sts	0x10E4, r24
    6390:	fd 01       	movw	r30, r26
    6392:	32 96       	adiw	r30, 0x02	; 2
    6394:	46 c0       	rjmp	.+140    	; 0x6422 <malloc+0x12c>
    6396:	fd 01       	movw	r30, r26
    6398:	e4 0f       	add	r30, r20
    639a:	f5 1f       	adc	r31, r21
    639c:	81 93       	st	Z+, r24
    639e:	91 93       	st	Z+, r25
    63a0:	42 50       	subi	r20, 0x02	; 2
    63a2:	50 40       	sbci	r21, 0x00	; 0
    63a4:	11 96       	adiw	r26, 0x01	; 1
    63a6:	5c 93       	st	X, r21
    63a8:	4e 93       	st	-X, r20
    63aa:	3b c0       	rjmp	.+118    	; 0x6422 <malloc+0x12c>
    63ac:	20 91 e2 10 	lds	r18, 0x10E2
    63b0:	30 91 e3 10 	lds	r19, 0x10E3
    63b4:	21 15       	cp	r18, r1
    63b6:	31 05       	cpc	r19, r1
    63b8:	41 f4       	brne	.+16     	; 0x63ca <malloc+0xd4>
    63ba:	20 91 fd 04 	lds	r18, 0x04FD
    63be:	30 91 fe 04 	lds	r19, 0x04FE
    63c2:	30 93 e3 10 	sts	0x10E3, r19
    63c6:	20 93 e2 10 	sts	0x10E2, r18
    63ca:	20 91 ff 04 	lds	r18, 0x04FF
    63ce:	30 91 00 05 	lds	r19, 0x0500
    63d2:	21 15       	cp	r18, r1
    63d4:	31 05       	cpc	r19, r1
    63d6:	41 f4       	brne	.+16     	; 0x63e8 <malloc+0xf2>
    63d8:	2d b7       	in	r18, 0x3d	; 61
    63da:	3e b7       	in	r19, 0x3e	; 62
    63dc:	40 91 fb 04 	lds	r20, 0x04FB
    63e0:	50 91 fc 04 	lds	r21, 0x04FC
    63e4:	24 1b       	sub	r18, r20
    63e6:	35 0b       	sbc	r19, r21
    63e8:	e0 91 e2 10 	lds	r30, 0x10E2
    63ec:	f0 91 e3 10 	lds	r31, 0x10E3
    63f0:	e2 17       	cp	r30, r18
    63f2:	f3 07       	cpc	r31, r19
    63f4:	a0 f4       	brcc	.+40     	; 0x641e <malloc+0x128>
    63f6:	2e 1b       	sub	r18, r30
    63f8:	3f 0b       	sbc	r19, r31
    63fa:	28 17       	cp	r18, r24
    63fc:	39 07       	cpc	r19, r25
    63fe:	78 f0       	brcs	.+30     	; 0x641e <malloc+0x128>
    6400:	ac 01       	movw	r20, r24
    6402:	4e 5f       	subi	r20, 0xFE	; 254
    6404:	5f 4f       	sbci	r21, 0xFF	; 255
    6406:	24 17       	cp	r18, r20
    6408:	35 07       	cpc	r19, r21
    640a:	48 f0       	brcs	.+18     	; 0x641e <malloc+0x128>
    640c:	4e 0f       	add	r20, r30
    640e:	5f 1f       	adc	r21, r31
    6410:	50 93 e3 10 	sts	0x10E3, r21
    6414:	40 93 e2 10 	sts	0x10E2, r20
    6418:	81 93       	st	Z+, r24
    641a:	91 93       	st	Z+, r25
    641c:	02 c0       	rjmp	.+4      	; 0x6422 <malloc+0x12c>
    641e:	e0 e0       	ldi	r30, 0x00	; 0
    6420:	f0 e0       	ldi	r31, 0x00	; 0
    6422:	cf 01       	movw	r24, r30
    6424:	df 91       	pop	r29
    6426:	cf 91       	pop	r28
    6428:	08 95       	ret

0000642a <free>:
    642a:	cf 93       	push	r28
    642c:	df 93       	push	r29
    642e:	00 97       	sbiw	r24, 0x00	; 0
    6430:	09 f4       	brne	.+2      	; 0x6434 <free+0xa>
    6432:	91 c0       	rjmp	.+290    	; 0x6556 <free+0x12c>
    6434:	fc 01       	movw	r30, r24
    6436:	32 97       	sbiw	r30, 0x02	; 2
    6438:	13 82       	std	Z+3, r1	; 0x03
    643a:	12 82       	std	Z+2, r1	; 0x02
    643c:	60 91 e4 10 	lds	r22, 0x10E4
    6440:	70 91 e5 10 	lds	r23, 0x10E5
    6444:	61 15       	cp	r22, r1
    6446:	71 05       	cpc	r23, r1
    6448:	81 f4       	brne	.+32     	; 0x646a <free+0x40>
    644a:	20 81       	ld	r18, Z
    644c:	31 81       	ldd	r19, Z+1	; 0x01
    644e:	28 0f       	add	r18, r24
    6450:	39 1f       	adc	r19, r25
    6452:	80 91 e2 10 	lds	r24, 0x10E2
    6456:	90 91 e3 10 	lds	r25, 0x10E3
    645a:	82 17       	cp	r24, r18
    645c:	93 07       	cpc	r25, r19
    645e:	99 f5       	brne	.+102    	; 0x64c6 <free+0x9c>
    6460:	f0 93 e3 10 	sts	0x10E3, r31
    6464:	e0 93 e2 10 	sts	0x10E2, r30
    6468:	76 c0       	rjmp	.+236    	; 0x6556 <free+0x12c>
    646a:	db 01       	movw	r26, r22
    646c:	80 e0       	ldi	r24, 0x00	; 0
    646e:	90 e0       	ldi	r25, 0x00	; 0
    6470:	02 c0       	rjmp	.+4      	; 0x6476 <free+0x4c>
    6472:	cd 01       	movw	r24, r26
    6474:	d9 01       	movw	r26, r18
    6476:	ae 17       	cp	r26, r30
    6478:	bf 07       	cpc	r27, r31
    647a:	48 f4       	brcc	.+18     	; 0x648e <free+0x64>
    647c:	12 96       	adiw	r26, 0x02	; 2
    647e:	2d 91       	ld	r18, X+
    6480:	3c 91       	ld	r19, X
    6482:	13 97       	sbiw	r26, 0x03	; 3
    6484:	21 15       	cp	r18, r1
    6486:	31 05       	cpc	r19, r1
    6488:	a1 f7       	brne	.-24     	; 0x6472 <free+0x48>
    648a:	cd 01       	movw	r24, r26
    648c:	21 c0       	rjmp	.+66     	; 0x64d0 <free+0xa6>
    648e:	b3 83       	std	Z+3, r27	; 0x03
    6490:	a2 83       	std	Z+2, r26	; 0x02
    6492:	ef 01       	movw	r28, r30
    6494:	49 91       	ld	r20, Y+
    6496:	59 91       	ld	r21, Y+
    6498:	9e 01       	movw	r18, r28
    649a:	24 0f       	add	r18, r20
    649c:	35 1f       	adc	r19, r21
    649e:	a2 17       	cp	r26, r18
    64a0:	b3 07       	cpc	r27, r19
    64a2:	79 f4       	brne	.+30     	; 0x64c2 <free+0x98>
    64a4:	2d 91       	ld	r18, X+
    64a6:	3c 91       	ld	r19, X
    64a8:	11 97       	sbiw	r26, 0x01	; 1
    64aa:	24 0f       	add	r18, r20
    64ac:	35 1f       	adc	r19, r21
    64ae:	2e 5f       	subi	r18, 0xFE	; 254
    64b0:	3f 4f       	sbci	r19, 0xFF	; 255
    64b2:	31 83       	std	Z+1, r19	; 0x01
    64b4:	20 83       	st	Z, r18
    64b6:	12 96       	adiw	r26, 0x02	; 2
    64b8:	2d 91       	ld	r18, X+
    64ba:	3c 91       	ld	r19, X
    64bc:	13 97       	sbiw	r26, 0x03	; 3
    64be:	33 83       	std	Z+3, r19	; 0x03
    64c0:	22 83       	std	Z+2, r18	; 0x02
    64c2:	00 97       	sbiw	r24, 0x00	; 0
    64c4:	29 f4       	brne	.+10     	; 0x64d0 <free+0xa6>
    64c6:	f0 93 e5 10 	sts	0x10E5, r31
    64ca:	e0 93 e4 10 	sts	0x10E4, r30
    64ce:	43 c0       	rjmp	.+134    	; 0x6556 <free+0x12c>
    64d0:	dc 01       	movw	r26, r24
    64d2:	13 96       	adiw	r26, 0x03	; 3
    64d4:	fc 93       	st	X, r31
    64d6:	ee 93       	st	-X, r30
    64d8:	12 97       	sbiw	r26, 0x02	; 2
    64da:	4d 91       	ld	r20, X+
    64dc:	5d 91       	ld	r21, X+
    64de:	a4 0f       	add	r26, r20
    64e0:	b5 1f       	adc	r27, r21
    64e2:	ea 17       	cp	r30, r26
    64e4:	fb 07       	cpc	r31, r27
    64e6:	69 f4       	brne	.+26     	; 0x6502 <free+0xd8>
    64e8:	20 81       	ld	r18, Z
    64ea:	31 81       	ldd	r19, Z+1	; 0x01
    64ec:	24 0f       	add	r18, r20
    64ee:	35 1f       	adc	r19, r21
    64f0:	2e 5f       	subi	r18, 0xFE	; 254
    64f2:	3f 4f       	sbci	r19, 0xFF	; 255
    64f4:	ec 01       	movw	r28, r24
    64f6:	39 83       	std	Y+1, r19	; 0x01
    64f8:	28 83       	st	Y, r18
    64fa:	22 81       	ldd	r18, Z+2	; 0x02
    64fc:	33 81       	ldd	r19, Z+3	; 0x03
    64fe:	3b 83       	std	Y+3, r19	; 0x03
    6500:	2a 83       	std	Y+2, r18	; 0x02
    6502:	e0 e0       	ldi	r30, 0x00	; 0
    6504:	f0 e0       	ldi	r31, 0x00	; 0
    6506:	02 c0       	rjmp	.+4      	; 0x650c <free+0xe2>
    6508:	fb 01       	movw	r30, r22
    650a:	bc 01       	movw	r22, r24
    650c:	db 01       	movw	r26, r22
    650e:	12 96       	adiw	r26, 0x02	; 2
    6510:	8d 91       	ld	r24, X+
    6512:	9c 91       	ld	r25, X
    6514:	13 97       	sbiw	r26, 0x03	; 3
    6516:	00 97       	sbiw	r24, 0x00	; 0
    6518:	b9 f7       	brne	.-18     	; 0x6508 <free+0xde>
    651a:	9b 01       	movw	r18, r22
    651c:	2e 5f       	subi	r18, 0xFE	; 254
    651e:	3f 4f       	sbci	r19, 0xFF	; 255
    6520:	8d 91       	ld	r24, X+
    6522:	9c 91       	ld	r25, X
    6524:	11 97       	sbiw	r26, 0x01	; 1
    6526:	82 0f       	add	r24, r18
    6528:	93 1f       	adc	r25, r19
    652a:	40 91 e2 10 	lds	r20, 0x10E2
    652e:	50 91 e3 10 	lds	r21, 0x10E3
    6532:	48 17       	cp	r20, r24
    6534:	59 07       	cpc	r21, r25
    6536:	79 f4       	brne	.+30     	; 0x6556 <free+0x12c>
    6538:	30 97       	sbiw	r30, 0x00	; 0
    653a:	29 f4       	brne	.+10     	; 0x6546 <free+0x11c>
    653c:	10 92 e5 10 	sts	0x10E5, r1
    6540:	10 92 e4 10 	sts	0x10E4, r1
    6544:	02 c0       	rjmp	.+4      	; 0x654a <free+0x120>
    6546:	13 82       	std	Z+3, r1	; 0x03
    6548:	12 82       	std	Z+2, r1	; 0x02
    654a:	22 50       	subi	r18, 0x02	; 2
    654c:	30 40       	sbci	r19, 0x00	; 0
    654e:	30 93 e3 10 	sts	0x10E3, r19
    6552:	20 93 e2 10 	sts	0x10E2, r18
    6556:	df 91       	pop	r29
    6558:	cf 91       	pop	r28
    655a:	08 95       	ret

0000655c <__eerd_byte_m1280>:
    655c:	f9 99       	sbic	0x1f, 1	; 31
    655e:	fe cf       	rjmp	.-4      	; 0x655c <__eerd_byte_m1280>
    6560:	92 bd       	out	0x22, r25	; 34
    6562:	81 bd       	out	0x21, r24	; 33
    6564:	f8 9a       	sbi	0x1f, 0	; 31
    6566:	99 27       	eor	r25, r25
    6568:	80 b5       	in	r24, 0x20	; 32
    656a:	08 95       	ret

0000656c <__eewr_byte_m1280>:
    656c:	26 2f       	mov	r18, r22

0000656e <__eewr_r18_m1280>:
    656e:	f9 99       	sbic	0x1f, 1	; 31
    6570:	fe cf       	rjmp	.-4      	; 0x656e <__eewr_r18_m1280>
    6572:	1f ba       	out	0x1f, r1	; 31
    6574:	92 bd       	out	0x22, r25	; 34
    6576:	81 bd       	out	0x21, r24	; 33
    6578:	20 bd       	out	0x20, r18	; 32
    657a:	0f b6       	in	r0, 0x3f	; 63
    657c:	f8 94       	cli
    657e:	fa 9a       	sbi	0x1f, 2	; 31
    6580:	f9 9a       	sbi	0x1f, 1	; 31
    6582:	0f be       	out	0x3f, r0	; 63
    6584:	01 96       	adiw	r24, 0x01	; 1
    6586:	08 95       	ret

00006588 <__do_global_dtors>:
    6588:	12 e0       	ldi	r17, 0x02	; 2
    658a:	ce e5       	ldi	r28, 0x5E	; 94
    658c:	d2 e0       	ldi	r29, 0x02	; 2
    658e:	00 e0       	ldi	r16, 0x00	; 0
    6590:	06 c0       	rjmp	.+12     	; 0x659e <__do_global_dtors+0x16>
    6592:	22 97       	sbiw	r28, 0x02	; 2
    6594:	01 09       	sbc	r16, r1
    6596:	fe 01       	movw	r30, r28
    6598:	0b bf       	out	0x3b, r16	; 59
    659a:	0e 94 77 31 	call	0x62ee	; 0x62ee <__tablejump_elpm__>
    659e:	c2 36       	cpi	r28, 0x62	; 98
    65a0:	d1 07       	cpc	r29, r17
    65a2:	80 e0       	ldi	r24, 0x00	; 0
    65a4:	08 07       	cpc	r16, r24
    65a6:	a9 f7       	brne	.-22     	; 0x6592 <__do_global_dtors+0xa>
    65a8:	f8 94       	cli

000065aa <__stop_program>:
    65aa:	ff cf       	rjmp	.-2      	; 0x65aa <__stop_program>
